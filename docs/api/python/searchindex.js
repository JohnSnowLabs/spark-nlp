Search.setIndex({"docnames": ["_api/modules", "_api/sparknlp", "_api/sparknlp.annotation", "_api/sparknlp.annotation_audio", "_api/sparknlp.annotation_image", "_api/sparknlp.annotator", "_api/sparknlp.annotator.audio", "_api/sparknlp.annotator.audio.hubert_for_ctc", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc", "_api/sparknlp.annotator.audio.whisper_for_ctc", "_api/sparknlp.annotator.chunk2_doc", "_api/sparknlp.annotator.chunker", "_api/sparknlp.annotator.classifier_dl", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.classifier_dl", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.sentiment_dl", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification", "_api/sparknlp.annotator.cleaners", "_api/sparknlp.annotator.cleaners.cleaner", "_api/sparknlp.annotator.cleaners.extractor", "_api/sparknlp.annotator.coref", "_api/sparknlp.annotator.coref.spanbert_coref", "_api/sparknlp.annotator.cv", "_api/sparknlp.annotator.cv.blip_for_question_answering", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification", "_api/sparknlp.annotator.cv.convnext_for_image_classification", "_api/sparknlp.annotator.cv.florence2_transformer", "_api/sparknlp.annotator.cv.gemma3_for_multimodal", "_api/sparknlp.annotator.cv.internvl_for_multimodal", "_api/sparknlp.annotator.cv.janus_for_multimodal", "_api/sparknlp.annotator.cv.llava_for_multimodal", "_api/sparknlp.annotator.cv.mllama_for_multimodal", "_api/sparknlp.annotator.cv.paligemma_for_multimodal", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal", "_api/sparknlp.annotator.cv.qwen2vl_transformer", "_api/sparknlp.annotator.cv.smolvlm_transformer", "_api/sparknlp.annotator.cv.swin_for_image_classification", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning", "_api/sparknlp.annotator.cv.vit_for_image_classification", "_api/sparknlp.annotator.date2_chunk", "_api/sparknlp.annotator.dependency", "_api/sparknlp.annotator.dependency.dependency_parser", "_api/sparknlp.annotator.dependency.typed_dependency_parser", "_api/sparknlp.annotator.document_character_text_splitter", "_api/sparknlp.annotator.document_normalizer", "_api/sparknlp.annotator.document_token_splitter", "_api/sparknlp.annotator.document_token_splitter_test", "_api/sparknlp.annotator.embeddings", "_api/sparknlp.annotator.embeddings.albert_embeddings", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings", "_api/sparknlp.annotator.embeddings.bert_embeddings", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings", "_api/sparknlp.annotator.embeddings.bge_embeddings", "_api/sparknlp.annotator.embeddings.camembert_embeddings", "_api/sparknlp.annotator.embeddings.chunk_embeddings", "_api/sparknlp.annotator.embeddings.deberta_embeddings", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings", "_api/sparknlp.annotator.embeddings.doc2vec", "_api/sparknlp.annotator.embeddings.e5_embeddings", "_api/sparknlp.annotator.embeddings.elmo_embeddings", "_api/sparknlp.annotator.embeddings.instructor_embeddings", "_api/sparknlp.annotator.embeddings.longformer_embeddings", "_api/sparknlp.annotator.embeddings.mpnet_embeddings", "_api/sparknlp.annotator.embeddings.mxbai_embeddings", "_api/sparknlp.annotator.embeddings.nomic_embeddings", "_api/sparknlp.annotator.embeddings.roberta_embeddings", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.sentence_embeddings", "_api/sparknlp.annotator.embeddings.snowflake_embeddings", "_api/sparknlp.annotator.embeddings.uae_embeddings", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder", "_api/sparknlp.annotator.embeddings.word2vec", "_api/sparknlp.annotator.embeddings.word_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.xlnet_embeddings", "_api/sparknlp.annotator.er", "_api/sparknlp.annotator.er.entity_ruler", "_api/sparknlp.annotator.graph_extraction", "_api/sparknlp.annotator.keyword_extraction", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction", "_api/sparknlp.annotator.ld_dl", "_api/sparknlp.annotator.ld_dl.language_detector_dl", "_api/sparknlp.annotator.lemmatizer", "_api/sparknlp.annotator.matcher", "_api/sparknlp.annotator.matcher.big_text_matcher", "_api/sparknlp.annotator.matcher.date_matcher", "_api/sparknlp.annotator.matcher.multi_date_matcher", "_api/sparknlp.annotator.matcher.regex_matcher", "_api/sparknlp.annotator.matcher.text_matcher", "_api/sparknlp.annotator.n_gram_generator", "_api/sparknlp.annotator.ner", "_api/sparknlp.annotator.ner.ner_approach", "_api/sparknlp.annotator.ner.ner_converter", "_api/sparknlp.annotator.ner.ner_crf", "_api/sparknlp.annotator.ner.ner_dl", "_api/sparknlp.annotator.ner.ner_overwriter", "_api/sparknlp.annotator.ner.zero_shot_ner_model", "_api/sparknlp.annotator.normalizer", "_api/sparknlp.annotator.openai", "_api/sparknlp.annotator.openai.openai_completion", "_api/sparknlp.annotator.openai.openai_embeddings", "_api/sparknlp.annotator.param", "_api/sparknlp.annotator.param.classifier_encoder", "_api/sparknlp.annotator.param.evaluation_dl_params", "_api/sparknlp.annotator.pos", "_api/sparknlp.annotator.pos.perceptron", "_api/sparknlp.annotator.sentence", "_api/sparknlp.annotator.sentence.sentence_detector", "_api/sparknlp.annotator.sentence.sentence_detector_dl", "_api/sparknlp.annotator.sentiment", "_api/sparknlp.annotator.sentiment.sentiment_detector", "_api/sparknlp.annotator.sentiment.vivekn_sentiment", "_api/sparknlp.annotator.seq2seq", "_api/sparknlp.annotator.seq2seq.auto_gguf_model", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model", "_api/sparknlp.annotator.seq2seq.bart_transformer", "_api/sparknlp.annotator.seq2seq.cohere_transformer", "_api/sparknlp.annotator.seq2seq.cpm_transformer", "_api/sparknlp.annotator.seq2seq.gpt2_transformer", "_api/sparknlp.annotator.seq2seq.llama2_transformer", "_api/sparknlp.annotator.seq2seq.llama3_transformer", "_api/sparknlp.annotator.seq2seq.m2m100_transformer", "_api/sparknlp.annotator.seq2seq.marian_transformer", "_api/sparknlp.annotator.seq2seq.mistral_transformer", "_api/sparknlp.annotator.seq2seq.nllb_transformer", "_api/sparknlp.annotator.seq2seq.olmo_transformer", "_api/sparknlp.annotator.seq2seq.phi2_transformer", "_api/sparknlp.annotator.seq2seq.phi3_transformer", "_api/sparknlp.annotator.seq2seq.qwen_transformer", "_api/sparknlp.annotator.seq2seq.starcoder_transformer", "_api/sparknlp.annotator.seq2seq.t5_transformer", "_api/sparknlp.annotator.similarity", "_api/sparknlp.annotator.similarity.document_similarity_ranker", "_api/sparknlp.annotator.spell_check", "_api/sparknlp.annotator.spell_check.context_spell_checker", "_api/sparknlp.annotator.spell_check.norvig_sweeting", "_api/sparknlp.annotator.spell_check.symmetric_delete", "_api/sparknlp.annotator.stemmer", "_api/sparknlp.annotator.stop_words_cleaner", "_api/sparknlp.annotator.tf_ner_dl_graph_builder", "_api/sparknlp.annotator.token", "_api/sparknlp.annotator.token.chunk_tokenizer", "_api/sparknlp.annotator.token.recursive_tokenizer", "_api/sparknlp.annotator.token.regex_tokenizer", "_api/sparknlp.annotator.token.tokenizer", "_api/sparknlp.annotator.token2_chunk", "_api/sparknlp.annotator.ws", "_api/sparknlp.annotator.ws.word_segmenter", "_api/sparknlp.base", "_api/sparknlp.base.audio_assembler", "_api/sparknlp.base.doc2_chunk", "_api/sparknlp.base.document_assembler", "_api/sparknlp.base.embeddings_finisher", "_api/sparknlp.base.finisher", "_api/sparknlp.base.graph_finisher", "_api/sparknlp.base.has_recursive_fit", "_api/sparknlp.base.has_recursive_transform", "_api/sparknlp.base.image_assembler", "_api/sparknlp.base.light_pipeline", "_api/sparknlp.base.multi_document_assembler", "_api/sparknlp.base.prompt_assembler", "_api/sparknlp.base.recursive_pipeline", "_api/sparknlp.base.table_assembler", "_api/sparknlp.base.token_assembler", "_api/sparknlp.common", "_api/sparknlp.common.annotator_approach", "_api/sparknlp.common.annotator_model", "_api/sparknlp.common.annotator_properties", "_api/sparknlp.common.annotator_type", "_api/sparknlp.common.coverage_result", "_api/sparknlp.common.match_strategy", "_api/sparknlp.common.properties", "_api/sparknlp.common.read_as", "_api/sparknlp.common.recursive_annotator_approach", "_api/sparknlp.common.storage", "_api/sparknlp.common.utils", "_api/sparknlp.functions", "_api/sparknlp.internal", "_api/sparknlp.internal.annotator_java_ml", "_api/sparknlp.internal.annotator_transformer", "_api/sparknlp.internal.extended_java_wrapper", "_api/sparknlp.internal.params_getters_setters", "_api/sparknlp.internal.recursive", "_api/sparknlp.logging", "_api/sparknlp.logging.comet", "_api/sparknlp.partition", "_api/sparknlp.partition.partition", "_api/sparknlp.partition.partition_properties", "_api/sparknlp.partition.partition_transformer", "_api/sparknlp.pretrained", "_api/sparknlp.pretrained.pretrained_pipeline", "_api/sparknlp.pretrained.resource_downloader", "_api/sparknlp.pretrained.utils", "_api/sparknlp.reader", "_api/sparknlp.reader.enums", "_api/sparknlp.reader.pdf_to_text", "_api/sparknlp.reader.sparknlp_reader", "_api/sparknlp.training", "_api/sparknlp.training.conll", "_api/sparknlp.training.conllu", "_api/sparknlp.training.pos", "_api/sparknlp.training.pub_tator", "_api/sparknlp.training.spacy_to_annotation", "_api/sparknlp.training.tfgraphs", "_api/sparknlp.upload_to_hub", "_api/sparknlp.util", "getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distilbert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/cleaners/cleaner/index", "reference/autosummary/sparknlp/annotator/cleaners/extractor/index", "reference/autosummary/sparknlp/annotator/cleaners/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/blip_for_question_answering/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/florence2_transformer/index", "reference/autosummary/sparknlp/annotator/cv/gemma3_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/internvl_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/janus_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/llava_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/mllama_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/paligemma_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/phi3_vision_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/qwen2vl_transformer/index", "reference/autosummary/sparknlp/annotator/cv/smolvlm_transformer/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/auto_gguf_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_vision_model/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/cohere_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/olmo_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/prompt_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/partition/index", "reference/autosummary/sparknlp/partition/partition/index", "reference/autosummary/sparknlp/partition/partition_properties/index", "reference/autosummary/sparknlp/partition/partition_transformer/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/reader/enums/index", "reference/autosummary/sparknlp/reader/index", "reference/autosummary/sparknlp/reader/pdf_to_text/index", "reference/autosummary/sparknlp/reader/sparknlp_reader/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["_api/modules.rst", "_api/sparknlp.rst", "_api/sparknlp.annotation.rst", "_api/sparknlp.annotation_audio.rst", "_api/sparknlp.annotation_image.rst", "_api/sparknlp.annotator.rst", "_api/sparknlp.annotator.audio.rst", "_api/sparknlp.annotator.audio.hubert_for_ctc.rst", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc.rst", "_api/sparknlp.annotator.audio.whisper_for_ctc.rst", "_api/sparknlp.annotator.chunk2_doc.rst", "_api/sparknlp.annotator.chunker.rst", "_api/sparknlp.annotator.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.sentiment_dl.rst", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification.rst", "_api/sparknlp.annotator.cleaners.rst", "_api/sparknlp.annotator.cleaners.cleaner.rst", "_api/sparknlp.annotator.cleaners.extractor.rst", "_api/sparknlp.annotator.coref.rst", "_api/sparknlp.annotator.coref.spanbert_coref.rst", "_api/sparknlp.annotator.cv.rst", "_api/sparknlp.annotator.cv.blip_for_question_answering.rst", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification.rst", "_api/sparknlp.annotator.cv.convnext_for_image_classification.rst", "_api/sparknlp.annotator.cv.florence2_transformer.rst", "_api/sparknlp.annotator.cv.gemma3_for_multimodal.rst", "_api/sparknlp.annotator.cv.internvl_for_multimodal.rst", "_api/sparknlp.annotator.cv.janus_for_multimodal.rst", "_api/sparknlp.annotator.cv.llava_for_multimodal.rst", "_api/sparknlp.annotator.cv.mllama_for_multimodal.rst", "_api/sparknlp.annotator.cv.paligemma_for_multimodal.rst", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal.rst", "_api/sparknlp.annotator.cv.qwen2vl_transformer.rst", "_api/sparknlp.annotator.cv.smolvlm_transformer.rst", "_api/sparknlp.annotator.cv.swin_for_image_classification.rst", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.rst", "_api/sparknlp.annotator.cv.vit_for_image_classification.rst", "_api/sparknlp.annotator.date2_chunk.rst", "_api/sparknlp.annotator.dependency.rst", "_api/sparknlp.annotator.dependency.dependency_parser.rst", "_api/sparknlp.annotator.dependency.typed_dependency_parser.rst", "_api/sparknlp.annotator.document_character_text_splitter.rst", "_api/sparknlp.annotator.document_normalizer.rst", "_api/sparknlp.annotator.document_token_splitter.rst", "_api/sparknlp.annotator.document_token_splitter_test.rst", "_api/sparknlp.annotator.embeddings.rst", "_api/sparknlp.annotator.embeddings.albert_embeddings.rst", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.bge_embeddings.rst", "_api/sparknlp.annotator.embeddings.camembert_embeddings.rst", "_api/sparknlp.annotator.embeddings.chunk_embeddings.rst", "_api/sparknlp.annotator.embeddings.deberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.doc2vec.rst", "_api/sparknlp.annotator.embeddings.e5_embeddings.rst", "_api/sparknlp.annotator.embeddings.elmo_embeddings.rst", "_api/sparknlp.annotator.embeddings.instructor_embeddings.rst", "_api/sparknlp.annotator.embeddings.longformer_embeddings.rst", "_api/sparknlp.annotator.embeddings.mpnet_embeddings.rst", "_api/sparknlp.annotator.embeddings.mxbai_embeddings.rst", "_api/sparknlp.annotator.embeddings.nomic_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.snowflake_embeddings.rst", "_api/sparknlp.annotator.embeddings.uae_embeddings.rst", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder.rst", "_api/sparknlp.annotator.embeddings.word2vec.rst", "_api/sparknlp.annotator.embeddings.word_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlnet_embeddings.rst", "_api/sparknlp.annotator.er.rst", "_api/sparknlp.annotator.er.entity_ruler.rst", "_api/sparknlp.annotator.graph_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction.rst", "_api/sparknlp.annotator.ld_dl.rst", "_api/sparknlp.annotator.ld_dl.language_detector_dl.rst", "_api/sparknlp.annotator.lemmatizer.rst", "_api/sparknlp.annotator.matcher.rst", "_api/sparknlp.annotator.matcher.big_text_matcher.rst", "_api/sparknlp.annotator.matcher.date_matcher.rst", "_api/sparknlp.annotator.matcher.multi_date_matcher.rst", "_api/sparknlp.annotator.matcher.regex_matcher.rst", "_api/sparknlp.annotator.matcher.text_matcher.rst", "_api/sparknlp.annotator.n_gram_generator.rst", "_api/sparknlp.annotator.ner.rst", "_api/sparknlp.annotator.ner.ner_approach.rst", "_api/sparknlp.annotator.ner.ner_converter.rst", "_api/sparknlp.annotator.ner.ner_crf.rst", "_api/sparknlp.annotator.ner.ner_dl.rst", "_api/sparknlp.annotator.ner.ner_overwriter.rst", "_api/sparknlp.annotator.ner.zero_shot_ner_model.rst", "_api/sparknlp.annotator.normalizer.rst", "_api/sparknlp.annotator.openai.rst", "_api/sparknlp.annotator.openai.openai_completion.rst", "_api/sparknlp.annotator.openai.openai_embeddings.rst", "_api/sparknlp.annotator.param.rst", "_api/sparknlp.annotator.param.classifier_encoder.rst", "_api/sparknlp.annotator.param.evaluation_dl_params.rst", "_api/sparknlp.annotator.pos.rst", "_api/sparknlp.annotator.pos.perceptron.rst", "_api/sparknlp.annotator.sentence.rst", "_api/sparknlp.annotator.sentence.sentence_detector.rst", "_api/sparknlp.annotator.sentence.sentence_detector_dl.rst", "_api/sparknlp.annotator.sentiment.rst", "_api/sparknlp.annotator.sentiment.sentiment_detector.rst", "_api/sparknlp.annotator.sentiment.vivekn_sentiment.rst", "_api/sparknlp.annotator.seq2seq.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_model.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model.rst", "_api/sparknlp.annotator.seq2seq.bart_transformer.rst", "_api/sparknlp.annotator.seq2seq.cohere_transformer.rst", "_api/sparknlp.annotator.seq2seq.cpm_transformer.rst", "_api/sparknlp.annotator.seq2seq.gpt2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama3_transformer.rst", "_api/sparknlp.annotator.seq2seq.m2m100_transformer.rst", "_api/sparknlp.annotator.seq2seq.marian_transformer.rst", "_api/sparknlp.annotator.seq2seq.mistral_transformer.rst", "_api/sparknlp.annotator.seq2seq.nllb_transformer.rst", "_api/sparknlp.annotator.seq2seq.olmo_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi2_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi3_transformer.rst", "_api/sparknlp.annotator.seq2seq.qwen_transformer.rst", "_api/sparknlp.annotator.seq2seq.starcoder_transformer.rst", "_api/sparknlp.annotator.seq2seq.t5_transformer.rst", "_api/sparknlp.annotator.similarity.rst", "_api/sparknlp.annotator.similarity.document_similarity_ranker.rst", "_api/sparknlp.annotator.spell_check.rst", "_api/sparknlp.annotator.spell_check.context_spell_checker.rst", "_api/sparknlp.annotator.spell_check.norvig_sweeting.rst", "_api/sparknlp.annotator.spell_check.symmetric_delete.rst", "_api/sparknlp.annotator.stemmer.rst", "_api/sparknlp.annotator.stop_words_cleaner.rst", "_api/sparknlp.annotator.tf_ner_dl_graph_builder.rst", "_api/sparknlp.annotator.token.rst", "_api/sparknlp.annotator.token.chunk_tokenizer.rst", "_api/sparknlp.annotator.token.recursive_tokenizer.rst", "_api/sparknlp.annotator.token.regex_tokenizer.rst", "_api/sparknlp.annotator.token.tokenizer.rst", "_api/sparknlp.annotator.token2_chunk.rst", "_api/sparknlp.annotator.ws.rst", "_api/sparknlp.annotator.ws.word_segmenter.rst", "_api/sparknlp.base.rst", "_api/sparknlp.base.audio_assembler.rst", "_api/sparknlp.base.doc2_chunk.rst", "_api/sparknlp.base.document_assembler.rst", "_api/sparknlp.base.embeddings_finisher.rst", "_api/sparknlp.base.finisher.rst", "_api/sparknlp.base.graph_finisher.rst", "_api/sparknlp.base.has_recursive_fit.rst", "_api/sparknlp.base.has_recursive_transform.rst", "_api/sparknlp.base.image_assembler.rst", "_api/sparknlp.base.light_pipeline.rst", "_api/sparknlp.base.multi_document_assembler.rst", "_api/sparknlp.base.prompt_assembler.rst", "_api/sparknlp.base.recursive_pipeline.rst", "_api/sparknlp.base.table_assembler.rst", "_api/sparknlp.base.token_assembler.rst", "_api/sparknlp.common.rst", "_api/sparknlp.common.annotator_approach.rst", "_api/sparknlp.common.annotator_model.rst", "_api/sparknlp.common.annotator_properties.rst", "_api/sparknlp.common.annotator_type.rst", "_api/sparknlp.common.coverage_result.rst", "_api/sparknlp.common.match_strategy.rst", "_api/sparknlp.common.properties.rst", "_api/sparknlp.common.read_as.rst", "_api/sparknlp.common.recursive_annotator_approach.rst", "_api/sparknlp.common.storage.rst", "_api/sparknlp.common.utils.rst", "_api/sparknlp.functions.rst", "_api/sparknlp.internal.rst", "_api/sparknlp.internal.annotator_java_ml.rst", "_api/sparknlp.internal.annotator_transformer.rst", "_api/sparknlp.internal.extended_java_wrapper.rst", "_api/sparknlp.internal.params_getters_setters.rst", "_api/sparknlp.internal.recursive.rst", "_api/sparknlp.logging.rst", "_api/sparknlp.logging.comet.rst", "_api/sparknlp.partition.rst", "_api/sparknlp.partition.partition.rst", "_api/sparknlp.partition.partition_properties.rst", "_api/sparknlp.partition.partition_transformer.rst", "_api/sparknlp.pretrained.rst", "_api/sparknlp.pretrained.pretrained_pipeline.rst", "_api/sparknlp.pretrained.resource_downloader.rst", "_api/sparknlp.pretrained.utils.rst", "_api/sparknlp.reader.rst", "_api/sparknlp.reader.enums.rst", "_api/sparknlp.reader.pdf_to_text.rst", "_api/sparknlp.reader.sparknlp_reader.rst", "_api/sparknlp.training.rst", "_api/sparknlp.training.conll.rst", "_api/sparknlp.training.conllu.rst", "_api/sparknlp.training.pos.rst", "_api/sparknlp.training.pub_tator.rst", "_api/sparknlp.training.spacy_to_annotation.rst", "_api/sparknlp.training.tfgraphs.rst", "_api/sparknlp.upload_to_hub.rst", "_api/sparknlp.util.rst", "getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distilbert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/cleaner/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/extractor/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/blip_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/florence2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/gemma3_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/internvl_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/janus_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/llava_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/mllama_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/paligemma_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/phi3_vision_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/qwen2vl_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/smolvlm_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/auto_gguf_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_vision_model/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/cohere_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/olmo_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/prompt_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/partition/index.rst", "reference/autosummary/sparknlp/partition/partition/index.rst", "reference/autosummary/sparknlp/partition/partition_properties/index.rst", "reference/autosummary/sparknlp/partition/partition_transformer/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/reader/enums/index.rst", "reference/autosummary/sparknlp/reader/index.rst", "reference/autosummary/sparknlp/reader/pdf_to_text/index.rst", "reference/autosummary/sparknlp/reader/sparknlp_reader/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["sparknlp", "sparknlp package", "sparknlp.annotation module", "sparknlp.annotation_audio module", "sparknlp.annotation_image module", "sparknlp.annotator package", "sparknlp.annotator.audio package", "sparknlp.annotator.audio.hubert_for_ctc module", "sparknlp.annotator.audio.wav2vec2_for_ctc module", "sparknlp.annotator.audio.whisper_for_ctc module", "sparknlp.annotator.chunk2_doc module", "sparknlp.annotator.chunker module", "sparknlp.annotator.classifier_dl package", "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.albert_for_question_answering module", "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.albert_for_token_classification module", "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.bert_for_question_answering module", "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.bert_for_token_classification module", "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.camembert_for_question_answering module", "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.camembert_for_token_classification module", "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.classifier_dl module", "sparknlp.annotator.classifier_dl.deberta_for_question_answering module", "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.deberta_for_token_classification module", "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module", "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.longformer_for_question_answering module", "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module", "sparknlp.annotator.classifier_dl.longformer_for_token_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module", "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module", "sparknlp.annotator.classifier_dl.multi_classifier_dl module", "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.sentiment_dl module", "sparknlp.annotator.classifier_dl.tapas_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module", "sparknlp.annotator.cleaners package", "sparknlp.annotator.cleaners.cleaner module", "sparknlp.annotator.cleaners.extractor module", "sparknlp.annotator.coref package", "sparknlp.annotator.coref.spanbert_coref module", "sparknlp.annotator.cv package", "sparknlp.annotator.cv.blip_for_question_answering module", "sparknlp.annotator.cv.clip_for_zero_shot_classification module", "sparknlp.annotator.cv.convnext_for_image_classification module", "sparknlp.annotator.cv.florence2_transformer module", "sparknlp.annotator.cv.gemma3_for_multimodal module", "sparknlp.annotator.cv.internvl_for_multimodal module", "sparknlp.annotator.cv.janus_for_multimodal module", "sparknlp.annotator.cv.llava_for_multimodal module", "sparknlp.annotator.cv.mllama_for_multimodal module", "sparknlp.annotator.cv.paligemma_for_multimodal module", "sparknlp.annotator.cv.phi3_vision_for_multimodal module", "sparknlp.annotator.cv.qwen2vl_transformer module", "sparknlp.annotator.cv.smolvlm_transformer module", "sparknlp.annotator.cv.swin_for_image_classification module", "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module", "sparknlp.annotator.cv.vit_for_image_classification module", "sparknlp.annotator.date2_chunk module", "sparknlp.annotator.dependency package", "sparknlp.annotator.dependency.dependency_parser module", "sparknlp.annotator.dependency.typed_dependency_parser module", "sparknlp.annotator.document_character_text_splitter module", "sparknlp.annotator.document_normalizer module", "sparknlp.annotator.document_token_splitter module", "sparknlp.annotator.document_token_splitter_test module", "sparknlp.annotator.embeddings package", "sparknlp.annotator.embeddings.albert_embeddings module", "sparknlp.annotator.embeddings.auto_gguf_embeddings module", "sparknlp.annotator.embeddings.bert_embeddings module", "sparknlp.annotator.embeddings.bert_sentence_embeddings module", "sparknlp.annotator.embeddings.bge_embeddings module", "sparknlp.annotator.embeddings.camembert_embeddings module", "sparknlp.annotator.embeddings.chunk_embeddings module", "sparknlp.annotator.embeddings.deberta_embeddings module", "sparknlp.annotator.embeddings.distil_bert_embeddings module", "sparknlp.annotator.embeddings.doc2vec module", "sparknlp.annotator.embeddings.e5_embeddings module", "sparknlp.annotator.embeddings.elmo_embeddings module", "sparknlp.annotator.embeddings.instructor_embeddings module", "sparknlp.annotator.embeddings.longformer_embeddings module", "sparknlp.annotator.embeddings.mpnet_embeddings module", "sparknlp.annotator.embeddings.mxbai_embeddings module", "sparknlp.annotator.embeddings.nomic_embeddings module", "sparknlp.annotator.embeddings.roberta_embeddings module", "sparknlp.annotator.embeddings.roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.sentence_embeddings module", "sparknlp.annotator.embeddings.snowflake_embeddings module", "sparknlp.annotator.embeddings.uae_embeddings module", "sparknlp.annotator.embeddings.universal_sentence_encoder module", "sparknlp.annotator.embeddings.word2vec module", "sparknlp.annotator.embeddings.word_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.xlnet_embeddings module", "sparknlp.annotator.er package", "sparknlp.annotator.er.entity_ruler module", "sparknlp.annotator.graph_extraction module", "sparknlp.annotator.keyword_extraction package", "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module", "sparknlp.annotator.ld_dl package", "sparknlp.annotator.ld_dl.language_detector_dl module", "sparknlp.annotator.lemmatizer module", "sparknlp.annotator.matcher package", "sparknlp.annotator.matcher.big_text_matcher module", "sparknlp.annotator.matcher.date_matcher module", "sparknlp.annotator.matcher.multi_date_matcher module", "sparknlp.annotator.matcher.regex_matcher module", "sparknlp.annotator.matcher.text_matcher module", "sparknlp.annotator.n_gram_generator module", "sparknlp.annotator.ner package", "sparknlp.annotator.ner.ner_approach module", "sparknlp.annotator.ner.ner_converter module", "sparknlp.annotator.ner.ner_crf module", "sparknlp.annotator.ner.ner_dl module", "sparknlp.annotator.ner.ner_overwriter module", "sparknlp.annotator.ner.zero_shot_ner_model module", "sparknlp.annotator.normalizer module", "sparknlp.annotator.openai package", "sparknlp.annotator.openai.openai_completion module", "sparknlp.annotator.openai.openai_embeddings module", "sparknlp.annotator.param package", "sparknlp.annotator.param.classifier_encoder module", "sparknlp.annotator.param.evaluation_dl_params module", "sparknlp.annotator.pos package", "sparknlp.annotator.pos.perceptron module", "sparknlp.annotator.sentence package", "sparknlp.annotator.sentence.sentence_detector module", "sparknlp.annotator.sentence.sentence_detector_dl module", "sparknlp.annotator.sentiment package", "sparknlp.annotator.sentiment.sentiment_detector module", "sparknlp.annotator.sentiment.vivekn_sentiment module", "sparknlp.annotator.seq2seq package", "sparknlp.annotator.seq2seq.auto_gguf_model module", "sparknlp.annotator.seq2seq.auto_gguf_vision_model module", "sparknlp.annotator.seq2seq.bart_transformer module", "sparknlp.annotator.seq2seq.cohere_transformer module", "sparknlp.annotator.seq2seq.cpm_transformer module", "sparknlp.annotator.seq2seq.gpt2_transformer module", "sparknlp.annotator.seq2seq.llama2_transformer module", "sparknlp.annotator.seq2seq.llama3_transformer module", "sparknlp.annotator.seq2seq.m2m100_transformer module", "sparknlp.annotator.seq2seq.marian_transformer module", "sparknlp.annotator.seq2seq.mistral_transformer module", "sparknlp.annotator.seq2seq.nllb_transformer module", "sparknlp.annotator.seq2seq.olmo_transformer module", "sparknlp.annotator.seq2seq.phi2_transformer module", "sparknlp.annotator.seq2seq.phi3_transformer module", "sparknlp.annotator.seq2seq.qwen_transformer module", "sparknlp.annotator.seq2seq.starcoder_transformer module", "sparknlp.annotator.seq2seq.t5_transformer module", "sparknlp.annotator.similarity package", "sparknlp.annotator.similarity.document_similarity_ranker module", "sparknlp.annotator.spell_check package", "sparknlp.annotator.spell_check.context_spell_checker module", "sparknlp.annotator.spell_check.norvig_sweeting module", "sparknlp.annotator.spell_check.symmetric_delete module", "sparknlp.annotator.stemmer module", "sparknlp.annotator.stop_words_cleaner module", "sparknlp.annotator.tf_ner_dl_graph_builder module", "sparknlp.annotator.token package", "sparknlp.annotator.token.chunk_tokenizer module", "sparknlp.annotator.token.recursive_tokenizer module", "sparknlp.annotator.token.regex_tokenizer module", "sparknlp.annotator.token.tokenizer module", "sparknlp.annotator.token2_chunk module", "sparknlp.annotator.ws package", "sparknlp.annotator.ws.word_segmenter module", "sparknlp.base package", "sparknlp.base.audio_assembler module", "sparknlp.base.doc2_chunk module", "sparknlp.base.document_assembler module", "sparknlp.base.embeddings_finisher module", "sparknlp.base.finisher module", "sparknlp.base.graph_finisher module", "sparknlp.base.has_recursive_fit module", "sparknlp.base.has_recursive_transform module", "sparknlp.base.image_assembler module", "sparknlp.base.light_pipeline module", "sparknlp.base.multi_document_assembler module", "sparknlp.base.prompt_assembler module", "sparknlp.base.recursive_pipeline module", "sparknlp.base.table_assembler module", "sparknlp.base.token_assembler module", "sparknlp.common package", "sparknlp.common.annotator_approach module", "sparknlp.common.annotator_model module", "sparknlp.common.annotator_properties module", "sparknlp.common.annotator_type module", "sparknlp.common.coverage_result module", "sparknlp.common.match_strategy module", "sparknlp.common.properties module", "sparknlp.common.read_as module", "sparknlp.common.recursive_annotator_approach module", "sparknlp.common.storage module", "sparknlp.common.utils module", "sparknlp.functions module", "sparknlp.internal package", "sparknlp.internal.annotator_java_ml module", "sparknlp.internal.annotator_transformer module", "sparknlp.internal.extended_java_wrapper module", "sparknlp.internal.params_getters_setters module", "sparknlp.internal.recursive module", "sparknlp.logging package", "sparknlp.logging.comet module", "sparknlp.partition package", "sparknlp.partition.partition module", "sparknlp.partition.partition_properties module", "sparknlp.partition.partition_transformer module", "sparknlp.pretrained package", "sparknlp.pretrained.pretrained_pipeline module", "sparknlp.pretrained.resource_downloader module", "sparknlp.pretrained.utils module", "sparknlp.reader package", "sparknlp.reader.enums module", "sparknlp.reader.pdf_to_text module", "sparknlp.reader.sparknlp_reader module", "sparknlp.training package", "sparknlp.training.conll module", "sparknlp.training.conllu module", "sparknlp.training.pos module", "sparknlp.training.pub_tator module", "sparknlp.training.spacy_to_annotation module", "sparknlp.training.tfgraphs module", "sparknlp.upload_to_hub module", "sparknlp.util module", "Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners.cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners.extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.blip_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.florence2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.gemma3_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.internvl_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.janus_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.llava_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.mllama_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.paligemma_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.phi3_vision_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.qwen2vl_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.smolvlm_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.auto_gguf_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bge_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mxbai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.nomic_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.snowflake_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.uae_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_vision_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.cohere_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.cpm_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.m2m100_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.mistral_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.nllb_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.olmo_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.qwen_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.starcoder_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.prompt_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.enums</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.pdf_to_text</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.sparknlp_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {packag": [0, 90, 91, 94, 97, 156, 157, 227, 249, 337, 338, 341, 344, 404, 405, 476, 501, 502], "subpackag": 0, "annot": [0, 1, 3, 4, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 218, 219, 220, 221, 222, 225, 227, 229, 231, 232, 233, 234, 235, 243, 245, 250, 252, 253, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 467, 468, 469, 470, 471, 473, 475, 476, 479, 481, 483, 484, 485, 493, 495, 500, 501, 506, 507, 508, 509, 510], "submodul": 0, "modul": [0, 250, 285, 331, 349, 367, 369, 370, 372, 377, 382, 390, 395, 396, 398, 401, 410, 426, 433, 438, 449, 461, 473, 478, 482, 487, 492], "content": [0, 65, 71, 72, 73, 74, 75, 76, 77, 97, 114, 154, 193, 203, 229, 230, 231, 238, 239, 243, 503, 509], "base": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 227, 229, 230, 231, 233, 234, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 371, 373, 374, 375, 376, 378, 379, 380, 381, 383, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 456, 457, 458, 461, 463, 465, 469, 471, 475, 476, 500, 504, 505, 508], "common": [0, 1, 50, 111, 119, 128, 142, 143, 169, 170, 172, 184, 193, 269, 298, 338, 359, 366, 376, 391, 392, 418, 419, 421, 432, 441, 469, 507], "intern": [0, 1, 101, 170, 173, 177, 187, 190, 205, 348, 393, 394, 419, 422, 425, 436, 439, 454, 458, 463, 469, 480], "log": [0, 1, 28, 44, 50, 137, 142, 146, 151, 161, 168, 250, 275, 292, 298, 386, 391, 394, 400, 409, 417, 469], "partit": [0, 1, 99, 113, 238, 241, 346, 361, 469, 488, 490], "pretrain": [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 130, 131, 133, 136, 137, 138, 139, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 183, 187, 189, 190, 195, 196, 201, 219, 227, 250, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 373, 374, 375, 376, 379, 380, 385, 386, 387, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 436, 439, 443, 444, 450, 468, 469, 476, 500, 503, 507], "reader": [0, 1, 229, 234, 469, 479, 484], "train": [0, 1, 7, 9, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 70, 71, 78, 80, 83, 84, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 110, 112, 113, 115, 116, 117, 122, 124, 125, 127, 130, 131, 134, 136, 137, 140, 145, 146, 148, 151, 153, 154, 158, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 184, 185, 190, 193, 201, 214, 217, 227, 233, 250, 254, 257, 262, 263, 264, 265, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 287, 288, 290, 291, 292, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 313, 314, 318, 319, 326, 328, 330, 332, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 354, 355, 356, 358, 360, 361, 363, 364, 365, 371, 373, 374, 375, 379, 380, 383, 385, 386, 389, 393, 394, 397, 400, 402, 403, 406, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 432, 434, 439, 441, 450, 463, 466, 469, 476, 483, 500, 504, 505, 507, 508], "annotation_audio": [0, 1, 469], "annotationaudio": [0, 1, 3, 252], "annotation_imag": [0, 1, 469], "annotationimag": [0, 1, 4, 157, 201, 233, 253, 405, 450, 483], "function": [0, 1, 69, 70, 71, 73, 77, 101, 111, 114, 157, 158, 173, 195, 203, 234, 250, 316, 318, 319, 321, 325, 348, 359, 362, 405, 406, 422, 443, 452, 484, 499, 507], "explode_annotations_col": [0, 1, 219, 468], "filter_by_annotations_col": [0, 1, 219, 468], "map_annot": [0, 1, 219, 468], "map_annotations_arrai": [0, 1, 219, 468], "map_annotations_col": [0, 1, 219, 468], "map_annotations_strict": [0, 1, 219, 468], "upload_to_hub": [0, 1, 469], "pushtohub": [0, 1, 247, 497], "util": [0, 1, 7, 71, 96, 136, 139, 150, 151, 166, 171, 179, 204, 207, 212, 215, 217, 221, 224, 232, 254, 319, 343, 385, 388, 399, 400, 415, 420, 428, 453, 460, 461, 464, 466, 469, 470, 474, 482], "conllgener": [0, 1, 248, 498], "get_config_path": [0, 1, 248, 498], "read": [0, 1, 28, 50, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 99, 113, 122, 125, 127, 128, 129, 130, 131, 136, 139, 140, 146, 151, 153, 161, 177, 178, 179, 187, 190, 192, 194, 200, 202, 215, 217, 218, 220, 221, 227, 228, 229, 230, 231, 234, 236, 238, 239, 241, 242, 243, 244, 275, 298, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 335, 346, 361, 371, 374, 375, 376, 378, 379, 380, 385, 388, 389, 394, 400, 402, 409, 425, 427, 428, 436, 439, 440, 442, 448, 451, 464, 466, 467, 469, 470, 476, 478, 479, 480, 481, 484, 487, 488, 489, 490, 491, 493, 494, 500, 504, 510], "start": [0, 1, 7, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 103, 120, 122, 136, 137, 151, 156, 157, 193, 214, 227, 250, 254, 261, 267, 271, 276, 280, 286, 289, 294, 300, 301, 351, 368, 371, 385, 386, 400, 404, 405, 441, 463, 469, 476, 500, 503, 505, 508, 509], "version": [0, 1, 9, 86, 94, 98, 100, 104, 163, 170, 171, 203, 225, 233, 234, 249, 257, 334, 341, 345, 347, 352, 393, 394, 412, 419, 420, 431, 452, 458, 463, 469, 474, 475, 480, 483, 484, 504, 509], "audio": [1, 3, 5, 192, 207, 211, 227, 252, 369, 440, 459, 469, 476], "classifier_dl": [1, 5, 369, 469], "cleaner": [1, 5, 369, 469], "coref": [1, 5, 369, 469], "cv": [1, 5, 369, 469], "depend": [1, 2, 5, 63, 95, 104, 109, 117, 119, 120, 122, 124, 137, 165, 177, 190, 207, 211, 214, 247, 249, 251, 307, 311, 342, 352, 357, 365, 366, 368, 369, 371, 373, 386, 414, 425, 439, 459, 463, 469, 497], "embed": [1, 2, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 70, 74, 77, 120, 136, 137, 138, 143, 156, 157, 160, 175, 194, 195, 196, 201, 202, 207, 214, 219, 225, 233, 247, 251, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 316, 318, 322, 325, 368, 369, 385, 386, 387, 392, 404, 405, 408, 423, 442, 443, 444, 450, 451, 463, 468, 469, 475, 483, 503], "er": [1, 5, 369, 469], "keyword_extract": [1, 5, 369, 469], "ld_dl": [1, 5, 369, 469], "matcher": [1, 5, 369, 469], "ner": [1, 5, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 115, 116, 120, 184, 201, 219, 227, 233, 263, 269, 273, 278, 282, 288, 291, 296, 303, 306, 363, 364, 368, 369, 432, 450, 468, 469, 476, 483, 500], "openai": [1, 5, 106, 161, 354, 369, 409, 469], "param": [1, 5, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 185, 186, 187, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 206, 210, 214, 217, 224, 225, 229, 230, 231, 238, 239, 245, 308, 369, 385, 423, 457, 458, 463, 469, 474, 475, 479, 480, 489, 495], "po": [1, 2, 5, 11, 15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 83, 84, 120, 133, 136, 137, 185, 190, 201, 207, 211, 219, 233, 240, 241, 251, 259, 262, 265, 268, 270, 272, 277, 279, 281, 283, 287, 295, 297, 302, 304, 305, 330, 332, 368, 369, 385, 386, 434, 439, 450, 459, 468, 469, 483, 490, 492, 503, 507, 508, 509], "sentenc": [1, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 83, 84, 86, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 143, 148, 154, 158, 165, 173, 175, 177, 181, 184, 186, 188, 190, 194, 196, 201, 202, 205, 206, 214, 233, 241, 242, 243, 244, 245, 247, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 316, 318, 319, 320, 321, 322, 323, 324, 325, 329, 330, 332, 334, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 392, 397, 403, 406, 414, 422, 423, 425, 430, 432, 435, 437, 439, 442, 444, 450, 451, 454, 455, 463, 469, 483, 490, 491, 493, 494, 495, 504, 508, 509], "sentiment": [1, 2, 5, 28, 44, 50, 101, 117, 173, 207, 211, 247, 251, 275, 292, 298, 348, 365, 369, 422, 459, 469, 497, 504, 505], "seq2seq": [1, 5, 369, 469], "similar": [1, 5, 66, 90, 102, 111, 112, 122, 124, 157, 172, 313, 337, 350, 359, 360, 369, 371, 373, 405, 421, 469], "spell_check": [1, 5, 369, 469], "token": [1, 2, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 83, 84, 87, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 120, 122, 125, 126, 127, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 145, 146, 148, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 190, 193, 195, 201, 204, 206, 207, 211, 214, 233, 241, 244, 245, 247, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 332, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 371, 374, 375, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 394, 397, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 430, 437, 439, 441, 443, 450, 453, 455, 459, 463, 469, 483, 490, 494, 495, 497, 504, 508, 509], "w": [1, 5, 119, 130, 136, 140, 185, 187, 366, 369, 379, 385, 389, 434, 436, 469], "chunk2_doc": [1, 5, 369, 469], "chunk2doc": [1, 5, 10, 193, 258, 441], "chunker": [1, 5, 96, 343, 369, 469], "date2_chunk": [1, 5, 369, 469], "date2chunk": [1, 5, 81, 329], "document_character_text_splitt": [1, 5, 369, 469], "documentcharactertextsplitt": [1, 5, 85, 333], "document_norm": [1, 5, 369, 469], "documentnorm": [1, 5, 85, 86, 87, 333, 334, 335], "document_token_splitt": [1, 5, 369, 469], "documenttokensplitt": [1, 5, 87, 335], "document_token_splitter_test": [1, 5, 369, 469], "graph_extract": [1, 5, 369, 469], "graphextract": [1, 5, 120, 197, 368, 445], "lemmat": [1, 5, 153, 181, 204, 206, 247, 369, 402, 430, 453, 455, 469], "lemmatizermodel": [1, 5, 125, 374], "n_gram_gener": [1, 5, 369, 469], "ngramgener": [1, 5, 96, 132, 343, 381], "normal": [1, 5, 28, 67, 78, 79, 80, 86, 127, 151, 154, 181, 195, 204, 206, 214, 275, 314, 326, 327, 328, 334, 369, 375, 400, 403, 430, 443, 453, 455, 463, 469, 504, 505], "normalizermodel": [1, 5, 140, 389], "stemmer": [1, 5, 181, 369, 430, 469], "stop_words_clean": [1, 5, 369, 469], "stopwordsclean": [1, 5, 181, 195, 206, 430, 443, 455], "tf_ner_dl_graph_build": [1, 5, 369, 469], "tfnerdlgraphbuild": [1, 5, 182, 431], "tfnerdlgraphbuildermodel": [1, 5, 182, 431], "token2_chunk": [1, 5, 369, 469], "token2chunk": [1, 5, 188, 437], "audio_assembl": [1, 7, 8, 9, 191, 254, 256, 257, 449, 469], "audioassembl": [1, 7, 8, 9, 191, 192, 254, 256, 257, 440], "doc2_chunk": [1, 191, 449, 469], "doc2chunk": [1, 10, 191, 193, 258, 441], "document_assembl": [1, 51, 139, 175, 191, 205, 299, 388, 423, 449, 454, 469], "documentassembl": [1, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 202, 204, 205, 206, 227, 231, 241, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 311, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 441, 442, 443, 451, 453, 454, 455, 476, 481, 490, 500, 504], "embeddings_finish": [1, 191, 449, 469], "embeddingsfinish": [1, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 191, 195, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 443], "finish": [1, 154, 175, 191, 195, 197, 202, 204, 403, 423, 443, 445, 449, 453, 469], "graph_finish": [1, 191, 449, 469], "graphfinish": [1, 120, 191, 197, 368, 445], "has_recursive_fit": [1, 191, 449, 469], "hasrecursivefit": [1, 191, 198, 199, 446, 447], "has_recursive_transform": [1, 191, 449, 469], "hasrecursivetransform": [1, 191, 199, 447], "image_assembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 157, 191, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 405, 449, 469], "imageassembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 157, 191, 200, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 405, 448], "light_pipelin": [1, 191, 449, 469], "lightpipelin": [1, 191, 201, 233, 450, 483, 508], "multi_document_assembl": [1, 191, 449, 469], "multidocumentassembl": [1, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 191, 202, 260, 261, 266, 267, 271, 276, 280, 284, 286, 289, 293, 294, 299, 300, 301, 451], "prompt_assembl": [1, 191, 449, 469], "promptassembl": [1, 191, 203, 452], "recursive_pipelin": [1, 191, 225, 449, 469, 475], "recursivepipelin": [1, 191, 198, 199, 204, 210, 446, 447, 453, 458], "recursivepipelinemodel": [1, 191, 204, 453], "table_assembl": [1, 51, 191, 299, 449, 469], "tableassembl": [1, 51, 191, 205, 299, 454], "token_assembl": [1, 191, 449, 469], "tokenassembl": [1, 191, 206, 455], "annotator_approach": [1, 207, 461, 469], "annotatorapproach": [1, 28, 44, 50, 83, 84, 99, 113, 114, 119, 125, 127, 130, 131, 136, 137, 140, 148, 151, 153, 154, 175, 177, 178, 179, 185, 187, 190, 207, 208, 216, 227, 456, 465, 476], "annotator_model": [1, 207, 461, 469], "annotatormodel": [1, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 185, 186, 187, 188, 190, 201, 205, 207, 209, 210, 231, 234, 450, 457, 484], "annotator_properti": [1, 207, 461, 469], "annotatorproperti": [1, 10, 193, 206, 207, 208, 209, 210, 216, 458], "annotator_typ": [1, 2, 3, 4, 207, 251, 252, 253, 461, 469], "annotatortyp": [1, 2, 3, 4, 22, 96, 132, 193, 194, 200, 202, 207, 211, 219, 251, 252, 253, 269, 343, 381, 441, 442, 448, 451, 459, 503], "coverage_result": [1, 207, 461, 469], "coverageresult": [1, 114, 207, 212, 362, 460], "match_strategi": [1, 207, 461, 469], "matchstrategi": [1, 128, 207, 213, 376, 462], "properti": [1, 90, 170, 198, 199, 207, 210, 230, 337, 419, 446, 447, 458, 461, 469, 480], "hasaudiofeatureproperti": [1, 7, 8, 9, 207, 214, 463], "hasbatchedannot": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 137, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 463], "hasbatchedannotateaudio": [1, 7, 8, 9, 207, 214, 463], "hasbatchedannotateimag": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 207, 214, 463], "hascandidatelabelsproperti": [1, 17, 18, 23, 27, 32, 36, 49, 56, 65, 66, 71, 72, 73, 74, 75, 76, 77, 207, 214, 463], "hascasesensitiveproperti": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 207, 214, 217, 463], "hasclassifieractivationproperti": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 207, 214, 463], "hasclstokenproperti": [1, 94, 207, 214, 463], "hasembeddingsproperti": [1, 63, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 175, 207, 214, 463], "hasenablecachingproperti": [1, 99, 113, 175, 207, 214, 463], "hasengin": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 93, 95, 97, 98, 101, 103, 107, 108, 112, 115, 116, 117, 124, 137, 139, 151, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 207, 214, 463], "hasgeneratorproperti": [1, 9, 69, 70, 79, 207, 214, 463], "hasimagefeatureproperti": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 207, 214, 463], "hasllamacppproperti": [1, 156, 157, 207, 214, 463], "haslongmaxsentencelengthlimit": [1, 38, 39, 40, 103, 207, 214, 463], "hasmaxsentencelengthlimit": [1, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 47, 52, 53, 54, 55, 57, 58, 63, 90, 92, 93, 94, 95, 97, 98, 100, 102, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 207, 214, 463], "hasrescalefactor": [1, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 207, 214, 463], "read_a": [1, 83, 84, 119, 125, 127, 130, 131, 136, 140, 146, 153, 178, 179, 187, 207, 217, 218, 241, 242, 330, 332, 366, 374, 375, 379, 380, 385, 389, 394, 402, 427, 428, 436, 461, 466, 467, 469, 490, 491], "reada": [1, 83, 84, 114, 119, 125, 127, 130, 131, 136, 140, 146, 153, 178, 179, 184, 187, 207, 215, 217, 218, 241, 242, 330, 332, 362, 366, 374, 375, 379, 380, 385, 389, 394, 402, 427, 428, 432, 436, 464, 466, 467, 490, 491], "recursive_annotator_approach": [1, 207, 461, 469], "recursiveannotatorapproach": [1, 207, 216, 465], "storag": [1, 114, 119, 127, 207, 362, 366, 375, 461, 469], "hasstorag": [1, 114, 119, 127, 207, 217, 466], "hasstoragemodel": [1, 114, 119, 127, 207, 217, 466], "hasstorageopt": [1, 207, 217, 466], "hasstorageref": [1, 28, 44, 50, 63, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 124, 137, 207, 217, 466], "externalresourc": [1, 127, 131, 207, 218, 375, 380, 467], "regexrul": [1, 207, 218, 467], "annotator_java_ml": [1, 220, 469, 473], "annotatorjavamlread": [1, 208, 209, 216, 220, 221, 222, 470], "annotator_transform": [1, 220, 469, 473], "annotatortransform": [1, 10, 175, 192, 193, 194, 195, 196, 197, 200, 202, 203, 206, 220, 222, 471], "extended_java_wrapp": [1, 220, 469, 473], "extendedjavawrapp": [1, 220, 223, 229, 239, 241, 242, 243, 244, 245, 472], "params_getters_sett": [1, 220, 469, 473], "paramsgetterssett": [1, 145, 146, 208, 209, 216, 220, 222, 224, 474], "recurs": [1, 185, 204, 216, 220, 434, 453, 465, 469, 473], "recursiveestim": [1, 198, 216, 220, 225, 475], "recursivetransform": [1, 199, 220, 225, 475], "comet": [1, 226, 469, 477, 502], "cometlogg": [1, 226, 227, 476, 500], "partition_properti": [1, 228, 469, 478], "hasemailreaderproperti": [1, 228, 230, 231, 480], "hasexcelreaderproperti": [1, 228, 230, 231, 480], "hashtmlreaderproperti": [1, 228, 230, 231, 480], "haspowerpointproperti": [1, 228, 230, 231, 480], "hastextreaderproperti": [1, 228, 230, 231, 480], "partition_transform": [1, 228, 469, 478], "partitiontransform": [1, 228, 231, 481], "pretrained_pipelin": [1, 232, 469, 482], "pretrainedpipelin": [1, 10, 196, 201, 219, 232, 233, 258, 444, 450, 468, 483, 503, 508, 509], "resource_download": [1, 232, 469, 482], "resourcedownload": [1, 232, 234, 484, 504, 509], "printprogress": [1, 232, 235, 485], "enum": [1, 236, 469, 487], "textstrippertyp": [1, 236, 237, 238, 486, 488], "pdf_to_text": [1, 236, 469, 487], "pdftotext": [1, 236, 238, 488], "sparknlp_read": [1, 236, 469, 487], "sparknlpread": [1, 236, 239, 489], "conll": [1, 83, 84, 136, 137, 240, 242, 330, 332, 385, 386, 469, 491, 492, 507], "conllu": [1, 82, 83, 84, 125, 240, 330, 332, 374, 469, 492, 507], "pub_tat": [1, 240, 469, 492], "pubtat": [1, 240, 244, 494, 507], "spacy_to_annot": [1, 240, 469, 492], "spacytoannot": [1, 240, 245, 495], "tfgraph": [1, 240, 469, 492], "arraytyp": [1, 2, 193, 219, 251, 441, 468], "copi": [1, 2, 3, 4, 234, 251, 252, 253, 484], "datatyp": [1, 2, 219, 251, 468], "fromrow": [1, 2, 251], "torow": [1, 2, 251], "check_for_required_info": [1, 247, 497], "create_doc": [1, 247, 497], "list_of_task": [1, 247, 497], "push_to_hub": [1, 247, 497], "unzip_directori": [1, 247, 497], "zip_directori": [1, 247, 497], "exportconllfil": [1, 248, 498], "none": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 124, 125, 127, 130, 131, 136, 137, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 209, 210, 222, 225, 227, 229, 231, 233, 234, 239, 245, 247, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 373, 374, 375, 379, 380, 385, 386, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 436, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 457, 458, 469, 471, 472, 475, 476, 479, 481, 483, 484, 489, 495, 497, 505], "sourc": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 229, 230, 231, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 371, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501], "gpu": [1, 79, 90, 91, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 214, 307, 327, 337, 338, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 463, 469], "fals": [1, 2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 193, 194, 195, 196, 197, 201, 202, 203, 205, 206, 214, 219, 227, 230, 233, 238, 239, 241, 242, 243, 245, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 450, 451, 452, 454, 455, 463, 468, 469, 476, 480, 483, 488, 489, 490, 491, 493, 495, 500, 503, 504, 505, 510], "apple_silicon": [1, 469], "aarch64": [1, 469], "memori": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 91, 101, 114, 156, 157, 214, 217, 229, 231, 249, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 337, 338, 348, 362, 404, 405, 463, 466, 469, 479, 481], "16g": [1, 249, 469], "cache_fold": [1, 469], "log_fold": [1, 469], "cluster_tmp_dir": [1, 469], "real_time_output": [1, 469], "output_level": [1, 469], "1": [1, 7, 9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 42, 44, 46, 47, 49, 50, 53, 54, 56, 57, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 87, 90, 91, 92, 93, 94, 97, 99, 101, 102, 108, 113, 114, 115, 116, 117, 122, 127, 128, 129, 130, 131, 132, 135, 136, 137, 139, 142, 143, 146, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 186, 190, 195, 196, 203, 214, 225, 227, 233, 234, 239, 241, 242, 244, 245, 249, 254, 257, 258, 259, 262, 264, 265, 268, 270, 272, 274, 275, 277, 279, 281, 283, 287, 290, 292, 295, 297, 298, 302, 304, 305, 307, 311, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 335, 337, 338, 339, 340, 341, 344, 346, 348, 350, 356, 361, 362, 363, 364, 365, 371, 375, 376, 378, 379, 380, 381, 384, 385, 386, 388, 391, 392, 393, 394, 399, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 431, 435, 439, 443, 444, 452, 458, 463, 469, 474, 475, 476, 480, 483, 484, 489, 490, 491, 494, 495, 500, 503, 504, 508, 509], "pyspark": [1, 2, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 138, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 200, 201, 202, 205, 206, 217, 219, 223, 225, 227, 229, 233, 238, 239, 241, 242, 243, 244, 249, 251, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 448, 450, 451, 454, 455, 466, 468, 469, 472, 475, 476, 479, 483, 488, 489, 490, 491, 493, 494, 504, 505], "instanc": [1, 44, 139, 221, 292, 336, 388, 393, 394, 458, 463, 469, 470, 474, 480], "default": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 145, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 182, 185, 186, 187, 190, 193, 194, 195, 196, 197, 200, 201, 202, 205, 210, 214, 218, 219, 227, 233, 234, 238, 241, 242, 243, 244, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 393, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 431, 434, 435, 436, 439, 441, 442, 443, 444, 445, 448, 450, 451, 454, 463, 467, 468, 469, 476, 483, 484, 488, 490, 491, 493, 494, 504], "paramet": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 210, 214, 217, 218, 219, 224, 225, 227, 229, 230, 231, 233, 234, 238, 239, 241, 242, 243, 244, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 458, 463, 466, 467, 468, 469, 474, 475, 476, 479, 480, 481, 483, 484, 488, 489, 490, 491, 493, 494], "spark": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 142, 143, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 215, 217, 219, 220, 222, 223, 227, 229, 231, 233, 234, 238, 239, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 371, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 388, 389, 391, 392, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 461, 464, 466, 468, 469, 471, 472, 473, 476, 479, 481, 483, 484, 488, 489, 490, 491, 493, 494, 495, 499, 501, 502, 503, 504, 506, 507, 508, 510], "nlp": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 124, 125, 127, 130, 131, 136, 137, 138, 139, 140, 148, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 184, 185, 187, 190, 191, 193, 194, 195, 196, 200, 201, 202, 204, 205, 206, 207, 220, 227, 229, 231, 233, 234, 241, 242, 243, 244, 251, 252, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 373, 374, 375, 379, 380, 385, 386, 387, 388, 389, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 432, 434, 436, 439, 441, 442, 443, 444, 448, 449, 450, 451, 453, 454, 455, 461, 469, 473, 476, 479, 481, 483, 484, 490, 491, 493, 494, 499, 501, 502, 503, 504, 505, 506, 507, 508, 510], "The": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 184, 186, 187, 190, 194, 196, 200, 201, 202, 203, 205, 214, 217, 219, 227, 229, 231, 233, 234, 241, 242, 243, 244, 245, 247, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 384, 385, 386, 387, 388, 389, 391, 392, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 432, 435, 436, 439, 442, 444, 448, 450, 451, 452, 454, 463, 466, 468, 469, 476, 479, 481, 483, 484, 490, 491, 493, 494, 495, 497, 500, 503, 504, 505, 507, 508, 510], "would": [1, 28, 63, 85, 96, 109, 128, 151, 275, 311, 333, 343, 357, 376, 400, 469, 504], "result": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 214, 219, 227, 233, 241, 242, 245, 247, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 463, 468, 469, 476, 483, 490, 491, 495, 497, 500, 501, 503, 504, 505, 508, 509], "equival": [1, 17, 18, 23, 27, 32, 36, 49, 56, 201, 264, 265, 270, 274, 279, 283, 297, 304, 450, 469, 508], "sparksess": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 127, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 200, 217, 241, 242, 243, 244, 249, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 375, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 448, 466, 469, 490, 491, 493, 494], "builder": [1, 182, 249, 431, 469], "appnam": [1, 249, 469], "master": [1, 249, 469], "local": [1, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 122, 142, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 181, 201, 214, 233, 249, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 371, 391, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 430, 450, 463, 469, 483, 508], "config": [1, 249, 469, 501], "driver": [1, 157, 249, 405, 469], "serial": [1, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 119, 124, 137, 145, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 249, 254, 256, 257, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 314, 316, 319, 320, 321, 323, 324, 325, 326, 327, 328, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 366, 373, 386, 393, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 469], "org": [1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 135, 136, 137, 138, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 190, 201, 214, 219, 229, 233, 239, 241, 249, 384, 385, 386, 387, 406, 439, 450, 468, 469, 479, 483, 489, 490, 501, 510], "apach": [1, 106, 166, 202, 249, 354, 415, 451, 469], "kryoseri": [1, 249, 469], "buffer": [1, 93, 114, 249, 340, 362, 469], "max": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 72, 74, 75, 76, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 122, 175, 179, 214, 229, 249, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 320, 322, 323, 324, 337, 339, 340, 341, 342, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 358, 359, 363, 364, 365, 371, 423, 428, 463, 469, 479], "2000m": [1, 249, 469], "maxresults": [1, 249, 469], "jar": [1, 249, 469], "com": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 124, 125, 127, 130, 131, 136, 137, 139, 140, 142, 143, 148, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 184, 185, 187, 190, 205, 229, 231, 239, 249, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 373, 374, 375, 379, 380, 385, 386, 388, 389, 391, 392, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 432, 434, 436, 439, 454, 469, 479, 481, 489], "johnsnowlab": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 124, 125, 127, 130, 131, 136, 137, 139, 140, 142, 143, 148, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 184, 185, 187, 190, 195, 196, 205, 231, 249, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 373, 374, 375, 379, 380, 385, 386, 388, 389, 391, 392, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 432, 434, 436, 439, 443, 444, 454, 469, 481], "nlp_2": [1, 249, 469], "12": [1, 90, 115, 116, 117, 122, 128, 129, 135, 148, 177, 188, 201, 219, 233, 243, 245, 249, 337, 363, 364, 365, 371, 376, 378, 384, 397, 425, 437, 450, 468, 469, 483, 493, 495, 503], "releas": [1, 9, 86, 90, 94, 95, 97, 106, 107, 108, 115, 116, 158, 159, 162, 163, 166, 168, 169, 171, 172, 173, 257, 334, 337, 341, 342, 344, 354, 355, 356, 363, 364, 406, 407, 411, 412, 415, 417, 418, 420, 421, 422, 469], "getorcr": [1, 249, 469], "bool": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 60, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 87, 91, 92, 93, 96, 100, 107, 112, 115, 119, 120, 124, 127, 128, 131, 132, 135, 136, 137, 140, 146, 150, 151, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 181, 186, 187, 190, 193, 195, 196, 197, 201, 203, 205, 210, 214, 217, 227, 229, 230, 233, 234, 238, 241, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 307, 316, 318, 319, 320, 321, 322, 323, 324, 325, 333, 334, 335, 338, 339, 340, 343, 347, 355, 360, 363, 366, 368, 373, 375, 376, 380, 381, 384, 385, 386, 389, 394, 399, 400, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 430, 435, 436, 439, 441, 443, 444, 445, 450, 452, 454, 458, 463, 466, 469, 476, 479, 480, 483, 484, 488, 490], "option": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 122, 124, 125, 127, 130, 131, 136, 137, 139, 140, 146, 148, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 187, 190, 192, 194, 200, 201, 202, 214, 217, 218, 219, 225, 227, 229, 231, 233, 234, 238, 239, 241, 242, 243, 244, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 371, 373, 374, 375, 379, 380, 385, 386, 388, 389, 394, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 436, 439, 440, 442, 448, 450, 451, 466, 467, 468, 469, 475, 476, 479, 481, 483, 484, 488, 489, 490, 491, 493, 494, 504], "whether": [1, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 119, 120, 127, 128, 129, 131, 132, 135, 136, 137, 140, 142, 146, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 181, 186, 187, 190, 193, 195, 196, 197, 201, 203, 205, 206, 210, 214, 217, 230, 231, 233, 238, 241, 244, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 366, 368, 375, 376, 378, 380, 381, 384, 385, 386, 389, 391, 394, 399, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 430, 435, 436, 439, 441, 443, 444, 445, 450, 452, 454, 455, 458, 463, 466, 469, 480, 483, 488, 490, 494, 505], "enabl": [1, 91, 117, 137, 156, 157, 162, 168, 169, 171, 175, 178, 195, 214, 230, 231, 238, 338, 365, 386, 404, 405, 411, 417, 418, 420, 423, 427, 463, 469, 481, 488], "acceler": [1, 79, 101, 117, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 307, 327, 348, 365, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 469], "must": [1, 91, 99, 113, 125, 127, 130, 131, 142, 146, 153, 154, 156, 157, 178, 179, 193, 214, 219, 227, 241, 336, 338, 346, 361, 374, 375, 379, 380, 391, 394, 402, 403, 404, 405, 427, 428, 441, 463, 468, 469, 476, 490], "set": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 182, 185, 186, 187, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 210, 214, 217, 218, 224, 227, 230, 231, 234, 238, 241, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 431, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 457, 458, 463, 466, 467, 469, 474, 475, 476, 480, 484, 488, 490, 500, 504, 507, 508], "up": [1, 7, 9, 28, 44, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 94, 99, 100, 103, 104, 109, 111, 113, 122, 142, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 249, 250, 254, 257, 275, 292, 307, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 336, 341, 346, 347, 351, 352, 357, 359, 361, 371, 391, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463, 469, 500, 504, 507, 508], "correctli": [1, 469], "appl": [1, 7, 8, 93, 108, 116, 254, 256, 340, 356, 364, 469], "silicon": [1, 7, 8, 254, 256, 469], "support": [1, 7, 8, 9, 28, 44, 68, 69, 70, 71, 87, 90, 91, 94, 100, 103, 104, 122, 137, 140, 151, 156, 157, 164, 165, 167, 170, 171, 172, 181, 200, 203, 205, 214, 229, 231, 254, 256, 257, 275, 292, 307, 315, 316, 318, 319, 335, 337, 341, 347, 351, 352, 371, 386, 389, 400, 404, 405, 413, 414, 416, 419, 420, 421, 430, 448, 452, 454, 463, 469, 479, 481, 501], "maco": [1, 469], "linux": [1, 469], "str": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 182, 185, 186, 187, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 210, 214, 217, 218, 219, 224, 227, 229, 230, 231, 233, 234, 238, 239, 241, 242, 243, 244, 247, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 431, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 458, 463, 466, 467, 468, 469, 474, 476, 479, 480, 481, 483, 484, 488, 489, 490, 491, 493, 494, 497], "how": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 103, 106, 107, 109, 111, 115, 117, 119, 120, 124, 125, 127, 130, 131, 135, 136, 137, 140, 142, 146, 150, 153, 156, 157, 159, 164, 178, 179, 186, 187, 190, 194, 197, 202, 203, 213, 214, 215, 217, 218, 241, 242, 245, 249, 250, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 313, 314, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 332, 333, 335, 337, 338, 339, 341, 342, 343, 344, 345, 347, 348, 351, 354, 355, 357, 359, 363, 365, 366, 368, 373, 374, 375, 379, 380, 384, 385, 386, 389, 391, 394, 399, 402, 404, 405, 407, 413, 427, 428, 435, 436, 439, 442, 445, 451, 452, 462, 463, 464, 466, 467, 469, 490, 491, 495, 500, 504, 509], "much": [1, 17, 18, 23, 27, 28, 32, 36, 49, 51, 56, 90, 94, 100, 106, 107, 108, 140, 162, 164, 190, 264, 265, 270, 274, 275, 279, 283, 297, 299, 304, 337, 341, 347, 354, 355, 356, 389, 411, 413, 439, 469, 504], "alloc": [1, 469], "locat": [1, 10, 13, 19, 37, 45, 119, 150, 233, 258, 260, 266, 284, 293, 366, 399, 469, 483, 504], "download": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 131, 136, 137, 138, 139, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 233, 234, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 368, 373, 374, 375, 380, 385, 386, 387, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439, 469, 483, 484, 503, 504, 507, 508], "extract": [1, 10, 11, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 61, 67, 78, 79, 80, 83, 85, 87, 96, 114, 118, 119, 120, 121, 122, 127, 128, 129, 131, 135, 136, 137, 138, 150, 151, 153, 175, 177, 179, 184, 188, 195, 196, 197, 201, 203, 214, 227, 229, 230, 233, 238, 258, 259, 261, 267, 271, 276, 280, 286, 289, 294, 300, 301, 308, 314, 326, 327, 328, 330, 333, 335, 343, 362, 366, 367, 368, 370, 371, 375, 376, 378, 380, 384, 385, 386, 387, 399, 400, 402, 423, 425, 428, 432, 437, 443, 444, 445, 450, 452, 463, 469, 476, 479, 480, 483, 488, 500], "model": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 124, 125, 127, 130, 131, 135, 136, 137, 139, 140, 141, 142, 143, 146, 148, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 182, 184, 185, 187, 190, 203, 209, 214, 217, 225, 227, 233, 234, 247, 250, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 373, 374, 375, 379, 380, 384, 385, 386, 388, 389, 391, 392, 394, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 431, 432, 434, 436, 439, 452, 457, 463, 466, 469, 475, 476, 483, 484, 497, 500, 501, 503, 507, 509, 510], "pipelin": [1, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 200, 201, 202, 204, 205, 206, 225, 227, 231, 232, 233, 234, 235, 238, 247, 250, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 448, 450, 451, 453, 454, 455, 469, 475, 476, 481, 482, 483, 484, 485, 488, 501, 503, 504, 507], "If": [1, 9, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 109, 114, 119, 124, 128, 129, 135, 136, 137, 140, 146, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 182, 201, 214, 225, 227, 230, 234, 249, 257, 262, 264, 265, 268, 270, 272, 274, 275, 277, 279, 281, 283, 287, 290, 292, 295, 297, 298, 302, 304, 305, 307, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 336, 357, 362, 366, 373, 376, 378, 384, 385, 386, 389, 394, 399, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 431, 450, 463, 469, 475, 476, 480, 484, 500, 502, 504], "user": [1, 69, 71, 72, 73, 74, 75, 76, 77, 135, 136, 141, 142, 143, 156, 157, 160, 163, 166, 187, 203, 204, 214, 227, 238, 239, 250, 316, 319, 320, 321, 322, 323, 324, 325, 384, 385, 391, 392, 404, 405, 408, 412, 415, 436, 452, 453, 463, 469, 476, 488, 489, 500], "home": [1, 122, 239, 371, 469, 489], "directori": [1, 157, 229, 234, 239, 405, 469, 479, 484, 489, 500], "under": [1, 2, 98, 104, 106, 117, 122, 166, 172, 251, 345, 352, 354, 365, 371, 415, 421, 469], "cache_pretrain": [1, 469], "us": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 139, 142, 143, 146, 148, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 182, 186, 187, 188, 190, 193, 194, 195, 196, 201, 202, 203, 204, 205, 206, 213, 214, 219, 227, 229, 230, 231, 233, 234, 238, 239, 241, 242, 243, 244, 250, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 388, 391, 392, 394, 397, 399, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 431, 435, 436, 437, 439, 441, 442, 443, 444, 450, 451, 452, 453, 454, 455, 462, 463, 468, 469, 476, 479, 480, 481, 483, 484, 489, 490, 491, 493, 494, 501, 502, 503, 504, 505, 507], "cluster": [1, 7, 94, 100, 102, 112, 254, 341, 347, 350, 360, 469], "temporarili": [1, 171, 420, 469], "file": [1, 3, 7, 8, 28, 44, 50, 65, 71, 72, 73, 74, 75, 76, 77, 83, 84, 86, 112, 114, 119, 125, 127, 130, 131, 136, 137, 140, 146, 151, 153, 157, 177, 178, 179, 182, 187, 192, 205, 215, 217, 227, 229, 231, 236, 238, 239, 241, 242, 243, 244, 247, 252, 254, 256, 275, 292, 298, 312, 319, 320, 321, 322, 323, 324, 325, 330, 332, 334, 360, 362, 366, 374, 375, 379, 380, 385, 386, 389, 394, 400, 402, 405, 425, 427, 428, 431, 436, 440, 454, 464, 466, 469, 476, 479, 481, 487, 488, 489, 490, 491, 493, 494, 497, 500, 510], "unpack": [1, 469], "index": [1, 2, 59, 61, 105, 110, 111, 122, 127, 186, 217, 241, 251, 308, 353, 358, 359, 371, 375, 435, 466, 469, 490], "wordembed": [1, 5, 89, 96, 109, 114, 137, 195, 343, 357, 362, 386, 443, 469], "By": [1, 111, 153, 158, 173, 181, 186, 195, 227, 336, 359, 402, 406, 422, 430, 435, 443, 469, 476, 500], "thi": [1, 2, 3, 4, 7, 8, 9, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 125, 127, 128, 130, 131, 132, 135, 136, 137, 138, 140, 142, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 184, 185, 186, 187, 188, 190, 192, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 210, 213, 214, 221, 225, 227, 229, 231, 233, 234, 239, 243, 245, 249, 250, 251, 252, 253, 254, 256, 257, 259, 262, 263, 264, 265, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 287, 288, 290, 291, 292, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 374, 375, 376, 379, 380, 381, 384, 385, 386, 387, 389, 391, 393, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 432, 434, 435, 436, 437, 439, 440, 442, 443, 445, 448, 450, 451, 452, 453, 454, 455, 457, 458, 462, 463, 469, 470, 474, 475, 476, 479, 480, 483, 484, 489, 493, 495, 499, 500, 503, 504, 505, 507, 508, 509], "i": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 214, 218, 219, 225, 227, 231, 234, 238, 239, 241, 243, 244, 245, 249, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 463, 467, 468, 469, 475, 476, 481, 484, 488, 489, 490, 493, 494, 495, 500, 501, 503, 504, 505, 507, 508, 509, 510], "hadoop": [1, 469], "tmp": [1, 192, 200, 440, 448, 469, 500], "dir": [1, 469], "via": [1, 9, 15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 112, 200, 214, 257, 262, 264, 265, 268, 270, 272, 274, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 360, 448, 463, 469], "configur": [1, 67, 109, 187, 229, 239, 249, 314, 336, 357, 436, 469, 479, 489], "note": [1, 7, 8, 9, 17, 18, 23, 28, 36, 44, 49, 50, 56, 79, 90, 91, 94, 98, 100, 101, 104, 107, 109, 114, 115, 117, 122, 137, 142, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 201, 214, 217, 229, 230, 239, 249, 254, 256, 257, 264, 265, 270, 275, 283, 292, 297, 298, 304, 307, 327, 337, 338, 341, 345, 347, 348, 352, 355, 357, 362, 363, 365, 371, 386, 391, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 450, 463, 466, 469, 479, 480, 489, 509], "s3": [1, 234, 469, 484], "hdf": [1, 469], "dbf": [1, 469], "dict": [1, 2, 3, 4, 83, 84, 119, 125, 127, 130, 131, 136, 138, 139, 140, 142, 146, 153, 177, 178, 179, 187, 201, 214, 218, 225, 227, 229, 230, 231, 233, 239, 247, 251, 252, 253, 330, 332, 366, 374, 375, 379, 380, 385, 387, 388, 389, 391, 394, 402, 425, 427, 428, 436, 450, 463, 467, 469, 475, 476, 479, 480, 481, 483, 489, 497], "custom": [1, 85, 114, 136, 137, 150, 151, 187, 203, 227, 239, 333, 362, 385, 386, 399, 400, 436, 452, 469, 476, 489], "save": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 137, 146, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 217, 227, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 386, 394, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 466, 469, 476, 500, 504], "from": [1, 2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 145, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 214, 219, 223, 227, 229, 230, 231, 233, 234, 238, 239, 241, 242, 243, 244, 245, 250, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 393, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 453, 454, 455, 457, 463, 468, 469, 472, 475, 476, 479, 480, 481, 483, 484, 488, 489, 490, 491, 493, 494, 495, 500, 503, 504, 505, 508, 509, 510], "dure": [1, 7, 28, 44, 50, 66, 91, 98, 102, 136, 137, 146, 150, 156, 157, 175, 177, 214, 227, 230, 254, 275, 292, 298, 313, 338, 345, 350, 385, 386, 394, 399, 404, 405, 423, 425, 463, 469, 476, 500], "annotator_log": [1, 469], "print": [1, 86, 234, 334, 336, 469, 484], "jvm": [1, 181, 430, 469], "output": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 210, 214, 219, 227, 229, 230, 231, 238, 243, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 458, 463, 468, 469, 476, 479, 480, 481, 488, 493, 500, 503, 504, 505], "real": [1, 137, 166, 168, 169, 170, 171, 227, 386, 415, 417, 418, 419, 420, 469, 476, 500], "time": [1, 28, 44, 50, 61, 90, 94, 99, 113, 115, 116, 122, 128, 146, 154, 157, 177, 190, 275, 292, 298, 308, 337, 341, 346, 361, 363, 364, 371, 376, 394, 403, 405, 425, 439, 469, 503, 504, 508, 509], "int": [1, 2, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 120, 122, 124, 128, 132, 134, 136, 137, 140, 142, 145, 146, 148, 150, 151, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 179, 182, 186, 187, 190, 214, 227, 229, 230, 238, 241, 251, 253, 254, 256, 257, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 308, 311, 312, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 335, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 368, 371, 373, 376, 381, 383, 385, 386, 389, 391, 393, 394, 397, 399, 400, 403, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 428, 431, 435, 436, 439, 463, 469, 476, 479, 480, 488, 490], "level": [1, 16, 28, 44, 50, 92, 93, 103, 107, 108, 112, 114, 116, 119, 136, 137, 146, 177, 231, 241, 263, 275, 292, 298, 339, 340, 351, 355, 356, 360, 362, 364, 366, 385, 386, 394, 425, 469, 490], "return": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 124, 125, 127, 131, 132, 134, 136, 137, 139, 142, 148, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 185, 187, 190, 193, 200, 201, 214, 217, 218, 219, 221, 225, 229, 230, 233, 234, 239, 241, 242, 243, 244, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 371, 373, 374, 375, 380, 381, 383, 385, 386, 388, 391, 397, 399, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 434, 436, 439, 441, 448, 450, 463, 466, 467, 468, 469, 470, 475, 479, 480, 483, 484, 489, 490, 491, 493, 494], "initi": [1, 99, 113, 156, 157, 170, 177, 186, 204, 214, 241, 242, 243, 244, 346, 361, 404, 405, 419, 425, 435, 453, 463, 469, 490, 491, 493, 494, 500], "session": [1, 239, 241, 242, 243, 244, 250, 469, 489, 490, 491, 493, 494], "sinc": [1, 86, 104, 122, 161, 162, 249, 334, 336, 352, 371, 409, 411, 469, 504, 505, 509], "python": [1, 124, 229, 250, 373, 469, 479], "deprec": [1, 249, 469], "you": [1, 17, 18, 23, 36, 49, 56, 77, 83, 84, 85, 87, 94, 96, 98, 100, 106, 107, 109, 120, 128, 138, 142, 159, 163, 165, 169, 195, 197, 201, 203, 214, 227, 231, 234, 239, 243, 245, 249, 264, 265, 270, 283, 297, 304, 307, 325, 330, 332, 333, 335, 336, 341, 343, 345, 347, 354, 355, 357, 368, 376, 387, 391, 407, 412, 414, 418, 443, 445, 450, 452, 463, 469, 476, 481, 484, 489, 493, 495, 500, 502, 504, 505, 508, 509, 510], "ar": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 90, 91, 92, 94, 95, 97, 98, 101, 102, 103, 105, 107, 110, 111, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 128, 130, 132, 135, 137, 138, 139, 140, 142, 148, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 180, 190, 195, 200, 201, 203, 204, 205, 213, 214, 215, 219, 227, 229, 230, 234, 244, 245, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 336, 337, 338, 339, 341, 342, 344, 345, 348, 350, 351, 353, 355, 358, 359, 360, 362, 363, 364, 365, 366, 368, 371, 373, 374, 376, 379, 381, 384, 386, 387, 388, 389, 391, 397, 399, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 429, 431, 439, 443, 448, 450, 452, 453, 454, 462, 463, 464, 468, 469, 476, 479, 480, 484, 494, 495, 500, 501, 502, 503, 504, 505, 508, 509, 510], "consid": [1, 85, 114, 120, 122, 142, 154, 156, 157, 159, 163, 165, 177, 178, 179, 181, 185, 214, 229, 230, 234, 249, 307, 333, 362, 368, 371, 391, 404, 405, 407, 412, 414, 425, 427, 428, 430, 434, 463, 469, 479, 484], "stick": [1, 249, 469], "lower": [1, 86, 90, 122, 142, 175, 177, 193, 249, 334, 337, 371, 391, 423, 425, 441, 469], "current": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 87, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 122, 127, 128, 129, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 182, 201, 205, 210, 214, 217, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 335, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 371, 375, 376, 378, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 450, 454, 458, 463, 466, 469, 503, 504, 505], "contain": [2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 63, 66, 67, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 239, 241, 242, 243, 244, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 262, 263, 264, 265, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 287, 288, 290, 291, 292, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 311, 313, 314, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 371, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 489, 490, 491, 493, 494, 497, 498, 500, 503, 504], "dataformat": [2, 3, 4, 9, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 119, 120, 125, 127, 128, 129, 130, 131, 136, 137, 140, 146, 153, 158, 170, 173, 178, 179, 187, 190, 192, 194, 196, 197, 200, 202, 203, 205, 229, 231, 238, 239, 241, 242, 243, 244, 245, 251, 252, 253, 257, 308, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 366, 368, 374, 375, 376, 378, 379, 380, 385, 386, 389, 394, 402, 406, 419, 422, 427, 428, 436, 439, 440, 442, 444, 445, 448, 451, 452, 454, 479, 481, 488, 489, 490, 491, 493, 494, 495, 501, 510], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 369, 461, 473, 492, 499, 500, 508, 510], "begin": [2, 63, 85, 87, 135, 161, 185, 187, 193, 194, 202, 219, 251, 311, 333, 335, 384, 409, 434, 436, 441, 442, 451, 468, 503], "end": [2, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 63, 75, 85, 87, 137, 142, 143, 151, 156, 157, 158, 160, 168, 173, 185, 187, 190, 194, 202, 203, 214, 219, 226, 227, 229, 241, 251, 261, 267, 271, 276, 280, 286, 289, 294, 300, 301, 311, 323, 333, 335, 386, 391, 392, 400, 404, 405, 406, 408, 417, 422, 434, 436, 439, 442, 451, 452, 463, 468, 476, 479, 490, 500, 503, 505], "metadata": [2, 3, 4, 51, 63, 81, 87, 91, 122, 131, 136, 137, 139, 148, 194, 196, 200, 201, 202, 214, 219, 227, 229, 231, 234, 239, 251, 252, 253, 299, 311, 329, 335, 338, 371, 380, 385, 386, 388, 397, 442, 444, 448, 450, 451, 463, 468, 476, 479, 484, 489, 503, 505], "object": [2, 3, 4, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 136, 137, 139, 142, 148, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 190, 201, 211, 212, 213, 214, 215, 217, 227, 233, 234, 247, 248, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 373, 374, 385, 386, 388, 391, 397, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 430, 439, 462, 464, 471, 472, 476, 503, 504], "repres": [2, 3, 4, 83, 84, 90, 97, 102, 105, 110, 111, 117, 119, 120, 127, 131, 132, 142, 143, 160, 166, 187, 227, 233, 251, 252, 253, 330, 332, 337, 344, 350, 353, 358, 359, 365, 366, 368, 375, 380, 381, 391, 392, 408, 415, 436, 476, 483, 504], "detail": [2, 3, 4, 9, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 110, 115, 116, 122, 139, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 251, 252, 253, 257, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 358, 363, 364, 371, 388, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "type": [2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 214, 219, 221, 228, 229, 230, 231, 233, 236, 237, 238, 243, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 463, 468, 470, 478, 479, 480, 481, 483, 486, 487, 488, 493, 503, 504, 507], "possibl": [2, 3, 4, 60, 61, 96, 98, 115, 116, 119, 150, 177, 179, 194, 202, 203, 213, 215, 227, 251, 252, 253, 307, 343, 345, 363, 364, 366, 399, 425, 428, 442, 451, 452, 462, 464, 476, 500], "valu": [2, 3, 4, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 93, 96, 101, 102, 105, 110, 111, 112, 115, 119, 120, 122, 124, 125, 128, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 181, 182, 186, 187, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 210, 213, 214, 215, 217, 224, 227, 229, 230, 231, 237, 238, 239, 251, 252, 253, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 340, 343, 348, 350, 353, 358, 359, 360, 363, 366, 368, 371, 373, 374, 376, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 397, 399, 400, 403, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 430, 431, 435, 436, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 458, 462, 463, 464, 466, 474, 476, 479, 480, 481, 488, 489, 500, 510], "document": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 193, 194, 195, 196, 197, 201, 202, 203, 205, 206, 207, 211, 227, 228, 229, 230, 231, 233, 238, 239, 241, 242, 243, 245, 249, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 450, 451, 452, 454, 455, 459, 476, 478, 479, 480, 481, 483, 488, 489, 490, 491, 493, 495, 500, 504, 505, 507, 508, 509], "wordpiec": [2, 207, 211, 251, 459], "word_embed": [2, 5, 89, 90, 92, 95, 96, 97, 98, 101, 103, 107, 109, 113, 115, 117, 136, 137, 146, 182, 207, 211, 251, 337, 339, 342, 343, 344, 345, 348, 349, 351, 355, 357, 361, 363, 365, 369, 385, 386, 394, 459], "sentence_embed": [2, 5, 28, 44, 50, 89, 91, 93, 94, 99, 100, 102, 104, 105, 106, 108, 110, 111, 112, 116, 143, 175, 207, 211, 227, 251, 275, 292, 298, 338, 340, 341, 346, 347, 349, 350, 352, 353, 354, 356, 358, 359, 360, 364, 369, 392, 423, 459, 476, 500, 504], "categori": [2, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 66, 67, 78, 80, 207, 211, 227, 251, 262, 264, 265, 268, 270, 272, 274, 275, 277, 279, 281, 283, 287, 290, 292, 295, 297, 298, 302, 304, 305, 313, 314, 326, 328, 459, 476, 500, 504], "date": [2, 61, 81, 128, 129, 130, 203, 207, 211, 251, 308, 329, 376, 378, 379, 452, 459], "entiti": [2, 10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 63, 78, 81, 95, 118, 119, 120, 126, 127, 131, 133, 134, 135, 136, 137, 138, 139, 184, 188, 196, 201, 207, 211, 233, 247, 251, 258, 263, 269, 273, 278, 282, 288, 291, 296, 303, 306, 311, 326, 329, 342, 366, 367, 368, 375, 380, 382, 383, 384, 385, 386, 387, 388, 432, 437, 444, 450, 459, 483, 497], "chunk": [2, 10, 11, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 60, 61, 81, 85, 87, 91, 96, 99, 113, 119, 122, 127, 130, 131, 132, 135, 156, 157, 184, 188, 193, 196, 207, 211, 214, 219, 227, 228, 231, 244, 247, 251, 258, 259, 260, 261, 266, 267, 271, 276, 280, 284, 286, 289, 293, 294, 299, 300, 301, 307, 308, 329, 333, 335, 338, 343, 346, 361, 366, 371, 375, 379, 380, 381, 384, 404, 405, 432, 437, 441, 444, 459, 463, 468, 476, 478, 481, 494, 500, 510], "named_ent": [2, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 120, 135, 136, 137, 138, 139, 146, 201, 207, 211, 233, 251, 263, 269, 273, 278, 282, 288, 291, 296, 303, 306, 368, 384, 385, 386, 387, 388, 394, 450, 459, 483], "negex": [2, 207, 211, 251, 459], "labeled_depend": [2, 84, 120, 207, 211, 251, 332, 459], "languag": [2, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 122, 123, 124, 125, 127, 128, 131, 136, 137, 139, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 187, 190, 193, 202, 203, 206, 207, 211, 214, 229, 231, 234, 247, 251, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 371, 372, 373, 374, 375, 380, 385, 386, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 430, 436, 439, 441, 451, 452, 455, 459, 463, 479, 481, 484, 497, 504], "keyword": [2, 121, 122, 153, 247, 251, 369, 370, 371, 402, 497], "dummi": [2, 86, 207, 211, 251, 334, 459], "first": [2, 97, 99, 100, 101, 102, 106, 110, 113, 115, 116, 122, 130, 136, 137, 138, 150, 158, 165, 166, 167, 168, 171, 172, 173, 175, 177, 181, 186, 195, 203, 206, 213, 214, 249, 251, 307, 344, 346, 347, 348, 350, 354, 358, 361, 363, 364, 371, 379, 385, 386, 387, 399, 406, 414, 415, 416, 417, 420, 421, 422, 423, 425, 430, 435, 443, 452, 455, 462, 463, 500, 504, 505, 509], "charact": [2, 13, 19, 37, 45, 86, 101, 103, 119, 124, 130, 132, 140, 150, 151, 177, 178, 179, 186, 187, 190, 196, 229, 230, 251, 260, 266, 284, 293, 334, 348, 351, 366, 373, 379, 381, 389, 399, 400, 425, 427, 428, 435, 436, 439, 444, 479], "last": [2, 91, 105, 110, 111, 128, 129, 156, 157, 184, 203, 214, 245, 251, 338, 353, 358, 359, 376, 378, 404, 405, 432, 452, 463, 495, 508], "string": [2, 9, 13, 19, 28, 37, 44, 45, 50, 60, 63, 83, 86, 119, 130, 132, 138, 140, 151, 153, 156, 157, 173, 175, 179, 181, 185, 193, 194, 196, 200, 201, 202, 203, 214, 229, 230, 231, 238, 239, 251, 257, 260, 266, 275, 284, 292, 293, 298, 307, 311, 330, 334, 366, 379, 381, 387, 389, 400, 404, 405, 422, 428, 430, 434, 441, 442, 444, 448, 450, 451, 452, 463, 479, 480, 481, 488, 489, 508], "associ": [2, 3, 4, 44, 112, 119, 130, 135, 142, 227, 251, 252, 253, 292, 360, 366, 379, 384, 391, 476], "list": [2, 3, 4, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 112, 115, 116, 117, 119, 120, 122, 124, 128, 130, 134, 135, 137, 138, 139, 140, 142, 145, 150, 151, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 181, 182, 185, 187, 195, 196, 201, 202, 210, 214, 219, 225, 227, 229, 231, 233, 234, 239, 245, 247, 251, 252, 253, 254, 256, 257, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 311, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 333, 334, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 356, 360, 363, 364, 365, 366, 368, 371, 373, 376, 379, 383, 384, 386, 387, 388, 389, 391, 393, 399, 400, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 430, 431, 434, 436, 443, 444, 450, 451, 458, 463, 468, 475, 476, 479, 481, 483, 484, 489, 495, 497, 499, 504], "vector": [2, 44, 92, 93, 94, 96, 97, 99, 100, 101, 112, 113, 114, 175, 195, 196, 251, 292, 339, 340, 341, 343, 344, 346, 347, 348, 360, 361, 362, 423, 443, 444, 503], "where": [2, 44, 97, 101, 110, 119, 122, 125, 127, 130, 131, 132, 142, 148, 151, 153, 158, 161, 173, 175, 178, 179, 190, 193, 243, 251, 292, 344, 348, 358, 366, 371, 374, 375, 379, 380, 381, 391, 397, 400, 402, 406, 409, 422, 423, 427, 428, 439, 441, 493], "applic": [2, 77, 80, 111, 122, 158, 162, 163, 166, 168, 169, 170, 171, 213, 226, 227, 251, 325, 328, 359, 371, 406, 411, 412, 415, 417, 418, 419, 420, 462, 476, 477, 500, 502], "static": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 124, 125, 127, 131, 136, 137, 139, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 214, 217, 233, 234, 248, 251, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 373, 374, 375, 380, 385, 386, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439, 463, 466, 483, 484, 498, 504], "sql": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 127, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 201, 217, 219, 225, 229, 233, 239, 241, 242, 243, 244, 251, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 375, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 448, 450, 466, 468, 475, 479, 483, 489, 490, 491, 493, 494], "creat": [2, 3, 4, 28, 44, 50, 69, 77, 87, 92, 93, 99, 107, 110, 113, 114, 120, 137, 142, 143, 146, 148, 156, 164, 167, 171, 184, 190, 201, 204, 219, 230, 241, 242, 243, 244, 247, 249, 251, 252, 253, 275, 292, 298, 316, 325, 335, 336, 339, 340, 346, 355, 358, 361, 362, 368, 386, 391, 392, 394, 397, 404, 413, 416, 420, 432, 439, 450, 453, 468, 490, 491, 493, 494, 497, 504, 505, 508, 510], "new": [2, 3, 4, 10, 50, 63, 78, 81, 90, 92, 93, 97, 101, 102, 103, 114, 117, 138, 139, 142, 156, 158, 161, 163, 168, 169, 173, 177, 196, 225, 230, 249, 251, 252, 253, 258, 298, 311, 326, 329, 337, 339, 340, 344, 348, 350, 351, 362, 365, 387, 388, 391, 393, 394, 404, 406, 409, 412, 417, 418, 422, 425, 431, 444, 458, 463, 474, 475, 480, 503, 504], "differ": [2, 3, 4, 67, 78, 83, 84, 101, 102, 107, 108, 115, 117, 122, 128, 150, 151, 160, 167, 171, 177, 187, 190, 201, 227, 236, 251, 252, 253, 314, 326, 330, 332, 348, 350, 355, 356, 363, 365, 371, 376, 399, 400, 408, 416, 420, 425, 436, 439, 450, 476, 487, 508], "all": [2, 3, 4, 5, 9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 85, 86, 90, 92, 93, 94, 95, 105, 109, 110, 111, 114, 117, 119, 124, 128, 132, 137, 140, 142, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 181, 186, 190, 195, 197, 213, 214, 227, 230, 234, 249, 251, 252, 253, 257, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 299, 302, 304, 305, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 333, 334, 337, 339, 340, 341, 342, 353, 357, 358, 359, 362, 365, 366, 369, 373, 376, 386, 389, 391, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 430, 435, 439, 443, 445, 462, 463, 476, 480, 484, 499, 504, 509], "should": [2, 3, 4, 11, 28, 44, 50, 67, 78, 79, 80, 85, 91, 94, 99, 100, 106, 113, 115, 122, 124, 131, 132, 136, 137, 142, 146, 150, 151, 156, 157, 165, 177, 186, 201, 203, 210, 214, 233, 241, 242, 249, 251, 252, 253, 259, 275, 292, 298, 307, 308, 314, 326, 327, 328, 333, 336, 338, 341, 346, 347, 354, 361, 363, 371, 373, 380, 381, 385, 386, 391, 394, 399, 400, 404, 405, 414, 423, 425, 435, 450, 452, 457, 458, 463, 471, 475, 483, 490, 491], "newli": [2, 3, 4, 111, 251, 252, 253, 359], "structtyp": [2, 219, 251], "schema": [2, 135, 227, 251, 384, 476, 500], "look": [2, 137, 157, 168, 169, 170, 171, 178, 251, 336, 386, 405, 417, 418, 419, 420, 427, 503], "like": [2, 7, 14, 20, 24, 28, 29, 33, 38, 41, 46, 52, 53, 63, 79, 86, 90, 94, 96, 98, 103, 109, 117, 120, 122, 130, 135, 142, 151, 154, 156, 157, 160, 161, 164, 167, 171, 177, 187, 190, 214, 227, 251, 254, 261, 267, 271, 275, 276, 280, 286, 289, 294, 300, 301, 311, 327, 334, 337, 341, 343, 345, 351, 357, 365, 368, 371, 379, 384, 391, 400, 403, 404, 405, 408, 409, 413, 416, 420, 425, 436, 439, 463, 476, 500, 502, 503], "struct": [2, 194, 200, 202, 229, 239, 251, 442, 448, 451, 479, 489], "containsnul": [2, 44, 192, 194, 200, 202, 229, 239, 251, 292, 440, 442, 448, 451, 479, 489], "true": [2, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 66, 67, 77, 78, 79, 80, 85, 86, 87, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 124, 127, 128, 129, 131, 135, 137, 140, 150, 151, 153, 156, 161, 164, 175, 177, 178, 181, 186, 187, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 214, 219, 227, 229, 230, 234, 238, 239, 241, 242, 244, 245, 251, 262, 263, 264, 265, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 287, 288, 290, 291, 292, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 313, 314, 325, 326, 327, 328, 333, 334, 335, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 373, 375, 376, 378, 380, 384, 386, 389, 399, 400, 404, 413, 423, 425, 427, 435, 436, 439, 440, 441, 442, 443, 444, 445, 448, 451, 452, 454, 463, 476, 479, 480, 484, 488, 489, 490, 491, 494, 495, 500, 504, 505], "nullabl": [2, 44, 192, 194, 200, 202, 229, 238, 239, 251, 292, 440, 442, 448, 451, 479, 488, 489], "integ": [2, 67, 78, 79, 80, 105, 110, 111, 194, 200, 202, 214, 238, 251, 314, 326, 327, 328, 353, 358, 359, 442, 448, 451, 488], "map": [2, 11, 44, 91, 94, 114, 119, 142, 148, 156, 157, 177, 194, 200, 202, 203, 214, 219, 225, 229, 239, 247, 251, 259, 292, 338, 341, 362, 366, 391, 393, 394, 397, 404, 405, 425, 442, 448, 451, 452, 458, 463, 468, 474, 475, 479, 480, 489, 503], "kei": [2, 7, 67, 70, 83, 84, 107, 108, 115, 116, 125, 139, 167, 194, 200, 201, 202, 227, 229, 233, 239, 247, 251, 254, 314, 318, 330, 332, 355, 356, 363, 364, 374, 388, 416, 442, 448, 450, 451, 476, 479, 483, 489, 497, 500], "valuecontainsnul": [2, 194, 200, 202, 229, 239, 251, 442, 448, 451, 479, 489], "arrai": [2, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 124, 125, 132, 137, 145, 148, 150, 151, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 184, 185, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 219, 229, 231, 239, 251, 254, 256, 257, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 316, 319, 320, 321, 323, 324, 325, 326, 327, 328, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 365, 373, 374, 381, 386, 393, 397, 399, 400, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 432, 434, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 468, 479, 481, 489, 505, 508], "element": [2, 44, 132, 142, 175, 192, 194, 200, 202, 203, 229, 230, 231, 239, 251, 292, 381, 391, 423, 440, 442, 448, 451, 452, 479, 480, 489], "float": [2, 3, 7, 8, 9, 28, 44, 50, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 91, 124, 136, 137, 139, 142, 145, 146, 151, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 190, 192, 194, 195, 201, 202, 214, 229, 251, 252, 254, 256, 257, 275, 292, 298, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 338, 373, 385, 386, 388, 391, 393, 394, 400, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 439, 440, 442, 443, 450, 451, 463, 479], "row": [2, 51, 85, 87, 114, 150, 151, 154, 194, 202, 203, 205, 219, 229, 230, 231, 241, 251, 299, 333, 335, 362, 399, 400, 403, 442, 451, 452, 454, 468, 479, 480, 490], "column": [2, 10, 28, 44, 50, 86, 114, 125, 134, 136, 137, 145, 146, 148, 154, 157, 175, 182, 187, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 206, 210, 219, 231, 233, 238, 241, 243, 251, 258, 275, 292, 298, 334, 362, 374, 383, 385, 386, 393, 394, 397, 403, 405, 423, 431, 436, 439, 440, 441, 442, 443, 444, 445, 448, 451, 452, 455, 458, 468, 481, 483, 488, 490, 493, 504], "transform": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 214, 219, 222, 225, 227, 231, 232, 233, 238, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 452, 454, 455, 463, 468, 471, 475, 476, 481, 483, 488, 500, 503, 504, 505, 508, 509, 510], "an": [2, 7, 8, 9, 11, 28, 44, 50, 51, 66, 67, 70, 78, 79, 80, 83, 85, 86, 91, 95, 97, 101, 102, 103, 104, 105, 106, 110, 111, 117, 119, 122, 124, 127, 128, 129, 130, 131, 132, 136, 137, 139, 142, 146, 148, 150, 151, 153, 154, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 184, 187, 190, 193, 194, 195, 196, 197, 200, 201, 202, 203, 206, 214, 218, 219, 221, 225, 227, 231, 239, 241, 242, 243, 244, 251, 254, 256, 257, 259, 275, 292, 298, 299, 307, 313, 314, 318, 326, 327, 328, 330, 333, 334, 336, 338, 342, 344, 348, 350, 351, 352, 353, 354, 358, 359, 365, 366, 371, 373, 375, 376, 378, 379, 380, 381, 385, 386, 388, 391, 393, 394, 397, 399, 400, 402, 403, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 432, 436, 439, 441, 442, 443, 444, 445, 448, 450, 451, 452, 455, 458, 463, 467, 468, 470, 474, 475, 476, 480, 489, 490, 491, 493, 494, 499, 501, 503, 504, 505, 507, 508], "alreadi": [3, 120, 122, 136, 137, 138, 187, 188, 201, 233, 252, 368, 371, 385, 386, 387, 436, 437, 450, 483, 508], "load": [3, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 122, 124, 125, 127, 131, 133, 136, 137, 139, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 200, 214, 217, 231, 233, 234, 238, 245, 249, 250, 252, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 371, 373, 374, 375, 380, 385, 386, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439, 448, 463, 466, 483, 484, 488, 495, 504, 507], "process": [3, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 117, 120, 122, 124, 135, 136, 137, 146, 151, 156, 157, 158, 161, 166, 170, 171, 173, 175, 187, 190, 192, 193, 194, 195, 196, 200, 202, 204, 206, 214, 227, 229, 239, 252, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 328, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 363, 364, 365, 368, 371, 373, 384, 385, 386, 394, 400, 404, 405, 406, 409, 415, 419, 420, 422, 423, 439, 440, 441, 442, 443, 444, 448, 451, 453, 455, 463, 476, 479, 489, 500, 503, 504, 505, 506], "byte": [3, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 124, 137, 145, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 200, 227, 229, 231, 252, 253, 254, 256, 257, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 314, 316, 319, 320, 321, 323, 324, 325, 326, 327, 328, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 373, 386, 393, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 448, 476, 479, 481], "origin": [4, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 99, 103, 107, 113, 135, 151, 156, 157, 158, 200, 214, 253, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 337, 338, 346, 351, 355, 361, 384, 400, 404, 405, 406, 448, 463], "height": [4, 67, 78, 79, 80, 200, 214, 253, 314, 326, 327, 328, 448, 463], "width": [4, 67, 78, 79, 80, 91, 156, 157, 200, 214, 253, 314, 326, 327, 328, 338, 404, 405, 448, 463], "nchannel": [4, 200, 253, 448], "mode": [4, 28, 44, 50, 60, 71, 137, 146, 178, 194, 200, 202, 203, 227, 253, 275, 292, 298, 307, 319, 386, 394, 427, 442, 448, 451, 452, 476], "imag": [4, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 157, 170, 200, 201, 207, 211, 214, 233, 253, 308, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 405, 419, 448, 450, 459, 463, 483], "uri": [4, 234, 253, 484], "pixel": [4, 78, 253, 326], "number": [4, 9, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 83, 84, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 122, 132, 134, 136, 137, 142, 145, 148, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 182, 190, 214, 230, 238, 241, 242, 253, 257, 264, 265, 270, 274, 275, 279, 283, 292, 297, 298, 304, 308, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 332, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 371, 381, 383, 385, 386, 391, 393, 397, 399, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 431, 439, 463, 488, 490, 491], "color": [4, 253], "channel": [4, 67, 78, 79, 80, 177, 214, 253, 314, 326, 327, 328, 425, 463], "opencv": [4, 200, 253, 448], "hubert_for_ctc": [5, 6, 255, 369], "hubertforctc": [5, 6, 7, 254], "wav2vec2_for_ctc": [5, 6, 255, 369], "wav2vec2forctc": [5, 6, 8, 256], "whisper_for_ctc": [5, 6, 255, 369], "whisperforctc": [5, 6, 9, 257], "albert_for_multiple_choic": [5, 12, 285, 369], "albertformultiplechoic": [5, 12, 13, 260], "albert_for_question_answ": [5, 12, 285, 369], "albertforquestionansw": [5, 12, 14, 261], "albert_for_sequence_classif": [5, 12, 285, 369], "albertforsequenceclassif": [5, 12, 15, 30, 262, 277], "albert_for_token_classif": [5, 12, 285, 369], "albertfortokenclassif": [5, 12, 16, 90, 263, 337], "albert_for_zero_shot_classif": [5, 12, 285, 369], "albertforzeroshotclassif": [5, 12, 17, 264], "bart_for_zero_shot_classif": [5, 12, 285, 369], "bartforzeroshotclassif": [5, 12, 17, 18, 264, 265], "bert_for_multiple_choic": [5, 12, 285, 369], "bertformultiplechoic": [5, 12, 19, 266], "bert_for_question_answ": [5, 12, 285, 369], "bertforquestionansw": [5, 12, 13, 20, 51, 260, 267, 299], "bert_for_sequence_classif": [5, 12, 285, 369], "bertforsequenceclassif": [5, 12, 21, 23, 268, 270], "bert_for_token_classif": [5, 12, 285, 369], "bertfortokenclassif": [5, 12, 22, 269], "bert_for_zero_shot_classif": [5, 12, 285, 369], "bertforzeroshotclassif": [5, 12, 23, 270], "camembert_for_question_answ": [5, 12, 285, 369], "camembertforquestionansw": [5, 12, 24, 271], "camembert_for_sequence_classif": [5, 12, 285, 369], "camembertforsequenceclassif": [5, 12, 25, 27, 272, 274], "camembert_for_token_classif": [5, 12, 285, 369], "camembertfortokenclassif": [5, 12, 26, 273], "camembert_for_zero_shot_classif": [5, 12, 285, 369], "camembertforzeroshotclassif": [5, 12, 27, 274], "classifierdlapproach": [5, 12, 28, 44, 275, 292, 504], "classifierdlmodel": [5, 12, 28, 44, 275, 292, 504], "deberta_for_question_answ": [5, 12, 285, 369], "debertaforquestionansw": [5, 12, 29, 276], "deberta_for_sequence_classif": [5, 12, 285, 369], "debertaforsequenceclassif": [5, 12, 27, 30, 32, 274, 277, 279], "deberta_for_token_classif": [5, 12, 285, 369], "debertafortokenclassif": [5, 12, 31, 278], "deberta_for_zero_shot_classif": [5, 12, 285, 369], "debertaforzeroshotclassif": [5, 12, 32, 279], "distil_bert_for_question_answ": [5, 12, 285, 369], "distilbertforquestionansw": [5, 12, 33, 280], "distil_bert_for_sequence_classif": [5, 12, 285, 369], "distilbertforsequenceclassif": [5, 12, 17, 34, 36, 264, 281, 283], "distil_bert_for_token_classif": [5, 12, 285, 369], "distilbertfortokenclassif": [5, 12, 35, 282], "distil_bert_for_zero_shot_classif": [5, 12, 285, 369], "distilbertforzeroshotclassif": [5, 12, 36, 283], "distilbert_for_multiple_choic": [5, 12, 285, 369], "distilbertformultiplechoic": [5, 12, 37, 284], "longformer_for_question_answ": [5, 12, 285, 369], "longformerforquestionansw": [5, 12, 38, 286], "longformer_for_sequence_classif": [5, 12, 285, 369], "longformerforsequenceclassif": [5, 12, 39, 287], "longformer_for_token_classif": [5, 12, 285, 369], "longformerfortokenclassif": [5, 12, 40, 288], "mpnet_for_question_answ": [5, 12, 285, 369], "mpnetforquestionansw": [5, 12, 41, 289], "mpnet_for_sequence_classif": [5, 12, 285, 369], "mpnetforsequenceclassif": [5, 12, 42, 290], "mpnet_for_token_classif": [5, 12, 285, 369], "mpnetfortokenclassif": [5, 12, 43, 291], "multi_classifier_dl": [5, 12, 285, 369], "multiclassifierdlapproach": [5, 12, 28, 44, 227, 275, 292, 476, 500], "multiclassifierdlmodel": [5, 12, 28, 44, 275, 292], "roberta_for_multiple_choic": [5, 12, 285, 369], "robertaformultiplechoic": [5, 12, 45, 293], "roberta_for_question_answ": [5, 12, 285, 369], "robertaforquestionansw": [5, 12, 45, 46, 139, 293, 294, 388], "roberta_for_sequence_classif": [5, 12, 285, 369], "robertaforsequenceclassif": [5, 12, 47, 49, 295, 297], "roberta_for_token_classif": [5, 12, 285, 369], "robertafortokenclassif": [5, 12, 48, 296], "roberta_for_zero_shot_classif": [5, 12, 285, 369], "robertaforzeroshotclassif": [5, 12, 49, 297], "sentiment_dl": [5, 12, 285, 369], "sentimentdlapproach": [5, 12, 28, 44, 50, 275, 292, 298], "sentimentdlmodel": [5, 12, 28, 44, 50, 275, 292, 298], "tapas_for_question_answ": [5, 12, 285, 369], "tapasforquestionansw": [5, 12, 51, 299], "xlm_roberta_for_multiple_choic": [5, 12, 285, 369], "xlmrobertaformultiplechoic": [5, 12, 52, 300], "xlm_roberta_for_question_answ": [5, 12, 285, 369], "xlmrobertaforquestionansw": [5, 12, 53, 301], "xlm_roberta_for_sequence_classif": [5, 12, 285, 369], "xlmrobertaforsequenceclassif": [5, 12, 54, 56, 302, 304], "xlm_roberta_for_token_classif": [5, 12, 285, 369], "xlmrobertafortokenclassif": [5, 12, 43, 55, 291, 303], "xlm_roberta_for_zero_shot_classif": [5, 12, 285, 369], "xlmrobertaforzeroshotclassif": [5, 12, 56, 304], "xlnet_for_sequence_classif": [5, 12, 285, 369], "xlnetforsequenceclassif": [5, 12, 57, 305], "xlnet_for_token_classif": [5, 12, 285, 369], "xlnetfortokenclassif": [5, 12, 58, 306], "extractor": [5, 59, 127, 131, 184, 309, 369, 375, 380, 432], "spanbert_coref": [5, 62, 310, 369], "spanbertcorefmodel": [5, 62, 63, 311], "blip_for_question_answ": [5, 64, 317, 369], "blipforquestionansw": [5, 64, 65, 312], "clip_for_zero_shot_classif": [5, 64, 317, 369], "clipforzeroshotclassif": [5, 64, 65, 66, 71, 72, 73, 75, 76, 312, 313, 319, 320, 321, 323, 324], "convnext_for_image_classif": [5, 64, 317, 369], "convnextforimageclassif": [5, 64, 67, 314], "florence2_transform": [5, 64, 317, 369], "florence2transform": [5, 64, 68, 315], "gemma3_for_multimod": [5, 64, 317, 369], "gemma3formultimod": [5, 64, 69, 316], "internvl_for_multimod": [5, 64, 317, 369], "internvlformultimod": [5, 64, 70, 318], "janus_for_multimod": [5, 64, 317, 369], "janusformultimod": [5, 64, 71, 319], "llava_for_multimod": [5, 64, 317, 369], "llavaformultimod": [5, 64, 72, 320], "mllama_for_multimod": [5, 64, 317, 369], "mllamaformultimod": [5, 64, 73, 321], "paligemma_for_multimod": [5, 64, 317, 369], "paligemmaformultimod": [5, 64, 74, 322], "phi3_vision_for_multimod": [5, 64, 317, 369], "phi3vis": [5, 64, 75, 323], "qwen2vl_transform": [5, 64, 317, 369], "qwen2vltransform": [5, 64, 76, 324], "smolvlm_transform": [5, 64, 317, 369], "smolvlmtransform": [5, 64, 77, 325], "swin_for_image_classif": [5, 64, 317, 369], "swinforimageclassif": [5, 64, 78, 326], "vision_encoder_decoder_for_image_capt": [5, 64, 317, 369], "visionencoderdecoderforimagecapt": [5, 64, 79, 327], "vit_for_image_classif": [5, 64, 317, 369], "vitforimageclassif": [5, 64, 80, 328], "dependency_pars": [5, 82, 234, 331, 369, 484, 509], "dependencyparserapproach": [5, 82, 83, 242, 330, 491, 510], "dependencyparsermodel": [5, 82, 83, 84, 120, 330, 332, 368], "typed_dependency_pars": [5, 82, 331, 369], "typeddependencyparserapproach": [5, 82, 83, 84, 330, 332], "typeddependencyparsermodel": [5, 82, 84, 120, 332, 368], "albert_embed": [5, 89, 349, 369], "albertembed": [5, 16, 89, 90, 263, 337], "auto_gguf_embed": [5, 89, 349, 369], "autoggufembed": [5, 89, 91, 338], "bert_embed": [5, 89, 349, 369], "bertembed": [5, 89, 92, 96, 102, 109, 137, 195, 339, 343, 350, 357, 386, 443], "bert_sentence_embed": [5, 89, 349, 369], "bertsentenceembed": [5, 44, 50, 89, 93, 108, 116, 292, 298, 340, 356, 364], "bge_embed": [5, 89, 349, 369], "bgeembed": [5, 89, 94, 341], "camembert_embed": [5, 89, 349, 369], "camembertembed": [5, 89, 95, 342], "chunk_embed": [5, 89, 349, 369], "chunkembed": [5, 89, 96, 195, 343, 443], "deberta_embed": [5, 89, 349, 369], "debertaembed": [5, 89, 97, 344], "distil_bert_embed": [5, 89, 349, 369], "distilbertembed": [5, 89, 98, 345], "doc2vec": [5, 89, 349, 369], "doc2vecapproach": [5, 89, 99, 346], "doc2vecmodel": [5, 89, 99, 346], "e5_embed": [5, 89, 349, 369], "e5embed": [5, 89, 100, 104, 106, 175, 347, 352, 354, 423], "elmo_embed": [5, 89, 349, 369], "elmoembed": [5, 89, 101, 348], "instructor_embed": [5, 89, 349, 369], "instructorembed": [5, 89, 102, 350], "longformer_embed": [5, 89, 349, 369], "longformerembed": [5, 89, 103, 351], "mpnet_embed": [5, 89, 349, 369], "mpnetembed": [5, 89, 104, 352], "mxbai_embed": [5, 89, 349, 369], "mxbaiembed": [5, 89, 105, 353], "nomic_embed": [5, 89, 349, 369], "nomicembed": [5, 89, 106, 354], "roberta_embed": [5, 89, 349, 369], "robertaembed": [5, 89, 107, 115, 355, 363], "roberta_sentence_embed": [5, 89, 349, 369], "robertasentenceembed": [5, 89, 108, 356], "sentenceembed": [5, 28, 44, 50, 89, 109, 114, 195, 275, 292, 298, 357, 362, 443], "snowflake_embed": [5, 89, 349, 369], "snowflakeembed": [5, 89, 110, 358], "uae_embed": [5, 89, 349, 369], "uaeembed": [5, 89, 111, 359], "universal_sentence_encod": [5, 89, 349, 369], "universalsentenceencod": [5, 28, 44, 50, 89, 112, 227, 275, 292, 298, 360, 476, 500, 504], "word2vec": [5, 89, 99, 346, 349, 369], "word2vecapproach": [5, 89, 113, 361], "word2vecmodel": [5, 89, 113, 361], "wordembeddingsmodel": [5, 89, 96, 109, 114, 120, 136, 137, 138, 195, 343, 357, 362, 368, 385, 386, 387, 443], "xlm_roberta_embed": [5, 89, 349, 369], "xlmrobertaembed": [5, 89, 115, 363], "xlm_roberta_sentence_embed": [5, 89, 349, 369], "xlmrobertasentenceembed": [5, 89, 116, 364], "xlnet_embed": [5, 89, 349, 369], "xlnetembed": [5, 89, 117, 365], "entity_rul": [5, 118, 367, 369], "entityrulerapproach": [5, 118, 119, 366], "entityrulermodel": [5, 118, 119, 366], "yake_keyword_extract": [5, 121, 369, 370], "yakekeywordextract": [5, 121, 122, 371], "language_detector_dl": [5, 123, 369, 372], "languagedetectordl": [5, 123, 124, 373], "big_text_match": [5, 126, 369, 377], "bigtextmatch": [5, 126, 127, 131, 375, 380], "bigtextmatchermodel": [5, 126, 127, 375], "date_match": [5, 126, 369, 377], "datematch": [5, 81, 126, 128, 329, 376], "datematcherutil": [5, 126, 128, 129, 376], "multi_date_match": [5, 126, 369, 377], "multidatematch": [5, 81, 126, 128, 129, 329, 376, 378], "regex_match": [5, 126, 369, 377], "regexmatch": [5, 126, 130, 379], "regexmatchermodel": [5, 126, 130, 379], "text_match": [5, 126, 369, 377], "textmatch": [5, 126, 127, 131, 184, 375, 380, 432], "textmatchermodel": [5, 126, 127, 131, 375, 380], "ner_approach": [5, 133, 369, 382], "nerapproach": [5, 133, 134, 136, 137, 383], "ner_convert": [5, 133, 369, 382], "nerconvert": [5, 96, 133, 135, 136, 137, 227, 343, 384, 385, 386, 476, 500], "ner_crf": [5, 133, 369, 382], "nercrfapproach": [5, 133, 136, 137, 385, 386], "nercrfmodel": [5, 133, 136, 137, 385, 386], "ner_dl": [5, 133, 369, 382], "nerdlapproach": [5, 133, 136, 137, 241, 385, 386, 490, 510], "nerdlmodel": [5, 120, 133, 135, 136, 137, 138, 227, 234, 368, 384, 385, 386, 387, 476, 484, 500], "ner_overwrit": [5, 133, 369, 382], "neroverwrit": [5, 133, 138, 387], "zero_shot_ner_model": [5, 133, 369, 382], "zeroshotnermodel": [5, 133, 139, 388], "openai_complet": [5, 141, 369, 390], "openaicomplet": [5, 141, 142, 391], "openai_embed": [5, 141, 369, 390], "openaiembed": [5, 141, 143, 392], "classifier_encod": [5, 144, 369, 395], "classifierencod": [5, 28, 44, 50, 144, 145, 393], "evaluation_dl_param": [5, 144, 369, 395], "evaluationdlparam": [5, 28, 44, 50, 137, 144, 146, 394], "perceptron": [5, 82, 83, 147, 330, 369, 396], "perceptronapproach": [5, 147, 148, 243, 397, 493, 510], "perceptronmodel": [5, 11, 83, 84, 120, 136, 147, 148, 241, 259, 330, 332, 368, 385, 397, 490], "sentence_detector": [5, 51, 139, 149, 299, 369, 388, 398], "sentencedetector": [5, 11, 28, 51, 63, 83, 84, 93, 96, 108, 112, 116, 120, 122, 125, 130, 132, 136, 137, 138, 139, 148, 149, 150, 151, 181, 184, 204, 206, 214, 241, 259, 275, 299, 311, 330, 332, 340, 343, 356, 360, 364, 368, 371, 374, 379, 381, 385, 386, 387, 388, 397, 399, 400, 430, 432, 453, 455, 463, 490, 504, 505], "sentencedetectorparam": [5, 149, 150, 399], "sentence_detector_dl": [5, 149, 165, 307, 369, 398, 414], "sentencedetectordlapproach": [5, 149, 151, 400], "sentencedetectordlmodel": [5, 149, 151, 165, 307, 400, 414], "sentiment_detector": [5, 152, 369, 401], "sentimentdetector": [5, 152, 153, 402], "sentimentdetectormodel": [5, 152, 153, 402], "vivekn_senti": [5, 152, 369, 401], "viveknsentimentapproach": [5, 152, 153, 154, 402, 403], "viveknsentimentmodel": [5, 152, 154, 403], "auto_gguf_model": [5, 91, 155, 338, 369, 410], "autoggufmodel": [5, 155, 156, 404], "auto_gguf_vision_model": [5, 155, 369, 410], "autoggufvisionmodel": [5, 155, 157, 405], "bart_transform": [5, 155, 369, 410], "barttransform": [5, 155, 158, 406], "cohere_transform": [5, 155, 369, 410], "coheretransform": [5, 155, 159, 407], "cpm_transform": [5, 155, 369, 410], "cpmtransform": [5, 155, 160, 408], "gpt2_transform": [5, 155, 369, 410], "gpt2transform": [5, 155, 161, 409], "llama2_transform": [5, 155, 369, 410], "llama2transform": [5, 155, 162, 411], "llama3_transform": [5, 155, 369, 410], "llama3transform": [5, 155, 163, 412], "m2m100_transform": [5, 155, 369, 410], "m2m100transform": [5, 155, 164, 413], "marian_transform": [5, 155, 369, 410], "mariantransform": [5, 60, 155, 165, 307, 414], "mistral_transform": [5, 155, 369, 410], "mistraltransform": [5, 155, 166, 415], "nllb_transform": [5, 155, 369, 410], "nllbtransform": [5, 155, 167, 416], "olmo_transform": [5, 155, 369, 410], "olmotransform": [5, 155, 168, 417], "phi2_transform": [5, 155, 369, 410], "phi2transform": [5, 155, 169, 418], "phi3_transform": [5, 155, 369, 410], "phi3transform": [5, 155, 170, 419], "qwen_transform": [5, 155, 369, 410], "qwentransform": [5, 155, 171, 420], "starcoder_transform": [5, 155, 369, 410], "starcodertransform": [5, 155, 172, 421], "t5_transform": [5, 155, 369, 410], "t5transform": [5, 155, 173, 422], "document_similarity_rank": [5, 174, 369, 424], "documentsimilarityrankerapproach": [5, 174, 175, 423], "documentsimilarityrankerfinish": [5, 174, 175, 423], "documentsimilarityrankermodel": [5, 174, 175, 423], "context_spell_check": [5, 176, 369, 426], "contextspellcheckerapproach": [5, 176, 177, 178, 179, 425, 427, 428], "contextspellcheckermodel": [5, 176, 177, 178, 179, 425, 427, 428], "norvig_sweet": [5, 176, 369, 426], "norvigsweetingapproach": [5, 176, 177, 178, 179, 425, 427, 428, 510], "norvigsweetingmodel": [5, 176, 177, 178, 179, 425, 427, 428], "symmetric_delet": [5, 176, 369, 426], "symmetricdeleteapproach": [5, 176, 177, 178, 179, 425, 427, 428, 510], "symmetricdeletemodel": [5, 176, 177, 178, 179, 425, 427, 428], "chunk_token": [5, 183, 369, 433], "chunktoken": [5, 183, 184, 432], "chunktokenizermodel": [5, 183, 184, 432], "recursive_token": [5, 183, 369, 433], "recursivetoken": [5, 183, 185, 434], "recursivetokenizermodel": [5, 183, 185, 434], "regex_token": [5, 183, 369, 433], "regextoken": [5, 183, 186, 190, 435, 439, 505], "tokenizermodel": [5, 127, 183, 184, 187, 375, 436], "word_segment": [5, 189, 369, 438], "wordsegmenterapproach": [5, 189, 190, 439], "wordsegmentermodel": [5, 189, 190, 439], "inputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 205, 206, 207, 210, 228, 231, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 441, 454, 455, 458, 481], "name": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 206, 210, 214, 217, 219, 224, 227, 228, 230, 231, 233, 234, 238, 241, 243, 247, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 451, 452, 454, 455, 458, 463, 466, 468, 474, 476, 481, 483, 484, 488, 490, 493, 497, 500, 504], "outputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 200, 202, 203, 205, 206, 207, 210, 220, 222, 228, 231, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 434, 435, 436, 437, 439, 440, 441, 442, 448, 451, 452, 454, 455, 458, 471, 481], "setparam": [5, 10, 174, 175, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 206, 207, 209, 258, 423, 440, 441, 442, 443, 444, 445, 448, 451, 452, 455, 457], "regexpars": [5, 11, 259], "setregexpars": [5, 11, 259], "entitynam": [5, 81, 329], "setentitynam": [5, 81, 329], "chunkoverlap": [5, 85, 333], "chunksiz": [5, 85, 333], "explodesplit": [5, 85, 87, 333, 335], "keepsepar": [5, 85, 333], "patternsareregex": [5, 85, 333], "setchunkoverlap": [5, 85, 333], "setchunks": [5, 85, 333], "setexplodesplit": [5, 85, 87, 333, 335], "setkeepsepar": [5, 85, 333], "setpatternsareregex": [5, 85, 333], "setsplitpattern": [5, 85, 183, 187, 333, 436], "settrimwhitespac": [5, 85, 87, 183, 186, 333, 335, 435], "splitpattern": [5, 85, 183, 187, 333, 436], "trimwhitespac": [5, 85, 87, 183, 186, 333, 335, 435], "action": [5, 86, 334], "encod": [5, 28, 59, 60, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 86, 92, 93, 97, 102, 103, 106, 112, 139, 158, 164, 165, 167, 227, 275, 307, 312, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 334, 339, 340, 344, 350, 351, 354, 360, 388, 406, 413, 414, 416, 476], "lowercas": [5, 59, 60, 86, 140, 186, 190, 191, 193, 307, 334, 389, 435, 439, 441], "pattern": [5, 11, 60, 61, 85, 86, 119, 128, 130, 140, 178, 179, 183, 186, 187, 189, 190, 203, 230, 259, 307, 308, 333, 334, 366, 376, 379, 389, 427, 428, 435, 436, 439, 452], "polici": [5, 86, 334], "replac": [5, 80, 86, 97, 103, 124, 125, 138, 151, 158, 178, 179, 213, 328, 334, 344, 351, 373, 374, 387, 400, 406, 427, 428, 462, 504], "setact": [5, 86, 334], "setencod": [5, 59, 60, 86, 307, 334], "setlowercas": [5, 59, 60, 86, 140, 191, 193, 206, 307, 334, 389, 441, 455], "setpattern": [5, 86, 183, 186, 189, 190, 334, 435, 439], "setpolici": [5, 86, 334], "setreplac": [5, 86, 334], "numtoken": [5, 87, 335], "setnumtoken": [5, 87, 335], "settokenoverlap": [5, 87, 335], "tokenoverlap": [5, 87, 335], "delimit": [5, 13, 19, 37, 45, 114, 119, 120, 125, 126, 130, 132, 136, 140, 153, 186, 205, 230, 241, 243, 260, 266, 284, 293, 362, 366, 368, 374, 379, 381, 385, 389, 402, 435, 454, 480, 490, 493], "entitytyp": [5, 120, 368], "explodeent": [5, 120, 368], "includeedg": [5, 120, 368], "maxsentences": [5, 120, 368], "mergeent": [5, 120, 368], "mergeentitiesiobformat": [5, 120, 368], "minsentences": [5, 120, 368], "optionalinputannotatortyp": [5, 118, 119, 120, 207, 210, 366, 368, 458], "posmodel": [5, 120, 368], "relationshiptyp": [5, 120, 368], "roottoken": [5, 120, 368], "setdelimit": [5, 120, 126, 130, 132, 368, 379, 381], "setdependencyparsermodel": [5, 120, 368], "setentitytyp": [5, 120, 368], "setexplodeent": [5, 120, 368], "setincludeedg": [5, 120, 368], "setmaxsentences": [5, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 120, 312, 316, 318, 319, 320, 321, 322, 323, 324, 325, 368], "setmergeent": [5, 120, 368], "setmergeentitiesiobformat": [5, 120, 368], "setminsentences": [5, 120, 368], "setposmodel": [5, 120, 368], "setrelationshiptyp": [5, 120, 368], "setroottoken": [5, 120, 368], "settypeddependencyparsermodel": [5, 120, 368], "dictionari": [5, 114, 122, 125, 130, 136, 138, 139, 140, 152, 153, 176, 178, 179, 203, 227, 247, 362, 371, 374, 379, 385, 387, 388, 389, 402, 427, 428, 452, 476, 497], "formcol": [5, 125, 242, 374, 491], "lemmacol": [5, 125, 242, 374, 491], "setdictionari": [5, 125, 152, 153, 176, 178, 179, 374, 402, 427, 428], "setformcol": [5, 125, 374], "setlemmacol": [5, 125, 374], "enablecumul": [5, 132, 381], "n": [5, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 87, 91, 116, 122, 132, 135, 136, 137, 142, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 185, 201, 203, 205, 214, 219, 229, 233, 249, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 333, 335, 338, 364, 371, 381, 384, 385, 386, 391, 399, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 434, 450, 452, 454, 463, 468, 479, 483], "setenablecumul": [5, 132, 381], "setn": [5, 96, 132, 343, 381], "cleanuppattern": [5, 86, 140, 334, 389], "maxlength": [5, 140, 149, 150, 151, 183, 186, 187, 389, 399, 400, 435, 436], "minlength": [5, 140, 149, 150, 151, 183, 186, 187, 389, 399, 400, 435, 436], "setcleanuppattern": [5, 140, 389], "setmaxlength": [5, 140, 149, 150, 151, 183, 186, 187, 389, 399, 400, 435, 436], "setminlength": [5, 140, 149, 150, 151, 183, 186, 187, 389, 399, 400, 435, 436], "setslangdictionari": [5, 140, 389], "slangdictionari": [5, 140, 389], "slangmatchcas": [5, 140, 389], "casesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 126, 127, 131, 176, 178, 181, 207, 214, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 363, 364, 365, 375, 380, 427, 430, 463], "loaddefaultstopword": [5, 121, 122, 181, 371, 430], "setcasesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 96, 98, 103, 107, 115, 126, 127, 131, 136, 176, 178, 181, 195, 206, 207, 214, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 343, 345, 351, 355, 363, 375, 380, 385, 427, 430, 443, 455, 463], "setlocal": [5, 181, 430], "setstopword": [5, 121, 122, 138, 181, 371, 387, 430], "stopword": [5, 121, 122, 138, 181, 371, 387, 430], "getgraphfil": [5, 182, 431], "getgraphfold": [5, 182, 431], "gethiddenunitsnumb": [5, 182, 431], "getinputcol": [5, 174, 175, 182, 191, 195, 196, 207, 210, 423, 431, 443, 444, 458], "getlabelcolumn": [5, 133, 134, 182, 383, 431], "graphfil": [5, 182, 431], "graphfold": [5, 133, 137, 176, 177, 182, 386, 425, 431], "hiddenunitsnumb": [5, 182, 431], "inputcol": [5, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 42, 44, 46, 47, 49, 50, 53, 54, 56, 57, 109, 124, 174, 175, 182, 191, 192, 194, 195, 196, 197, 200, 202, 203, 207, 210, 231, 238, 262, 264, 265, 268, 270, 272, 274, 275, 277, 279, 281, 283, 287, 290, 292, 295, 297, 298, 302, 304, 305, 357, 373, 423, 431, 440, 442, 443, 444, 445, 448, 451, 452, 458, 481, 488], "inputcolsvalid": [5, 182, 207, 210, 431, 458], "labelcolumn": [5, 28, 44, 50, 133, 134, 136, 137, 144, 145, 182, 275, 292, 298, 383, 385, 386, 393, 431], "setgraphfil": [5, 182, 431], "setgraphfold": [5, 133, 137, 176, 177, 182, 386, 425, 431], "sethiddenunitsnumb": [5, 182, 431], "setinputcol": [5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 206, 207, 210, 227, 231, 236, 238, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 451, 452, 454, 455, 458, 476, 481, 488, 500, 504, 505], "setlabelcolumn": [5, 28, 44, 50, 133, 134, 136, 137, 144, 145, 182, 227, 275, 292, 298, 383, 385, 386, 393, 431, 476, 500, 504], "avail": [5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 122, 124, 125, 128, 130, 136, 137, 148, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 190, 214, 233, 234, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 369, 371, 373, 374, 376, 379, 385, 386, 397, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 439, 463, 471, 483, 484, 500, 507], "configprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 89, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 123, 124, 133, 137, 144, 145, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 254, 256, 257, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 316, 319, 320, 321, 323, 324, 325, 326, 327, 328, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 373, 386, 393, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425], "loadsavedmodel": [6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "setconfigprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 62, 63, 64, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 89, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 112, 115, 116, 117, 123, 124, 133, 137, 144, 145, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 254, 256, 257, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 311, 314, 316, 319, 320, 321, 323, 324, 325, 326, 327, 328, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 356, 360, 363, 364, 365, 373, 386, 393, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425], "getismultilingu": [6, 9, 257], "getlanguag": [6, 9, 257], "ismultilingu": [6, 9, 257], "setlanguag": [6, 9, 257], "settask": [6, 9, 155, 158, 161, 173, 207, 214, 257, 406, 409, 422, 463], "concern": [7, 8, 9, 15, 66, 67, 78, 79, 80, 81, 90, 254, 256, 257, 262, 313, 314, 326, 327, 328, 329, 337], "classnam": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 124, 125, 127, 130, 131, 136, 137, 139, 140, 142, 143, 148, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 184, 185, 187, 190, 205, 208, 209, 216, 222, 231, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 373, 374, 375, 379, 380, 385, 386, 388, 389, 391, 392, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 432, 434, 436, 439, 454, 456, 457, 465, 471, 481], "java_model": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 124, 125, 127, 130, 131, 136, 137, 139, 140, 142, 143, 148, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 184, 185, 187, 190, 199, 205, 209, 225, 231, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 373, 374, 375, 379, 380, 385, 386, 388, 389, 391, 392, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 432, 434, 436, 439, 447, 454, 457, 475, 481], "hubert": [7, 254], "head": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 63, 85, 90, 117, 135, 136, 137, 157, 201, 219, 233, 254, 256, 257, 260, 261, 262, 263, 266, 267, 268, 269, 271, 272, 273, 276, 277, 278, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 300, 301, 302, 303, 305, 306, 311, 333, 337, 365, 384, 385, 386, 405, 450, 468, 483, 504], "top": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 90, 122, 142, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 202, 214, 249, 254, 256, 257, 260, 261, 262, 263, 266, 267, 268, 269, 271, 272, 273, 276, 277, 278, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 300, 301, 302, 303, 305, 306, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 337, 371, 391, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 451, 463], "connectionist": [7, 8, 9, 254, 256, 257], "tempor": [7, 8, 9, 254, 256, 257], "classif": [7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 66, 67, 78, 80, 90, 94, 100, 102, 112, 154, 158, 173, 214, 247, 254, 256, 257, 260, 261, 262, 263, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 305, 306, 313, 314, 326, 328, 337, 341, 347, 350, 360, 403, 406, 422, 463, 497, 504], "ctc": [7, 8, 9, 254, 256, 257], "wa": [7, 8, 15, 16, 18, 21, 22, 23, 28, 30, 31, 32, 34, 35, 36, 39, 40, 43, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 78, 85, 86, 87, 95, 97, 98, 103, 107, 108, 114, 115, 116, 122, 142, 143, 154, 158, 161, 162, 164, 166, 169, 172, 177, 229, 233, 254, 256, 262, 263, 265, 268, 269, 270, 275, 277, 278, 279, 281, 282, 283, 287, 288, 291, 295, 296, 297, 298, 302, 303, 304, 305, 306, 313, 314, 326, 333, 334, 335, 342, 344, 345, 351, 355, 356, 362, 363, 364, 371, 391, 392, 403, 406, 409, 411, 413, 415, 418, 421, 425, 479, 483, 504, 505], "propos": [7, 8, 67, 78, 90, 95, 97, 98, 104, 107, 108, 111, 115, 116, 117, 167, 254, 256, 314, 326, 337, 342, 344, 345, 352, 355, 356, 359, 363, 364, 365, 416], "self": [7, 8, 78, 90, 103, 165, 254, 256, 307, 326, 337, 351, 414], "supervis": [7, 8, 9, 90, 100, 101, 106, 112, 122, 158, 161, 164, 170, 254, 256, 257, 337, 347, 348, 354, 360, 371, 406, 409, 413, 419], "speech": [7, 8, 9, 11, 95, 147, 148, 190, 243, 247, 254, 256, 257, 259, 342, 396, 397, 439, 493, 510], "represent": [7, 8, 78, 90, 92, 93, 98, 99, 100, 101, 110, 113, 114, 115, 116, 117, 135, 173, 175, 205, 218, 231, 254, 256, 326, 337, 339, 340, 345, 346, 347, 348, 358, 361, 362, 363, 364, 365, 384, 422, 423, 454, 467], "learn": [7, 8, 28, 44, 50, 71, 73, 77, 81, 90, 98, 99, 101, 107, 108, 112, 113, 115, 116, 117, 122, 136, 137, 145, 151, 156, 157, 158, 160, 161, 162, 163, 168, 169, 170, 171, 173, 177, 214, 227, 254, 256, 275, 292, 298, 319, 321, 325, 329, 337, 345, 346, 348, 355, 356, 360, 361, 363, 364, 365, 371, 385, 386, 393, 400, 404, 405, 406, 408, 409, 411, 412, 417, 418, 419, 420, 422, 425, 463, 476, 502], "mask": [7, 78, 97, 104, 115, 116, 117, 158, 186, 254, 326, 344, 352, 363, 364, 365, 406, 435], "predict": [7, 9, 66, 78, 97, 104, 137, 156, 157, 161, 173, 214, 227, 254, 257, 313, 326, 344, 352, 386, 404, 405, 409, 422, 463, 476, 500], "hidden": [7, 14, 16, 20, 22, 24, 26, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 90, 101, 117, 182, 254, 261, 263, 267, 269, 271, 273, 276, 278, 280, 282, 286, 288, 289, 291, 294, 296, 300, 301, 303, 306, 337, 348, 365, 431], "unit": [7, 161, 162, 182, 254, 409, 411, 431], "wei": [7, 78, 254, 326], "ning": [7, 254], "hsu": [7, 254], "benjamin": [7, 95, 254, 342], "bolt": [7, 254], "yao": [7, 254], "hung": [7, 254], "tsai": [7, 254], "kushal": [7, 254], "lakhotia": [7, 254], "ruslan": [7, 254], "salakhutdinov": [7, 254], "abdelrahman": [7, 8, 254, 256], "moham": [7, 8, 254, 256], "take": [7, 8, 17, 18, 23, 36, 49, 51, 56, 85, 87, 95, 104, 120, 131, 157, 167, 178, 181, 187, 204, 241, 254, 256, 264, 265, 270, 283, 297, 299, 304, 333, 335, 342, 352, 368, 380, 393, 394, 405, 416, 427, 430, 436, 453, 458, 463, 474, 480, 490, 503, 504, 508, 509], "transcrib": [7, 8, 9, 254, 256, 257], "text": [7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 207, 213, 214, 215, 218, 219, 227, 229, 230, 231, 237, 238, 239, 241, 242, 243, 244, 247, 254, 256, 257, 258, 259, 262, 263, 264, 265, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 285, 287, 288, 290, 291, 292, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 462, 463, 464, 467, 468, 476, 479, 480, 481, 486, 488, 489, 490, 491, 493, 494, 497, 500, 503, 504, 505, 509, 510], "need": [7, 8, 9, 11, 17, 83, 84, 94, 98, 100, 106, 107, 114, 119, 120, 122, 125, 128, 130, 136, 137, 140, 146, 148, 151, 154, 156, 157, 161, 164, 167, 169, 177, 178, 179, 186, 187, 192, 200, 201, 203, 227, 234, 241, 242, 243, 249, 254, 256, 257, 259, 264, 330, 332, 336, 341, 345, 347, 354, 355, 362, 366, 368, 371, 376, 379, 385, 386, 389, 394, 397, 400, 403, 404, 405, 409, 413, 416, 418, 425, 427, 428, 435, 436, 440, 448, 450, 452, 476, 484, 490, 491, 493, 500, 502, 504, 505, 508, 510], "provid": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 124, 125, 127, 128, 129, 130, 131, 136, 137, 140, 148, 151, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 190, 201, 214, 219, 233, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 373, 374, 375, 376, 378, 379, 380, 385, 386, 389, 393, 394, 397, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 439, 450, 458, 463, 468, 470, 474, 480, 483, 505], "pre": [7, 8, 9, 28, 44, 50, 66, 80, 92, 93, 97, 98, 100, 101, 104, 106, 112, 137, 146, 158, 173, 187, 194, 196, 202, 206, 242, 254, 256, 257, 275, 292, 298, 313, 328, 339, 340, 344, 345, 347, 348, 352, 354, 360, 386, 394, 406, 422, 442, 444, 451, 455, 491, 504], "processor": [7, 8, 254, 256], "m1": [7, 8, 254, 256], "due": [7, 8, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 90, 103, 111, 158, 254, 256, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 337, 351, 359, 406], "instruct": [7, 8, 73, 76, 89, 102, 160, 163, 166, 170, 254, 256, 321, 324, 350, 408, 412, 415, 419], "xla": [7, 8, 254, 256], "can": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 130, 135, 136, 137, 138, 139, 142, 143, 148, 150, 151, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 188, 190, 194, 195, 202, 203, 204, 205, 210, 214, 218, 227, 233, 234, 239, 241, 242, 243, 249, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 379, 384, 385, 386, 387, 388, 391, 392, 397, 399, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 437, 439, 442, 443, 451, 452, 453, 454, 463, 467, 476, 483, 484, 489, 490, 491, 493, 500, 502, 504, 505, 507, 508, 509, 510], "companion": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 136, 137, 139, 148, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 190, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 373, 374, 385, 386, 388, 397, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 439, 472], "speechtotext": [7, 8, 9, 254, 256, 257], "setoutputcol": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 206, 207, 210, 227, 231, 236, 238, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 451, 452, 454, 455, 458, 476, 481, 488, 500, 504, 505], "asr_hubert_large_ls960": [7, 9, 254, 257], "For": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 139, 140, 142, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 187, 190, 194, 195, 196, 202, 203, 206, 214, 227, 229, 233, 234, 244, 249, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 388, 389, 391, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 436, 439, 442, 443, 444, 451, 452, 455, 463, 476, 479, 483, 484, 494, 500, 501, 503, 504, 505, 506, 507, 508], "pleas": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 72, 74, 75, 76, 78, 79, 80, 83, 84, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 124, 125, 127, 128, 130, 131, 136, 137, 140, 148, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 184, 185, 190, 194, 202, 203, 204, 234, 249, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 320, 322, 323, 324, 326, 327, 328, 330, 332, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 373, 374, 375, 376, 379, 380, 385, 386, 389, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 432, 434, 439, 442, 451, 452, 453, 484, 501, 502, 506, 509], "see": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 187, 190, 194, 195, 196, 197, 202, 203, 206, 214, 217, 227, 233, 234, 244, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 436, 439, 442, 443, 444, 445, 451, 452, 455, 463, 466, 476, 483, 484, 494, 500, 501, 502, 507, 509, 510], "hub": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 124, 125, 136, 137, 148, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 190, 234, 247, 250, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 373, 374, 385, 386, 397, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 439, 484, 497], "To": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 91, 92, 94, 95, 97, 98, 103, 107, 111, 115, 117, 122, 128, 130, 148, 150, 156, 157, 158, 161, 168, 173, 190, 197, 201, 203, 204, 227, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 312, 313, 314, 319, 320, 321, 323, 324, 325, 326, 327, 328, 337, 338, 339, 341, 342, 344, 345, 351, 355, 359, 363, 365, 371, 376, 379, 397, 399, 404, 405, 406, 409, 417, 422, 439, 445, 450, 452, 453, 476, 500, 508], "which": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 105, 107, 109, 110, 111, 112, 113, 115, 117, 120, 122, 128, 129, 130, 137, 139, 140, 142, 143, 150, 151, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 186, 190, 195, 201, 214, 219, 234, 241, 242, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 339, 340, 341, 342, 344, 345, 346, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 363, 365, 368, 371, 376, 378, 379, 386, 388, 389, 391, 392, 399, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 427, 435, 439, 443, 450, 463, 468, 484, 490, 491, 504, 505], "compat": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 95, 97, 98, 103, 107, 112, 115, 117, 137, 195, 200, 234, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 312, 313, 314, 319, 320, 321, 323, 324, 325, 326, 327, 328, 337, 339, 342, 344, 345, 351, 355, 363, 365, 386, 443, 448, 484], "import": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 138, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 219, 227, 233, 238, 239, 241, 242, 243, 244, 245, 249, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 448, 450, 451, 452, 453, 454, 455, 468, 476, 483, 488, 489, 490, 491, 493, 494, 495, 500, 503, 504, 507, 508, 509, 510], "them": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 95, 97, 98, 103, 107, 115, 117, 119, 120, 122, 128, 130, 151, 163, 165, 172, 177, 181, 190, 200, 204, 206, 249, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 319, 320, 321, 323, 324, 325, 326, 327, 328, 337, 339, 342, 344, 345, 351, 355, 363, 365, 366, 368, 371, 376, 379, 400, 412, 414, 421, 425, 430, 439, 448, 453, 455, 504, 505], "5669": [7, 8, 9, 66, 67, 78, 79, 80, 95, 254, 256, 257, 313, 314, 326, 327, 328, 342], "more": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 95, 98, 100, 101, 102, 109, 115, 116, 120, 122, 128, 132, 135, 139, 142, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 186, 187, 194, 195, 196, 202, 203, 206, 214, 227, 229, 231, 233, 239, 244, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 334, 342, 345, 347, 348, 350, 357, 363, 364, 368, 371, 376, 381, 384, 388, 391, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 427, 435, 436, 442, 443, 444, 451, 452, 455, 463, 476, 479, 481, 483, 489, 494, 500, 501, 502, 504, 507, 510], "extend": [7, 8, 9, 11, 28, 44, 50, 63, 66, 67, 71, 73, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 98, 101, 107, 109, 112, 114, 115, 117, 122, 124, 125, 128, 129, 130, 131, 132, 136, 137, 139, 140, 146, 148, 150, 151, 153, 154, 156, 157, 158, 165, 173, 175, 177, 178, 180, 181, 185, 187, 190, 194, 195, 196, 202, 203, 206, 233, 254, 256, 257, 259, 275, 292, 298, 307, 311, 313, 314, 319, 321, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 345, 348, 355, 357, 360, 362, 363, 365, 371, 373, 374, 376, 378, 379, 380, 381, 385, 386, 388, 389, 394, 397, 399, 400, 402, 403, 404, 405, 406, 414, 422, 423, 425, 427, 429, 430, 434, 436, 439, 442, 443, 444, 451, 452, 455, 483], "exampl": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 219, 227, 229, 231, 233, 234, 238, 239, 241, 242, 243, 244, 245, 250, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 453, 454, 455, 468, 476, 479, 481, 483, 484, 488, 489, 490, 491, 493, 494, 495, 500, 503, 504, 505, 507, 508, 509, 510], "hubertforctctestspec": [7, 254], "paper": [7, 9, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 122, 151, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 190, 214, 244, 254, 257, 307, 314, 326, 327, 328, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 363, 364, 365, 371, 400, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 439, 494, 510], "abstract": [7, 9, 67, 78, 80, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 115, 116, 117, 122, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 244, 254, 257, 307, 314, 326, 328, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 356, 358, 359, 360, 363, 364, 365, 371, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 466, 494, 510], "approach": [7, 9, 67, 78, 107, 108, 111, 117, 122, 134, 136, 137, 139, 151, 153, 158, 161, 162, 163, 166, 169, 173, 177, 178, 179, 208, 254, 257, 314, 326, 355, 356, 359, 365, 371, 383, 385, 386, 388, 400, 402, 406, 409, 411, 412, 415, 418, 422, 425, 427, 428, 456, 507], "challeng": [7, 44, 78, 98, 101, 102, 107, 108, 111, 122, 166, 167, 169, 254, 292, 326, 345, 348, 350, 355, 356, 359, 371, 415, 416, 418], "three": [7, 94, 177, 188, 254, 341, 425, 437], "uniqu": [7, 142, 143, 158, 217, 254, 391, 392, 406, 466], "problem": [7, 17, 44, 90, 101, 104, 111, 158, 173, 177, 190, 254, 264, 292, 337, 348, 352, 359, 406, 422, 425, 439], "multipl": [7, 9, 13, 19, 37, 44, 45, 77, 80, 94, 95, 119, 122, 128, 150, 158, 163, 167, 171, 172, 175, 187, 219, 227, 229, 238, 241, 254, 257, 260, 266, 284, 292, 293, 325, 328, 341, 342, 366, 371, 376, 399, 406, 412, 416, 420, 421, 423, 436, 468, 476, 479, 488, 490], "sound": [7, 85, 254, 333], "each": [7, 8, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 67, 78, 79, 80, 85, 94, 97, 99, 100, 104, 106, 109, 113, 114, 119, 120, 122, 125, 127, 128, 130, 131, 132, 134, 136, 137, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 157, 158, 171, 175, 177, 178, 179, 186, 187, 190, 194, 202, 213, 214, 219, 225, 243, 254, 256, 264, 265, 270, 274, 275, 279, 283, 292, 297, 298, 304, 314, 326, 327, 328, 333, 341, 344, 346, 347, 352, 354, 357, 361, 362, 366, 368, 371, 374, 375, 376, 379, 380, 381, 383, 385, 386, 388, 389, 391, 392, 394, 397, 399, 400, 402, 405, 406, 420, 423, 425, 427, 428, 435, 436, 439, 442, 451, 462, 463, 468, 475, 493, 505], "input": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 210, 214, 219, 225, 229, 231, 233, 238, 241, 242, 243, 244, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 458, 463, 468, 475, 479, 481, 483, 488, 490, 491, 493, 494, 504, 505, 508, 510], "utter": [7, 254], "lexicon": [7, 254], "phase": [7, 98, 158, 254, 345, 406], "have": [7, 17, 18, 23, 28, 36, 44, 49, 50, 56, 87, 90, 95, 98, 102, 107, 108, 114, 122, 130, 132, 135, 136, 137, 138, 142, 148, 150, 151, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 179, 188, 203, 206, 249, 254, 264, 265, 270, 275, 283, 292, 297, 298, 304, 335, 336, 337, 342, 345, 350, 355, 356, 362, 371, 379, 381, 384, 385, 386, 387, 391, 397, 399, 400, 405, 407, 408, 409, 411, 412, 416, 417, 418, 419, 420, 428, 437, 452, 455, 471, 504, 505, 508], "variabl": [7, 99, 113, 203, 254, 346, 361, 452], "length": [7, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 85, 87, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 117, 132, 140, 142, 150, 151, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 186, 187, 203, 214, 229, 230, 238, 254, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 333, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 363, 364, 365, 381, 389, 391, 399, 400, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 435, 436, 452, 463, 479, 488], "explicit": [7, 128, 150, 161, 254, 336, 399, 409], "segment": [7, 63, 67, 68, 78, 98, 107, 189, 190, 247, 254, 311, 314, 315, 326, 345, 355, 438, 439], "deal": [7, 201, 254, 450, 508], "we": [7, 8, 9, 28, 44, 67, 78, 80, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 115, 116, 117, 122, 136, 137, 140, 142, 151, 156, 157, 158, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 187, 201, 203, 219, 249, 254, 256, 257, 275, 292, 307, 314, 326, 328, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 359, 360, 361, 363, 364, 365, 371, 385, 386, 389, 391, 400, 404, 405, 406, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 436, 450, 452, 468, 500, 503, 504, 505, 508, 509, 510], "bert": [7, 15, 19, 20, 21, 22, 23, 25, 27, 30, 34, 35, 39, 42, 47, 51, 54, 57, 79, 90, 92, 93, 97, 98, 103, 104, 107, 108, 110, 115, 116, 117, 137, 138, 139, 158, 173, 254, 262, 266, 267, 268, 269, 270, 272, 274, 277, 281, 282, 287, 290, 295, 299, 302, 305, 327, 337, 339, 340, 344, 345, 351, 352, 355, 356, 358, 363, 364, 365, 386, 387, 388, 406, 422], "offlin": [7, 227, 254, 476], "step": [7, 28, 44, 50, 99, 113, 137, 146, 227, 254, 275, 292, 298, 346, 361, 386, 394, 476, 500, 504], "align": [7, 170, 171, 254, 419, 420], "target": [7, 112, 125, 156, 157, 158, 164, 165, 167, 187, 193, 201, 214, 233, 254, 307, 360, 404, 405, 406, 413, 414, 416, 436, 441, 450, 463, 483], "label": [7, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 78, 80, 83, 84, 94, 100, 111, 119, 124, 134, 135, 136, 137, 139, 145, 146, 153, 154, 173, 177, 182, 190, 214, 227, 241, 254, 262, 263, 264, 265, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 287, 288, 290, 291, 292, 295, 296, 297, 298, 302, 303, 304, 305, 306, 313, 314, 326, 328, 330, 332, 341, 347, 359, 366, 373, 383, 384, 385, 386, 388, 393, 394, 402, 403, 422, 425, 431, 439, 463, 476, 490, 500, 504], "loss": [7, 90, 98, 102, 137, 173, 254, 337, 345, 350, 386, 422, 500], "A": [7, 8, 50, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 107, 108, 110, 114, 119, 122, 125, 127, 130, 131, 132, 139, 140, 142, 143, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 178, 179, 186, 187, 200, 214, 227, 229, 239, 243, 249, 254, 256, 298, 311, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 336, 337, 355, 356, 358, 362, 366, 371, 374, 375, 379, 380, 381, 388, 389, 391, 392, 402, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 435, 436, 448, 463, 476, 479, 489, 493, 502, 504, 510], "ingredi": [7, 254], "our": [7, 90, 94, 95, 98, 99, 100, 101, 102, 103, 107, 108, 112, 113, 115, 116, 122, 151, 158, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 219, 233, 254, 337, 341, 342, 345, 346, 347, 348, 350, 351, 355, 356, 360, 361, 363, 364, 371, 400, 406, 409, 411, 412, 413, 415, 416, 418, 419, 420, 421, 422, 468, 483, 509], "appli": [7, 10, 28, 44, 50, 67, 80, 85, 86, 119, 120, 137, 138, 146, 150, 156, 157, 173, 177, 178, 196, 203, 214, 219, 220, 223, 230, 241, 254, 258, 275, 292, 298, 314, 328, 333, 334, 366, 368, 386, 387, 394, 399, 404, 405, 422, 425, 427, 444, 452, 463, 468, 472, 490], "over": [7, 69, 85, 98, 104, 115, 116, 117, 158, 162, 166, 167, 178, 181, 187, 219, 227, 254, 316, 333, 345, 352, 363, 364, 365, 406, 411, 415, 416, 427, 436, 468, 476, 500], "region": [7, 254], "onli": [7, 9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 94, 100, 101, 104, 112, 117, 128, 130, 140, 142, 150, 151, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 185, 190, 203, 204, 213, 214, 238, 241, 254, 257, 307, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 341, 347, 348, 352, 360, 365, 376, 379, 389, 391, 399, 400, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 434, 439, 452, 453, 462, 463, 488, 490], "forc": [7, 91, 156, 157, 214, 238, 254, 338, 404, 405, 463], "combin": [7, 17, 18, 23, 27, 32, 36, 49, 56, 79, 98, 103, 114, 122, 158, 164, 167, 173, 177, 178, 190, 254, 264, 265, 270, 274, 279, 283, 297, 304, 327, 345, 351, 362, 371, 406, 413, 416, 422, 425, 427, 439], "acoust": [7, 254], "continu": [7, 135, 156, 157, 161, 175, 197, 214, 254, 384, 404, 405, 409, 423, 445, 463, 500], "reli": [7, 83, 84, 117, 122, 254, 330, 332, 365, 371], "primarili": [7, 111, 254, 359], "consist": [7, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 97, 103, 130, 148, 154, 169, 171, 190, 205, 243, 254, 312, 316, 318, 319, 320, 321, 322, 323, 324, 325, 337, 344, 351, 379, 397, 403, 418, 420, 439, 454, 493], "unsupervis": [7, 115, 116, 117, 122, 158, 161, 254, 363, 364, 365, 371, 406, 409], "rather": [7, 67, 91, 156, 157, 214, 254, 314, 336, 338, 404, 405, 463], "than": [7, 44, 50, 67, 91, 94, 98, 99, 102, 113, 115, 116, 117, 122, 124, 132, 136, 142, 156, 157, 160, 161, 162, 163, 164, 165, 169, 170, 172, 178, 179, 214, 254, 292, 298, 314, 336, 338, 341, 345, 346, 350, 361, 363, 364, 365, 371, 373, 381, 385, 391, 404, 405, 408, 409, 411, 412, 413, 414, 418, 419, 421, 427, 428, 463, 504], "intrins": [7, 67, 254, 314], "qualiti": [7, 70, 78, 110, 111, 161, 163, 164, 167, 170, 172, 254, 318, 326, 358, 359, 409, 412, 413, 416, 419, 421], "assign": [7, 44, 119, 138, 153, 254, 292, 366, 387, 402], "simpl": [7, 60, 92, 93, 119, 161, 254, 307, 339, 340, 366, 409, 505], "k": [7, 9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 195, 214, 254, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 443, 463], "mean": [7, 9, 11, 17, 18, 23, 27, 32, 36, 44, 49, 56, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 105, 110, 111, 115, 122, 124, 128, 129, 142, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 186, 195, 201, 203, 214, 254, 257, 259, 264, 265, 270, 274, 279, 283, 292, 297, 304, 307, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 338, 353, 358, 359, 363, 371, 373, 376, 378, 391, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 435, 443, 450, 452, 463, 504, 505, 508], "teacher": [7, 254], "100": [7, 28, 44, 51, 80, 99, 113, 115, 122, 142, 151, 164, 205, 254, 275, 292, 299, 328, 346, 361, 363, 371, 391, 400, 413, 454], "two": [7, 44, 71, 72, 73, 75, 76, 77, 78, 83, 84, 90, 97, 99, 112, 113, 114, 115, 116, 120, 157, 170, 188, 203, 241, 254, 292, 319, 320, 321, 323, 324, 325, 326, 330, 332, 337, 344, 346, 360, 361, 362, 363, 364, 368, 405, 419, 437, 452, 490, 504], "iter": [7, 83, 84, 90, 99, 113, 148, 163, 190, 203, 227, 254, 330, 332, 337, 346, 361, 397, 412, 439, 452, 476, 500], "either": [7, 9, 28, 50, 80, 84, 95, 96, 109, 119, 122, 124, 130, 153, 154, 173, 190, 193, 201, 202, 205, 233, 238, 254, 257, 275, 298, 328, 332, 342, 343, 357, 366, 371, 373, 379, 402, 403, 422, 439, 441, 450, 451, 454, 483, 488, 505], "match": [7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 71, 86, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 117, 119, 126, 127, 128, 129, 130, 131, 140, 148, 150, 158, 161, 163, 172, 187, 190, 193, 203, 213, 214, 254, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 314, 319, 334, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 363, 364, 365, 366, 375, 376, 377, 378, 379, 380, 389, 397, 399, 406, 409, 412, 421, 436, 439, 441, 452, 462, 463, 503], "improv": [7, 90, 92, 93, 95, 97, 101, 102, 107, 108, 111, 115, 116, 136, 137, 161, 162, 163, 167, 168, 169, 170, 171, 173, 175, 254, 337, 339, 340, 342, 344, 348, 350, 355, 356, 359, 363, 364, 385, 386, 409, 411, 412, 416, 417, 418, 419, 420, 422, 423, 509], "upon": [7, 70, 87, 94, 122, 156, 157, 171, 172, 214, 254, 318, 335, 341, 371, 404, 405, 420, 421, 463], "state": [7, 14, 16, 20, 22, 24, 26, 28, 29, 31, 33, 35, 38, 40, 41, 43, 44, 46, 48, 50, 52, 53, 55, 58, 67, 69, 78, 80, 90, 92, 93, 95, 100, 101, 102, 103, 104, 107, 108, 111, 117, 122, 137, 158, 161, 162, 167, 168, 169, 170, 173, 202, 254, 261, 263, 267, 269, 271, 273, 275, 276, 278, 280, 282, 286, 288, 289, 291, 292, 294, 296, 298, 300, 301, 303, 306, 314, 316, 326, 328, 337, 339, 340, 342, 347, 348, 350, 351, 352, 355, 356, 359, 365, 371, 386, 406, 409, 411, 416, 417, 418, 419, 422, 451, 501, 504], "art": [7, 28, 44, 67, 69, 78, 80, 90, 92, 93, 94, 95, 100, 101, 102, 103, 104, 107, 108, 111, 117, 122, 137, 158, 161, 167, 168, 169, 170, 173, 202, 254, 275, 292, 314, 316, 326, 328, 337, 339, 340, 341, 342, 347, 348, 350, 351, 352, 355, 356, 359, 365, 371, 386, 406, 409, 416, 417, 418, 419, 422, 451], "wav2vec": [7, 8, 254, 256], "perform": [7, 67, 71, 77, 78, 80, 86, 90, 94, 95, 97, 98, 100, 101, 102, 106, 107, 108, 110, 112, 114, 115, 116, 117, 137, 154, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 175, 178, 239, 254, 314, 319, 325, 326, 328, 334, 337, 341, 342, 344, 345, 347, 348, 350, 354, 355, 356, 358, 360, 362, 363, 364, 365, 386, 403, 406, 407, 408, 409, 411, 412, 413, 415, 416, 418, 419, 420, 421, 422, 423, 427, 489], "librispeech": [7, 254], "960h": [7, 254], "libri": [7, 254], "light": [7, 98, 117, 122, 201, 250, 254, 345, 365, 371, 450, 507, 509], "60": [7, 98, 150, 159, 163, 254, 345, 399, 407, 412], "000h": [7, 254], "benchmark": [7, 9, 73, 80, 90, 94, 97, 98, 100, 101, 115, 116, 158, 160, 162, 163, 166, 167, 169, 170, 172, 173, 247, 254, 257, 321, 328, 337, 341, 344, 345, 347, 348, 363, 364, 406, 408, 411, 412, 415, 416, 418, 419, 421, 422, 497], "10min": [7, 254], "1h": [7, 254], "10h": [7, 254], "100h": [7, 254], "fine": [7, 9, 63, 92, 93, 98, 100, 104, 139, 158, 162, 163, 166, 169, 170, 173, 245, 254, 257, 311, 339, 340, 345, 347, 352, 388, 406, 411, 412, 415, 418, 419, 422, 495], "tune": [7, 9, 63, 73, 92, 93, 98, 100, 104, 139, 158, 162, 163, 166, 169, 170, 173, 254, 257, 311, 321, 339, 340, 345, 347, 352, 388, 406, 411, 412, 415, 418, 419, 422], "subset": [7, 167, 254, 416], "1b": [7, 254], "show": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 206, 219, 229, 231, 234, 238, 239, 241, 242, 243, 244, 245, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 451, 452, 454, 455, 468, 479, 481, 484, 488, 489, 490, 491, 493, 494, 495, 500, 503, 504, 505, 509], "19": [7, 81, 94, 100, 106, 132, 243, 245, 254, 329, 341, 347, 354, 381, 493, 495], "13": [7, 10, 11, 63, 115, 116, 120, 148, 169, 172, 196, 245, 254, 258, 259, 311, 363, 364, 368, 397, 418, 421, 444, 495], "rel": [7, 95, 97, 115, 128, 129, 136, 160, 167, 177, 254, 342, 344, 363, 376, 378, 385, 408, 416, 425, 503], "wer": [7, 254], "reduct": [7, 90, 178, 254, 337, 427], "dev": [7, 78, 90, 101, 112, 254, 326, 337, 348, 360], "other": [7, 10, 44, 67, 79, 87, 95, 105, 106, 109, 110, 111, 112, 120, 122, 140, 153, 158, 161, 164, 172, 173, 177, 184, 185, 195, 196, 249, 254, 258, 292, 314, 327, 335, 342, 353, 354, 357, 358, 359, 360, 368, 371, 389, 402, 406, 409, 413, 421, 422, 425, 432, 434, 443, 444, 504], "test": [7, 28, 44, 50, 66, 67, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 92, 93, 112, 114, 125, 127, 130, 131, 136, 137, 146, 148, 157, 161, 162, 169, 170, 178, 179, 184, 190, 229, 241, 242, 243, 244, 245, 254, 275, 292, 298, 313, 314, 318, 319, 321, 324, 325, 326, 327, 328, 330, 332, 336, 339, 340, 360, 362, 374, 375, 379, 380, 385, 386, 394, 397, 405, 409, 411, 418, 419, 427, 428, 432, 439, 479, 490, 491, 493, 494, 495, 504, 510], "evalu": [7, 28, 44, 50, 95, 100, 102, 103, 111, 115, 116, 146, 158, 159, 162, 164, 166, 167, 168, 169, 172, 210, 227, 229, 230, 254, 275, 292, 298, 342, 347, 350, 351, 359, 363, 364, 394, 406, 407, 411, 413, 415, 416, 417, 418, 421, 458, 476, 479], "batchsiz": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 89, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 133, 137, 144, 145, 158, 165, 176, 177, 207, 214, 254, 256, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 363, 364, 365, 386, 393, 406, 414, 425, 463], "size": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 120, 122, 137, 145, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 207, 214, 229, 231, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 333, 334, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 368, 371, 386, 393, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 463, 479, 503, 508, 509], "batch": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 137, 145, 156, 157, 158, 165, 177, 214, 254, 256, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 363, 364, 365, 386, 393, 404, 405, 406, 414, 425, 463], "refer": [7, 9, 63, 67, 69, 72, 73, 74, 75, 76, 78, 80, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 122, 139, 142, 143, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 190, 193, 194, 202, 214, 217, 229, 249, 250, 254, 257, 307, 311, 314, 316, 320, 321, 322, 323, 324, 326, 328, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 363, 364, 365, 371, 388, 391, 392, 399, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 439, 441, 442, 451, 463, 466, 479, 504, 506, 507], "ml": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 200, 201, 202, 204, 205, 206, 227, 238, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 448, 450, 451, 453, 454, 455, 476, 488, 500, 504, 508], "audio_cont": [7, 8, 9, 192, 254, 256, 257, 440], "setstag": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 193, 195, 205, 206, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 441, 443, 454, 455, 504, 505], "processedaudiofloat": [7, 8, 9, 254, 256, 257], "createdatafram": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 81, 83, 84, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 193, 194, 195, 196, 202, 203, 205, 206, 219, 227, 231, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 311, 329, 330, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 441, 442, 443, 444, 451, 452, 454, 455, 468, 476, 481, 500, 503, 504, 505, 509], "rawfloat": [7, 8, 9, 254, 256, 257], "todf": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 193, 194, 195, 196, 200, 202, 203, 205, 206, 219, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 311, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 388, 389, 391, 392, 397, 399, 400, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 441, 442, 443, 444, 448, 451, 452, 454, 455, 468, 503, 504, 505, 509], "fit": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 193, 195, 201, 204, 205, 206, 220, 225, 227, 231, 238, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 388, 389, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 441, 443, 450, 453, 454, 455, 475, 476, 481, 488, 500, 504, 505, 508], "select": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 91, 96, 98, 114, 120, 122, 124, 136, 137, 139, 142, 143, 154, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 185, 190, 192, 194, 196, 197, 200, 202, 203, 205, 206, 219, 227, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 329, 338, 343, 345, 362, 368, 371, 373, 385, 386, 388, 391, 392, 403, 404, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 434, 439, 440, 442, 444, 445, 448, 451, 452, 454, 455, 468, 476, 500, 505], "truncat": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 66, 67, 69, 70, 71, 73, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 91, 114, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 193, 194, 196, 197, 202, 203, 205, 206, 219, 239, 243, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 313, 314, 316, 318, 319, 321, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 338, 362, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 441, 442, 444, 445, 451, 452, 454, 455, 468, 489, 493, 503, 504, 505], "mister": [7, 8, 254, 256], "quilter": [7, 8, 9, 254, 256, 257], "THE": [7, 8, 86, 254, 256, 334], "apostl": [7, 8, 9, 254, 256, 257], "OF": [7, 8, 90, 254, 256, 337], "midl": [7, 8, 254, 256], "clase": [7, 8, 254, 256], "AND": [7, 8, 254, 256], "glad": [7, 8, 9, 254, 256, 257], "TO": [7, 8, 241, 254, 256, 490, 510], "welcom": [7, 8, 9, 250, 254, 256, 257], "hi": [7, 8, 9, 87, 139, 151, 254, 256, 257, 335, 388, 400], "gospel": [7, 8, 9, 254, 256, 257], "parent": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 185, 186, 187, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 206, 210, 214, 217, 230, 231, 238, 330, 332], "undefin": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 185, 186, 187, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 206, 210, 214, 217, 230, 231, 238], "doc": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 185, 186, 187, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 206, 210, 214, 217, 229, 230, 231, 236, 238, 239, 244, 391, 392, 425, 479, 481, 489, 494, 510], "configproto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 124, 137, 145, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 254, 256, 257, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 314, 316, 319, 320, 321, 323, 324, 325, 326, 327, 328, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 373, 386, 393, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425], "tensorflow": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 122, 124, 137, 145, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 254, 256, 257, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 314, 316, 319, 320, 321, 323, 324, 325, 326, 327, 328, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 371, 373, 386, 393, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425], "get": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 112, 115, 116, 117, 122, 124, 134, 137, 145, 148, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 182, 187, 190, 192, 194, 195, 196, 200, 201, 202, 210, 214, 217, 224, 230, 250, 257, 275, 292, 338, 371, 383, 397, 423, 425, 431, 436, 439, 440, 442, 443, 444, 448, 450, 451, 458, 463, 466, 474, 480, 500, 504, 509, 510], "config_proto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 112, 115, 116, 117, 124, 137, 145, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177], "serializetostr": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 112, 115, 116, 117, 124, 137, 145, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177], "folder": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 137, 146, 151, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 179, 182, 234, 241, 247, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 386, 394, 400, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 428, 431, 484, 490, 497], "spark_sess": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 116, 117, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "restor": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 127, 131, 136, 137, 139, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 373, 374, 375, 380, 385, 386, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439], "lang": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 124, 125, 127, 131, 136, 137, 139, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 233, 234, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 373, 374, 375, 380, 385, 386, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439, 483, 484, 504, 509], "en": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 117, 119, 120, 124, 125, 127, 131, 136, 137, 139, 148, 151, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 233, 234, 242, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 365, 366, 368, 373, 374, 375, 380, 385, 386, 388, 397, 400, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439, 483, 484, 491, 504, 509, 510], "remote_loc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 124, 125, 127, 131, 136, 137, 139, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 233, 234, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 373, 374, 375, 380, 385, 386, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439, 483, 484], "remot": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 127, 131, 136, 137, 139, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 230, 233, 234, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 373, 374, 375, 380, 385, 386, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439, 480, 483, 484], "address": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 127, 131, 136, 137, 139, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 373, 374, 375, 380, 385, 386, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439], "resourc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 124, 125, 127, 130, 131, 136, 137, 139, 140, 146, 148, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 184, 187, 190, 204, 215, 218, 230, 232, 234, 241, 242, 243, 244, 245, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 373, 374, 375, 379, 380, 385, 386, 388, 389, 394, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 432, 436, 439, 453, 464, 467, 480, 482, 484, 490, 491, 493, 494, 495, 504, 510], "Will": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 127, 131, 136, 137, 139, 148, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 373, 374, 375, 380, 385, 386, 388, 397, 399, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439], "repositori": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 127, 131, 136, 137, 139, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 233, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 373, 374, 375, 380, 385, 386, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439, 483, 501], "otherwis": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 127, 131, 136, 137, 139, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 187, 190, 193, 214, 227, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 373, 374, 375, 380, 385, 386, 388, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 430, 436, 439, 441, 463, 476], "b": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 112, 115, 116, 117, 124, 127, 131, 135, 136, 137, 138, 139, 145, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 190, 201, 219, 233, 241, 244, 254, 256, 257, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 311, 314, 316, 319, 320, 321, 323, 324, 325, 326, 327, 328, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 356, 360, 363, 364, 365, 373, 375, 380, 384, 385, 386, 387, 388, 393, 399, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 439, 450, 468, 483, 490, 494, 510], "wav2vec2": [8, 256], "framework": [8, 71, 158, 165, 168, 173, 249, 256, 307, 319, 336, 406, 414, 417, 422], "alexei": [8, 256], "baevski": [8, 256], "henri": [8, 256], "zhou": [8, 256], "michael": [8, 184, 256, 432], "auli": [8, 256], "asr_wav2vec2_base_960h": [8, 256], "wav2vec2forctctestspec": [8, 256], "whisper": [9, 257], "automat": [9, 120, 122, 139, 165, 178, 229, 257, 307, 336, 368, 371, 388, 414, 427, 479, 503, 504], "recognit": [9, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 67, 73, 80, 95, 133, 136, 137, 139, 247, 257, 263, 269, 273, 278, 282, 288, 291, 296, 303, 306, 314, 321, 328, 342, 382, 385, 386, 388, 497], "asr": [9, 257], "system": [9, 76, 91, 122, 156, 157, 158, 161, 163, 164, 167, 203, 214, 257, 324, 338, 371, 404, 405, 406, 409, 412, 413, 416, 452, 463], "680": [9, 257], "000": [9, 51, 122, 161, 167, 190, 205, 257, 299, 371, 409, 416, 439, 454], "hour": [9, 87, 128, 129, 257, 335, 376, 378], "multilingu": [9, 69, 70, 115, 116, 159, 164, 167, 171, 190, 257, 316, 318, 363, 364, 407, 413, 416, 420, 439], "multitask": [9, 102, 161, 257, 350, 409], "collect": [9, 73, 111, 122, 162, 169, 227, 257, 321, 359, 371, 411, 418, 476, 500], "web": [9, 63, 86, 95, 110, 161, 170, 227, 257, 311, 334, 342, 358, 409, 419, 476, 500], "It": [9, 15, 17, 18, 21, 23, 27, 28, 30, 32, 34, 36, 39, 44, 47, 49, 50, 51, 54, 56, 57, 66, 67, 69, 71, 78, 79, 85, 86, 92, 93, 95, 97, 98, 99, 103, 107, 108, 113, 115, 116, 119, 122, 132, 154, 157, 158, 160, 165, 169, 171, 175, 177, 178, 179, 185, 196, 201, 231, 234, 249, 257, 262, 264, 265, 268, 270, 274, 275, 277, 279, 281, 283, 287, 292, 295, 297, 298, 299, 302, 304, 305, 307, 313, 314, 316, 319, 326, 327, 333, 334, 336, 339, 340, 342, 344, 345, 346, 351, 355, 356, 361, 363, 364, 366, 371, 381, 403, 405, 406, 408, 414, 418, 420, 423, 425, 427, 428, 434, 444, 450, 481, 484, 503, 508], "well": [9, 65, 70, 72, 75, 77, 80, 83, 84, 85, 100, 112, 115, 116, 122, 142, 158, 159, 171, 172, 205, 257, 312, 318, 320, 323, 325, 328, 330, 332, 333, 347, 360, 363, 364, 371, 391, 406, 407, 420, 421, 454], "translat": [9, 128, 158, 161, 164, 165, 167, 173, 190, 247, 257, 307, 406, 409, 413, 414, 416, 422, 439], "those": [9, 95, 120, 138, 171, 257, 342, 368, 387, 420, 504, 505], "english": [9, 50, 94, 95, 106, 122, 164, 166, 167, 178, 181, 190, 234, 257, 298, 341, 342, 354, 371, 413, 415, 416, 427, 430, 439, 484], "moment": [9, 157, 203, 257, 405, 452], "greedi": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "search": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 94, 110, 128, 158, 159, 163, 164, 167, 175, 178, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 341, 358, 376, 406, 407, 412, 413, 416, 423, 427, 463], "task": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 67, 68, 71, 77, 78, 80, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 106, 111, 112, 115, 116, 117, 122, 139, 155, 158, 160, 161, 165, 166, 167, 171, 172, 173, 204, 207, 214, 247, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 314, 315, 319, 325, 326, 328, 337, 339, 340, 341, 342, 344, 345, 347, 350, 351, 352, 354, 359, 360, 363, 364, 365, 371, 388, 406, 408, 409, 414, 415, 416, 420, 421, 422, 453, 463, 497], "asr_whisper_tiny_opt": [9, 257], "whisperforctctestspec": [9, 257], "robust": [9, 102, 170, 257, 350, 419], "larg": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 85, 87, 90, 91, 97, 98, 100, 101, 104, 110, 111, 115, 116, 117, 122, 124, 127, 131, 137, 156, 157, 158, 159, 160, 161, 162, 163, 164, 169, 171, 172, 179, 203, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 312, 314, 315, 316, 318, 320, 321, 322, 323, 324, 326, 327, 328, 333, 335, 337, 338, 344, 345, 347, 348, 352, 358, 359, 363, 364, 365, 371, 373, 375, 380, 386, 404, 405, 406, 407, 408, 409, 411, 412, 413, 418, 420, 421, 452], "scale": [9, 67, 78, 79, 80, 90, 91, 98, 100, 103, 104, 115, 116, 156, 157, 158, 160, 161, 162, 163, 164, 167, 169, 170, 173, 214, 257, 314, 326, 327, 328, 337, 338, 345, 347, 351, 352, 363, 364, 404, 405, 406, 408, 409, 411, 412, 413, 416, 418, 419, 422, 463], "weak": [9, 100, 257, 347], "studi": [9, 87, 98, 107, 108, 158, 168, 173, 257, 335, 345, 355, 356, 406, 417, 422], "capabl": [9, 66, 69, 70, 78, 98, 117, 159, 161, 163, 166, 170, 171, 257, 313, 316, 318, 326, 345, 365, 407, 409, 412, 415, 419, 420], "simpli": [9, 86, 102, 257, 334, 350, 505], "amount": [9, 80, 112, 122, 131, 156, 157, 161, 171, 190, 201, 214, 257, 328, 360, 371, 380, 404, 405, 409, 420, 439, 450, 463, 508], "transcript": [9, 257], "internet": [9, 257], "when": [9, 10, 11, 15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 67, 78, 79, 80, 85, 86, 90, 91, 100, 120, 128, 129, 132, 137, 142, 156, 157, 158, 161, 164, 169, 170, 171, 173, 177, 178, 181, 185, 190, 201, 203, 214, 229, 230, 231, 241, 257, 258, 259, 262, 265, 268, 270, 277, 279, 281, 283, 287, 295, 297, 302, 304, 305, 314, 326, 327, 328, 333, 334, 336, 337, 338, 347, 368, 376, 378, 381, 386, 391, 404, 405, 406, 409, 413, 418, 419, 420, 422, 425, 427, 430, 434, 439, 450, 452, 463, 479, 480, 490, 504, 505, 508], "gener": [9, 28, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 90, 91, 94, 96, 98, 100, 102, 103, 106, 109, 111, 117, 120, 122, 136, 137, 139, 142, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 182, 196, 197, 203, 214, 227, 229, 231, 247, 257, 275, 292, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 337, 338, 341, 343, 345, 347, 350, 351, 354, 357, 359, 365, 368, 371, 385, 386, 388, 391, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 444, 445, 452, 463, 476, 479, 497, 500, 503, 504, 505], "standard": [9, 67, 73, 78, 79, 80, 86, 103, 128, 129, 158, 178, 179, 187, 214, 257, 314, 321, 326, 327, 328, 334, 351, 376, 378, 406, 427, 428, 436, 463], "often": [9, 90, 107, 108, 117, 257, 337, 355, 356, 365], "competit": [9, 115, 116, 122, 164, 171, 257, 363, 364, 371, 413, 420], "prior": [9, 67, 94, 98, 102, 103, 142, 168, 177, 239, 257, 314, 341, 345, 350, 351, 391, 417, 425, 489], "fulli": [9, 106, 233, 257, 354, 483], "zero": [9, 66, 100, 114, 139, 161, 257, 313, 347, 362, 388, 409], "shot": [9, 66, 100, 139, 161, 257, 313, 347, 388, 409], "transfer": [9, 80, 98, 100, 112, 115, 116, 158, 161, 173, 257, 328, 345, 347, 360, 363, 364, 406, 409, 422], "without": [9, 66, 77, 92, 93, 100, 102, 115, 116, 122, 157, 161, 166, 190, 239, 257, 313, 325, 339, 340, 347, 350, 363, 364, 371, 405, 409, 415, 439, 489], "ani": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 94, 99, 100, 102, 112, 113, 119, 122, 137, 161, 164, 173, 177, 195, 196, 234, 247, 257, 264, 265, 270, 274, 279, 283, 297, 304, 313, 336, 341, 346, 347, 350, 360, 361, 366, 371, 386, 409, 413, 422, 425, 443, 444, 484, 497, 501, 504, 505, 510], "compar": [9, 78, 80, 90, 97, 98, 101, 102, 104, 117, 122, 151, 158, 160, 162, 171, 172, 173, 177, 227, 257, 326, 328, 337, 344, 345, 348, 350, 352, 365, 371, 400, 406, 408, 411, 420, 421, 422, 425, 476, 500], "human": [9, 97, 122, 160, 162, 163, 166, 167, 169, 171, 257, 344, 371, 408, 411, 412, 415, 416, 418, 420], "accuraci": [9, 67, 78, 83, 84, 92, 93, 99, 110, 112, 113, 115, 116, 136, 137, 148, 166, 178, 190, 257, 314, 326, 330, 332, 339, 340, 346, 358, 360, 361, 363, 364, 385, 386, 397, 415, 427, 439, 500], "infer": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 68, 77, 91, 92, 93, 95, 98, 117, 156, 157, 160, 162, 166, 168, 200, 257, 264, 265, 270, 274, 279, 283, 297, 304, 313, 315, 325, 338, 339, 340, 342, 345, 365, 404, 405, 408, 411, 415, 417, 448], "code": [9, 63, 66, 97, 99, 102, 103, 106, 107, 108, 113, 115, 116, 122, 124, 158, 160, 166, 168, 170, 171, 172, 173, 239, 257, 311, 313, 336, 344, 346, 350, 351, 354, 355, 356, 361, 363, 364, 371, 373, 406, 408, 415, 417, 419, 420, 421, 422, 489, 501, 509], "serv": [9, 78, 257, 326, 501], "foundat": [9, 162, 163, 257, 411, 412], "further": [9, 10, 90, 102, 110, 122, 136, 137, 142, 170, 206, 257, 258, 337, 350, 358, 371, 385, 386, 391, 419, 455], "work": [9, 67, 98, 102, 103, 111, 124, 142, 156, 158, 162, 164, 165, 169, 171, 173, 184, 214, 231, 249, 257, 307, 314, 345, 350, 351, 359, 373, 391, 404, 406, 411, 413, 414, 418, 420, 422, 432, 463, 481, 503, 505, 509], "e": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 84, 86, 100, 101, 102, 103, 104, 119, 120, 136, 137, 158, 161, 165, 170, 173, 175, 177, 181, 205, 214, 227, 229, 231, 257, 259, 260, 262, 263, 266, 268, 269, 272, 273, 277, 278, 281, 282, 284, 287, 288, 290, 291, 293, 295, 296, 302, 303, 305, 306, 307, 314, 332, 334, 347, 348, 350, 351, 352, 366, 368, 385, 386, 406, 409, 414, 419, 422, 423, 425, 430, 454, 463, 476, 479, 481, 500], "g": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 84, 86, 100, 101, 102, 104, 120, 136, 137, 158, 161, 165, 170, 173, 177, 181, 205, 214, 227, 231, 257, 259, 260, 262, 263, 266, 268, 269, 272, 273, 277, 278, 281, 282, 284, 287, 288, 290, 291, 293, 295, 296, 302, 303, 305, 306, 307, 314, 332, 334, 347, 348, 350, 352, 368, 385, 386, 406, 409, 414, 419, 422, 425, 430, 454, 463, 476, 481, 500], "check": [9, 71, 73, 77, 94, 100, 106, 137, 150, 176, 177, 178, 179, 201, 206, 233, 247, 257, 319, 321, 325, 341, 347, 354, 386, 399, 425, 426, 427, 428, 450, 455, 483, 497, 504, 509], "descript": [9, 84, 102, 109, 122, 128, 162, 169, 178, 185, 213, 215, 247, 257, 332, 350, 357, 371, 376, 411, 418, 427, 434, 462, 464, 497], "minoutputlength": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 155, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 463], "minimum": [9, 44, 50, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 99, 113, 120, 122, 124, 134, 136, 137, 140, 150, 151, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 186, 187, 214, 231, 241, 257, 292, 298, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 346, 361, 368, 371, 373, 383, 385, 386, 389, 399, 400, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 427, 428, 435, 436, 463, 490], "sequenc": [9, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 103, 105, 110, 111, 142, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 181, 203, 214, 257, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 307, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 338, 351, 353, 358, 359, 391, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 430, 452, 463], "maxoutputlength": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 257, 307, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "maximum": [9, 28, 44, 50, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 99, 113, 120, 122, 134, 136, 137, 140, 142, 145, 150, 151, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 186, 187, 214, 230, 257, 275, 292, 298, 307, 311, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 336, 346, 361, 368, 371, 383, 385, 386, 389, 391, 393, 399, 400, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 435, 436, 463], "dosampl": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "sampl": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 110, 142, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 358, 391, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "decod": [9, 60, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 91, 97, 103, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 307, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 338, 344, 351, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "temperatur": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 141, 142, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 391, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "next": [9, 42, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 107, 108, 122, 128, 129, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 290, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 355, 356, 371, 376, 378, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "probabl": [9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 122, 142, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 178, 214, 257, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 371, 391, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 463], "topk": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "highest": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 142, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 391, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 427, 463], "vocabulari": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 99, 113, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 346, 361, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 463], "keep": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 85, 91, 122, 140, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 333, 338, 371, 389, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "filter": [9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 115, 116, 122, 135, 136, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 181, 214, 219, 234, 257, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 363, 364, 371, 384, 385, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 430, 463, 468, 484], "topp": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 141, 142, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 391, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "most": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 85, 87, 95, 98, 103, 104, 122, 137, 142, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 307, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 333, 335, 342, 345, 351, 352, 371, 386, 391, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "add": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 114, 128, 129, 150, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 187, 203, 214, 247, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 362, 376, 378, 399, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 436, 452, 463, 497, 504], "top_p": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 142, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 315, 316, 327, 391], "higher": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 114, 122, 142, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 362, 371, 391, 403, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "kept": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "repetitionpenalti": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "repetit": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "penalti": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "norepeatngrams": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "ngram": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 96, 132, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 343, 381, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "occur": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "onc": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 203, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 452, 463], "beamsiz": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 155, 158, 159, 163, 164, 167, 207, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 412, 413, 416, 463], "beam": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 158, 159, 163, 164, 167, 214, 257, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 412, 413, 416, 463], "mr": [9, 257], "middl": [9, 185, 190, 257, 434, 439], "langaug": [9, 233, 257, 483], "xx": [9, 23, 56, 115, 116, 124, 160, 164, 165, 167, 257, 270, 304, 307, 363, 364, 373, 408, 413, 414, 416], "do": [9, 10, 87, 112, 122, 135, 159, 181, 187, 201, 203, 257, 258, 335, 360, 371, 384, 407, 430, 436, 450, 452, 500, 504, 508], "convert": [10, 60, 79, 81, 86, 96, 104, 109, 114, 128, 129, 132, 135, 140, 142, 158, 173, 186, 188, 190, 193, 196, 197, 227, 258, 307, 327, 329, 334, 343, 352, 357, 362, 376, 378, 381, 384, 389, 391, 406, 422, 435, 437, 439, 441, 444, 445, 476, 500, 507], "back": [10, 87, 142, 158, 258, 335, 391, 406], "try": [10, 177, 241, 258, 425, 490], "re": [10, 94, 100, 106, 203, 258, 341, 347, 354, 452, 504], "analysi": [10, 28, 44, 50, 101, 102, 117, 152, 153, 173, 212, 229, 247, 258, 275, 292, 298, 348, 350, 365, 401, 402, 422, 460, 479, 497, 505], "york": [10, 139, 196, 258, 388, 444], "jersei": [10, 196, 258, 444], "aren": [10, 196, 258, 444], "t": [10, 17, 18, 23, 27, 32, 36, 49, 56, 87, 91, 98, 107, 125, 140, 151, 153, 156, 157, 169, 187, 196, 203, 214, 258, 264, 265, 270, 274, 279, 283, 297, 304, 335, 338, 345, 355, 374, 389, 400, 402, 404, 405, 418, 436, 444, 452, 463], "far": [10, 142, 161, 196, 258, 391, 409, 444], "apart": [10, 83, 84, 196, 258, 330, 332, 444], "actual": [10, 132, 196, 206, 258, 381, 444, 455], "id": [10, 44, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 115, 119, 142, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 193, 194, 196, 202, 206, 214, 227, 241, 258, 292, 308, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 334, 363, 366, 391, 392, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 441, 442, 444, 451, 455, 463, 476, 490], "defin": [10, 11, 135, 136, 137, 177, 181, 185, 196, 203, 219, 227, 233, 238, 258, 259, 384, 385, 386, 425, 430, 434, 444, 452, 468, 476, 483, 488, 500, 504, 508], "amongst": [10, 196, 258, 444], "thing": [10, 163, 177, 196, 258, 412, 425, 444], "explain_document_dl": [10, 196, 201, 219, 233, 258, 444, 450, 468, 483], "chunktodoc": [10, 258], "chunkconvert": [10, 258], "explainresult": [10, 196, 258, 444], "selectexpr": [10, 11, 28, 51, 63, 66, 67, 78, 79, 80, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 122, 125, 127, 128, 129, 130, 131, 132, 135, 138, 139, 140, 148, 150, 151, 153, 157, 165, 180, 181, 184, 186, 187, 188, 193, 195, 196, 219, 241, 242, 243, 258, 259, 275, 299, 307, 311, 313, 314, 326, 327, 328, 330, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 371, 374, 375, 376, 378, 379, 380, 381, 384, 387, 388, 389, 397, 399, 400, 402, 405, 414, 429, 430, 432, 435, 436, 437, 441, 443, 444, 468, 490, 491, 493, 503, 504, 509], "explod": [10, 11, 28, 51, 63, 83, 84, 85, 87, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 122, 127, 129, 130, 131, 132, 135, 138, 139, 148, 150, 151, 165, 188, 195, 196, 219, 241, 243, 258, 259, 275, 299, 307, 311, 330, 332, 333, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 371, 375, 378, 379, 380, 381, 384, 387, 388, 397, 399, 400, 414, 437, 443, 444, 468, 490, 493, 503, 504, 509], "col": [10, 83, 84, 119, 127, 135, 138, 175, 193, 195, 196, 197, 202, 219, 239, 258, 330, 332, 366, 375, 384, 387, 444, 468, 489, 503], "7": [10, 50, 78, 92, 93, 97, 128, 129, 143, 148, 161, 162, 166, 169, 170, 196, 243, 245, 249, 258, 298, 326, 339, 340, 344, 376, 378, 392, 397, 409, 411, 415, 418, 419, 444, 493, 495, 503], "loc": [10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 120, 135, 136, 137, 196, 201, 219, 233, 241, 258, 263, 269, 273, 278, 282, 288, 291, 296, 303, 306, 368, 384, 385, 386, 444, 450, 468, 483, 490], "22": [10, 196, 241, 258, 444, 490, 503], "part": [11, 95, 122, 125, 147, 148, 156, 157, 162, 180, 190, 193, 214, 231, 243, 247, 259, 336, 342, 371, 374, 396, 397, 404, 405, 411, 429, 439, 441, 463, 493, 510], "tag": [11, 28, 44, 50, 86, 95, 134, 135, 136, 137, 138, 147, 148, 190, 219, 227, 229, 231, 241, 243, 244, 247, 259, 275, 292, 298, 334, 342, 383, 384, 385, 386, 387, 396, 397, 439, 468, 476, 479, 490, 493, 494, 497, 510], "order": [11, 85, 102, 117, 119, 122, 128, 156, 157, 158, 162, 169, 178, 179, 201, 206, 214, 219, 259, 333, 336, 350, 365, 366, 371, 376, 404, 405, 406, 411, 418, 427, 428, 450, 455, 463, 468, 504, 505, 508, 510], "meaning": [11, 180, 259, 429], "phrase": [11, 95, 99, 113, 127, 131, 259, 342, 346, 361, 375, 380], "onto": [11, 219, 259, 468, 505], "pars": [11, 82, 83, 84, 95, 119, 125, 128, 129, 177, 178, 179, 201, 203, 205, 229, 230, 233, 239, 241, 243, 259, 330, 331, 332, 342, 366, 374, 376, 378, 425, 427, 428, 450, 452, 454, 479, 483, 489, 490, 493], "regular": [11, 85, 130, 136, 150, 259, 333, 379, 385, 399], "express": [11, 50, 63, 85, 128, 130, 150, 259, 298, 311, 333, 376, 379, 399], "wrap": [11, 259, 308, 423, 456, 457, 465, 471, 475], "angl": [11, 111, 259, 359], "bracket": [11, 259], "easili": [11, 101, 148, 195, 259, 348, 397, 443, 500], "distinguish": [11, 259], "itself": [11, 122, 167, 173, 190, 204, 259, 336, 371, 416, 422, 439, 453, 505], "form": [11, 28, 44, 50, 114, 119, 125, 127, 128, 130, 131, 151, 153, 178, 179, 190, 195, 227, 241, 242, 259, 275, 292, 298, 362, 366, 374, 375, 376, 379, 380, 400, 402, 427, 428, 439, 443, 476, 490, 491, 504], "peter": [11, 103, 125, 140, 148, 151, 178, 180, 241, 259, 351, 374, 389, 397, 400, 427, 429, 490], "piper": [11, 125, 148, 180, 259, 374, 397, 429], "employe": [11, 125, 148, 180, 259, 374, 397, 429], "pick": [11, 125, 148, 180, 259, 374, 397, 429], "peck": [11, 125, 148, 180, 259, 374, 397, 429], "pickl": [11, 125, 148, 180, 259, 374, 397, 429], "pepper": [11, 125, 148, 180, 259, 374, 397, 429], "nnp": [11, 148, 201, 219, 241, 242, 243, 244, 259, 397, 450, 468, 490, 491, 493, 494, 503, 508, 509, 510], "nn": [11, 85, 148, 241, 242, 243, 244, 259, 333, 397, 490, 491, 493, 494, 510], "vbp": [11, 148, 201, 242, 259, 397, 450, 491, 503, 508, 509], "vbg": [11, 148, 259, 397], "IN": [11, 148, 201, 219, 242, 243, 244, 259, 397, 450, 468, 491, 493, 494, 503, 508, 509], "jj": [11, 148, 201, 219, 241, 243, 259, 397, 450, 468, 490, 493, 503, 508, 509, 510], "enclos": [11, 259], "treat": [11, 177, 190, 259, 425, 439], "group": [11, 91, 156, 157, 162, 166, 171, 187, 214, 229, 230, 259, 338, 404, 405, 411, 415, 420, 436, 463, 479], "so": [11, 17, 18, 23, 28, 36, 49, 50, 56, 87, 122, 135, 142, 151, 164, 203, 204, 227, 259, 264, 265, 270, 275, 283, 297, 298, 304, 335, 336, 371, 384, 391, 400, 413, 452, 453, 476, 500], "here": [11, 125, 203, 219, 259, 374, 452, 468, 504], "specif": [11, 51, 71, 83, 84, 86, 92, 93, 98, 111, 112, 120, 122, 137, 158, 161, 163, 164, 167, 172, 175, 182, 201, 204, 227, 231, 259, 299, 319, 330, 332, 334, 339, 340, 345, 359, 360, 368, 371, 386, 406, 409, 412, 413, 416, 421, 431, 450, 453, 476, 508], "noun": [11, 242, 259, 491], "success": [11, 95, 104, 161, 259, 342, 352, 409], "grammar": [11, 156, 157, 207, 214, 259, 404, 405, 463], "parser": [11, 83, 84, 120, 247, 259, 330, 332, 368, 369], "Of": [11, 90, 190, 259, 337, 439], "postag": [11, 259], "11": [11, 81, 115, 116, 128, 129, 132, 148, 238, 245, 259, 329, 363, 364, 376, 378, 381, 397, 488, 495], "21": [11, 128, 129, 138, 148, 245, 259, 376, 378, 387, 397, 495], "35": [11, 94, 148, 159, 245, 259, 341, 397, 407, 495], "39": [11, 138, 143, 148, 243, 245, 259, 387, 392, 397, 493, 495], "52": [11, 138, 148, 243, 259, 387, 397, 493], "58": [11, 78, 148, 259, 326, 397], "choicesdelimit": [12, 13, 19, 37, 45, 260, 266, 284, 293], "setchoicesdelimit": [12, 13, 19, 37, 45, 260, 266, 284, 293], "coalescesent": [12, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 123, 124, 261, 262, 264, 265, 267, 268, 270, 271, 272, 274, 276, 277, 279, 280, 281, 283, 286, 287, 290, 294, 295, 297, 301, 302, 304, 305, 373], "getclass": [12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 54, 55, 56, 57, 58, 64, 67, 78, 80, 133, 139, 262, 263, 264, 265, 268, 269, 270, 272, 273, 274, 277, 278, 279, 281, 282, 283, 287, 288, 290, 291, 295, 296, 297, 302, 303, 304, 305, 306, 314, 326, 328, 388], "setcoalescesent": [12, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 123, 124, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 373], "maxsentencelength": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 77, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 117, 207, 214, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 318, 319, 320, 321, 322, 323, 324, 325, 337, 339, 340, 341, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 363, 364, 365, 463], "setmaxsentencelength": [12, 18, 48, 49, 56, 89, 99, 113, 207, 214, 265, 296, 297, 304, 346, 361, 463], "dropout": [12, 28, 50, 133, 137, 275, 298, 386], "setdropout": [12, 28, 50, 133, 137, 275, 298, 386, 504], "setshuffleperepoch": [12, 44, 227, 292, 476, 500], "setthreshold": [12, 44, 50, 121, 122, 123, 124, 207, 214, 227, 228, 230, 292, 298, 371, 373, 463, 476, 480, 500], "setverbos": [12, 44, 133, 136, 137, 144, 146, 292, 385, 386, 394], "shuffleperepoch": [12, 44, 292], "threshold": [12, 44, 50, 91, 99, 113, 121, 122, 123, 124, 136, 139, 156, 157, 177, 190, 207, 214, 228, 229, 230, 231, 292, 298, 338, 346, 361, 371, 373, 385, 388, 404, 405, 425, 439, 463, 479, 480], "setthresholdlabel": [12, 50, 123, 124, 298, 373], "thresholdlabel": [12, 50, 123, 124, 298, 373], "classifi": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 67, 78, 122, 195, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 313, 314, 326, 369, 371, 443, 504], "dl": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 124, 137, 139, 178, 179, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 373, 386, 388, 427, 428], "albert": [13, 14, 15, 16, 90, 260, 261, 262, 263, 337], "choic": [13, 19, 37, 45, 107, 108, 130, 163, 166, 260, 266, 284, 293, 355, 356, 379, 412, 415], "linear": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 78, 91, 156, 157, 161, 214, 260, 261, 262, 263, 266, 267, 268, 269, 271, 272, 273, 276, 277, 278, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 300, 301, 302, 303, 305, 306, 326, 338, 404, 405, 409, 463], "layer": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 90, 91, 92, 93, 97, 101, 117, 156, 157, 214, 260, 261, 262, 263, 266, 267, 268, 269, 271, 272, 273, 276, 277, 278, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 300, 301, 302, 303, 305, 306, 337, 338, 339, 340, 344, 348, 365, 404, 405, 463], "pool": [13, 15, 19, 21, 25, 30, 34, 37, 39, 42, 45, 47, 54, 57, 91, 96, 101, 105, 109, 110, 111, 156, 157, 214, 260, 262, 266, 268, 272, 277, 281, 284, 287, 290, 293, 295, 302, 305, 338, 343, 348, 353, 357, 358, 359, 404, 405, 463], "softmax": [13, 15, 17, 18, 19, 21, 23, 25, 27, 32, 34, 36, 37, 39, 42, 45, 47, 49, 54, 56, 57, 97, 99, 113, 177, 214, 260, 262, 264, 265, 266, 268, 270, 272, 274, 279, 281, 283, 284, 287, 290, 293, 295, 297, 302, 304, 305, 344, 346, 361, 425, 463], "rocstori": [13, 19, 37, 45, 260, 266, 284, 293], "swag": [13, 19, 37, 45, 260, 266, 284, 293], "spanclassifi": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 260, 261, 266, 267, 271, 276, 280, 284, 286, 289, 293, 294, 300, 301], "document_quest": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 260, 261, 266, 267, 271, 276, 280, 284, 286, 289, 293, 294, 299, 300, 301], "document_context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 260, 261, 266, 267, 271, 276, 280, 284, 286, 289, 293, 294, 300, 301], "answer": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 92, 93, 101, 117, 139, 158, 159, 161, 166, 173, 201, 203, 247, 260, 261, 266, 267, 271, 276, 280, 284, 286, 289, 293, 294, 299, 300, 301, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 330, 332, 333, 339, 340, 348, 365, 388, 406, 407, 409, 415, 422, 450, 452], "albert_base_uncased_multiple_choic": [13, 260], "allow": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 101, 106, 112, 136, 137, 140, 150, 151, 158, 172, 186, 187, 204, 213, 231, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 348, 354, 360, 385, 386, 389, 399, 400, 406, 421, 435, 436, 453, 462, 481], "faster": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 98, 101, 156, 157, 166, 178, 179, 214, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 338, 345, 348, 404, 405, 415, 427, 428, 463], "requir": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 83, 84, 90, 93, 94, 97, 100, 101, 106, 112, 115, 116, 122, 137, 140, 154, 177, 188, 190, 193, 195, 200, 206, 247, 250, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 332, 336, 337, 340, 341, 344, 347, 348, 354, 360, 363, 364, 371, 386, 389, 403, 425, 437, 439, 441, 443, 448, 455, 497, 503, 504, 505], "8": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 67, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 128, 132, 137, 138, 142, 143, 146, 161, 170, 177, 188, 190, 241, 245, 249, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 314, 330, 332, 333, 334, 335, 337, 339, 340, 341, 342, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 358, 359, 363, 364, 365, 376, 381, 386, 387, 391, 392, 394, 409, 419, 425, 437, 439, 490, 495], "ignor": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 127, 132, 135, 139, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 181, 201, 214, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 363, 364, 365, 375, 381, 384, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 427, 430, 450, 463], "case": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 84, 85, 86, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 119, 124, 127, 131, 140, 159, 162, 169, 177, 178, 181, 187, 193, 214, 241, 242, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 332, 333, 334, 336, 337, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 363, 364, 365, 366, 373, 375, 380, 407, 411, 418, 425, 427, 430, 436, 441, 463, 490, 491, 504], "512": [13, 15, 17, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36, 37, 39, 42, 45, 47, 49, 51, 54, 56, 57, 87, 94, 100, 101, 104, 105, 106, 110, 111, 165, 214, 260, 262, 264, 265, 266, 268, 270, 272, 274, 277, 279, 281, 283, 284, 287, 290, 293, 295, 297, 299, 302, 304, 305, 307, 335, 341, 347, 348, 352, 353, 354, 358, 359, 414, 463], "question": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 92, 93, 101, 107, 108, 117, 139, 148, 158, 159, 161, 166, 173, 201, 247, 260, 261, 266, 267, 271, 276, 280, 284, 286, 289, 293, 294, 299, 300, 301, 312, 316, 318, 319, 320, 321, 322, 323, 324, 325, 330, 332, 339, 340, 348, 355, 356, 365, 388, 397, 406, 407, 409, 415, 422, 450], "context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 69, 70, 91, 92, 93, 99, 101, 106, 113, 117, 142, 154, 156, 157, 162, 170, 171, 177, 187, 214, 260, 261, 266, 267, 271, 276, 280, 284, 286, 289, 293, 294, 300, 301, 316, 318, 338, 339, 340, 346, 348, 354, 361, 365, 391, 403, 404, 405, 411, 419, 420, 425, 436, 463], "questionansw": [13, 19, 20, 37, 45, 260, 266, 267, 284, 293], "eiffel": [13, 19, 37, 45, 260, 266, 284, 293], "tower": [13, 19, 37, 45, 260, 266, 284, 293], "countri": [13, 19, 37, 45, 177, 260, 266, 284, 293, 425], "germani": [13, 19, 37, 45, 260, 266, 284, 293], "franc": [13, 19, 27, 37, 45, 165, 260, 266, 274, 284, 293, 307, 414], "itali": [13, 19, 37, 45, 260, 266, 284, 293], "split": [13, 19, 37, 45, 66, 67, 77, 78, 79, 80, 85, 87, 91, 150, 151, 156, 157, 165, 184, 185, 186, 190, 214, 238, 260, 266, 284, 293, 307, 313, 314, 325, 326, 327, 328, 333, 335, 338, 399, 400, 404, 405, 414, 432, 434, 435, 439, 463, 488], "bert_base_uncased_multiple_choic": [13, 19, 37, 260, 266, 284], "span": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 158, 172, 173, 261, 267, 271, 276, 280, 286, 289, 294, 300, 301, 406, 421, 422], "squad": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 90, 92, 93, 97, 104, 107, 108, 158, 261, 267, 271, 276, 280, 286, 289, 294, 300, 301, 337, 339, 340, 344, 352, 355, 356, 406], "comput": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 67, 78, 80, 90, 97, 98, 102, 112, 161, 165, 166, 167, 175, 179, 190, 201, 261, 267, 271, 276, 280, 286, 289, 294, 300, 301, 307, 314, 326, 328, 337, 344, 345, 350, 360, 409, 414, 415, 416, 423, 428, 439, 450, 508], "logit": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 32, 33, 34, 36, 38, 39, 41, 42, 46, 47, 49, 52, 53, 54, 56, 57, 142, 156, 157, 214, 261, 262, 264, 265, 267, 268, 270, 271, 272, 274, 276, 279, 280, 281, 283, 286, 287, 289, 290, 294, 295, 297, 300, 301, 302, 304, 305, 391, 404, 405, 463], "albert_base_qa_squad2": [14, 261], "128": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 90, 92, 93, 95, 97, 98, 102, 107, 108, 115, 116, 117, 227, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 337, 339, 340, 342, 344, 345, 350, 355, 356, 363, 364, 365, 476, 500], "what": [14, 20, 24, 29, 33, 38, 41, 46, 50, 52, 53, 65, 67, 72, 73, 83, 84, 122, 124, 139, 142, 165, 167, 177, 185, 242, 261, 267, 271, 276, 280, 286, 289, 294, 298, 300, 301, 307, 312, 314, 320, 321, 330, 332, 371, 373, 388, 391, 414, 416, 425, 434, 491, 501], "": [14, 17, 18, 20, 23, 24, 27, 29, 32, 33, 36, 38, 41, 46, 49, 52, 53, 56, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 90, 94, 95, 97, 98, 99, 100, 103, 106, 107, 108, 112, 113, 115, 116, 119, 122, 130, 137, 140, 142, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 185, 186, 187, 190, 192, 196, 201, 203, 214, 219, 225, 227, 239, 249, 250, 261, 264, 265, 267, 270, 271, 274, 276, 279, 280, 283, 286, 289, 294, 297, 300, 301, 304, 307, 308, 312, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 333, 334, 335, 336, 337, 341, 342, 344, 345, 346, 347, 351, 354, 355, 356, 361, 363, 364, 366, 371, 379, 386, 389, 391, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 434, 435, 436, 439, 440, 444, 450, 452, 456, 457, 463, 465, 468, 471, 475, 476, 489, 500, 503, 504, 505, 508], "my": [14, 16, 17, 20, 22, 24, 28, 29, 31, 33, 35, 38, 40, 41, 42, 43, 46, 48, 50, 52, 53, 55, 58, 85, 86, 87, 130, 132, 139, 142, 150, 160, 161, 162, 166, 168, 169, 170, 171, 181, 184, 186, 203, 261, 263, 264, 267, 269, 271, 275, 276, 278, 280, 282, 286, 288, 289, 290, 291, 294, 296, 298, 300, 301, 303, 306, 333, 334, 335, 379, 381, 388, 391, 399, 408, 409, 411, 415, 417, 418, 419, 420, 430, 432, 435, 452, 504], "clara": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 139, 261, 267, 271, 276, 280, 286, 289, 294, 300, 301, 388], "live": [14, 16, 20, 22, 24, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 139, 161, 162, 227, 261, 263, 267, 269, 271, 276, 278, 280, 282, 286, 288, 289, 291, 294, 296, 300, 301, 303, 306, 388, 409, 411, 476, 500], "berkelei": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 168, 169, 170, 171, 261, 267, 271, 276, 280, 286, 289, 294, 300, 301, 417, 418, 419, 420], "instead": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 93, 122, 124, 128, 129, 173, 195, 196, 200, 201, 230, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 340, 371, 373, 376, 378, 422, 443, 444, 448, 450, 508], "per": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 94, 100, 106, 115, 116, 124, 128, 132, 134, 135, 136, 137, 142, 145, 190, 201, 203, 219, 230, 233, 238, 241, 262, 263, 264, 265, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 287, 288, 290, 291, 292, 295, 296, 297, 298, 302, 303, 304, 305, 306, 341, 347, 354, 363, 364, 373, 376, 381, 383, 384, 385, 386, 391, 439, 450, 452, 468, 483, 488, 490], "averag": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 94, 96, 100, 102, 106, 109, 115, 116, 124, 137, 148, 175, 214, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 299, 302, 304, 305, 341, 343, 347, 350, 354, 357, 363, 364, 373, 386, 397, 423, 463], "regress": [15, 21, 25, 30, 34, 39, 42, 47, 54, 57, 158, 173, 262, 268, 272, 277, 281, 287, 290, 295, 302, 305, 406, 422], "multi": [15, 21, 25, 28, 30, 34, 39, 42, 44, 47, 50, 54, 57, 90, 110, 112, 115, 116, 122, 124, 165, 214, 262, 268, 272, 275, 277, 281, 287, 290, 292, 295, 298, 302, 305, 307, 337, 358, 360, 363, 364, 371, 373, 414, 463], "sequenceclassifi": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305], "albert_base_sequence_classifier_imdb": [15, 262], "activ": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 122, 171, 200, 207, 214, 249, 262, 264, 265, 268, 270, 272, 274, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 371, 420, 448, 463], "calcul": [15, 17, 18, 21, 23, 25, 27, 28, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 114, 132, 137, 146, 153, 175, 214, 262, 264, 265, 268, 270, 272, 274, 275, 279, 281, 283, 287, 290, 292, 295, 297, 298, 302, 304, 305, 362, 381, 386, 394, 402, 423, 463], "sigmoid": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 214, 262, 264, 265, 268, 270, 272, 274, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 463], "love": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 93, 108, 116, 151, 154, 262, 265, 268, 270, 275, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 340, 356, 364, 400, 403, 504], "movi": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 154, 160, 262, 265, 268, 270, 275, 277, 279, 281, 283, 287, 295, 297, 298, 302, 304, 305, 403, 408, 504], "child": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 262, 265, 268, 270, 277, 279, 281, 283, 287, 295, 297, 302, 304, 305], "pretti": [15, 18, 21, 23, 30, 32, 34, 36, 39, 44, 47, 49, 54, 56, 57, 122, 262, 265, 268, 270, 277, 279, 281, 283, 287, 292, 295, 297, 302, 304, 305, 371], "bore": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 262, 265, 268, 270, 277, 279, 281, 283, 287, 295, 297, 302, 304, 305], "neg": [15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 110, 153, 154, 175, 214, 227, 262, 265, 268, 270, 272, 277, 279, 281, 283, 287, 295, 297, 298, 302, 304, 305, 358, 402, 403, 423, 463, 476, 500], "limit": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 69, 78, 80, 87, 90, 95, 103, 104, 111, 114, 117, 122, 154, 173, 178, 214, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 314, 316, 326, 328, 335, 337, 342, 351, 352, 359, 362, 365, 371, 422, 427, 463], "almost": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305], "help": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 69, 76, 83, 84, 85, 90, 91, 142, 143, 156, 157, 159, 162, 163, 165, 169, 187, 203, 214, 227, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 307, 316, 324, 330, 332, 333, 337, 338, 391, 392, 404, 405, 407, 411, 412, 414, 418, 436, 452, 463, 476, 500, 505, 509], "feed": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305], "entir": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 94, 105, 110, 111, 165, 170, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 295, 297, 302, 304, 305, 307, 314, 341, 353, 358, 359, 414, 419], "one": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 44, 47, 49, 54, 56, 57, 63, 67, 78, 79, 80, 83, 84, 86, 92, 93, 104, 109, 115, 116, 117, 122, 124, 128, 130, 135, 142, 151, 157, 170, 178, 184, 203, 206, 214, 229, 230, 239, 262, 264, 265, 268, 270, 272, 274, 277, 279, 281, 283, 287, 290, 292, 295, 297, 302, 304, 305, 311, 314, 326, 327, 328, 330, 332, 334, 339, 340, 352, 357, 363, 364, 365, 371, 373, 376, 379, 384, 391, 400, 405, 419, 427, 432, 452, 455, 463, 479, 480, 489, 500, 504], "token_classifi": [16, 26, 40, 43, 48, 55, 58, 263, 273, 288, 291, 296, 303, 306], "albert_base_token_classifier_conll03": [16, 263], "tokenclassifi": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 263, 269, 273, 278, 282, 288, 291, 296, 303, 306], "john": [16, 22, 31, 35, 40, 43, 48, 55, 58, 63, 93, 108, 116, 119, 120, 138, 140, 151, 197, 245, 263, 269, 278, 282, 288, 291, 296, 303, 306, 311, 340, 356, 364, 366, 368, 387, 389, 400, 445, 495], "lenon": [16, 22, 31, 35, 40, 43, 48, 55, 58, 263, 269, 278, 282, 288, 291, 296, 303, 306], "born": [16, 22, 31, 35, 40, 43, 48, 55, 58, 161, 162, 263, 269, 278, 282, 288, 291, 296, 303, 306, 409, 411], "london": [16, 22, 31, 35, 40, 43, 48, 55, 58, 263, 269, 278, 282, 288, 291, 296, 303, 306], "pari": [16, 22, 31, 35, 40, 43, 48, 55, 58, 139, 263, 269, 278, 282, 288, 291, 296, 303, 306, 388], "sarah": [16, 22, 31, 35, 40, 43, 48, 55, 58, 263, 269, 278, 282, 288, 291, 296, 303, 306], "o": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 135, 136, 137, 138, 201, 219, 233, 241, 244, 263, 269, 273, 278, 282, 288, 291, 296, 303, 306, 384, 385, 386, 387, 450, 468, 483, 490, 494, 510], "modelforsequenceclassif": [17, 18, 23, 27, 32, 36, 49, 56, 264, 265, 270, 274, 279, 283, 297, 304], "nli": [17, 18, 23, 27, 32, 36, 49, 56, 264, 265, 270, 274, 279, 283, 297, 304], "natur": [17, 18, 23, 27, 32, 36, 49, 50, 56, 80, 90, 91, 92, 93, 95, 97, 98, 99, 104, 112, 113, 117, 124, 158, 161, 166, 171, 173, 193, 202, 206, 264, 265, 270, 274, 279, 283, 297, 298, 304, 328, 337, 338, 339, 340, 342, 344, 345, 346, 352, 360, 361, 365, 373, 406, 409, 415, 420, 422, 441, 451, 455], "don": [17, 18, 23, 27, 32, 36, 49, 56, 98, 107, 140, 264, 265, 270, 274, 279, 283, 297, 304, 345, 355, 389], "hardcod": [17, 18, 23, 27, 32, 36, 49, 56, 264, 265, 270, 274, 279, 283, 297, 304], "potenti": [17, 18, 23, 27, 32, 36, 49, 56, 78, 160, 164, 168, 170, 177, 264, 265, 270, 274, 279, 283, 297, 304, 326, 408, 413, 417, 419, 425], "thei": [17, 18, 23, 27, 32, 36, 49, 51, 56, 83, 84, 85, 137, 140, 142, 157, 161, 204, 242, 264, 265, 270, 274, 279, 283, 297, 299, 304, 330, 332, 333, 386, 389, 391, 405, 409, 453, 471, 491, 504], "chosen": [17, 18, 23, 27, 32, 36, 49, 56, 83, 84, 137, 142, 264, 265, 270, 274, 279, 283, 297, 304, 330, 332, 386, 391], "runtim": [17, 18, 23, 27, 32, 36, 49, 56, 264, 265, 270, 274, 279, 283, 297, 304], "usual": [17, 18, 23, 27, 32, 36, 49, 56, 80, 206, 234, 264, 265, 270, 274, 279, 283, 297, 304, 328, 455, 484], "slower": [17, 18, 23, 27, 32, 36, 49, 56, 264, 265, 270, 274, 279, 283, 297, 304], "flexibl": [17, 18, 23, 27, 32, 36, 49, 56, 66, 71, 78, 264, 265, 270, 274, 279, 283, 297, 304, 313, 319, 326], "loop": [17, 18, 23, 36, 49, 56, 203, 264, 265, 270, 283, 297, 304, 452], "through": [17, 18, 23, 36, 49, 56, 90, 104, 120, 122, 132, 164, 167, 169, 197, 264, 265, 270, 283, 297, 304, 337, 352, 368, 371, 413, 416, 418, 445, 505], "longer": [17, 18, 23, 36, 49, 56, 90, 99, 103, 113, 124, 162, 165, 166, 264, 265, 270, 283, 297, 304, 307, 337, 346, 351, 361, 373, 411, 414, 415, 509], "pass": [17, 18, 23, 27, 32, 36, 49, 56, 142, 203, 264, 265, 270, 274, 279, 283, 297, 304, 336, 391, 452], "pose": [17, 18, 23, 27, 32, 36, 49, 56, 264, 265, 270, 274, 279, 283, 297, 304], "premis": [17, 18, 23, 27, 32, 36, 49, 56, 264, 265, 270, 274, 279, 283, 297, 304], "hypothesi": [17, 18, 23, 27, 32, 36, 49, 56, 264, 265, 270, 274, 279, 283, 297, 304], "pair": [17, 18, 23, 27, 32, 36, 49, 56, 66, 100, 106, 110, 120, 164, 227, 264, 265, 270, 274, 279, 283, 297, 304, 313, 347, 354, 358, 368, 413, 476], "albert_base_zero_shot_classifier_onnx": [17, 264], "iphon": [17, 264], "resolv": [17, 264], "asap": [17, 264], "urgent": [17, 264], "albert_zero_shot_classifier_onnx": [17, 264], "bart": [17, 18, 158, 264, 265, 406], "bartforsequenceclassif": [18, 265], "bart_large_zero_shot_classifier_mnli": [18, 265], "bert_base_cased_qa_squad2": [20, 267], "bert_base_sequence_classifier_imdb": [21, 268], "bert_base_token_classifier_conll03": [22, 269], "bert_zero_shot_classifier_mnli": [23, 270], "camembert": [24, 25, 26, 95, 271, 272, 273, 342], "camembert_base_qa_fquad": [24, 271], "fr": [24, 25, 27, 95, 124, 164, 167, 271, 272, 274, 342, 373, 413, 416], "sequence_classifi": [25, 272], "camembert_base_sequence_classifier_allocin": [25, 272], "j": [25, 119, 272, 366], "ai": [25, 142, 143, 158, 163, 227, 272, 391, 392, 406, 412, 476, 500], "ador\u00e9": [25, 272], "ce": [25, 272], "film": [25, 272], "lorsqu": [25, 272], "\u00e9tai": [25, 272], "enfant": [25, 272], "je": [25, 272], "d\u00e9test": [25, 272], "\u00e7a": [25, 272], "camembert_base_token_classifier_wikin": [26, 273], "georg": [26, 273], "washington": [26, 273], "est": [26, 95, 124, 165, 273, 307, 342, 373, 414], "all\u00e9": [26, 273], "\u00e0": [26, 273], "camembert_zero_shot_classifier_xnli_onnx": [27, 274], "multi_class": [27, 274], "setcandidatelabel": [27, 66, 207, 214, 274, 313, 463], "sport": [27, 274], "politiqu": [27, 274], "scienc": [27, 102, 122, 168, 172, 274, 350, 371, 417, 421, 501], "l": [27, 71, 274, 319], "\u00e9quip": [27, 274], "de": [27, 80, 95, 122, 124, 165, 274, 307, 328, 342, 371, 373, 414], "joue": [27, 274], "aujourd": [27, 274], "hui": [27, 274], "au": [27, 274], "parc": [27, 274], "princ": [27, 274], "classifierdl": [28, 275, 504], "univers": [28, 83, 84, 111, 112, 160, 165, 167, 168, 169, 170, 171, 275, 307, 330, 332, 359, 360, 408, 414, 416, 417, 418, 419, 420], "deep": [28, 92, 93, 101, 122, 136, 151, 177, 214, 275, 339, 340, 348, 371, 385, 400, 425, 463], "dnn": [28, 275], "built": [28, 44, 69, 160, 171, 202, 249, 275, 292, 316, 408, 420, 451], "insid": [28, 44, 135, 148, 187, 241, 275, 292, 384, 397, 436, 490], "instanti": [28, 44, 50, 83, 84, 99, 113, 114, 119, 125, 127, 130, 131, 136, 137, 140, 148, 151, 153, 154, 175, 177, 178, 179, 184, 185, 190, 239, 241, 242, 275, 292, 298, 330, 332, 336, 346, 361, 362, 366, 374, 375, 379, 380, 385, 386, 389, 397, 400, 402, 403, 423, 425, 427, 428, 432, 434, 439, 489, 490, 491], "dataset": [28, 44, 50, 83, 84, 94, 95, 99, 100, 102, 103, 104, 107, 108, 110, 111, 113, 114, 122, 124, 136, 137, 146, 151, 161, 163, 164, 167, 168, 170, 172, 177, 190, 225, 231, 233, 241, 242, 243, 244, 250, 275, 292, 298, 330, 332, 341, 342, 346, 347, 350, 351, 352, 355, 356, 358, 359, 361, 362, 371, 373, 385, 386, 394, 400, 409, 412, 413, 416, 417, 419, 421, 425, 439, 475, 481, 483, 490, 491, 493, 494, 507], "monitor": [28, 44, 50, 137, 142, 143, 226, 227, 275, 292, 298, 386, 391, 392, 476, 500], "metric": [28, 44, 50, 137, 179, 227, 275, 292, 298, 386, 428, 476], "done": [28, 44, 50, 107, 108, 136, 137, 275, 292, 298, 355, 356, 385, 386, 505], "settestdataset": [28, 44, 50, 137, 144, 146, 275, 292, 298, 386, 394], "method": [28, 44, 50, 90, 91, 94, 98, 99, 102, 104, 113, 117, 122, 137, 156, 157, 175, 214, 234, 275, 292, 298, 336, 337, 338, 341, 345, 346, 350, 352, 361, 365, 371, 386, 404, 405, 423, 463, 484, 499], "expect": [28, 44, 50, 94, 100, 106, 117, 137, 157, 187, 203, 219, 275, 292, 298, 341, 347, 354, 365, 386, 405, 436, 452, 468], "path": [28, 44, 50, 65, 68, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 99, 113, 114, 119, 120, 125, 127, 130, 131, 136, 137, 139, 140, 146, 151, 153, 156, 157, 161, 177, 178, 179, 182, 187, 200, 201, 214, 217, 218, 227, 229, 231, 233, 238, 239, 241, 242, 243, 244, 247, 275, 292, 298, 312, 315, 318, 319, 320, 321, 322, 323, 324, 325, 330, 332, 346, 361, 362, 366, 368, 374, 375, 379, 380, 385, 386, 388, 389, 394, 400, 402, 404, 405, 409, 425, 427, 428, 431, 436, 448, 450, 463, 466, 467, 476, 479, 483, 488, 489, 490, 491, 493, 494, 497, 500], "parquet": [28, 44, 50, 137, 146, 192, 275, 292, 298, 386, 394, 440], "datafram": [28, 44, 50, 99, 113, 114, 137, 146, 148, 175, 190, 200, 201, 214, 215, 219, 225, 227, 229, 231, 233, 239, 241, 242, 243, 244, 275, 292, 298, 346, 361, 362, 386, 394, 397, 423, 439, 448, 450, 463, 464, 468, 475, 476, 479, 483, 489, 490, 491, 493, 494, 500, 504, 508, 510], "ha": [28, 44, 50, 51, 66, 67, 78, 79, 80, 85, 86, 87, 90, 97, 98, 101, 107, 108, 111, 114, 122, 125, 130, 137, 146, 151, 153, 157, 158, 159, 167, 168, 170, 173, 178, 179, 190, 192, 193, 200, 201, 214, 227, 234, 243, 275, 292, 298, 299, 313, 314, 326, 327, 328, 333, 334, 335, 337, 344, 345, 348, 355, 356, 359, 362, 371, 374, 379, 386, 394, 400, 402, 405, 406, 407, 416, 417, 419, 422, 427, 428, 439, 440, 441, 448, 450, 463, 476, 484, 493, 500, 504, 505], "same": [28, 44, 50, 63, 69, 90, 104, 107, 114, 115, 119, 120, 137, 142, 146, 160, 169, 170, 173, 175, 204, 227, 275, 292, 298, 311, 316, 337, 352, 355, 362, 363, 366, 368, 386, 391, 394, 408, 418, 419, 422, 423, 453, 476, 505], "also": [28, 44, 50, 66, 67, 71, 73, 76, 77, 78, 79, 80, 86, 90, 94, 101, 103, 114, 115, 116, 119, 120, 122, 128, 130, 135, 136, 137, 146, 151, 154, 158, 160, 166, 170, 172, 181, 201, 205, 239, 249, 275, 292, 298, 313, 314, 319, 321, 324, 325, 326, 327, 328, 334, 337, 341, 348, 351, 362, 363, 364, 366, 368, 371, 376, 379, 384, 385, 386, 393, 394, 400, 403, 406, 408, 415, 419, 421, 430, 450, 454, 458, 463, 474, 480, 489, 500, 504, 505, 506, 507, 509], "follow": [28, 44, 50, 63, 76, 81, 86, 101, 103, 110, 114, 122, 128, 129, 130, 135, 137, 140, 150, 166, 170, 188, 203, 205, 231, 275, 292, 298, 311, 324, 329, 334, 348, 351, 358, 362, 371, 376, 378, 379, 384, 386, 389, 399, 415, 419, 437, 452, 454, 500, 502, 505], "preprocessingpipelin": [28, 44, 50, 137, 146, 275, 292, 298, 386, 394], "randomsplit": [28, 44, 50, 137, 146, 275, 292, 298, 386, 394], "write": [28, 44, 50, 114, 137, 142, 146, 160, 172, 178, 179, 275, 292, 298, 362, 386, 391, 394, 408, 421, 427, 428, 505], "overwrit": [28, 44, 50, 137, 138, 146, 227, 275, 292, 298, 386, 387, 394, 476], "test_data": [28, 44, 50, 137, 146, 275, 292, 298, 386, 394], "usag": [28, 44, 50, 63, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 98, 101, 107, 112, 114, 115, 117, 119, 122, 124, 125, 128, 129, 130, 131, 136, 137, 140, 148, 150, 151, 153, 154, 156, 157, 158, 165, 173, 175, 177, 178, 180, 181, 185, 187, 190, 275, 292, 298, 307, 311, 330, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 345, 348, 355, 360, 362, 363, 365, 366, 371, 373, 374, 376, 378, 379, 380, 385, 386, 389, 397, 399, 400, 402, 403, 404, 405, 406, 414, 422, 423, 425, 427, 429, 430, 434, 436, 439], "64": [28, 44, 50, 90, 137, 145, 275, 292, 298, 337, 386, 393, 504], "coeffici": [28, 50, 136, 137, 275, 298, 385, 386], "5": [28, 44, 50, 63, 70, 78, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 124, 128, 129, 132, 135, 137, 142, 143, 148, 154, 161, 169, 170, 171, 190, 195, 201, 214, 219, 227, 233, 242, 243, 244, 245, 275, 292, 298, 311, 318, 326, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 371, 373, 376, 378, 381, 384, 386, 391, 392, 397, 409, 418, 419, 420, 439, 443, 450, 463, 468, 476, 483, 491, 493, 494, 495, 500, 503, 504, 510], "enableoutputlog": [28, 44, 50, 137, 144, 146, 275, 292, 298, 386, 394], "stdout": [28, 44, 50, 137, 146, 275, 292, 298, 386, 394], "addit": [28, 44, 50, 83, 84, 92, 93, 119, 136, 137, 142, 146, 150, 157, 161, 172, 187, 227, 275, 292, 298, 330, 332, 336, 339, 340, 366, 385, 386, 391, 394, 399, 405, 409, 421, 436, 476, 503, 504], "evaluationlogextend": [28, 44, 50, 137, 144, 146, 275, 292, 298, 386, 394], "valid": [28, 44, 50, 128, 137, 146, 151, 177, 275, 292, 298, 376, 386, 394, 400, 425, 500], "displai": [28, 44, 50, 146, 161, 227, 275, 292, 298, 394, 409, 476, 500], "lr": [28, 44, 50, 133, 137, 144, 145, 190, 275, 292, 298, 386, 393, 439], "rate": [28, 44, 50, 71, 81, 99, 107, 108, 113, 114, 137, 145, 156, 157, 175, 177, 214, 275, 292, 298, 319, 329, 346, 355, 356, 361, 362, 386, 393, 404, 405, 423, 425, 463], "005": [28, 50, 137, 145, 275, 298, 386, 393], "maxepoch": [28, 44, 50, 133, 134, 136, 137, 144, 145, 275, 292, 298, 383, 385, 386, 393], "epoch": [28, 44, 50, 134, 136, 137, 145, 146, 151, 176, 177, 227, 275, 292, 298, 383, 385, 386, 393, 394, 400, 425, 476], "30": [28, 50, 122, 128, 129, 135, 145, 165, 201, 219, 233, 245, 275, 298, 307, 371, 376, 378, 384, 393, 414, 450, 468, 483, 495, 503], "outputlogspath": [28, 44, 50, 137, 144, 146, 149, 151, 275, 292, 298, 386, 394, 400], "randomse": [28, 44, 50, 133, 134, 136, 137, 144, 145, 275, 292, 298, 383, 385, 386, 393], "random": [28, 44, 50, 99, 113, 134, 136, 137, 142, 145, 165, 175, 195, 275, 292, 298, 346, 361, 383, 385, 386, 391, 393, 414, 423, 443], "seed": [28, 44, 50, 89, 99, 113, 134, 136, 137, 145, 156, 157, 165, 207, 214, 275, 292, 298, 346, 361, 383, 385, 386, 393, 404, 405, 414, 463], "shuffl": [28, 44, 134, 145, 158, 275, 292, 383, 393, 406], "testdataset": [28, 44, 50, 137, 144, 146, 227, 275, 292, 298, 386, 394, 476, 500], "statist": [28, 44, 50, 114, 122, 137, 146, 275, 292, 298, 362, 371, 386, 394], "validationsplit": [28, 44, 50, 137, 144, 146, 149, 151, 275, 292, 298, 386, 394, 400], "choos": [28, 44, 50, 96, 109, 137, 142, 146, 151, 178, 214, 275, 292, 298, 343, 357, 386, 391, 400, 427], "proport": [28, 44, 50, 137, 146, 151, 154, 275, 292, 298, 386, 394, 400], "against": [28, 44, 50, 119, 122, 127, 131, 137, 146, 151, 169, 170, 204, 275, 292, 298, 366, 371, 375, 380, 386, 394, 400, 418, 419, 453], "between": [28, 44, 50, 71, 78, 83, 84, 85, 87, 104, 107, 108, 112, 115, 116, 117, 120, 137, 142, 146, 150, 151, 164, 166, 167, 177, 214, 230, 275, 292, 298, 319, 326, 330, 332, 333, 335, 352, 355, 356, 360, 363, 364, 365, 368, 386, 391, 394, 399, 400, 413, 415, 416, 425, 463], "off": [28, 44, 50, 112, 115, 116, 137, 146, 151, 168, 275, 292, 298, 360, 363, 364, 386, 394, 400, 417], "verbos": [28, 44, 50, 133, 136, 137, 144, 146, 275, 292, 298, 385, 386, 394], "accept": [28, 44, 50, 77, 142, 229, 231, 275, 292, 298, 325, 391, 479, 481], "singl": [28, 44, 50, 71, 100, 102, 114, 120, 122, 158, 164, 175, 184, 185, 187, 203, 214, 230, 238, 241, 275, 292, 298, 319, 336, 347, 350, 362, 368, 371, 406, 413, 423, 432, 434, 436, 452, 463, 480, 488, 490], "item": [28, 50, 114, 142, 203, 227, 241, 275, 298, 362, 391, 452, 476, 490, 500], "doubl": [28, 50, 153, 192, 205, 275, 298, 440, 454], "In": [28, 44, 50, 67, 80, 87, 95, 97, 98, 103, 104, 106, 114, 117, 119, 122, 124, 125, 127, 130, 131, 150, 151, 153, 157, 158, 161, 162, 164, 166, 167, 169, 171, 172, 173, 178, 179, 190, 227, 231, 243, 275, 292, 298, 314, 328, 335, 342, 344, 345, 351, 352, 354, 362, 365, 366, 371, 373, 374, 375, 379, 380, 399, 400, 402, 405, 406, 409, 411, 413, 415, 416, 418, 420, 421, 422, 427, 428, 439, 476, 493, 500, 504, 505, 509, 510], "csv": [28, 50, 119, 146, 205, 275, 298, 366, 394, 454, 504], "best": [28, 50, 90, 95, 100, 102, 107, 108, 122, 124, 137, 142, 158, 160, 164, 172, 203, 275, 298, 337, 342, 347, 350, 355, 356, 371, 373, 386, 391, 406, 408, 413, 421, 452, 504], "wach": [28, 275, 504], "ever": [28, 50, 86, 275, 298, 334, 504], "opinion": [28, 50, 275, 298, 504], "win": [28, 50, 275, 298, 504], "award": [28, 50, 275, 298, 504], "terribl": [28, 50, 275, 298, 504], "act": [28, 50, 210, 275, 298, 504], "bad": [28, 50, 153, 227, 275, 298, 402, 476, 500, 504], "realli": [28, 50, 142, 154, 275, 298, 391, 403, 504], "Then": [28, 44, 136, 137, 164, 167, 206, 227, 249, 275, 292, 385, 386, 413, 416, 455, 476, 504], "trane": [28, 275], "smallcorpu": [28, 50, 275, 298, 504], "header": [28, 50, 51, 203, 205, 229, 230, 231, 239, 275, 298, 299, 452, 454, 479, 480, 481, 489, 504], "src": [28, 50, 66, 67, 78, 79, 80, 83, 84, 114, 125, 127, 130, 131, 136, 137, 148, 157, 166, 178, 179, 184, 190, 241, 242, 243, 244, 245, 275, 298, 313, 314, 326, 327, 328, 330, 332, 362, 374, 375, 379, 380, 385, 386, 397, 405, 415, 427, 428, 432, 439, 490, 491, 493, 494, 495, 504, 510], "useembed": [28, 44, 50, 112, 275, 292, 298, 360, 504], "docclassifi": [28, 44, 50, 275, 292, 298, 504], "setbatchs": [28, 44, 50, 64, 68, 89, 91, 101, 133, 137, 144, 145, 156, 157, 176, 177, 207, 214, 227, 275, 292, 298, 315, 338, 348, 386, 393, 404, 405, 425, 463, 476, 500, 504], "setmaxepoch": [28, 44, 50, 133, 134, 136, 137, 144, 145, 227, 275, 292, 298, 383, 385, 386, 393, 476, 500, 504], "20": [28, 42, 51, 67, 69, 77, 85, 117, 135, 156, 158, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 201, 205, 219, 233, 275, 290, 299, 314, 316, 325, 333, 365, 384, 404, 406, 408, 409, 411, 413, 415, 416, 417, 418, 419, 420, 421, 450, 454, 468, 483, 504], "setlr": [28, 44, 50, 133, 137, 144, 145, 227, 275, 292, 298, 386, 393, 476, 500, 504], "5e": [28, 50, 275, 298, 504], "pipelinemodel": [28, 42, 44, 50, 83, 84, 86, 99, 113, 136, 137, 154, 177, 178, 179, 190, 201, 204, 227, 231, 234, 275, 290, 292, 298, 330, 332, 334, 346, 361, 385, 386, 403, 425, 427, 428, 439, 450, 453, 476, 481, 484, 504, 507], "v": [28, 44, 50, 81, 97, 104, 114, 122, 124, 127, 137, 145, 146, 160, 179, 214, 219, 275, 292, 298, 329, 344, 352, 362, 371, 373, 375, 386, 393, 394, 408, 428, 463, 468], "your": [28, 44, 50, 83, 87, 91, 98, 99, 107, 109, 113, 125, 127, 130, 131, 135, 136, 137, 140, 142, 143, 148, 153, 154, 156, 157, 177, 178, 184, 185, 190, 195, 231, 249, 250, 275, 292, 298, 330, 335, 338, 345, 346, 355, 357, 361, 374, 375, 379, 380, 384, 385, 386, 389, 391, 392, 397, 402, 403, 404, 405, 425, 427, 432, 434, 439, 443, 481, 502, 504, 507, 508, 510], "own": [28, 44, 50, 83, 99, 113, 125, 127, 130, 131, 136, 137, 140, 148, 153, 154, 177, 178, 184, 185, 190, 250, 275, 292, 298, 330, 336, 346, 361, 374, 375, 379, 380, 385, 386, 389, 397, 402, 403, 425, 427, 432, 434, 439, 507, 508, 510], "classifierdl_use_trec6": [28, 275, 504], "trec": [28, 275], "sarcasmdl": [28, 275, 504], "classifierdl_use_sarcasm": [28, 275, 504], "sarcasm": [28, 275, 504], "m": [28, 87, 128, 129, 159, 239, 245, 275, 335, 376, 378, 407, 489, 495, 504], "readi": [28, 233, 249, 275, 483, 504], "could": [28, 98, 122, 130, 146, 177, 275, 345, 371, 379, 394, 425, 503, 504, 505], "put": [28, 203, 219, 275, 452, 468, 504], "word": [28, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 90, 96, 97, 99, 101, 107, 109, 112, 113, 114, 117, 119, 120, 122, 125, 132, 135, 138, 139, 140, 148, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 185, 187, 189, 190, 201, 219, 229, 230, 231, 233, 239, 243, 244, 247, 275, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 332, 337, 343, 344, 346, 348, 355, 357, 360, 361, 362, 365, 366, 368, 371, 374, 381, 384, 387, 388, 389, 397, 402, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 430, 434, 436, 438, 439, 450, 468, 479, 481, 483, 489, 493, 494, 503, 504], "wake": [28, 275, 504], "am": [28, 85, 128, 129, 156, 160, 161, 162, 163, 168, 169, 170, 171, 184, 275, 333, 376, 378, 404, 408, 409, 411, 412, 417, 418, 419, 420, 432, 504], "mondai": [28, 275, 504], "arrays_zip": [28, 83, 84, 122, 275, 330, 332, 371, 504], "out": [28, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 94, 100, 106, 122, 125, 140, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 180, 181, 275, 316, 318, 319, 320, 321, 322, 323, 324, 325, 338, 341, 347, 354, 371, 374, 389, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 429, 430, 504], "deberta": [29, 30, 31, 32, 97, 276, 277, 278, 279, 344], "deberta_v3_xsmall_qa_squad2": [29, 276], "v2": [30, 31, 92, 93, 97, 172, 277, 278, 339, 340, 344, 421], "v3": [30, 31, 277, 278], "deberta_v3_xsmall_sequence_classifier_imdb": [30, 277], "deberta_base_sequence_classifier_imdb": [30, 277], "deberta_v3_xsmall_token_classifier_conll03": [31, 278], "deberta_base_zero_shot_classifier_mnli_anli_v3": [32, 279], "distilbert": [33, 34, 36, 37, 98, 280, 281, 283, 284, 345], "distilbert_base_cased_qa_squad2": [33, 280], "distilbert_base_sequence_classifier_imdb": [34, 281], "distilbert_base_token_classifier_conll03": [35, 282], "distilbert_base_zero_shot_classifier_uncased_mnli": [36, 283], "distilbert_base_uncased_multiple_choic": [37, 284], "longform": [38, 39, 40, 103, 286, 287, 288, 351], "longformer_base_base_qa_squad2": [38, 286], "longformer_base_sequence_classifier_imdb": [39, 287], "4096": [39, 69, 70, 90, 103, 157, 214, 287, 316, 318, 337, 351, 405, 463], "xlnet_base_token_classifier_conll03": [40, 58, 288, 306], "longformer_base_token_classifier_conll03": [40, 288], "mpnet": [41, 42, 104, 289, 290, 352], "mpnet_base_question_answering_squad2": [41, 289], "mpnet_sequence_classifier_ukr_messag": [42, 290], "drive": [42, 290], "car": [42, 290], "bu": [42, 290], "arriv": [42, 290], "minut": [42, 44, 290, 292], "pineappl": [42, 290], "pizza": [42, 290], "worst": [42, 290], "transport": [42, 290], "movement": [42, 290], "food": [42, 142, 143, 157, 290, 391, 392, 405], "mpnet_base_sequence_classifier_imdb": [42, 290], "xlm": [43, 52, 53, 54, 55, 115, 116, 291, 300, 301, 302, 303, 363, 364], "roberta": [43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 79, 95, 97, 103, 104, 107, 108, 115, 116, 139, 158, 291, 293, 294, 295, 296, 297, 300, 301, 302, 303, 327, 342, 344, 351, 352, 355, 356, 363, 364, 388, 406], "mpnet_base_token_classifi": [43, 55, 291, 303], "multiclassifierdl": [44, 292], "bidirect": [44, 92, 93, 101, 117, 158, 292, 339, 340, 348, 365, 406], "gru": [44, 292], "convolut": [44, 67, 80, 292, 314, 328], "machin": [44, 67, 85, 87, 99, 113, 122, 136, 158, 161, 164, 165, 167, 173, 227, 292, 307, 314, 333, 335, 346, 361, 371, 385, 406, 409, 413, 414, 416, 422, 476, 502], "strongli": [44, 292], "relat": [44, 83, 84, 120, 292, 330, 332, 368, 509], "variant": [44, 81, 103, 112, 170, 292, 329, 351, 360, 419], "mai": [44, 87, 91, 142, 156, 157, 162, 164, 169, 193, 214, 239, 292, 335, 336, 338, 391, 404, 405, 411, 413, 418, 441, 463, 489, 503, 504, 505, 508, 509], "multiclass": [44, 214, 292], "categor": [44, 234, 292, 484], "precis": [44, 83, 84, 87, 214, 292, 330, 332, 335, 463], "constraint": [44, 292], "mani": [44, 73, 97, 107, 108, 122, 142, 158, 160, 161, 162, 164, 165, 167, 173, 190, 292, 307, 321, 336, 344, 355, 356, 371, 391, 406, 408, 409, 411, 413, 414, 416, 422, 439], "formal": [44, 292], "find": [44, 83, 84, 106, 107, 108, 111, 112, 119, 120, 125, 128, 158, 161, 172, 292, 330, 332, 354, 355, 356, 359, 360, 366, 368, 374, 376, 406, 409, 421], "x": [44, 71, 219, 241, 249, 292, 319, 468, 490, 510], "binari": [44, 200, 207, 215, 227, 238, 239, 292, 448, 464, 476, 488, 489], "y": [44, 87, 249, 292, 335], "multiclassifi": [44, 227, 292, 476, 500], "001": [44, 81, 136, 137, 292, 329, 385, 386], "10": [44, 63, 68, 83, 87, 94, 122, 128, 129, 138, 142, 159, 164, 175, 178, 227, 245, 292, 311, 315, 330, 335, 341, 371, 376, 378, 387, 391, 407, 413, 423, 427, 476, 495, 503], "44": [44, 99, 113, 148, 167, 292, 346, 361, 397, 416], "ed58abb40640f983": [44, 292], "pn": [44, 292], "newsyou": [44, 292], "toxic": [44, 167, 169, 292, 416, 418], "a1237f726b5f5d89": [44, 292], "dude": [44, 292], "place": [44, 80, 157, 203, 292, 328, 336, 405, 452], "obscen": [44, 292], "insult": [44, 292], "24b0d6c8733c2abe": [44, 292], "thank": [44, 117, 122, 159, 245, 292, 365, 371, 407, 495], "8c4478fb239bcfc0": [44, 292], "gee": [44, 292], "traindataset": [44, 227, 292, 476, 500], "printschema": [44, 192, 194, 200, 202, 229, 238, 239, 292, 440, 442, 448, 451, 479, 488, 489], "root": [44, 63, 83, 84, 120, 192, 194, 200, 202, 229, 238, 239, 242, 292, 311, 330, 332, 368, 440, 442, 448, 451, 479, 488, 489, 491], "setcleanupmod": [44, 191, 194, 202, 292, 442, 451], "shrink": [44, 194, 202, 292, 442, 451], "1e": [44, 227, 292, 476, 500], "setvalidationsplit": [44, 144, 146, 149, 151, 292, 394, 400], "multiclassifierdl_use_tox": [44, 292], "comment": [44, 122, 292, 371], "jigsaw": [44, 292], "good": [44, 95, 98, 112, 154, 292, 342, 345, 360, 403], "stuff": [44, 292], "wtf": [44, 292], "kind": [44, 122, 128, 129, 292, 371, 376, 378], "crap": [44, 292], "roberta_base_uncased_multiple_choic": [45, 293], "roberta_base_qa_squad2": [46, 139, 294, 388], "roberta_base_sequence_classifier_imdb": [47, 295], "roberta_base_token_classifier_conll03": [48, 296], "roberta_base_zero_shot_classifier_nli": [49, 297], "sentimentdl": [50, 298], "affect": [50, 187, 214, 298, 436, 463], "subject": [50, 83, 84, 298, 330, 332], "view": [50, 298], "product": [50, 168, 298, 417], "review": [50, 142, 223, 298, 391, 472], "tweet": [50, 298], "interpret": [50, 85, 119, 171, 217, 298, 333, 366, 420, 466], "posit": [50, 97, 98, 104, 110, 115, 116, 117, 122, 135, 142, 153, 154, 157, 175, 186, 190, 206, 214, 227, 298, 344, 345, 352, 358, 363, 364, 365, 371, 384, 391, 402, 403, 405, 423, 435, 439, 455, 463, 476, 500], "final": [50, 85, 103, 107, 108, 115, 116, 124, 137, 164, 177, 298, 333, 351, 355, 356, 363, 364, 373, 386, 413, 425, 504], "otheriws": [50, 124, 298, 373], "neutral": [50, 124, 298, 373], "score": [50, 92, 93, 115, 116, 122, 124, 136, 137, 139, 153, 154, 161, 298, 339, 340, 363, 364, 371, 373, 385, 386, 388, 402, 403, 409], "less": [50, 98, 124, 128, 132, 136, 165, 169, 178, 298, 345, 373, 376, 381, 385, 414, 418, 427], "watch": [50, 154, 160, 298, 403, 408], "32": [50, 90, 91, 101, 156, 157, 214, 245, 298, 337, 338, 348, 404, 405, 463, 495, 503, 509], "p": [50, 86, 99, 113, 124, 137, 146, 156, 157, 185, 214, 298, 334, 346, 361, 373, 386, 394, 404, 405, 434, 463], "sentimentdl_use_imdb": [50, 298], "imdb": [50, 298], "sentimentdl_use_twitt": [50, 298], "wow": [50, 298], "video": [50, 122, 298, 371], "awesom": [50, 298], "bruh": [50, 298], "damn": [50, 298], "wast": [50, 154, 298, 403], "implement": [51, 99, 113, 115, 139, 151, 177, 198, 199, 299, 308, 336, 346, 361, 363, 388, 400, 423, 425, 446, 447, 456, 457, 465, 471, 475], "tapa": [51, 299], "design": [51, 67, 77, 78, 81, 92, 93, 107, 108, 111, 127, 158, 163, 165, 168, 172, 227, 299, 307, 314, 325, 326, 329, 339, 340, 355, 356, 359, 375, 406, 412, 414, 417, 421, 476, 500], "about": [51, 65, 72, 73, 77, 83, 84, 107, 108, 110, 114, 122, 139, 142, 150, 160, 179, 201, 204, 247, 299, 312, 320, 321, 325, 330, 332, 355, 356, 358, 362, 371, 388, 391, 399, 408, 428, 450, 453, 497, 503, 505, 508, 509], "tabular": [51, 205, 299, 454], "tabl": [51, 175, 205, 207, 211, 229, 231, 239, 299, 423, 454, 459, 479, 489], "tri": [51, 299], "share": [51, 122, 299, 371, 505], "its": [51, 70, 80, 97, 98, 103, 117, 122, 148, 153, 157, 158, 165, 166, 168, 169, 170, 171, 172, 181, 203, 227, 243, 299, 307, 318, 328, 344, 345, 351, 365, 371, 397, 402, 405, 406, 414, 415, 417, 418, 419, 420, 421, 430, 452, 476, 493], "table_qa_tapas_base_finetuned_wtq": [51, 299], "table_json": [51, 299], "document_t": [51, 205, 299, 454], "stage": [51, 110, 175, 201, 204, 227, 231, 238, 299, 358, 423, 450, 453, 476, 481, 488, 500, 504, 505, 508], "json_data": [51, 299], "monei": [51, 205, 299, 454], "ag": [51, 94, 100, 106, 205, 299, 341, 347, 354, 454], "donald": [51, 205, 299, 454], "trump": [51, 205, 299, 454], "75": [51, 122, 170, 205, 299, 371, 419, 454], "elon": [51, 205, 299, 454], "musk": [51, 205, 299, 454], "55": [51, 138, 205, 245, 299, 387, 454, 495], "AS": [51, 63, 139, 299, 311, 388], "who": [51, 85, 87, 163, 185, 299, 333, 335, 412, 434, 504], "earn": [51, 299], "count": [51, 142, 171, 177, 230, 299, 391, 420, 425], "old": [51, 63, 243, 299, 311, 493], "xlm_roberta_base_qa_squad2": [52, 53, 300, 301], "xlm_roberta_base_mc": [52, 300], "xlm_roberta_base_sequence_classifier_imdb": [54, 302], "xlm_roberta_large_zero_shot_classifier_xnli_anli": [56, 304], "xlmroberta": [56, 304], "xlnet": [57, 58, 104, 117, 305, 306, 352, 365], "xlnet_base_sequence_classifier_imdb": [57, 305], "bullet": [59, 60, 61, 239, 307, 489], "cleanpostfixpattern": [59, 60, 307], "cleanprefixpattern": [59, 60, 307], "cleanermod": [59, 60, 307], "dash": [59, 60, 307], "extrawhitespac": [59, 60, 307], "ignorecas": [59, 60, 307], "setbullet": [59, 60, 307], "setcleanpostfixpattern": [59, 60, 307], "setcleanprefixpattern": [59, 60, 307], "setcleanermod": [59, 60, 307], "setdash": [59, 60, 307], "setextrawhitespac": [59, 60, 307], "setignorecas": [59, 60, 307], "setstrip": [59, 60, 307], "settrailingpunctu": [59, 60, 307], "strip": [59, 60, 307], "trailingpunctu": [59, 60, 307], "emailaddress": [59, 61, 308], "emaildatetimetzpattern": [59, 61, 308], "extractormod": [59, 61, 308], "imageurlpattern": [59, 61, 308], "ipaddressnamepattern": [59, 61, 308], "ipaddresspattern": [59, 61, 308], "mapiidpattern": [59, 61, 308], "setemailaddress": [59, 61, 308], "setemaildatetimetzpattern": [59, 61, 308], "setextractormod": [59, 61, 308], "setimageurlpattern": [59, 61, 308], "setindex": [59, 61, 308], "setipaddressnamepattern": [59, 61, 308], "setipaddresspattern": [59, 61, 308], "setmapiidpattern": [59, 61, 308], "settextpattern": [59, 61, 308], "setusphonenumberspattern": [59, 61, 308], "textpattern": [59, 61, 308], "usphonenumberspattern": [59, 61, 308], "handl": [60, 69, 70, 158, 166, 217, 240, 307, 316, 318, 406, 415, 466, 492], "postfix": [60, 307], "regex": [60, 85, 86, 119, 128, 130, 140, 177, 178, 179, 186, 187, 190, 229, 230, 307, 333, 334, 366, 369, 376, 379, 389, 425, 427, 428, 435, 436, 439, 479], "prefix": [60, 135, 156, 157, 183, 185, 187, 214, 227, 307, 384, 404, 405, 434, 436, 463, 476, 500], "clean": [60, 86, 140, 158, 173, 206, 307, 334, 389, 406, 422, 455, 505], "bytes_string_to_str": [60, 307], "clean_non_ascii_char": [60, 307], "clean_ordered_bullet": [60, 307], "clean_postfix": [60, 307], "clean_prefix": [60, 307], "remove_punctu": [60, 307], "replace_unicode_quot": [60, 307], "utf": [60, 86, 307, 334], "remov": [60, 86, 107, 108, 140, 154, 186, 195, 196, 197, 247, 307, 334, 355, 356, 389, 403, 435, 443, 444, 445], "extra": [60, 177, 178, 203, 307, 425, 427, 452, 504], "whitespac": [60, 85, 87, 186, 190, 193, 307, 333, 335, 435, 439, 441], "oper": [60, 98, 103, 177, 185, 307, 345, 351, 425, 434, 503], "lead": [60, 90, 95, 105, 110, 111, 115, 116, 163, 307, 337, 342, 353, 358, 359, 363, 364, 412], "trail": [60, 307], "punctuat": [60, 140, 150, 307, 389, 399], "specifi": [61, 67, 91, 138, 139, 142, 151, 156, 157, 175, 214, 241, 242, 308, 314, 336, 338, 387, 388, 391, 400, 404, 405, 463, 490, 491], "email": [61, 229, 231, 236, 239, 308, 479, 481, 489], "timestamp": [61, 238, 308, 488], "includ": [61, 70, 78, 86, 92, 93, 94, 99, 101, 111, 113, 115, 116, 117, 120, 122, 128, 135, 136, 137, 142, 158, 159, 161, 162, 168, 170, 171, 172, 173, 175, 177, 196, 200, 217, 227, 229, 230, 231, 238, 244, 249, 308, 318, 326, 334, 336, 339, 340, 341, 346, 348, 359, 361, 363, 364, 365, 368, 371, 376, 384, 385, 386, 391, 406, 407, 409, 411, 417, 419, 420, 421, 422, 423, 425, 444, 448, 466, 476, 479, 480, 481, 488, 494, 501, 503, 504, 505, 510], "zone": [61, 111, 308, 359], "email_d": 61, "email_address": 61, "ip_address": 61, "ip_address_nam": 61, "mapi_id": 61, "us_phone_numb": 61, "image_url": 61, "text_aft": 61, "text_befor": 61, "url": [61, 102, 229, 230, 231, 239, 308, 350, 479, 481, 489], "after": [61, 81, 83, 84, 99, 107, 108, 112, 113, 128, 129, 135, 142, 160, 166, 185, 206, 227, 249, 308, 329, 330, 332, 346, 355, 356, 361, 376, 378, 384, 391, 408, 415, 434, 455, 476, 503, 504], "befor": [61, 86, 114, 128, 129, 158, 173, 178, 186, 190, 249, 308, 334, 336, 362, 376, 378, 406, 422, 423, 427, 435, 439, 457, 475, 500], "ip": [61, 308], "mapi": [61, 308], "u": [61, 83, 84, 97, 98, 122, 129, 135, 136, 137, 201, 219, 233, 242, 308, 330, 332, 344, 345, 371, 378, 384, 385, 386, 450, 468, 483, 491, 502, 505, 510], "phone": [61, 122, 170, 308, 371, 419], "maxsegmentlength": [62, 63, 311], "setmaxsegmentlength": [62, 63, 311], "settextgenr": [62, 63, 311], "textgenr": [62, 63, 311], "corefer": [63, 311], "resolut": [63, 78, 311, 326], "spanbert": [63, 311], "identifi": [63, 114, 122, 127, 130, 142, 143, 172, 186, 187, 218, 227, 229, 311, 362, 371, 375, 379, 391, 392, 421, 435, 436, 467, 476, 479, 505], "given": [63, 67, 78, 79, 80, 85, 87, 102, 119, 122, 139, 156, 157, 158, 161, 168, 173, 177, 178, 179, 181, 200, 203, 213, 214, 225, 227, 247, 311, 314, 326, 327, 328, 333, 335, 350, 366, 371, 388, 404, 405, 406, 409, 417, 422, 425, 427, 428, 430, 448, 452, 462, 463, 475, 476, 497], "told": [63, 129, 311, 378], "mari": [63, 93, 108, 116, 151, 311, 340, 356, 364, 400], "he": [63, 85, 87, 97, 129, 185, 245, 311, 333, 335, 344, 378, 434, 495], "borrow": [63, 311], "book": [63, 86, 161, 177, 242, 311, 334, 409, 425, 491], "her": [63, 139, 311, 388], "link": [63, 233, 311, 483], "ontonot": [63, 311], "corefresolut": [63, 311], "spanbert_base_coref": [63, 311], "genr": [63, 311], "One": [63, 102, 122, 157, 185, 188, 311, 350, 371, 405, 434, 437], "bc": [63, 311], "broadcast": [63, 311], "convers": [63, 311], "bn": [63, 311], "nw": [63, 311], "wire": [63, 311], "pt": [63, 311], "pivot": [63, 111, 311, 359], "testament": [63, 311], "tc": [63, 311], "telephon": [63, 311], "wb": [63, 311], "mz": 63, "getcandidatelabel": [64, 66, 313], "croppct": [64, 67, 314], "dorescal": [64, 67, 78, 79, 207, 214, 314, 326, 327, 463], "rescalefactor": [64, 67, 78, 79, 207, 214, 314, 326, 327, 463], "setcroppct": [64, 67, 314], "setdorescal": [64, 67, 207, 214, 314, 463], "setrescalefactor": [64, 67, 207, 214, 314, 463], "ignoretokenid": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "setbeams": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 155, 158, 159, 163, 164, 167, 207, 214, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 412, 413, 416, 463], "setdosampl": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "setignoretokenid": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "setmaxoutputlength": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "setminoutputlength": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 155, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 463], "setnorepeatngrams": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "setrepetitionpenalti": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "settemperatur": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 141, 142, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 391, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "settopk": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "settopp": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 141, 142, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 207, 214, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 391, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "maxinputlength": [64, 69, 155, 165, 307, 316, 414], "imagegeneratemod": [64, 71, 319], "numofparallelimag": [64, 71, 319], "setimagegeneratemod": [64, 71, 319], "setnumofparallelimag": [64, 71, 319], "doimagesplit": [64, 77, 325], "imagetoken": [64, 77, 325], "maximages": [64, 77, 325], "numvisiontoken": [64, 77, 325], "paddingconst": [64, 77, 325], "patchsiz": [64, 77, 325], "setdoimagesplit": [64, 77, 325], "setimagetoken": [64, 77, 325], "setmaximages": [64, 77, 325], "setnumvisiontoken": [64, 77, 325], "setpaddingconst": [64, 77, 325], "setpatchs": [64, 77, 325], "setstoptokenid": [64, 77, 155, 159, 163, 325, 407, 412], "stoptokenid": [64, 77, 155, 159, 163, 325, 407, 412], "blip": [65, 312], "visual": [65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 227, 312, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 476], "vision": [65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 170, 312, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 419], "togeth": [65, 72, 75, 77, 102, 157, 312, 320, 323, 325, 350, 405], "visualqaclassifi": [65, 71, 72, 73, 74, 75, 76, 77, 312, 319, 320, 321, 322, 323, 324, 325], "blip_vqa_bas": [65, 312], "50": [65, 68, 69, 71, 72, 73, 74, 75, 76, 137, 138, 148, 158, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 245, 312, 315, 316, 319, 320, 321, 322, 323, 324, 386, 387, 397, 406, 408, 409, 411, 413, 415, 416, 417, 418, 419, 420, 421, 495], "image_df": [65, 68, 70, 71, 72, 73, 74, 75, 76, 312, 315, 318, 319, 320, 321, 322, 323, 324], "sparksessionfortest": [65, 71, 72, 73, 74, 75, 76, 312, 319, 320, 321, 322, 323, 324], "images_path": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325], "test_df": [65, 68, 70, 71, 72, 73, 74, 75, 76, 312, 315, 318, 319, 320, 321, 322, 323, 324], "withcolumn": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 157, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 405], "lit": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 157, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 405], "pictur": [65, 71, 72, 73, 75, 77, 312, 319, 320, 321, 323, 325], "setsiz": [65, 207, 214, 312, 463], "384": [65, 71, 77, 312, 319, 325], "cat_imag": [65, 71, 72, 73, 75, 76, 77, 312, 319, 320, 321, 323, 324, 325], "jpg": [65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 157, 312, 313, 314, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 405], "cat": [65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 157, 312, 313, 314, 319, 320, 321, 323, 324, 325, 326, 327, 328, 405], "abov": [65, 114, 120, 243, 362, 368, 493], "skip": [65, 99, 113, 120, 177, 346, 361, 368, 425], "blip_vqa_tf": [65, 312], "clip": [66, 157, 313, 405], "contrast": [66, 100, 102, 103, 106, 127, 173, 313, 347, 350, 351, 354, 375, 422], "neural": [66, 80, 92, 93, 97, 137, 151, 158, 165, 307, 313, 328, 339, 340, 344, 386, 400, 406, 414], "network": [66, 80, 92, 93, 101, 137, 151, 313, 328, 339, 340, 348, 386, 400], "abil": [66, 111, 122, 158, 160, 161, 166, 313, 359, 371, 406, 408, 409, 415], "hard": [66, 110, 180, 313, 358, 429], "make": [66, 67, 77, 78, 86, 91, 95, 103, 104, 115, 116, 122, 142, 143, 151, 154, 156, 157, 158, 163, 166, 172, 178, 249, 313, 314, 325, 326, 334, 338, 342, 351, 352, 363, 364, 371, 391, 392, 400, 403, 404, 405, 406, 412, 415, 421, 427, 506, 510], "veri": [66, 79, 80, 95, 101, 115, 116, 117, 154, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 201, 307, 313, 327, 328, 342, 348, 363, 364, 365, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 450, 503, 505, 508, 509], "gpt": [66, 107, 142, 158, 161, 170, 313, 355, 391, 406, 409, 419], "imageclassifi": [66, 67, 78, 79, 80, 313, 314, 326, 327, 328], "zero_shot_classifier_clip_vit_base_patch32": [66, 313], "huggingfac": [66, 67, 71, 73, 76, 77, 78, 79, 80, 95, 169, 170, 313, 314, 319, 321, 324, 325, 326, 327, 328, 342, 418, 419], "librari": [66, 67, 71, 73, 76, 77, 78, 79, 80, 91, 124, 156, 157, 193, 194, 195, 202, 206, 250, 313, 314, 319, 321, 324, 325, 326, 327, 328, 338, 373, 404, 405, 441, 442, 443, 451, 455, 509], "clipforzeroshotclassificationtestspec": [66, 313], "candidatelabel": [66, 207, 214, 313, 463], "imagedf": [66, 67, 69, 77, 78, 79, 80, 313, 314, 316, 325, 326, 327, 328], "dropinvalid": [66, 67, 78, 79, 80, 313, 314, 326, 327, 328], "photo": [66, 313], "bird": [66, 79, 157, 313, 327, 405], "dog": [66, 74, 79, 157, 313, 322, 327, 405], "hen": [66, 67, 78, 79, 80, 157, 313, 314, 326, 327, 328, 405], "hippo": [66, 67, 78, 80, 157, 313, 314, 326, 328, 405], "room": [66, 79, 157, 203, 313, 327, 405, 452], "tractor": [66, 67, 78, 79, 80, 157, 313, 314, 326, 327, 328, 405], "ostrich": [66, 67, 78, 79, 80, 157, 313, 314, 326, 327, 328, 405], "ox": [66, 67, 78, 79, 80, 157, 313, 314, 326, 327, 328, 405], "pipelinedf": [66, 67, 78, 79, 80, 313, 314, 326, 327, 328], "revers": [66, 67, 78, 79, 80, 157, 313, 314, 326, 327, 328, 405], "image_nam": [66, 67, 78, 79, 80, 157, 313, 314, 326, 327, 328, 405], "palac": [66, 67, 78, 79, 80, 157, 313, 314, 326, 327, 328, 405], "jpeg": [66, 67, 78, 79, 80, 157, 200, 313, 314, 326, 327, 328, 405, 448], "egyptian_cat": [66, 67, 78, 79, 80, 157, 313, 314, 326, 327, 328, 405], "hippopotamu": [66, 67, 78, 79, 80, 157, 313, 314, 326, 327, 328, 405], "junco": [66, 67, 78, 79, 80, 157, 313, 314, 326, 327, 328, 405], "bluetick": [66, 67, 74, 78, 79, 80, 157, 313, 314, 322, 326, 327, 328, 405], "chihuahua": [66, 67, 78, 79, 80, 157, 313, 314, 326, 327, 328, 405], "image_classifier_vit_base_patch16_224": [66, 80, 313, 328], "convnet": [67, 314], "convnext": [67, 314], "2020": [67, 122, 128, 129, 151, 314, 371, 376, 378, 400], "zhuang": [67, 314], "liu": [67, 78, 97, 107, 108, 314, 326, 344, 355, 356], "hanzi": [67, 314], "mao": [67, 314], "chao": [67, 314], "yuan": [67, 314], "wu": [67, 314], "christoph": [67, 314], "feichtenhof": [67, 314], "trevor": [67, 314], "darrel": [67, 314], "sain": [67, 314], "xie": [67, 314], "pure": [67, 77, 80, 165, 307, 314, 325, 328, 414], "inspir": [67, 154, 168, 178, 179, 223, 314, 403, 417, 427, 428, 472], "claim": [67, 314], "outperform": [67, 73, 94, 100, 103, 104, 106, 111, 112, 115, 116, 117, 122, 160, 161, 162, 163, 166, 169, 172, 314, 321, 341, 347, 351, 352, 354, 359, 360, 363, 364, 365, 371, 408, 409, 411, 412, 415, 418, 421], "convnextforimageclassificationtestspec": [67, 314], "roar": [67, 314], "began": [67, 314], "introduct": [67, 314], "vit": [67, 79, 80, 314, 327, 328], "quickli": [67, 142, 314, 391], "supersed": [67, 314], "vanilla": [67, 314], "hand": [67, 185, 314, 434], "face": [67, 111, 314, 359], "difficulti": [67, 314], "detect": [67, 68, 78, 112, 123, 124, 142, 143, 149, 150, 151, 229, 230, 231, 247, 314, 315, 326, 360, 372, 373, 391, 392, 398, 399, 400, 479], "semant": [67, 78, 94, 101, 102, 111, 112, 175, 190, 314, 326, 341, 348, 350, 359, 360, 423, 439], "hierarch": [67, 78, 99, 113, 314, 326, 346, 361], "swin": [67, 78, 314, 326], "reintroduc": [67, 314], "sever": [67, 157, 172, 229, 314, 405, 421, 479, 510], "practic": [67, 95, 158, 166, 173, 314, 342, 406, 415, 422], "viabl": [67, 314], "backbon": [67, 78, 117, 314, 326, 365], "demonstr": [67, 78, 98, 103, 111, 122, 161, 163, 164, 165, 171, 307, 314, 326, 345, 351, 359, 371, 409, 412, 413, 414, 420], "remark": [67, 163, 314, 412], "wide": [67, 86, 92, 93, 97, 98, 100, 115, 116, 158, 162, 172, 314, 334, 339, 340, 344, 345, 347, 363, 364, 406, 411, 421], "varieti": [67, 68, 103, 104, 115, 116, 159, 314, 315, 351, 352, 363, 364, 407, 509], "howev": [67, 90, 104, 109, 111, 117, 122, 140, 162, 164, 167, 234, 314, 337, 352, 357, 359, 365, 371, 389, 411, 413, 416, 484, 503], "effect": [67, 78, 79, 80, 103, 111, 142, 150, 158, 164, 166, 167, 173, 214, 314, 326, 327, 328, 351, 359, 391, 399, 406, 413, 415, 416, 422, 463], "hybrid": [67, 314], "still": [67, 161, 227, 314, 409, 476], "credit": [67, 314], "superior": [67, 163, 166, 171, 314, 412, 415, 420], "inher": [67, 314], "induct": [67, 98, 314, 345], "bias": [67, 98, 168, 169, 314, 345, 417, 418], "reexamin": [67, 314], "space": [67, 99, 111, 113, 114, 132, 157, 175, 206, 314, 346, 359, 361, 362, 381, 405, 423, 455], "achiev": [67, 94, 97, 100, 102, 103, 104, 107, 108, 115, 116, 117, 137, 158, 160, 161, 162, 165, 167, 170, 173, 201, 307, 314, 341, 344, 347, 350, 351, 352, 355, 356, 363, 364, 365, 386, 406, 408, 409, 411, 414, 416, 419, 422, 450, 508], "gradual": [67, 314], "modern": [67, 314], "resnet": [67, 314], "toward": [67, 157, 161, 167, 314, 405, 409, 416], "discov": [67, 314, 501], "compon": [67, 80, 111, 192, 200, 314, 328, 359, 393, 394, 440, 448, 458, 463, 474, 480, 508], "contribut": [67, 162, 169, 314, 411, 418], "along": [67, 94, 120, 200, 314, 341, 368, 448], "wai": [67, 83, 84, 119, 120, 168, 169, 170, 171, 204, 233, 314, 330, 332, 366, 368, 417, 418, 419, 420, 453, 483], "outcom": [67, 314], "explor": [67, 111, 158, 164, 169, 173, 314, 359, 406, 413, 418, 422], "famili": [67, 69, 86, 94, 100, 162, 163, 170, 314, 316, 334, 341, 347, 411, 412, 419], "dub": [67, 115, 116, 314, 363, 364], "construct": [67, 99, 113, 187, 233, 314, 336, 346, 361, 436, 483, 507], "compet": [67, 314], "favor": [67, 314], "term": [67, 122, 314, 371], "scalabl": [67, 110, 314, 358], "87": [67, 78, 314, 326], "imagenet": [67, 78, 80, 314, 326, 328], "coco": [67, 78, 314, 326], "ade20k": [67, 78, 314, 326], "while": [67, 70, 71, 77, 78, 80, 90, 98, 102, 114, 122, 142, 146, 157, 161, 164, 167, 227, 314, 318, 319, 325, 326, 328, 337, 345, 350, 362, 371, 391, 394, 405, 409, 413, 416, 476, 500, 505], "maintain": [67, 70, 77, 314, 318, 325], "simplic": [67, 158, 314, 406], "effici": [67, 77, 78, 97, 99, 110, 112, 113, 163, 165, 166, 172, 307, 314, 325, 326, 344, 346, 358, 360, 361, 412, 414, 415, 421, 503], "dores": [67, 78, 79, 80, 207, 214, 314, 326, 327, 328, 463], "resiz": [67, 78, 79, 80, 214, 314, 326, 327, 328, 463], "certain": [67, 78, 79, 80, 177, 214, 314, 326, 327, 328, 425, 463], "donorm": [67, 78, 79, 80, 207, 214, 314, 326, 327, 328, 463], "deviat": [67, 78, 79, 80, 214, 314, 326, 327, 328, 463], "featureextractortyp": [67, 78, 79, 80, 207, 214, 314, 326, 327, 328, 463], "architectur": [67, 70, 71, 77, 78, 79, 80, 90, 92, 93, 97, 107, 124, 137, 151, 158, 167, 168, 171, 173, 214, 314, 318, 319, 325, 326, 327, 328, 337, 339, 340, 344, 355, 373, 386, 400, 406, 416, 417, 420, 422, 463], "featur": [67, 69, 70, 76, 78, 79, 80, 83, 99, 105, 110, 111, 113, 122, 132, 136, 146, 154, 157, 166, 175, 214, 227, 231, 314, 316, 318, 324, 326, 327, 328, 330, 346, 353, 358, 359, 361, 371, 381, 385, 394, 405, 415, 423, 463, 476, 481, 507], "imagemean": [67, 78, 79, 80, 207, 214, 314, 326, 327, 328, 463], "imagestd": [67, 78, 79, 80, 207, 214, 314, 326, 327, 328, 463], "resampl": [67, 78, 79, 80, 207, 214, 314, 326, 327, 328, 463], "pil": [67, 78, 79, 80, 214, 314, 326, 327, 328, 463], "nearest": [67, 78, 79, 80, 175, 214, 314, 326, 327, 328, 423, 463], "bilinear": [67, 78, 79, 80, 214, 314, 326, 327, 328, 463], "bicub": [67, 78, 79, 80, 214, 314, 326, 327, 328, 463], "do_res": [67, 78, 79, 80, 214, 314, 326, 327, 328, 463], "tupl": [67, 78, 79, 80, 203, 214, 225, 314, 326, 327, 328, 452, 463, 475], "rescal": [67, 78, 79, 214, 314, 326, 327, 463], "factor": [67, 78, 79, 91, 115, 116, 117, 156, 157, 158, 173, 177, 214, 314, 326, 327, 338, 363, 364, 365, 404, 405, 406, 422, 425, 463], "percentag": [67, 114, 177, 190, 314, 362, 425, 439, 460], "crop": [67, 314], "tabbi": [67, 78, 314, 326], "river": [67, 78, 80, 314, 326, 328], "hors": [67, 78, 80, 314, 326, 328], "amphibiu": [67, 78, 80, 314, 326, 328], "snowbird": [67, 78, 80, 314, 326, 328], "struthio": [67, 78, 80, 314, 326, 328], "camelu": [67, 78, 80, 314, 326, 328], "thresher": [67, 314], "thrasher": [67, 314], "thresh": [67, 314], "image_classifier_convnext_tiny_224_loc": [67, 314], "determin": [67, 115, 203, 214, 230, 314, 336, 363, 452, 463], "smaller": [67, 87, 98, 99, 110, 113, 314, 335, 345, 346, 358, 361], "224": [67, 314], "256": [67, 157, 314, 405], "edg": [67, 98, 120, 160, 163, 314, 345, 368, 408, 412], "afterward": [67, 314], "boolean": [67, 128, 214, 314, 376, 463], "255": [67, 214, 314, 463], "florenc": [68, 315], "prompt": [68, 91, 142, 156, 157, 170, 203, 214, 315, 338, 391, 404, 405, 419, 452, 463], "caption": [68, 73, 79, 157, 315, 321, 327, 405], "ocr": [68, 315], "describ": [68, 69, 71, 76, 77, 83, 84, 106, 120, 122, 165, 307, 315, 316, 319, 324, 325, 330, 332, 354, 368, 371, 414], "florence2": [68, 315], "florence2_base_ft_int4": [68, 315], "200": [68, 85, 158, 167, 173, 315, 333, 406, 416, 422], "od": [68, 315], "use_openvino": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 92, 93, 100, 106, 107, 115, 159, 160, 162, 163, 164, 166, 167, 169, 170, 171, 172, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 339, 340, 347, 354, 355, 363, 407, 408, 411, 412, 413, 415, 416, 418, 419, 420, 421], "gram": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 94, 99, 100, 106, 113, 122, 132, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 341, 346, 347, 354, 361, 371, 381, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "cumul": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "gemma": [69, 316], "merger": [69, 70, 74, 316, 318, 322], "merg": [69, 70, 74, 120, 127, 131, 229, 230, 316, 318, 322, 368, 375, 380, 479, 480], "lightweight": [69, 77, 170, 316, 325, 419], "open": [69, 73, 77, 106, 110, 124, 159, 160, 162, 163, 164, 168, 169, 170, 171, 172, 187, 193, 194, 195, 202, 206, 316, 321, 325, 354, 358, 373, 407, 408, 411, 412, 413, 417, 418, 419, 420, 421, 436, 441, 442, 443, 451, 455, 501], "googl": [69, 90, 92, 93, 97, 99, 101, 107, 108, 112, 113, 122, 173, 231, 242, 316, 337, 339, 340, 344, 346, 348, 355, 356, 360, 361, 371, 422, 481, 491], "research": [69, 90, 92, 93, 97, 99, 113, 159, 165, 167, 168, 169, 173, 307, 316, 337, 339, 340, 344, 346, 361, 407, 414, 416, 417, 418, 422], "technologi": [69, 122, 316, 371], "gemini": [69, 316], "128k": [69, 170, 316, 419], "window": [69, 70, 78, 79, 99, 103, 112, 113, 122, 137, 166, 171, 177, 316, 318, 326, 327, 346, 351, 361, 371, 386, 415, 420, 425], "140": [69, 124, 316, 373], "multimod": [69, 70, 71, 73, 76, 77, 157, 160, 200, 316, 318, 319, 321, 324, 325, 405, 408, 448], "both": [69, 70, 92, 93, 100, 101, 106, 112, 120, 142, 158, 163, 166, 168, 170, 171, 316, 318, 339, 340, 347, 348, 354, 360, 368, 391, 406, 412, 415, 417, 419, 420, 504, 505], "optim": [69, 70, 73, 91, 94, 99, 107, 108, 110, 111, 113, 137, 139, 151, 156, 157, 159, 162, 163, 169, 170, 214, 316, 318, 321, 338, 341, 346, 355, 356, 358, 359, 361, 386, 388, 400, 404, 405, 407, 411, 412, 418, 419, 463], "deploy": [69, 70, 316, 318], "laptop": [69, 316], "desktop": [69, 86, 316, 334], "cloud": [69, 122, 316, 371], "visualqa": [69, 70, 77, 316, 318, 325], "gemma3_4b_it_int4": [69, 316], "9": [69, 97, 115, 116, 132, 143, 156, 160, 164, 170, 316, 344, 363, 364, 381, 392, 404, 408, 413, 419, 503, 508, 509], "testdf": [69, 77, 316, 325], "bo": [69, 156, 157, 214, 316, 404, 405, 463], "start_of_turn": [69, 316], "nyou": [69, 76, 87, 203, 316, 324, 335, 452], "assist": [69, 70, 72, 73, 75, 76, 159, 163, 172, 203, 219, 316, 318, 320, 321, 323, 324, 407, 412, 421, 452, 468], "start_of_imag": [69, 316], "end_of_turn": [69, 316], "http": [69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 94, 95, 97, 99, 101, 102, 106, 112, 113, 142, 143, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 190, 214, 229, 231, 239, 337, 341, 342, 344, 346, 348, 350, 354, 360, 361, 391, 392, 406, 408, 418, 419, 420, 439, 479, 481, 489, 501], "arxiv": [69, 70, 71, 72, 73, 74, 75, 76, 77, 103, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 351, 406], "pdf": [69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 229, 231, 236, 238, 239, 479, 481, 488, 489], "1909": [69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214], "05858": [69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214], "__": [69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 195, 196, 214, 334, 406, 443, 444], "ctrl": [69, 70, 71, 72, 73, 74, 75, 76, 77, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 316, 318, 319, 320, 321, 322, 323, 324, 325, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "condit": [69, 70, 71, 72, 73, 74, 75, 76, 77, 92, 93, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 214, 316, 318, 319, 320, 321, 322, 323, 324, 325, 339, 340, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 463], "control": [69, 70, 71, 72, 73, 74, 75, 76, 77, 142, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 214, 307, 316, 318, 319, 320, 321, 322, 323, 324, 325, 391, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 463], "internvl": [70, 318], "advanc": [70, 94, 124, 163, 166, 171, 172, 193, 203, 206, 318, 341, 373, 412, 415, 420, 421, 441, 452, 455], "mllm": [70, 318], "seri": [70, 160, 168, 171, 318, 408, 417, 420], "build": [70, 97, 98, 107, 108, 120, 122, 127, 161, 162, 164, 168, 169, 172, 227, 249, 318, 344, 345, 355, 356, 368, 371, 375, 409, 411, 413, 417, 418, 421, 476, 500], "core": [70, 111, 318, 359], "introduc": [70, 92, 93, 94, 98, 101, 102, 103, 104, 111, 158, 162, 163, 166, 170, 171, 172, 173, 318, 339, 340, 341, 345, 348, 350, 351, 352, 359, 406, 411, 412, 415, 419, 420, 421, 422], "signific": [70, 107, 108, 115, 116, 122, 125, 162, 171, 318, 355, 356, 363, 364, 371, 374, 411, 420], "enhanc": [70, 71, 97, 154, 158, 163, 166, 169, 318, 319, 344, 403, 406, 412, 415, 418], "strategi": [70, 91, 96, 105, 109, 110, 111, 126, 128, 130, 150, 156, 157, 177, 213, 214, 318, 338, 343, 353, 357, 358, 359, 376, 379, 399, 404, 405, 425, 462, 463], "int4": [70, 318], "quantiz": [70, 318], "internvl2_5_1b_int4": [70, 318], "larger": [70, 71, 73, 77, 79, 91, 94, 95, 98, 107, 108, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 175, 307, 318, 319, 321, 325, 327, 338, 341, 342, 345, 355, 356, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423], "im_start": [70, 76, 77, 318, 324, 325], "ndescrib": [70, 74, 318, 322], "im_end": [70, 76, 318, 324], "janu": [71, 319], "alongsid": [71, 73, 172, 231, 319, 321, 421], "novel": [71, 97, 104, 111, 117, 122, 158, 167, 319, 344, 352, 359, 365, 371, 406, 416], "autoregress": [71, 117, 319, 365], "unifi": [71, 158, 173, 229, 319, 406, 422, 479], "understand": [71, 92, 93, 98, 104, 115, 117, 122, 158, 163, 169, 170, 172, 173, 190, 319, 339, 340, 345, 352, 363, 365, 371, 406, 412, 418, 419, 421, 422, 439, 503], "decoupl": [71, 319], "separ": [71, 85, 87, 98, 107, 130, 132, 150, 151, 178, 187, 190, 196, 219, 230, 231, 241, 319, 333, 335, 345, 355, 379, 381, 399, 400, 427, 436, 439, 444, 468, 490, 502], "pathwai": [71, 319], "allevi": [71, 319], "conflict": [71, 319], "role": [71, 203, 319, 452], "surpass": [71, 78, 97, 106, 160, 166, 319, 326, 344, 354, 408, 415], "previou": [71, 78, 102, 104, 115, 116, 161, 163, 167, 171, 210, 319, 326, 350, 352, 363, 364, 409, 412, 416, 420, 504], "exce": [71, 107, 108, 142, 319, 355, 356, 391], "deepseek": [71, 319], "llm": [71, 73, 111, 162, 163, 169, 171, 172, 319, 321, 359, 411, 412, 418, 420, 421], "3b": [71, 172, 319, 421], "approxim": [71, 175, 319, 423], "500b": [71, 319], "emploi": [71, 87, 117, 319, 335, 365], "siglip": [71, 319], "downsampl": [71, 319], "16": [71, 90, 117, 138, 231, 243, 319, 337, 365, 387, 481, 493, 503], "janus_1_3b_int4": [71, 319], "suit": [71, 73, 76, 77, 94, 110, 319, 321, 324, 325, 341, 358], "image_placehold": [71, 319], "nassist": [71, 74, 77, 319, 322, 325], "unusu": [71, 72, 73, 75, 76, 77, 319, 320, 321, 323, 324, 325], "aspect": [71, 72, 73, 75, 77, 166, 319, 320, 321, 323, 325, 415], "presenc": [71, 72, 73, 75, 77, 156, 157, 214, 319, 320, 321, 323, 325, 404, 405, 463], "ly": [71, 72, 73, 75, 76, 77, 157, 319, 320, 321, 323, 324, 325, 405], "pink": [71, 72, 73, 75, 76, 77, 157, 319, 320, 321, 323, 324, 325, 405], "couch": [71, 72, 73, 75, 76, 77, 79, 319, 320, 321, 323, 324, 325, 327], "parallel": [71, 91, 150, 151, 201, 214, 241, 319, 338, 399, 400, 450, 463, 490, 508], "llava": [72, 320], "llava_1_5_7b_hf": [72, 320], "llama": [73, 91, 156, 157, 162, 163, 166, 169, 200, 203, 321, 338, 404, 405, 411, 412, 415, 418, 448, 452], "compris": [73, 142, 321, 391], "11b": [73, 321], "90b": [73, 321], "These": [73, 78, 90, 107, 108, 111, 117, 122, 136, 161, 163, 171, 203, 233, 321, 326, 337, 355, 356, 359, 365, 371, 385, 409, 412, 420, 452, 483, 502], "reason": [73, 85, 87, 142, 159, 166, 169, 170, 172, 321, 333, 335, 391, 407, 415, 418, 419, 421], "proprietari": [73, 110, 168, 171, 321, 358, 417, 420], "industri": [73, 86, 321, 334], "llama_3_2_11b_vision_instruct_int4": [73, 321], "begin_of_text": [73, 321], "start_header_id": [73, 163, 203, 321, 412, 452], "end_header_id": [73, 163, 203, 321, 412, 452], "eot_id": [73, 203, 321, 452], "paligemma": [74, 322], "paligemma_3b_pt_224_int4": [74, 322], "stand": [74, 79, 92, 93, 157, 166, 322, 327, 339, 340, 405, 415], "grassi": [74, 157, 322, 405], "field": [74, 79, 94, 99, 113, 114, 119, 131, 157, 168, 169, 170, 171, 247, 322, 327, 341, 346, 361, 362, 366, 380, 405, 417, 418, 419, 420, 497], "phi_3_vision_128k_instruct": [75, 323], "image_1": [75, 323], "nwhat": [75, 323], "phi3v": [75, 323], "qwen2": [76, 171, 324, 420], "integr": [76, 94, 117, 122, 141, 165, 227, 307, 324, 341, 365, 371, 390, 414, 476, 500, 502], "respons": [76, 142, 151, 162, 163, 169, 172, 324, 391, 400, 411, 412, 418, 421], "queri": [76, 94, 100, 106, 110, 162, 166, 171, 175, 324, 341, 347, 354, 358, 411, 415, 420, 423, 501], "qwen2_vl_2b_instruct_int4": [76, 324], "vision_start": [76, 324], "image_pad": [76, 324], "vision_end": [76, 324], "becaus": [76, 142, 153, 249, 308, 324, 391, 402, 423, 457, 475], "smolvlm": [77, 325], "compact": [77, 325], "arbitrari": [77, 158, 166, 325, 406, 415], "produc": [77, 325, 504], "stori": [77, 325], "ground": [77, 79, 325, 327], "Its": [77, 78, 84, 139, 158, 325, 326, 332, 388, 406], "suitabl": [77, 162, 169, 325, 411, 418], "devic": [77, 98, 325, 345], "strong": [77, 100, 115, 116, 168, 169, 170, 171, 325, 347, 363, 364, 417, 418, 419, 420], "smolvlm_instruct_int4": [77, 325], "49153": [77, 325], "81": [77, 243, 325, 493], "patch": [77, 80, 325, 328], "14": [77, 135, 148, 188, 201, 219, 233, 243, 325, 384, 397, 437, 450, 468, 483, 493], "pad": [77, 244, 325, 494], "constant": [77, 213, 215, 325, 462, 464], "end_of_utter": [77, 325], "openvino": [77, 92, 93, 100, 107, 115, 325, 339, 340, 347, 355, 363], "stop": [77, 122, 136, 141, 142, 156, 157, 159, 163, 173, 181, 214, 235, 247, 325, 371, 385, 391, 404, 405, 407, 412, 422, 430, 463, 485], "termin": [77, 325], "swinimageclassif": [78, 326], "shift": [78, 326], "ze": [78, 326], "yutong": [78, 326], "lin": [78, 326], "yue": [78, 326], "cao": [78, 326], "han": [78, 326], "hu": [78, 326], "yixuan": [78, 326], "zheng": [78, 326], "zhang": [78, 326], "stephen": [78, 326], "bain": [78, 326], "guo": [78, 326], "basic": [78, 122, 150, 203, 249, 326, 371, 399, 452, 503], "whose": [78, 170, 326, 336, 419], "scheme": [78, 107, 158, 326, 355, 406], "bring": [78, 164, 326, 413, 504], "greater": [78, 122, 142, 156, 157, 214, 326, 371, 391, 404, 405, 463], "attent": [78, 80, 91, 97, 103, 142, 156, 157, 162, 166, 171, 214, 326, 328, 338, 344, 351, 391, 404, 405, 411, 415, 420, 463], "non": [78, 160, 164, 169, 187, 190, 326, 408, 413, 418, 436, 439], "overlap": [78, 85, 87, 127, 131, 326, 333, 335, 375, 380], "cross": [78, 115, 116, 138, 326, 363, 364, 387], "connect": [78, 326], "image_classifier_swin_base_patch4_window7_224": [78, 326], "swinforimageclassificationtest": [78, 326], "present": [78, 90, 100, 101, 103, 107, 108, 112, 115, 116, 120, 142, 146, 151, 158, 165, 175, 307, 326, 337, 347, 348, 351, 355, 356, 360, 363, 364, 368, 391, 394, 400, 406, 414, 423], "call": [78, 92, 93, 98, 100, 111, 122, 142, 161, 162, 169, 170, 203, 225, 234, 241, 326, 336, 339, 340, 345, 347, 359, 371, 391, 409, 411, 418, 419, 452, 475, 484, 490, 504, 510], "purpos": [78, 98, 100, 151, 326, 345, 347, 400], "adapt": [78, 171, 214, 326, 420, 463], "aris": [78, 326], "domain": [78, 102, 111, 122, 161, 239, 326, 350, 359, 371, 409, 489], "variat": [78, 326], "high": [78, 91, 110, 111, 112, 115, 116, 156, 157, 158, 164, 165, 167, 170, 172, 214, 307, 326, 338, 358, 359, 360, 363, 364, 404, 405, 406, 413, 414, 416, 419, 421, 463], "variou": [78, 111, 117, 166, 169, 172, 228, 229, 230, 231, 239, 248, 326, 359, 365, 415, 418, 421, 478, 479, 480, 481, 489, 498], "complex": [78, 101, 111, 112, 122, 166, 171, 178, 179, 326, 348, 359, 360, 371, 415, 420, 427, 428], "respect": [78, 97, 114, 136, 137, 170, 243, 326, 336, 344, 362, 385, 386, 419, 493], "broad": [78, 85, 161, 326, 333, 409], "rang": [78, 92, 93, 97, 98, 100, 102, 115, 116, 156, 157, 158, 162, 163, 169, 214, 326, 339, 340, 344, 345, 347, 350, 363, 364, 404, 405, 406, 411, 412, 418, 463], "1k": [78, 326], "dens": [78, 92, 93, 94, 164, 170, 175, 326, 339, 340, 341, 413, 419, 423], "box": [78, 164, 167, 326, 413, 416], "ap": [78, 326], "51": [78, 194, 202, 243, 326, 442, 451, 493], "53": [78, 127, 131, 326, 375, 380], "miou": [78, 326], "val": [78, 326], "margin": [78, 104, 117, 326, 352, 365], "prove": [78, 326], "benefici": [78, 122, 326, 371], "mlp": [78, 326], "visionencoderdecod": [79, 327], "auto": [79, 158, 182, 327, 406, 431], "beit": [79, 327], "deit": [79, 327], "gpt2": [79, 161, 327, 409], "image_captioning_vit_gpt2": [79, 327], "visionencoderdecodertestspec": [79, 327], "nreturnsequ": [79, 207, 214, 327, 463], "computation": [79, 101, 107, 108, 117, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 307, 327, 348, 355, 356, 365, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422], "expens": [79, 101, 107, 108, 117, 153, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 178, 307, 327, 348, 355, 356, 365, 402, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 427], "especi": [79, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 307, 327, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422], "recommend": [79, 91, 101, 117, 142, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 249, 307, 327, 338, 348, 365, 391, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422], "imagecapt": [79, 327], "fill": [79, 158, 247, 327, 406, 497], "furnitur": [79, 327], "lai": [79, 167, 327, 416], "anoth": [79, 157, 214, 327, 405, 463, 505], "brown": [79, 157, 229, 327, 405, 479], "bear": [79, 229, 327, 479], "bodi": [79, 157, 327, 405], "water": [79, 157, 327, 405], "flock": [79, 327], "chicken": [79, 157, 327, 405], "lush": [79, 327], "green": [79, 157, 327, 405], "small": [79, 80, 86, 90, 91, 95, 98, 99, 106, 113, 125, 148, 156, 157, 167, 169, 170, 172, 201, 214, 243, 327, 328, 334, 337, 338, 342, 345, 346, 354, 361, 374, 397, 404, 405, 416, 418, 419, 421, 450, 463, 493, 508], "wet": [79, 327], "wooden": [79, 327], "floor": [79, 157, 327, 405], "wear": [79, 157, 327, 405], "blue": [79, 327], "sweater": [79, 157, 327, 405], "man": [79, 91, 157, 161, 162, 327, 338, 405, 409, 411], "cow": [79, 327], "altern": [80, 122, 142, 153, 177, 178, 179, 201, 205, 328, 371, 391, 402, 425, 427, 428, 450, 454, 504, 509], "vitimageclassificationtestspec": [80, 328], "becom": [80, 90, 98, 122, 168, 328, 337, 345, 371, 417], "facto": [80, 122, 328, 371], "remain": [80, 86, 90, 98, 122, 247, 328, 334, 337, 345, 371, 497], "conjunct": [80, 328], "overal": [80, 114, 117, 160, 170, 328, 362, 365, 408, 419], "structur": [80, 139, 187, 206, 229, 230, 231, 328, 388, 455, 479, 503], "relianc": [80, 111, 328, 359], "cnn": [80, 124, 137, 151, 328, 373, 386, 400], "necessari": [80, 98, 328, 336, 345, 500, 507], "directli": [80, 164, 167, 201, 227, 234, 328, 413, 416, 450, 476, 484, 500], "mid": [80, 328], "cifar": [80, 328], "vtab": [80, 328], "etc": [80, 96, 100, 102, 104, 160, 171, 195, 206, 231, 328, 343, 347, 350, 352, 408, 420, 443, 455, 481, 500], "attain": [80, 328], "excel": [80, 117, 166, 229, 231, 239, 328, 365, 415, 479, 481, 489], "substanti": [80, 92, 93, 328, 339, 340], "fewer": [80, 90, 102, 175, 328, 337, 350, 423], "worth": [80, 328], "16x16": [80, 328], "egyptian": [80, 328], "date_chunk": [81, 329], "omicron": [81, 329], "covid": [81, 329], "world": [81, 85, 86, 87, 105, 110, 111, 166, 168, 169, 170, 171, 184, 227, 245, 329, 333, 334, 335, 353, 358, 359, 415, 417, 418, 419, 420, 432, 476, 495, 500], "health": [81, 329], "organ": [81, 122, 165, 203, 307, 329, 371, 414, 452], "nov": [81, 128, 129, 243, 329, 376, 378, 493], "26": [81, 135, 201, 203, 219, 233, 245, 329, 384, 450, 452, 468, 483, 495], "2021": [81, 128, 129, 329, 376, 378], "118": [81, 205, 329, 454], "121": [81, 329], "01": [81, 128, 129, 130, 329, 376, 378, 379], "dependencytreebank": [82, 83, 330], "numberofiter": [82, 83, 84, 330, 332], "setconllu": [82, 83, 84, 330, 332], "setdependencytreebank": [82, 83, 330], "setnumberofiter": [82, 83, 84, 330, 332], "conll2009": [82, 84, 332], "setconll2009": [82, 84, 332], "conllformat": [82, 84, 332], "traindependencypip": [82, 84, 332], "trainopt": [82, 84, 332], "trainparamet": [82, 84, 332], "dependencypars": [83, 84, 120, 330, 332, 368], "unlabel": [83, 92, 93, 94, 158, 161, 173, 330, 339, 340, 341, 406, 409, 422], "grammat": [83, 84, 330, 332], "inform": [83, 84, 102, 104, 114, 115, 122, 128, 135, 156, 157, 158, 177, 194, 202, 239, 244, 250, 330, 332, 350, 352, 362, 363, 371, 376, 384, 404, 405, 406, 425, 442, 451, 489, 494, 500, 501, 502, 503, 504, 510], "relationship": [83, 84, 112, 120, 330, 332, 360, 368], "tell": [83, 84, 122, 219, 330, 332, 371, 468], "verb": [83, 84, 242, 330, 332, 491], "modifi": [83, 84, 107, 108, 135, 142, 151, 330, 332, 355, 356, 384, 391, 400], "particular": [83, 84, 122, 234, 330, 332, 371, 484, 504], "treebank": [83, 330], "penn": [83, 330], "converg": [83, 84, 148, 190, 330, 332, 397, 439], "better": [83, 84, 90, 97, 104, 117, 122, 136, 148, 150, 151, 154, 158, 160, 162, 190, 330, 332, 337, 344, 352, 365, 371, 385, 397, 399, 400, 403, 406, 408, 411, 439], "postagg": [83, 84, 120, 136, 148, 330, 332, 368, 385, 397], "dependency_treebank": [83, 330], "emptydataset": [83, 84, 330, 332], "tree": [83, 120, 330, 368], "bank": [83, 330], "dep": [83, 330], "dependency_conllu": [83, 120, 330, 368], "typeddependencyparsermdoel": [83, 330], "union": [83, 84, 330, 332], "worker": [83, 84, 330, 332], "turner": [83, 84, 330, 332], "newal": [83, 84, 330, 332], "sai": [83, 84, 122, 187, 330, 332, 371, 436], "disappoint": [83, 84, 330, 332], "talk": [83, 84, 142, 330, 332, 391], "stricken": [83, 84, 330, 332], "firm": [83, 84, 330, 332], "feder": [83, 84, 330, 332], "mogul": [83, 84, 330, 332], "typeddependencypars": [84, 120, 332, 368], "beforehand": [84, 332], "2009": [84, 332], "dependency_typ": [84, 120, 332, 368], "train_smal": [84, 332], "txt": [84, 85, 87, 99, 113, 114, 125, 127, 130, 131, 148, 151, 153, 177, 178, 179, 184, 187, 229, 236, 239, 243, 244, 332, 333, 335, 346, 361, 362, 374, 375, 379, 380, 397, 400, 402, 425, 427, 428, 432, 436, 479, 489, 493, 494, 510], "typdep": [84, 332], "dependency_typed_conllu": [84, 120, 332, 368], "amod": [84, 332], "flat": [84, 120, 197, 332, 368, 445], "nsubj": [84, 120, 197, 242, 332, 368, 445, 491], "parataxi": [84, 332], "pipe": 84, "roughli": [85, 333], "subtext": [85, 333], "perfect": [85, 87, 333, 335], "observ": [85, 87, 112, 333, 335, 360], "seen": [85, 87, 158, 333, 335, 406], "addition": [85, 87, 117, 137, 148, 166, 171, 194, 202, 233, 333, 335, 365, 386, 397, 415, 420, 442, 451, 483], "trim": [85, 87, 203, 333, 335, 452], "individu": [85, 87, 122, 177, 230, 333, 335, 336, 371, 425, 480], "documentcharactertextsplittertest": [85, 333], "decreas": [85, 142, 175, 333, 391, 423], "prioriti": [85, 178, 187, 333, 427, 436], "textdf": [85, 87, 333, 335], "sherlockholm": [85, 87, 99, 113, 177, 333, 335, 346, 361, 425, 510], "wholetext": [85, 87, 333, 335], "textsplitt": [85, 87, 333, 335], "20000": [85, 333], "80": [85, 87, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 130, 195, 206, 333, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 379, 443, 455], "project": [85, 87, 122, 156, 165, 168, 172, 175, 227, 250, 307, 333, 335, 371, 404, 414, 417, 421, 423, 476, 501], "gutenberg": [85, 87, 333, 335], "adventur": [85, 87, 333, 335], "sherlock": [85, 87, 177, 333, 335, 425], "holm": [85, 87, 177, 333, 335, 425], "arthur": [85, 87, 333, 335], "conan": [85, 87, 333, 335], "doyl": [85, 87, 333, 335], "19994": [85, 333], "And": [85, 333], "mademoisel": [85, 333], "ask": [85, 159, 239, 333, 407, 489], "brioni": [85, 333], "lodg": [85, 333], "serpentin": [85, 333], "aven": [85, 333], "19798": [85, 333], "39395": [85, 333], "19597": [85, 333], "did": [85, 122, 166, 171, 333, 371, 415, 420], "woman": [85, 333], "think": [85, 333], "39371": [85, 333], "59242": [85, 333], "19871": [85, 333], "But": [85, 87, 94, 100, 106, 333, 335, 341, 347, 354], "said": [85, 87, 333, 335], "million": [85, 106, 122, 138, 161, 333, 354, 371, 387, 409], "red": [85, 157, 333, 405], "men": [85, 333], "nwould": [85, 333], "59166": [85, 333], "77833": [85, 333], "18667": [85, 333], "friend": [85, 333], "enthusiast": [85, 333], "musician": [85, 333], "being": [85, 98, 137, 142, 146, 158, 162, 165, 170, 173, 175, 307, 333, 345, 386, 391, 394, 406, 411, 414, 419, 422, 423], "himself": [85, 333], "nveri": [85, 333], "capab": [85, 333], "77835": [85, 333], "97769": [85, 333], "19934": [85, 333], "yet": [85, 234, 333, 484], "convinc": [85, 333], "ncome": [85, 333], "li": [85, 170, 333, 419], "97771": [85, 333], "117248": [85, 333], "19477": [85, 333], "she": [85, 185, 333, 434], "had": [85, 122, 142, 333, 371, 391], "slate": [85, 333], "colour": [85, 333], "brim": [85, 333], "straw": [85, 333], "hat": [85, 333], "nfeather": [85, 333], "117250": [85, 333], "137242": [85, 333], "19992": [85, 333], "That": [85, 122, 185, 227, 333, 371, 434, 476, 500, 505], "littl": [85, 151, 333, 400, 509], "paradox": [85, 333], "profoundli": [85, 333], "singulari": [85, 333], "137244": [85, 333], "157171": [85, 333], "19927": [85, 333], "raw": [86, 157, 161, 185, 187, 190, 200, 229, 231, 334, 405, 409, 434, 436, 439, 448, 479, 503, 505], "scrape": [86, 334], "page": [86, 161, 168, 229, 231, 233, 238, 250, 334, 409, 417, 479, 483, 488, 499, 507, 509], "xml": [86, 334], "dirti": [86, 140, 334, 389], "want": [86, 87, 119, 138, 234, 334, 335, 366, 387, 484, 505], "pretty_al": [86, 334], "normalizeddocu": [86, 334], "div": [86, 334], "theworldsgreatest": [86, 334], "right": [86, 92, 93, 158, 190, 203, 334, 339, 340, 406, 439, 452], "hide": [86, 334], "toptext": [86, 334], "style": [86, 124, 173, 334, 373, 422], "font": [86, 229, 231, 334, 479], "sego": [86, 334], "ui": [86, 334], "arial": [86, 334], "san": [86, 122, 334, 371], "serif": [86, 334], "largest": [86, 122, 161, 334, 371, 409], "develop": [86, 122, 162, 163, 165, 167, 168, 169, 171, 172, 220, 307, 334, 371, 411, 412, 414, 416, 417, 418, 420, 421, 473], "site": [86, 122, 160, 334, 371, 408], "h1": [86, 334], "300": [86, 334], "160": [86, 334], "lorem": [86, 127, 131, 334, 375, 380], "ipsum": [86, 127, 131, 334, 375, 380], "typeset": [86, 334], "been": [86, 95, 161, 162, 163, 169, 188, 206, 234, 334, 342, 409, 411, 412, 418, 437, 455, 484], "1500": [86, 334], "unknown": [86, 87, 124, 334, 335, 373], "printer": [86, 334], "took": [86, 167, 334, 416], "gallei": [86, 334], "scrambl": [86, 334], "specimen": [86, 334], "surviv": [86, 334], "five": [86, 138, 157, 334, 387, 405], "centuri": [86, 166, 190, 334, 415, 439], "leap": [86, 334], "electron": [86, 334], "essenti": [86, 161, 168, 334, 409, 417], "unchang": [86, 334], "popularis": [86, 334], "1960": [86, 334], "letraset": [86, 334], "sheet": [86, 250, 334], "passag": [86, 94, 100, 106, 334, 341, 347, 354], "recent": [86, 92, 93, 97, 107, 108, 122, 142, 158, 334, 339, 340, 344, 355, 356, 371, 391, 406], "publish": [86, 107, 108, 334, 355, 356], "softwar": [86, 172, 334, 421], "aldu": [86, 334], "pagemak": [86, 334], "measur": [87, 98, 107, 108, 158, 170, 227, 335, 345, 355, 356, 406, 419, 476], "futur": [87, 151, 158, 173, 335, 400, 406, 422], "techniqu": [87, 90, 97, 158, 161, 163, 167, 171, 173, 175, 335, 337, 344, 406, 409, 412, 416, 420, 422, 423], "documenttokensplittertest": [87, 335], "3018": [87, 335], "crime": [87, 335], "occupi": [87, 335], "nimmens": [87, 335], "faculti": [87, 335], "extraordinari": [87, 335], "power": [87, 92, 93, 158, 168, 173, 239, 335, 339, 340, 406, 417, 422, 489], "2950": [87, 335], "5707": [87, 335], "2757": [87, 335], "chang": [87, 102, 214, 223, 335, 336, 350, 463, 472], "cloth": [87, 335], "imagin": [87, 335], "ndeduc": [87, 335], "As": [87, 90, 92, 93, 94, 98, 100, 106, 122, 142, 168, 335, 337, 339, 340, 341, 345, 347, 354, 371, 391, 417], "5659": [87, 335], "8483": [87, 335], "2824": [87, 335], "quarter": [87, 335], "receiv": [87, 243, 335, 493, 510], "Be": [87, 335], "chamber": [87, 335], "nnot": [87, 335], "8427": [87, 335], "11241": [87, 335], "2814": [87, 335], "piti": [87, 335], "nto": [87, 335], "miss": [87, 128, 129, 193, 335, 376, 378, 441], "client": [87, 335], "never": [87, 154, 335, 403, 504], "mind": [87, 167, 335, 416], "him": [87, 129, 335, 378], "11188": [87, 335], "13970": [87, 335], "2782": [87, 335], "person": [87, 119, 242, 335, 366, 491], "me": [87, 129, 163, 335, 378, 412], "wish": [87, 335], "agent": [87, 171, 335, 420], "conf": [87, 335], "13918": [87, 335], "16898": [87, 335], "2980": [87, 335], "letter": [87, 140, 161, 162, 177, 243, 335, 389, 409, 411, 425, 493, 510], "secret": [87, 335], "marriag": [87, 335], "16836": [87, 335], "19744": [87, 335], "2908": [87, 335], "seven": [87, 335], "hundr": [87, 115, 116, 335, 363, 364], "nnote": [87, 335], "nholm": [87, 335], "scribbl": [87, 335], "receipt": [87, 335], "shee": [87, 335], "19683": [87, 335], "22551": [87, 335], "2868": [87, 335], "defragmentationthreshold": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "flashattent": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "getmetadata": [89, 91, 207, 214, 338, 463], "gpusplitmod": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "grpattnn": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "grpattnw": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "maingpu": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "nbatch": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "nchunk": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "nctx": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "ngpulay": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "nsequenc": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "nthread": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "nthreadsbatch": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "nubatch": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "nokvoffload": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "numastrategi": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "poolingtyp": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "ropefreqbas": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "ropefreqscal": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "ropescalingtyp": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "setdefragmentationthreshold": [89, 91, 207, 214, 338, 463], "setflashattent": [89, 91, 207, 214, 338, 463], "setgpusplitmod": [89, 91, 207, 214, 338, 463], "setgrpattnn": [89, 91, 207, 214, 338, 463], "setgrpattnw": [89, 91, 207, 214, 338, 463], "setmaingpu": [89, 91, 207, 214, 338, 463], "setnbatch": [89, 91, 207, 214, 338, 463], "setnchunk": [89, 91, 207, 214, 338, 463], "setnctx": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "setngpulay": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "setnparallel": [89, 91, 207, 214, 338, 463], "setnsequ": [89, 91, 207, 214, 338, 463], "setnthread": [89, 91, 207, 214, 338, 463], "setnthreadsbatch": [89, 91, 207, 214, 338, 463], "setnubatch": [89, 91, 207, 214, 338, 463], "setnokvoffload": [89, 91, 207, 214, 338, 463], "setnumastrategi": [89, 91, 207, 214, 338, 463], "setpoolingtyp": [89, 91, 207, 214, 338, 463], "setropefreqbas": [89, 91, 207, 214, 338, 463], "setropefreqscal": [89, 91, 207, 214, 338, 463], "setropescalingtyp": [89, 91, 207, 214, 338, 463], "settensorsplit": [89, 91, 207, 214, 338, 463], "setusemlock": [89, 91, 207, 214, 338, 463], "setusemmap": [89, 91, 207, 214, 338, 463], "setyarnattnfactor": [89, 91, 207, 214, 338, 463], "setyarnbetafast": [89, 91, 207, 214, 338, 463], "setyarnbetaslow": [89, 91, 207, 214, 338, 463], "setyarnextfactor": [89, 91, 207, 214, 338, 463], "setyarnorigctx": [89, 91, 207, 214, 338, 463], "tensorsplit": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "usemlock": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "usemmap": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "yarnattnfactor": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "yarnbetafast": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "yarnbetaslow": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "yarnextfactor": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "yarnorigctx": [89, 91, 156, 157, 207, 214, 338, 404, 405, 463], "islong": [89, 93, 340], "setislong": [89, 93, 340], "poolingstrategi": [89, 96, 105, 109, 110, 111, 343, 353, 357, 358, 359], "setpoolingstrategi": [89, 96, 105, 109, 110, 111, 343, 353, 357, 358, 359], "setskipoov": [89, 96, 343], "skipoov": [89, 96, 343], "maxit": [89, 99, 113, 346, 361], "mincount": [89, 99, 113, 176, 177, 346, 361, 425], "numpartit": [89, 99, 113, 346, 361], "setmaxit": [89, 99, 113, 346, 361], "setmincount": [89, 99, 113, 176, 177, 346, 361, 425], "setnumpartit": [89, 99, 113, 346, 361], "setse": [89, 99, 113, 207, 214, 346, 361, 463], "setsteps": [89, 99, 113, 346, 361], "setvectors": [89, 99, 113, 346, 361], "setwindows": [89, 99, 113, 121, 122, 346, 361, 371], "stepsiz": [89, 99, 113, 346, 361], "vectors": [89, 99, 113, 346, 361], "windows": [89, 99, 113, 121, 122, 346, 361, 371], "getvector": [89, 99, 113, 346, 361], "poolinglay": [89, 101, 348], "setpoolinglay": [89, 101, 348], "setinstruct": [89, 102, 350], "loadsp": [89, 112, 360], "setloadsp": [89, 112, 360], "readcaches": [89, 114, 362], "setreadcaches": [89, 114, 362], "setwritebuffers": [89, 114, 362], "writebuffers": [89, 114, 362], "databas": [89, 114, 118, 119, 126, 127, 217, 362, 366, 375, 466], "loadstorag": [89, 114, 118, 119, 126, 127, 207, 217, 362, 366, 375, 466], "overallcoverag": [89, 114, 362], "withcoveragecolumn": [89, 114, 362], "lite": [90, 337], "toyota": [90, 337], "technolog": [90, 337], "institut": [90, 337], "chicago": [90, 337], "offici": [90, 122, 135, 136, 137, 201, 219, 233, 337, 371, 384, 385, 386, 450, 468, 483, 501], "tf": [90, 112, 337, 360], "wrapper": [90, 337, 472], "port": [90, 337], "albert_base_uncas": [90, 337], "albert_bas": [90, 337], "768": [90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 337, 339, 340, 341, 342, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 358, 359, 363, 364, 365], "emb": [90, 106, 110, 337, 354, 358], "dim": [90, 91, 156, 157, 214, 337, 338, 404, 405, 463], "12m": [90, 337], "albert_large_uncas": [90, 337], "albert_larg": [90, 337], "1024": [90, 101, 103, 117, 337, 348, 351, 365], "24": [90, 117, 127, 131, 135, 177, 201, 219, 233, 337, 365, 375, 380, 384, 425, 450, 468, 483, 503], "18m": [90, 337], "albert_xlarge_uncas": [90, 337], "albert_xlarg": [90, 337], "2048": [90, 337], "60m": [90, 337], "albert_xxlarge_uncas": [90, 337], "albert_xxlarg": [90, 337], "235m": [90, 337], "sentencepiec": [90, 97, 112, 337, 344, 360], "everi": [90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 137, 154, 165, 177, 194, 202, 204, 214, 307, 337, 339, 340, 341, 342, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 358, 359, 363, 364, 365, 386, 403, 414, 425, 442, 451, 453, 505], "dimens": [90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 207, 214, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 463], "repeat": [90, 142, 156, 157, 214, 337, 391, 404, 405, 463], "footprint": [90, 337], "cost": [90, 166, 177, 178, 337, 415, 425, 427], "FOR": [90, 337], "tfhub": [90, 101, 112, 337, 348, 360], "q": [90, 337], "increas": [90, 91, 94, 100, 106, 114, 122, 142, 156, 157, 158, 161, 164, 175, 178, 179, 214, 337, 338, 341, 347, 354, 362, 371, 391, 404, 405, 406, 409, 413, 423, 427, 463], "downstream": [90, 95, 97, 101, 102, 103, 117, 158, 161, 171, 173, 337, 342, 344, 348, 350, 351, 365, 406, 409, 420, 422], "some": [90, 91, 93, 115, 122, 137, 151, 156, 157, 160, 161, 163, 170, 203, 204, 214, 227, 245, 337, 338, 340, 363, 371, 386, 400, 404, 405, 408, 409, 412, 419, 452, 453, 463, 476, 495, 503, 504, 508, 509], "point": [90, 92, 93, 150, 151, 194, 202, 239, 241, 337, 339, 340, 399, 400, 442, 451, 489, 490], "harder": [90, 337], "tpu": [90, 337], "consumpt": [90, 112, 114, 337, 360, 362], "speed": [90, 136, 160, 165, 166, 307, 337, 385, 408, 414, 415], "devlin": [90, 107, 108, 337, 355, 356], "et": [90, 107, 108, 124, 337, 355, 356, 373], "al": [90, 107, 108, 337, 355, 356], "2019": [90, 95, 97, 107, 108, 115, 116, 158, 337, 342, 344, 355, 356, 363, 364, 406], "comprehens": [90, 94, 111, 158, 160, 161, 163, 166, 171, 172, 337, 341, 359, 406, 408, 409, 412, 415, 420, 421], "empir": [90, 92, 93, 115, 116, 117, 337, 339, 340, 363, 364, 365], "evid": [90, 337], "focus": [90, 110, 122, 142, 157, 171, 172, 337, 358, 371, 391, 405, 420, 421], "inter": [90, 337], "coher": [90, 159, 161, 230, 337, 407, 409], "establish": [90, 337], "glue": [90, 92, 93, 98, 104, 107, 108, 115, 116, 158, 337, 339, 340, 345, 352, 355, 356, 363, 364, 406], "race": [90, 97, 107, 108, 337, 344, 355, 356], "finished_embed": [90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365], "setoutputasvector": [90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 191, 195, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 443], "setcleanannot": [90, 97, 98, 101, 103, 107, 109, 112, 114, 115, 117, 191, 195, 196, 197, 337, 344, 345, 348, 351, 355, 357, 360, 362, 363, 365, 443, 444, 445], "1342473030090332": [90, 97, 337, 344], "3855540752410889": [90, 97, 337, 344], "9818322062492371": [90, 97, 337, 344], "784737348556518": [90, 97, 337, 344], "847029983997345": [90, 97, 337, 344], "047153353691101": [90, 97, 337, 344], "1520637571811676": [90, 97, 337, 344], "6245765686035156": [90, 97, 337, 344], "009860038757324219": [90, 97, 337, 344], "13450059294700623": [90, 97, 337, 344], "707749128341675": [90, 97, 337, 344], "2916892766952": [90, 97, 337, 344], "04192575812339783": [90, 97, 337, 344], "5764210224151611": [90, 97, 337, 344], "3196685314178467": [90, 97, 337, 344], "527840495109": [90, 97, 337, 344], "15583214163780212": [90, 97, 337, 344], "1614152491092682": [90, 97, 337, 344], "28423872590065": [90, 97, 337, 344], "135491415858268": [90, 97, 337, 344], "cpp": [91, 156, 157, 200, 203, 338, 404, 405, 448, 452], "cl": [91, 94, 105, 110, 111, 214, 338, 341, 353, 358, 359, 463], "nomic_embed_text_v1": [91, 338], "q8_0": [91, 338], "gguf": [91, 338], "autoggufembeddingstest": [91, 338], "notebook": [91, 156, 157, 172, 175, 203, 227, 249, 338, 404, 405, 421, 423, 452, 476, 500], "thread": [91, 156, 157, 214, 338, 404, 405, 463, 476], "logic": [91, 156, 157, 169, 170, 214, 338, 404, 405, 418, 419, 463], "bla": [91, 156, 157, 214, 338, 404, 405, 463], "physic": [91, 156, 157, 214, 338, 404, 405, 463], "maxim": [91, 117, 156, 157, 177, 214, 338, 365, 404, 405, 425, 463], "store": [91, 120, 156, 157, 205, 214, 231, 233, 238, 245, 338, 368, 393, 394, 404, 405, 454, 458, 463, 474, 480, 481, 483, 488, 495, 501], "vram": [91, 156, 157, 214, 338, 404, 405, 463], "across": [91, 101, 156, 157, 161, 162, 163, 166, 171, 175, 214, 338, 348, 404, 405, 409, 411, 412, 415, 420, 423, 463], "main": [91, 119, 156, 157, 175, 187, 214, 250, 338, 366, 404, 405, 423, 436, 463, 503, 507, 510], "scratch": [91, 156, 157, 214, 338, 404, 405, 463], "tensor": [91, 101, 156, 157, 214, 338, 348, 404, 405, 463], "distribut": [91, 99, 113, 156, 157, 214, 338, 346, 361, 404, 405, 463], "rope": [91, 156, 157, 214, 338, 404, 405, 463], "frequenc": [91, 142, 154, 156, 157, 177, 178, 179, 190, 214, 338, 391, 403, 404, 405, 425, 427, 428, 439, 463], "ntk": [91, 156, 157, 214, 338, 404, 405, 463], "awar": [91, 156, 157, 177, 214, 338, 404, 405, 425, 463], "expand": [91, 156, 157, 166, 214, 338, 404, 405, 415, 463], "yarn": [91, 156, 157, 214, 338, 404, 405, 463], "extrapol": [91, 156, 157, 214, 338, 404, 405, 463], "mix": [91, 101, 110, 156, 157, 214, 308, 338, 348, 358, 404, 405, 423, 457, 463, 475], "sqrt": [91, 156, 157, 214, 338, 404, 405, 463], "magnitud": [91, 102, 156, 157, 178, 179, 214, 338, 350, 404, 405, 427, 428, 463], "low": [91, 94, 115, 116, 156, 157, 167, 172, 177, 214, 338, 341, 363, 364, 404, 405, 416, 421, 425, 463], "correct": [91, 115, 156, 157, 177, 178, 179, 190, 214, 338, 363, 404, 405, 425, 427, 428, 439, 463], "beta": [91, 156, 157, 171, 214, 338, 404, 405, 420, 463], "alpha": [91, 156, 157, 160, 177, 214, 338, 404, 405, 408, 425, 463], "kv": [91, 156, 157, 214, 338, 404, 405, 463], "cach": [91, 114, 156, 157, 158, 173, 175, 214, 234, 338, 362, 404, 405, 406, 422, 423, 463, 484], "defragment": [91, 156, 157, 214, 338, 404, 405, 463], "numa": [91, 156, 157, 214, 338, 404, 405, 463], "unless": [91, 156, 157, 214, 338, 404, 405, 463], "unspecifi": [91, 156, 157, 214, 338, 404, 405, 463], "flash": [91, 156, 157, 214, 338, 404, 405, 463], "pageout": [91, 156, 157, 214, 338, 404, 405, 463], "mlock": [91, 156, 157, 214, 338, 404, 405, 463], "ram": [91, 156, 157, 214, 338, 404, 405, 463], "swap": [91, 156, 157, 178, 214, 338, 404, 405, 427, 463], "compress": [91, 156, 157, 214, 338, 404, 405, 463], "disabl": [91, 154, 156, 157, 194, 202, 214, 238, 338, 404, 405, 442, 451, 463, 488], "offload": [91, 156, 157, 214, 338, 404, 405, 463], "sure": [91, 154, 156, 157, 249, 338, 403, 404, 405], "adjust": [91, 156, 157, 214, 338, 404, 405, 463], "accord": [91, 122, 156, 157, 162, 177, 241, 338, 371, 404, 405, 411, 425, 490], "hardwar": [91, 156, 157, 338, 404, 405], "avoid": [91, 104, 153, 156, 157, 214, 338, 352, 402, 404, 405, 463], "error": [91, 156, 157, 177, 336, 338, 404, 405, 425], "99": [91, 156, 157, 338, 404, 405], "moon": [91, 105, 110, 111, 338, 353, 358, 359], "jupit": [91, 338], "77": [91, 338], "total": [91, 151, 157, 190, 338, 400, 405, 439, 460], "79": [91, 128, 129, 338, 376, 378], "confirm": [91, 338], "satellit": [91, 338], "made": [91, 94, 97, 112, 338, 341, 344, 360, 500], "ones": [91, 157, 338, 405], "034486726": [91, 338], "07770534": [91, 338], "15982522": [91, 338], "017873349": [91, 338], "013914132": [91, 338], "0365736": [91, 338], "nparallel": [91, 214, 338, 463], "alia": [91, 156, 157, 214, 219, 338, 404, 405, 463, 468], "small_bert_l2_768": [92, 339], "unlik": [92, 93, 102, 115, 122, 168, 185, 339, 340, 350, 363, 371, 417, 434], "jointli": [92, 93, 339, 340], "left": [92, 93, 157, 158, 167, 190, 210, 339, 340, 405, 406, 416, 439], "just": [92, 93, 98, 107, 132, 137, 339, 340, 345, 355, 381, 386], "modif": [92, 93, 339, 340], "conceptu": [92, 93, 339, 340], "obtain": [92, 93, 95, 100, 112, 167, 339, 340, 342, 347, 360, 416], "eleven": [92, 93, 339, 340], "push": [92, 93, 247, 339, 340, 497], "absolut": [92, 93, 339, 340], "multinli": [92, 93, 339, 340], "86": [92, 93, 97, 339, 340, 344], "v1": [92, 93, 106, 339, 340, 354], "f1": [92, 93, 115, 116, 137, 161, 339, 340, 363, 364, 386, 409], "93": [92, 93, 339, 340], "83": [92, 93, 97, 243, 244, 339, 340, 344, 493, 494, 510], "small_bert_l2_128": [92, 339], "3497989177703857": [92, 102, 339, 350], "480538547039032": [92, 102, 339, 350], "3238905668258667": [92, 102, 339, 350], "612930893898010": [92, 102, 339, 350], "1357314586639404": [92, 339], "32984697818756104": [92, 339], "6032363176345825": [92, 339], "6791689395904": [92, 339], "8244884014129639": [92, 339], "27088963985443115": [92, 339], "059438943862915": [92, 339], "9817547798156": [92, 339], "1648050546646118": [92, 339], "4725411534309387": [92, 339], "5938255786895752": [92, 339], "5780693292617": [92, 339], "9125322699546814": [92, 339], "4563939869403839": [92, 339], "3975459933280945": [92, 339], "81611204147338": [92, 339], "backend": [92, 93, 100, 107, 115, 203, 339, 340, 347, 355, 363, 452], "sentence_bert_embed": [93, 340], "sent_small_bert_l2_768": [93, 340], "long": [93, 103, 106, 110, 111, 117, 157, 166, 170, 214, 238, 336, 340, 351, 354, 358, 359, 365, 405, 415, 419, 463, 488], "sent_small_bert_l2_128": [93, 340], "orang": [93, 108, 116, 340, 356, 364], "8951074481010437": [93, 108, 116, 340, 356, 364], "13753940165042877": [93, 108, 116, 340, 356, 364], "3108254075050354": [93, 108, 116, 340, 356, 364], "65693199634552": [93, 108, 116, 340, 356, 364], "6180210709571838": [93, 108, 116, 340, 356, 364], "12179657071828842": [93, 108, 116, 340, 356, 364], "191165953874588": [93, 108, 116, 340, 356, 364], "4497021436691": [93, 108, 116, 340, 356, 364], "822715163230896": [93, 108, 116, 340, 356, 364], "7568016648292542": [93, 108, 116, 340, 356, 364], "1165061742067337": [93, 108, 116, 340, 356, 364], "59048593044281": [93, 108, 116, 340, 356, 364], "bge": [94, 341], "baai": [94, 341], "dimension": [94, 112, 341, 360], "retriev": [94, 100, 102, 110, 114, 125, 175, 178, 179, 180, 227, 230, 233, 249, 341, 347, 350, 358, 362, 374, 423, 427, 428, 429, 476, 480, 483, 500, 504, 505], "bge_bas": [94, 341], "c": [94, 95, 99, 113, 122, 165, 190, 249, 307, 341, 342, 346, 361, 371, 414, 439], "pack": [94, 341], "chines": [94, 160, 190, 341, 408, 439], "github": [94, 97, 102, 106, 107, 111, 165, 168, 171, 172, 233, 250, 307, 341, 344, 350, 354, 355, 359, 414, 417, 420, 421, 483], "significantli": [94, 97, 101, 107, 108, 115, 116, 122, 170, 171, 172, 341, 344, 348, 355, 356, 363, 364, 371, 419, 420, 421], "critic": [94, 167, 341, 416], "mteb": [94, 100, 341, 347], "cover": [94, 151, 158, 164, 167, 173, 190, 341, 400, 406, 413, 416, 422, 439, 460], "mtp": [94, 341], "massiv": [94, 164, 341, 413], "curat": [94, 100, 106, 110, 341, 347, 354, 358], "corpora": [94, 104, 122, 127, 341, 352, 371, 375], "tem": [94, 341], "stateof": [94, 341], "meanwhil": [94, 341], "publicli": [94, 97, 115, 116, 170, 341, 344, 363, 364, 419], "flagopen": [94, 341], "flagembed": [94, 341], "useclstoken": [94, 207, 214, 341, 463], "protein": [94, 100, 106, 341, 347, 354], "femal": [94, 100, 106, 341, 347, 354], "eat": [94, 100, 106, 341, 347, 354], "guidelin": [94, 100, 106, 341, 347, 354], "cdc": [94, 100, 106, 341, 347, 354], "women": [94, 100, 106, 341, 347, 354], "70": [94, 100, 102, 106, 162, 163, 169, 341, 347, 350, 354, 411, 412, 418], "46": [94, 100, 106, 245, 341, 347, 354, 495], "dai": [94, 100, 106, 128, 129, 177, 341, 347, 354, 376, 378, 425], "chart": [94, 100, 106, 227, 341, 347, 354, 476, 500], "ll": [94, 100, 106, 190, 341, 347, 354, 439], "marathon": [94, 100, 106, 341, 347, 354], "below": [94, 100, 106, 120, 341, 347, 354, 368, 509], "0190285e": [94, 100, 106, 341, 347, 354], "005974853": [94, 100, 106, 341, 347, 354], "072875895": [94, 100, 106, 341, 347, 354], "007944068": [94, 100, 106, 341, 347, 354], "026059335": [94, 100, 106, 341, 347, 354], "0080": [94, 100, 106, 341, 347, 354], "050514214": [94, 100, 106, 341, 347, 354], "010061974": [94, 100, 106, 341, 347, 354], "04340176": [94, 100, 106, 341, 347, 354], "020937217": [94, 100, 106, 341, 347, 354], "05170225": [94, 100, 106, 341, 347, 354], "01157857": [94, 100, 106, 341, 347, 354], "bge_small_en_v1": [94, 341], "tasti": [95, 342], "french": [95, 122, 165, 181, 307, 342, 371, 414, 430], "loui": [95, 342], "martin": [95, 342], "muller": [95, 342], "pedro": [95, 342], "javier": [95, 342], "ortiz": [95, 342], "su\u00e1rez": [95, 342], "yoann": [95, 342], "dupont": [95, 342], "laurent": [95, 342], "romari": [95, 342], "\u00e9ric": [95, 342], "villemont": [95, 342], "la": [95, 142, 165, 307, 342, 391, 414], "clergeri": [95, 342], "djam\u00e9": [95, 342], "seddah": [95, 342], "beno\u00eet": [95, 342], "sagot": [95, 342], "facebook": [95, 97, 115, 116, 158, 342, 344, 363, 364, 406], "138gb": [95, 342], "camembert_bas": [95, 342], "camembertembeddingstestspec": [95, 342], "co": [95, 122, 169, 170, 342, 371, 418, 419], "now": [95, 151, 201, 249, 342, 400, 450, 505], "ubiquit": [95, 168, 342, 417], "despit": [95, 158, 170, 342, 406, 419], "concaten": [95, 190, 230, 342, 439, 480], "except": [95, 132, 137, 183, 187, 238, 336, 342, 381, 386, 436, 488], "investig": [95, 98, 112, 342, 345, 360], "feasibl": [95, 342], "monolingu": [95, 115, 116, 342, 363, 364], "crawl": [95, 158, 173, 342, 406, 422], "prefer": [95, 120, 170, 197, 342, 368, 419, 445], "wikipedia": [95, 124, 161, 229, 239, 342, 373, 409, 479, 489], "surprisingli": [95, 112, 342, 360], "4gb": [95, 342], "130": [95, 342], "gb": [95, 342], "reach": [95, 122, 161, 190, 342, 371, 409, 439], "four": [95, 151, 157, 188, 190, 342, 400, 405, 437, 439], "un": [95, 124, 342, 373], "08442357927560806": [95, 342], "12863239645957947": [95, 342], "03835778683423996": [95, 342], "200479581952": [95, 342], "048462312668561935": [95, 342], "12637358903884888": [95, 342], "27429091930389404": [95, 342], "07516729831": [95, 342], "02690504491329193": [95, 342], "12104076147079468": [95, 342], "012526623904705048": [95, 342], "031543646007": [95, 342], "05877285450696945": [95, 342], "08773420006036758": [95, 342], "06381352990865707": [95, 342], "122621834278": [95, 342], "aggreg": [96, 109, 175, 343, 357, 423], "sum": [96, 101, 109, 214, 343, 348, 357, 463], "discard": [96, 139, 343, 388], "oov": [96, 343], "55661": [96, 343], "42829502": [96, 343], "86661": [96, 343], "409785": [96, 343], "06316501": [96, 343], "120775": [96, 343], "0732005": [96, 343], "40674996": [96, 343], "22938299": [96, 343], "50597": [96, 343], "288195": [96, 343], "555655": [96, 343], "465145": [96, 343], "140118": [96, 343], "17417": [96, 343], "095253006": [96, 343], "0530925": [96, 343], "218465": [96, 343], "714395": [96, 343], "79860497": [96, 343], "0129999": [96, 343], "139705": [96, 343], "177955": [96, 343], "1887775": [96, 343], "45545": [96, 343], "20030999": [96, 343], "461557": [96, 343], "07891501": [96, 343], "disentangl": [97, 344], "pengcheng": [97, 344], "xiaodong": [97, 344], "jianfeng": [97, 344], "gao": [97, 344], "weizhu": [97, 344], "chen": [97, 107, 108, 344, 355, 356], "2018": [97, 107, 108, 344, 355, 356], "half": [97, 122, 344, 371], "deberta_v3_bas": [97, 344], "microsoft": [97, 100, 104, 106, 165, 169, 170, 307, 344, 347, 352, 354, 414, 418, 419], "www": [97, 229, 231, 239, 344, 479, 481, 489], "blog": [97, 171, 344, 420], "superglu": [97, 344], "progress": [97, 151, 186, 344, 400, 435], "mechan": [97, 103, 344, 351], "weight": [97, 101, 106, 122, 136, 138, 159, 168, 172, 177, 344, 348, 354, 371, 385, 387, 407, 417, 421, 425], "among": [97, 104, 160, 169, 170, 344, 352, 408, 418, 419], "matric": [97, 344], "second": [97, 101, 130, 150, 181, 186, 203, 230, 344, 348, 379, 399, 430, 435, 452, 480, 504], "mnli": [97, 344], "90": [97, 344], "91": [97, 344], "88": [97, 344], "fast": [98, 154, 162, 165, 201, 307, 345, 403, 411, 414, 450, 508], "cheap": [98, 345], "distil": [98, 345], "40": [98, 100, 138, 156, 157, 159, 162, 163, 165, 167, 307, 345, 347, 387, 404, 405, 407, 411, 412, 414, 416], "uncas": [98, 110, 345, 358], "run": [98, 122, 175, 227, 234, 249, 336, 345, 371, 423, 476, 484, 501, 509], "preserv": [98, 135, 186, 206, 345, 384, 435, 455], "95": [98, 157, 345, 405], "distilbert_base_cas": [98, 345], "doesn": [98, 107, 345, 355], "token_type_id": [98, 107, 345, 355], "indic": [98, 107, 186, 190, 345, 355, 435, 439], "belong": [98, 107, 170, 345, 355, 419], "sep_token": [98, 107, 345, 355], "sep": [98, 345], "position_id": [98, 345], "ad": [98, 101, 142, 177, 203, 231, 239, 345, 348, 391, 425, 452, 489], "though": [98, 122, 345, 371], "let": [98, 142, 185, 249, 345, 391, 434, 504], "know": [98, 165, 204, 307, 345, 414, 453], "cheaper": [98, 345], "lighter": [98, 345], "preval": [98, 345], "constrain": [98, 156, 157, 214, 345, 404, 405, 463], "budget": [98, 345], "counterpart": [98, 345], "leverag": [98, 104, 110, 166, 227, 345, 352, 358, 415, 476, 500], "knowledg": [98, 122, 168, 169, 170, 171, 197, 203, 249, 345, 371, 417, 418, 419, 420, 445, 452], "reduc": [98, 104, 166, 169, 178, 179, 206, 345, 352, 415, 418, 427, 428, 455], "retain": [98, 345], "97": [98, 128, 129, 190, 345, 376, 378, 439], "tripl": [98, 120, 345, 368], "cosin": [98, 111, 345, 359], "distanc": [98, 157, 175, 177, 178, 179, 345, 405, 423, 425, 427, 428], "proof": [98, 345], "concept": [98, 345, 505], "experi": [98, 111, 117, 142, 158, 160, 166, 227, 345, 359, 365, 391, 406, 408, 415, 476, 501], "1127224713563919": [98, 345], "1982710212469101": [98, 345], "5360898375511169": [98, 345], "272536993026733": [98, 345], "35534414649009705": [98, 345], "13215228915214539": [98, 345], "40981462597846985": [98, 345], "14036104083061": [98, 345], "328085333108902": [98, 345], "06269335001707077": [98, 345], "017595693469047546": [98, 345], "024373905733": [98, 345], "15617232024669647": [98, 345], "2967822253704071": [98, 345], "22324979305267334": [98, 345], "04568954557180": [98, 345], "45411425828933716": [98, 345], "01173491682857275": [98, 345], "190129816532135": [98, 345], "1178255230188369": [98, 345], "corpu": [99, 101, 113, 122, 125, 148, 158, 173, 176, 177, 179, 243, 346, 348, 361, 371, 374, 397, 406, 422, 425, 428, 493, 510], "algorithm": [99, 113, 122, 136, 154, 177, 178, 179, 180, 346, 361, 371, 385, 403, 425, 427, 428], "appear": [99, 113, 142, 157, 177, 346, 361, 391, 405, 425], "divid": [99, 113, 346, 361], "1000": [99, 113, 120, 136, 346, 361, 368, 385], "025": [99, 113, 154, 346, 361], "estim": [99, 113, 182, 198, 225, 230, 346, 361, 431, 446, 456, 465, 475, 504], "composition": [99, 113, 346, 361], "numiter": [99, 113, 346, 361], "equal": [99, 113, 346, 361], "doc2vec_gigaword_300": [99, 346], "06222493574023247": [99, 113, 346, 361], "011579325422644615": [99, 113, 346, 361], "009919632226228714": [99, 113, 346, 361], "109361454844": [99, 113, 346, 361], "doc2vec_wiki": [99, 346], "e5": [100, 347], "weakli": [100, 106, 347, 354], "tailor": [100, 102, 167, 347, 350, 416], "e5_smal": [100, 347], "unilm": [100, 106, 347, 354], "manner": [100, 122, 347, 371], "signal": [100, 101, 347, 348], "ccpair": [100, 347], "readili": [100, 347], "conduct": [100, 111, 347, 359], "extens": [100, 111, 166, 172, 223, 347, 359, 415, 421, 472], "56": [100, 243, 347, 493], "beir": [100, 347], "bm25": [100, 347], "baselin": [100, 112, 161, 347, 360, 409], "beat": [100, 347], "exist": [100, 101, 110, 111, 142, 160, 164, 177, 195, 197, 214, 227, 231, 247, 347, 348, 358, 359, 391, 408, 413, 425, 443, 445, 463, 476, 481, 497], "elmo": [101, 348], "billion": [101, 159, 161, 162, 163, 166, 169, 170, 172, 348, 407, 409, 411, 412, 415, 418, 419, 421], "lookup": [101, 114, 117, 127, 156, 157, 178, 179, 214, 217, 348, 362, 365, 375, 404, 405, 427, 428, 463, 466], "word_emb": [101, 348], "shape": [101, 348], "batch_siz": [101, 348], "max_length": [101, 348], "lstm_outputs1": [101, 348], "lstm": [101, 137, 348, 386], "lstm_outputs2": [101, 348], "trainabl": [101, 348], "contextu": [101, 158, 163, 167, 177, 348, 406, 412, 416, 425], "characterist": [101, 230, 348], "syntax": [101, 348], "vari": [101, 142, 171, 348, 391, 420], "linguist": [101, 190, 348, 439], "polysemi": [101, 348], "bilm": [101, 348], "six": [101, 178, 179, 348, 427, 428], "textual": [101, 102, 111, 166, 230, 348, 350, 359, 415, 480], "entail": [101, 348], "expos": [101, 348], "crucial": [101, 110, 111, 348, 358, 359], "semi": [101, 348], "662458181381226e": [101, 348], "2541114091873169": [101, 348], "6275503039360046": [101, 348], "5787073969841": [101, 348], "19154725968837738": [101, 348], "22998669743537903": [101, 348], "2894386649131775": [101, 348], "21524395048618": [101, 348], "10400570929050446": [101, 348], "12288510054349899": [101, 348], "07056470215320587": [101, 348], "246389418840": [101, 348], "49932169914245605": [101, 348], "12706467509269714": [101, 348], "30969417095184326": [101, 348], "2643227577209": [101, 348], "8871506452560425": [101, 348], "20039963722229004": [101, 348], "0601330995559692": [101, 348], "0348707810044": [101, 348], "instructor": [102, 350], "finetun": [102, 103, 117, 171, 350, 351, 365, 420], "financ": [102, 350], "sota": [102, 111, 117, 350, 359, 365], "divers": [102, 112, 158, 161, 163, 172, 173, 350, 360, 406, 409, 412, 421, 422, 501], "medicin": [102, 350], "instructor_bas": [102, 350], "summar": [102, 103, 122, 158, 159, 161, 165, 173, 214, 247, 307, 350, 351, 371, 406, 407, 409, 414, 422, 463], "embedd": [102, 350], "hkunlp": [102, 350], "explain": [102, 227, 350, 476, 500, 507, 509], "special": [102, 171, 177, 190, 350, 420, 425, 439, 470, 505], "330": [102, 350], "mixtur": [102, 167, 171, 350, 416, 420], "66": [102, 138, 350, 387], "unseen": [102, 350], "suggest": [102, 161, 350, 409], "mitig": [102, 111, 350, 359], "io": [102, 171, 350, 420], "dynam": [102, 156, 157, 165, 214, 307, 350, 404, 405, 414, 463], "scalar": [102, 350], "degre": [102, 350], "freedom": [102, 350], "horava": [102, 350], "lifshitz": [102, 350], "graviti": [102, 350], "iz": [103, 351], "beltagi": [103, 351], "matthew": [103, 351], "arman": [103, 351], "cohan": [103, 351], "checkpoint": [103, 168, 351, 417], "mlm": [103, 104, 351, 352], "096": [103, 351], "longformer_base_4096": [103, 351], "unabl": [103, 351], "quadrat": [103, 351], "linearli": [103, 351], "easi": [103, 351], "thousand": [103, 164, 167, 351, 413, 416], "drop": [103, 181, 351, 430], "motiv": [103, 351], "global": [103, 167, 351, 416], "text8": [103, 351], "enwik8": [103, 351], "wikihop": [103, 351], "triviaqa": [103, 351], "led": [103, 107, 108, 122, 351, 355, 356, 371], "found": [103, 114, 122, 178, 185, 193, 241, 351, 362, 371, 427, 434, 441, 490, 507], "18792399764060974": [103, 107, 351, 355], "14591649174690247": [103, 107, 351, 355], "20547787845134735": [103, 107, 351, 355], "1468472778797": [103, 107, 351, 355], "22845706343650818": [103, 107, 351, 355], "18073144555091858": [103, 107, 351, 355], "09725798666477203": [103, 107, 351, 355], "0417917296290": [103, 107, 351, 355], "07037967443466187": [103, 107, 351, 355], "14801117777824402": [103, 107, 351, 355], "03603338822722435": [103, 107, 351, 355], "17893412709": [103, 107, 351, 355], "08734266459941864": [103, 107, 351, 355], "2486150562763214": [103, 107, 351, 355], "009067727252840996": [103, 107, 351, 355], "24408400058": [103, 107, 351, 355], "22409197688102722": [103, 107, 351, 355], "4312366545200348": [103, 107, 351, 355], "1401449590921402": [103, 107, 351, 355], "356410235166549": [103, 107, 351, 355], "adopt": [104, 166, 352, 415], "permut": [104, 117, 352, 365], "inherit": [104, 308, 352, 423, 457, 475], "advantag": [104, 204, 352, 453], "all_mpnet_base_v2": [104, 352], "neglect": [104, 117, 352, 365], "plm": [104, 352], "doe": [104, 115, 122, 135, 164, 165, 167, 201, 204, 234, 352, 363, 371, 384, 413, 414, 416, 450, 453, 484, 505, 508, 509], "full": [104, 106, 117, 171, 172, 229, 231, 352, 354, 365, 420, 421, 479, 504], "thu": [104, 122, 352, 371], "suffer": [104, 117, 352, 365], "discrep": [104, 117, 352, 365], "auxiliari": [104, 352], "160gb": [104, 352], "down": [104, 137, 229, 352, 386, 479, 504, 505], "stream": [104, 142, 156, 157, 160, 214, 352, 391, 404, 405, 408, 463], "experiment": [104, 122, 352, 371], "022502584": [104, 352], "078291744": [104, 352], "023030775": [104, 352], "0051000593": [104, 352], "080340415": [104, 352], "039": [104, 352], "041702367": [104, 352], "0010974605": [104, 352], "015534201": [104, 352], "07092203": [104, 352], "0017729357": [104, 352], "04661": [104, 352], "mxbai": [105, 353], "mxbai_large_v1": [105, 353], "hello": [105, 110, 111, 127, 131, 156, 159, 184, 203, 245, 353, 358, 359, 375, 380, 404, 407, 432, 452, 495], "50387806": [105, 110, 111, 353, 358, 359], "5861606": [105, 110, 111, 353, 358, 359], "35129607": [105, 110, 111, 353, 358, 359], "76046336": [105, 110, 111, 353, 358, 359], "32446072": [105, 110, 111, 353, 358, 359], "117674336": [105, 110, 111, 353, 358, 359], "6660665": [105, 110, 111, 353, 358, 359], "961762": [105, 110, 111, 353, 358, 359], "24854276": [105, 110, 111, 353, 358, 359], "1018044": [105, 110, 111, 353, 358, 359], "6569202": [105, 110, 111, 353, 358, 359], "027635604": [105, 110, 111, 353, 358, 359], "1915": [105, 110, 111, 353, 358, 359], "cls_avg": [105, 110, 111, 353, 358, 359], "avg": [105, 110, 111, 353, 358, 359], "nomic": [106, 354], "8192": [106, 354], "ada": [106, 143, 354, 392], "002": [106, 143, 354, 392], "short": [106, 111, 229, 230, 354, 359, 479], "nomic_embed_v1": [106, 354], "technic": [106, 110, 168, 171, 354, 358, 417, 420], "report": [106, 107, 108, 110, 112, 158, 168, 171, 227, 354, 355, 356, 358, 360, 406, 417, 420, 476, 500], "reproduc": [106, 164, 227, 354, 413, 476, 500, 501], "opendata": [106, 354], "licens": [106, 166, 172, 354, 415, 421], "loader": [106, 354], "235": [106, 354], "replic": [106, 107, 108, 158, 354, 355, 356, 406], "embedtext": [106, 354], "nomicai": [106, 354], "contrastor": [106, 354], "robustli": [107, 108, 139, 355, 356, 388], "yinhan": [107, 108, 355, 356], "myle": [107, 108, 115, 116, 355, 356, 363, 364], "ott": [107, 108, 115, 116, 355, 356, 363, 364], "naman": [107, 108, 115, 116, 355, 356, 363, 364], "goyal": [107, 108, 115, 116, 355, 356, 363, 364], "jingfei": [107, 108, 355, 356], "du": [107, 108, 124, 355, 356, 373], "mandar": [107, 108, 355, 356], "joshi": [107, 108, 355, 356], "danqi": [107, 108, 355, 356], "omer": [107, 108, 355, 356], "levi": [107, 108, 355, 356], "mike": [107, 108, 355, 356], "lewi": [107, 108, 355, 356], "luke": [107, 108, 115, 116, 355, 356, 363, 364], "zettlemoy": [107, 108, 115, 116, 355, 356, 363, 364], "veselin": [107, 108, 115, 116, 355, 356, 363, 364], "stoyanov": [107, 108, 115, 116, 355, 356, 363, 364], "hyperparamet": [107, 108, 355, 356], "mini": [107, 108, 170, 355, 356, 419], "roberta_bas": [107, 355], "bpe": [107, 355], "gain": [107, 108, 115, 116, 158, 164, 355, 356, 363, 364, 406, 413], "care": [107, 108, 187, 355, 356, 436], "comparison": [107, 108, 112, 171, 181, 355, 356, 360, 420, 430], "privat": [107, 108, 355, 356, 470], "impact": [107, 108, 355, 356], "carefulli": [107, 108, 142, 172, 355, 356, 391, 421], "undertrain": [107, 108, 355, 356], "highlight": [107, 108, 355, 356], "previous": [107, 108, 122, 171, 355, 356, 371, 420], "overlook": [107, 108, 355, 356], "rais": [107, 108, 122, 132, 137, 227, 336, 355, 356, 371, 381, 386, 476], "sent_roberta_bas": [108, 356], "embeddingssent": [109, 357], "22093398869037628": [109, 357], "25130119919776917": [109, 357], "41810303926467896": [109, 357], "380883991718": [109, 357], "snowflak": [110, 358], "arctic": [110, 358], "snowflake_artic_m": [110, 358], "accur": [110, 112, 154, 158, 178, 358, 360, 403, 406, 427], "deriv": [110, 179, 358, 428], "400m": [110, 358], "public": [110, 120, 234, 247, 358, 368, 484, 504], "1m": [110, 358], "triplet": [110, 358], "harm": [110, 358], "mine": [110, 164, 167, 358, 413, 416], "shortli": [110, 358], "uae": [111, 359], "satur": [111, 359], "uae_large_v1": [111, 359], "st": [111, 359], "vanish": [111, 359], "gradient": [111, 136, 359, 385], "issu": [111, 190, 250, 359, 439], "idea": [111, 117, 359, 365], "advers": [111, 359], "imped": [111, 359], "hinder": [111, 359], "furthermor": [111, 117, 171, 359, 365, 420], "examin": [111, 359], "scenario": [111, 154, 359, 403], "were": [111, 114, 137, 171, 227, 359, 362, 386, 420, 476, 500], "uae_smal": [111, 359], "tfhub_us": [112, 360], "op": [112, 360], "lingual": [112, 115, 116, 122, 124, 165, 307, 360, 363, 364, 371, 373, 414], "trade": [112, 115, 116, 360, 363, 364], "tend": [112, 360], "With": [112, 117, 122, 172, 360, 365, 371, 421], "minim": [112, 139, 165, 307, 360, 388, 414], "encourag": [112, 163, 360, 412], "weat": [112, 360], "bia": [112, 142, 156, 157, 171, 214, 360, 391, 404, 405, 420, 463], "freeli": [112, 360], "04616805538535118": [112, 360], "022307956591248512": [112, 360], "044395286589860916": [112, 360], "0016493503": [112, 360], "changeabl": 112, "nor": [112, 122, 371], "word2vec_gigaword_300": [113, 361], "word2vec_wiki": [113, 361], "setstoragepath": [114, 127, 207, 217, 362, 375, 466], "line": [114, 119, 127, 131, 142, 151, 153, 177, 229, 230, 233, 238, 239, 241, 243, 362, 366, 375, 380, 391, 400, 402, 425, 479, 483, 489, 490, 493], "39658191506190343": [114, 362], "630968081620067": [114, 362], "5393722253731201": [114, 362], "8428180123359783": [114, 362], "7535235923631415": [114, 362], "9699218875629833": [114, 362], "10397182122983872": [114, 362], "11833962569383116": [114, 362], "stress": [114, 362], "0492683418305907": [114, 362], "9415954572751959": [114, 362], "47624463167525755": [114, 362], "16790967216778263": [114, 362], "induc": [114, 362], "1535748762292387": [114, 362], "33498936903209897": [114, 362], "9235178224122094": [114, 362], "1158772920395934": [114, 362], "dump": [114, 362], "disk": [114, 362, 504, 505], "10000": [114, 362], "random_embeddings_dim4": [114, 362], "setstorageref": [114, 207, 217, 362, 466], "glove_4d": [114, 362], "setdimens": [114, 207, 214, 362, 463], "patient": [114, 362], "diagnos": [114, 362], "diabet": [114, 362], "9439099431037903": [114, 362], "4707513153553009": [114, 362], "806300163269043": [114, 362], "16176554560661316": [114, 362], "7966810464859009": [114, 362], "5551124811172485": [114, 362], "8861005902290344": [114, 362], "28284206986427307": [114, 362], "025029370561242104": [114, 362], "35177749395370483": [114, 362], "052506182342767715": [114, 362], "1887107789516449": [114, 362], "08617766946554184": [114, 362], "8399239182472229": [114, 362], "5395117998123169": [114, 362], "7864698767662048": [114, 362], "6599600911140442": [114, 362], "16109347343444824": [114, 362], "6041093468666077": [114, 362], "8913561105728149": [114, 362], "5955275893211365": [114, 362], "01899011991918087": [114, 362], "4397728443145752": [114, 362], "8911281824111938": [114, 362], "9840458631515503": [114, 362], "7599489092826843": [114, 362], "9417727589607239": [114, 362], "8624503016471863": [114, 362], "glove_100d": [114, 137, 362, 386], "There": [114, 119, 120, 157, 185, 362, 366, 368, 405, 434, 502, 504, 505, 510], "conveni": [114, 362], "coverag": [114, 212, 362, 460], "stat": [114, 362], "whole": [114, 168, 217, 233, 362, 417, 466, 483], "570580005645752": [114, 362], "44183000922203064": [114, 362], "7010200023651123": [114, 362], "417129993438720": [114, 362], "542639970779419": [114, 362], "4147599935531616": [114, 362], "0321999788284302": [114, 362], "4024400115013122": [114, 362], "2708599865436554": [114, 362], "04400600120425224": [114, 362], "020260000601410866": [114, 362], "17395000159": [114, 362], "6191999912261963": [114, 362], "14650000631809235": [114, 362], "08592499792575836": [114, 362], "2629800140857": [114, 362], "3397899866104126": [114, 362], "20940999686717987": [114, 362], "46347999572753906": [114, 362], "6479200124740": [114, 362], "storage_ref": [114, 119, 127, 217, 362, 366, 375, 466], "embeddings_col": [114, 362], "coverateresult": [114, 362], "wordsoverallcoverag": [114, 362], "resultdf": [114, 231, 362, 481], "output_col": [114, 362], "wordscoverag": [114, 362], "cov_embed": [114, 362], "alexi": [115, 116, 363, 364], "conneau": [115, 116, 363, 364], "kartikai": [115, 116, 363, 364], "khandelw": [115, 116, 363, 364], "vishrav": [115, 116, 363, 364], "chaudhari": [115, 116, 363, 364], "guillaum": [115, 116, 363, 364], "wenzek": [115, 116, 363, 364], "francisco": [115, 116, 122, 363, 364, 371], "guzman": [115, 363], "edouard": [115, 116, 363, 364], "grave": [115, 116, 363, 364], "5tb": [115, 116, 363, 364], "commoncrawl": [115, 116, 363, 364], "xlm_roberta_bas": [115, 363], "abl": [115, 164, 173, 227, 363, 413, 422, 476, 503], "terabyt": [115, 116, 363, 364], "r": [115, 116, 122, 159, 363, 364, 371, 407], "mbert": [115, 116, 363, 364], "xnli": [115, 116, 363, 364], "mlqa": [115, 116, 363, 364], "particularli": [115, 116, 158, 171, 363, 364, 406, 420], "swahili": [115, 116, 363, 364], "urdu": [115, 116, 363, 364], "capac": [115, 116, 161, 164, 363, 364, 409, 413], "dilut": [115, 116, 363, 364], "sacrif": [115, 116, 363, 364], "ri": [115, 116, 363, 364], "05969233065843582": [115, 363], "030789051204919815": [115, 363], "04443822056055069": [115, 363], "09564960747": [115, 363], "038839809596538544": [115, 363], "011712731793522835": [115, 363], "019954433664679527": [115, 363], "0667808502": [115, 363], "03952755779027939": [115, 363], "03455188870429993": [115, 363], "019103847444057465": [115, 363], "04311436787": [115, 363], "09579929709434509": [115, 363], "02494969218969345": [115, 363], "014753809198737144": [115, 363], "10259044915": [115, 363], "004710011184215546": [115, 363], "022148698568344116": [115, 363], "011723337695002556": [115, 363], "013356896": [115, 363], "guzm\u00e3": [116, 364], "sent_xlm_roberta_bas": [116, 364], "xl": [117, 229, 231, 236, 239, 365, 479, 481, 489], "exhibit": [117, 365], "involv": [117, 151, 168, 365, 400, 417], "rank": [117, 160, 175, 177, 365, 408, 423, 425], "xlnet_large_cas": [117, 365], "xlnet_base_cas": [117, 365], "zihangdai": [117, 365], "denois": [117, 158, 365, 406], "autoencod": [117, 158, 365, 406], "corrupt": [117, 158, 365, 406], "pro": [117, 365], "con": [117, 365], "likelihood": [117, 142, 365, 391], "overcom": [117, 365], "formul": [117, 365], "6287205219268799": [117, 365], "4865287244319916": [117, 365], "186111718416214": [117, 365], "234187275171279": [117, 365], "1967450380325317": [117, 365], "2746637463569641": [117, 365], "9481253027915955": [117, 365], "3431355059146881": [117, 365], "0777631998062134": [117, 365], "092679977416992": [117, 365], "5331977605819702": [117, 365], "11190271377563": [117, 365], "8349916934967041": [117, 365], "45627787709236145": [117, 365], "7890847325325012": [117, 365], "028069257736": [117, 365], "134845569729805": [117, 365], "11672890186309814": [117, 365], "4945235550403595": [117, 365], "66587203741073": [117, 365], "alphabet": [118, 119, 140, 366, 389], "patternsresourc": [118, 119, 366], "sentencematch": [118, 119, 366], "setalphabetresourc": [118, 119, 366], "setpatternsresourc": [118, 119, 366], "setsentencematch": [118, 119, 366], "setusestorag": [118, 119, 366], "usestorag": [118, 119, 366], "entityrul": [119, 366], "exact": [119, 127, 131, 142, 366, 375, 380, 391], "definit": [119, 139, 241, 366, 388, 490], "json": [119, 142, 203, 205, 227, 245, 366, 391, 452, 454, 476, 495], "jsonl": [119, 366], "might": [119, 137, 190, 366, 386, 439, 509], "rule": [119, 126, 128, 130, 153, 183, 185, 187, 213, 218, 231, 366, 376, 379, 402, 434, 436, 462, 467], "winterfel": [119, 366], "jon": [119, 366], "snow": [119, 138, 157, 177, 366, 387, 405, 425], "stark": [119, 366], "eddard": [119, 366], "rocksdb": [119, 366], "lord": [119, 366], "29": [119, 138, 190, 243, 245, 366, 387, 439, 493, 495], "38": [119, 170, 245, 366, 419, 495], "plain": [119, 229, 230, 231, 366, 479, 480, 481, 510], "entity_pattern": [119, 366], "graph": [120, 137, 165, 177, 182, 197, 307, 368, 386, 414, 425, 431, 445], "node": [120, 207, 211, 368, 459], "relev": [120, 122, 142, 154, 368, 371, 391], "taken": [120, 368], "implicitli": [120, 368], "travers": [120, 368], "neighbor": [120, 175, 368, 423], "symbol": [120, 177, 190, 368, 425, 439], "coordin": [120, 150, 239, 368, 399, 489], "remoteloc": [120, 368], "rdf": [120, 197, 368, 445], "nertagg": [120, 136, 137, 138, 368, 385, 386, 387], "morn": [120, 197, 368, 445], "flight": [120, 197, 368, 445], "denver": [120, 197, 368, 445], "18": [120, 128, 129, 132, 135, 138, 157, 201, 219, 233, 368, 376, 378, 381, 384, 387, 405, 450, 468, 483, 503], "path1": [120, 368], "iob": [120, 135, 136, 137, 368, 384, 385, 386], "iob2": [120, 135, 368, 384], "getstopword": [121, 122, 371], "maxngram": [121, 122, 371], "minngram": [121, 122, 371], "nkeyword": [121, 122, 371], "setmaxngram": [121, 122, 371], "setminngram": [121, 122, 371], "setnkeyword": [121, 122, 371], "yake": [122, 371], "independ": [122, 178, 179, 185, 371, 427, 428, 434], "grow": [122, 371], "autom": [122, 166, 371, 415], "adequ": [122, 371], "emerg": [122, 158, 173, 371, 406, 422], "tool": [122, 142, 158, 171, 172, 203, 371, 391, 406, 420, 421, 452], "thesauri": [122, 371], "neither": [122, 371], "written": [122, 165, 307, 371, 414], "plethora": [122, 371], "situat": [122, 151, 371, 400], "access": [122, 168, 203, 371, 417, 452], "restrict": [122, 169, 371, 418], "therefor": [122, 371, 508], "sent": [122, 371], "boundari": [122, 150, 151, 154, 187, 190, 229, 230, 231, 371, 399, 400, 403, 436, 439, 479], "detector": [122, 128, 153, 371, 376, 402], "section": [122, 194, 202, 231, 371, 442, 451, 500, 502, 508], "tweakabl": [122, 371], "upper": [122, 371], "bound": [122, 150, 151, 154, 371, 399, 400, 403], "occurr": [122, 213, 371, 462], "campo": [122, 371], "mangaravit": [122, 371], "pasquali": [122, 371], "jatowt": [122, 371], "jorg": [122, 371], "nune": [122, 371], "journal": [122, 190, 371, 439], "elsevi": [122, 371], "vol": [122, 371], "509": [122, 371], "pp": [122, 190, 371, 439], "257": [122, 371], "289": [122, 371], "turn": [122, 206, 371, 455, 504], "come": [122, 135, 142, 162, 168, 371, 384, 391, 411, 417], "fly": [122, 371], "demand": [122, 371], "within": [122, 148, 154, 158, 161, 187, 193, 231, 371, 397, 403, 406, 409, 436, 441, 481], "resort": [122, 371], "alwai": [122, 142, 163, 168, 169, 170, 171, 173, 336, 371, 391, 412, 417, 418, 419, 420, 422], "solut": [122, 166, 371, 415], "articl": [122, 177, 371, 425], "rest": [122, 135, 371, 384], "extern": [122, 125, 130, 131, 136, 137, 177, 182, 204, 218, 241, 242, 243, 244, 249, 371, 374, 379, 380, 386, 425, 431, 453, 467, 490, 491, 493, 494], "merit": [122, 371], "ten": [122, 371], "carri": [122, 371], "twenti": [122, 371], "setcontextchar": [122, 183, 187, 371, 436], "acquir": [122, 371], "kaggl": [122, 172, 371, 421], "platform": [122, 142, 143, 227, 371, 391, 392, 476, 502], "host": [122, 371], "transact": [122, 371], "somewhat": [122, 371], "vagu": [122, 371], "confer": [122, 371], "week": [122, 128, 129, 184, 371, 376, 378, 432], "announc": [122, 138, 371, 387], "earli": [122, 371], "tomorrow": [122, 128, 129, 371, 376, 378], "founder": [122, 371], "ceo": [122, 371], "anthoni": [122, 371], "goldbloom": [122, 371], "declin": [122, 371], "deni": [122, 371], "acquisit": [122, 371], "happen": [122, 371], "rumor": [122, 371], "scientist": [122, 371], "ben": [122, 371], "hamner": [122, 371], "2010": [122, 371], "servic": [122, 142, 165, 307, 371, 391, 414], "got": [122, 371], "even": [122, 128, 160, 163, 171, 173, 371, 376, 408, 412, 420, 422], "few": [122, 187, 243, 371, 436, 493, 510], "competitor": [122, 371], "drivendata": [122, 371], "topcod": [122, 371], "hackerrank": [122, 371], "manag": [122, 234, 249, 371, 484, 501], "stai": [122, 371], "ahead": [122, 371], "nich": [122, 371], "bui": [122, 242, 371, 491], "commun": [122, 162, 163, 168, 169, 371, 411, 412, 417, 418], "mindshar": [122, 371], "too": [122, 153, 371, 402, 503], "plenti": [122, 371], "bit": [122, 151, 371, 400, 509], "histori": [122, 151, 177, 371, 400, 425], "earlier": [122, 371], "month": [122, 128, 129, 243, 371, 376, 378, 493, 510], "team": [122, 165, 227, 307, 371, 414, 476, 500], "around": [122, 157, 167, 371, 405, 416], "youtub": [122, 371], "interest": [122, 168, 169, 170, 171, 371, 417, 418, 419, 420], "kernel": [122, 371], "On": [122, 160, 161, 165, 307, 371, 408, 409, 414], "analyz": [122, 154, 371, 403], "compani": [122, 165, 307, 371, 414], "script": [122, 164, 371, 413], "centric": [122, 164, 167, 371, 413, 416], "job": [122, 193, 371, 441], "board": [122, 148, 243, 371, 397, 493], "unclear": [122, 371], "crunchbas": [122, 371], "pitchbook": [122, 371], "launch": [122, 371], "investor": [122, 371], "ventur": [122, 371], "sv": [122, 371], "angel": [122, 160, 371, 408], "levchin": [122, 371], "naravik": [122, 371], "chie": [122, 371], "economist": [122, 371], "hal": [122, 371], "varian": [122, 371], "khosla": [122, 371], "yuri": [122, 371], "milner": [122, 371], "resulttupl": [122, 371], "ascend": [122, 371], "orderbi": [122, 371], "32051516486864573": [122, 371], "37786450577630676": [122, 371], "39922830978423146": [122, 371], "40224744669493756": [122, 371], "41584827825302534": [122, 371], "danish": [122, 181, 371, 430], "dutch": [122, 181, 371, 430], "finnish": [122, 181, 371, 430], "german": [122, 181, 241, 371, 430, 490, 510], "hungarian": [122, 181, 371, 430], "italian": [122, 142, 177, 181, 371, 391, 425, 430], "norwegian": [122, 181, 371, 430], "portugues": [122, 181, 371, 430], "russian": [122, 181, 371, 430], "spanish": [122, 181, 371, 430], "swedish": [122, 181, 371, 430], "turkish": [122, 181, 371, 430], "ld": [124, 369, 373], "identif": [124, 217, 373, 466], "rnn": [124, 373], "tatoeba": [124, 373], "wiki": [124, 373], "languagedetector": [124, 373], "ld_wiki_tatoeba_cnn_21": [124, 373], "java": [124, 234, 249, 308, 373, 423, 456, 457, 465, 471, 472, 475, 484], "scala": [124, 308, 373, 423, 456, 457, 465, 471, 475], "program": [124, 172, 373, 421], "biblioth\u00e8qu": [124, 373], "traitement": [124, 373], "pour": [124, 373], "le": [124, 165, 307, 373, 414], "avanc\u00e9": [124, 373], "langag": [124, 373], "naturel": [124, 373], "programm": [124, 373], "ist": [124, 373], "ein": [124, 373], "textverarbeitungsbibliothek": [124, 373], "f\u00fcr": [124, 373], "fortgeschritten": [124, 373], "nat\u00fcrlich": [124, 373], "sprachverarbeitung": [124, 373], "die": [124, 373], "programmiersprachen": [124, 373], "und": [124, 373], "lemma": [125, 153, 201, 233, 242, 374, 402, 450, 483, 491, 505, 508, 509], "predefin": [125, 127, 130, 131, 153, 374, 375, 379, 380, 402], "lemmas_smal": [125, 153, 374, 402], "keydelimit": 125, "valuedelimit": 125, "correspend": [125, 374], "key_delimit": [125, 374], "value_delimit": [125, 374], "fromlemma": [125, 374], "lemma_antbnc": [125, 374], "mergeoverlap": [126, 127, 131, 375, 380], "setent": [126, 127, 131, 133, 134, 184, 375, 380, 383, 432], "setmergeoverlap": [126, 127, 131, 375, 380], "settoken": [126, 127, 375], "searchtri": [126, 127, 131, 375, 380], "aggressivematch": [126, 128, 376], "anchordatedai": [126, 128, 129, 376, 378], "anchordatemonth": [126, 128, 129, 376, 378], "anchordateyear": [126, 128, 129, 376, 378], "defaultdaywhenmiss": [126, 128, 129, 376, 378], "inputformat": [126, 128, 191, 205, 376, 454], "outputformat": [126, 128, 376], "readmonthfirst": [126, 128, 129, 376, 378], "relaxedfactorystrategi": [126, 128, 376], "setaggressivematch": [126, 128, 376], "setanchordatedai": [126, 128, 129, 376, 378], "setanchordatemonth": [126, 128, 129, 376, 378], "setanchordateyear": [126, 128, 129, 376, 378], "setdefaultdaywhenmiss": [126, 128, 376], "setinputformat": [126, 128, 191, 205, 376, 454], "setoutputformat": [126, 128, 129, 376, 378], "setreadmonthfirst": [126, 128, 376], "setrelaxedfactorystrategi": [126, 128, 376], "setsourcelanguag": [126, 128, 376], "sourcelanguag": [126, 128, 376], "externalrul": [126, 130, 379], "setexternalrul": [126, 130, 379], "setrul": [126, 130, 379], "setstrategi": [126, 130, 379], "buildfromtoken": [126, 131, 380], "entityvalu": [126, 131, 380], "setbuildfromtoken": [126, 131, 380], "setentityvalu": [126, 131, 380], "trie": [127, 375], "dolor": [127, 131, 375, 380], "magna": [127, 131, 375, 380], "aliqua": [127, 131, 375, 380], "sit": [127, 131, 157, 375, 380, 405], "laborum": [127, 131, 375, 380], "entityextractor": [127, 131, 184, 375, 380, 432], "59": [127, 128, 129, 131, 375, 376, 378, 380], "tokenizer_model": [127, 375], "btm": [127, 375], "tmvocab": [127, 375], "tmedg": [127, 375], "tmnode": [127, 375], "1978": [128, 129, 376, 378], "28": [128, 129, 135, 201, 219, 231, 233, 245, 376, 378, 384, 450, 468, 481, 483, 495, 503], "1984": [128, 129, 376, 378], "04": [128, 129, 376, 378], "02": [128, 129, 376, 378], "1980": [128, 129, 376, 378], "31st": [128, 129, 376, 378], "april": [128, 129, 376, 378], "year": [128, 129, 161, 162, 184, 243, 376, 378, 409, 411, 432, 493], "2008": [128, 129, 376, 378], "fri": [128, 129, 376, 378], "1997": [128, 129, 376, 378], "jan": [128, 129, 376, 378], "sun": [128, 129, 376, 378], "1st": [128, 129, 376, 378], "thursdai": [128, 129, 376, 378], "wednesdai": [128, 129, 376, 378], "todai": [128, 129, 159, 167, 203, 245, 376, 378, 407, 416, 452, 495], "yesterdai": [128, 129, 376, 378], "0600h": [128, 129, 376, 378], "06": [128, 129, 376, 378], "00": [128, 129, 376, 378], "6pm": [128, 129, 376, 378], "23": [128, 129, 130, 138, 148, 243, 244, 245, 376, 378, 379, 387, 397, 493, 494, 495, 510], "1988": [128, 129, 376, 378], "31": [128, 129, 130, 138, 148, 243, 376, 378, 379, 387, 397, 493], "dateformat": [128, 129, 376, 378], "desir": [128, 129, 376, 378], "yyyi": [128, 129, 376, 378], "mm": [128, 129, 190, 376, 378, 439], "dd": [128, 129, 130, 376, 378, 379], "anchor": [128, 129, 376, 378], "januari": [128, 129, 376, 378], "15": [128, 238, 245, 376, 488, 495], "aggress": [128, 376], "attempt": [128, 178, 376, 427], "ambigu": [128, 376], "juli": [128, 376], "07": [128, 376], "05": [128, 157, 238, 376, 405, 488], "2015": [128, 376], "relax": [128, 157, 376, 405], "Not": [128, 137, 204, 376, 386, 453], "5th": [128, 376], "match_first": [128, 130, 207, 213, 376, 379, 462], "exhaust": [128, 376], "saw": [129, 378], "visit": [129, 142, 378, 391], "57": [129, 138, 378, 387], "65": [129, 138, 378, 387], "d": [130, 140, 187, 231, 379, 389, 436, 481, 502], "1970": [130, 379], "match_al": [130, 207, 213, 379, 462], "match_complet": [130, 207, 213, 379, 462], "ceremoni": [130, 379], "71": [130, 379], "short_dat": [130, 379], "regardless": [131, 380], "27": [131, 148, 150, 243, 380, 397, 399, 493], "48": [131, 190, 245, 380, 439, 495], "null": [132, 381], "empti": [132, 157, 175, 182, 193, 201, 229, 230, 381, 405, 423, 441, 450, 479], "join": [132, 148, 203, 205, 229, 230, 243, 381, 397, 452, 454, 479, 480, 493], "minepoch": [133, 134, 136, 137, 383, 385, 386], "setminepoch": [133, 134, 136, 383, 385], "setrandomse": [133, 134, 137, 144, 145, 155, 165, 383, 386, 393, 414], "nerhasnoschema": [133, 135, 384], "preserveposit": [133, 135, 183, 186, 191, 206, 384, 435, 455], "setnerhasnoschema": [133, 135, 384], "setpreserveposit": [133, 135, 183, 186, 191, 206, 384, 435, 455], "setwhitelist": [133, 135, 183, 185, 384, 434], "whitelist": [133, 135, 183, 185, 384, 434], "c0": [133, 136, 385], "externalfeatur": [133, 136, 385], "includeconfid": [133, 136, 137, 385, 386], "l2": [133, 136, 385], "lossep": [133, 136, 385], "minw": [133, 136, 385], "setc0": [133, 136, 385], "setexternalfeatur": [133, 136, 385], "setincludeconfid": [133, 136, 137, 385, 386], "setl2": [133, 136, 385], "setlossep": [133, 136, 385], "setminw": [133, 136, 385], "bestmodelmetr": [133, 137, 386], "enablememoryoptim": [133, 137, 386], "includeallconfidencescor": [133, 137, 386], "setbestmodelmetr": [133, 137, 386], "setenablememoryoptim": [133, 137, 386], "setincludeallconfidencescor": [133, 137, 386], "setpo": [133, 137, 386], "setusebestmodel": [133, 137, 386], "setusecontrib": [133, 137, 386], "usebestmodel": [133, 137, 386], "usecontrib": [133, 137, 386], "nerword": [133, 138, 387], "newnerent": [133, 138, 387], "replaceent": [133, 138, 387], "setnerword": [133, 138, 387], "setnewnerent": [133, 138, 387], "setreplaceent": [133, 138, 387], "ignoreent": [133, 139, 388], "predictionthreshold": [133, 139, 388], "setentitydefinit": [133, 139, 388], "setpredictionthreshold": [133, 139, 388], "recogn": [134, 135, 136, 137, 138, 139, 177, 383, 384, 385, 386, 387, 388, 425], "friendli": [135, 142, 165, 307, 384, 391, 414], "outsid": [135, 384], "ekeu": [135, 136, 137, 201, 219, 233, 384, 385, 386, 450, 468, 483], "36": [135, 148, 201, 219, 233, 243, 245, 384, 397, 450, 468, 483, 493, 495], "baghdad": [135, 136, 137, 201, 219, 233, 384, 385, 386, 450, 468, 483], "37": [135, 201, 219, 233, 384, 450, 468, 483], "nercrf": [136, 385], "crf": [136, 137, 385, 386], "2003": [136, 137, 190, 241, 385, 386, 439, 490, 510], "exclud": [136, 137, 385, 386], "decai": [136, 137, 385, 386], "2250000": [136, 385], "ep": [136, 385], "confid": [136, 137, 139, 385, 386, 388], "trainingdata": [136, 137, 151, 178, 179, 241, 385, 386, 400, 427, 428, 490], "readdataset": [136, 137, 148, 190, 240, 241, 242, 243, 244, 245, 385, 386, 397, 439, 490, 491, 493, 494, 495, 510], "conll2003": [136, 137, 241, 385, 386, 490, 510], "eng": [136, 137, 241, 385, 386, 490, 510], "c0valu": [136, 385], "l2valu": [136, 385], "verbosevalu": [136, 385], "prerequisit": [136, 137, 138, 385, 386, 387, 504], "nerdl": [137, 386], "char": [137, 140, 151, 386, 389, 400], "bilstm": [137, 386], "tagger": [137, 243, 386, 493, 510], "rage": [137, 386], "contrib": [137, 386], "cell": [137, 205, 229, 230, 231, 386, 454, 479, 480], "slightli": [137, 151, 171, 386, 400, 420], "slow": [137, 386], "micro": [137, 386], "macro": [137, 386], "nermodel": [137, 386], "setnewresult": [138, 387], "overwritten": [138, 387], "lab": [138, 387], "42": [138, 148, 387, 397], "45": [138, 148, 243, 245, 387, 397, 493, 495], "47": [138, 243, 245, 387, 493, 495], "ner_overwritten": [138, 387], "cardin": [138, 387], "rw": [138, 387], "zeroshotn": [139, 388], "zer_shot_n": [139, 388], "entitydefinit": [139, 388], "citi": [139, 388], "town": [139, 388], "01f": [139, 388], "zero_shot_n": [139, 388], "hellen": [139, 388], "5328949": [139, 388], "9360068": [139, 388], "83294415": [139, 388], "45366877": [139, 388], "shortcut": [139, 388], "zero_shot_ner_roberta": [139, 388], "stem": [140, 180, 201, 233, 389, 429, 450, 483, 508, 509], "henc": [140, 389], "pl": [140, 389], "slang": [140, 389], "alphanumer": [140, 389], "za": [140, 389], "z": [140, 156, 157, 187, 214, 389, 404, 405, 436, 463], "brother": [140, 389], "dont": [140, 154, 389, 403], "sensit": [140, 178, 181, 187, 427, 430, 436], "bestof": [141, 142, 391], "echo": [141, 142, 391], "frequencypenalti": [141, 142, 156, 157, 207, 214, 391, 404, 405, 463], "logitbia": [141, 142, 391], "logprob": [141, 142, 391], "maxtoken": [141, 142, 391], "numberofcomplet": [141, 142, 391], "presencepenalti": [141, 142, 156, 157, 207, 214, 391, 404, 405, 463], "setbestof": [141, 142, 391], "setecho": [141, 142, 391], "setfrequencypenalti": [141, 142, 207, 214, 391, 463], "setlogitbia": [141, 142, 391], "setlogprob": [141, 142, 391], "setmaxtoken": [141, 142, 391], "setmodel": [141, 142, 143, 149, 151, 391, 392, 400], "setnumberofcomplet": [141, 142, 391], "setpresencepenalti": [141, 142, 207, 214, 391, 463], "setstop": [141, 142, 391], "setsuffix": [141, 142, 183, 185, 391, 434], "setus": [141, 142, 143, 391, 392], "suffix": [141, 142, 156, 157, 183, 185, 187, 214, 391, 404, 405, 434, 436, 463, 504], "request": [142, 143, 172, 229, 391, 392, 421, 479], "complet": [142, 156, 157, 172, 214, 227, 391, 404, 405, 421, 463, 476, 501, 504], "api": [142, 143, 250, 391, 392, 500, 504, 507], "executor": [142, 143, 391, 392], "insert": [142, 178, 179, 391, 427, 428, 504], "nucleu": [142, 391], "mass": [142, 391], "penal": [142, 156, 157, 214, 391, 404, 405, 463], "topic": [142, 391], "verbatim": [142, 391], "best_of": [142, 391], "server": [142, 156, 157, 391, 404, 405, 509], "side": [142, 157, 160, 190, 391, 405, 408, 439], "abus": [142, 143, 391, 392], "davinci": [142, 391], "003": [142, 391], "empty_df": [142, 143, 391, 392], "sample_text": [142, 143, 391, 392], "restaur": [142, 153, 391, 402], "eateri": [142, 391], "dine": [142, 391], "sample_df": [142, 143, 391, 392], "258": [142, 391], "ni": [142, 203, 391, 452], "pleasur": [142, 391], "fiorita": [142, 391], "truli": [142, 168, 391, 417], "delight": [142, 391], "menu": [142, 391], "boast": [142, 391], "wonder": [142, 391], "classic": [142, 391], "dish": [142, 391], "exquisit": [142, 391], "prepar": [142, 192, 194, 200, 202, 391, 440, 442, 448, 451], "staff": [142, 153, 391, 402], "227": [142, 391], "barbecu": [142, 391], "joe": [142, 391], "dinner": [142, 391], "amaz": [142, 391], "pull": [142, 172, 391, 421], "pork": [142, 391], "smoke": [142, 391], "turkei": [142, 391], "brisket": [142, 391], "rib": [142, 391], "sandwich": [142, 391], "opt": [142, 391], "172": [142, 391], "overallr": [142, 391], "reviewbodi": [142, 391], "enjoi": [142, 157, 160, 391, 405, 408], "meal": [142, 391], "flavour": [142, 391], "beautifulli": [142, 157, 391, 405], "cannot": [142, 203, 391, 452], "candid": [142, 177, 178, 179, 187, 391, 425, 427, 428, 436], "consum": [142, 391], "quota": [142, 391], "ensur": [142, 166, 167, 172, 391, 415, 416, 421, 471], "max_token": [142, 391], "mathemat": [142, 160, 166, 171, 391, 408, 415, 420], "ban": [142, 391], "exclus": [142, 171, 391, 420], "50256": [142, 391], "prevent": [142, 391], "endoftext": [142, 391], "plu": [142, 161, 391, 409], "determinist": [142, 391], "alter": [142, 391], "delici": [143, 392], "waiter": [143, 392], "002297497": [143, 392], "009297881": [143, 392], "015739758": [143, 392], "0076794787": [143, 392], "004737794": [143, 392], "01487661": [143, 392], "009856389": [143, 392], "03823238": [143, 392], "0069305706": [143, 392], "028610818": [143, 392], "025208998": [143, 392], "018138802": [143, 392], "0036271256": [143, 392], "025539026": [143, 392], "204275e": [143, 392], "016374426": [143, 392], "02828079": [143, 392], "0054073683": [143, 392], "009710415": [143, 392], "016399812": [143, 392], "015397037": [143, 392], "00427766": [143, 392], "006987691": [143, 392], "0072859847": [143, 392], "003874646": [143, 392], "018544989": [143, 392], "008752067": [143, 392], "022657635": [143, 392], "011493831": [143, 392], "023901584": [143, 392], "015638212": [143, 392], "0035192322": [143, 392], "034932107": [143, 392], "0041919798": [143, 392], "02612292": [143, 392], "021515233": [143, 392], "005715182": [143, 392], "011754045": [143, 392], "008453773": [143, 392], "004080913": [143, 392], "019179657": [143, 392], "014419649": [143, 392], "00893612": [143, 392], "0063911034": [143, 392], "045670684": [143, 392], "017884934": [143, 392], "005610462": [143, 392], "219344e": [143, 392], "02211182": [143, 392], "0039539794": [143, 392], "021007499": [143, 392], "017631067": [143, 392], "011696924": [143, 392], "02260686": [143, 392], "016336346": [143, 392], "017174106": [143, 392], "008466466": [143, 392], "0015922225": [143, 392], "025094759": [143, 392], "024967825": [143, 392], "007806412": [143, 392], "005794516": [143, 392], "022187982": [143, 392], "0029162979": [143, 392], "0060959826": [143, 392], "025564414": [143, 392], "008104706": [143, 392], "0010178483": [143, 392], "9823447e": [143, 392], "0046425937": [143, 392], "02074094": [143, 392], "013467647": [143, 392], "004626727": [143, 392], "016006319": [143, 392], "0166156": [143, 392], "008948814": [143, 392], "007616012": [143, 392], "013619968": [143, 392], "0069749975": [143, 392], "0052677416": [143, 392], "009881775": [143, 392], "04592455": [143, 392], "0030464048": [143, 392], "024003131": [143, 392], "02301305": [143, 392], "006981344": [143, 392], "023571556": [143, 392], "009938896": [143, 392], "006537077": [143, 392], "033332746": [143, 392], "002690991": [143, 392], "019928563": [143, 392], "0017596161": [143, 392], "001090835": [143, 392], "022683023": [143, 392], "005007528": [143, 392], "01540973": [143, 392], "031530287": [143, 392], "0054676617": [143, 392], "015980931": [143, 392], "0051471544": [143, 392], "019890483": [143, 392], "009386734": [143, 392], "0062133963": [143, 392], "031174876": [143, 392], "009405775": [143, 392], "015270104": [143, 392], "028864685": [143, 392], "021020193": [143, 392], "018303815": [143, 392], "0029210579": [143, 392], "012693353": [143, 392], "005102728": [143, 392], "049580235": [143, 392], "04300508": [143, 392], "1293065e": [143, 392], "0215787": [143, 392], "016894853": [143, 392], "0065434235": [143, 392], "041431103": [143, 392], "662815e": [143, 392], "03351045": [143, 392], "0128901": [143, 392], "010510096": [143, 392], "807209e": [143, 392], "01835459": [143, 392], "2869726e": [143, 392], "01309954": [143, 392], "011982525": [143, 392], "005813556": [143, 392], "0070194243": [143, 392], "008637827": [143, 392], "018456135": [143, 392], "5521466e": [143, 392], "019141577": [143, 392], "021896034": [143, 392], "02975322": [143, 392], "0043220865": [143, 392], "0015160623": [143, 392], "0052074483": [143, 392], "0149527695": [143, 392], "0213883": [143, 392], "018836936": [143, 392], "01105591": [143, 392], "0074636918": [143, 392], "022632249": [143, 392], "0036810723": [143, 392], "006286383": [143, 392], "025678653": [143, 392], "027773056": [143, 392], "03668379": [143, 392], "00445854": [143, 392], "013911915": [143, 392], "008015852": [143, 392], "0056739287": [143, 392], "010281616": [143, 392], "0057659554": [143, 392], "00872668": [143, 392], "010649723": [143, 392], "0787844e": [143, 392], "032164957": [143, 392], "023838118": [143, 392], "002641804": [143, 392], "030387888": [143, 392], "029626286": [143, 392], "016602905": [143, 392], "0021784967": [143, 392], "0010519617": [143, 392], "0116524985": [143, 392], "018519603": [143, 392], "007552545": [143, 392], "007419265": [143, 392], "0011090817": [143, 392], "0044331537": [143, 392], "009989669": [143, 392], "007533505": [143, 392], "0061943564": [143, 392], "0057088356": [143, 392], "028230017": [143, 392], "0042554466": [143, 392], "029321646": [143, 392], "024790118": [143, 392], "015676292": [143, 392], "018202268": [143, 392], "0075017717": [143, 392], "00865052": [143, 392], "0063942764": [143, 392], "0020118963": [143, 392], "036963046": [143, 392], "002335577": [143, 392], "020804405": [143, 392], "6888937": [143, 392], "019598536": [143, 392], "0034748053": [143, 392], "0067401705": [143, 392], "02835695": [143, 392], "023393849": [143, 392], "0071527045": [143, 392], "010586256": [143, 392], "0096088685": [143, 392], "009488282": [143, 392], "021337526": [143, 392], "6766098e": [143, 392], "019801632": [143, 392], "0022705235": [143, 392], "009558095": [143, 392], "0020753632": [143, 392], "708839e": [143, 392], "0066449703": [143, 392], "04130417": [143, 392], "011220924": [143, 392], "013391487": [143, 392], "027722282": [143, 392], "011366897": [143, 392], "4434706e": [143, 392], "015460504": [143, 392], "549375e": [143, 392], "01449581": [143, 392], "008529933": [143, 392], "018875016": [143, 392], "017745307": [143, 392], "009437508": [143, 392], "024587024": [143, 392], "013010687": [143, 392], "008993241": [143, 392], "005093208": [143, 392], "024218917": [143, 392], "024066597": [143, 392], "0037857925": [143, 392], "031047942": [143, 392], "015003543": [143, 392], "023266915": [143, 392], "03021018": [143, 392], "0069115306": [143, 392], "010154682": [143, 392], "011430364": [143, 392], "030311726": [143, 392], "01764376": [143, 392], "0020975766": [143, 392], "006746517": [143, 392], "009748495": [143, 392], "01665368": [143, 392], "003658859": [143, 392], "02789999": [143, 392], "0040682196": [143, 392], "0031289116": [143, 392], "029905539": [143, 392], "016882159": [143, 392], "0021689767": [143, 392], "023228835": [143, 392], "011773085": [143, 392], "014292715": [143, 392], "019827018": [143, 392], "029575512": [143, 392], "0015803224": [143, 392], "018405361": [143, 392], "002776671": [143, 392], "019370057": [143, 392], "027569963": [143, 392], "008460119": [143, 392], "012445833": [143, 392], "0028322043": [143, 392], "0052804346": [143, 392], "006422837": [143, 392], "009335961": [143, 392], "02354617": [143, 392], "0010345082": [143, 392], "018900402": [143, 392], "0029908712": [143, 392], "0068544107": [143, 392], "010148335": [143, 392], "007939693": [143, 392], "0072796377": [143, 392], "020537846": [143, 392], "010928977": [143, 392], "029880153": [143, 392], "0038492593": [143, 392], "002795711": [143, 392], "01892579": [143, 392], "029956313": [143, 392], "024612412": [143, 392], "00446806": [143, 392], "026452947": [143, 392], "017605681": [143, 392], "041177236": [143, 392], "02018243": [143, 392], "014648129": [143, 392], "021553313": [143, 392], "0015017823": [143, 392], "0034874987": [143, 392], "034170505": [143, 392], "036125284": [143, 392], "02805231": [143, 392], "018430749": [143, 392], "003404992": [143, 392], "009329614": [143, 392], "020766325": [143, 392], "012560072": [143, 392], "01707256": [143, 392], "011538258": [143, 392], "007711212": [143, 392], "01332802": [143, 392], "007412918": [143, 392], "022492621": [143, 392], "0059055826": [143, 392], "025754813": [143, 392], "01904003": [143, 392], "013353407": [143, 392], "0026005507": [143, 392], "022530701": [143, 392], "007895266": [143, 392], "842112e": [143, 392], "028103083": [143, 392], "013962688": [143, 392], "019979337": [143, 392], "02115982": [143, 392], "0029305778": [143, 392], "01340418": [143, 392], "01609517": [143, 392], "011880978": [143, 392], "016793307": [143, 392], "0048837676": [143, 392], "013036073": [143, 392], "025767507": [143, 392], "030337114": [143, 392], "022454541": [143, 392], "018824242": [143, 392], "0019785764": [143, 392], "006146756": [143, 392], "0021055099": [143, 392], "0014525956": [143, 392], "011157458": [143, 392], "005293128": [143, 392], "011468444": [143, 392], "021591393": [143, 392], "0051535014": [143, 392], "005597769": [143, 392], "1935701e": [143, 392], "012731433": [143, 392], "0034208586": [143, 392], "024688572": [143, 392], "0018103895": [143, 392], "001299482": [143, 392], "005461315": [143, 392], "024878971": [143, 392], "030565593": [143, 392], "016717145": [143, 392], "013226474": [143, 392], "008764761": [143, 392], "007355798": [143, 392], "0070638508": [143, 392], "005734222": [143, 392], "012084072": [143, 392], "023749264": [143, 392], "028813912": [143, 392], "015892077": [143, 392], "0033573918": [143, 392], "0052201413": [143, 392], "01672984": [143, 392], "0014105488": [143, 392], "02184526": [143, 392], "019560456": [143, 392], "0063752364": [143, 392], "008777454": [143, 392], "00418246": [143, 392], "013861141": [143, 392], "012877407": [143, 392], "009500975": [143, 392], "005804036": [143, 392], "0013859555": [143, 392], "025335932": [143, 392], "01779608": [143, 392], "01537165": [143, 392], "0019722297": [143, 392], "011081297": [143, 392], "0073875315": [143, 392], "0015795291": [143, 392], "015968239": [143, 392], "013454954": [143, 392], "0026592575": [143, 392], "0020944031": [143, 392], "014140395": [143, 392], "0023339903": [143, 392], "0064989966": [143, 392], "0030828982": [143, 392], "0046870206": [143, 392], "013239168": [143, 392], "017491441": [143, 392], "011106684": [143, 392], "029702445": [143, 392], "003696939": [143, 392], "013784981": [143, 392], "017250266": [143, 392], "0037762725": [143, 392], "021413686": [143, 392], "017047172": [143, 392], "019268509": [143, 392], "006898837": [143, 392], "013924608": [143, 392], "009266147": [143, 392], "0023577902": [143, 392], "020905953": [143, 392], "005264568": [143, 392], "0014875022": [143, 392], "0064513967": [143, 392], "003044818": [143, 392], "0073431046": [143, 392], "0012431552": [143, 392], "0021166166": [143, 392], "0019404964": [143, 392], "018646536": [143, 392], "6913787e": [143, 392], "01518125": [143, 392], "0013581888": [143, 392], "016755225": [143, 392], "5418405e": [143, 392], "0076921717": [143, 392], "016780613": [143, 392], "56008e": [143, 392], "010948017": [143, 392], "956349e": [143, 392], "006108676": [143, 392], "011290737": [143, 392], "027443029": [143, 392], "008910734": [143, 392], "012858367": [143, 392], "016844079": [143, 392], "017592987": [143, 392], "01476237": [143, 392], "0039793663": [143, 392], "008066626": [143, 392], "0018421229": [143, 392], "03422128": [143, 392], "016526746": [143, 392], "022200674": [143, 392], "0010051549": [143, 392], "004474407": [143, 392], "6767073e": [143, 392], "007749292": [143, 392], "026249854": [143, 392], "006670357": [143, 392], "014775063": [143, 392], "02589444": [143, 392], "0023530303": [143, 392], "0066068904": [143, 392], "0067147836": [143, 392], "0012542619": [143, 392], "018671922": [143, 392], "0022498968": [143, 392], "0048552076": [143, 392], "0031463648": [143, 392], "0217691": [143, 392], "011849245": [143, 392], "0026735375": [143, 392], "011024177": [143, 392], "01733912": [143, 392], "0073621445": [143, 392], "012407753": [143, 392], "0032939252": [143, 392], "0072288644": [143, 392], "014457729": [143, 392], "0011781019": [143, 392], "009615215": [143, 392], "0141150085": [143, 392], "025376e": [143, 392], "04615303": [143, 392], "031631835": [143, 392], "005131288": [143, 392], "006594197": [143, 392], "025386706": [143, 392], "028204631": [143, 392], "023482703": [143, 392], "013086847": [143, 392], "022314915": [143, 392], "2082416e": [143, 392], "023457317": [143, 392], "006013476": [143, 392], "0125029525": [143, 392], "0021404168": [143, 392], "023977743": [143, 392], "0033542186": [143, 392], "029423192": [143, 392], "0019960299": [143, 392], "0076477453": [143, 392], "080113e": [143, 392], "030413274": [143, 392], "008790147": [143, 392], "013493034": [143, 392], "078089505": [143, 392], "004842514": [143, 392], "015232024": [143, 392], "00825068": [143, 392], "036785338": [143, 392], "335175e": [143, 392], "03891782": [143, 392], "004680674": [143, 392], "005451795": [143, 392], "012134845": [143, 392], "02490436": [143, 392], "007101931": [143, 392], "026351402": [143, 392], "0043093935": [143, 392], "0059595294": [143, 392], "024561638": [143, 392], "019331977": [143, 392], "02385081": [143, 392], "008206253": [143, 392], "015942851": [143, 392], "027138388": [143, 392], "01521933": [143, 392], "0043728603": [143, 392], "025500946": [143, 392], "026173694": [143, 392], "0011558884": [143, 392], "023381157": [143, 392], "0016207825": [143, 392], "001237602": [143, 392], "0049916613": [143, 392], "0024085636": [143, 392], "015587438": [143, 392], "0048203007": [143, 392], "35144e": [143, 392], "012255432": [143, 392], "0048742476": [143, 392], "0062546497": [143, 392], "04051718": [143, 392], "0051090745": [143, 392], "016932933": [143, 392], "0016660026": [143, 392], "02774767": [143, 392], "050976507": [143, 392], "03043866": [143, 392], "0028655245": [143, 392], "0023292303": [143, 392], "0104275895": [143, 392], "004360167": [143, 392], "011144764": [143, 392], "024282385": [143, 392], "013988075": [143, 392], "016234798": [143, 392], "014698903": [143, 392], "037673872": [143, 392], "0054644886": [143, 392], "020461684": [143, 392], "012598153": [143, 392], "012363326": [143, 392], "002833791": [143, 392], "0029274046": [143, 392], "01243314": [143, 392], "0037413659": [143, 392], "012820287": [143, 392], "0070511578": [143, 392], "017364508": [143, 392], "0025545373": [143, 392], "0034843255": [143, 392], "009773882": [143, 392], "0010368882": [143, 392], "009894469": [143, 392], "330013e": [143, 392], "008237986": [143, 392], "0013804021": [143, 392], "0035890455": [143, 392], "029194713": [143, 392], "022721102": [143, 392], "026605267": [143, 392], "011151111": [143, 392], "0054200618": [143, 392], "0043919003": [143, 392], "0022181633": [143, 392], "0025402573": [143, 392], "015562051": [143, 392], "021984888": [143, 392], "025145533": [143, 392], "008422039": [143, 392], "0032590183": [143, 392], "008130092": [143, 392], "0019309763": [143, 392], "009278841": [143, 392], "981743e": [143, 392], "04363975": [143, 392], "008510893": [143, 392], "011360551": [143, 392], "025069373": [143, 392], "004252273": [143, 392], "011132071": [143, 392], "020474378": [143, 392], "014889303": [143, 392], "01896387": [143, 392], "0075461986": [143, 392], "012096765": [143, 392], "030489434": [143, 392], "012166579": [143, 392], "032393437": [143, 392], "0035763523": [143, 392], "009018627": [143, 392], "007438305": [143, 392], "0064196633": [143, 392], "025056679": [143, 392], "012230045": [143, 392], "821482e": [143, 392], "0124839125": [143, 392], "0014454556": [143, 392], "012744127": [143, 392], "007159051": [143, 392], "010402203": [143, 392], "010053135": [143, 392], "0042808335": [143, 392], "0025307373": [143, 392], "004128513": [143, 392], "010890896": [143, 392], "025716733": [143, 392], "024155451": [143, 392], "04023793": [143, 392], "015257411": [143, 392], "0129154865": [143, 392], "013264554": [143, 392], "028636204": [143, 392], "023520783": [143, 392], "004890114": [143, 392], "008022199": [143, 392], "016184025": [143, 392], "051535014": [143, 392], "011792125": [143, 392], "009291534": [143, 392], "031707995": [143, 392], "039476328": [143, 392], "004699714": [143, 392], "014216555": [143, 392], "01480045": [143, 392], "0065053436": [143, 392], "0044997935": [143, 392], "021705633": [143, 392], "0904366e": [143, 392], "019585844": [143, 392], "0036842457": [143, 392], "455769e": [143, 392], "006727477": [143, 392], "0108718565": [143, 392], "0046076872": [143, 392], "0303625": [143, 392], "02967706": [143, 392], "026554495": [143, 392], "014825836": [143, 392], "009786575": [143, 392], "009285187": [143, 392], "020931339": [143, 392], "003630299": [143, 392], "004693367": [143, 392], "009589829": [143, 392], "013886528": [143, 392], "017694535": [143, 392], "027493803": [143, 392], "004982141": [143, 392], "0071717445": [143, 392], "03297733": [143, 392], "007571585": [143, 392], "006276863": [143, 392], "016069785": [143, 392], "0464047e": [143, 392], "0025450173": [143, 392], "015358957": [143, 392], "018494215": [143, 392], "7068556e": [143, 392], "027646123": [143, 392], "0011114617": [143, 392], "013429567": [143, 392], "007920653": [143, 392], "0050011813": [143, 392], "013543808": [143, 392], "014381569": [143, 392], "0047346205": [143, 392], "018798856": [143, 392], "019674698": [143, 392], "012629886": [143, 392], "029803993": [143, 392], "009862735": [143, 392], "0033732585": [143, 392], "013048767": [143, 392], "009456548": [143, 392], "03815622": [143, 392], "286778e": [143, 392], "0040301397": [143, 392], "014254635": [143, 392], "0038809928": [143, 392], "016666373": [143, 392], "6997105e": [143, 392], "017351814": [143, 392], "015549357": [143, 392], "02952474": [143, 392], "00431574": [143, 392], "009818309": [143, 392], "470635e": [143, 392], "011404978": [143, 392], "025082065": [143, 392], "021908727": [143, 392], "018951176": [143, 392], "022936888": [143, 392], "013658048": [143, 392], "004671154": [143, 392], "0296009": [143, 392], "0127949": [143, 392], "018341895": [143, 392], "6842424e": [143, 392], "01292818": [143, 392], "0036429923": [143, 392], "030083247": [143, 392], "00215311": [143, 392], "024206225": [143, 392], "02619908": [143, 392], "009837349": [143, 392], "010256229": [143, 392], "008168173": [143, 392], "0100340955": [143, 392], "013150314": [143, 392], "02188334": [143, 392], "010935323": [143, 392], "008371267": [143, 392], "00857436": [143, 392], "0036144322": [143, 392], "009697721": [143, 392], "007863532": [143, 392], "018100722": [143, 392], "019446217": [143, 392], "023495397": [143, 392], "0037032857": [143, 392], "009380388": [143, 392], "027265321": [143, 392], "007140011": [143, 392], "015193944": [143, 392], "004556914": [143, 392], "013632661": [143, 392], "0056358487": [143, 392], "01040855": [143, 392], "0050519546": [143, 392], "008155479": [143, 392], "9020106e": [143, 392], "032571144": [143, 392], "0048076073": [143, 392], "0060293428": [143, 392], "016031705": [143, 392], "021781793": [143, 392], "0015866691": [143, 392], "0016088824": [143, 392], "024752038": [143, 392], "0019547765": [143, 392], "012369673": [143, 392], "015320877": [143, 392], "012706046": [143, 392], "009082094": [143, 392], "010249883": [143, 392], "019128883": [143, 392], "02543748": [143, 392], "0084982": [143, 392], "0032970984": [143, 392], "012991647": [143, 392], "022479929": [143, 392], "02316537": [143, 392], "0012312552": [143, 392], "0042840065": [143, 392], "018227655": [143, 392], "005731049": [143, 392], "02604676": [143, 392], "006689397": [143, 392], "006305423": [143, 392], "018075334": [143, 392], "019484296": [143, 392], "01783416": [143, 392], "0012130085": [143, 392], "015866691": [143, 392], "020626698": [143, 392], "039882515": [143, 392], "008682254": [143, 392], "0022546567": [143, 392], "009323268": [143, 392], "035871416": [143, 392], "014330796": [143, 392], "0145465825": [143, 392], "023216143": [143, 392], "011531911": [143, 392], "020372832": [143, 392], "00641649": [143, 392], "013531114": [143, 392], "016437892": [143, 392], "013124927": [143, 392], "019814324": [143, 392], "0015136823": [143, 392], "016247492": [143, 392], "004753661": [143, 392], "013823061": [143, 392], "007907959": [143, 392], "027113002": [143, 392], "009932549": [143, 392], "009659641": [143, 392], "0044807536": [143, 392], "009850042": [143, 392], "014191168": [143, 392], "042954307": [143, 392], "024701266": [143, 392], "01059895": [143, 392], "0047885673": [143, 392], "021629473": [143, 392], "006651317": [143, 392], "031098714": [143, 392], "0058262493": [143, 392], "0051249415": [143, 392], "0065180366": [143, 392], "0519563e": [143, 392], "009792922": [143, 392], "0423958": [143, 392], "010992444": [143, 392], "008739374": [143, 392], "002449817": [143, 392], "012045992": [143, 392], "014089622": [143, 392], "0018310162": [143, 392], "014406956": [143, 392], "033180423": [143, 392], "0052709146": [143, 392], "0016802826": [143, 392], "012750473": [143, 392], "018329201": [143, 392], "005750089": [143, 392], "048234742": [143, 392], "01771992": [143, 392], "009240761": [143, 392], "789961e": [143, 392], "017669147": [143, 392], "01730104": [143, 392], "0026529108": [143, 392], "022543395": [143, 392], "017288346": [143, 392], "007971426": [143, 392], "019065415": [143, 392], "007857186": [143, 392], "0481933e": [143, 392], "016488666": [143, 392], "709636e": [143, 392], "009348654": [143, 392], "0049281945": [143, 392], "0059436625": [143, 392], "020956725": [143, 392], "003538272": [143, 392], "0038905127": [143, 392], "0016485492": [143, 392], "0044141137": [143, 392], "01271874": [143, 392], "01483853": [143, 392], "01245218": [143, 392], "0023657237": [143, 392], "0037794458": [143, 392], "5497736e": [143, 392], "00882188": [143, 392], "015815917": [143, 392], "016767919": [143, 392], "005185235": [143, 392], "018049948": [143, 392], "007685825": [143, 392], "21934114": [143, 392], "012007912": [143, 392], "005039261": [143, 392], "037445392": [143, 392], "4307736e": [143, 392], "031403355": [143, 392], "0018468829": [143, 392], "0024656837": [143, 392], "01722488": [143, 392], "013213781": [143, 392], "011512871": [143, 392], "0015811158": [143, 392], "0035287521": [143, 392], "0062419563": [143, 392], "0048456877": [143, 392], "025120145": [143, 392], "023800036": [143, 392], "0269697e": [143, 392], "03554139": [143, 392], "01071319": [143, 392], "2110125e": [143, 392], "017313734": [143, 392], "03777542": [143, 392], "0019944431": [143, 392], "04402055": [143, 392], "02442201": [143, 392], "018976564": [143, 392], "005873849": [143, 392], "006924224": [143, 392], "003865126": [143, 392], "0057437425": [143, 392], "0038206992": [143, 392], "013163007": [143, 392], "01646328": [143, 392], "02446009": [143, 392], "018748082": [143, 392], "027239935": [143, 392], "0032479118": [143, 392], "03653147": [143, 392], "015206637": [143, 392], "018773468": [143, 392], "00643553": [143, 392], "010141989": [143, 392], "009183641": [143, 392], "02025859": [143, 392], "019852404": [143, 392], "006054729": [143, 392], "010630683": [143, 392], "009481935": [143, 392], "059881e": [143, 392], "03005786": [143, 392], "014851223": [143, 392], "014280022": [143, 392], "003274885": [143, 392], "0014168955": [143, 392], "025005905": [143, 392], "9089613e": [143, 392], "022302222": [143, 392], "008999587": [143, 392], "010097562": [143, 392], "024942439": [143, 392], "012807593": [143, 392], "019547764": [143, 392], "034957495": [143, 392], "026833748": [143, 392], "7683392e": [143, 392], "0068417173": [143, 392], "011182844": [143, 392], "016907547": [143, 392], "03013402": [143, 392], "0041062995": [143, 392], "014571969": [143, 392], "02070286": [143, 392], "011335164": [143, 392], "012725086": [143, 392], "8341785e": [143, 392], "0013653288": [143, 392], "017859548": [143, 392], "0056802756": [143, 392], "006556117": [143, 392], "0033002717": [143, 392], "011398631": [143, 392], "010954363": [143, 392], "055139925": [143, 392], "009424815": [143, 392], "004959928": [143, 392], "028788524": [143, 392], "0031241516": [143, 392], "0027465243": [143, 392], "036810722": [143, 392], "0031828582": [143, 392], "005543822": [143, 392], "0026053106": [143, 392], "6973375e": [143, 392], "017935708": [143, 392], "0015406557": [143, 392], "0023911104": [143, 392], "016945627": [143, 392], "0035636588": [143, 392], "02396505": [143, 392], "01911619": [143, 392], "0029448578": [143, 392], "033408906": [143, 392], "020550538": [143, 392], "01294722": [143, 392], "011500178": [143, 392], "011988872": [143, 392], "025424786": [143, 392], "011887325": [143, 392], "038587794": [143, 392], "003395472": [143, 392], "007946039": [143, 392], "019966645": [143, 392], "033713546": [143, 392], "018189576": [143, 392], "026859134": [143, 392], "012223699": [143, 392], "024802811": [143, 392], "099946e": [143, 392], "0010448216": [143, 392], "005020221": [143, 392], "012356979": [143, 392], "007590625": [143, 392], "03089562": [143, 392], "014521196": [143, 392], "017212186": [143, 392], "024917051": [143, 392], "020169739": [143, 392], "044680603": [143, 392], "005658062": [143, 392], "013835755": [143, 392], "3776127e": [143, 392], "0028496578": [143, 392], "006467263": [143, 392], "053007443": [143, 392], "011614418": [143, 392], "0056453687": [143, 392], "16145945": [143, 392], "0091963345": [143, 392], "024548944": [143, 392], "016425198": [143, 392], "015701678": [143, 392], "862344e": [143, 392], "023190755": [143, 392], "0074509983": [143, 392], "018088028": [143, 392], "010205456": [143, 392], "010383163": [143, 392], "033028103": [143, 392], "0023324036": [143, 392], "019052723": [143, 392], "016590212": [143, 392], "4408938e": [143, 392], "02324153": [143, 392], "019623924": [143, 392], "0383847": [143, 392], "002686231": [143, 392], "0010852817": [143, 392], "0076223584": [143, 392], "002762391": [143, 392], "030540207": [143, 392], "0037667525": [143, 392], "011005137": [143, 392], "0017850028": [143, 392], "005984916": [143, 392], "0029353378": [143, 392], "02555172": [143, 392], "00855532": [143, 392], "010287963": [143, 392], "2544602e": [143, 392], "0065624635": [143, 392], "017808774": [143, 392], "03528752": [143, 392], "013188394": [143, 392], "027925376": [143, 392], "0014248289": [143, 392], "009342308": [143, 392], "0017247093": [143, 392], "023596942": [143, 392], "004709234": [143, 392], "037369233": [143, 392], "016082479": [143, 392], "0011963486": [143, 392], "00222451": [143, 392], "014165782": [143, 392], "0014414889": [143, 392], "0058865426": [143, 392], "2633766e": [143, 392], "012274472": [143, 392], "011328817": [143, 392], "0020372833": [143, 392], "0013026553": [143, 392], "00635937": [143, 392], "00651169": [143, 392], "0024672705": [143, 392], "0026640175": [143, 392], "0033669118": [143, 392], "0074763848": [143, 392], "311968e": [143, 392], "023444623": [143, 392], "017656455": [143, 392], "0065243836": [143, 392], "021832567": [143, 392], "02320345": [143, 392], "015092397": [143, 392], "034119733": [143, 392], "025983294": [143, 392], "021324834": [143, 392], "015663598": [143, 392], "00417294": [143, 392], "014965463": [143, 392], "014203862": [143, 392], "0074319583": [143, 392], "007381185": [143, 392], "0035446188": [143, 392], "009310574": [143, 392], "02562788": [143, 392], "01101783": [143, 392], "009050361": [143, 392], "010484709": [143, 392], "005835769": [143, 392], "0036620323": [143, 392], "0055565154": [143, 392], "028712364": [143, 392], "033586614": [143, 392], "027087616": [143, 392], "019509684": [143, 392], "005166195": [143, 392], "020042805": [143, 392], "019903177": [143, 392], "010738577": [143, 392], "038816273": [143, 392], "014990849": [143, 392], "025412092": [143, 392], "030464048": [143, 392], "009158255": [143, 392], "046609994": [143, 392], "9095457e": [143, 392], "0016675893": [143, 392], "012921833": [143, 392], "2828116e": [143, 392], "0033288319": [143, 392], "10784273": [143, 392], "022898808": [143, 392], "020563232": [143, 392], "020487072": [143, 392], "0063117696": [143, 392], "005299475": [143, 392], "013442261": [143, 392], "0112590045": [143, 392], "015282797": [143, 392], "013581888": [143, 392], "023723876": [143, 392], "00847916": [143, 392], "025221692": [143, 392], "028686978": [143, 392], "8655227e": [143, 392], "005169368": [143, 392], "0765446e": [143, 392], "011436711": [143, 392], "004963101": [143, 392], "0067592105": [143, 392], "007527158": [143, 392], "029854767": [143, 392], "0072098244": [143, 392], "011246311": [143, 392], "009945242": [143, 392], "017326428": [143, 392], "004052353": [143, 392], "011684231": [143, 392], "311375e": [143, 392], "026986068": [143, 392], "012801247": [143, 392], "0023815904": [143, 392], "047600072": [143, 392], "006886144": [143, 392], "004464887": [143, 392], "9809546e": [143, 392], "018684616": [143, 392], "022924196": [143, 392], "0070575043": [143, 392], "0037730993": [143, 392], "025830973": [143, 392], "029651672": [143, 392], "0046140337": [143, 392], "041710358": [143, 392], "0058960626": [143, 392], "0018706829": [143, 392], "0065878504": [143, 392], "0067338236": [143, 392], "0011431951": [143, 392], "020233205": [143, 392], "008218946": [143, 392], "015930157": [143, 392], "0024022171": [143, 392], "0051439814": [143, 392], "0120777255": [143, 392], "00895516": [143, 392], "010116602": [143, 392], "038638566": [143, 392], "0056231553": [143, 392], "840722e": [143, 392], "009754842": [143, 392], "0074256114": [143, 392], "0011773085": [143, 392], "7314436e": [143, 392], "02014435": [143, 392], "010186416": [143, 392], "0067211306": [143, 392], "015828611": [143, 392], "0043665133": [143, 392], "0112526575": [143, 392], "031073328": [143, 392], "018126108": [143, 392], "014432343": [143, 392], "0021118566": [143, 392], "017389894": [143, 392], "023635022": [143, 392], "0062736897": [143, 392], "040187154": [143, 392], "006905184": [143, 392], "0068163304": [143, 392], "0087838005": [143, 392], "010072175": [143, 392], "00832684": [143, 392], "01061799": [143, 392], "01268066": [143, 392], "0137088215": [143, 392], "007926999": [143, 392], "01711064": [143, 392], "00885996": [143, 392], "015422424": [143, 392], "0052011013": [143, 392], "022327607": [143, 392], "0092280675": [143, 392], "022251448": [143, 392], "0045251804": [143, 392], "5886433e": [143, 392], "020360138": [143, 392], "021870647": [143, 392], "013251861": [143, 392], "027595349": [143, 392], "01094167": [143, 392], "011550951": [143, 392], "0033034452": [143, 392], "026072146": [143, 392], "030032473": [143, 392], "00411582": [143, 392], "012185619": [143, 392], "0096215615": [143, 392], "002618004": [143, 392], "006575157": [143, 392], "03675995": [143, 392], "010986097": [143, 392], "023673104": [143, 392], "011900018": [143, 392], "016044399": [143, 392], "0040206197": [143, 392], "018722696": [143, 392], "0038873393": [143, 392], "011163804": [143, 392], "01919235": [143, 392], "015790531": [143, 392], "0013692954": [143, 392], "011836552": [143, 392], "005096381": [143, 392], "031200262": [143, 392], "0358968": [143, 392], "009126521": [143, 392], "013696128": [143, 392], "014711596": [143, 392], "018608455": [143, 392], "03922246": [143, 392], "0179484": [143, 392], "0069178776": [143, 392], "010909937": [143, 392], "013569194": [143, 392], "019839711": [143, 392], "024447398": [143, 392], "01086551": [143, 392], "010294309": [143, 392], "024726652": [143, 392], "016679065": [143, 392], "0013145554": [143, 392], "004617207": [143, 392], "004690194": [143, 392], "013315327": [143, 392], "0112653505": [143, 392], "0016009491": [143, 392], "003998406": [143, 392], "025272466": [143, 392], "0030051514": [143, 392], "007869879": [143, 392], "031251036": [143, 392], "005375635": [143, 392], "0046203807": [143, 392], "0030099114": [143, 392], "0071273176": [143, 392], "012020606": [143, 392], "016285572": [143, 392], "033865865": [143, 392], "04290353": [143, 392], "009107481": [143, 392], "007400225": [143, 392], "018253041": [143, 392], "016704453": [143, 392], "003957153": [143, 392], "022644943": [143, 392], "0074446513": [143, 392], "012122152": [143, 392], "0013796088": [143, 392], "019014644": [143, 392], "026909908": [143, 392], "003035298": [143, 392], "012153885": [143, 392], "020499766": [143, 392], "006010303": [143, 392], "004026966": [143, 392], "3466855e": [143, 392], "001078935": [143, 392], "0051725414": [143, 392], "0014906756": [143, 392], "009526362": [143, 392], "016310958": [143, 392], "010357776": [143, 392], "0145338895": [143, 392], "015993625": [143, 392], "025259772": [143, 392], "036937658": [143, 392], "0044014202": [143, 392], "008713987": [143, 392], "003931766": [143, 392], "0053597684": [143, 392], "02797615": [143, 392], "020093577": [143, 392], "004550567": [143, 392], "024434704": [143, 392], "0029956312": [143, 392], "6632223e": [143, 392], "51248e": [143, 392], "028915457": [143, 392], "023470009": [143, 392], "008675907": [143, 392], "014013462": [143, 392], "0031527115": [143, 392], "0018865496": [143, 392], "0033986452": [143, 392], "040974144": [143, 392], "002589444": [143, 392], "0018516429": [143, 392], "049504075": [143, 392], "00884092": [143, 392], "004541047": [143, 392], "014076929": [143, 392], "015473197": [143, 392], "0027211376": [143, 392], "031327195": [143, 392], "041126464": [143, 392], "018595763": [143, 392], "0104593225": [143, 392], "01938275": [143, 392], "0027592175": [143, 392], "setenableoutputlog": [144, 146, 227, 394, 476, 500], "setevaluationlogextend": [144, 146, 394], "setoutputlogspath": [144, 146, 149, 151, 227, 394, 400, 476, 500], "assum": [146, 394], "getniter": [147, 148, 189, 190, 397, 439], "niter": [147, 148, 189, 190, 397, 439], "poscol": [147, 148, 189, 190, 241, 397, 439, 490], "setiter": [147, 148, 397], "setposcolumn": [147, 148, 189, 190, 397, 439], "member": [148, 233, 397, 483], "helper": [148, 157, 190, 197, 219, 243, 244, 245, 250, 397, 405, 439, 445, 468, 493, 494, 495, 507, 510], "datasetpath": [148, 397], "pierr": [148, 243, 397, 493], "vinken": [148, 243, 397, 493], "34": [148, 243, 245, 397, 493, 495], "md": [148, 243, 397, 493], "vb": [148, 241, 243, 397, 490, 493, 510], "41": [148, 150, 243, 245, 397, 399, 493, 495], "43": [148, 150, 243, 245, 397, 399, 493, 495], "dt": [148, 243, 244, 397, 493, 494, 510], "49": [148, 243, 397, 493], "anc": [148, 243, 397, 493, 510], "trainingperceptrondf": [148, 397], "trainedpo": [148, 397], "cd": [148, 241, 243, 397, 490, 493], "pos_anc": [148, 397], "25": [148, 150, 243, 245, 397, 399, 493, 495], "33": [148, 238, 245, 397, 488, 495], "detectlist": [149, 150, 399], "setcustombound": [149, 150, 151, 399, 400], "setcustomboundsstrategi": [149, 150, 399], "setdetectlist": [149, 150, 399], "setexplodesent": [149, 150, 151, 399, 400], "setsplitlength": [149, 150, 151, 399, 400], "setuseabbrevi": [149, 150, 399], "setusecustomboundsonli": [149, 150, 151, 399, 400], "custombound": [149, 150, 151, 399, 400], "customboundsstrategi": [149, 150, 399], "explodesent": [149, 150, 151, 241, 242, 399, 400, 490, 491], "splitlength": [149, 150, 151, 399, 400], "useabbrevi": [149, 150, 399], "usecustomboundsonli": [149, 150, 151, 399, 400], "epochsnumb": [149, 151, 400], "impossiblepenultim": [149, 151, 400], "modelarchitectur": [149, 151, 400], "setepochsnumb": [149, 151, 400], "setimpossiblepenultim": [149, 151, 400], "ii": [150, 399], "abbrevi": [150, 399], "period": [150, 399], "geo": [150, 399], "1026": [150, 399], "253": [150, 399], "553": [150, 399], "ellipsi": [150, 399], "quotat": [150, 399], "mark": [150, 151, 190, 399, 400, 439], "exclam": [150, 399], "breaker": [150, 399], "pragmaticcontentformatt": [150, 399], "explicitli": [150, 151, 181, 219, 399, 400, 430, 468, 504], "prepend": [150, 193, 399, 441], "break": [150, 167, 229, 231, 399, 416, 479], "append": [150, 177, 230, 399, 425, 480, 504], "forcibli": [150, 151, 399, 400], "99999": [150, 151, 187, 399, 400, 436], "nhow": [150, 399], "third": [150, 181, 226, 241, 250, 399, 430, 477, 490], "sentencedetectordl": [151, 165, 307, 400, 414], "imposs": [151, 190, 400, 439], "penultim": [151, 400], "eo": [151, 400], "stefan": [151, 400], "schweter": [151, 400], "sajawel": [151, 400], "ahm": [151, 400], "broken": [151, 229, 230, 400, 479], "moder": [151, 400], "lack": [151, 400], "easier": [151, 196, 400, 444, 506, 510], "polit": [151, 400], "successor": [151, 400], "great": [151, 400], "heritag": [151, 172, 400, 421], "bequeath": [151, 400], "nelson": [151, 400], "mandela": [151, 400], "epochs_numb": [151, 400], "impossible_penultim": [151, 400], "model_architectur": [151, 400], "output_logs_path": [151, 400], "validation_split": [151, 400], "sentencedl": [151, 400], "sentencesdl": [151, 400], "helen": [151, 400], "peopl": [151, 400], "decrementmultipli": [152, 153, 402], "enablescor": [152, 153, 402], "incrementmultipli": [152, 153, 402], "negativemultipli": [152, 153, 402], "positivemultipli": [152, 153, 402], "reversemultipli": [152, 153, 402], "featurelimit": [152, 154, 403], "importantfeatureratio": [152, 154, 403], "prunecorpu": [152, 154, 403], "sentimentcol": [152, 154, 403], "setprunecorpu": [152, 154, 403], "setsentimentcol": [152, 154, 403], "unimportantfeaturestep": [152, 154, 403], "els": [153, 203, 402, 452], "cool": [153, 402], "superb": [153, 402], "uninspir": [153, 402], "sentimentscor": [153, 402], "nice": [153, 227, 402, 476, 500], "multipli": 153, "decrement": 153, "increment": [153, 186, 435], "revert": 153, "entri": [153, 194, 202, 234, 402, 442, 451, 484], "sttr": [153, 402], "sda": [153, 154, 369, 402, 403], "pragmat": [153, 402], "viveknsenti": [154, 403], "analys": [154, 403], "vivek": [154, 403], "narayanan": [154, 403], "give": [154, 403], "transit": [154, 177, 403, 425], "unfrequ": [154, 403], "scope": [154, 403], "naiv": [154, 403], "bay": [154, 403], "vivekn": [154, 403], "train_senti": [154, 403], "result_senti": [154, 403], "final_senti": [154, 403], "cast": [154, 192, 403, 440], "horribl": [154, 403], "go": [154, 403, 504], "again": [154, 185, 403, 434], "anyon": [154, 403], "protagonist": [154, 403], "music": [154, 403], "boost": 154, "dirt": 154, "lookahead": 154, "unimport": 154, "sentiment_vivekn": [154, 403], "setcach": [155, 158, 406], "usecach": [155, 158, 173, 406, 422], "setsrclang": [155, 164, 167, 413, 416], "settgtlang": [155, 164, 167, 413, 416], "srclang": [155, 164, 167, 413, 416], "tgtlang": [155, 164, 167, 413, 416], "langid": [155, 165, 307, 414], "setlangid": [155, 165, 414], "setmaxinputlength": [155, 165, 307, 414], "maxnewtoken": [155, 173, 422], "setmaxnewtoken": [155, 173, 422], "setstopateo": [155, 173, 422], "setusecach": [155, 173, 422], "stopateo": [155, 173, 422], "settabl": [156, 157, 404, 405], "explan": [156, 157, 177, 404, 405, 425, 507], "phi3": [156, 170, 404, 419], "5_mini_4k_instruct_q4_gguf": [156, 404], "autoggufmodeltest": [156, 404], "nthreadsdraft": [156, 157, 207, 214, 404, 405, 463], "draft": [156, 157, 214, 404, 405, 463], "nthreadsbatchdraft": [156, 157, 207, 214, 404, 405, 463], "ndraft": [156, 157, 207, 214, 404, 405, 463], "specul": [156, 157, 214, 404, 405, 463], "psplit": [156, 157, 207, 214, 404, 405, 463], "ngpulayersdraft": [156, 157, 207, 214, 404, 405, 463], "modeldraft": [156, 157, 207, 214, 404, 405, 463], "modelalia": [156, 157, 207, 214, 404, 405, 463], "lookupcachestaticfilepath": [156, 157, 207, 214, 404, 405, 463], "updat": [156, 157, 177, 214, 404, 405, 425, 463], "lookupcachedynamicfilepath": [156, 157, 207, 214, 404, 405, 463], "inputprefixbo": [156, 157, 207, 214, 404, 405, 463], "preced": [156, 157, 214, 404, 405, 463, 504], "systemprompt": [156, 157, 207, 214, 404, 405, 463], "chattempl": [156, 157, 191, 203, 207, 214, 404, 405, 452, 463], "chat": [156, 157, 160, 162, 163, 166, 169, 170, 171, 203, 214, 404, 405, 408, 411, 412, 415, 418, 419, 420, 452, 463], "templat": [156, 157, 203, 214, 404, 405, 452, 463], "inputprefix": [156, 157, 207, 214, 404, 405, 463], "inputsuffix": [156, 157, 207, 214, 404, 405, 463], "infil": [156, 157, 214, 404, 405, 463], "cacheprompt": [156, 157, 207, 214, 404, 405, 463], "rememb": [156, 157, 177, 214, 404, 405, 425, 463], "reprocess": [156, 157, 214, 404, 405, 463], "npredict": [156, 157, 207, 214, 404, 405, 463], "minp": [156, 157, 207, 214, 404, 405, 463], "min": [156, 157, 177, 214, 404, 405, 425, 463], "tfsz": [156, 157, 207, 214, 404, 405, 463], "tail": [156, 157, 214, 404, 405, 463], "free": [156, 157, 165, 214, 307, 404, 405, 414, 463], "typicalp": [156, 157, 207, 214, 404, 405, 463], "typic": [156, 157, 161, 214, 231, 404, 405, 409, 463, 481], "dynatemprang": [156, 157, 214, 404, 405], "dynatempexpon": [156, 157, 214, 404, 405], "expon": [156, 157, 214, 404, 405, 463], "repeatlastn": [156, 157, 207, 214, 404, 405, 463], "repeatpenalti": [156, 157, 207, 214, 404, 405, 463], "mirostat": [156, 157, 207, 214, 404, 405, 463], "mirostattau": [156, 157, 207, 214, 404, 405, 463], "entropi": [156, 157, 214, 404, 405, 463], "tau": [156, 157, 214, 404, 405, 463], "mirostateta": [156, 157, 207, 214, 404, 405, 463], "eta": [156, 157, 214, 404, 405, 463], "penalizenl": [156, 157, 207, 214, 404, 405, 463], "newlin": [156, 157, 177, 214, 404, 405, 425, 463], "nkeep": [156, 157, 207, 214, 404, 405, 463], "rng": [156, 157, 214, 404, 405, 463], "nprob": [156, 157, 207, 214, 404, 405, 463], "minkeep": [156, 157, 207, 214, 404, 405, 463], "sampler": [156, 157, 207, 214, 404, 405, 463], "least": [156, 157, 190, 214, 404, 405, 439, 463], "bnf": [156, 157, 214, 404, 405, 463], "penaltyprompt": [156, 157, 207, 214, 404, 405, 463], "overrid": [156, 157, 214, 225, 229, 336, 404, 405, 463, 475, 479], "ignoreeo": [156, 157, 207, 214, 404, 405, 463], "impli": [156, 157, 214, 404, 405, 463], "inf": [156, 157, 214, 404, 405, 463], "disabletokenid": [156, 157, 207, 214, 404, 405, 463], "stopstr": [156, 157, 207, 214, 404, 405, 463], "usechattempl": [156, 157, 207, 214, 404, 405, 463], "setnpredict": [156, 157, 207, 214, 404, 405, 463], "setpenalizenl": [156, 157, 207, 214, 404, 405, 463], "78": [156, 170, 243, 404, 419, 493], "ingest": [157, 405], "At": [157, 203, 229, 405, 452, 479, 505], "hasllamacppinferenceproperti": [157, 405], "hasllamacppmodelproperti": [157, 405], "preprocess": [157, 227, 229, 405, 476, 479, 500], "loadimagesasbyt": [157, 191, 200, 405, 448], "llava_v1": [157, 405], "5_7b_q4_0_gguf": [157, 405], "autoggufvisionmodeltest": [157, 405], "caption_docu": [157, 405], "imagespath": [157, 405], "setminkeep": [157, 207, 214, 405, 463], "setminp": [157, 207, 214, 405, 463], "setnprob": [157, 207, 214, 405, 463], "setrepeatlastn": [157, 207, 214, 405, 463], "setrepeatpenalti": [157, 207, 214, 405, 463], "setstopstr": [157, 207, 214, 405, 463], "settfsz": [157, 207, 214, 405, 463], "settypicalp": [157, 207, 214, 405, 463], "depict": [157, 405], "ornat": [157, 405], "ceil": [157, 405], "decor": [157, 405], "wall": [157, 405], "chair": [157, 405], "throughout": [157, 405], "cushion": [157, 405], "surfac": [157, 405], "possibli": [157, 405], "bed": [157, 405], "sofa": [157, 405], "scene": [157, 405], "sleep": [157, 405], "hold": [157, 201, 405, 450, 508], "swim": [157, 405], "aquarium": [157, 405], "seem": [157, 405], "babi": [157, 405], "adult": [157, 405], "young": [157, 405], "gather": [157, 233, 405, 483], "neck": [157, 405], "grass": [157, 405], "speci": [157, 405], "held": [157, 405], "black": [157, 405], "white": [157, 177, 405, 425], "chest": [157, 405], "someth": [157, 405], "anim": [157, 405], "vicin": [157, 405], "collar": [157, 405], "stare": [157, 405], "front": [157, 405], "owner": [157, 405], "comfort": [157, 405], "seat": [157, 405], "yellow": [157, 405], "wheel": [157, 405], "tire": [157, 405], "park": [157, 405], "bull": [157, 405], "horn": [157, 405], "modelpath": [157, 405], "mmprojpath": [157, 405], "captur": [158, 175, 406, 423], "past": [158, 165, 234, 307, 406, 414, 484], "incorpor": [158, 170, 406, 419], "versatil": [158, 166, 172, 406, 415, 421], "valuabl": [158, 172, 406, 421], "summari": [158, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 173, 406, 408, 409, 411, 413, 415, 416, 417, 418, 419, 420, 422], "distilbart_xsum_12_6": [158, 406], "barttestspec": [158, 406], "ab": [158, 406], "1910": [158, 406], "13461": [158, 406], "pytorch": [158, 164, 167, 406, 413, 416], "fairseq": [158, 164, 167, 406, 413, 416], "nois": [158, 406], "reconstruct": [158, 206, 406, 455], "tranform": [158, 406], "randomli": [158, 406], "dialogu": [158, 162, 163, 169, 406, 411, 412, 418], "roug": [158, 406], "bleu": [158, 164, 167, 406, 413, 416], "ablat": [158, 406], "influenc": [158, 177, 406, 425], "rich": [158, 173, 406, 422], "rise": [158, 173, 406, 422], "methodologi": [158, 173, 406, 422], "landscap": [158, 173, 406, 422], "systemat": [158, 173, 406, 422], "dozen": [158, 173, 406, 422], "insight": [158, 173, 406, 422], "coloss": [158, 173, 406, 422], "facilit": [158, 173, 406, 422], "use_cach": [158, 406], "command": [159, 407], "c4ai": [159, 407], "highli": [159, 171, 407, 420], "rag": [159, 175, 407, 423], "c4ai_command_r_v01_int4": [159, 407], "bos_token": [159, 203, 407, 452], "start_of_turn_token": [159, 407], "user_token": [159, 407], "end_of_turn_token": [159, 407], "chatbot_token": [159, 407], "excit": [159, 162, 407, 411], "whatev": [159, 407], "minicpm": [160, 408], "unveil": [160, 408], "2b": [160, 408], "4b": [160, 171, 408, 420], "close": [160, 162, 163, 168, 169, 408, 411, 412, 417, 418], "mistral": [160, 166, 408, 415], "7b": [160, 162, 166, 168, 169, 170, 171, 172, 408, 411, 415, 417, 418, 419, 420, 421], "llama2": [160, 162, 408, 411], "13b": [160, 162, 166, 171, 172, 408, 411, 415, 420, 421], "mpt": [160, 408], "30b": [160, 408], "falcon": [160, 408], "40b": [160, 408], "mtbench": [160, 408], "closest": [160, 408], "70b": [160, 162, 163, 408, 411, 412], "vicuna": [160, 408], "33b": [160, 172, 408, 421], "v0": [160, 166, 408, 415], "zephyr": [160, 408], "dpo": [160, 408], "multimodel": [160, 408], "phi": [160, 169, 170, 408, 418, 419], "6b": [160, 408], "qwen": [160, 171, 408, 420], "vl": [160, 408], "deploi": [160, 165, 170, 307, 408, 414, 419, 501], "smartphon": [160, 408], "verbal": [160, 408], "cpm": [160, 408], "mini_cpm_2b_8bit": [160, 408], "shengdinghu": [160, 408], "notion": [160, 408], "d4d3a8c426424654a4e80e42a711cb20": [160, 408], "openbmb": [160, 408], "leonardo": [160, 161, 162, 166, 168, 169, 170, 171, 408, 409, 411, 415, 417, 418, 419, 420], "student": [160, 168, 169, 170, 171, 408, 417, 418, 419, 420], "california": [160, 168, 169, 170, 171, 408, 417, 418, 419, 420], "lo": [160, 408], "passion": [160, 168, 169, 170, 171, 408, 417, 418, 419, 420], "cultur": [160, 408], "plai": [160, 408], "basketbal": [160, 408], "caus": [161, 187, 409, 436], "goal": [161, 167, 190, 409, 416, 439], "direct": [161, 164, 167, 170, 409, 413, 416, 419], "10x": [161, 409], "synthet": [161, 169, 170, 409, 418, 419], "unpreced": [161, 409], "prime": [161, 409], "lengthi": [161, 409], "benefit": [161, 409], "suffici": [161, 409], "learner": [161, 409], "taskspecif": [161, 409], "webpag": [161, 229, 409, 479, 501], "webtext": [161, 409], "coqa": [161, 409], "exceed": [161, 163, 409, 412], "127": [161, 409], "fashion": [161, 175, 409, 423], "5b": [161, 171, 409, 420], "underfit": [161, 409], "reflect": [161, 164, 409, 413], "paragraph": [161, 177, 229, 230, 239, 409, 425, 479, 489], "promis": [161, 409], "1776": [161, 162, 409, 411], "came": [161, 162, 409, 411], "kingdom": [161, 162, 409, 411], "4k": [162, 170, 411, 419], "reinforc": [162, 163, 169, 171, 411, 412, 418, 420], "feedback": [162, 163, 169, 171, 411, 412, 418, 420], "rlhf": [162, 163, 171, 411, 412, 420], "safeti": [162, 163, 167, 169, 170, 411, 412, 416, 418, 419], "chatgpt": [162, 411], "llam2": [162, 169, 411, 418], "facebookresearch": [162, 163, 411, 412], "substitut": [162, 169, 411, 418], "llama_2_7b_chat_hf_int4": [162, 411], "cut": [163, 203, 412, 452], "8b": [163, 171, 412, 420], "expans": [163, 412], "offer": [163, 166, 168, 412, 415, 417, 504, 506, 509], "known": [163, 412], "llama3": [163, 412], "llama_3_7b_instruct_hf_int4": [163, 412], "latest": [163, 412], "meta": [163, 227, 412, 476, 502], "commerci": [163, 165, 168, 307, 412, 414, 417], "aim": [163, 167, 175, 412, 416, 423], "foster": [163, 412], "collabor": [163, 172, 412, 421], "minion": [163, 412], "chatbot": [163, 412], "respond": [163, 203, 412, 452], "speak": [163, 412], "oooh": [163, 412], "yeah": [163, 412], "bana": [163, 412], "na": [163, 412], "m2m100": [164, 413], "seq": [164, 167, 413, 416], "900": [164, 413], "m2m100_418m": [164, 413], "beyond": [164, 167, 413, 416], "worldwid": [164, 413], "spars": [164, 167, 413, 416], "focu": [164, 167, 170, 413, 416, 419], "wmt": [164, 413], "m2m": [164, 413], "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": [164, 167, 413, 416], "life": [164, 167, 413, 416], "chocol": [164, 167, 413, 416], "marian": [165, 307, 414], "mainli": [165, 307, 414], "academ": [165, 170, 307, 414, 419], "notabl": [165, 166, 307, 414, 415], "edinburgh": [165, 307, 414], "adam": [165, 307, 414], "mickiewicz": [165, 307, 414], "pozna\u0144": [165, 307, 414], "contributor": [165, 307, 414], "mariannmt": [165, 307, 414], "engin": [165, 166, 184, 207, 214, 307, 414, 415, 432, 463], "behind": [165, 167, 168, 169, 171, 307, 414, 416, 417, 418, 420], "opus_mt_en_fr": [165, 307, 414], "differenti": [165, 307, 414], "toolkit": [165, 307, 414], "capit": [165, 177, 231, 307, 414, 425], "quell": [165, 307, 414], "capital": [165, 307, 414], "devrait": [165, 307, 414], "savoir": [165, 307, 414], "fran\u00e7ai": [165, 307, 414], "34b": [166, 172, 415, 421], "strike": [166, 415], "balanc": [166, 214, 415, 463], "rival": [166, 170, 415, 419], "codellama": [166, 172, 415, 421], "latter": [166, 415], "gqa": [166, 171, 415, 420], "quicker": [166, 415], "compromis": [166, 415], "streamlin": [166, 227, 415, 476, 500], "smoother": [166, 415], "slide": [166, 171, 230, 239, 415, 420, 480, 489], "swa": [166, 171, 415, 420], "reliabl": [166, 227, 415, 476, 500], "mistral_7b": [166, 415], "mistralai": [166, 415], "coupl": [166, 415], "da": [166, 415], "vinci": [166, 415], "invent": [166, 415], "microscop": [166, 415], "No": [166, 167, 242, 415, 416, 491, 503], "late": [166, 415], "16th": [166, 415], "nllb": [167, 416], "nllb_distilled_600m_8int": [167, 416], "driven": [167, 416], "erad": [167, 416], "barrier": [167, 416], "solidifi": [167, 416], "artifici": [167, 168, 169, 170, 171, 416, 417, 418, 419, 420], "intellig": [167, 168, 169, 170, 171, 416, 417, 418, 419, 420], "effort": [167, 168, 416, 417], "coalesc": [167, 416], "leav": [167, 416], "vast": [167, 416], "major": [167, 416], "mostli": [167, 416], "safe": [167, 416], "ethic": [167, 416], "consider": [167, 416], "exploratori": [167, 416], "interview": [167, 416], "nativ": [167, 416, 501], "speaker": [167, 229, 230, 416, 479, 480], "narrow": [167, 416], "gap": [167, 416], "gate": [167, 168, 416, 417], "expert": [167, 416], "counteract": [167, 416], "overfit": [167, 416], "flore": [167, 416], "assess": [167, 169, 170, 416, 418, 419], "groundwork": [167, 416], "realiz": [167, 416], "zho_han": [167, 416], "eng_latn": [167, 416], "olmo": [168, 417], "dolma": [168, 417], "soon": [168, 417], "olmo_1b_int4": [168, 417], "lm": [168, 177, 417, 425], "surg": [168, 417], "interfac": [168, 227, 229, 417, 476, 479, 500, 508], "undisclos": [168, 417], "scientif": [168, 172, 417, 421], "risk": [168, 417], "believ": [168, 417], "hope": [168, 417], "empow": [168, 417], "strengthen": [168, 417], "wave": [168, 417], "innov": [168, 170, 417, 419], "skill": [168, 169, 170, 171, 417, 418, 419, 420], "textbook": [169, 418], "augment": [169, 418], "websit": [169, 170, 418, 419], "educ": [169, 418], "sens": [169, 170, 418, 419, 509], "showcas": [169, 170, 171, 418, 419, 420], "nearli": [169, 418], "hasn": [169, 418], "intent": [169, 204, 418, 453], "craft": [169, 418], "vital": [169, 418], "societ": [169, 418], "phi2": [169, 418], "medium": [170, 419], "14b": [170, 171, 419, 420], "underw": [170, 419], "post": [170, 419], "math": [170, 171, 172, 419, 420, 421], "phi_3_mini_128k_instruct": [170, 419], "big": [170, 229, 239, 419, 479, 489], "trillion": [170, 172, 419, 421], "mixtral": [170, 419], "8x7b": [170, 419], "69": [170, 243, 419, 493], "mmlu": [170, 419], "mt": [170, 419], "bench": [170, 419], "enough": [170, 419], "compos": [170, 419], "heavili": [170, 419], "8t": [170, 419], "moreov": [170, 419], "qwen1": [171, 420], "72b": [171, 420], "stabl": [171, 420], "32k": [171, 420], "swiglu": [171, 420], "qkv": [171, 420], "qwenlm": [171, 420], "revolution": [171, 420], "thought": [171, 420], "instal": [171, 227, 250, 420, 476, 502], "encompass": [171, 420], "distinct": [171, 420], "multitud": [171, 420], "possess": [171, 420], "plan": [171, 190, 420, 439], "impress": [171, 420], "bigger": [171, 420], "fall": [171, 420], "qwen_7": [171, 420], "5b_chat": [171, 420], "starcoder2": [172, 421], "predecessor": [172, 421], "starcoder2transform": [172, 421], "bigcod": [172, 421], "starcod": [172, 421], "partnership": [172, 421], "swh": [172, 421], "stack": [172, 421], "digit": [172, 421], "archiv": [172, 421], "619": [172, 421], "15b": [172, 421], "thoroughli": [172, 421], "starcoderbas": [172, 421], "twice": [172, 421], "although": [172, 421], "deepseekcod": [172, 421], "openrail": [172, 421], "transpar": [172, 421], "regard": [172, 213, 421, 462], "persist": [172, 241, 421, 490], "swhid": [172, 421], "def": [172, 219, 421, 468], "t5": [173, 422], "reconsid": [173, 422], "hyper": [173, 422], "t5_small": [173, 422], "encount": [173, 422], "aggregationmethod": [174, 175, 423], "asretriev": [174, 175, 423], "asretrieverqueri": [174, 175, 423], "bucketlength": [174, 175, 423], "identityrank": [174, 175, 423], "numhasht": [174, 175, 423], "numberofneighbour": [174, 175, 423], "setaggregationmethod": [174, 175, 423], "setbucketlength": [174, 175, 423], "setidentityrank": [174, 175, 423], "setnumhasht": [174, 175, 423], "setnumberofneighbour": [174, 175, 423], "setsimilaritymethod": [174, 175, 423], "setvisibledist": [174, 175, 423], "similaritymethod": [174, 175, 423], "visibledist": [174, 175, 423], "extractnearestneighbor": [174, 175, 423], "getoutputcol": [174, 175, 191, 192, 194, 195, 196, 200, 202, 207, 210, 423, 440, 442, 443, 444, 448, 451, 458], "outputcol": [174, 175, 191, 192, 194, 195, 196, 197, 200, 202, 203, 207, 210, 231, 238, 423, 440, 442, 443, 444, 445, 448, 451, 452, 458, 481, 488], "setextractnearestneighbor": [174, 175, 423], "documentsimilarityrank": [175, 423], "lsh": [175, 423], "lib": [175, 423], "execut": [175, 201, 336, 423, 450, 504, 508], "ranker": [175, 423], "jupyt": [175, 227, 249, 423, 476, 500], "doc_similarity_rank": [175, 207, 211, 423, 459], "enablecach": [175, 207, 214, 423, 463], "rdd": [175, 214, 423, 463], "neighbour": [175, 423], "brp": [175, 423], "bucket": [175, 423], "euclidean": [175, 423], "hash": [175, 423], "ident": [175, 423], "debug": [175, 423], "document_similarity_ranker_finish": [175, 423], "finished_doc_similarity_rankings_id": [175, 423], "finished_doc_similarity_rankings_neighbor": [175, 423], "docsimrankerpipelin": [175, 423], "1510101612": [175, 423], "1634839239": [175, 423], "12448559591306324": [175, 423], "612640902": [175, 423], "1274183715": [175, 423], "1220122862046063": [175, 423], "1320876223": [175, 423], "1293373212": [175, 423], "17848855164122393": [175, 423], "1548374770": [175, 423], "1719102856": [175, 423], "23297156732534166": [175, 423], "wise": [175, 423], "inclus": [175, 423], "visibl": [175, 423], "addregexclass": [176, 177, 425], "addvocabclass": [176, 177, 425], "casestrategi": [176, 177, 425], "classcount": [176, 177, 425], "compoundcount": [176, 177, 425], "errorthreshold": [176, 177, 425], "finalr": [176, 177, 425], "initialr": [176, 177, 425], "languagemodelclass": [176, 177, 425], "maxcandid": [176, 177, 425], "maxsentlen": [176, 177, 425], "maxwindowlen": [176, 177, 425], "setcasestrategi": [176, 177, 425], "setclasscount": [176, 177, 425], "setcompoundcount": [176, 177, 425], "setepoch": [176, 177, 425], "seterrorthreshold": [176, 177, 425], "setfinalr": [176, 177, 425], "setinitialr": [176, 177, 425], "setlanguagemodelclass": [176, 177, 425], "setmaxcandid": [176, 177, 425], "setmaxsentlen": [176, 177, 425], "setmaxwindowlen": [176, 177, 425], "settradeoff": [176, 177, 425], "setvalidationfract": [176, 177, 425], "setweighteddistpath": [176, 177, 425], "setwordmaxdist": [176, 177, 425], "tradeoff": [176, 177, 425], "validationfract": [176, 177, 425], "weighteddistpath": [176, 177, 425], "wordmaxdist": [176, 177, 425], "comparelowcas": [176, 177, 425], "correctsymbol": [176, 177, 425], "gamma": [176, 177, 425], "getwordclass": [176, 177, 425], "idsvocab": [176, 177, 425], "setclass": [176, 177, 425], "setcomparelowcas": [176, 177, 425], "setcorrectsymbol": [176, 177, 425], "setgamma": [176, 177, 425], "setidsvocab": [176, 177, 425], "setvocabfreq": [176, 177, 425], "setvocabid": [176, 177, 425], "setweight": [176, 177, 425], "updateregexclass": [176, 177, 425], "updatevocabclass": [176, 177, 425], "vocabfreq": [176, 177, 425], "vocabid": [176, 177, 425], "doublevari": [176, 178, 427], "dupslimit": [176, 178, 179, 427, 428], "frequencyprior": [176, 178, 427], "intersect": [176, 178, 427], "reductlimit": [176, 178, 427], "setdoublevari": [176, 178, 427], "setfrequencyprior": [176, 178, 427], "setshortcircuit": [176, 178, 427], "shortcircuit": [176, 178, 427], "vowelswaplimit": [176, 178, 427], "wordsizeignor": [176, 178, 427], "deletesthreshold": [176, 179, 428], "frequencythreshold": [176, 179, 189, 190, 428, 439], "maxeditdist": [176, 179, 428], "setdeletesthreshold": [176, 179, 428], "setfrequencythreshold": [176, 179, 189, 190, 428, 439], "setmaxeditdist": [176, 179, 428], "spell": [176, 177, 178, 179, 201, 206, 247, 369, 425, 426, 427, 428, 450, 455, 507, 508, 509], "contextspellcheck": [177, 425], "noisi": [177, 425], "surround": [177, 205, 425, 454], "edit": [177, 178, 179, 425, 427, 428], "subword": [177, 425], "checker": [177, 178, 179, 425, 427, 428, 507], "uppercas": [177, 425], "perplex": [177, 425], "nlm": [177, 425], "datapoint": [177, 425], "vocab": [177, 425], "compound": [177, 425], "levenshtein": [177, 178, 179, 425, 427, 428], "depth": [177, 425, 507], "spellcheck": [177, 178, 179, 425, 427, 428], "1650": [177, 425], "_name_": [177, 425], "userdist": [177, 425], "sentlen": [177, 425], "fraction": [177, 425], "dist": [177, 425], "spellcheck_dl": [177, 425], "decis": [177, 425], "usenewlin": [177, 425], "cold": [177, 425], "dreari": [177, 425], "smow": [177, 425], "norvigsweet": [178, 427], "norvig": [178, 427], "bayesian": [178, 427], "tokenpattern": [178, 427], "ham": [178, 427], "duplic": [178, 179, 427], "vowel": [178, 427], "corrector": [178, 427], "gummi": [178, 179, 427, 428], "gummic": [178, 179, 427, 428], "gummier": [178, 179, 427, 428], "gummiest": [178, 179, 427, 428], "gummifer": [178, 179, 427, 428], "basi": [178, 179, 427, 428], "sensitivti": 178, "token_pattern": [178, 179, 427, 428], "symmetr": [178, 179, 427, 428], "delet": [178, 179, 427, 428, 504], "damerau": [178, 179, 427, 428], "transpos": [178, 179, 427, 428], "spellcheck_norvig": [178, 427], "symspel": [178, 179, 427, 428], "somtim": [178, 427], "wrrite": [178, 179, 427, 428], "wordz": [178, 179, 427, 428], "erong": [178, 179, 427, 428], "sometim": [178, 179, 427, 428, 504], "wrong": [178, 179, 427, 428], "symmetricdelet": [179, 428], "teach": [179, 428], "patttern": [179, 428], "spellcheck_sd": [179, 428], "spmetim": [179, 428], "employ": [180, 429], "mllib": [181, 430, 501], "stopwordsremov": [181, 430], "cleantoken": [181, 195, 206, 430, 443, 455], "stopwords_en": [181, 430], "forth": [181, 430], "defaultparamswrit": 182, "defaultparamsread": 182, "assertiondlapproach": [182, 431], "medicalnerapproach": [182, 431], "srt": [182, 431], "greaph": [182, 431], "infix": [183, 185, 187, 434, 436], "setinfix": [183, 185, 434], "setprefix": [183, 185, 434], "positionalmask": [183, 186, 435], "setpositionalmask": [183, 186, 435], "settolowercas": [183, 186, 189, 190, 435, 439], "tolowercas": [183, 186, 189, 190, 435, 439], "addcontextchar": [183, 187, 436], "addexcept": [183, 187, 436], "addinfixpattern": [183, 187, 436], "addsplitchar": [183, 187, 436], "casesensitiveexcept": [183, 187, 436], "contextchar": [183, 187, 436], "exceptionspath": [183, 187, 436], "getcasesensitiveexcept": [183, 187, 436], "getcontextchar": [183, 187, 436], "getexcept": [183, 187, 436], "getinfixpattern": [183, 187, 436], "getprefixpattern": [183, 187, 436], "getsplitchar": [183, 187, 436], "getsuffixpattern": [183, 187, 436], "infixpattern": [183, 187, 436], "prefixpattern": [183, 187, 436], "setcasesensitiveexcept": [183, 187, 436], "setexcept": [183, 187, 436], "setexceptionspath": [183, 187, 436], "setinfixpattern": [183, 187, 436], "setprefixpattern": [183, 187, 436], "setsplitchar": [183, 187, 436], "setsuffixpattern": [183, 187, 436], "settargetpattern": [183, 187, 436], "splitchar": [183, 187, 436], "suffixpattern": [183, 187, 436], "targetpattern": [183, 187, 436], "flatten": [184, 432], "artist": [184, 432], "benezar": [184, 432], "robert": [184, 432], "farendel": [184, 432], "graduat": [184, 432], "luca": [184, 432], "qam": [185, 434], "guarante": [186, 435], "flag": [186, 435], "eventu": [186, 435], "nthi": [186, 435], "tokenizedsent": [187, 436], "rulefactori": [187, 213, 436, 462], "grab": [187, 436], "sub": [187, 436], "won": [187, 436], "didn": [187, 436], "jane": [187, 436], "boyfriend": [187, 436], "piec": [187, 436], "token_rul": [187, 436], "factori": 187, "17": [188, 243, 245, 437, 493, 495], "ambiguitythreshold": [189, 190, 439], "enableregextoken": [189, 190, 439], "getambiguitythreshold": [189, 190, 439], "getfrequencythreshold": [189, 190, 439], "setambiguitythreshold": [189, 190, 439], "setenableregextoken": [189, 190, 439], "setniter": [189, 190, 439], "wordsegment": [190, 439], "korean": [190, 439], "japanes": [190, 439], "correspond": [190, 227, 439, 476], "rr": [190, 439], "likewis": [190, 439], "themselv": [190, 439], "\u4e0a\u6d77": [190, 439], "\u8ba1\u5212": [190, 439], "\u5230": [190, 439], "\u672c": [190, 439], "\u4e16\u7eaa": [190, 439], "\u672b": [190, 439], "\u5b9e\u73b0": [190, 439], "\u4eba\u5747": [190, 439], "\u56fd\u5185": [190, 439], "\u751f\u4ea7": [190, 439], "\u603b\u503c": [190, 439], "\u4e94\u5343": [190, 439], "\u7f8e\u5143": [190, 439], "\u4e0a": [190, 439], "\u6d77": [190, 439], "\u8ba1": [190, 439], "\u5212": [190, 439], "\u4e16": [190, 439], "\u7eaa": [190, 439], "\u5b9e": [190, 439], "\u73b0": [190, 439], "\u4eba": [190, 439], "\u5747": [190, 439], "\u56fd": [190, 439], "\u5185": [190, 439], "\u751f": [190, 439], "\u4ea7": [190, 439], "\u603b": [190, 439], "ll\u503c": [190, 439], "\u4e94": [190, 439], "\u5343": [190, 439], "\u7f8e": [190, 439], "\u5143": [190, 439], "shanghai": [190, 439], "dollar": [190, 439], "capita": [190, 439], "gdp": [190, 439], "tip": [190, 439], "frame": [190, 439], "frequent": [190, 439], "xue": [190, 439], "nianwen": [190, 439], "volum": [190, 439], "februari": [190, 439], "aclweb": [190, 439], "aclanthologi": [190, 439], "o03": [190, 439], "4002": [190, 439], "chinese_train": [190, 439], "utf8": [190, 439], "\u5341": [190, 439], "\u56db": [190, 439], "\u4e0d": [190, 439], "\u662f": [190, 439], "trainingdataset": [190, 439], "plit": [190, 439], "words_seg": [190, 439], "wordseg_pku": [190, 439], "zh": [190, 439], "\u7136\u800c": [190, 439], "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": [190, 439], "\u9019\u6a23": [190, 439], "\u7684": [190, 439], "\u8655\u7406": [190, 439], "\u4e5f": [190, 439], "\u884d\u751f": [190, 439], "\u4e86": [190, 439], "\u4e00\u4e9b": [190, 439], "\u554f\u984c": [190, 439], "chunkcol": [191, 193, 441], "failonmiss": [191, 193, 441], "isarrai": [191, 193, 441], "setchunkcol": [191, 193, 441], "setfailonmiss": [191, 193, 441], "setisarrai": [191, 193, 441], "setstartcol": [191, 193, 441], "setstartcolbytokenindex": [191, 193, 441], "startcol": [191, 193, 441], "startcolbytokenindex": [191, 193, 441], "cleanupmod": [191, 194, 202, 442, 451], "idcol": [191, 194, 202, 442, 451], "metadatacol": [191, 194, 202, 442, 451], "setidcol": [191, 194, 202, 442, 451], "setmetadatacol": [191, 194, 202, 442, 451], "cleanannot": [191, 195, 196, 197, 443, 444, 445], "outputasvector": [191, 195, 443], "annotationsplitsymbol": [191, 196, 444], "includemetadata": [191, 196, 444], "outputasarrai": [191, 196, 197, 444, 445], "parseembeddingsvector": [191, 196, 444], "setannotationsplitsymbol": [191, 196, 444], "setincludemetadata": [191, 196, 444, 505], "setoutputasarrai": [191, 196, 197, 444, 445], "setparseembeddingsvector": [191, 196, 444], "setvaluesplitsymbol": [191, 196, 444], "valuesplitsymbol": [191, 196, 444], "settextcol": [191, 200, 448], "textcol": [191, 200, 241, 242, 448, 490, 491], "fullannot": [191, 201, 232, 233, 450, 483], "fullannotateimag": [191, 201, 232, 233, 450, 483], "getignoreunsupport": [191, 201, 450], "setignoreunsupport": [191, 201, 450], "addassist": [191, 203, 452], "setaddassist": [191, 203, 452], "setchattempl": [191, 203, 207, 214, 452, 463], "csvdelimit": [191, 205, 454], "escapecsvdelimit": [191, 205, 454], "setcsvdelimit": [191, 205, 454], "setescapecsvdelimit": [191, 205, 454], "inferschema": [192, 440], "librispeech_asr_dummy_clean_audio_array_parquet": [192, 440], "float_arrai": [192, 440], "stringtyp": [193, 219, 441], "fail": [193, 336, 441], "chunkassembl": [193, 441], "cleanup": [194, 202, 442, 451], "inplac": [194, 202, 442, 451], "inplace_ful": [194, 202, 442, 451], "shrink_ful": [194, 202, 442, 451], "each_ful": [194, 202, 442, 451], "delete_ful": [194, 202, 442, 451], "usabl": [195, 443], "lda": [195, 443], "forest": [195, 443], "featurecol": [195, 443], "gloveembed": [195, 443], "finished_sentence_embed": [195, 443], "resultwiths": [195, 443], "1619900017976761": [195, 443], "045552998781204224": [195, 443], "03229299932718277": [195, 443], "685609996318": [195, 443], "42416998744010925": [195, 443], "1378999948501587": [195, 443], "5717899799346924": [195, 443], "5078899860382": [195, 443], "08621499687433243": [195, 443], "15772999823093414": [195, 443], "06067200005054474": [195, 443], "395359992980": [195, 443], "4970499873161316": [195, 443], "7164199948310852": [195, 443], "40119001269340515": [195, 443], "05761000141501": [195, 443], "08170200139284134": [195, 443], "7159299850463867": [195, 443], "20677000284194946": [195, 443], "0295659992843": [195, 443], "ouput": 195, "finishedresult": [197, 445], "java_obj": [198, 223, 225, 446, 472, 475], "javaobject": [198, 199, 225, 446, 447, 475], "abc": [198, 225], "classmethod": [200, 221, 448, 470], "png": [200, 448], "gif": [200, 448], "bmp": [200, 448], "parse_embed": [201, 233, 450, 483], "principl": [201, 450, 508], "everyth": [201, 450, 508, 509], "happi": [201, 450, 503, 505, 508, 509], "prp": [201, 242, 243, 450, 491, 493, 503, 508, 509, 510], "rb": [201, 243, 450, 493, 503, 508, 509, 510], "optional_target": [201, 233, 450, 483], "explain_document_pipelin": [201, 219, 233, 450, 468, 483, 503, 508, 509], "dict_kei": [201, 233, 450, 483], "path_to_imag": [201, 233, 450, 483], "unsupport": [201, 450], "text2": [202, 451], "document1": [202, 451], "document2": [202, 451], "assembl": [203, 230, 452, 480], "messag": [203, 336, 452, 502], "df": [203, 229, 452, 479], "custom_tool": [203, 452], "endif": [203, 452], "tools_in_user_messag": [203, 452], "date_str": [203, 452], "jul": [203, 452], "2024": [203, 452], "block": [203, 229, 230, 452, 479, 480], "slot": [203, 452], "system_messag": [203, 452], "builtin": [203, 452], "builtin_tool": [203, 452], "environ": [203, 249, 336, 452, 501], "ipython": [203, 452], "reject": [203, 241, 452, 490, 510], "equalto": [203, 452], "code_interpret": [203, 452], "decemb": [203, 452], "2023": [203, 452], "argument": [203, 234, 247, 336, 452, 484, 497], "tojson": [203, 452], "indent": [203, 452], "endfor": [203, 452], "guidanc": [203, 452], "plug": [203, 452], "first_user_messag": [203, 452], "raise_except": [203, 452], "proper": [203, 452], "tool_cal": [203, 452], "elif": [203, 452], "python_tag": [203, 452], "arg_nam": [203, 452], "arg_val": [203, 452], "eom_id": [203, 452], "add_generation_prompt": [203, 452], "nhello": [203, 452], "arg": [204, 221, 223, 248, 453, 472, 498], "kwarg": [204, 229, 453, 479], "javaestim": [204, 208, 225], "decid": [204, 230, 453], "behav": [204, 453], "exactli": [204, 453], "pipeline_model": [204, 227, 238, 450, 453, 476, 488, 500], "intend": [204, 453], "tab": [205, 227, 454, 476, 500], "escap": [205, 454], "quot": [205, 454], "defailt": [205, 454], "comma": [205, 454], "table_csv": [205, 454], "csv_data": [205, 454], "input_format": [205, 454], "cleantext": [206, 455], "opensourc": [206, 455], "getlazyannot": [207, 210, 458], "lazyannot": [207, 210, 458], "setlazyannot": [207, 210, 458], "features": [207, 214, 463], "paddingsid": [207, 214, 463], "paddingvalu": [207, 214, 463], "returnattentionmask": [207, 214, 463], "samplingr": [207, 214, 463], "setdonorm": [207, 214, 463], "setfeatures": [207, 214, 463], "setpaddingsid": [207, 214, 463], "setpaddingvalu": [207, 214, 463], "setreturnattentionmask": [207, 214, 463], "setsamplingr": [207, 214, 463], "getbatchs": [207, 214, 463], "contradictionidparam": [207, 214, 463], "entailmentidparam": [207, 214, 463], "setcontradictionidparam": [207, 214, 463], "setentailmentidparam": [207, 214, 463], "getcasesensit": [207, 214, 463], "getactiv": [207, 214, 463], "getmultilabel": [207, 214, 463], "multilabel": [207, 214, 463], "setactiv": [207, 214, 463], "setmultilabel": [207, 214, 463], "getuseclstoken": [207, 214, 463], "setuseclstoken": [207, 214, 463], "getdimens": [207, 214, 463], "getenablecach": [207, 214, 463], "setenablecach": [207, 214, 463], "getengin": [207, 214, 463], "setnreturnsequ": [207, 214, 463], "setdores": [207, 214, 463], "setfeatureextractortyp": [207, 214, 463], "setimagemean": [207, 214, 463], "setimagestd": [207, 214, 463], "setresampl": [207, 214, 463], "dynamictemperatureexpon": [207, 214, 463], "dynamictemperaturerang": [207, 214, 463], "setcacheprompt": [207, 214, 463], "setdisabletokenid": [207, 214, 463], "setdynamictemperatureexpon": [207, 214, 463], "setdynamictemperaturerang": [207, 214, 463], "setembed": [207, 214, 463], "setgrammar": [207, 214, 463], "setignoreeo": [207, 214, 463], "setinputprefix": [207, 214, 463], "setinputprefixbo": [207, 214, 463], "setinputsuffix": [207, 214, 463], "setlookupcachedynamicfilepath": [207, 214, 463], "setlookupcachestaticfilepath": [207, 214, 463], "setloraadapt": [207, 214, 463], "setmirostat": [207, 214, 463], "setmirostateta": [207, 214, 463], "setmirostattau": [207, 214, 463], "setmodelalia": [207, 214, 463], "setmodeldraft": [207, 214, 463], "setndraft": [207, 214, 463], "setngpulayersdraft": [207, 214, 463], "setnkeep": [207, 214, 463], "setnthreadsbatchdraft": [207, 214, 463], "setnthreadsdraft": [207, 214, 463], "setpsplit": [207, 214, 463], "setpenaltyprompt": [207, 214, 463], "setsampl": [207, 214, 463], "setsystemprompt": [207, 214, 463], "settokenbia": [207, 214, 463], "settokenidbia": [207, 214, 463], "setusechattempl": [207, 214, 463], "max_length_limit": [207, 214, 463], "getmaxsentencelength": [207, 214, 463], "getstoragepath": [207, 217, 466], "storagepath": [207, 217, 466], "savestorag": [207, 217, 466], "enableinmemorystorag": [207, 217, 466], "getenableinmemorystorag": [207, 217, 466], "getincludestorag": [207, 217, 466], "includestorag": [207, 217, 466], "setenableinmemorystorag": [207, 217, 466], "setincludestorag": [207, 217, 466], "getstorageref": [207, 217, 466], "storageref": [207, 217, 466], "javamlwrit": [208, 209, 216, 222, 238], "javamodel": [209, 225], "lazili": [210, 458], "renam": 210, "lazi": 210, "cov_obj": [212, 460], "recal": [214, 463], "loraadapt": [214, 463], "lora": [214, 463], "tokenbia": [214, 463], "tokenidbia": [214, 463], "fo": [218, 467], "output_column": [219, 468], "vbz": [219, 241, 468, 490, 510], "f": [219, 227, 468, 476, 500], "filter_po": [219, 468], "epeu": [219, 468], "output_typ": [219, 468], "udf": [219, 468], "userdefinedfunct": [219, 468], "nnp_token": [219, 468], "lambda": [219, 468], "annotatyon_typ": [219, 468], "structfield": 219, "integertyp": 219, "maptyp": 219, "floattyp": 219, "chunks_df": [219, 468], "pos_chunk": [219, 468], "getdatafram": [220, 223, 472], "new_java_arrai": [220, 223, 472], "new_java_array_integ": [220, 223, 472], "new_java_array_str": [220, 223, 472], "new_java_obj": [220, 223, 472], "spark_vers": [220, 223, 472], "getparamvalu": [220, 224, 474], "getter_attr": [220, 224, 474], "setparamvalu": [220, 224, 474], "transform_recurs": [220, 225, 475], "kwd": 221, "javamlread": [221, 238, 470], "mlreader": [221, 470], "clazz": [221, 470], "rl": [221, 470], "javatransform": [222, 238], "javawrapp": [223, 472], "jdf": [223, 472], "pylist": [223, 472], "java_class": [223, 472], "todo": [223, 472], "paramnam": [224, 474], "log_asset": [226, 227, 476], "log_asset_data": [226, 227, 476], "log_completed_run": [226, 227, 476], "log_metr": [226, 227, 476, 500], "log_paramet": [226, 227, 476], "log_pipeline_paramet": [226, 227, 476, 500], "log_visu": [226, 227, 476, 500], "parti": [226, 250, 477], "workspac": [227, 476], "project_nam": [227, 476, 500], "comet_mod": [227, 476, 500], "experiment_id": [227, 476], "experiment_kwarg": [227, 476], "logger": [227, 476, 500], "practition": [227, 476, 500], "lifecycl": [227, 476, 500, 502], "track": [227, 476, 500, 501], "outputlogpath": [227, 476, 500], "onlin": [227, 476, 500], "reus": [227, 231, 476, 481], "importerror": [227, 476], "output_log_path": [227, 476, 500], "embd": [227, 476, 500], "logdir": [227, 476, 500], "attribut": [227, 336], "comet_ml": [227, 476, 500], "submit": [227, 249, 476, 500], "outstand": [227, 476], "asset_path": [227, 476], "upload": [227, 247, 476, 497], "asset": [227, 476], "attach": [227, 229, 230, 239, 393, 394, 458, 463, 474, 476, 479, 480, 489], "log_file_path": [227, 476], "sklearn": [227, 476, 500], "multilabelbinar": [227, 476, 500], "classification_report": [227, 476, 500], "preds_df": [227, 476, 500], "topanda": [227, 476, 500], "mlb": [227, 476, 500], "y_true": [227, 476, 500], "fit_transform": [227, 476, 500], "y_pred": [227, 476, 500], "output_dict": [227, 476, 500], "html": [227, 229, 230, 231, 236, 239, 476, 479, 480, 481, 489, 500], "viz": [227, 476, 500], "colum": [227, 476, 500], "ner_chunk": [227, 476, 500], "sparknlp_displai": [227, 476, 500], "nervisu": [227, 476, 500], "idx": [227, 476, 500], "enumer": [227, 476, 500], "label_col": [227, 476, 500], "document_col": [227, 476, 500], "return_html": [227, 476, 500], "interv": [227, 476], "refresh": [227, 476], "partition_text": [228, 229, 479], "partition_url": [228, 229, 479], "addattachmentcont": [228, 230, 480], "getaddattachmentcont": [228, 230, 480], "setaddattachmentcont": [228, 230, 480], "appendcel": [228, 230, 480], "cellsepar": [228, 230, 480], "getappendcel": [228, 230, 480], "getcellsepar": [228, 230, 480], "setappendcel": [228, 230, 480], "setcellsepar": [228, 230, 480], "gettimeout": [228, 230, 480], "sethead": [228, 230, 231, 480, 481], "settimeout": [228, 230, 480], "timeout": [228, 229, 230, 479, 480], "getincludeslidenot": [228, 230, 480], "includeslidenot": [228, 230, 480], "setincludeslidenot": [228, 230, 480], "getgroupbrokenparagraph": [228, 230, 480], "getmaxlinecount": [228, 230, 480], "getparagraphsplit": [228, 230, 480], "getshortlinewordthreshold": [228, 230, 480], "getthreshold": [228, 230, 480], "gettitlelengths": [228, 230, 480], "groupbrokenparagraph": [228, 230, 480], "maxlinecount": [228, 230, 480], "paragraphsplit": [228, 230, 480], "setgroupbrokenparagraph": [228, 230, 480], "setmaxlinecount": [228, 230, 480], "setparagraphsplit": [228, 230, 480], "setshortlinewordthreshold": [228, 230, 480], "settitlelengths": [228, 230, 480], "shortlinewordthreshold": [228, 230, 480], "titlelengths": [228, 230, 480], "contentpath": [228, 231, 481], "contenttyp": [228, 231, 481], "getcontentpath": [228, 231, 481], "getcontenttyp": [228, 231, 481], "getincludepagebreak": [228, 231, 481], "getinfertablestructur": [228, 231, 481], "getstorecont": [228, 231, 481], "gettitlefonts": [228, 231, 481], "includepagebreak": [228, 231, 481], "infertablestructur": [228, 231, 481], "setcontentpath": [228, 231, 481], "setcontenttyp": [228, 231, 481], "setincludepagebreak": [228, 231, 481], "setinfertablestructur": [228, 231, 481], "setstorecont": [228, 231, 481], "settitlefonts": [228, 231, 481], "storecont": [228, 231, 481], "titlefonts": [228, 231, 481], "docx": [229, 231, 479, 481], "xlsx": [229, 231, 479, 481], "powerpoint": [229, 231, 239, 479, 481, 489], "ppt": [229, 231, 236, 239, 479, 481, 489], "pptx": [229, 231, 479, 481], "eml": [229, 231, 479, 481], "msg": [229, 231, 479, 481], "content_typ": [229, 479], "store_cont": [229, 479], "fetch": [229, 230, 479], "title_font_s": [229, 479], "titl": [229, 230, 231, 239, 244, 247, 479, 481, 489, 494, 497, 510], "include_page_break": [229, 479], "group_broken_paragraph": [229, 479], "title_length_s": [229, 479], "qualifi": [229, 230, 479], "paragraph_split": [229, 479], "short_line_word_threshold": [229, 479], "ratio": [229, 230, 479], "switch": [229, 479], "max_line_count": [229, 479], "include_slide_not": [229, 479], "infer_table_structur": [229, 479], "append_cel": [229, 479], "cell_separ": [229, 479], "add_attachment_cont": [229, 479], "txt_directori": [229, 479], "txtfile": [229, 479], "partition_df": [229, 479], "ema": [229, 479], "sev": [229, 479], "wikip": [229, 479], "wikipedi": [229, 479], "sparknlp_partition_reader_demo": [229, 479], "ipynb": [229, 479], "raw_text": [229, 479], "fox": [229, 479], "walk": [229, 479], "lane": [229, 479], "met": [229, 479], "text_df": [229, 479], "narrativetext": [229, 239, 479, 489], "elementtyp": [229, 239, 479, 489], "urls_df": [229, 479], "narr": [230, 480], "fragment": 230, "heurist": [230, 231], "layout": [230, 231, 238, 488], "smoothli": [231, 481], "workflow": [231, 481, 500], "seamless": [231, 481], "blizzard": [231, 481], "blizz": [231, 481], "juego": [231, 481], "gmail": [231, 481], "im": [231, 481], "mime": 231, "manual": [231, 249, 503], "bold": 231, "center": 231, "from_disk": [232, 233, 483], "clearcach": [232, 234, 484], "downloadmodel": [232, 234, 484], "downloadmodeldirectli": [232, 234, 484], "downloadpipelin": [232, 234, 484], "showavailableannot": [232, 234, 484], "showpublicmodel": [232, 234, 484, 504], "showpublicpipelin": [232, 234, 484, 509], "showuncategorizedresourc": [232, 234, 484], "disk_loc": [233, 483], "light_model": [233, 483], "onto_100": [234, 484], "onto_300": [234, 484], "ner_dl_bert": [234, 484], "similarli": [234, 484], "check_spel": [234, 484, 509], "match_datetim": [234, 484, 509], "clear": [234, 484], "j_dwn": [234, 484], "pythonresourcedownload": [234, 484], "obj": [234, 242, 484, 491], "unzip": [234, 247, 484, 497], "filer": [234, 484], "pdf_layout_text_stripp": [236, 237, 486], "pdf_text_stripp": [236, 237, 486], "onlypagenum": [236, 238, 488], "pagenumcol": [236, 238, 488], "partitionnum": [236, 238, 488], "setonlypagenum": [236, 238, 488], "setpagenumcol": [236, 238, 488], "setpartitionnum": [236, 238, 488], "setsort": [236, 238, 488], "setsplitpag": [236, 238, 488], "setstoresplittedpdf": [236, 238, 488], "settextstripp": [236, 238, 488], "sort": [236, 238, 488], "splitpag": [236, 238, 488], "storesplittedpdf": [236, 238, 488], "textstripp": [236, 238, 488], "stripper": [237, 238, 486], "pdflayouttextstripp": [237, 486], "pdftextstripp": [237, 486], "hasinputcol": 238, "hasoutputcol": 238, "pdf_path": [238, 488], "data_fram": [238, 488], "binaryfil": [238, 488], "pdf_df": [238, 239, 488, 489], "modificationtim": [238, 488], "paula": [238, 488], "2025": [238, 488], "height_dimens": [238, 488], "width_dimens": [238, 488], "pagenum": [238, 488], "html_df": [239, 489], "Or": [239, 489], "shorthand": [239, 489], "email_df": [239, 489], "docpath": [239, 489], "doc_df": [239, 489], "filepath": [239, 489], "simplifi": [239, 489], "sent_to": [239, 489], "danilo": [239, 489], "htmlpath": [239, 489], "pagenumb": [239, 489], "illustr": [239, 489], "literatur": [239, 489], "permiss": [239, 489], "pdfpath": [239, 489], "pptdf": [239, 489], "txtdf": [239, 489], "analyt": [239, 489], "xlsdf": [239, 489], "financi": [239, 489], "sheetnam": [239, 489], "readjsonfil": [240, 245, 495], "documentcol": [241, 242, 490, 491], "sentencecol": [241, 242, 490, 491], "tokencol": [241, 490], "conlllabelindex": [241, 490], "conllposindex": [241, 490], "conlldocidcol": [241, 490], "doc_id": [241, 244, 490, 494], "labelcol": [241, 490], "includedocid": [241, 490], "docstart": [241, 490, 510], "eu": [241, 490, 510], "np": [241, 490, 510], "vp": [241, 490, 510], "misc": [241, 490, 510], "boycott": [241, 490, 510], "british": [241, 490, 510], "lamb": [241, 490, 510], "blackburn": [241, 490], "brussel": [241, 490], "1996": [241, 490], "08": [241, 490], "storage_level": [241, 490], "storagelevel": [241, 490], "lift": [241, 490], "disk_onli": [241, 490], "uposcol": [242, 491], "upo": [242, 491], "xposcol": [242, 491], "xpo": [242, 491], "sent_id": [242, 491], "sell": [242, 491], "pron": [242, 491], "nom": [242, 491], "plur": [242, 491], "_": [242, 491], "tens": [242, 491], "conj": [242, 491], "cc": [242, 491], "spaceaft": [242, 491], "punct": [242, 491], "conllufil": [242, 491, 510], "conlldataset": [242, 491, 510], "morph": [242, 491], "Into": [242, 491], "googleo": [242, 491], "sconj": [242, 491], "propn": [242, 491], "adp": [242, 491], "wp": [242, 491], "vbd": [242, 243, 491, 493, 510], "ago": [243, 493, 510], "posdf": [243, 493], "61": [243, 493], "67": [243, 244, 493, 494, 510], "nonexecut": [243, 493], "76": [243, 493], "director": [243, 493], "84": [243, 493], "outputposcol": [243, 493], "outputdocumentcol": [243, 493], "outputtextcol": [243, 493], "medic": [244, 494, 510], "medment": [244, 494, 510], "25763772": [244, 494, 510], "dctn4": [244, 494, 510], "t116": [244, 494, 510], "t123": [244, 494, 510], "c4308010": [244, 494, 510], "63": [244, 494, 510], "chronic": [244, 494, 510], "pseudomona": [244, 494, 510], "aeruginosa": [244, 494, 510], "infect": [244, 494, 510], "t047": [244, 494, 510], "c0854135": [244, 494, 510], "82": [244, 494, 510], "cystic": [244, 494, 510], "fibrosi": [244, 494, 510], "c0010674": [244, 494, 510], "120": [244, 494, 510], "pa": [244, 494, 510], "124": [244, 494, 510], "139": [244, 494, 510], "pubtatorfil": [244, 494], "corpus_pubtator_sampl": [244, 494], "pubtatordataset": [244, 494], "finished_token": [244, 494, 505], "finished_po": [244, 494], "finished_n": [244, 494], "finished_token_metadata": [244, 494], "finished_pos_metadata": [244, 494], "finished_label_metadata": [244, 494], "mo": [244, 494], "ispaddedtoken": [244, 494], "token_spac": [245, 495], "sentence_end": [245, 495], "spaci": [245, 495], "multi_doc_token": [245, 495], "went": [245, 495], "night": [245, 495], "bought": [245, 495], "bread": [245, 495], "54": [245, 495], "jsonfilepath": [245, 495], "model_data": [247, 497], "dictionary_for_upload": [247, 497], "model_zip_path": [247, 497], "pythoncod": [247, 497], "git_token": [247, 497], "predictedent": [247, 497], "sparknlpvers": [247, 497], "howtous": [247, 497], "livedemo": [247, 497], "runincolab": [247, 497], "scalacod": [247, 497], "nlucod": [247, 497], "datasourc": [247, 497], "includedmodel": [247, 497], "info": [247, 497], "zip_path": [247, 497], "zip": [247, 497], "folder_path": [247, 497], "quick": [249, 500, 505], "pypi": 249, "pip": 249, "anaconda": 249, "shell": 249, "compil": 249, "sbt": 249, "assembli": 249, "oracl": 249, "openjdk": 249, "0_292": 249, "sparknlp": [249, 500, 503, 504, 505, 506, 508, 509, 510], "python3": 249, "bin": 249, "cheat": 250, "guid": [250, 501], "py": [308, 423, 456, 457, 465, 471, 475], "subclass": [308, 336, 423, 457, 471, 475], "ins": [308, 423, 457, 475], "uid": [308, 423, 457, 475], "documenttokensplittertestspec": 336, "methodnam": 336, "runtest": 336, "fixtur": 336, "testcas": 336, "constructor": 336, "author": 336, "deconstruct": 336, "setup": 336, "teardown": 336, "__init__": 336, "signatur": 336, "failureexcept": 336, "assert": 336, "deem": 336, "longmessag": 336, "repr": 336, "failur": 336, "maxdiff": 336, "diff": 336, "difflib": 336, "hook": 336, "exercis": 336, "test_run": 336, "sbd": 369, "dictionary_path": [427, 428], "py4j": [446, 447, 475], "java_gatewai": [446, 447, 475], "mixin": 470, "javaparam": 470, "_java_obj": 471, "sc": 472, "tf_graph": 496, "tf_graph_1x": 496, "overview": [499, 507], "dedic": 500, "account": 500, "inspect": 500, "init": 500, "sparknlp_experi": 500, "offline_directori": 500, "later": 500, "record": 501, "registri": 501, "central": 501, "send": 502, "mlflow": 502, "clearli": 503, "explain_document_ml": [503, 508, 509], "approx": [503, 508, 509], "mb": [503, 508, 509], "ok": [503, 508, 509], "spearhead": 504, "declar": 504, "accordingli": 504, "extra_loc": 504, "classifierdl_use_trec50": 504, "classifierdl_use_spam": 504, "column_nam": 504, "interchang": 505, "road": 505, "proce": 505, "constantli": 509, "train_po": 510, "training_conl": 510, "train_corpu": 510, "withcolumnrenam": 510, "trainingpubtatordf": 510, "corpus_pubt": 510}, "objects": {"": [[469, 0, 0, "-", "sparknlp"]], "sparknlp": [[251, 0, 0, "-", "annotation"], [252, 0, 0, "-", "annotation_audio"], [253, 0, 0, "-", "annotation_image"], [369, 0, 0, "-", "annotator"], [469, 4, 1, "", "annotators"], [449, 0, 0, "-", "base"], [461, 0, 0, "-", "common"], [469, 4, 1, "", "embeddings"], [468, 0, 0, "-", "functions"], [473, 0, 0, "-", "internal"], [477, 0, 0, "-", "logging"], [478, 0, 0, "-", "partition"], [482, 0, 0, "-", "pretrained"], [469, 5, 1, "", "read"], [487, 0, 0, "-", "reader"], [469, 5, 1, "", "start"], [492, 0, 0, "-", "training"], [497, 0, 0, "-", "upload_to_hub"], [498, 0, 0, "-", "util"], [469, 5, 1, "", "version"]], "sparknlp.annotation": [[251, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[251, 2, 1, "", "annotatorType"], [251, 3, 1, "", "arrayType"], [251, 2, 1, "", "begin"], [251, 3, 1, "", "copy"], [251, 3, 1, "", "dataType"], [251, 2, 1, "", "embeddings"], [251, 2, 1, "", "end"], [251, 3, 1, "", "fromRow"], [251, 2, 1, "", "metadata"], [251, 2, 1, "", "result"], [251, 3, 1, "", "toRow"]], "sparknlp.annotation_audio": [[252, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[252, 2, 1, "", "annotatorType"], [252, 3, 1, "", "copy"], [252, 2, 1, "", "metadata"], [252, 2, 1, "", "result"]], "sparknlp.annotation_image": [[253, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[253, 2, 1, "", "annotatorType"], [253, 3, 1, "", "copy"], [253, 2, 1, "", "height"], [253, 2, 1, "", "metadata"], [253, 2, 1, "", "mode"], [253, 2, 1, "", "nChannels"], [253, 2, 1, "", "origin"], [253, 2, 1, "", "result"], [253, 2, 1, "", "width"]], "sparknlp.annotator": [[369, 4, 1, "", "annotators"], [369, 4, 1, "", "audio"], [255, 0, 0, "-", "audio"], [258, 0, 0, "-", "chunk2_doc"], [259, 0, 0, "-", "chunker"], [369, 4, 1, "", "classifier"], [285, 0, 0, "-", "classifier_dl"], [309, 0, 0, "-", "cleaners"], [369, 4, 1, "", "coref"], [310, 0, 0, "-", "coref"], [369, 4, 1, "", "cv"], [317, 0, 0, "-", "cv"], [329, 0, 0, "-", "date2_chunk"], [331, 0, 0, "-", "dependency"], [333, 0, 0, "-", "document_character_text_splitter"], [334, 0, 0, "-", "document_normalizer"], [335, 0, 0, "-", "document_token_splitter"], [336, 0, 0, "-", "document_token_splitter_test"], [369, 4, 1, "", "embeddings"], [349, 0, 0, "-", "embeddings"], [369, 4, 1, "", "er"], [367, 0, 0, "-", "er"], [368, 0, 0, "-", "graph_extraction"], [369, 4, 1, "", "keyword"], [370, 0, 0, "-", "keyword_extraction"], [369, 4, 1, "", "ld"], [372, 0, 0, "-", "ld_dl"], [374, 0, 0, "-", "lemmatizer"], [377, 0, 0, "-", "matcher"], [381, 0, 0, "-", "n_gram_generator"], [382, 0, 0, "-", "ner"], [389, 0, 0, "-", "normalizer"], [390, 0, 0, "-", "openai"], [395, 0, 0, "-", "param"], [369, 4, 1, "", "parser"], [396, 0, 0, "-", "pos"], [369, 4, 1, "", "regex"], [369, 4, 1, "", "sbd"], [369, 4, 1, "", "sda"], [398, 0, 0, "-", "sentence"], [369, 4, 1, "", "sentence_detector_dl"], [401, 0, 0, "-", "sentiment"], [410, 0, 0, "-", "seq2seq"], [424, 0, 0, "-", "similarity"], [369, 4, 1, "", "spell"], [426, 0, 0, "-", "spell_check"], [429, 0, 0, "-", "stemmer"], [430, 0, 0, "-", "stop_words_cleaner"], [431, 0, 0, "-", "tf_ner_dl_graph_builder"], [433, 0, 0, "-", "token"], [437, 0, 0, "-", "token2_chunk"], [438, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[254, 0, 0, "-", "hubert_for_ctc"], [256, 0, 0, "-", "wav2vec2_for_ctc"], [257, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[254, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[254, 2, 1, "", "configProtoBytes"], [254, 2, 1, "", "inputAnnotatorTypes"], [254, 3, 1, "", "loadSavedModel"], [254, 2, 1, "", "name"], [254, 2, 1, "", "outputAnnotatorType"], [254, 3, 1, "", "pretrained"], [254, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[256, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[256, 2, 1, "", "configProtoBytes"], [256, 2, 1, "", "inputAnnotatorTypes"], [256, 3, 1, "", "loadSavedModel"], [256, 2, 1, "", "name"], [256, 2, 1, "", "outputAnnotatorType"], [256, 3, 1, "", "pretrained"], [256, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[257, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[257, 2, 1, "", "configProtoBytes"], [257, 3, 1, "", "getIsMultilingual"], [257, 3, 1, "", "getLanguage"], [257, 2, 1, "", "inputAnnotatorTypes"], [257, 2, 1, "", "isMultilingual"], [257, 2, 1, "", "language"], [257, 3, 1, "", "loadSavedModel"], [257, 2, 1, "", "name"], [257, 2, 1, "", "outputAnnotatorType"], [257, 3, 1, "", "pretrained"], [257, 3, 1, "", "setConfigProtoBytes"], [257, 3, 1, "", "setLanguage"], [257, 3, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[258, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunk2_doc.Chunk2Doc": [[258, 2, 1, "", "inputAnnotatorTypes"], [258, 2, 1, "", "name"], [258, 2, 1, "", "outputAnnotatorType"], [258, 3, 1, "", "setParams"]], "sparknlp.annotator.chunker": [[259, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[259, 2, 1, "", "inputAnnotatorTypes"], [259, 2, 1, "", "name"], [259, 2, 1, "", "outputAnnotatorType"], [259, 2, 1, "", "regexParsers"], [259, 3, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[260, 0, 0, "-", "albert_for_multiple_choice"], [261, 0, 0, "-", "albert_for_question_answering"], [262, 0, 0, "-", "albert_for_sequence_classification"], [263, 0, 0, "-", "albert_for_token_classification"], [264, 0, 0, "-", "albert_for_zero_shot_classification"], [265, 0, 0, "-", "bart_for_zero_shot_classification"], [266, 0, 0, "-", "bert_for_multiple_choice"], [267, 0, 0, "-", "bert_for_question_answering"], [268, 0, 0, "-", "bert_for_sequence_classification"], [269, 0, 0, "-", "bert_for_token_classification"], [270, 0, 0, "-", "bert_for_zero_shot_classification"], [271, 0, 0, "-", "camembert_for_question_answering"], [272, 0, 0, "-", "camembert_for_sequence_classification"], [273, 0, 0, "-", "camembert_for_token_classification"], [274, 0, 0, "-", "camembert_for_zero_shot_classification"], [275, 0, 0, "-", "classifier_dl"], [276, 0, 0, "-", "deberta_for_question_answering"], [277, 0, 0, "-", "deberta_for_sequence_classification"], [278, 0, 0, "-", "deberta_for_token_classification"], [279, 0, 0, "-", "deberta_for_zero_shot_classification"], [280, 0, 0, "-", "distil_bert_for_question_answering"], [281, 0, 0, "-", "distil_bert_for_sequence_classification"], [282, 0, 0, "-", "distil_bert_for_token_classification"], [283, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [284, 0, 0, "-", "distilbert_for_multiple_choice"], [286, 0, 0, "-", "longformer_for_question_answering"], [287, 0, 0, "-", "longformer_for_sequence_classification"], [288, 0, 0, "-", "longformer_for_token_classification"], [289, 0, 0, "-", "mpnet_for_question_answering"], [290, 0, 0, "-", "mpnet_for_sequence_classification"], [291, 0, 0, "-", "mpnet_for_token_classification"], [292, 0, 0, "-", "multi_classifier_dl"], [293, 0, 0, "-", "roberta_for_multiple_choice"], [294, 0, 0, "-", "roberta_for_question_answering"], [295, 0, 0, "-", "roberta_for_sequence_classification"], [296, 0, 0, "-", "roberta_for_token_classification"], [297, 0, 0, "-", "roberta_for_zero_shot_classification"], [298, 0, 0, "-", "sentiment_dl"], [299, 0, 0, "-", "tapas_for_question_answering"], [300, 0, 0, "-", "xlm_roberta_for_multiple_choice"], [301, 0, 0, "-", "xlm_roberta_for_question_answering"], [302, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [303, 0, 0, "-", "xlm_roberta_for_token_classification"], [304, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [305, 0, 0, "-", "xlnet_for_sequence_classification"], [306, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[260, 1, 1, "", "AlbertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice": [[260, 2, 1, "", "choicesDelimiter"], [260, 2, 1, "", "inputAnnotatorTypes"], [260, 3, 1, "", "loadSavedModel"], [260, 2, 1, "", "name"], [260, 2, 1, "", "outputAnnotatorType"], [260, 3, 1, "", "pretrained"], [260, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[261, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[261, 2, 1, "", "coalesceSentences"], [261, 2, 1, "", "configProtoBytes"], [261, 2, 1, "", "inputAnnotatorTypes"], [261, 3, 1, "", "loadSavedModel"], [261, 2, 1, "", "name"], [261, 2, 1, "", "outputAnnotatorType"], [261, 3, 1, "", "pretrained"], [261, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[262, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[262, 2, 1, "", "coalesceSentences"], [262, 2, 1, "", "configProtoBytes"], [262, 3, 1, "", "getClasses"], [262, 2, 1, "", "inputAnnotatorTypes"], [262, 3, 1, "", "loadSavedModel"], [262, 2, 1, "", "name"], [262, 2, 1, "", "outputAnnotatorType"], [262, 3, 1, "", "pretrained"], [262, 3, 1, "", "setCoalesceSentences"], [262, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[263, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[263, 2, 1, "", "configProtoBytes"], [263, 3, 1, "", "getClasses"], [263, 2, 1, "", "inputAnnotatorTypes"], [263, 3, 1, "", "loadSavedModel"], [263, 2, 1, "", "name"], [263, 2, 1, "", "outputAnnotatorType"], [263, 3, 1, "", "pretrained"], [263, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[264, 1, 1, "", "AlbertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification": [[264, 2, 1, "", "coalesceSentences"], [264, 2, 1, "", "configProtoBytes"], [264, 3, 1, "", "getClasses"], [264, 2, 1, "", "inputAnnotatorTypes"], [264, 3, 1, "", "loadSavedModel"], [264, 2, 1, "", "name"], [264, 2, 1, "", "outputAnnotatorType"], [264, 3, 1, "", "pretrained"], [264, 3, 1, "", "setCoalesceSentences"], [264, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[265, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[265, 2, 1, "", "coalesceSentences"], [265, 2, 1, "", "configProtoBytes"], [265, 3, 1, "", "getClasses"], [265, 2, 1, "", "inputAnnotatorTypes"], [265, 3, 1, "", "loadSavedModel"], [265, 2, 1, "", "maxSentenceLength"], [265, 2, 1, "", "name"], [265, 2, 1, "", "outputAnnotatorType"], [265, 3, 1, "", "pretrained"], [265, 3, 1, "", "setCoalesceSentences"], [265, 3, 1, "", "setConfigProtoBytes"], [265, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[266, 1, 1, "", "BertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice": [[266, 2, 1, "", "choicesDelimiter"], [266, 2, 1, "", "inputAnnotatorTypes"], [266, 3, 1, "", "loadSavedModel"], [266, 2, 1, "", "name"], [266, 2, 1, "", "outputAnnotatorType"], [266, 3, 1, "", "pretrained"], [266, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[267, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[267, 2, 1, "", "coalesceSentences"], [267, 2, 1, "", "configProtoBytes"], [267, 2, 1, "", "inputAnnotatorTypes"], [267, 3, 1, "", "loadSavedModel"], [267, 2, 1, "", "name"], [267, 2, 1, "", "outputAnnotatorType"], [267, 3, 1, "", "pretrained"], [267, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[268, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[268, 2, 1, "", "coalesceSentences"], [268, 2, 1, "", "configProtoBytes"], [268, 3, 1, "", "getClasses"], [268, 2, 1, "", "inputAnnotatorTypes"], [268, 3, 1, "", "loadSavedModel"], [268, 2, 1, "", "name"], [268, 2, 1, "", "outputAnnotatorType"], [268, 3, 1, "", "pretrained"], [268, 3, 1, "", "setCoalesceSentences"], [268, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[269, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[269, 2, 1, "", "configProtoBytes"], [269, 3, 1, "", "getClasses"], [269, 2, 1, "", "inputAnnotatorTypes"], [269, 3, 1, "", "loadSavedModel"], [269, 2, 1, "", "name"], [269, 2, 1, "", "outputAnnotatorType"], [269, 3, 1, "", "pretrained"], [269, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[270, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[270, 2, 1, "", "coalesceSentences"], [270, 2, 1, "", "configProtoBytes"], [270, 3, 1, "", "getClasses"], [270, 2, 1, "", "inputAnnotatorTypes"], [270, 3, 1, "", "loadSavedModel"], [270, 2, 1, "", "name"], [270, 2, 1, "", "outputAnnotatorType"], [270, 3, 1, "", "pretrained"], [270, 3, 1, "", "setCoalesceSentences"], [270, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[271, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[271, 2, 1, "", "coalesceSentences"], [271, 2, 1, "", "configProtoBytes"], [271, 2, 1, "", "inputAnnotatorTypes"], [271, 3, 1, "", "loadSavedModel"], [271, 2, 1, "", "name"], [271, 2, 1, "", "outputAnnotatorType"], [271, 3, 1, "", "pretrained"], [271, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[272, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[272, 2, 1, "", "coalesceSentences"], [272, 2, 1, "", "configProtoBytes"], [272, 3, 1, "", "getClasses"], [272, 2, 1, "", "inputAnnotatorTypes"], [272, 3, 1, "", "loadSavedModel"], [272, 2, 1, "", "name"], [272, 2, 1, "", "outputAnnotatorType"], [272, 3, 1, "", "pretrained"], [272, 3, 1, "", "setCoalesceSentences"], [272, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[273, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[273, 2, 1, "", "configProtoBytes"], [273, 3, 1, "", "getClasses"], [273, 2, 1, "", "inputAnnotatorTypes"], [273, 3, 1, "", "loadSavedModel"], [273, 2, 1, "", "name"], [273, 2, 1, "", "outputAnnotatorType"], [273, 3, 1, "", "pretrained"], [273, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[274, 1, 1, "", "CamemBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification": [[274, 2, 1, "", "coalesceSentences"], [274, 2, 1, "", "configProtoBytes"], [274, 3, 1, "", "getClasses"], [274, 2, 1, "", "inputAnnotatorTypes"], [274, 3, 1, "", "loadSavedModel"], [274, 2, 1, "", "name"], [274, 2, 1, "", "outputAnnotatorType"], [274, 3, 1, "", "pretrained"], [274, 3, 1, "", "setCoalesceSentences"], [274, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[275, 1, 1, "", "ClassifierDLApproach"], [275, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[275, 2, 1, "", "dropout"], [275, 2, 1, "", "inputAnnotatorTypes"], [275, 2, 1, "", "outputAnnotatorType"], [275, 3, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[275, 2, 1, "", "classes"], [275, 2, 1, "", "configProtoBytes"], [275, 2, 1, "", "inputAnnotatorTypes"], [275, 2, 1, "", "name"], [275, 2, 1, "", "outputAnnotatorType"], [275, 3, 1, "", "pretrained"], [275, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[276, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[276, 2, 1, "", "coalesceSentences"], [276, 2, 1, "", "configProtoBytes"], [276, 2, 1, "", "inputAnnotatorTypes"], [276, 3, 1, "", "loadSavedModel"], [276, 2, 1, "", "name"], [276, 2, 1, "", "outputAnnotatorType"], [276, 3, 1, "", "pretrained"], [276, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[277, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[277, 2, 1, "", "coalesceSentences"], [277, 2, 1, "", "configProtoBytes"], [277, 3, 1, "", "getClasses"], [277, 2, 1, "", "inputAnnotatorTypes"], [277, 3, 1, "", "loadSavedModel"], [277, 2, 1, "", "name"], [277, 2, 1, "", "outputAnnotatorType"], [277, 3, 1, "", "pretrained"], [277, 3, 1, "", "setCoalesceSentences"], [277, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[278, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[278, 2, 1, "", "configProtoBytes"], [278, 3, 1, "", "getClasses"], [278, 2, 1, "", "inputAnnotatorTypes"], [278, 3, 1, "", "loadSavedModel"], [278, 2, 1, "", "name"], [278, 2, 1, "", "outputAnnotatorType"], [278, 3, 1, "", "pretrained"], [278, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[279, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[279, 2, 1, "", "coalesceSentences"], [279, 2, 1, "", "configProtoBytes"], [279, 3, 1, "", "getClasses"], [279, 2, 1, "", "inputAnnotatorTypes"], [279, 3, 1, "", "loadSavedModel"], [279, 2, 1, "", "name"], [279, 2, 1, "", "outputAnnotatorType"], [279, 3, 1, "", "pretrained"], [279, 3, 1, "", "setCoalesceSentences"], [279, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[280, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[280, 2, 1, "", "coalesceSentences"], [280, 2, 1, "", "configProtoBytes"], [280, 2, 1, "", "inputAnnotatorTypes"], [280, 3, 1, "", "loadSavedModel"], [280, 2, 1, "", "name"], [280, 2, 1, "", "outputAnnotatorType"], [280, 3, 1, "", "pretrained"], [280, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[281, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[281, 2, 1, "", "coalesceSentences"], [281, 2, 1, "", "configProtoBytes"], [281, 3, 1, "", "getClasses"], [281, 2, 1, "", "inputAnnotatorTypes"], [281, 3, 1, "", "loadSavedModel"], [281, 2, 1, "", "name"], [281, 2, 1, "", "outputAnnotatorType"], [281, 3, 1, "", "pretrained"], [281, 3, 1, "", "setCoalesceSentences"], [281, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[282, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[282, 2, 1, "", "configProtoBytes"], [282, 3, 1, "", "getClasses"], [282, 2, 1, "", "inputAnnotatorTypes"], [282, 3, 1, "", "loadSavedModel"], [282, 2, 1, "", "name"], [282, 2, 1, "", "outputAnnotatorType"], [282, 3, 1, "", "pretrained"], [282, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[283, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[283, 2, 1, "", "coalesceSentences"], [283, 2, 1, "", "configProtoBytes"], [283, 3, 1, "", "getClasses"], [283, 2, 1, "", "inputAnnotatorTypes"], [283, 3, 1, "", "loadSavedModel"], [283, 2, 1, "", "name"], [283, 2, 1, "", "outputAnnotatorType"], [283, 3, 1, "", "pretrained"], [283, 3, 1, "", "setCoalesceSentences"], [283, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[284, 1, 1, "", "DistilBertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice": [[284, 2, 1, "", "choicesDelimiter"], [284, 2, 1, "", "inputAnnotatorTypes"], [284, 3, 1, "", "loadSavedModel"], [284, 2, 1, "", "name"], [284, 2, 1, "", "outputAnnotatorType"], [284, 3, 1, "", "pretrained"], [284, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[286, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[286, 2, 1, "", "coalesceSentences"], [286, 2, 1, "", "configProtoBytes"], [286, 2, 1, "", "inputAnnotatorTypes"], [286, 3, 1, "", "loadSavedModel"], [286, 2, 1, "", "name"], [286, 2, 1, "", "outputAnnotatorType"], [286, 3, 1, "", "pretrained"], [286, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[287, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[287, 2, 1, "", "coalesceSentences"], [287, 2, 1, "", "configProtoBytes"], [287, 3, 1, "", "getClasses"], [287, 2, 1, "", "inputAnnotatorTypes"], [287, 3, 1, "", "loadSavedModel"], [287, 2, 1, "", "name"], [287, 2, 1, "", "outputAnnotatorType"], [287, 3, 1, "", "pretrained"], [287, 3, 1, "", "setCoalesceSentences"], [287, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[288, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[288, 2, 1, "", "configProtoBytes"], [288, 3, 1, "", "getClasses"], [288, 2, 1, "", "inputAnnotatorTypes"], [288, 3, 1, "", "loadSavedModel"], [288, 2, 1, "", "name"], [288, 2, 1, "", "outputAnnotatorType"], [288, 3, 1, "", "pretrained"], [288, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[289, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[289, 2, 1, "", "inputAnnotatorTypes"], [289, 3, 1, "", "loadSavedModel"], [289, 2, 1, "", "name"], [289, 2, 1, "", "outputAnnotatorType"], [289, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[290, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[290, 2, 1, "", "coalesceSentences"], [290, 3, 1, "", "getClasses"], [290, 2, 1, "", "inputAnnotatorTypes"], [290, 3, 1, "", "loadSavedModel"], [290, 2, 1, "", "name"], [290, 2, 1, "", "outputAnnotatorType"], [290, 3, 1, "", "pretrained"], [290, 3, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[291, 1, 1, "", "MPNetForTokenClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification": [[291, 2, 1, "", "configProtoBytes"], [291, 3, 1, "", "getClasses"], [291, 2, 1, "", "inputAnnotatorTypes"], [291, 3, 1, "", "loadSavedModel"], [291, 2, 1, "", "name"], [291, 2, 1, "", "outputAnnotatorType"], [291, 3, 1, "", "pretrained"], [291, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[292, 1, 1, "", "MultiClassifierDLApproach"], [292, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[292, 2, 1, "", "inputAnnotatorTypes"], [292, 2, 1, "", "outputAnnotatorType"], [292, 3, 1, "", "setShufflePerEpoch"], [292, 3, 1, "", "setThreshold"], [292, 3, 1, "", "setVerbose"], [292, 2, 1, "", "shufflePerEpoch"], [292, 2, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[292, 2, 1, "", "classes"], [292, 2, 1, "", "configProtoBytes"], [292, 2, 1, "", "inputAnnotatorTypes"], [292, 2, 1, "", "name"], [292, 2, 1, "", "outputAnnotatorType"], [292, 3, 1, "", "pretrained"], [292, 3, 1, "", "setConfigProtoBytes"], [292, 3, 1, "", "setThreshold"], [292, 2, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[293, 1, 1, "", "RoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice": [[293, 2, 1, "", "choicesDelimiter"], [293, 2, 1, "", "inputAnnotatorTypes"], [293, 3, 1, "", "loadSavedModel"], [293, 2, 1, "", "name"], [293, 2, 1, "", "outputAnnotatorType"], [293, 3, 1, "", "pretrained"], [293, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[294, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[294, 2, 1, "", "coalesceSentences"], [294, 2, 1, "", "configProtoBytes"], [294, 2, 1, "", "inputAnnotatorTypes"], [294, 3, 1, "", "loadSavedModel"], [294, 2, 1, "", "name"], [294, 2, 1, "", "outputAnnotatorType"], [294, 3, 1, "", "pretrained"], [294, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[295, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[295, 2, 1, "", "coalesceSentences"], [295, 2, 1, "", "configProtoBytes"], [295, 3, 1, "", "getClasses"], [295, 2, 1, "", "inputAnnotatorTypes"], [295, 3, 1, "", "loadSavedModel"], [295, 2, 1, "", "name"], [295, 2, 1, "", "outputAnnotatorType"], [295, 3, 1, "", "pretrained"], [295, 3, 1, "", "setCoalesceSentences"], [295, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[296, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[296, 2, 1, "", "configProtoBytes"], [296, 3, 1, "", "getClasses"], [296, 2, 1, "", "inputAnnotatorTypes"], [296, 3, 1, "", "loadSavedModel"], [296, 2, 1, "", "maxSentenceLength"], [296, 2, 1, "", "name"], [296, 2, 1, "", "outputAnnotatorType"], [296, 3, 1, "", "pretrained"], [296, 3, 1, "", "setConfigProtoBytes"], [296, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[297, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[297, 2, 1, "", "coalesceSentences"], [297, 2, 1, "", "configProtoBytes"], [297, 3, 1, "", "getClasses"], [297, 2, 1, "", "inputAnnotatorTypes"], [297, 3, 1, "", "loadSavedModel"], [297, 2, 1, "", "maxSentenceLength"], [297, 2, 1, "", "name"], [297, 2, 1, "", "outputAnnotatorType"], [297, 3, 1, "", "pretrained"], [297, 3, 1, "", "setCoalesceSentences"], [297, 3, 1, "", "setConfigProtoBytes"], [297, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[298, 1, 1, "", "SentimentDLApproach"], [298, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[298, 2, 1, "", "dropout"], [298, 2, 1, "", "inputAnnotatorTypes"], [298, 2, 1, "", "outputAnnotatorType"], [298, 3, 1, "", "setDropout"], [298, 3, 1, "", "setThreshold"], [298, 3, 1, "", "setThresholdLabel"], [298, 2, 1, "", "threshold"], [298, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[298, 2, 1, "", "classes"], [298, 2, 1, "", "configProtoBytes"], [298, 2, 1, "", "inputAnnotatorTypes"], [298, 2, 1, "", "name"], [298, 2, 1, "", "outputAnnotatorType"], [298, 3, 1, "", "pretrained"], [298, 3, 1, "", "setConfigProtoBytes"], [298, 3, 1, "", "setThreshold"], [298, 3, 1, "", "setThresholdLabel"], [298, 2, 1, "", "threshold"], [298, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[299, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[299, 2, 1, "", "inputAnnotatorTypes"], [299, 3, 1, "", "loadSavedModel"], [299, 2, 1, "", "name"], [299, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[300, 1, 1, "", "XlmRoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice": [[300, 2, 1, "", "inputAnnotatorTypes"], [300, 3, 1, "", "loadSavedModel"], [300, 2, 1, "", "name"], [300, 2, 1, "", "outputAnnotatorType"], [300, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[301, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[301, 2, 1, "", "coalesceSentences"], [301, 2, 1, "", "configProtoBytes"], [301, 2, 1, "", "inputAnnotatorTypes"], [301, 3, 1, "", "loadSavedModel"], [301, 2, 1, "", "name"], [301, 2, 1, "", "outputAnnotatorType"], [301, 3, 1, "", "pretrained"], [301, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[302, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[302, 2, 1, "", "coalesceSentences"], [302, 2, 1, "", "configProtoBytes"], [302, 3, 1, "", "getClasses"], [302, 2, 1, "", "inputAnnotatorTypes"], [302, 3, 1, "", "loadSavedModel"], [302, 2, 1, "", "name"], [302, 2, 1, "", "outputAnnotatorType"], [302, 3, 1, "", "pretrained"], [302, 3, 1, "", "setCoalesceSentences"], [302, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[303, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[303, 2, 1, "", "configProtoBytes"], [303, 3, 1, "", "getClasses"], [303, 2, 1, "", "inputAnnotatorTypes"], [303, 3, 1, "", "loadSavedModel"], [303, 2, 1, "", "name"], [303, 2, 1, "", "outputAnnotatorType"], [303, 3, 1, "", "pretrained"], [303, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[304, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[304, 2, 1, "", "coalesceSentences"], [304, 2, 1, "", "configProtoBytes"], [304, 3, 1, "", "getClasses"], [304, 2, 1, "", "inputAnnotatorTypes"], [304, 3, 1, "", "loadSavedModel"], [304, 2, 1, "", "maxSentenceLength"], [304, 2, 1, "", "name"], [304, 2, 1, "", "outputAnnotatorType"], [304, 3, 1, "", "pretrained"], [304, 3, 1, "", "setCoalesceSentences"], [304, 3, 1, "", "setConfigProtoBytes"], [304, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[305, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[305, 2, 1, "", "coalesceSentences"], [305, 2, 1, "", "configProtoBytes"], [305, 3, 1, "", "getClasses"], [305, 2, 1, "", "inputAnnotatorTypes"], [305, 3, 1, "", "loadSavedModel"], [305, 2, 1, "", "name"], [305, 2, 1, "", "outputAnnotatorType"], [305, 3, 1, "", "pretrained"], [305, 3, 1, "", "setCoalesceSentences"], [305, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[306, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[306, 2, 1, "", "configProtoBytes"], [306, 3, 1, "", "getClasses"], [306, 2, 1, "", "inputAnnotatorTypes"], [306, 3, 1, "", "loadSavedModel"], [306, 2, 1, "", "name"], [306, 2, 1, "", "outputAnnotatorType"], [306, 3, 1, "", "pretrained"], [306, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cleaners": [[307, 0, 0, "-", "cleaner"], [308, 0, 0, "-", "extractor"]], "sparknlp.annotator.cleaners.cleaner": [[307, 1, 1, "", "Cleaner"]], "sparknlp.annotator.cleaners.cleaner.Cleaner": [[307, 2, 1, "", "bullets"], [307, 2, 1, "", "cleanPostfixPattern"], [307, 2, 1, "", "cleanPrefixPattern"], [307, 2, 1, "", "cleanerMode"], [307, 2, 1, "", "dashes"], [307, 2, 1, "", "encoding"], [307, 2, 1, "", "extraWhitespace"], [307, 2, 1, "", "ignoreCase"], [307, 2, 1, "", "inputAnnotatorTypes"], [307, 2, 1, "", "lowercase"], [307, 2, 1, "", "name"], [307, 2, 1, "", "outputAnnotatorType"], [307, 3, 1, "", "setBullets"], [307, 3, 1, "", "setCleanPostfixPattern"], [307, 3, 1, "", "setCleanPrefixPattern"], [307, 3, 1, "", "setCleanerMode"], [307, 3, 1, "", "setDashes"], [307, 3, 1, "", "setEncoding"], [307, 3, 1, "", "setExtraWhitespace"], [307, 3, 1, "", "setIgnoreCase"], [307, 3, 1, "", "setLowercase"], [307, 3, 1, "", "setStrip"], [307, 3, 1, "", "setTrailingPunctuation"], [307, 2, 1, "", "strip"], [307, 2, 1, "", "trailingPunctuation"]], "sparknlp.annotator.cleaners.extractor": [[308, 1, 1, "", "Extractor"]], "sparknlp.annotator.cleaners.extractor.Extractor": [[308, 2, 1, "", "emailAddress"], [308, 2, 1, "", "emailDateTimeTzPattern"], [308, 2, 1, "", "extractorMode"], [308, 2, 1, "", "imageUrlPattern"], [308, 2, 1, "", "index"], [308, 2, 1, "", "inputAnnotatorTypes"], [308, 2, 1, "", "ipAddressNamePattern"], [308, 2, 1, "", "ipAddressPattern"], [308, 2, 1, "", "mapiIdPattern"], [308, 2, 1, "", "name"], [308, 2, 1, "", "outputAnnotatorType"], [308, 3, 1, "", "setEmailAddress"], [308, 3, 1, "", "setEmailDateTimeTzPattern"], [308, 3, 1, "", "setExtractorMode"], [308, 3, 1, "", "setImageUrlPattern"], [308, 3, 1, "", "setIndex"], [308, 3, 1, "", "setIpAddressNamePattern"], [308, 3, 1, "", "setIpAddressPattern"], [308, 3, 1, "", "setMapiIdPattern"], [308, 3, 1, "", "setTextPattern"], [308, 3, 1, "", "setUsPhoneNumbersPattern"], [308, 2, 1, "", "textPattern"], [308, 2, 1, "", "usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[311, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[311, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[311, 2, 1, "", "configProtoBytes"], [311, 2, 1, "", "inputAnnotatorTypes"], [311, 3, 1, "", "loadSavedModel"], [311, 2, 1, "", "maxSegmentLength"], [311, 2, 1, "", "name"], [311, 2, 1, "", "outputAnnotatorType"], [311, 3, 1, "", "pretrained"], [311, 3, 1, "", "setConfigProtoBytes"], [311, 3, 1, "", "setMaxSegmentLength"], [311, 3, 1, "", "setTextGenre"], [311, 2, 1, "", "textGenre"]], "sparknlp.annotator.cv": [[312, 0, 0, "-", "blip_for_question_answering"], [313, 0, 0, "-", "clip_for_zero_shot_classification"], [314, 0, 0, "-", "convnext_for_image_classification"], [315, 0, 0, "-", "florence2_transformer"], [316, 0, 0, "-", "gemma3_for_multimodal"], [318, 0, 0, "-", "internvl_for_multimodal"], [319, 0, 0, "-", "janus_for_multimodal"], [320, 0, 0, "-", "llava_for_multimodal"], [321, 0, 0, "-", "mllama_for_multimodal"], [322, 0, 0, "-", "paligemma_for_multimodal"], [323, 0, 0, "-", "phi3_vision_for_multimodal"], [324, 0, 0, "-", "qwen2vl_transformer"], [325, 0, 0, "-", "smolvlm_transformer"], [326, 0, 0, "-", "swin_for_image_classification"], [327, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [328, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.blip_for_question_answering": [[312, 1, 1, "", "BLIPForQuestionAnswering"]], "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering": [[312, 2, 1, "", "configProtoBytes"], [312, 2, 1, "", "inputAnnotatorTypes"], [312, 3, 1, "", "loadSavedModel"], [312, 2, 1, "", "maxSentenceLength"], [312, 2, 1, "", "name"], [312, 2, 1, "", "outputAnnotatorType"], [312, 3, 1, "", "pretrained"], [312, 3, 1, "", "setMaxSentenceSize"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[313, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[313, 2, 1, "", "configProtoBytes"], [313, 3, 1, "", "getCandidateLabels"], [313, 2, 1, "", "inputAnnotatorTypes"], [313, 3, 1, "", "loadSavedModel"], [313, 2, 1, "", "name"], [313, 2, 1, "", "outputAnnotatorType"], [313, 3, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[314, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[314, 2, 1, "", "configProtoBytes"], [314, 2, 1, "", "cropPct"], [314, 2, 1, "", "doRescale"], [314, 3, 1, "", "getClasses"], [314, 2, 1, "", "inputAnnotatorTypes"], [314, 3, 1, "", "loadSavedModel"], [314, 2, 1, "", "name"], [314, 2, 1, "", "outputAnnotatorType"], [314, 3, 1, "", "pretrained"], [314, 2, 1, "", "rescaleFactor"], [314, 3, 1, "", "setConfigProtoBytes"], [314, 3, 1, "", "setCropPct"], [314, 3, 1, "", "setDoRescale"], [314, 3, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.florence2_transformer": [[315, 1, 1, "", "Florence2Transformer"]], "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer": [[315, 2, 1, "", "batchSize"], [315, 2, 1, "", "beamSize"], [315, 2, 1, "", "doSample"], [315, 2, 1, "", "ignoreTokenIds"], [315, 2, 1, "", "inputAnnotatorTypes"], [315, 3, 1, "", "loadSavedModel"], [315, 2, 1, "", "maxOutputLength"], [315, 2, 1, "", "minOutputLength"], [315, 2, 1, "", "name"], [315, 2, 1, "", "noRepeatNgramSize"], [315, 2, 1, "", "outputAnnotatorType"], [315, 3, 1, "", "pretrained"], [315, 2, 1, "", "repetitionPenalty"], [315, 3, 1, "", "setBatchSize"], [315, 3, 1, "", "setBeamSize"], [315, 3, 1, "", "setDoSample"], [315, 3, 1, "", "setIgnoreTokenIds"], [315, 3, 1, "", "setMaxOutputLength"], [315, 3, 1, "", "setMinOutputLength"], [315, 3, 1, "", "setNoRepeatNgramSize"], [315, 3, 1, "", "setRepetitionPenalty"], [315, 3, 1, "", "setTemperature"], [315, 3, 1, "", "setTopK"], [315, 3, 1, "", "setTopP"], [315, 2, 1, "", "temperature"], [315, 2, 1, "", "topK"], [315, 2, 1, "", "topP"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[316, 1, 1, "", "Gemma3ForMultiModal"]], "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal": [[316, 2, 1, "", "beamSize"], [316, 2, 1, "", "configProtoBytes"], [316, 2, 1, "", "doSample"], [316, 2, 1, "", "ignoreTokenIds"], [316, 2, 1, "", "inputAnnotatorTypes"], [316, 3, 1, "", "loadSavedModel"], [316, 2, 1, "", "maxInputLength"], [316, 2, 1, "", "maxOutputLength"], [316, 2, 1, "", "minOutputLength"], [316, 2, 1, "", "name"], [316, 2, 1, "", "noRepeatNgramSize"], [316, 2, 1, "", "outputAnnotatorType"], [316, 3, 1, "", "pretrained"], [316, 2, 1, "", "repetitionPenalty"], [316, 3, 1, "", "setBeamSize"], [316, 3, 1, "", "setConfigProtoBytes"], [316, 3, 1, "", "setDoSample"], [316, 3, 1, "", "setIgnoreTokenIds"], [316, 3, 1, "", "setMaxOutputLength"], [316, 3, 1, "", "setMaxSentenceSize"], [316, 3, 1, "", "setMinOutputLength"], [316, 3, 1, "", "setNoRepeatNgramSize"], [316, 3, 1, "", "setRepetitionPenalty"], [316, 3, 1, "", "setTemperature"], [316, 3, 1, "", "setTopK"], [316, 3, 1, "", "setTopP"], [316, 2, 1, "", "temperature"], [316, 2, 1, "", "topK"], [316, 2, 1, "", "topP"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[318, 1, 1, "", "InternVLForMultiModal"]], "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal": [[318, 2, 1, "", "beamSize"], [318, 2, 1, "", "doSample"], [318, 2, 1, "", "ignoreTokenIds"], [318, 2, 1, "", "inputAnnotatorTypes"], [318, 3, 1, "", "loadSavedModel"], [318, 2, 1, "", "maxOutputLength"], [318, 2, 1, "", "minOutputLength"], [318, 2, 1, "", "name"], [318, 2, 1, "", "noRepeatNgramSize"], [318, 2, 1, "", "outputAnnotatorType"], [318, 3, 1, "", "pretrained"], [318, 2, 1, "", "repetitionPenalty"], [318, 3, 1, "", "setBeamSize"], [318, 3, 1, "", "setDoSample"], [318, 3, 1, "", "setIgnoreTokenIds"], [318, 3, 1, "", "setMaxOutputLength"], [318, 3, 1, "", "setMaxSentenceSize"], [318, 3, 1, "", "setMinOutputLength"], [318, 3, 1, "", "setNoRepeatNgramSize"], [318, 3, 1, "", "setRepetitionPenalty"], [318, 3, 1, "", "setTemperature"], [318, 3, 1, "", "setTopK"], [318, 3, 1, "", "setTopP"], [318, 2, 1, "", "temperature"], [318, 2, 1, "", "topK"], [318, 2, 1, "", "topP"]], "sparknlp.annotator.cv.janus_for_multimodal": [[319, 1, 1, "", "JanusForMultiModal"]], "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal": [[319, 2, 1, "", "beamSize"], [319, 2, 1, "", "configProtoBytes"], [319, 2, 1, "", "doSample"], [319, 2, 1, "", "ignoreTokenIds"], [319, 2, 1, "", "imageGenerateMode"], [319, 2, 1, "", "inputAnnotatorTypes"], [319, 3, 1, "", "loadSavedModel"], [319, 2, 1, "", "maxOutputLength"], [319, 2, 1, "", "minOutputLength"], [319, 2, 1, "", "name"], [319, 2, 1, "", "noRepeatNgramSize"], [319, 2, 1, "", "numOfParallelImages"], [319, 2, 1, "", "outputAnnotatorType"], [319, 3, 1, "", "pretrained"], [319, 2, 1, "", "repetitionPenalty"], [319, 3, 1, "", "setBeamSize"], [319, 3, 1, "", "setConfigProtoBytes"], [319, 3, 1, "", "setDoSample"], [319, 3, 1, "", "setIgnoreTokenIds"], [319, 3, 1, "", "setImageGenerateMode"], [319, 3, 1, "", "setMaxOutputLength"], [319, 3, 1, "", "setMaxSentenceSize"], [319, 3, 1, "", "setMinOutputLength"], [319, 3, 1, "", "setNoRepeatNgramSize"], [319, 3, 1, "", "setNumOfParallelImages"], [319, 3, 1, "", "setRepetitionPenalty"], [319, 3, 1, "", "setTemperature"], [319, 3, 1, "", "setTopK"], [319, 3, 1, "", "setTopP"], [319, 2, 1, "", "temperature"], [319, 2, 1, "", "topK"], [319, 2, 1, "", "topP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[320, 1, 1, "", "LLAVAForMultiModal"]], "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal": [[320, 2, 1, "", "beamSize"], [320, 2, 1, "", "configProtoBytes"], [320, 2, 1, "", "doSample"], [320, 2, 1, "", "ignoreTokenIds"], [320, 2, 1, "", "inputAnnotatorTypes"], [320, 3, 1, "", "loadSavedModel"], [320, 2, 1, "", "maxOutputLength"], [320, 2, 1, "", "minOutputLength"], [320, 2, 1, "", "name"], [320, 2, 1, "", "noRepeatNgramSize"], [320, 2, 1, "", "outputAnnotatorType"], [320, 3, 1, "", "pretrained"], [320, 2, 1, "", "repetitionPenalty"], [320, 3, 1, "", "setBeamSize"], [320, 3, 1, "", "setConfigProtoBytes"], [320, 3, 1, "", "setDoSample"], [320, 3, 1, "", "setIgnoreTokenIds"], [320, 3, 1, "", "setMaxOutputLength"], [320, 3, 1, "", "setMaxSentenceSize"], [320, 3, 1, "", "setMinOutputLength"], [320, 3, 1, "", "setNoRepeatNgramSize"], [320, 3, 1, "", "setRepetitionPenalty"], [320, 3, 1, "", "setTemperature"], [320, 3, 1, "", "setTopK"], [320, 3, 1, "", "setTopP"], [320, 2, 1, "", "temperature"], [320, 2, 1, "", "topK"], [320, 2, 1, "", "topP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[321, 1, 1, "", "MLLamaForMultimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal": [[321, 2, 1, "", "beamSize"], [321, 2, 1, "", "configProtoBytes"], [321, 2, 1, "", "doSample"], [321, 2, 1, "", "ignoreTokenIds"], [321, 2, 1, "", "inputAnnotatorTypes"], [321, 3, 1, "", "loadSavedModel"], [321, 2, 1, "", "maxOutputLength"], [321, 2, 1, "", "minOutputLength"], [321, 2, 1, "", "name"], [321, 2, 1, "", "noRepeatNgramSize"], [321, 2, 1, "", "outputAnnotatorType"], [321, 3, 1, "", "pretrained"], [321, 2, 1, "", "repetitionPenalty"], [321, 3, 1, "", "setBeamSize"], [321, 3, 1, "", "setConfigProtoBytes"], [321, 3, 1, "", "setDoSample"], [321, 3, 1, "", "setIgnoreTokenIds"], [321, 3, 1, "", "setMaxOutputLength"], [321, 3, 1, "", "setMaxSentenceSize"], [321, 3, 1, "", "setMinOutputLength"], [321, 3, 1, "", "setNoRepeatNgramSize"], [321, 3, 1, "", "setRepetitionPenalty"], [321, 3, 1, "", "setTemperature"], [321, 3, 1, "", "setTopK"], [321, 3, 1, "", "setTopP"], [321, 2, 1, "", "temperature"], [321, 2, 1, "", "topK"], [321, 2, 1, "", "topP"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[322, 1, 1, "", "PaliGemmaForMultiModal"]], "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal": [[322, 2, 1, "", "beamSize"], [322, 2, 1, "", "doSample"], [322, 2, 1, "", "ignoreTokenIds"], [322, 2, 1, "", "inputAnnotatorTypes"], [322, 3, 1, "", "loadSavedModel"], [322, 2, 1, "", "maxOutputLength"], [322, 2, 1, "", "minOutputLength"], [322, 2, 1, "", "name"], [322, 2, 1, "", "noRepeatNgramSize"], [322, 2, 1, "", "outputAnnotatorType"], [322, 3, 1, "", "pretrained"], [322, 2, 1, "", "repetitionPenalty"], [322, 3, 1, "", "setBeamSize"], [322, 3, 1, "", "setDoSample"], [322, 3, 1, "", "setIgnoreTokenIds"], [322, 3, 1, "", "setMaxOutputLength"], [322, 3, 1, "", "setMaxSentenceSize"], [322, 3, 1, "", "setMinOutputLength"], [322, 3, 1, "", "setNoRepeatNgramSize"], [322, 3, 1, "", "setRepetitionPenalty"], [322, 3, 1, "", "setTemperature"], [322, 3, 1, "", "setTopK"], [322, 3, 1, "", "setTopP"], [322, 2, 1, "", "temperature"], [322, 2, 1, "", "topK"], [322, 2, 1, "", "topP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[323, 1, 1, "", "Phi3Vision"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision": [[323, 2, 1, "", "beamSize"], [323, 2, 1, "", "configProtoBytes"], [323, 2, 1, "", "doSample"], [323, 2, 1, "", "ignoreTokenIds"], [323, 2, 1, "", "inputAnnotatorTypes"], [323, 3, 1, "", "loadSavedModel"], [323, 2, 1, "", "maxOutputLength"], [323, 2, 1, "", "minOutputLength"], [323, 2, 1, "", "name"], [323, 2, 1, "", "noRepeatNgramSize"], [323, 2, 1, "", "outputAnnotatorType"], [323, 3, 1, "", "pretrained"], [323, 2, 1, "", "repetitionPenalty"], [323, 3, 1, "", "setBeamSize"], [323, 3, 1, "", "setConfigProtoBytes"], [323, 3, 1, "", "setDoSample"], [323, 3, 1, "", "setIgnoreTokenIds"], [323, 3, 1, "", "setMaxOutputLength"], [323, 3, 1, "", "setMaxSentenceSize"], [323, 3, 1, "", "setMinOutputLength"], [323, 3, 1, "", "setNoRepeatNgramSize"], [323, 3, 1, "", "setRepetitionPenalty"], [323, 3, 1, "", "setTemperature"], [323, 3, 1, "", "setTopK"], [323, 3, 1, "", "setTopP"], [323, 2, 1, "", "temperature"], [323, 2, 1, "", "topK"], [323, 2, 1, "", "topP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[324, 1, 1, "", "Qwen2VLTransformer"]], "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer": [[324, 2, 1, "", "beamSize"], [324, 2, 1, "", "configProtoBytes"], [324, 2, 1, "", "doSample"], [324, 2, 1, "", "ignoreTokenIds"], [324, 2, 1, "", "inputAnnotatorTypes"], [324, 3, 1, "", "loadSavedModel"], [324, 2, 1, "", "maxOutputLength"], [324, 2, 1, "", "minOutputLength"], [324, 2, 1, "", "name"], [324, 2, 1, "", "noRepeatNgramSize"], [324, 2, 1, "", "outputAnnotatorType"], [324, 3, 1, "", "pretrained"], [324, 2, 1, "", "repetitionPenalty"], [324, 3, 1, "", "setBeamSize"], [324, 3, 1, "", "setConfigProtoBytes"], [324, 3, 1, "", "setDoSample"], [324, 3, 1, "", "setIgnoreTokenIds"], [324, 3, 1, "", "setMaxOutputLength"], [324, 3, 1, "", "setMaxSentenceSize"], [324, 3, 1, "", "setMinOutputLength"], [324, 3, 1, "", "setNoRepeatNgramSize"], [324, 3, 1, "", "setRepetitionPenalty"], [324, 3, 1, "", "setTemperature"], [324, 3, 1, "", "setTopK"], [324, 3, 1, "", "setTopP"], [324, 2, 1, "", "temperature"], [324, 2, 1, "", "topK"], [324, 2, 1, "", "topP"]], "sparknlp.annotator.cv.smolvlm_transformer": [[325, 1, 1, "", "SmolVLMTransformer"]], "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer": [[325, 2, 1, "", "beamSize"], [325, 2, 1, "", "doImageSplitting"], [325, 2, 1, "", "doSample"], [325, 2, 1, "", "ignoreTokenIds"], [325, 2, 1, "", "imageToken"], [325, 2, 1, "", "inputAnnotatorTypes"], [325, 3, 1, "", "loadSavedModel"], [325, 2, 1, "", "maxImageSize"], [325, 2, 1, "", "maxOutputLength"], [325, 2, 1, "", "minOutputLength"], [325, 2, 1, "", "name"], [325, 2, 1, "", "noRepeatNgramSize"], [325, 2, 1, "", "numVisionTokens"], [325, 2, 1, "", "outputAnnotatorType"], [325, 2, 1, "", "paddingConstant"], [325, 2, 1, "", "patchSize"], [325, 3, 1, "", "pretrained"], [325, 2, 1, "", "repetitionPenalty"], [325, 3, 1, "", "setBeamSize"], [325, 3, 1, "", "setConfigProtoBytes"], [325, 3, 1, "", "setDoImageSplitting"], [325, 3, 1, "", "setDoSample"], [325, 3, 1, "", "setIgnoreTokenIds"], [325, 3, 1, "", "setImageToken"], [325, 3, 1, "", "setMaxImageSize"], [325, 3, 1, "", "setMaxOutputLength"], [325, 3, 1, "", "setMaxSentenceSize"], [325, 3, 1, "", "setMinOutputLength"], [325, 3, 1, "", "setNoRepeatNgramSize"], [325, 3, 1, "", "setNumVisionTokens"], [325, 3, 1, "", "setPaddingConstant"], [325, 3, 1, "", "setPatchSize"], [325, 3, 1, "", "setRepetitionPenalty"], [325, 3, 1, "", "setStopTokenIds"], [325, 3, 1, "", "setTemperature"], [325, 3, 1, "", "setTopK"], [325, 3, 1, "", "setTopP"], [325, 2, 1, "", "stopTokenIds"], [325, 2, 1, "", "temperature"], [325, 2, 1, "", "topK"], [325, 2, 1, "", "topP"]], "sparknlp.annotator.cv.swin_for_image_classification": [[326, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[326, 2, 1, "", "configProtoBytes"], [326, 3, 1, "", "getClasses"], [326, 2, 1, "", "inputAnnotatorTypes"], [326, 3, 1, "", "loadSavedModel"], [326, 2, 1, "", "name"], [326, 2, 1, "", "outputAnnotatorType"], [326, 3, 1, "", "pretrained"], [326, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[327, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[327, 2, 1, "", "configProtoBytes"], [327, 2, 1, "", "inputAnnotatorTypes"], [327, 3, 1, "", "loadSavedModel"], [327, 2, 1, "", "name"], [327, 2, 1, "", "outputAnnotatorType"], [327, 3, 1, "", "pretrained"], [327, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[328, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[328, 2, 1, "", "configProtoBytes"], [328, 3, 1, "", "getClasses"], [328, 2, 1, "", "inputAnnotatorTypes"], [328, 3, 1, "", "loadSavedModel"], [328, 2, 1, "", "name"], [328, 2, 1, "", "outputAnnotatorType"], [328, 3, 1, "", "pretrained"], [328, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[329, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[329, 2, 1, "", "entityName"], [329, 2, 1, "", "inputAnnotatorTypes"], [329, 2, 1, "", "name"], [329, 2, 1, "", "outputAnnotatorType"], [329, 3, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[330, 0, 0, "-", "dependency_parser"], [332, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[330, 1, 1, "", "DependencyParserApproach"], [330, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[330, 2, 1, "", "conllU"], [330, 2, 1, "", "dependencyTreeBank"], [330, 2, 1, "", "inputAnnotatorTypes"], [330, 2, 1, "", "numberOfIterations"], [330, 2, 1, "", "outputAnnotatorType"], [330, 3, 1, "", "setConllU"], [330, 3, 1, "", "setDependencyTreeBank"], [330, 3, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[330, 2, 1, "", "inputAnnotatorTypes"], [330, 2, 1, "", "name"], [330, 2, 1, "", "outputAnnotatorType"], [330, 2, 1, "", "perceptron"], [330, 3, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[332, 1, 1, "", "TypedDependencyParserApproach"], [332, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[332, 2, 1, "", "conll2009"], [332, 2, 1, "", "conllU"], [332, 2, 1, "", "inputAnnotatorTypes"], [332, 2, 1, "", "numberOfIterations"], [332, 2, 1, "", "outputAnnotatorType"], [332, 3, 1, "", "setConll2009"], [332, 3, 1, "", "setConllU"], [332, 3, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[332, 2, 1, "", "conllFormat"], [332, 2, 1, "", "inputAnnotatorTypes"], [332, 2, 1, "", "name"], [332, 2, 1, "", "outputAnnotatorType"], [332, 3, 1, "", "pretrained"], [332, 2, 1, "", "trainDependencyPipe"], [332, 2, 1, "", "trainOptions"], [332, 2, 1, "", "trainParameters"]], "sparknlp.annotator.document_character_text_splitter": [[333, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[333, 2, 1, "", "chunkOverlap"], [333, 2, 1, "", "chunkSize"], [333, 2, 1, "", "explodeSplits"], [333, 2, 1, "", "inputAnnotatorTypes"], [333, 2, 1, "", "keepSeparators"], [333, 2, 1, "", "outputAnnotatorType"], [333, 2, 1, "", "patternsAreRegex"], [333, 3, 1, "", "setChunkOverlap"], [333, 3, 1, "", "setChunkSize"], [333, 3, 1, "", "setExplodeSplits"], [333, 3, 1, "", "setKeepSeparators"], [333, 3, 1, "", "setPatternsAreRegex"], [333, 3, 1, "", "setSplitPatterns"], [333, 3, 1, "", "setTrimWhitespace"], [333, 2, 1, "", "splitPatterns"], [333, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.document_normalizer": [[334, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[334, 2, 1, "", "action"], [334, 2, 1, "", "encoding"], [334, 2, 1, "", "inputAnnotatorTypes"], [334, 2, 1, "", "lowercase"], [334, 2, 1, "", "outputAnnotatorType"], [334, 2, 1, "", "patterns"], [334, 2, 1, "", "policy"], [334, 2, 1, "", "replacement"], [334, 3, 1, "", "setAction"], [334, 3, 1, "", "setEncoding"], [334, 3, 1, "", "setLowercase"], [334, 3, 1, "", "setPatterns"], [334, 3, 1, "", "setPolicy"], [334, 3, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[335, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[335, 2, 1, "", "explodeSplits"], [335, 2, 1, "", "inputAnnotatorTypes"], [335, 2, 1, "", "numTokens"], [335, 2, 1, "", "outputAnnotatorType"], [335, 3, 1, "", "setExplodeSplits"], [335, 3, 1, "", "setNumTokens"], [335, 3, 1, "", "setTokenOverlap"], [335, 3, 1, "", "setTrimWhitespace"], [335, 2, 1, "", "tokenOverlap"], [335, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[336, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[336, 3, 1, "", "setUp"], [336, 3, 1, "", "test_run"]], "sparknlp.annotator.embeddings": [[337, 0, 0, "-", "albert_embeddings"], [338, 0, 0, "-", "auto_gguf_embeddings"], [339, 0, 0, "-", "bert_embeddings"], [340, 0, 0, "-", "bert_sentence_embeddings"], [341, 0, 0, "-", "bge_embeddings"], [342, 0, 0, "-", "camembert_embeddings"], [343, 0, 0, "-", "chunk_embeddings"], [344, 0, 0, "-", "deberta_embeddings"], [345, 0, 0, "-", "distil_bert_embeddings"], [346, 0, 0, "-", "doc2vec"], [347, 0, 0, "-", "e5_embeddings"], [348, 0, 0, "-", "elmo_embeddings"], [350, 0, 0, "-", "instructor_embeddings"], [351, 0, 0, "-", "longformer_embeddings"], [352, 0, 0, "-", "mpnet_embeddings"], [353, 0, 0, "-", "mxbai_embeddings"], [354, 0, 0, "-", "nomic_embeddings"], [355, 0, 0, "-", "roberta_embeddings"], [356, 0, 0, "-", "roberta_sentence_embeddings"], [357, 0, 0, "-", "sentence_embeddings"], [358, 0, 0, "-", "snowflake_embeddings"], [359, 0, 0, "-", "uae_embeddings"], [360, 0, 0, "-", "universal_sentence_encoder"], [361, 0, 0, "-", "word2vec"], [362, 0, 0, "-", "word_embeddings"], [363, 0, 0, "-", "xlm_roberta_embeddings"], [364, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [365, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[337, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[337, 2, 1, "", "configProtoBytes"], [337, 2, 1, "", "inputAnnotatorTypes"], [337, 3, 1, "", "loadSavedModel"], [337, 2, 1, "", "name"], [337, 2, 1, "", "outputAnnotatorType"], [337, 3, 1, "", "pretrained"], [337, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[338, 1, 1, "", "AutoGGUFEmbeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings": [[338, 2, 1, "", "defragmentationThreshold"], [338, 2, 1, "", "embedding"], [338, 2, 1, "", "flashAttention"], [338, 3, 1, "", "getMetadata"], [338, 2, 1, "", "gpuSplitMode"], [338, 2, 1, "", "grpAttnN"], [338, 2, 1, "", "grpAttnW"], [338, 2, 1, "", "inputAnnotatorTypes"], [338, 3, 1, "", "loadSavedModel"], [338, 2, 1, "", "mainGpu"], [338, 2, 1, "", "nBatch"], [338, 2, 1, "", "nChunks"], [338, 2, 1, "", "nCtx"], [338, 2, 1, "", "nGpuLayers"], [338, 2, 1, "", "nSequences"], [338, 2, 1, "", "nThreads"], [338, 2, 1, "", "nThreadsBatch"], [338, 2, 1, "", "nUbatch"], [338, 2, 1, "", "name"], [338, 2, 1, "", "noKvOffload"], [338, 2, 1, "", "numaStrategy"], [338, 2, 1, "", "outputAnnotatorType"], [338, 2, 1, "", "poolingType"], [338, 3, 1, "", "pretrained"], [338, 2, 1, "", "ropeFreqBase"], [338, 2, 1, "", "ropeFreqScale"], [338, 2, 1, "", "ropeScalingType"], [338, 3, 1, "", "setDefragmentationThreshold"], [338, 3, 1, "", "setFlashAttention"], [338, 3, 1, "", "setGpuSplitMode"], [338, 3, 1, "", "setGrpAttnN"], [338, 3, 1, "", "setGrpAttnW"], [338, 3, 1, "", "setMainGpu"], [338, 3, 1, "", "setNBatch"], [338, 3, 1, "", "setNChunks"], [338, 3, 1, "", "setNCtx"], [338, 3, 1, "", "setNGpuLayers"], [338, 3, 1, "", "setNParallel"], [338, 3, 1, "", "setNSequences"], [338, 3, 1, "", "setNThreads"], [338, 3, 1, "", "setNThreadsBatch"], [338, 3, 1, "", "setNUbatch"], [338, 3, 1, "", "setNoKvOffload"], [338, 3, 1, "", "setNumaStrategy"], [338, 3, 1, "", "setPoolingType"], [338, 3, 1, "", "setRopeFreqBase"], [338, 3, 1, "", "setRopeFreqScale"], [338, 3, 1, "", "setRopeScalingType"], [338, 3, 1, "", "setTensorSplit"], [338, 3, 1, "", "setUseMlock"], [338, 3, 1, "", "setUseMmap"], [338, 3, 1, "", "setYarnAttnFactor"], [338, 3, 1, "", "setYarnBetaFast"], [338, 3, 1, "", "setYarnBetaSlow"], [338, 3, 1, "", "setYarnExtFactor"], [338, 3, 1, "", "setYarnOrigCtx"], [338, 2, 1, "", "tensorSplit"], [338, 2, 1, "", "useMlock"], [338, 2, 1, "", "useMmap"], [338, 2, 1, "", "yarnAttnFactor"], [338, 2, 1, "", "yarnBetaFast"], [338, 2, 1, "", "yarnBetaSlow"], [338, 2, 1, "", "yarnExtFactor"], [338, 2, 1, "", "yarnOrigCtx"]], "sparknlp.annotator.embeddings.bert_embeddings": [[339, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[339, 2, 1, "", "configProtoBytes"], [339, 2, 1, "", "inputAnnotatorTypes"], [339, 3, 1, "", "loadSavedModel"], [339, 2, 1, "", "name"], [339, 2, 1, "", "outputAnnotatorType"], [339, 3, 1, "", "pretrained"], [339, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[340, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[340, 2, 1, "", "configProtoBytes"], [340, 2, 1, "", "inputAnnotatorTypes"], [340, 2, 1, "", "isLong"], [340, 3, 1, "", "loadSavedModel"], [340, 2, 1, "", "name"], [340, 2, 1, "", "outputAnnotatorType"], [340, 3, 1, "", "pretrained"], [340, 3, 1, "", "setConfigProtoBytes"], [340, 3, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[341, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[341, 2, 1, "", "configProtoBytes"], [341, 2, 1, "", "inputAnnotatorTypes"], [341, 3, 1, "", "loadSavedModel"], [341, 2, 1, "", "name"], [341, 2, 1, "", "outputAnnotatorType"], [341, 3, 1, "", "pretrained"], [341, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[342, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[342, 2, 1, "", "configProtoBytes"], [342, 2, 1, "", "inputAnnotatorTypes"], [342, 3, 1, "", "loadSavedModel"], [342, 2, 1, "", "name"], [342, 2, 1, "", "outputAnnotatorType"], [342, 3, 1, "", "pretrained"], [342, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[343, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[343, 2, 1, "", "inputAnnotatorTypes"], [343, 2, 1, "", "name"], [343, 2, 1, "", "outputAnnotatorType"], [343, 2, 1, "", "poolingStrategy"], [343, 3, 1, "", "setPoolingStrategy"], [343, 3, 1, "", "setSkipOOV"], [343, 2, 1, "", "skipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[344, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[344, 2, 1, "", "configProtoBytes"], [344, 2, 1, "", "inputAnnotatorTypes"], [344, 3, 1, "", "loadSavedModel"], [344, 2, 1, "", "name"], [344, 2, 1, "", "outputAnnotatorType"], [344, 3, 1, "", "pretrained"], [344, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[345, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[345, 2, 1, "", "configProtoBytes"], [345, 2, 1, "", "inputAnnotatorTypes"], [345, 3, 1, "", "loadSavedModel"], [345, 2, 1, "", "name"], [345, 2, 1, "", "outputAnnotatorType"], [345, 3, 1, "", "pretrained"], [345, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[346, 1, 1, "", "Doc2VecApproach"], [346, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[346, 2, 1, "", "inputAnnotatorTypes"], [346, 2, 1, "", "maxIter"], [346, 2, 1, "", "maxSentenceLength"], [346, 2, 1, "", "minCount"], [346, 2, 1, "", "numPartitions"], [346, 2, 1, "", "outputAnnotatorType"], [346, 2, 1, "", "seed"], [346, 3, 1, "", "setMaxIter"], [346, 3, 1, "", "setMaxSentenceLength"], [346, 3, 1, "", "setMinCount"], [346, 3, 1, "", "setNumPartitions"], [346, 3, 1, "", "setSeed"], [346, 3, 1, "", "setStepSize"], [346, 3, 1, "", "setVectorSize"], [346, 3, 1, "", "setWindowSize"], [346, 2, 1, "", "stepSize"], [346, 2, 1, "", "vectorSize"], [346, 2, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[346, 3, 1, "", "getVectors"], [346, 2, 1, "", "inputAnnotatorTypes"], [346, 2, 1, "", "name"], [346, 2, 1, "", "outputAnnotatorType"], [346, 3, 1, "", "pretrained"], [346, 3, 1, "", "setVectorSize"], [346, 2, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[347, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[347, 2, 1, "", "configProtoBytes"], [347, 2, 1, "", "inputAnnotatorTypes"], [347, 3, 1, "", "loadSavedModel"], [347, 2, 1, "", "name"], [347, 2, 1, "", "outputAnnotatorType"], [347, 3, 1, "", "pretrained"], [347, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[348, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[348, 2, 1, "", "batchSize"], [348, 2, 1, "", "configProtoBytes"], [348, 2, 1, "", "inputAnnotatorTypes"], [348, 3, 1, "", "loadSavedModel"], [348, 2, 1, "", "name"], [348, 2, 1, "", "outputAnnotatorType"], [348, 2, 1, "", "poolingLayer"], [348, 3, 1, "", "pretrained"], [348, 3, 1, "", "setBatchSize"], [348, 3, 1, "", "setConfigProtoBytes"], [348, 3, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[350, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[350, 2, 1, "", "configProtoBytes"], [350, 2, 1, "", "inputAnnotatorTypes"], [350, 2, 1, "", "instruction"], [350, 3, 1, "", "loadSavedModel"], [350, 2, 1, "", "name"], [350, 2, 1, "", "outputAnnotatorType"], [350, 3, 1, "", "pretrained"], [350, 3, 1, "", "setConfigProtoBytes"], [350, 3, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[351, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[351, 2, 1, "", "configProtoBytes"], [351, 2, 1, "", "inputAnnotatorTypes"], [351, 3, 1, "", "loadSavedModel"], [351, 2, 1, "", "name"], [351, 2, 1, "", "outputAnnotatorType"], [351, 3, 1, "", "pretrained"], [351, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[352, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[352, 2, 1, "", "configProtoBytes"], [352, 2, 1, "", "inputAnnotatorTypes"], [352, 3, 1, "", "loadSavedModel"], [352, 2, 1, "", "name"], [352, 2, 1, "", "outputAnnotatorType"], [352, 3, 1, "", "pretrained"], [352, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[353, 1, 1, "", "MxbaiEmbeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings": [[353, 2, 1, "", "inputAnnotatorTypes"], [353, 3, 1, "", "loadSavedModel"], [353, 2, 1, "", "name"], [353, 2, 1, "", "outputAnnotatorType"], [353, 2, 1, "", "poolingStrategy"], [353, 3, 1, "", "pretrained"], [353, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[354, 1, 1, "", "NomicEmbeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings": [[354, 2, 1, "", "configProtoBytes"], [354, 2, 1, "", "inputAnnotatorTypes"], [354, 3, 1, "", "loadSavedModel"], [354, 2, 1, "", "name"], [354, 2, 1, "", "outputAnnotatorType"], [354, 3, 1, "", "pretrained"], [354, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[355, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[355, 2, 1, "", "configProtoBytes"], [355, 2, 1, "", "inputAnnotatorTypes"], [355, 3, 1, "", "loadSavedModel"], [355, 2, 1, "", "name"], [355, 2, 1, "", "outputAnnotatorType"], [355, 3, 1, "", "pretrained"], [355, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[356, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[356, 2, 1, "", "configProtoBytes"], [356, 2, 1, "", "inputAnnotatorTypes"], [356, 3, 1, "", "loadSavedModel"], [356, 2, 1, "", "name"], [356, 2, 1, "", "outputAnnotatorType"], [356, 3, 1, "", "pretrained"], [356, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[357, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[357, 2, 1, "", "inputAnnotatorTypes"], [357, 2, 1, "", "name"], [357, 2, 1, "", "outputAnnotatorType"], [357, 2, 1, "", "poolingStrategy"], [357, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[358, 1, 1, "", "SnowFlakeEmbeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings": [[358, 2, 1, "", "inputAnnotatorTypes"], [358, 3, 1, "", "loadSavedModel"], [358, 2, 1, "", "name"], [358, 2, 1, "", "outputAnnotatorType"], [358, 2, 1, "", "poolingStrategy"], [358, 3, 1, "", "pretrained"], [358, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[359, 1, 1, "", "UAEEmbeddings"]], "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings": [[359, 2, 1, "", "inputAnnotatorTypes"], [359, 3, 1, "", "loadSavedModel"], [359, 2, 1, "", "name"], [359, 2, 1, "", "outputAnnotatorType"], [359, 2, 1, "", "poolingStrategy"], [359, 3, 1, "", "pretrained"], [359, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[360, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[360, 2, 1, "", "configProtoBytes"], [360, 2, 1, "", "inputAnnotatorTypes"], [360, 2, 1, "", "loadSP"], [360, 3, 1, "", "loadSavedModel"], [360, 2, 1, "", "name"], [360, 2, 1, "", "outputAnnotatorType"], [360, 3, 1, "", "pretrained"], [360, 3, 1, "", "setConfigProtoBytes"], [360, 3, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[361, 1, 1, "", "Word2VecApproach"], [361, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[361, 2, 1, "", "inputAnnotatorTypes"], [361, 2, 1, "", "maxIter"], [361, 2, 1, "", "maxSentenceLength"], [361, 2, 1, "", "minCount"], [361, 2, 1, "", "numPartitions"], [361, 2, 1, "", "outputAnnotatorType"], [361, 2, 1, "", "seed"], [361, 3, 1, "", "setMaxIter"], [361, 3, 1, "", "setMaxSentenceLength"], [361, 3, 1, "", "setMinCount"], [361, 3, 1, "", "setNumPartitions"], [361, 3, 1, "", "setSeed"], [361, 3, 1, "", "setStepSize"], [361, 3, 1, "", "setVectorSize"], [361, 3, 1, "", "setWindowSize"], [361, 2, 1, "", "stepSize"], [361, 2, 1, "", "vectorSize"], [361, 2, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[361, 3, 1, "", "getVectors"], [361, 2, 1, "", "inputAnnotatorTypes"], [361, 2, 1, "", "name"], [361, 2, 1, "", "outputAnnotatorType"], [361, 3, 1, "", "pretrained"], [361, 3, 1, "", "setVectorSize"], [361, 2, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[362, 1, 1, "", "WordEmbeddings"], [362, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[362, 2, 1, "", "inputAnnotatorTypes"], [362, 2, 1, "", "name"], [362, 2, 1, "", "outputAnnotatorType"], [362, 2, 1, "", "readCacheSize"], [362, 3, 1, "", "setReadCacheSize"], [362, 3, 1, "", "setWriteBufferSize"], [362, 2, 1, "", "writeBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[362, 2, 1, "", "databases"], [362, 2, 1, "", "inputAnnotatorTypes"], [362, 3, 1, "", "loadStorage"], [362, 2, 1, "", "name"], [362, 2, 1, "", "outputAnnotatorType"], [362, 3, 1, "", "overallCoverage"], [362, 3, 1, "", "pretrained"], [362, 2, 1, "", "readCacheSize"], [362, 3, 1, "", "setReadCacheSize"], [362, 3, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[363, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[363, 2, 1, "", "configProtoBytes"], [363, 2, 1, "", "inputAnnotatorTypes"], [363, 3, 1, "", "loadSavedModel"], [363, 2, 1, "", "name"], [363, 2, 1, "", "outputAnnotatorType"], [363, 3, 1, "", "pretrained"], [363, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[364, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[364, 2, 1, "", "configProtoBytes"], [364, 2, 1, "", "inputAnnotatorTypes"], [364, 3, 1, "", "loadSavedModel"], [364, 2, 1, "", "name"], [364, 2, 1, "", "outputAnnotatorType"], [364, 3, 1, "", "pretrained"], [364, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[365, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[365, 2, 1, "", "configProtoBytes"], [365, 2, 1, "", "inputAnnotatorTypes"], [365, 3, 1, "", "loadSavedModel"], [365, 2, 1, "", "name"], [365, 2, 1, "", "outputAnnotatorType"], [365, 3, 1, "", "pretrained"], [365, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[366, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[366, 1, 1, "", "EntityRulerApproach"], [366, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[366, 2, 1, "", "alphabet"], [366, 2, 1, "", "inputAnnotatorTypes"], [366, 2, 1, "", "name"], [366, 2, 1, "", "optionalInputAnnotatorTypes"], [366, 2, 1, "", "outputAnnotatorType"], [366, 2, 1, "", "patternsResource"], [366, 2, 1, "", "sentenceMatch"], [366, 3, 1, "", "setAlphabetResource"], [366, 3, 1, "", "setPatternsResource"], [366, 3, 1, "", "setSentenceMatch"], [366, 3, 1, "", "setUseStorage"], [366, 2, 1, "", "useStorage"]], "sparknlp.annotator.er.entity_ruler.EntityRulerModel": [[366, 2, 1, "", "database"], [366, 2, 1, "", "inputAnnotatorTypes"], [366, 3, 1, "", "loadStorage"], [366, 2, 1, "", "name"], [366, 2, 1, "", "optionalInputAnnotatorTypes"], [366, 2, 1, "", "outputAnnotatorType"], [366, 3, 1, "", "pretrained"]], "sparknlp.annotator.graph_extraction": [[368, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[368, 2, 1, "", "delimiter"], [368, 2, 1, "", "dependencyParserModel"], [368, 2, 1, "", "entityTypes"], [368, 2, 1, "", "explodeEntities"], [368, 2, 1, "", "includeEdges"], [368, 2, 1, "", "inputAnnotatorTypes"], [368, 2, 1, "", "maxSentenceSize"], [368, 2, 1, "", "mergeEntities"], [368, 2, 1, "", "mergeEntitiesIOBFormat"], [368, 2, 1, "", "minSentenceSize"], [368, 2, 1, "", "name"], [368, 2, 1, "", "optionalInputAnnotatorTypes"], [368, 2, 1, "", "outputAnnotatorType"], [368, 2, 1, "", "posModel"], [368, 2, 1, "", "relationshipTypes"], [368, 2, 1, "", "rootTokens"], [368, 3, 1, "", "setDelimiter"], [368, 3, 1, "", "setDependencyParserModel"], [368, 3, 1, "", "setEntityTypes"], [368, 3, 1, "", "setExplodeEntities"], [368, 3, 1, "", "setIncludeEdges"], [368, 3, 1, "", "setMaxSentenceSize"], [368, 3, 1, "", "setMergeEntities"], [368, 3, 1, "", "setMergeEntitiesIOBFormat"], [368, 3, 1, "", "setMinSentenceSize"], [368, 3, 1, "", "setPosModel"], [368, 3, 1, "", "setRelationshipTypes"], [368, 3, 1, "", "setRootTokens"], [368, 3, 1, "", "setTypedDependencyParserModel"], [368, 2, 1, "", "typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[371, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[371, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[371, 3, 1, "", "getStopWords"], [371, 2, 1, "", "inputAnnotatorTypes"], [371, 3, 1, "", "loadDefaultStopWords"], [371, 2, 1, "", "maxNGrams"], [371, 2, 1, "", "minNGrams"], [371, 2, 1, "", "nKeywords"], [371, 2, 1, "", "name"], [371, 2, 1, "", "outputAnnotatorType"], [371, 3, 1, "", "setMaxNGrams"], [371, 3, 1, "", "setMinNGrams"], [371, 3, 1, "", "setNKeywords"], [371, 3, 1, "", "setStopWords"], [371, 3, 1, "", "setThreshold"], [371, 3, 1, "", "setWindowSize"], [371, 2, 1, "", "stopWords"], [371, 2, 1, "", "threshold"], [371, 2, 1, "", "windowSize"]], "sparknlp.annotator.ld_dl": [[373, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[373, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[373, 2, 1, "", "coalesceSentences"], [373, 2, 1, "", "configProtoBytes"], [373, 2, 1, "", "inputAnnotatorTypes"], [373, 2, 1, "", "languages"], [373, 2, 1, "", "name"], [373, 2, 1, "", "outputAnnotatorType"], [373, 3, 1, "", "pretrained"], [373, 3, 1, "", "setCoalesceSentences"], [373, 3, 1, "", "setConfigProtoBytes"], [373, 3, 1, "", "setThreshold"], [373, 3, 1, "", "setThresholdLabel"], [373, 2, 1, "", "threshold"], [373, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.lemmatizer": [[374, 1, 1, "", "Lemmatizer"], [374, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[374, 2, 1, "", "dictionary"], [374, 2, 1, "", "formCol"], [374, 2, 1, "", "inputAnnotatorTypes"], [374, 2, 1, "", "lemmaCol"], [374, 2, 1, "", "outputAnnotatorType"], [374, 3, 1, "", "setDictionary"], [374, 3, 1, "", "setFormCol"], [374, 3, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[374, 2, 1, "", "inputAnnotatorTypes"], [374, 2, 1, "", "name"], [374, 2, 1, "", "outputAnnotatorType"], [374, 3, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[375, 0, 0, "-", "big_text_matcher"], [376, 0, 0, "-", "date_matcher"], [378, 0, 0, "-", "multi_date_matcher"], [379, 0, 0, "-", "regex_matcher"], [380, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[375, 1, 1, "", "BigTextMatcher"], [375, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[375, 2, 1, "", "caseSensitive"], [375, 2, 1, "", "entities"], [375, 2, 1, "", "inputAnnotatorTypes"], [375, 2, 1, "", "mergeOverlapping"], [375, 2, 1, "", "outputAnnotatorType"], [375, 3, 1, "", "setCaseSensitive"], [375, 3, 1, "", "setEntities"], [375, 3, 1, "", "setMergeOverlapping"], [375, 3, 1, "", "setTokenizer"], [375, 2, 1, "", "tokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[375, 2, 1, "", "caseSensitive"], [375, 2, 1, "", "databases"], [375, 2, 1, "", "inputAnnotatorTypes"], [375, 3, 1, "", "loadStorage"], [375, 2, 1, "", "mergeOverlapping"], [375, 2, 1, "", "name"], [375, 2, 1, "", "outputAnnotatorType"], [375, 3, 1, "", "pretrained"], [375, 2, 1, "", "searchTrie"], [375, 3, 1, "", "setCaseSensitive"], [375, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[376, 1, 1, "", "DateMatcher"], [376, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcher": [[376, 2, 1, "", "inputAnnotatorTypes"], [376, 2, 1, "", "name"], [376, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[376, 2, 1, "", "aggressiveMatching"], [376, 2, 1, "", "anchorDateDay"], [376, 2, 1, "", "anchorDateMonth"], [376, 2, 1, "", "anchorDateYear"], [376, 2, 1, "", "defaultDayWhenMissing"], [376, 2, 1, "", "inputFormats"], [376, 2, 1, "", "outputFormat"], [376, 2, 1, "", "readMonthFirst"], [376, 2, 1, "", "relaxedFactoryStrategy"], [376, 3, 1, "", "setAggressiveMatching"], [376, 3, 1, "", "setAnchorDateDay"], [376, 3, 1, "", "setAnchorDateMonth"], [376, 3, 1, "", "setAnchorDateYear"], [376, 3, 1, "", "setDefaultDayWhenMissing"], [376, 3, 1, "", "setInputFormats"], [376, 3, 1, "", "setOutputFormat"], [376, 3, 1, "", "setReadMonthFirst"], [376, 3, 1, "", "setRelaxedFactoryStrategy"], [376, 3, 1, "", "setSourceLanguage"], [376, 2, 1, "", "sourceLanguage"]], "sparknlp.annotator.matcher.multi_date_matcher": [[378, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher": [[378, 2, 1, "", "inputAnnotatorTypes"], [378, 2, 1, "", "name"], [378, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.regex_matcher": [[379, 1, 1, "", "RegexMatcher"], [379, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[379, 2, 1, "", "delimiter"], [379, 2, 1, "", "externalRules"], [379, 2, 1, "", "inputAnnotatorTypes"], [379, 2, 1, "", "outputAnnotatorType"], [379, 2, 1, "", "rules"], [379, 3, 1, "", "setDelimiter"], [379, 3, 1, "", "setExternalRules"], [379, 3, 1, "", "setRules"], [379, 3, 1, "", "setStrategy"], [379, 2, 1, "", "strategy"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel": [[379, 2, 1, "", "inputAnnotatorTypes"], [379, 2, 1, "", "name"], [379, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.text_matcher": [[380, 1, 1, "", "TextMatcher"], [380, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[380, 2, 1, "", "buildFromTokens"], [380, 2, 1, "", "caseSensitive"], [380, 2, 1, "", "entities"], [380, 2, 1, "", "entityValue"], [380, 2, 1, "", "inputAnnotatorTypes"], [380, 2, 1, "", "mergeOverlapping"], [380, 2, 1, "", "outputAnnotatorType"], [380, 3, 1, "", "setBuildFromTokens"], [380, 3, 1, "", "setCaseSensitive"], [380, 3, 1, "", "setEntities"], [380, 3, 1, "", "setEntityValue"], [380, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[380, 2, 1, "", "buildFromTokens"], [380, 2, 1, "", "entityValue"], [380, 2, 1, "", "inputAnnotatorTypes"], [380, 2, 1, "", "mergeOverlapping"], [380, 2, 1, "", "name"], [380, 2, 1, "", "outputAnnotatorType"], [380, 3, 1, "", "pretrained"], [380, 2, 1, "", "searchTrie"], [380, 3, 1, "", "setBuildFromTokens"], [380, 3, 1, "", "setEntityValue"], [380, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[381, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[381, 2, 1, "", "delimiter"], [381, 2, 1, "", "enableCumulative"], [381, 2, 1, "", "inputAnnotatorTypes"], [381, 2, 1, "", "n"], [381, 2, 1, "", "name"], [381, 2, 1, "", "outputAnnotatorType"], [381, 3, 1, "", "setDelimiter"], [381, 3, 1, "", "setEnableCumulative"], [381, 3, 1, "", "setN"]], "sparknlp.annotator.ner": [[383, 0, 0, "-", "ner_approach"], [384, 0, 0, "-", "ner_converter"], [385, 0, 0, "-", "ner_crf"], [386, 0, 0, "-", "ner_dl"], [387, 0, 0, "-", "ner_overwriter"], [388, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[383, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[383, 2, 1, "", "entities"], [383, 3, 1, "", "getLabelColumn"], [383, 2, 1, "", "labelColumn"], [383, 2, 1, "", "maxEpochs"], [383, 2, 1, "", "minEpochs"], [383, 2, 1, "", "randomSeed"], [383, 3, 1, "", "setEntities"], [383, 3, 1, "", "setLabelColumn"], [383, 3, 1, "", "setMaxEpochs"], [383, 3, 1, "", "setMinEpochs"], [383, 3, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[384, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[384, 2, 1, "", "inputAnnotatorTypes"], [384, 2, 1, "", "name"], [384, 2, 1, "", "nerHasNoSchema"], [384, 2, 1, "", "outputAnnotatorType"], [384, 2, 1, "", "preservePosition"], [384, 3, 1, "", "setNerHasNoSchema"], [384, 3, 1, "", "setPreservePosition"], [384, 3, 1, "", "setWhiteList"], [384, 2, 1, "", "whiteList"]], "sparknlp.annotator.ner.ner_crf": [[385, 1, 1, "", "NerCrfApproach"], [385, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[385, 2, 1, "", "c0"], [385, 2, 1, "", "externalFeatures"], [385, 2, 1, "", "includeConfidence"], [385, 2, 1, "", "inputAnnotatorTypes"], [385, 2, 1, "", "l2"], [385, 2, 1, "", "lossEps"], [385, 2, 1, "", "minW"], [385, 2, 1, "", "outputAnnotatorType"], [385, 3, 1, "", "setC0"], [385, 3, 1, "", "setExternalFeatures"], [385, 3, 1, "", "setIncludeConfidence"], [385, 3, 1, "", "setL2"], [385, 3, 1, "", "setLossEps"], [385, 3, 1, "", "setMinW"], [385, 3, 1, "", "setVerbose"], [385, 2, 1, "", "verbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[385, 2, 1, "", "includeConfidence"], [385, 2, 1, "", "inputAnnotatorTypes"], [385, 2, 1, "", "name"], [385, 2, 1, "", "outputAnnotatorType"], [385, 3, 1, "", "pretrained"], [385, 3, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[386, 1, 1, "", "NerDLApproach"], [386, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[386, 2, 1, "", "batchSize"], [386, 2, 1, "", "bestModelMetric"], [386, 2, 1, "", "configProtoBytes"], [386, 2, 1, "", "dropout"], [386, 2, 1, "", "enableMemoryOptimizer"], [386, 2, 1, "", "graphFolder"], [386, 2, 1, "", "includeAllConfidenceScores"], [386, 2, 1, "", "includeConfidence"], [386, 2, 1, "", "inputAnnotatorTypes"], [386, 2, 1, "", "lr"], [386, 2, 1, "", "outputAnnotatorType"], [386, 2, 1, "", "po"], [386, 3, 1, "", "setBatchSize"], [386, 3, 1, "", "setBestModelMetric"], [386, 3, 1, "", "setConfigProtoBytes"], [386, 3, 1, "", "setDropout"], [386, 3, 1, "", "setEnableMemoryOptimizer"], [386, 3, 1, "", "setGraphFolder"], [386, 3, 1, "", "setIncludeAllConfidenceScores"], [386, 3, 1, "", "setIncludeConfidence"], [386, 3, 1, "", "setLr"], [386, 3, 1, "", "setPo"], [386, 3, 1, "", "setUseBestModel"], [386, 3, 1, "", "setUseContrib"], [386, 2, 1, "", "useBestModel"], [386, 2, 1, "", "useContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[386, 2, 1, "", "classes"], [386, 2, 1, "", "configProtoBytes"], [386, 2, 1, "", "includeAllConfidenceScores"], [386, 2, 1, "", "includeConfidence"], [386, 2, 1, "", "inputAnnotatorTypes"], [386, 2, 1, "", "name"], [386, 2, 1, "", "outputAnnotatorType"], [386, 3, 1, "", "pretrained"], [386, 3, 1, "", "setConfigProtoBytes"], [386, 3, 1, "", "setIncludeAllConfidenceScores"], [386, 3, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[387, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[387, 2, 1, "", "inputAnnotatorTypes"], [387, 2, 1, "", "name"], [387, 2, 1, "", "nerWords"], [387, 2, 1, "", "newNerEntity"], [387, 2, 1, "", "outputAnnotatorType"], [387, 2, 1, "", "replaceEntities"], [387, 3, 1, "", "setNerWords"], [387, 3, 1, "", "setNewNerEntity"], [387, 3, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[388, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[388, 3, 1, "", "getClasses"], [388, 2, 1, "", "ignoreEntities"], [388, 2, 1, "", "inputAnnotatorTypes"], [388, 3, 1, "", "load"], [388, 2, 1, "", "name"], [388, 2, 1, "", "outputAnnotatorType"], [388, 2, 1, "", "predictionThreshold"], [388, 3, 1, "", "pretrained"], [388, 3, 1, "", "setEntityDefinitions"], [388, 3, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[389, 1, 1, "", "Normalizer"], [389, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[389, 2, 1, "", "cleanupPatterns"], [389, 2, 1, "", "inputAnnotatorTypes"], [389, 2, 1, "", "lowercase"], [389, 2, 1, "", "maxLength"], [389, 2, 1, "", "minLength"], [389, 2, 1, "", "outputAnnotatorType"], [389, 3, 1, "", "setCleanupPatterns"], [389, 3, 1, "", "setLowercase"], [389, 3, 1, "", "setMaxLength"], [389, 3, 1, "", "setMinLength"], [389, 3, 1, "", "setSlangDictionary"], [389, 2, 1, "", "slangDictionary"], [389, 2, 1, "", "slangMatchCase"]], "sparknlp.annotator.normalizer.NormalizerModel": [[389, 2, 1, "", "cleanupPatterns"], [389, 2, 1, "", "inputAnnotatorTypes"], [389, 2, 1, "", "lowercase"], [389, 2, 1, "", "name"], [389, 2, 1, "", "outputAnnotatorType"], [389, 2, 1, "", "slangMatchCase"]], "sparknlp.annotator.openai": [[391, 0, 0, "-", "openai_completion"], [392, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[391, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[391, 2, 1, "", "bestOf"], [391, 2, 1, "", "echo"], [391, 2, 1, "", "frequencyPenalty"], [391, 2, 1, "", "inputAnnotatorTypes"], [391, 2, 1, "", "logitBias"], [391, 2, 1, "", "logprobs"], [391, 2, 1, "", "maxTokens"], [391, 2, 1, "", "model"], [391, 2, 1, "", "name"], [391, 2, 1, "", "numberOfCompletions"], [391, 2, 1, "", "outputAnnotatorType"], [391, 2, 1, "", "presencePenalty"], [391, 3, 1, "", "setBestOf"], [391, 3, 1, "", "setEcho"], [391, 3, 1, "", "setFrequencyPenalty"], [391, 3, 1, "", "setLogitBias"], [391, 3, 1, "", "setLogprobs"], [391, 3, 1, "", "setMaxTokens"], [391, 3, 1, "", "setModel"], [391, 3, 1, "", "setNumberOfCompletions"], [391, 3, 1, "", "setPresencePenalty"], [391, 3, 1, "", "setStop"], [391, 3, 1, "", "setSuffix"], [391, 3, 1, "", "setTemperature"], [391, 3, 1, "", "setTopP"], [391, 3, 1, "", "setUser"], [391, 2, 1, "", "stop"], [391, 2, 1, "", "suffix"], [391, 2, 1, "", "temperature"], [391, 2, 1, "", "topP"], [391, 2, 1, "", "user"]], "sparknlp.annotator.openai.openai_embeddings": [[392, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[392, 2, 1, "", "inputAnnotatorTypes"], [392, 2, 1, "", "model"], [392, 2, 1, "", "name"], [392, 2, 1, "", "outputAnnotatorType"], [392, 3, 1, "", "setModel"], [392, 3, 1, "", "setUser"], [392, 2, 1, "", "user"]], "sparknlp.annotator.param": [[393, 0, 0, "-", "classifier_encoder"], [394, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[393, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[393, 2, 1, "", "batchSize"], [393, 2, 1, "", "configProtoBytes"], [393, 2, 1, "", "labelColumn"], [393, 2, 1, "", "lr"], [393, 2, 1, "", "maxEpochs"], [393, 2, 1, "", "randomSeed"], [393, 3, 1, "", "setBatchSize"], [393, 3, 1, "", "setConfigProtoBytes"], [393, 3, 1, "", "setLabelColumn"], [393, 3, 1, "", "setLr"], [393, 3, 1, "", "setMaxEpochs"], [393, 3, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[394, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[394, 2, 1, "", "enableOutputLogs"], [394, 2, 1, "", "evaluationLogExtended"], [394, 2, 1, "", "outputLogsPath"], [394, 3, 1, "", "setEnableOutputLogs"], [394, 3, 1, "", "setEvaluationLogExtended"], [394, 3, 1, "", "setOutputLogsPath"], [394, 3, 1, "", "setTestDataset"], [394, 3, 1, "", "setValidationSplit"], [394, 3, 1, "", "setVerbose"], [394, 2, 1, "", "testDataset"], [394, 2, 1, "", "validationSplit"], [394, 2, 1, "", "verbose"]], "sparknlp.annotator.pos": [[397, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[397, 1, 1, "", "PerceptronApproach"], [397, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[397, 3, 1, "", "getNIterations"], [397, 2, 1, "", "inputAnnotatorTypes"], [397, 2, 1, "", "nIterations"], [397, 2, 1, "", "outputAnnotatorType"], [397, 2, 1, "", "posCol"], [397, 3, 1, "", "setIterations"], [397, 3, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[397, 2, 1, "", "inputAnnotatorTypes"], [397, 2, 1, "", "name"], [397, 2, 1, "", "outputAnnotatorType"], [397, 3, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[399, 0, 0, "-", "sentence_detector"], [400, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[399, 1, 1, "", "SentenceDetector"], [399, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[399, 2, 1, "", "detectLists"], [399, 2, 1, "", "inputAnnotatorTypes"], [399, 2, 1, "", "name"], [399, 2, 1, "", "outputAnnotatorType"], [399, 3, 1, "", "setCustomBounds"], [399, 3, 1, "", "setCustomBoundsStrategy"], [399, 3, 1, "", "setDetectLists"], [399, 3, 1, "", "setExplodeSentences"], [399, 3, 1, "", "setMaxLength"], [399, 3, 1, "", "setMinLength"], [399, 3, 1, "", "setSplitLength"], [399, 3, 1, "", "setUseAbbreviations"], [399, 3, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams": [[399, 2, 1, "", "customBounds"], [399, 2, 1, "", "customBoundsStrategy"], [399, 2, 1, "", "explodeSentences"], [399, 2, 1, "", "maxLength"], [399, 2, 1, "", "minLength"], [399, 2, 1, "", "splitLength"], [399, 2, 1, "", "useAbbreviations"], [399, 2, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[400, 1, 1, "", "SentenceDetectorDLApproach"], [400, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[400, 2, 1, "", "epochsNumber"], [400, 2, 1, "", "explodeSentences"], [400, 2, 1, "", "impossiblePenultimates"], [400, 2, 1, "", "inputAnnotatorTypes"], [400, 2, 1, "", "modelArchitecture"], [400, 2, 1, "", "name"], [400, 2, 1, "", "outputAnnotatorType"], [400, 2, 1, "", "outputLogsPath"], [400, 3, 1, "", "setEpochsNumber"], [400, 3, 1, "", "setExplodeSentences"], [400, 3, 1, "", "setImpossiblePenultimates"], [400, 3, 1, "", "setModel"], [400, 3, 1, "", "setOutputLogsPath"], [400, 3, 1, "", "setValidationSplit"], [400, 2, 1, "", "validationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[400, 2, 1, "", "customBounds"], [400, 2, 1, "", "explodeSentences"], [400, 2, 1, "", "impossiblePenultimates"], [400, 2, 1, "", "inputAnnotatorTypes"], [400, 2, 1, "", "maxLength"], [400, 2, 1, "", "minLength"], [400, 2, 1, "", "modelArchitecture"], [400, 2, 1, "", "name"], [400, 2, 1, "", "outputAnnotatorType"], [400, 3, 1, "", "pretrained"], [400, 3, 1, "", "setCustomBounds"], [400, 3, 1, "", "setExplodeSentences"], [400, 3, 1, "", "setImpossiblePenultimates"], [400, 3, 1, "", "setMaxLength"], [400, 3, 1, "", "setMinLength"], [400, 3, 1, "", "setModel"], [400, 3, 1, "", "setSplitLength"], [400, 3, 1, "", "setUseCustomBoundsOnly"], [400, 2, 1, "", "splitLength"], [400, 2, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[402, 0, 0, "-", "sentiment_detector"], [403, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[402, 1, 1, "", "SentimentDetector"], [402, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[402, 2, 1, "", "decrementMultiplier"], [402, 2, 1, "", "dictionary"], [402, 2, 1, "", "enableScore"], [402, 2, 1, "", "incrementMultiplier"], [402, 2, 1, "", "inputAnnotatorTypes"], [402, 2, 1, "", "negativeMultiplier"], [402, 2, 1, "", "outputAnnotatorType"], [402, 2, 1, "", "positiveMultiplier"], [402, 2, 1, "", "reverseMultiplier"], [402, 3, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel": [[402, 2, 1, "", "inputAnnotatorTypes"], [402, 2, 1, "", "name"], [402, 2, 1, "", "outputAnnotatorType"], [402, 2, 1, "", "positiveMultiplier"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[403, 1, 1, "", "ViveknSentimentApproach"], [403, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[403, 2, 1, "", "featureLimit"], [403, 2, 1, "", "importantFeatureRatio"], [403, 2, 1, "", "inputAnnotatorTypes"], [403, 2, 1, "", "outputAnnotatorType"], [403, 2, 1, "", "pruneCorpus"], [403, 2, 1, "", "sentimentCol"], [403, 3, 1, "", "setPruneCorpus"], [403, 3, 1, "", "setSentimentCol"], [403, 2, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[403, 2, 1, "", "featureLimit"], [403, 2, 1, "", "importantFeatureRatio"], [403, 2, 1, "", "inputAnnotatorTypes"], [403, 2, 1, "", "name"], [403, 2, 1, "", "outputAnnotatorType"], [403, 3, 1, "", "pretrained"], [403, 2, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[404, 0, 0, "-", "auto_gguf_model"], [405, 0, 0, "-", "auto_gguf_vision_model"], [406, 0, 0, "-", "bart_transformer"], [407, 0, 0, "-", "cohere_transformer"], [408, 0, 0, "-", "cpm_transformer"], [409, 0, 0, "-", "gpt2_transformer"], [411, 0, 0, "-", "llama2_transformer"], [412, 0, 0, "-", "llama3_transformer"], [413, 0, 0, "-", "m2m100_transformer"], [414, 0, 0, "-", "marian_transformer"], [415, 0, 0, "-", "mistral_transformer"], [416, 0, 0, "-", "nllb_transformer"], [417, 0, 0, "-", "olmo_transformer"], [418, 0, 0, "-", "phi2_transformer"], [419, 0, 0, "-", "phi3_transformer"], [420, 0, 0, "-", "qwen_transformer"], [421, 0, 0, "-", "starcoder_transformer"], [422, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[404, 1, 1, "", "AutoGGUFModel"]], "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel": [[404, 2, 1, "", "inputAnnotatorTypes"], [404, 3, 1, "", "loadSavedModel"], [404, 2, 1, "", "name"], [404, 2, 1, "", "outputAnnotatorType"], [404, 3, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[405, 1, 1, "", "AutoGGUFVisionModel"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel": [[405, 2, 1, "", "inputAnnotatorTypes"], [405, 3, 1, "", "loadSavedModel"], [405, 2, 1, "", "name"], [405, 2, 1, "", "outputAnnotatorType"], [405, 3, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.bart_transformer": [[406, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[406, 2, 1, "", "beamSize"], [406, 2, 1, "", "configProtoBytes"], [406, 2, 1, "", "doSample"], [406, 2, 1, "", "ignoreTokenIds"], [406, 2, 1, "", "inputAnnotatorTypes"], [406, 3, 1, "", "loadSavedModel"], [406, 2, 1, "", "maxOutputLength"], [406, 2, 1, "", "minOutputLength"], [406, 2, 1, "", "name"], [406, 2, 1, "", "noRepeatNgramSize"], [406, 2, 1, "", "outputAnnotatorType"], [406, 3, 1, "", "pretrained"], [406, 2, 1, "", "repetitionPenalty"], [406, 3, 1, "", "setBeamSize"], [406, 3, 1, "", "setCache"], [406, 3, 1, "", "setConfigProtoBytes"], [406, 3, 1, "", "setDoSample"], [406, 3, 1, "", "setIgnoreTokenIds"], [406, 3, 1, "", "setMaxOutputLength"], [406, 3, 1, "", "setMinOutputLength"], [406, 3, 1, "", "setNoRepeatNgramSize"], [406, 3, 1, "", "setRepetitionPenalty"], [406, 3, 1, "", "setTask"], [406, 3, 1, "", "setTemperature"], [406, 3, 1, "", "setTopK"], [406, 3, 1, "", "setTopP"], [406, 2, 1, "", "task"], [406, 2, 1, "", "temperature"], [406, 2, 1, "", "topK"], [406, 2, 1, "", "topP"], [406, 2, 1, "", "useCache"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[407, 1, 1, "", "CoHereTransformer"]], "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer": [[407, 2, 1, "", "beamSize"], [407, 2, 1, "", "configProtoBytes"], [407, 2, 1, "", "doSample"], [407, 2, 1, "", "ignoreTokenIds"], [407, 2, 1, "", "inputAnnotatorTypes"], [407, 3, 1, "", "loadSavedModel"], [407, 2, 1, "", "maxOutputLength"], [407, 2, 1, "", "minOutputLength"], [407, 2, 1, "", "name"], [407, 2, 1, "", "noRepeatNgramSize"], [407, 2, 1, "", "outputAnnotatorType"], [407, 3, 1, "", "pretrained"], [407, 2, 1, "", "repetitionPenalty"], [407, 3, 1, "", "setBeamSize"], [407, 3, 1, "", "setConfigProtoBytes"], [407, 3, 1, "", "setDoSample"], [407, 3, 1, "", "setIgnoreTokenIds"], [407, 3, 1, "", "setMaxOutputLength"], [407, 3, 1, "", "setMinOutputLength"], [407, 3, 1, "", "setNoRepeatNgramSize"], [407, 3, 1, "", "setRepetitionPenalty"], [407, 3, 1, "", "setStopTokenIds"], [407, 3, 1, "", "setTemperature"], [407, 3, 1, "", "setTopK"], [407, 3, 1, "", "setTopP"], [407, 2, 1, "", "stopTokenIds"], [407, 2, 1, "", "temperature"], [407, 2, 1, "", "topK"], [407, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[408, 1, 1, "", "CPMTransformer"]], "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer": [[408, 2, 1, "", "configProtoBytes"], [408, 2, 1, "", "doSample"], [408, 2, 1, "", "ignoreTokenIds"], [408, 2, 1, "", "inputAnnotatorTypes"], [408, 3, 1, "", "loadSavedModel"], [408, 2, 1, "", "maxOutputLength"], [408, 2, 1, "", "minOutputLength"], [408, 2, 1, "", "name"], [408, 2, 1, "", "noRepeatNgramSize"], [408, 2, 1, "", "outputAnnotatorType"], [408, 3, 1, "", "pretrained"], [408, 2, 1, "", "repetitionPenalty"], [408, 3, 1, "", "setConfigProtoBytes"], [408, 3, 1, "", "setDoSample"], [408, 3, 1, "", "setIgnoreTokenIds"], [408, 3, 1, "", "setMaxOutputLength"], [408, 3, 1, "", "setMinOutputLength"], [408, 3, 1, "", "setNoRepeatNgramSize"], [408, 3, 1, "", "setRepetitionPenalty"], [408, 3, 1, "", "setTemperature"], [408, 3, 1, "", "setTopK"], [408, 3, 1, "", "setTopP"], [408, 2, 1, "", "temperature"], [408, 2, 1, "", "topK"], [408, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[409, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[409, 2, 1, "", "configProtoBytes"], [409, 2, 1, "", "doSample"], [409, 2, 1, "", "ignoreTokenIds"], [409, 2, 1, "", "inputAnnotatorTypes"], [409, 3, 1, "", "loadSavedModel"], [409, 2, 1, "", "maxOutputLength"], [409, 2, 1, "", "minOutputLength"], [409, 2, 1, "", "name"], [409, 2, 1, "", "noRepeatNgramSize"], [409, 2, 1, "", "outputAnnotatorType"], [409, 3, 1, "", "pretrained"], [409, 2, 1, "", "repetitionPenalty"], [409, 3, 1, "", "setConfigProtoBytes"], [409, 3, 1, "", "setDoSample"], [409, 3, 1, "", "setIgnoreTokenIds"], [409, 3, 1, "", "setMaxOutputLength"], [409, 3, 1, "", "setMinOutputLength"], [409, 3, 1, "", "setNoRepeatNgramSize"], [409, 3, 1, "", "setRepetitionPenalty"], [409, 3, 1, "", "setTask"], [409, 3, 1, "", "setTemperature"], [409, 3, 1, "", "setTopK"], [409, 3, 1, "", "setTopP"], [409, 2, 1, "", "task"], [409, 2, 1, "", "temperature"], [409, 2, 1, "", "topK"], [409, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[411, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[411, 2, 1, "", "configProtoBytes"], [411, 2, 1, "", "doSample"], [411, 2, 1, "", "ignoreTokenIds"], [411, 2, 1, "", "inputAnnotatorTypes"], [411, 3, 1, "", "loadSavedModel"], [411, 2, 1, "", "maxOutputLength"], [411, 2, 1, "", "minOutputLength"], [411, 2, 1, "", "name"], [411, 2, 1, "", "noRepeatNgramSize"], [411, 2, 1, "", "outputAnnotatorType"], [411, 3, 1, "", "pretrained"], [411, 2, 1, "", "repetitionPenalty"], [411, 3, 1, "", "setConfigProtoBytes"], [411, 3, 1, "", "setDoSample"], [411, 3, 1, "", "setIgnoreTokenIds"], [411, 3, 1, "", "setMaxOutputLength"], [411, 3, 1, "", "setMinOutputLength"], [411, 3, 1, "", "setNoRepeatNgramSize"], [411, 3, 1, "", "setRepetitionPenalty"], [411, 3, 1, "", "setTemperature"], [411, 3, 1, "", "setTopK"], [411, 3, 1, "", "setTopP"], [411, 2, 1, "", "temperature"], [411, 2, 1, "", "topK"], [411, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[412, 1, 1, "", "LLAMA3Transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer": [[412, 2, 1, "", "beamSize"], [412, 2, 1, "", "configProtoBytes"], [412, 2, 1, "", "doSample"], [412, 2, 1, "", "ignoreTokenIds"], [412, 2, 1, "", "inputAnnotatorTypes"], [412, 3, 1, "", "loadSavedModel"], [412, 2, 1, "", "maxOutputLength"], [412, 2, 1, "", "minOutputLength"], [412, 2, 1, "", "name"], [412, 2, 1, "", "noRepeatNgramSize"], [412, 2, 1, "", "outputAnnotatorType"], [412, 3, 1, "", "pretrained"], [412, 2, 1, "", "repetitionPenalty"], [412, 3, 1, "", "setBeamSize"], [412, 3, 1, "", "setConfigProtoBytes"], [412, 3, 1, "", "setDoSample"], [412, 3, 1, "", "setIgnoreTokenIds"], [412, 3, 1, "", "setMaxOutputLength"], [412, 3, 1, "", "setMinOutputLength"], [412, 3, 1, "", "setNoRepeatNgramSize"], [412, 3, 1, "", "setRepetitionPenalty"], [412, 3, 1, "", "setStopTokenIds"], [412, 3, 1, "", "setTemperature"], [412, 3, 1, "", "setTopK"], [412, 3, 1, "", "setTopP"], [412, 2, 1, "", "stopTokenIds"], [412, 2, 1, "", "temperature"], [412, 2, 1, "", "topK"], [412, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[413, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[413, 2, 1, "", "beamSize"], [413, 2, 1, "", "configProtoBytes"], [413, 2, 1, "", "doSample"], [413, 2, 1, "", "ignoreTokenIds"], [413, 2, 1, "", "inputAnnotatorTypes"], [413, 3, 1, "", "loadSavedModel"], [413, 2, 1, "", "maxOutputLength"], [413, 2, 1, "", "minOutputLength"], [413, 2, 1, "", "name"], [413, 2, 1, "", "noRepeatNgramSize"], [413, 2, 1, "", "outputAnnotatorType"], [413, 3, 1, "", "pretrained"], [413, 2, 1, "", "repetitionPenalty"], [413, 3, 1, "", "setBeamSize"], [413, 3, 1, "", "setConfigProtoBytes"], [413, 3, 1, "", "setDoSample"], [413, 3, 1, "", "setIgnoreTokenIds"], [413, 3, 1, "", "setMaxOutputLength"], [413, 3, 1, "", "setMinOutputLength"], [413, 3, 1, "", "setNoRepeatNgramSize"], [413, 3, 1, "", "setRepetitionPenalty"], [413, 3, 1, "", "setSrcLang"], [413, 3, 1, "", "setTemperature"], [413, 3, 1, "", "setTgtLang"], [413, 3, 1, "", "setTopK"], [413, 3, 1, "", "setTopP"], [413, 2, 1, "", "srcLang"], [413, 2, 1, "", "temperature"], [413, 2, 1, "", "tgtLang"], [413, 2, 1, "", "topK"], [413, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[414, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[414, 2, 1, "", "configProtoBytes"], [414, 2, 1, "", "doSample"], [414, 2, 1, "", "ignoreTokenIds"], [414, 2, 1, "", "inputAnnotatorTypes"], [414, 2, 1, "", "langId"], [414, 3, 1, "", "loadSavedModel"], [414, 2, 1, "", "maxInputLength"], [414, 2, 1, "", "maxOutputLength"], [414, 2, 1, "", "name"], [414, 2, 1, "", "noRepeatNgramSize"], [414, 2, 1, "", "outputAnnotatorType"], [414, 3, 1, "", "pretrained"], [414, 2, 1, "", "repetitionPenalty"], [414, 3, 1, "", "setConfigProtoBytes"], [414, 3, 1, "", "setDoSample"], [414, 3, 1, "", "setIgnoreTokenIds"], [414, 3, 1, "", "setLangId"], [414, 3, 1, "", "setMaxInputLength"], [414, 3, 1, "", "setMaxOutputLength"], [414, 3, 1, "", "setNoRepeatNgramSize"], [414, 3, 1, "", "setRandomSeed"], [414, 3, 1, "", "setRepetitionPenalty"], [414, 3, 1, "", "setTemperature"], [414, 3, 1, "", "setTopK"], [414, 3, 1, "", "setTopP"], [414, 2, 1, "", "temperature"], [414, 2, 1, "", "topK"], [414, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[415, 1, 1, "", "MistralTransformer"]], "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer": [[415, 2, 1, "", "configProtoBytes"], [415, 2, 1, "", "doSample"], [415, 2, 1, "", "ignoreTokenIds"], [415, 2, 1, "", "inputAnnotatorTypes"], [415, 3, 1, "", "loadSavedModel"], [415, 2, 1, "", "maxOutputLength"], [415, 2, 1, "", "minOutputLength"], [415, 2, 1, "", "name"], [415, 2, 1, "", "noRepeatNgramSize"], [415, 2, 1, "", "outputAnnotatorType"], [415, 3, 1, "", "pretrained"], [415, 2, 1, "", "repetitionPenalty"], [415, 3, 1, "", "setConfigProtoBytes"], [415, 3, 1, "", "setDoSample"], [415, 3, 1, "", "setIgnoreTokenIds"], [415, 3, 1, "", "setMaxOutputLength"], [415, 3, 1, "", "setMinOutputLength"], [415, 3, 1, "", "setNoRepeatNgramSize"], [415, 3, 1, "", "setRepetitionPenalty"], [415, 3, 1, "", "setTemperature"], [415, 3, 1, "", "setTopK"], [415, 3, 1, "", "setTopP"], [415, 2, 1, "", "temperature"], [415, 2, 1, "", "topK"], [415, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[416, 1, 1, "", "NLLBTransformer"]], "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer": [[416, 2, 1, "", "beamSize"], [416, 2, 1, "", "configProtoBytes"], [416, 2, 1, "", "doSample"], [416, 2, 1, "", "ignoreTokenIds"], [416, 2, 1, "", "inputAnnotatorTypes"], [416, 3, 1, "", "loadSavedModel"], [416, 2, 1, "", "maxOutputLength"], [416, 2, 1, "", "minOutputLength"], [416, 2, 1, "", "name"], [416, 2, 1, "", "noRepeatNgramSize"], [416, 2, 1, "", "outputAnnotatorType"], [416, 3, 1, "", "pretrained"], [416, 2, 1, "", "repetitionPenalty"], [416, 3, 1, "", "setBeamSize"], [416, 3, 1, "", "setConfigProtoBytes"], [416, 3, 1, "", "setDoSample"], [416, 3, 1, "", "setIgnoreTokenIds"], [416, 3, 1, "", "setMaxOutputLength"], [416, 3, 1, "", "setMinOutputLength"], [416, 3, 1, "", "setNoRepeatNgramSize"], [416, 3, 1, "", "setRepetitionPenalty"], [416, 3, 1, "", "setSrcLang"], [416, 3, 1, "", "setTemperature"], [416, 3, 1, "", "setTgtLang"], [416, 3, 1, "", "setTopK"], [416, 3, 1, "", "setTopP"], [416, 2, 1, "", "srcLang"], [416, 2, 1, "", "temperature"], [416, 2, 1, "", "tgtLang"], [416, 2, 1, "", "topK"], [416, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[417, 1, 1, "", "OLMoTransformer"]], "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer": [[417, 2, 1, "", "configProtoBytes"], [417, 2, 1, "", "doSample"], [417, 2, 1, "", "ignoreTokenIds"], [417, 2, 1, "", "inputAnnotatorTypes"], [417, 3, 1, "", "loadSavedModel"], [417, 2, 1, "", "maxOutputLength"], [417, 2, 1, "", "minOutputLength"], [417, 2, 1, "", "name"], [417, 2, 1, "", "noRepeatNgramSize"], [417, 2, 1, "", "outputAnnotatorType"], [417, 3, 1, "", "pretrained"], [417, 2, 1, "", "repetitionPenalty"], [417, 3, 1, "", "setConfigProtoBytes"], [417, 3, 1, "", "setDoSample"], [417, 3, 1, "", "setIgnoreTokenIds"], [417, 3, 1, "", "setMaxOutputLength"], [417, 3, 1, "", "setMinOutputLength"], [417, 3, 1, "", "setNoRepeatNgramSize"], [417, 3, 1, "", "setRepetitionPenalty"], [417, 3, 1, "", "setTemperature"], [417, 3, 1, "", "setTopK"], [417, 3, 1, "", "setTopP"], [417, 2, 1, "", "temperature"], [417, 2, 1, "", "topK"], [417, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[418, 1, 1, "", "Phi2Transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer": [[418, 2, 1, "", "configProtoBytes"], [418, 2, 1, "", "doSample"], [418, 2, 1, "", "ignoreTokenIds"], [418, 2, 1, "", "inputAnnotatorTypes"], [418, 3, 1, "", "loadSavedModel"], [418, 2, 1, "", "maxOutputLength"], [418, 2, 1, "", "minOutputLength"], [418, 2, 1, "", "name"], [418, 2, 1, "", "noRepeatNgramSize"], [418, 2, 1, "", "outputAnnotatorType"], [418, 3, 1, "", "pretrained"], [418, 2, 1, "", "repetitionPenalty"], [418, 3, 1, "", "setConfigProtoBytes"], [418, 3, 1, "", "setDoSample"], [418, 3, 1, "", "setIgnoreTokenIds"], [418, 3, 1, "", "setMaxOutputLength"], [418, 3, 1, "", "setMinOutputLength"], [418, 3, 1, "", "setNoRepeatNgramSize"], [418, 3, 1, "", "setRepetitionPenalty"], [418, 3, 1, "", "setTemperature"], [418, 3, 1, "", "setTopK"], [418, 3, 1, "", "setTopP"], [418, 2, 1, "", "temperature"], [418, 2, 1, "", "topK"], [418, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[419, 1, 1, "", "Phi3Transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer": [[419, 2, 1, "", "configProtoBytes"], [419, 2, 1, "", "doSample"], [419, 2, 1, "", "ignoreTokenIds"], [419, 2, 1, "", "inputAnnotatorTypes"], [419, 3, 1, "", "loadSavedModel"], [419, 2, 1, "", "maxOutputLength"], [419, 2, 1, "", "minOutputLength"], [419, 2, 1, "", "name"], [419, 2, 1, "", "noRepeatNgramSize"], [419, 2, 1, "", "outputAnnotatorType"], [419, 3, 1, "", "pretrained"], [419, 2, 1, "", "repetitionPenalty"], [419, 3, 1, "", "setConfigProtoBytes"], [419, 3, 1, "", "setDoSample"], [419, 3, 1, "", "setIgnoreTokenIds"], [419, 3, 1, "", "setMaxOutputLength"], [419, 3, 1, "", "setMinOutputLength"], [419, 3, 1, "", "setNoRepeatNgramSize"], [419, 3, 1, "", "setRepetitionPenalty"], [419, 3, 1, "", "setTemperature"], [419, 3, 1, "", "setTopK"], [419, 3, 1, "", "setTopP"], [419, 2, 1, "", "temperature"], [419, 2, 1, "", "topK"], [419, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[420, 1, 1, "", "QwenTransformer"]], "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer": [[420, 2, 1, "", "configProtoBytes"], [420, 2, 1, "", "doSample"], [420, 2, 1, "", "ignoreTokenIds"], [420, 2, 1, "", "inputAnnotatorTypes"], [420, 3, 1, "", "loadSavedModel"], [420, 2, 1, "", "maxOutputLength"], [420, 2, 1, "", "minOutputLength"], [420, 2, 1, "", "name"], [420, 2, 1, "", "noRepeatNgramSize"], [420, 2, 1, "", "outputAnnotatorType"], [420, 3, 1, "", "pretrained"], [420, 2, 1, "", "repetitionPenalty"], [420, 3, 1, "", "setConfigProtoBytes"], [420, 3, 1, "", "setDoSample"], [420, 3, 1, "", "setIgnoreTokenIds"], [420, 3, 1, "", "setMaxOutputLength"], [420, 3, 1, "", "setMinOutputLength"], [420, 3, 1, "", "setNoRepeatNgramSize"], [420, 3, 1, "", "setRepetitionPenalty"], [420, 3, 1, "", "setTemperature"], [420, 3, 1, "", "setTopK"], [420, 3, 1, "", "setTopP"], [420, 2, 1, "", "temperature"], [420, 2, 1, "", "topK"], [420, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[421, 1, 1, "", "StarCoderTransformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer": [[421, 2, 1, "", "configProtoBytes"], [421, 2, 1, "", "doSample"], [421, 2, 1, "", "ignoreTokenIds"], [421, 2, 1, "", "inputAnnotatorTypes"], [421, 3, 1, "", "loadSavedModel"], [421, 2, 1, "", "maxOutputLength"], [421, 2, 1, "", "minOutputLength"], [421, 2, 1, "", "name"], [421, 2, 1, "", "noRepeatNgramSize"], [421, 2, 1, "", "outputAnnotatorType"], [421, 3, 1, "", "pretrained"], [421, 2, 1, "", "repetitionPenalty"], [421, 3, 1, "", "setConfigProtoBytes"], [421, 3, 1, "", "setDoSample"], [421, 3, 1, "", "setIgnoreTokenIds"], [421, 3, 1, "", "setMaxOutputLength"], [421, 3, 1, "", "setMinOutputLength"], [421, 3, 1, "", "setNoRepeatNgramSize"], [421, 3, 1, "", "setRepetitionPenalty"], [421, 3, 1, "", "setTemperature"], [421, 3, 1, "", "setTopK"], [421, 3, 1, "", "setTopP"], [421, 2, 1, "", "temperature"], [421, 2, 1, "", "topK"], [421, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[422, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[422, 2, 1, "", "configProtoBytes"], [422, 2, 1, "", "doSample"], [422, 2, 1, "", "ignoreTokenIds"], [422, 2, 1, "", "inputAnnotatorTypes"], [422, 3, 1, "", "loadSavedModel"], [422, 2, 1, "", "maxNewTokens"], [422, 2, 1, "", "maxOutputLength"], [422, 2, 1, "", "minOutputLength"], [422, 2, 1, "", "name"], [422, 2, 1, "", "noRepeatNgramSize"], [422, 2, 1, "", "outputAnnotatorType"], [422, 3, 1, "", "pretrained"], [422, 2, 1, "", "repetitionPenalty"], [422, 3, 1, "", "setConfigProtoBytes"], [422, 3, 1, "", "setDoSample"], [422, 3, 1, "", "setIgnoreTokenIds"], [422, 3, 1, "", "setMaxNewTokens"], [422, 3, 1, "", "setMaxOutputLength"], [422, 3, 1, "", "setMinOutputLength"], [422, 3, 1, "", "setNoRepeatNgramSize"], [422, 3, 1, "", "setRepetitionPenalty"], [422, 3, 1, "", "setStopAtEos"], [422, 3, 1, "", "setTask"], [422, 3, 1, "", "setTemperature"], [422, 3, 1, "", "setTopK"], [422, 3, 1, "", "setTopP"], [422, 3, 1, "", "setUseCache"], [422, 2, 1, "", "stopAtEos"], [422, 2, 1, "", "task"], [422, 2, 1, "", "temperature"], [422, 2, 1, "", "topK"], [422, 2, 1, "", "topP"], [422, 2, 1, "", "useCache"]], "sparknlp.annotator.similarity": [[423, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[423, 1, 1, "", "DocumentSimilarityRankerApproach"], [423, 1, 1, "", "DocumentSimilarityRankerFinisher"], [423, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[423, 2, 1, "", "aggregationMethod"], [423, 3, 1, "", "asRetriever"], [423, 2, 1, "", "asRetrieverQuery"], [423, 2, 1, "", "bucketLength"], [423, 2, 1, "", "identityRanking"], [423, 2, 1, "", "inputAnnotatorTypes"], [423, 2, 1, "", "numHashTables"], [423, 2, 1, "", "numberOfNeighbours"], [423, 2, 1, "", "outputAnnotatorType"], [423, 3, 1, "", "setAggregationMethod"], [423, 3, 1, "", "setBucketLength"], [423, 3, 1, "", "setIdentityRanking"], [423, 3, 1, "", "setNumHashTables"], [423, 3, 1, "", "setNumberOfNeighbours"], [423, 3, 1, "", "setSimilarityMethod"], [423, 3, 1, "", "setVisibleDistances"], [423, 2, 1, "", "similarityMethod"], [423, 2, 1, "", "visibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[423, 2, 1, "", "extractNearestNeighbor"], [423, 3, 1, "", "getInputCols"], [423, 3, 1, "", "getOutputCols"], [423, 2, 1, "", "inputCols"], [423, 2, 1, "", "name"], [423, 2, 1, "", "outputCols"], [423, 3, 1, "", "setExtractNearestNeighbor"], [423, 3, 1, "", "setInputCols"], [423, 3, 1, "", "setOutputCols"], [423, 3, 1, "", "setParams"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel": [[423, 2, 1, "", "inputAnnotatorTypes"], [423, 2, 1, "", "name"], [423, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.spell_check": [[425, 0, 0, "-", "context_spell_checker"], [427, 0, 0, "-", "norvig_sweeting"], [428, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[425, 1, 1, "", "ContextSpellCheckerApproach"], [425, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[425, 3, 1, "", "addRegexClass"], [425, 3, 1, "", "addVocabClass"], [425, 2, 1, "", "batchSize"], [425, 2, 1, "", "caseStrategy"], [425, 2, 1, "", "classCount"], [425, 2, 1, "", "compoundCount"], [425, 2, 1, "", "configProtoBytes"], [425, 2, 1, "", "epochs"], [425, 2, 1, "", "errorThreshold"], [425, 2, 1, "", "finalRate"], [425, 2, 1, "", "graphFolder"], [425, 2, 1, "", "initialRate"], [425, 2, 1, "", "inputAnnotatorTypes"], [425, 2, 1, "", "languageModelClasses"], [425, 2, 1, "", "maxCandidates"], [425, 2, 1, "", "maxSentLen"], [425, 2, 1, "", "maxWindowLen"], [425, 2, 1, "", "minCount"], [425, 2, 1, "", "name"], [425, 2, 1, "", "outputAnnotatorType"], [425, 3, 1, "", "setBatchSize"], [425, 3, 1, "", "setCaseStrategy"], [425, 3, 1, "", "setClassCount"], [425, 3, 1, "", "setCompoundCount"], [425, 3, 1, "", "setConfigProtoBytes"], [425, 3, 1, "", "setEpochs"], [425, 3, 1, "", "setErrorThreshold"], [425, 3, 1, "", "setFinalRate"], [425, 3, 1, "", "setGraphFolder"], [425, 3, 1, "", "setInitialRate"], [425, 3, 1, "", "setLanguageModelClasses"], [425, 3, 1, "", "setMaxCandidates"], [425, 3, 1, "", "setMaxSentLen"], [425, 3, 1, "", "setMaxWindowLen"], [425, 3, 1, "", "setMinCount"], [425, 3, 1, "", "setTradeoff"], [425, 3, 1, "", "setValidationFraction"], [425, 3, 1, "", "setWeightedDistPath"], [425, 3, 1, "", "setWordMaxDistance"], [425, 2, 1, "", "tradeoff"], [425, 2, 1, "", "validationFraction"], [425, 2, 1, "", "weightedDistPath"], [425, 2, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[425, 2, 1, "", "caseStrategy"], [425, 2, 1, "", "classes"], [425, 2, 1, "", "compareLowcase"], [425, 2, 1, "", "configProtoBytes"], [425, 2, 1, "", "correctSymbols"], [425, 2, 1, "", "errorThreshold"], [425, 2, 1, "", "gamma"], [425, 3, 1, "", "getWordClasses"], [425, 2, 1, "", "idsVocab"], [425, 2, 1, "", "inputAnnotatorTypes"], [425, 2, 1, "", "maxCandidates"], [425, 2, 1, "", "maxWindowLen"], [425, 2, 1, "", "name"], [425, 2, 1, "", "outputAnnotatorType"], [425, 3, 1, "", "pretrained"], [425, 3, 1, "", "setCaseStrategy"], [425, 3, 1, "", "setClasses"], [425, 3, 1, "", "setCompareLowcase"], [425, 3, 1, "", "setConfigProtoBytes"], [425, 3, 1, "", "setCorrectSymbols"], [425, 3, 1, "", "setErrorThreshold"], [425, 3, 1, "", "setGamma"], [425, 3, 1, "", "setIdsVocab"], [425, 3, 1, "", "setMaxCandidates"], [425, 3, 1, "", "setMaxWindowLen"], [425, 3, 1, "", "setTradeoff"], [425, 3, 1, "", "setVocabFreq"], [425, 3, 1, "", "setVocabIds"], [425, 3, 1, "", "setWeights"], [425, 3, 1, "", "setWordMaxDistance"], [425, 2, 1, "", "tradeoff"], [425, 3, 1, "", "updateRegexClass"], [425, 3, 1, "", "updateVocabClass"], [425, 2, 1, "", "vocabFreq"], [425, 2, 1, "", "vocabIds"], [425, 2, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[427, 1, 1, "", "NorvigSweetingApproach"], [427, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[427, 2, 1, "", "caseSensitive"], [427, 2, 1, "", "dictionary"], [427, 2, 1, "", "dictionary_path"], [427, 2, 1, "", "doubleVariants"], [427, 2, 1, "", "dupsLimit"], [427, 2, 1, "", "frequencyPriority"], [427, 2, 1, "", "inputAnnotatorTypes"], [427, 2, 1, "", "intersections"], [427, 2, 1, "", "outputAnnotatorType"], [427, 2, 1, "", "reductLimit"], [427, 3, 1, "", "setCaseSensitive"], [427, 3, 1, "", "setDictionary"], [427, 3, 1, "", "setDoubleVariants"], [427, 3, 1, "", "setFrequencyPriority"], [427, 3, 1, "", "setShortCircuit"], [427, 2, 1, "", "shortCircuit"], [427, 2, 1, "", "vowelSwapLimit"], [427, 2, 1, "", "wordSizeIgnore"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[427, 2, 1, "", "inputAnnotatorTypes"], [427, 2, 1, "", "name"], [427, 2, 1, "", "outputAnnotatorType"], [427, 3, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[428, 1, 1, "", "SymmetricDeleteApproach"], [428, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[428, 2, 1, "", "corpus"], [428, 2, 1, "", "deletesThreshold"], [428, 2, 1, "", "dictionary"], [428, 2, 1, "", "dictionary_path"], [428, 2, 1, "", "dupsLimit"], [428, 2, 1, "", "frequencyThreshold"], [428, 2, 1, "", "inputAnnotatorTypes"], [428, 2, 1, "", "maxEditDistance"], [428, 2, 1, "", "outputAnnotatorType"], [428, 3, 1, "", "setDeletesThreshold"], [428, 3, 1, "", "setDictionary"], [428, 3, 1, "", "setFrequencyThreshold"], [428, 3, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[428, 2, 1, "", "inputAnnotatorTypes"], [428, 2, 1, "", "name"], [428, 2, 1, "", "outputAnnotatorType"], [428, 3, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[429, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stemmer.Stemmer": [[429, 2, 1, "", "inputAnnotatorTypes"], [429, 2, 1, "", "language"], [429, 2, 1, "", "name"], [429, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.stop_words_cleaner": [[430, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[430, 2, 1, "", "caseSensitive"], [430, 2, 1, "", "inputAnnotatorTypes"], [430, 3, 1, "", "loadDefaultStopWords"], [430, 2, 1, "", "locale"], [430, 2, 1, "", "name"], [430, 2, 1, "", "outputAnnotatorType"], [430, 3, 1, "", "pretrained"], [430, 3, 1, "", "setCaseSensitive"], [430, 3, 1, "", "setLocale"], [430, 3, 1, "", "setStopWords"], [430, 2, 1, "", "stopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[431, 1, 1, "", "TFNerDLGraphBuilder"], [431, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[431, 3, 1, "", "getGraphFile"], [431, 3, 1, "", "getGraphFolder"], [431, 3, 1, "", "getHiddenUnitsNumber"], [431, 3, 1, "", "getInputCols"], [431, 3, 1, "", "getLabelColumn"], [431, 2, 1, "", "graphFile"], [431, 2, 1, "", "graphFolder"], [431, 2, 1, "", "hiddenUnitsNumber"], [431, 2, 1, "", "inputAnnotatorTypes"], [431, 2, 1, "", "inputCols"], [431, 3, 1, "", "inputColsValidation"], [431, 2, 1, "", "labelColumn"], [431, 3, 1, "", "setGraphFile"], [431, 3, 1, "", "setGraphFolder"], [431, 3, 1, "", "setHiddenUnitsNumber"], [431, 3, 1, "", "setInputCols"], [431, 3, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[432, 0, 0, "-", "chunk_tokenizer"], [434, 0, 0, "-", "recursive_tokenizer"], [435, 0, 0, "-", "regex_tokenizer"], [436, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[432, 1, 1, "", "ChunkTokenizer"], [432, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer": [[432, 2, 1, "", "inputAnnotatorTypes"], [432, 2, 1, "", "name"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel": [[432, 2, 1, "", "inputAnnotatorTypes"], [432, 2, 1, "", "name"]], "sparknlp.annotator.token.recursive_tokenizer": [[434, 1, 1, "", "RecursiveTokenizer"], [434, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[434, 2, 1, "", "infixes"], [434, 2, 1, "", "inputAnnotatorTypes"], [434, 2, 1, "", "name"], [434, 2, 1, "", "outputAnnotatorType"], [434, 2, 1, "", "prefixes"], [434, 3, 1, "", "setInfixes"], [434, 3, 1, "", "setPrefixes"], [434, 3, 1, "", "setSuffixes"], [434, 3, 1, "", "setWhitelist"], [434, 2, 1, "", "suffixes"], [434, 2, 1, "", "whitelist"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel": [[434, 2, 1, "", "inputAnnotatorTypes"], [434, 2, 1, "", "name"], [434, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.token.regex_tokenizer": [[435, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[435, 2, 1, "", "inputAnnotatorTypes"], [435, 2, 1, "", "maxLength"], [435, 2, 1, "", "minLength"], [435, 2, 1, "", "name"], [435, 2, 1, "", "outputAnnotatorType"], [435, 2, 1, "", "pattern"], [435, 2, 1, "", "positionalMask"], [435, 2, 1, "", "preservePosition"], [435, 3, 1, "", "setMaxLength"], [435, 3, 1, "", "setMinLength"], [435, 3, 1, "", "setPattern"], [435, 3, 1, "", "setPositionalMask"], [435, 3, 1, "", "setPreservePosition"], [435, 3, 1, "", "setToLowercase"], [435, 3, 1, "", "setTrimWhitespace"], [435, 2, 1, "", "toLowercase"], [435, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[436, 1, 1, "", "Tokenizer"], [436, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[436, 3, 1, "", "addContextChars"], [436, 3, 1, "", "addException"], [436, 3, 1, "", "addInfixPattern"], [436, 3, 1, "", "addSplitChars"], [436, 2, 1, "", "caseSensitiveExceptions"], [436, 2, 1, "", "contextChars"], [436, 2, 1, "", "exceptions"], [436, 2, 1, "", "exceptionsPath"], [436, 3, 1, "", "getCaseSensitiveExceptions"], [436, 3, 1, "", "getContextChars"], [436, 3, 1, "", "getExceptions"], [436, 3, 1, "", "getInfixPatterns"], [436, 3, 1, "", "getPrefixPattern"], [436, 3, 1, "", "getSplitChars"], [436, 3, 1, "", "getSuffixPattern"], [436, 2, 1, "", "infixPatterns"], [436, 2, 1, "", "inputAnnotatorTypes"], [436, 2, 1, "", "maxLength"], [436, 2, 1, "", "minLength"], [436, 2, 1, "", "name"], [436, 2, 1, "", "outputAnnotatorType"], [436, 2, 1, "", "prefixPattern"], [436, 3, 1, "", "setCaseSensitiveExceptions"], [436, 3, 1, "", "setContextChars"], [436, 3, 1, "", "setExceptions"], [436, 3, 1, "", "setExceptionsPath"], [436, 3, 1, "", "setInfixPatterns"], [436, 3, 1, "", "setMaxLength"], [436, 3, 1, "", "setMinLength"], [436, 3, 1, "", "setPrefixPattern"], [436, 3, 1, "", "setSplitChars"], [436, 3, 1, "", "setSplitPattern"], [436, 3, 1, "", "setSuffixPattern"], [436, 3, 1, "", "setTargetPattern"], [436, 2, 1, "", "splitChars"], [436, 2, 1, "", "splitPattern"], [436, 2, 1, "", "suffixPattern"], [436, 2, 1, "", "targetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[436, 3, 1, "", "addSplitChars"], [436, 2, 1, "", "caseSensitiveExceptions"], [436, 2, 1, "", "exceptions"], [436, 2, 1, "", "inputAnnotatorTypes"], [436, 2, 1, "", "name"], [436, 2, 1, "", "outputAnnotatorType"], [436, 3, 1, "", "pretrained"], [436, 2, 1, "", "rules"], [436, 3, 1, "", "setSplitChars"], [436, 3, 1, "", "setSplitPattern"], [436, 2, 1, "", "splitChars"], [436, 2, 1, "", "splitPattern"], [436, 2, 1, "", "targetPattern"]], "sparknlp.annotator.token2_chunk": [[437, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.token2_chunk.Token2Chunk": [[437, 2, 1, "", "inputAnnotatorTypes"], [437, 2, 1, "", "name"], [437, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.ws": [[439, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[439, 1, 1, "", "WordSegmenterApproach"], [439, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[439, 2, 1, "", "ambiguityThreshold"], [439, 2, 1, "", "enableRegexTokenizer"], [439, 2, 1, "", "frequencyThreshold"], [439, 3, 1, "", "getAmbiguityThreshold"], [439, 3, 1, "", "getFrequencyThreshold"], [439, 3, 1, "", "getNIterations"], [439, 2, 1, "", "inputAnnotatorTypes"], [439, 2, 1, "", "nIterations"], [439, 2, 1, "", "name"], [439, 2, 1, "", "outputAnnotatorType"], [439, 2, 1, "", "pattern"], [439, 2, 1, "", "posCol"], [439, 3, 1, "", "setAmbiguityThreshold"], [439, 3, 1, "", "setEnableRegexTokenizer"], [439, 3, 1, "", "setFrequencyThreshold"], [439, 3, 1, "", "setNIterations"], [439, 3, 1, "", "setPattern"], [439, 3, 1, "", "setPosColumn"], [439, 3, 1, "", "setToLowercase"], [439, 2, 1, "", "toLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[439, 2, 1, "", "enableRegexTokenizer"], [439, 2, 1, "", "inputAnnotatorTypes"], [439, 2, 1, "", "name"], [439, 2, 1, "", "outputAnnotatorType"], [439, 2, 1, "", "pattern"], [439, 3, 1, "", "pretrained"], [439, 3, 1, "", "setEnableRegexTokenizer"], [439, 3, 1, "", "setPattern"], [439, 3, 1, "", "setToLowercase"], [439, 2, 1, "", "toLowercase"]], "sparknlp.base": [[440, 0, 0, "-", "audio_assembler"], [441, 0, 0, "-", "doc2_chunk"], [442, 0, 0, "-", "document_assembler"], [443, 0, 0, "-", "embeddings_finisher"], [444, 0, 0, "-", "finisher"], [445, 0, 0, "-", "graph_finisher"], [446, 0, 0, "-", "has_recursive_fit"], [447, 0, 0, "-", "has_recursive_transform"], [448, 0, 0, "-", "image_assembler"], [450, 0, 0, "-", "light_pipeline"], [451, 0, 0, "-", "multi_document_assembler"], [452, 0, 0, "-", "prompt_assembler"], [453, 0, 0, "-", "recursive_pipeline"], [454, 0, 0, "-", "table_assembler"], [455, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[440, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[440, 3, 1, "", "getOutputCol"], [440, 2, 1, "", "inputCol"], [440, 2, 1, "", "name"], [440, 2, 1, "", "outputAnnotatorType"], [440, 2, 1, "", "outputCol"], [440, 3, 1, "", "setInputCol"], [440, 3, 1, "", "setOutputCol"], [440, 3, 1, "", "setParams"]], "sparknlp.base.doc2_chunk": [[441, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[441, 2, 1, "", "chunkCol"], [441, 2, 1, "", "failOnMissing"], [441, 2, 1, "", "inputAnnotatorTypes"], [441, 2, 1, "", "isArray"], [441, 2, 1, "", "lowerCase"], [441, 2, 1, "", "name"], [441, 2, 1, "", "outputAnnotatorType"], [441, 3, 1, "", "setChunkCol"], [441, 3, 1, "", "setFailOnMissing"], [441, 3, 1, "", "setIsArray"], [441, 3, 1, "", "setLowerCase"], [441, 3, 1, "", "setParams"], [441, 3, 1, "", "setStartCol"], [441, 3, 1, "", "setStartColByTokenIndex"], [441, 2, 1, "", "startCol"], [441, 2, 1, "", "startColByTokenIndex"]], "sparknlp.base.document_assembler": [[442, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[442, 2, 1, "", "cleanupMode"], [442, 3, 1, "", "getOutputCol"], [442, 2, 1, "", "idCol"], [442, 2, 1, "", "inputCol"], [442, 2, 1, "", "metadataCol"], [442, 2, 1, "", "name"], [442, 2, 1, "", "outputAnnotatorType"], [442, 2, 1, "", "outputCol"], [442, 3, 1, "", "setCleanupMode"], [442, 3, 1, "", "setIdCol"], [442, 3, 1, "", "setInputCol"], [442, 3, 1, "", "setMetadataCol"], [442, 3, 1, "", "setOutputCol"], [442, 3, 1, "", "setParams"]], "sparknlp.base.embeddings_finisher": [[443, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[443, 2, 1, "", "cleanAnnotations"], [443, 3, 1, "", "getInputCols"], [443, 3, 1, "", "getOutputCols"], [443, 2, 1, "", "inputCols"], [443, 2, 1, "", "name"], [443, 2, 1, "", "outputAsVector"], [443, 2, 1, "", "outputCols"], [443, 3, 1, "", "setCleanAnnotations"], [443, 3, 1, "", "setInputCols"], [443, 3, 1, "", "setOutputAsVector"], [443, 3, 1, "", "setOutputCols"], [443, 3, 1, "", "setParams"]], "sparknlp.base.finisher": [[444, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[444, 2, 1, "", "annotationSplitSymbol"], [444, 2, 1, "", "cleanAnnotations"], [444, 3, 1, "", "getInputCols"], [444, 3, 1, "", "getOutputCols"], [444, 2, 1, "", "includeMetadata"], [444, 2, 1, "", "inputCols"], [444, 2, 1, "", "name"], [444, 2, 1, "", "outputAsArray"], [444, 2, 1, "", "outputCols"], [444, 2, 1, "", "parseEmbeddingsVectors"], [444, 3, 1, "", "setAnnotationSplitSymbol"], [444, 3, 1, "", "setCleanAnnotations"], [444, 3, 1, "", "setIncludeMetadata"], [444, 3, 1, "", "setInputCols"], [444, 3, 1, "", "setOutputAsArray"], [444, 3, 1, "", "setOutputCols"], [444, 3, 1, "", "setParams"], [444, 3, 1, "", "setParseEmbeddingsVectors"], [444, 3, 1, "", "setValueSplitSymbol"], [444, 2, 1, "", "valueSplitSymbol"]], "sparknlp.base.graph_finisher": [[445, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[445, 2, 1, "", "cleanAnnotations"], [445, 2, 1, "", "inputCol"], [445, 2, 1, "", "name"], [445, 2, 1, "", "outputAsArray"], [445, 2, 1, "", "outputCol"], [445, 3, 1, "", "setCleanAnnotations"], [445, 3, 1, "", "setInputCol"], [445, 3, 1, "", "setOutputAsArray"], [445, 3, 1, "", "setOutputCol"], [445, 3, 1, "", "setParams"]], "sparknlp.base.has_recursive_fit": [[446, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[447, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[448, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[448, 3, 1, "", "getOutputCol"], [448, 2, 1, "", "inputCol"], [448, 3, 1, "", "loadImagesAsBytes"], [448, 2, 1, "", "name"], [448, 2, 1, "", "outputAnnotatorType"], [448, 2, 1, "", "outputCol"], [448, 3, 1, "", "setInputCol"], [448, 3, 1, "", "setOutputCol"], [448, 3, 1, "", "setParams"], [448, 3, 1, "", "setTextCol"], [448, 2, 1, "", "textCol"]], "sparknlp.base.light_pipeline": [[450, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[450, 3, 1, "", "annotate"], [450, 3, 1, "", "fullAnnotate"], [450, 3, 1, "", "fullAnnotateImage"], [450, 3, 1, "", "getIgnoreUnsupported"], [450, 2, 1, "", "parse_embeddings"], [450, 2, 1, "", "pipeline_model"], [450, 3, 1, "", "setIgnoreUnsupported"], [450, 3, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[451, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[451, 2, 1, "", "cleanupMode"], [451, 3, 1, "", "getOutputCols"], [451, 2, 1, "", "idCol"], [451, 2, 1, "", "inputCols"], [451, 2, 1, "", "metadataCol"], [451, 2, 1, "", "name"], [451, 2, 1, "", "outputAnnotatorType"], [451, 2, 1, "", "outputCols"], [451, 3, 1, "", "setCleanupMode"], [451, 3, 1, "", "setIdCol"], [451, 3, 1, "", "setInputCols"], [451, 3, 1, "", "setMetadataCol"], [451, 3, 1, "", "setOutputCols"], [451, 3, 1, "", "setParams"]], "sparknlp.base.prompt_assembler": [[452, 1, 1, "", "PromptAssembler"]], "sparknlp.base.prompt_assembler.PromptAssembler": [[452, 2, 1, "", "addAssistant"], [452, 2, 1, "", "chatTemplate"], [452, 2, 1, "", "inputCol"], [452, 2, 1, "", "name"], [452, 2, 1, "", "outputAnnotatorType"], [452, 2, 1, "", "outputCol"], [452, 3, 1, "", "setAddAssistant"], [452, 3, 1, "", "setChatTemplate"], [452, 3, 1, "", "setInputCol"], [452, 3, 1, "", "setOutputCol"], [452, 3, 1, "", "setParams"]], "sparknlp.base.recursive_pipeline": [[453, 1, 1, "", "RecursivePipeline"], [453, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline.RecursivePipelineModel": [[453, 2, 1, "", "stages"]], "sparknlp.base.table_assembler": [[454, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[454, 2, 1, "", "csvDelimiter"], [454, 2, 1, "", "escapeCsvDelimiter"], [454, 2, 1, "", "inputAnnotatorTypes"], [454, 2, 1, "", "inputFormat"], [454, 2, 1, "", "name"], [454, 2, 1, "", "outputAnnotatorType"], [454, 3, 1, "", "setCsvDelimiter"], [454, 3, 1, "", "setEscapeCsvDelimiter"], [454, 3, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[455, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[455, 2, 1, "", "inputAnnotatorTypes"], [455, 2, 1, "", "name"], [455, 2, 1, "", "outputAnnotatorType"], [455, 2, 1, "", "preservePosition"], [455, 3, 1, "", "setParams"], [455, 3, 1, "", "setPreservePosition"]], "sparknlp.common": [[456, 0, 0, "-", "annotator_approach"], [457, 0, 0, "-", "annotator_model"], [458, 0, 0, "-", "annotator_properties"], [459, 0, 0, "-", "annotator_type"], [460, 0, 0, "-", "coverage_result"], [462, 0, 0, "-", "match_strategy"], [463, 0, 0, "-", "properties"], [464, 0, 0, "-", "read_as"], [465, 0, 0, "-", "recursive_annotator_approach"], [466, 0, 0, "-", "storage"], [467, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[456, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[457, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_model.AnnotatorModel": [[457, 3, 1, "", "setParams"]], "sparknlp.common.annotator_properties": [[458, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[458, 3, 1, "", "getInputCols"], [458, 3, 1, "", "getLazyAnnotator"], [458, 3, 1, "", "getOutputCol"], [458, 2, 1, "", "inputAnnotatorTypes"], [458, 2, 1, "", "inputCols"], [458, 3, 1, "", "inputColsValidation"], [458, 2, 1, "", "lazyAnnotator"], [458, 2, 1, "", "optionalInputAnnotatorTypes"], [458, 2, 1, "", "outputAnnotatorType"], [458, 2, 1, "", "outputCol"], [458, 3, 1, "", "setInputCols"], [458, 3, 1, "", "setLazyAnnotator"], [458, 3, 1, "", "setOutputCol"]], "sparknlp.common.annotator_type": [[459, 1, 1, "", "AnnotatorType"]], "sparknlp.common.annotator_type.AnnotatorType": [[459, 2, 1, "", "AUDIO"], [459, 2, 1, "", "CATEGORY"], [459, 2, 1, "", "CHUNK"], [459, 2, 1, "", "DATE"], [459, 2, 1, "", "DEPENDENCY"], [459, 2, 1, "", "DOCUMENT"], [459, 2, 1, "", "DOC_SIMILARITY_RANKINGS"], [459, 2, 1, "", "DUMMY"], [459, 2, 1, "", "ENTITY"], [459, 2, 1, "", "IMAGE"], [459, 2, 1, "", "LABELED_DEPENDENCY"], [459, 2, 1, "", "LANGUAGE"], [459, 2, 1, "", "NAMED_ENTITY"], [459, 2, 1, "", "NEGEX"], [459, 2, 1, "", "NODE"], [459, 2, 1, "", "POS"], [459, 2, 1, "", "SENTENCE_EMBEDDINGS"], [459, 2, 1, "", "SENTIMENT"], [459, 2, 1, "", "TABLE"], [459, 2, 1, "", "TOKEN"], [459, 2, 1, "", "WORDPIECE"], [459, 2, 1, "", "WORD_EMBEDDINGS"]], "sparknlp.common.coverage_result": [[460, 1, 1, "", "CoverageResult"]], "sparknlp.common.coverage_result.CoverageResult": [[460, 2, 1, "", "covered"], [460, 2, 1, "", "percentage"], [460, 2, 1, "", "total"]], "sparknlp.common.match_strategy": [[462, 1, 1, "", "MatchStrategy"]], "sparknlp.common.match_strategy.MatchStrategy": [[462, 2, 1, "", "MATCH_ALL"], [462, 2, 1, "", "MATCH_COMPLETE"], [462, 2, 1, "", "MATCH_FIRST"]], "sparknlp.common.properties": [[463, 1, 1, "", "HasAudioFeatureProperties"], [463, 1, 1, "", "HasBatchedAnnotate"], [463, 1, 1, "", "HasBatchedAnnotateAudio"], [463, 1, 1, "", "HasBatchedAnnotateImage"], [463, 1, 1, "", "HasCandidateLabelsProperties"], [463, 1, 1, "", "HasCaseSensitiveProperties"], [463, 1, 1, "", "HasClassifierActivationProperties"], [463, 1, 1, "", "HasClsTokenProperties"], [463, 1, 1, "", "HasEmbeddingsProperties"], [463, 1, 1, "", "HasEnableCachingProperties"], [463, 1, 1, "", "HasEngine"], [463, 1, 1, "", "HasGeneratorProperties"], [463, 1, 1, "", "HasImageFeatureProperties"], [463, 1, 1, "", "HasLlamaCppProperties"], [463, 1, 1, "", "HasLongMaxSentenceLengthLimit"], [463, 1, 1, "", "HasMaxSentenceLengthLimit"], [463, 1, 1, "", "HasRescaleFactor"]], "sparknlp.common.properties.HasAudioFeatureProperties": [[463, 2, 1, "", "doNormalize"], [463, 2, 1, "", "featureSize"], [463, 2, 1, "", "paddingSide"], [463, 2, 1, "", "paddingValue"], [463, 2, 1, "", "returnAttentionMask"], [463, 2, 1, "", "samplingRate"], [463, 3, 1, "", "setDoNormalize"], [463, 3, 1, "", "setFeatureSize"], [463, 3, 1, "", "setPaddingSide"], [463, 3, 1, "", "setPaddingValue"], [463, 3, 1, "", "setReturnAttentionMask"], [463, 3, 1, "", "setSamplingRate"]], "sparknlp.common.properties.HasBatchedAnnotate": [[463, 2, 1, "", "batchSize"], [463, 3, 1, "", "getBatchSize"], [463, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateAudio": [[463, 2, 1, "", "batchSize"], [463, 3, 1, "", "getBatchSize"], [463, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateImage": [[463, 2, 1, "", "batchSize"], [463, 3, 1, "", "getBatchSize"], [463, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasCandidateLabelsProperties": [[463, 2, 1, "", "candidateLabels"], [463, 2, 1, "", "contradictionIdParam"], [463, 2, 1, "", "entailmentIdParam"], [463, 3, 1, "", "setCandidateLabels"], [463, 3, 1, "", "setContradictionIdParam"], [463, 3, 1, "", "setEntailmentIdParam"]], "sparknlp.common.properties.HasCaseSensitiveProperties": [[463, 2, 1, "", "caseSensitive"], [463, 3, 1, "", "getCaseSensitive"], [463, 3, 1, "", "setCaseSensitive"]], "sparknlp.common.properties.HasClassifierActivationProperties": [[463, 2, 1, "", "activation"], [463, 3, 1, "", "getActivation"], [463, 3, 1, "", "getMultilabel"], [463, 2, 1, "", "multilabel"], [463, 3, 1, "", "setActivation"], [463, 3, 1, "", "setMultilabel"], [463, 3, 1, "", "setThreshold"], [463, 2, 1, "", "threshold"]], "sparknlp.common.properties.HasClsTokenProperties": [[463, 3, 1, "", "getUseCLSToken"], [463, 3, 1, "", "setUseCLSToken"], [463, 2, 1, "", "useCLSToken"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[463, 2, 1, "", "dimension"], [463, 3, 1, "", "getDimension"], [463, 3, 1, "", "setDimension"]], "sparknlp.common.properties.HasEnableCachingProperties": [[463, 2, 1, "", "enableCaching"], [463, 3, 1, "", "getEnableCaching"], [463, 3, 1, "", "setEnableCaching"]], "sparknlp.common.properties.HasEngine": [[463, 2, 1, "", "engine"], [463, 3, 1, "", "getEngine"]], "sparknlp.common.properties.HasGeneratorProperties": [[463, 2, 1, "", "beamSize"], [463, 2, 1, "", "doSample"], [463, 2, 1, "", "maxOutputLength"], [463, 2, 1, "", "minOutputLength"], [463, 2, 1, "", "nReturnSequences"], [463, 2, 1, "", "noRepeatNgramSize"], [463, 2, 1, "", "repetitionPenalty"], [463, 3, 1, "", "setBeamSize"], [463, 3, 1, "", "setDoSample"], [463, 3, 1, "", "setMaxOutputLength"], [463, 3, 1, "", "setMinOutputLength"], [463, 3, 1, "", "setNReturnSequences"], [463, 3, 1, "", "setNoRepeatNgramSize"], [463, 3, 1, "", "setRepetitionPenalty"], [463, 3, 1, "", "setTask"], [463, 3, 1, "", "setTemperature"], [463, 3, 1, "", "setTopK"], [463, 3, 1, "", "setTopP"], [463, 2, 1, "", "task"], [463, 2, 1, "", "temperature"], [463, 2, 1, "", "topK"], [463, 2, 1, "", "topP"]], "sparknlp.common.properties.HasImageFeatureProperties": [[463, 2, 1, "", "doNormalize"], [463, 2, 1, "", "doResize"], [463, 2, 1, "", "featureExtractorType"], [463, 2, 1, "", "imageMean"], [463, 2, 1, "", "imageStd"], [463, 2, 1, "", "resample"], [463, 3, 1, "", "setDoNormalize"], [463, 3, 1, "", "setDoResize"], [463, 3, 1, "", "setFeatureExtractorType"], [463, 3, 1, "", "setImageMean"], [463, 3, 1, "", "setImageStd"], [463, 3, 1, "", "setResample"], [463, 3, 1, "", "setSize"], [463, 2, 1, "", "size"]], "sparknlp.common.properties.HasLlamaCppProperties": [[463, 2, 1, "", "cachePrompt"], [463, 2, 1, "", "chatTemplate"], [463, 2, 1, "", "defragmentationThreshold"], [463, 2, 1, "", "disableTokenIds"], [463, 2, 1, "", "dynamicTemperatureExponent"], [463, 2, 1, "", "dynamicTemperatureRange"], [463, 2, 1, "", "embedding"], [463, 2, 1, "", "flashAttention"], [463, 2, 1, "", "frequencyPenalty"], [463, 3, 1, "", "getMetadata"], [463, 2, 1, "", "gpuSplitMode"], [463, 2, 1, "", "grammar"], [463, 2, 1, "", "grpAttnN"], [463, 2, 1, "", "grpAttnW"], [463, 2, 1, "", "ignoreEos"], [463, 2, 1, "", "inputPrefix"], [463, 2, 1, "", "inputPrefixBos"], [463, 2, 1, "", "inputSuffix"], [463, 2, 1, "", "lookupCacheDynamicFilePath"], [463, 2, 1, "", "lookupCacheStaticFilePath"], [463, 2, 1, "", "mainGpu"], [463, 2, 1, "", "minKeep"], [463, 2, 1, "", "minP"], [463, 2, 1, "", "miroStat"], [463, 2, 1, "", "miroStatEta"], [463, 2, 1, "", "miroStatTau"], [463, 2, 1, "", "modelAlias"], [463, 2, 1, "", "modelDraft"], [463, 2, 1, "", "nBatch"], [463, 2, 1, "", "nChunks"], [463, 2, 1, "", "nCtx"], [463, 2, 1, "", "nDraft"], [463, 2, 1, "", "nGpuLayers"], [463, 2, 1, "", "nGpuLayersDraft"], [463, 2, 1, "", "nKeep"], [463, 2, 1, "", "nPredict"], [463, 2, 1, "", "nProbs"], [463, 2, 1, "", "nSequences"], [463, 2, 1, "", "nThreads"], [463, 2, 1, "", "nThreadsBatch"], [463, 2, 1, "", "nThreadsBatchDraft"], [463, 2, 1, "", "nThreadsDraft"], [463, 2, 1, "", "nUbatch"], [463, 2, 1, "", "noKvOffload"], [463, 2, 1, "", "numaStrategy"], [463, 2, 1, "", "pSplit"], [463, 2, 1, "", "penalizeNl"], [463, 2, 1, "", "penaltyPrompt"], [463, 2, 1, "", "poolingType"], [463, 2, 1, "", "presencePenalty"], [463, 2, 1, "", "repeatLastN"], [463, 2, 1, "", "repeatPenalty"], [463, 2, 1, "", "ropeFreqBase"], [463, 2, 1, "", "ropeFreqScale"], [463, 2, 1, "", "ropeScalingType"], [463, 2, 1, "", "samplers"], [463, 2, 1, "", "seed"], [463, 3, 1, "", "setCachePrompt"], [463, 3, 1, "", "setChatTemplate"], [463, 3, 1, "", "setDefragmentationThreshold"], [463, 3, 1, "", "setDisableTokenIds"], [463, 3, 1, "", "setDynamicTemperatureExponent"], [463, 3, 1, "", "setDynamicTemperatureRange"], [463, 3, 1, "", "setEmbedding"], [463, 3, 1, "", "setFlashAttention"], [463, 3, 1, "", "setFrequencyPenalty"], [463, 3, 1, "", "setGpuSplitMode"], [463, 3, 1, "", "setGrammar"], [463, 3, 1, "", "setGrpAttnN"], [463, 3, 1, "", "setGrpAttnW"], [463, 3, 1, "", "setIgnoreEos"], [463, 3, 1, "", "setInputPrefix"], [463, 3, 1, "", "setInputPrefixBos"], [463, 3, 1, "", "setInputSuffix"], [463, 3, 1, "", "setLookupCacheDynamicFilePath"], [463, 3, 1, "", "setLookupCacheStaticFilePath"], [463, 3, 1, "", "setLoraAdapters"], [463, 3, 1, "", "setMainGpu"], [463, 3, 1, "", "setMinKeep"], [463, 3, 1, "", "setMinP"], [463, 3, 1, "", "setMiroStat"], [463, 3, 1, "", "setMiroStatEta"], [463, 3, 1, "", "setMiroStatTau"], [463, 3, 1, "", "setModelAlias"], [463, 3, 1, "", "setModelDraft"], [463, 3, 1, "", "setNBatch"], [463, 3, 1, "", "setNChunks"], [463, 3, 1, "", "setNCtx"], [463, 3, 1, "", "setNDraft"], [463, 3, 1, "", "setNGpuLayers"], [463, 3, 1, "", "setNGpuLayersDraft"], [463, 3, 1, "", "setNKeep"], [463, 3, 1, "", "setNParallel"], [463, 3, 1, "", "setNPredict"], [463, 3, 1, "", "setNProbs"], [463, 3, 1, "", "setNSequences"], [463, 3, 1, "", "setNThreads"], [463, 3, 1, "", "setNThreadsBatch"], [463, 3, 1, "", "setNThreadsBatchDraft"], [463, 3, 1, "", "setNThreadsDraft"], [463, 3, 1, "", "setNUbatch"], [463, 3, 1, "", "setNoKvOffload"], [463, 3, 1, "", "setNumaStrategy"], [463, 3, 1, "", "setPSplit"], [463, 3, 1, "", "setPenalizeNl"], [463, 3, 1, "", "setPenaltyPrompt"], [463, 3, 1, "", "setPoolingType"], [463, 3, 1, "", "setPresencePenalty"], [463, 3, 1, "", "setRepeatLastN"], [463, 3, 1, "", "setRepeatPenalty"], [463, 3, 1, "", "setRopeFreqBase"], [463, 3, 1, "", "setRopeFreqScale"], [463, 3, 1, "", "setRopeScalingType"], [463, 3, 1, "", "setSamplers"], [463, 3, 1, "", "setSeed"], [463, 3, 1, "", "setStopStrings"], [463, 3, 1, "", "setSystemPrompt"], [463, 3, 1, "", "setTemperature"], [463, 3, 1, "", "setTensorSplit"], [463, 3, 1, "", "setTfsZ"], [463, 3, 1, "", "setTokenBias"], [463, 3, 1, "", "setTokenIdBias"], [463, 3, 1, "", "setTopK"], [463, 3, 1, "", "setTopP"], [463, 3, 1, "", "setTypicalP"], [463, 3, 1, "", "setUseChatTemplate"], [463, 3, 1, "", "setUseMlock"], [463, 3, 1, "", "setUseMmap"], [463, 3, 1, "", "setYarnAttnFactor"], [463, 3, 1, "", "setYarnBetaFast"], [463, 3, 1, "", "setYarnBetaSlow"], [463, 3, 1, "", "setYarnExtFactor"], [463, 3, 1, "", "setYarnOrigCtx"], [463, 2, 1, "", "stopStrings"], [463, 2, 1, "", "systemPrompt"], [463, 2, 1, "", "temperature"], [463, 2, 1, "", "tensorSplit"], [463, 2, 1, "", "tfsZ"], [463, 2, 1, "", "topK"], [463, 2, 1, "", "topP"], [463, 2, 1, "", "typicalP"], [463, 2, 1, "", "useChatTemplate"], [463, 2, 1, "", "useMlock"], [463, 2, 1, "", "useMmap"], [463, 2, 1, "", "yarnAttnFactor"], [463, 2, 1, "", "yarnBetaFast"], [463, 2, 1, "", "yarnBetaSlow"], [463, 2, 1, "", "yarnExtFactor"], [463, 2, 1, "", "yarnOrigCtx"]], "sparknlp.common.properties.HasLongMaxSentenceLengthLimit": [[463, 2, 1, "", "max_length_limit"]], "sparknlp.common.properties.HasMaxSentenceLengthLimit": [[463, 3, 1, "", "getMaxSentenceLength"], [463, 2, 1, "", "maxSentenceLength"], [463, 2, 1, "", "max_length_limit"], [463, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.common.properties.HasRescaleFactor": [[463, 2, 1, "", "doRescale"], [463, 2, 1, "", "rescaleFactor"], [463, 3, 1, "", "setDoRescale"], [463, 3, 1, "", "setRescaleFactor"]], "sparknlp.common.read_as": [[464, 1, 1, "", "ReadAs"]], "sparknlp.common.read_as.ReadAs": [[464, 2, 1, "", "BINARY"], [464, 2, 1, "", "SPARK"], [464, 2, 1, "", "TEXT"]], "sparknlp.common.recursive_annotator_approach": [[465, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.storage": [[466, 1, 1, "", "HasStorage"], [466, 1, 1, "", "HasStorageModel"], [466, 1, 1, "", "HasStorageOptions"], [466, 1, 1, "", "HasStorageRef"]], "sparknlp.common.storage.HasStorage": [[466, 3, 1, "", "getStoragePath"], [466, 3, 1, "", "setStoragePath"], [466, 2, 1, "", "storagePath"]], "sparknlp.common.storage.HasStorageModel": [[466, 3, 1, "", "loadStorage"], [466, 3, 1, "", "loadStorages"], [466, 3, 1, "", "saveStorage"]], "sparknlp.common.storage.HasStorageOptions": [[466, 2, 1, "", "enableInMemoryStorage"], [466, 3, 1, "", "getEnableInMemoryStorage"], [466, 3, 1, "", "getIncludeStorage"], [466, 2, 1, "", "includeStorage"], [466, 3, 1, "", "setEnableInMemoryStorage"], [466, 3, 1, "", "setIncludeStorage"]], "sparknlp.common.storage.HasStorageRef": [[466, 3, 1, "", "getStorageRef"], [466, 3, 1, "", "setStorageRef"], [466, 2, 1, "", "storageRef"]], "sparknlp.common.utils": [[467, 5, 1, "", "ExternalResource"], [467, 5, 1, "", "RegexRule"]], "sparknlp.functions": [[468, 5, 1, "", "explode_annotations_col"], [468, 5, 1, "", "filter_by_annotations_col"], [468, 5, 1, "", "map_annotations"], [468, 5, 1, "", "map_annotations_array"], [468, 5, 1, "", "map_annotations_col"], [468, 5, 1, "", "map_annotations_cols"], [468, 5, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[470, 0, 0, "-", "annotator_java_ml"], [471, 0, 0, "-", "annotator_transformer"], [472, 0, 0, "-", "extended_java_wrapper"], [474, 0, 0, "-", "params_getters_setters"], [475, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[470, 1, 1, "", "AnnotatorJavaMLReadable"], [470, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[470, 3, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[471, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer.AnnotatorTransformer": [[471, 2, 1, "", "outputAnnotatorType"]], "sparknlp.internal.extended_java_wrapper": [[472, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[472, 3, 1, "", "apply"], [472, 3, 1, "", "getDataFrame"], [472, 2, 1, "", "java_obj"], [472, 3, 1, "", "new_java_array"], [472, 3, 1, "", "new_java_array_integer"], [472, 3, 1, "", "new_java_array_string"], [472, 3, 1, "", "new_java_obj"], [472, 2, 1, "", "sc"], [472, 3, 1, "", "spark_version"]], "sparknlp.internal.params_getters_setters": [[474, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[474, 3, 1, "", "getParamValue"], [474, 2, 1, "", "getter_attrs"], [474, 3, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[475, 1, 1, "", "RecursiveEstimator"], [475, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[475, 3, 1, "", "fit"]], "sparknlp.internal.recursive.RecursiveTransformer": [[475, 3, 1, "", "transform_recursive"]], "sparknlp.logging": [[476, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[476, 1, 1, "", "CometLogger"], [476, 4, 1, "", "comet_ml"]], "sparknlp.logging.comet.CometLogger": [[476, 2, 1, "", "comet_mode"], [476, 3, 1, "", "end"], [476, 2, 1, "", "experiment"], [476, 2, 1, "", "experiment_id"], [476, 2, 1, "", "experiment_kwargs"], [476, 3, 1, "", "log_asset"], [476, 3, 1, "", "log_asset_data"], [476, 3, 1, "", "log_completed_run"], [476, 3, 1, "", "log_metrics"], [476, 3, 1, "", "log_parameters"], [476, 3, 1, "", "log_pipeline_parameters"], [476, 3, 1, "", "log_visualization"], [476, 3, 1, "", "monitor"], [476, 2, 1, "", "project_name"], [476, 2, 1, "", "thread"], [476, 2, 1, "", "workspace"]], "sparknlp.partition": [[479, 0, 0, "-", "partition"], [480, 0, 0, "-", "partition_properties"], [481, 0, 0, "-", "partition_transformer"]], "sparknlp.partition.partition": [[479, 1, 1, "", "Partition"]], "sparknlp.partition.partition.Partition": [[479, 3, 1, "", "partition"], [479, 3, 1, "", "partition_text"], [479, 3, 1, "", "partition_urls"], [479, 2, 1, "", "spark"]], "sparknlp.partition.partition_properties": [[480, 1, 1, "", "HasEmailReaderProperties"], [480, 1, 1, "", "HasExcelReaderProperties"], [480, 1, 1, "", "HasHTMLReaderProperties"], [480, 1, 1, "", "HasPowerPointProperties"], [480, 1, 1, "", "HasTextReaderProperties"]], "sparknlp.partition.partition_properties.HasEmailReaderProperties": [[480, 2, 1, "", "addAttachmentContent"], [480, 3, 1, "", "getAddAttachmentContent"], [480, 3, 1, "", "setAddAttachmentContent"]], "sparknlp.partition.partition_properties.HasExcelReaderProperties": [[480, 2, 1, "", "appendCells"], [480, 2, 1, "", "cellSeparator"], [480, 3, 1, "", "getAppendCells"], [480, 3, 1, "", "getCellSeparator"], [480, 3, 1, "", "setAppendCells"], [480, 3, 1, "", "setCellSeparator"]], "sparknlp.partition.partition_properties.HasHTMLReaderProperties": [[480, 3, 1, "", "getTimeout"], [480, 3, 1, "", "setHeaders"], [480, 3, 1, "", "setTimeout"], [480, 2, 1, "", "timeout"]], "sparknlp.partition.partition_properties.HasPowerPointProperties": [[480, 3, 1, "", "getIncludeSlideNotes"], [480, 2, 1, "", "includeSlideNotes"], [480, 3, 1, "", "setIncludeSlideNotes"]], "sparknlp.partition.partition_properties.HasTextReaderProperties": [[480, 3, 1, "", "getGroupBrokenParagraphs"], [480, 3, 1, "", "getMaxLineCount"], [480, 3, 1, "", "getParagraphSplit"], [480, 3, 1, "", "getShortLineWordThreshold"], [480, 3, 1, "", "getThreshold"], [480, 3, 1, "", "getTitleLengthSize"], [480, 2, 1, "", "groupBrokenParagraphs"], [480, 2, 1, "", "maxLineCount"], [480, 2, 1, "", "paragraphSplit"], [480, 3, 1, "", "setGroupBrokenParagraphs"], [480, 3, 1, "", "setMaxLineCount"], [480, 3, 1, "", "setParagraphSplit"], [480, 3, 1, "", "setShortLineWordThreshold"], [480, 3, 1, "", "setThreshold"], [480, 3, 1, "", "setTitleLengthSize"], [480, 2, 1, "", "shortLineWordThreshold"], [480, 2, 1, "", "threshold"], [480, 2, 1, "", "titleLengthSize"]], "sparknlp.partition.partition_transformer": [[481, 1, 1, "", "PartitionTransformer"]], "sparknlp.partition.partition_transformer.PartitionTransformer": [[481, 2, 1, "", "contentPath"], [481, 2, 1, "", "contentType"], [481, 3, 1, "", "getContentPath"], [481, 3, 1, "", "getContentType"], [481, 3, 1, "", "getIncludePageBreaks"], [481, 3, 1, "", "getInferTableStructure"], [481, 3, 1, "", "getStoreContent"], [481, 3, 1, "", "getTitleFontSize"], [481, 2, 1, "", "includePageBreaks"], [481, 2, 1, "", "inferTableStructure"], [481, 2, 1, "", "inputAnnotatorTypes"], [481, 2, 1, "", "name"], [481, 2, 1, "", "outputAnnotatorType"], [481, 3, 1, "", "setContentPath"], [481, 3, 1, "", "setContentType"], [481, 3, 1, "", "setIncludePageBreaks"], [481, 3, 1, "", "setInferTableStructure"], [481, 3, 1, "", "setStoreContent"], [481, 3, 1, "", "setTitleFontSize"], [481, 2, 1, "", "storeContent"], [481, 2, 1, "", "titleFontSize"]], "sparknlp.pretrained": [[483, 0, 0, "-", "pretrained_pipeline"], [484, 0, 0, "-", "resource_downloader"], [485, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[483, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[483, 3, 1, "", "annotate"], [483, 3, 1, "", "from_disk"], [483, 3, 1, "", "fullAnnotate"], [483, 3, 1, "", "fullAnnotateImage"], [483, 2, 1, "", "light_model"], [483, 3, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[484, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[484, 3, 1, "", "clearCache"], [484, 3, 1, "", "downloadModel"], [484, 3, 1, "", "downloadModelDirectly"], [484, 3, 1, "", "downloadPipeline"], [484, 3, 1, "", "showAvailableAnnotators"], [484, 3, 1, "", "showPublicModels"], [484, 3, 1, "", "showPublicPipelines"], [484, 3, 1, "", "showUnCategorizedResources"]], "sparknlp.pretrained.utils": [[485, 5, 1, "", "printProgress"]], "sparknlp.reader": [[486, 0, 0, "-", "enums"], [488, 0, 0, "-", "pdf_to_text"], [489, 0, 0, "-", "sparknlp_reader"]], "sparknlp.reader.enums": [[486, 1, 1, "", "TextStripperType"]], "sparknlp.reader.enums.TextStripperType": [[486, 2, 1, "", "PDF_LAYOUT_TEXT_STRIPPER"], [486, 2, 1, "", "PDF_TEXT_STRIPPER"]], "sparknlp.reader.pdf_to_text": [[488, 1, 1, "", "PdfToText"]], "sparknlp.reader.pdf_to_text.PdfToText": [[488, 2, 1, "", "onlyPageNum"], [488, 2, 1, "", "pageNumCol"], [488, 2, 1, "", "partitionNum"], [488, 3, 1, "", "setInputCol"], [488, 3, 1, "", "setOnlyPageNum"], [488, 3, 1, "", "setOutputCol"], [488, 3, 1, "", "setPageNumCol"], [488, 3, 1, "", "setPartitionNum"], [488, 3, 1, "", "setSort"], [488, 3, 1, "", "setSplitPage"], [488, 3, 1, "", "setStoreSplittedPdf"], [488, 3, 1, "", "setTextStripper"], [488, 2, 1, "", "sort"], [488, 2, 1, "", "splitPage"], [488, 2, 1, "", "storeSplittedPdf"], [488, 2, 1, "", "textStripper"]], "sparknlp.reader.sparknlp_reader": [[489, 1, 1, "", "SparkNLPReader"]], "sparknlp.reader.sparknlp_reader.SparkNLPReader": [[489, 3, 1, "", "doc"], [489, 3, 1, "", "email"], [489, 3, 1, "", "html"], [489, 3, 1, "", "pdf"], [489, 3, 1, "", "ppt"], [489, 2, 1, "", "spark"], [489, 3, 1, "", "txt"], [489, 3, 1, "", "xls"]], "sparknlp.training": [[490, 0, 0, "-", "conll"], [491, 0, 0, "-", "conllu"], [493, 0, 0, "-", "pos"], [494, 0, 0, "-", "pub_tator"], [495, 0, 0, "-", "spacy_to_annotation"], [496, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[490, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[490, 3, 1, "", "readDataset"]], "sparknlp.training.conllu": [[491, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[491, 3, 1, "", "readDataset"]], "sparknlp.training.pos": [[493, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[493, 3, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[494, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[494, 3, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[495, 1, 1, "", "SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation.SpacyToAnnotation": [[495, 3, 1, "", "readJsonFile"]], "sparknlp.training.tfgraphs": [[496, 4, 1, "", "tf_graph"], [496, 4, 1, "", "tf_graph_1x"]], "sparknlp.upload_to_hub": [[497, 1, 1, "", "PushToHub"]], "sparknlp.upload_to_hub.PushToHub": [[497, 3, 1, "", "check_for_required_info"], [497, 3, 1, "", "create_docs"], [497, 2, 1, "", "list_of_tasks"], [497, 3, 1, "", "push_to_hub"], [497, 3, 1, "", "unzip_directory"], [497, 3, 1, "", "zip_directory"]], "sparknlp.util": [[498, 1, 1, "", "CoNLLGenerator"], [498, 5, 1, "", "get_config_path"]], "sparknlp.util.CoNLLGenerator": [[498, 3, 1, "", "exportConllFiles"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:data", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "data", "Python data"], "5": ["py", "function", "Python function"]}, "titleterms": {"sparknlp": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498], "packag": [1, 5, 6, 12, 59, 62, 64, 82, 89, 118, 121, 123, 126, 133, 141, 144, 147, 149, 152, 155, 174, 176, 183, 189, 191, 207, 220, 226, 228, 232, 236, 240, 369, 469], "subpackag": [1, 5, 369, 469], "submodul": [1, 5, 6, 12, 59, 62, 64, 82, 89, 118, 121, 123, 126, 133, 141, 144, 147, 149, 152, 155, 174, 176, 183, 189, 191, 207, 220, 226, 228, 232, 236, 240, 255, 285, 309, 310, 317, 331, 349, 367, 369, 370, 372, 377, 382, 390, 395, 396, 398, 401, 410, 424, 426, 433, 438, 449, 461, 469, 473, 477, 478, 482, 487, 492], "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499], "content": [1, 5, 6, 12, 59, 62, 64, 82, 89, 118, 121, 123, 126, 133, 141, 144, 147, 149, 152, 155, 174, 176, 183, 189, 191, 207, 220, 226, 228, 232, 236, 240, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 371, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 503, 504, 505], "annotation_audio": [3, 252], "annotation_imag": [4, 253], "audio": [6, 7, 8, 9, 254, 255, 256, 257], "hubert_for_ctc": [7, 254], "wav2vec2_for_ctc": [8, 256], "whisper_for_ctc": [9, 257], "chunk2_doc": [10, 258], "chunker": [11, 259], "classifier_dl": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "albert_for_multiple_choic": [13, 260], "albert_for_question_answ": [14, 261], "albert_for_sequence_classif": [15, 262], "albert_for_token_classif": [16, 263], "albert_for_zero_shot_classif": [17, 264], "bart_for_zero_shot_classif": [18, 265], "bert_for_multiple_choic": [19, 266], "bert_for_question_answ": [20, 267], "bert_for_sequence_classif": [21, 268], "bert_for_token_classif": [22, 269], "bert_for_zero_shot_classif": [23, 270], "camembert_for_question_answ": [24, 271], "camembert_for_sequence_classif": [25, 272], "camembert_for_token_classif": [26, 273], "camembert_for_zero_shot_classif": [27, 274], "exampl": [27, 32, 274, 279], "deberta_for_question_answ": [29, 276], "deberta_for_sequence_classif": [30, 277], "deberta_for_token_classif": [31, 278], "deberta_for_zero_shot_classif": [32, 279], "return": [32, 70, 71, 77, 279, 318, 319, 325], "distil_bert_for_question_answ": [33, 280], "distil_bert_for_sequence_classif": [34, 281], "distil_bert_for_token_classif": [35, 282], "distil_bert_for_zero_shot_classif": [36, 283], "distilbert_for_multiple_choic": [37, 284], "longformer_for_question_answ": [38, 286], "longformer_for_sequence_classif": [39, 287], "longformer_for_token_classif": [40, 288], "mpnet_for_question_answ": [41, 289], "mpnet_for_sequence_classif": [42, 290], "mpnet_for_token_classif": [43, 291], "multi_classifier_dl": [44, 292], "roberta_for_multiple_choic": [45, 293], "roberta_for_question_answ": [46, 294], "roberta_for_sequence_classif": [47, 295], "roberta_for_token_classif": [48, 296], "roberta_for_zero_shot_classif": [49, 297], "sentiment_dl": [50, 298], "tapas_for_question_answ": [51, 299], "xlm_roberta_for_multiple_choic": [52, 300], "xlm_roberta_for_question_answ": [53, 301], "xlm_roberta_for_sequence_classif": [54, 302], "xlm_roberta_for_token_classif": [55, 303], "xlm_roberta_for_zero_shot_classif": [56, 304], "xlnet_for_sequence_classif": [57, 305], "xlnet_for_token_classif": [58, 306], "cleaner": [59, 60, 61, 307, 308, 309], "extractor": [61, 308], "coref": [62, 63, 310, 311], "spanbert_coref": [63, 311], "cv": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328], "blip_for_question_answ": [65, 312], "clip_for_zero_shot_classif": [66, 313], "convnext_for_image_classif": [67, 314], "florence2_transform": [68, 315], "gemma3_for_multimod": [69, 316], "internvl_for_multimod": [70, 318], "refer": [70, 71, 77, 318, 319, 325, 499], "janus_for_multimod": [71, 319], "llava_for_multimod": [72, 320], "mllama_for_multimod": [73, 321], "paligemma_for_multimod": [74, 322], "phi3_vision_for_multimod": [75, 323], "qwen2vl_transform": [76, 324], "smolvlm_transform": [77, 325], "swin_for_image_classif": [78, 326], "vision_encoder_decoder_for_image_capt": [79, 327], "vit_for_image_classif": [80, 328], "date2_chunk": [81, 329], "depend": [82, 83, 84, 330, 331, 332], "dependency_pars": [83, 330], "typed_dependency_pars": [84, 332], "document_character_text_splitt": [85, 333], "document_norm": [86, 334], "document_token_splitt": [87, 335], "document_token_splitter_test": [88, 336], "embed": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365], "albert_embed": [90, 337], "auto_gguf_embed": [91, 338], "bert_embed": [92, 339], "bert_sentence_embed": [93, 340], "bge_embed": [94, 341], "camembert_embed": [95, 342], "chunk_embed": [96, 343], "deberta_embed": [97, 344], "distil_bert_embed": [98, 345], "doc2vec": [99, 346], "e5_embed": [100, 347], "elmo_embed": [101, 348], "instructor_embed": [102, 350], "longformer_embed": [103, 351], "mpnet_embed": [104, 352], "mxbai_embed": [105, 353], "nomic_embed": [106, 354], "roberta_embed": [107, 355], "roberta_sentence_embed": [108, 356], "sentence_embed": [109, 357], "snowflake_embed": [110, 358], "uae_embed": [111, 359], "universal_sentence_encod": [112, 360], "word2vec": [113, 361], "word_embed": [114, 362], "xlm_roberta_embed": [115, 363], "xlm_roberta_sentence_embed": [116, 364], "xlnet_embed": [117, 365], "er": [118, 119, 366, 367], "entity_rul": [119, 366], "graph_extract": [120, 368], "keyword_extract": [121, 122, 370, 371], "yake_keyword_extract": [122, 371], "ld_dl": [123, 124, 372, 373], "language_detector_dl": [124, 373], "lemmat": [125, 374], "matcher": [126, 127, 128, 129, 130, 131, 375, 376, 377, 378, 379, 380], "big_text_match": [127, 375], "date_match": [128, 376], "multi_date_match": [129, 378], "regex_match": [130, 379], "text_match": [131, 380], "n_gram_gener": [132, 381], "ner": [133, 134, 135, 136, 137, 138, 139, 382, 383, 384, 385, 386, 387, 388], "ner_approach": [134, 383], "ner_convert": [135, 384], "ner_crf": [136, 385], "ner_dl": [137, 386], "ner_overwrit": [138, 387], "zero_shot_ner_model": [139, 388], "normal": [140, 389], "openai": [141, 142, 143, 390, 391, 392], "openai_complet": [142, 391], "openai_embed": [143, 392], "param": [144, 145, 146, 393, 394, 395], "classifier_encod": [145, 393], "evaluation_dl_param": [146, 394], "po": [147, 148, 243, 396, 397, 493, 510], "perceptron": [148, 397], "sentenc": [149, 150, 151, 398, 399, 400, 505], "sentence_detector": [150, 399], "sentence_detector_dl": [151, 400], "sentiment": [152, 153, 154, 401, 402, 403], "sentiment_detector": [153, 402], "vivekn_senti": [154, 403], "seq2seq": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "auto_gguf_model": [156, 404], "auto_gguf_vision_model": [157, 405], "bart_transform": [158, 406], "cohere_transform": [159, 407], "cpm_transform": [160, 408], "gpt2_transform": [161, 409], "llama2_transform": [162, 411], "llama3_transform": [163, 412], "m2m100_transform": [164, 413], "marian_transform": [165, 414], "mistral_transform": [166, 415], "nllb_transform": [167, 416], "olmo_transform": [168, 417], "phi2_transform": [169, 418], "phi3_transform": [170, 419], "qwen_transform": [171, 420], "starcoder_transform": [172, 421], "t5_transform": [173, 422], "similar": [174, 175, 423, 424], "document_similarity_rank": [175, 423], "spell_check": [176, 177, 178, 179, 425, 426, 427, 428], "context_spell_check": [177, 425], "norvig_sweet": [178, 427], "symmetric_delet": [179, 428], "stemmer": [180, 429], "stop_words_clean": [181, 430], "tf_ner_dl_graph_build": [182, 431], "token": [183, 184, 185, 186, 187, 432, 433, 434, 435, 436, 505], "chunk_token": [184, 432], "recursive_token": [185, 434], "regex_token": [186, 435], "token2_chunk": [188, 437], "w": [189, 190, 438, 439], "word_segment": [190, 439], "base": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455], "audio_assembl": [192, 440], "doc2_chunk": [193, 441], "document_assembl": [194, 442], "embeddings_finish": [195, 443], "finish": [196, 444, 505], "graph_finish": [197, 445], "has_recursive_fit": [198, 446], "has_recursive_transform": [199, 447], "image_assembl": [200, 448], "light_pipelin": [201, 450], "multi_document_assembl": [202, 451], "prompt_assembl": [203, 452], "recursive_pipelin": [204, 453], "table_assembl": [205, 454], "token_assembl": [206, 455], "common": [207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 504], "annotator_approach": [208, 456], "annotator_model": [209, 457], "annotator_properti": [210, 458], "annotator_typ": [211, 459], "coverage_result": [212, 460], "match_strategi": [213, 462], "properti": [214, 463], "read_a": [215, 464], "recursive_annotator_approach": [216, 465], "storag": [217, 466], "util": [218, 235, 248, 467, 485, 498], "function": [219, 467, 468, 469, 485, 498, 504, 506], "intern": [220, 221, 222, 223, 224, 225, 470, 471, 472, 473, 474, 475], "annotator_java_ml": [221, 470], "annotator_transform": [222, 471], "extended_java_wrapp": [223, 472], "params_getters_sett": [224, 474], "recurs": [225, 475], "log": [226, 227, 476, 477, 500, 502], "comet": [227, 476, 500], "partit": [228, 229, 230, 231, 478, 479, 480, 481], "partition_properti": [230, 480], "partition_transform": [231, 481], "pretrain": [232, 233, 234, 235, 482, 483, 484, 485, 504, 508, 509], "pretrained_pipelin": [233, 483], "resource_download": [234, 484], "reader": [236, 237, 238, 239, 486, 487, 488, 489], "enum": [237, 486], "pdf_to_text": [238, 488], "sparknlp_read": [239, 489], "train": [240, 241, 242, 243, 244, 245, 246, 490, 491, 492, 493, 494, 495, 496, 510], "conll": [241, 490, 510], "conllu": [242, 491, 510], "pub_tat": [244, 494], "spacy_to_annot": [245, 495], "tfgraph": [246, 496], "upload_to_hub": [247, 497], "get": [249, 505], "start": 249, "spark": [249, 250, 500, 505, 509], "nlp": [249, 250, 500, 509], "cheat": 249, "sheet": 249, "requir": 249, "instal": [249, 500], "us": [249, 500, 509], "conda": 249, "virtualenv": 249, "session": 249, "from": 249, "python": 249, "document": 250, "class": [251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 470, 471, 472, 474, 475, 476, 479, 480, 481, 483, 484, 486, 488, 489, 490, 491, 493, 494, 495, 497, 498], "attribut": [469, 476], "api": 499, "A": 500, "meta": 500, "machin": [500, 501], "learn": [500, 501], "platform": [500, 501], "pipelin": [500, 505, 508, 509], "paramet": 500, "evalu": 500, "metric": 500, "visual": 500, "run": 500, "an": 500, "offlin": 500, "experi": 500, "mlflow": 501, "lifecycl": 501, "third": 502, "parti": 502, "project": 502, "approach": 504, "model": 504, "note": 504, "avail": [504, 509], "set": 505, "up": 505, "your": 505, "own": 505, "type": 505, "necessari": 505, "import": 505, "construct": 505, "documentassembl": 505, "data": 505, "detect": 505, "out": 505, "put": 505, "all": 505, "togeth": 505, "ml": [505, 509], "helper": 506, "user": 507, "guid": 507, "light": 508, "convert": 508, "pipelinemodel": 508, "download": 509, "As": 509, "lightpipelin": 509, "load": 510, "dataset": 510, "spell": 510, "checker": 510, "pubtat": 510}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"sparknlp": [[0, "sparknlp"], [469, "module-sparknlp"]], "sparknlp package": [[1, "sparknlp-package"]], "Subpackages": [[1, "subpackages"], [5, "subpackages"], [369, "subpackages"], [469, "subpackages"]], "Submodules": [[1, "submodules"], [5, "submodules"], [6, "submodules"], [12, "submodules"], [59, "submodules"], [62, "submodules"], [64, "submodules"], [82, "submodules"], [89, "submodules"], [118, "submodules"], [121, "submodules"], [123, "submodules"], [126, "submodules"], [133, "submodules"], [141, "submodules"], [144, "submodules"], [147, "submodules"], [149, "submodules"], [152, "submodules"], [155, "submodules"], [174, "submodules"], [176, "submodules"], [183, "submodules"], [189, "submodules"], [191, "submodules"], [207, "submodules"], [220, "submodules"], [226, "submodules"], [228, "submodules"], [232, "submodules"], [236, "submodules"], [240, "submodules"], [255, "submodules"], [285, "submodules"], [309, "submodules"], [310, "submodules"], [317, "submodules"], [331, "submodules"], [349, "submodules"], [367, "submodules"], [369, "submodules"], [370, "submodules"], [372, "submodules"], [377, "submodules"], [382, "submodules"], [390, "submodules"], [395, "submodules"], [396, "submodules"], [398, "submodules"], [401, "submodules"], [410, "submodules"], [424, "submodules"], [426, "submodules"], [433, "submodules"], [438, "submodules"], [449, "submodules"], [461, "submodules"], [469, "submodules"], [473, "submodules"], [477, "submodules"], [478, "submodules"], [482, "submodules"], [487, "submodules"], [492, "submodules"]], "Module contents": [[1, "module-sparknlp"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [12, "module-sparknlp.annotator.classifier_dl"], [59, "module-sparknlp.annotator.cleaners"], [62, "module-sparknlp.annotator.coref"], [64, "module-sparknlp.annotator.cv"], [82, "module-sparknlp.annotator.dependency"], [89, "module-sparknlp.annotator.embeddings"], [118, "module-sparknlp.annotator.er"], [121, "module-sparknlp.annotator.keyword_extraction"], [123, "module-sparknlp.annotator.ld_dl"], [126, "module-sparknlp.annotator.matcher"], [133, "module-sparknlp.annotator.ner"], [141, "module-sparknlp.annotator.openai"], [144, "module-sparknlp.annotator.param"], [147, "module-sparknlp.annotator.pos"], [149, "module-sparknlp.annotator.sentence"], [152, "module-sparknlp.annotator.sentiment"], [155, "module-sparknlp.annotator.seq2seq"], [174, "module-sparknlp.annotator.similarity"], [176, "module-sparknlp.annotator.spell_check"], [183, "module-sparknlp.annotator.token"], [189, "module-sparknlp.annotator.ws"], [191, "module-sparknlp.base"], [207, "module-sparknlp.common"], [220, "module-sparknlp.internal"], [226, "module-sparknlp.logging"], [228, "module-sparknlp.partition"], [232, "module-sparknlp.pretrained"], [236, "module-sparknlp.reader"], [240, "module-sparknlp.training"]], "sparknlp.annotation module": [[2, "module-sparknlp.annotation"]], "sparknlp.annotation_audio module": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image module": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator package": [[5, "sparknlp-annotator-package"]], "sparknlp.annotator.audio package": [[6, "sparknlp-annotator-audio-package"]], "sparknlp.annotator.audio.hubert_for_ctc module": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio.wav2vec2_for_ctc module": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc module": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc module": [[10, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker module": [[11, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl package": [[12, "sparknlp-annotator-classifier-dl-package"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering module": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification module": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering module": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification module": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering module": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification module": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "Examples": [[27, "examples"], [32, "examples"], [274, "examples"], [279, "examples"]], "sparknlp.annotator.classifier_dl.classifier_dl module": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering module": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification module": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Returns": [[32, "returns"], [32, "id1"], [70, "returns"], [70, "id1"], [71, "returns"], [71, "id1"], [77, "returns"], [77, "id1"], [279, "returns"], [279, "id1"], [318, "returns"], [318, "id1"], [319, "returns"], [319, "id1"], [325, "returns"], [325, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering module": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification module": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl module": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering module": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification module": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl module": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering module": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners package": [[59, "sparknlp-annotator-cleaners-package"]], "sparknlp.annotator.cleaners.cleaner module": [[60, "module-sparknlp.annotator.cleaners.cleaner"]], "sparknlp.annotator.cleaners.extractor module": [[61, "module-sparknlp.annotator.cleaners.extractor"]], "sparknlp.annotator.coref package": [[62, "sparknlp-annotator-coref-package"]], "sparknlp.annotator.coref.spanbert_coref module": [[63, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv package": [[64, "sparknlp-annotator-cv-package"]], "sparknlp.annotator.cv.blip_for_question_answering module": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification module": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification module": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv.florence2_transformer module": [[68, "module-sparknlp.annotator.cv.florence2_transformer"]], "sparknlp.annotator.cv.gemma3_for_multimodal module": [[69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "sparknlp.annotator.cv.internvl_for_multimodal module": [[70, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "References": [[70, "references"], [71, "references"], [77, "references"], [318, "references"], [319, "references"], [325, "references"]], "sparknlp.annotator.cv.janus_for_multimodal module": [[71, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "sparknlp.annotator.cv.llava_for_multimodal module": [[72, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal module": [[73, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "sparknlp.annotator.cv.paligemma_for_multimodal module": [[74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal module": [[75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "sparknlp.annotator.cv.qwen2vl_transformer module": [[76, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "sparknlp.annotator.cv.smolvlm_transformer module": [[77, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "sparknlp.annotator.cv.swin_for_image_classification module": [[78, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module": [[79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification module": [[80, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk module": [[81, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency package": [[82, "sparknlp-annotator-dependency-package"]], "sparknlp.annotator.dependency.dependency_parser module": [[83, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency.typed_dependency_parser module": [[84, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter module": [[85, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer module": [[86, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter module": [[87, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test module": [[88, "sparknlp-annotator-document-token-splitter-test-module"]], "sparknlp.annotator.embeddings package": [[89, "sparknlp-annotator-embeddings-package"]], "sparknlp.annotator.embeddings.albert_embeddings module": [[90, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings module": [[91, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings module": [[92, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings module": [[93, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings module": [[94, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings module": [[95, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings module": [[96, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings module": [[97, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings module": [[98, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec module": [[99, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings module": [[100, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings module": [[101, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings module": [[102, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings module": [[103, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings module": [[104, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings module": [[105, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings module": [[106, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings module": [[107, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings module": [[108, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings module": [[109, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings module": [[110, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings module": [[111, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder module": [[112, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec module": [[113, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings module": [[114, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings module": [[115, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module": [[116, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings module": [[117, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er package": [[118, "sparknlp-annotator-er-package"]], "sparknlp.annotator.er.entity_ruler module": [[119, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.graph_extraction module": [[120, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator.keyword_extraction package": [[121, "sparknlp-annotator-keyword-extraction-package"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module": [[122, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl package": [[123, "sparknlp-annotator-ld-dl-package"]], "sparknlp.annotator.ld_dl.language_detector_dl module": [[124, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer module": [[125, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher package": [[126, "sparknlp-annotator-matcher-package"]], "sparknlp.annotator.matcher.big_text_matcher module": [[127, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher module": [[128, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher.multi_date_matcher module": [[129, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher module": [[130, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher module": [[131, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator module": [[132, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner package": [[133, "sparknlp-annotator-ner-package"]], "sparknlp.annotator.ner.ner_approach module": [[134, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter module": [[135, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf module": [[136, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl module": [[137, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter module": [[138, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model module": [[139, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer module": [[140, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai package": [[141, "sparknlp-annotator-openai-package"]], "sparknlp.annotator.openai.openai_completion module": [[142, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings module": [[143, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param package": [[144, "sparknlp-annotator-param-package"]], "sparknlp.annotator.param.classifier_encoder module": [[145, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params module": [[146, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.pos package": [[147, "sparknlp-annotator-pos-package"]], "sparknlp.annotator.pos.perceptron module": [[148, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence package": [[149, "sparknlp-annotator-sentence-package"]], "sparknlp.annotator.sentence.sentence_detector module": [[150, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl module": [[151, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment package": [[152, "sparknlp-annotator-sentiment-package"]], "sparknlp.annotator.sentiment.sentiment_detector module": [[153, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment module": [[154, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq package": [[155, "sparknlp-annotator-seq2seq-package"]], "sparknlp.annotator.seq2seq.auto_gguf_model module": [[156, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model module": [[157, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "sparknlp.annotator.seq2seq.bart_transformer module": [[158, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cohere_transformer module": [[159, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer module": [[160, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer module": [[161, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer module": [[162, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer module": [[163, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer module": [[164, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer module": [[165, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer module": [[166, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer module": [[167, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.olmo_transformer module": [[168, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer module": [[169, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer module": [[170, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer module": [[171, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer module": [[172, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer module": [[173, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity package": [[174, "sparknlp-annotator-similarity-package"]], "sparknlp.annotator.similarity.document_similarity_ranker module": [[175, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.spell_check package": [[176, "sparknlp-annotator-spell-check-package"]], "sparknlp.annotator.spell_check.context_spell_checker module": [[177, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check.norvig_sweeting module": [[178, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete module": [[179, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer module": [[180, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner module": [[181, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder module": [[182, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token package": [[183, "sparknlp-annotator-token-package"]], "sparknlp.annotator.token.chunk_tokenizer module": [[184, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token.recursive_tokenizer module": [[185, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer module": [[186, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer module": [[187, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk module": [[188, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws package": [[189, "sparknlp-annotator-ws-package"]], "sparknlp.annotator.ws.word_segmenter module": [[190, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base package": [[191, "sparknlp-base-package"]], "sparknlp.base.audio_assembler module": [[192, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk module": [[193, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler module": [[194, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher module": [[195, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher module": [[196, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher module": [[197, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit module": [[198, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform module": [[199, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler module": [[200, "module-sparknlp.base.image_assembler"]], "sparknlp.base.light_pipeline module": [[201, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler module": [[202, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler module": [[203, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline module": [[204, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler module": [[205, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler module": [[206, "module-sparknlp.base.token_assembler"]], "sparknlp.common package": [[207, "sparknlp-common-package"]], "sparknlp.common.annotator_approach module": [[208, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model module": [[209, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties module": [[210, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type module": [[211, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result module": [[212, "module-sparknlp.common.coverage_result"]], "sparknlp.common.match_strategy module": [[213, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties module": [[214, "module-sparknlp.common.properties"]], "sparknlp.common.read_as module": [[215, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach module": [[216, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage module": [[217, "module-sparknlp.common.storage"]], "sparknlp.common.utils module": [[218, "module-sparknlp.common.utils"]], "sparknlp.functions module": [[219, "module-sparknlp.functions"]], "sparknlp.internal package": [[220, "sparknlp-internal-package"]], "sparknlp.internal.annotator_java_ml module": [[221, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer module": [[222, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper module": [[223, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal.params_getters_setters module": [[224, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive module": [[225, "module-sparknlp.internal.recursive"]], "sparknlp.logging package": [[226, "sparknlp-logging-package"]], "sparknlp.logging.comet module": [[227, "module-sparknlp.logging.comet"]], "sparknlp.partition package": [[228, "sparknlp-partition-package"]], "sparknlp.partition.partition module": [[229, "module-sparknlp.partition.partition"]], "sparknlp.partition.partition_properties module": [[230, "module-sparknlp.partition.partition_properties"]], "sparknlp.partition.partition_transformer module": [[231, "module-sparknlp.partition.partition_transformer"]], "sparknlp.pretrained package": [[232, "sparknlp-pretrained-package"]], "sparknlp.pretrained.pretrained_pipeline module": [[233, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader module": [[234, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils module": [[235, "module-sparknlp.pretrained.utils"]], "sparknlp.reader package": [[236, "sparknlp-reader-package"]], "sparknlp.reader.enums module": [[237, "module-sparknlp.reader.enums"]], "sparknlp.reader.pdf_to_text module": [[238, "module-sparknlp.reader.pdf_to_text"]], "sparknlp.reader.sparknlp_reader module": [[239, "module-sparknlp.reader.sparknlp_reader"]], "sparknlp.training package": [[240, "sparknlp-training-package"]], "sparknlp.training.conll module": [[241, "module-sparknlp.training.conll"]], "sparknlp.training.conllu module": [[242, "module-sparknlp.training.conllu"]], "sparknlp.training.pos module": [[243, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator module": [[244, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation module": [[245, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs module": [[246, "sparknlp-training-tfgraphs-module"]], "sparknlp.upload_to_hub module": [[247, "module-sparknlp.upload_to_hub"]], "sparknlp.util module": [[248, "module-sparknlp.util"]], "Getting Started": [[249, "getting-started"]], "Spark NLP Cheat Sheet": [[249, "spark-nlp-cheat-sheet"]], "Requirements": [[249, "requirements"]], "Installation": [[249, "installation"], [500, "installation"]], "Using Conda": [[249, "using-conda"]], "Using Virtualenv": [[249, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[249, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[250, "spark-nlp-documentation"]], "Content": [[250, "content"]], "sparknlp.annotation": [[251, "module-sparknlp.annotation"]], "Module Contents": [[251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [368, "module-contents"], [371, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [397, "module-contents"], [399, "module-contents"], [400, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [425, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"]], "Classes": [[251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [368, "classes"], [371, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [397, "classes"], [399, "classes"], [400, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [422, "classes"], [423, "classes"], [425, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [439, "classes"], [440, "classes"], [441, "classes"], [442, "classes"], [443, "classes"], [444, "classes"], [445, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [450, "classes"], [451, "classes"], [452, "classes"], [453, "classes"], [454, "classes"], [455, "classes"], [456, "classes"], [457, "classes"], [458, "classes"], [459, "classes"], [460, "classes"], [462, "classes"], [463, "classes"], [464, "classes"], [465, "classes"], [466, "classes"], [470, "classes"], [471, "classes"], [472, "classes"], [474, "classes"], [475, "classes"], [476, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [483, "classes"], [484, "classes"], [486, "classes"], [488, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [497, "classes"], [498, "classes"]], "sparknlp.annotation_audio": [[252, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[253, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[254, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[255, "module-sparknlp.annotator.audio"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[256, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[257, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[258, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[259, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[260, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[261, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[262, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[263, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[264, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[265, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[266, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[267, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[268, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[269, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[270, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[271, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[272, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[273, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[274, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[275, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[276, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[277, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[278, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[279, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[280, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[281, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[282, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[283, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[284, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl": [[285, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[286, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[287, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[288, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[289, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[290, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[291, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[292, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[293, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[294, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[295, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[296, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[297, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[298, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[299, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[300, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[301, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[302, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[303, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[304, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[305, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[306, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners.cleaner": [[307, "module-sparknlp.annotator.cleaners.cleaner"]], "sparknlp.annotator.cleaners.extractor": [[308, "module-sparknlp.annotator.cleaners.extractor"]], "sparknlp.annotator.cleaners": [[309, "module-sparknlp.annotator.cleaners"]], "sparknlp.annotator.coref": [[310, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[311, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.blip_for_question_answering": [[312, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[313, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[314, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv.florence2_transformer": [[315, "module-sparknlp.annotator.cv.florence2_transformer"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[316, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "sparknlp.annotator.cv": [[317, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[318, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "sparknlp.annotator.cv.janus_for_multimodal": [[319, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "sparknlp.annotator.cv.llava_for_multimodal": [[320, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[321, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[322, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[323, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[324, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "sparknlp.annotator.cv.smolvlm_transformer": [[325, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "sparknlp.annotator.cv.swin_for_image_classification": [[326, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[327, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[328, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[329, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[330, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[331, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[332, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[333, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[334, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[335, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[336, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[337, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[338, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[339, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[340, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings": [[341, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[342, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[343, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[344, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[345, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[346, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[347, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[348, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[349, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[350, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[351, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[352, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[353, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[354, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[355, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[356, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[357, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[358, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings": [[359, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[360, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[361, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[362, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[363, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[364, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[365, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[366, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[367, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[368, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[369, "module-sparknlp.annotator"]], "Package Contents": [[369, "package-contents"], [469, "package-contents"]], "sparknlp.annotator.keyword_extraction": [[370, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[371, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[372, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[373, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[374, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[375, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[376, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[377, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[378, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[379, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[380, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[381, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[382, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[383, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[384, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[385, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[386, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[387, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[388, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[389, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[390, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[391, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[392, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[393, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[394, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[395, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[396, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[397, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[398, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[399, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[400, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[401, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[402, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[403, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[404, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[405, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "sparknlp.annotator.seq2seq.bart_transformer": [[406, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[407, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[408, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[409, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[410, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[411, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[412, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[413, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer": [[414, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[415, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[416, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[417, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[418, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[419, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[420, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[421, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[422, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[423, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[424, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[425, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[426, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[427, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[428, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[429, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[430, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[431, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[432, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[433, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[434, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[435, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[436, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[437, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[438, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[439, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[440, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[441, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[442, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[443, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[444, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[445, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[446, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[447, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[448, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[449, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[450, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[451, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler": [[452, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline": [[453, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[454, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[455, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[456, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[457, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[458, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[459, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[460, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[461, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[462, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[463, "module-sparknlp.common.properties"]], "sparknlp.common.read_as": [[464, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[465, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[466, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[467, "module-sparknlp.common.utils"]], "Functions": [[467, "functions"], [468, "functions"], [469, "functions"], [485, "functions"], [498, "functions"]], "sparknlp.functions": [[468, "module-sparknlp.functions"]], "Attributes": [[469, "attributes"], [476, "attributes"]], "sparknlp.internal.annotator_java_ml": [[470, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[471, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[472, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[473, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[474, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[475, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[476, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[477, "module-sparknlp.logging"]], "sparknlp.partition": [[478, "module-sparknlp.partition"]], "sparknlp.partition.partition": [[479, "module-sparknlp.partition.partition"]], "sparknlp.partition.partition_properties": [[480, "module-sparknlp.partition.partition_properties"]], "sparknlp.partition.partition_transformer": [[481, "module-sparknlp.partition.partition_transformer"]], "sparknlp.pretrained": [[482, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[483, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[484, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[485, "module-sparknlp.pretrained.utils"]], "sparknlp.reader.enums": [[486, "module-sparknlp.reader.enums"]], "sparknlp.reader": [[487, "module-sparknlp.reader"]], "sparknlp.reader.pdf_to_text": [[488, "module-sparknlp.reader.pdf_to_text"]], "sparknlp.reader.sparknlp_reader": [[489, "module-sparknlp.reader.sparknlp_reader"]], "sparknlp.training.conll": [[490, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[491, "module-sparknlp.training.conllu"]], "sparknlp.training": [[492, "module-sparknlp.training"]], "sparknlp.training.pos": [[493, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[494, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[495, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[496, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[497, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[498, "module-sparknlp.util"]], "API Reference": [[499, "api-reference"]], "Modules": [[499, "modules"]], "Comet - A meta machine learning platform": [[500, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[500, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[500, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[500, "logging-evaluation-metrics"]], "Logging Visualizations": [[500, "logging-visualizations"]], "Running An Offline Experiment": [[500, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[501, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[502, "third-party-projects"]], "Logging": [[502, "logging"]], "Annotation": [[503, "annotation"]], "Annotators": [[504, "annotators"]], "Annotator Approaches": [[504, "annotator-approaches"]], "Annotator Models": [[504, "annotator-models"]], "Note": [[504, "note"]], "Pretrained Models": [[504, "pretrained-models"]], "Common Functions": [[504, "common-functions"]], "Available Annotators": [[504, "available-annotators"]], "Setting up your own pipeline": [[505, "setting-up-your-own-pipeline"]], "Annotator types": [[505, "annotator-types"]], "Necessary imports": [[505, "necessary-imports"]], "Constructing the Pipeline": [[505, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[505, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[505, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[505, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[505, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[506, "helper-functions"]], "User Guide": [[507, "user-guide"]], "Light Pipelines": [[508, "light-pipelines"]], "Converting PipelineModels": [[508, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[508, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[509, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[509, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[509, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[509, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[509, "available-pipelines"]], "Loading datasets for training": [[510, "loading-datasets-for-training"]], "POS Dataset": [[510, "pos-dataset"]], "CoNLL Dataset": [[510, "conll-dataset"]], "CoNLLU Dataset": [[510, "conllu-dataset"]], "Spell Checkers Dataset": [[510, "spell-checkers-dataset"]], "PubTator Dataset": [[510, "pubtator-dataset"]]}, "indexentries": {"module": [[1, "module-sparknlp"], [2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.hubert_for_ctc"], [8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [9, "module-sparknlp.annotator.audio.whisper_for_ctc"], [10, "module-sparknlp.annotator.chunk2_doc"], [11, "module-sparknlp.annotator.chunker"], [12, "module-sparknlp.annotator.classifier_dl"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [28, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [59, "module-sparknlp.annotator.cleaners"], [60, "module-sparknlp.annotator.cleaners.cleaner"], [61, "module-sparknlp.annotator.cleaners.extractor"], [62, "module-sparknlp.annotator.coref"], [63, "module-sparknlp.annotator.coref.spanbert_coref"], [64, "module-sparknlp.annotator.cv"], [65, "module-sparknlp.annotator.cv.blip_for_question_answering"], [66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [67, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [68, "module-sparknlp.annotator.cv.florence2_transformer"], [69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [70, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [71, "module-sparknlp.annotator.cv.janus_for_multimodal"], [72, "module-sparknlp.annotator.cv.llava_for_multimodal"], [73, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [76, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [77, "module-sparknlp.annotator.cv.smolvlm_transformer"], [78, "module-sparknlp.annotator.cv.swin_for_image_classification"], [79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [80, "module-sparknlp.annotator.cv.vit_for_image_classification"], [81, "module-sparknlp.annotator.date2_chunk"], [82, "module-sparknlp.annotator.dependency"], [83, "module-sparknlp.annotator.dependency.dependency_parser"], [84, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [85, "module-sparknlp.annotator.document_character_text_splitter"], [86, "module-sparknlp.annotator.document_normalizer"], [87, "module-sparknlp.annotator.document_token_splitter"], [89, "module-sparknlp.annotator.embeddings"], [90, "module-sparknlp.annotator.embeddings.albert_embeddings"], [91, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [92, "module-sparknlp.annotator.embeddings.bert_embeddings"], [93, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [94, "module-sparknlp.annotator.embeddings.bge_embeddings"], [95, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [96, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [97, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [98, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [99, "module-sparknlp.annotator.embeddings.doc2vec"], [100, "module-sparknlp.annotator.embeddings.e5_embeddings"], [101, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [102, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [103, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [104, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [105, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [106, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [107, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [108, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [109, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [110, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [111, "module-sparknlp.annotator.embeddings.uae_embeddings"], [112, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [113, "module-sparknlp.annotator.embeddings.word2vec"], [114, "module-sparknlp.annotator.embeddings.word_embeddings"], [115, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [116, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [117, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [118, "module-sparknlp.annotator.er"], [119, "module-sparknlp.annotator.er.entity_ruler"], [120, "module-sparknlp.annotator.graph_extraction"], [121, "module-sparknlp.annotator.keyword_extraction"], [122, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [123, "module-sparknlp.annotator.ld_dl"], [124, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [125, "module-sparknlp.annotator.lemmatizer"], [126, "module-sparknlp.annotator.matcher"], [127, "module-sparknlp.annotator.matcher.big_text_matcher"], [128, "module-sparknlp.annotator.matcher.date_matcher"], [129, "module-sparknlp.annotator.matcher.multi_date_matcher"], [130, "module-sparknlp.annotator.matcher.regex_matcher"], [131, "module-sparknlp.annotator.matcher.text_matcher"], [132, "module-sparknlp.annotator.n_gram_generator"], [133, "module-sparknlp.annotator.ner"], [134, "module-sparknlp.annotator.ner.ner_approach"], [135, "module-sparknlp.annotator.ner.ner_converter"], [136, "module-sparknlp.annotator.ner.ner_crf"], [137, "module-sparknlp.annotator.ner.ner_dl"], [138, "module-sparknlp.annotator.ner.ner_overwriter"], [139, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [140, "module-sparknlp.annotator.normalizer"], [141, "module-sparknlp.annotator.openai"], [142, "module-sparknlp.annotator.openai.openai_completion"], [143, "module-sparknlp.annotator.openai.openai_embeddings"], [144, "module-sparknlp.annotator.param"], [145, "module-sparknlp.annotator.param.classifier_encoder"], [146, "module-sparknlp.annotator.param.evaluation_dl_params"], [147, "module-sparknlp.annotator.pos"], [148, "module-sparknlp.annotator.pos.perceptron"], [149, "module-sparknlp.annotator.sentence"], [150, "module-sparknlp.annotator.sentence.sentence_detector"], [151, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [152, "module-sparknlp.annotator.sentiment"], [153, "module-sparknlp.annotator.sentiment.sentiment_detector"], [154, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [155, "module-sparknlp.annotator.seq2seq"], [156, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [157, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [158, "module-sparknlp.annotator.seq2seq.bart_transformer"], [159, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [160, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [161, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [162, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [163, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [164, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [165, "module-sparknlp.annotator.seq2seq.marian_transformer"], [166, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [167, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [168, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [169, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [170, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [171, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [172, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [173, "module-sparknlp.annotator.seq2seq.t5_transformer"], [174, "module-sparknlp.annotator.similarity"], [175, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [176, "module-sparknlp.annotator.spell_check"], [177, "module-sparknlp.annotator.spell_check.context_spell_checker"], [178, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [179, "module-sparknlp.annotator.spell_check.symmetric_delete"], [180, "module-sparknlp.annotator.stemmer"], [181, "module-sparknlp.annotator.stop_words_cleaner"], [182, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [183, "module-sparknlp.annotator.token"], [184, "module-sparknlp.annotator.token.chunk_tokenizer"], [185, "module-sparknlp.annotator.token.recursive_tokenizer"], [186, "module-sparknlp.annotator.token.regex_tokenizer"], [187, "module-sparknlp.annotator.token.tokenizer"], [188, "module-sparknlp.annotator.token2_chunk"], [189, "module-sparknlp.annotator.ws"], [190, "module-sparknlp.annotator.ws.word_segmenter"], [191, "module-sparknlp.base"], [192, "module-sparknlp.base.audio_assembler"], [193, "module-sparknlp.base.doc2_chunk"], [194, "module-sparknlp.base.document_assembler"], [195, "module-sparknlp.base.embeddings_finisher"], [196, "module-sparknlp.base.finisher"], [197, "module-sparknlp.base.graph_finisher"], [198, "module-sparknlp.base.has_recursive_fit"], [199, "module-sparknlp.base.has_recursive_transform"], [200, "module-sparknlp.base.image_assembler"], [201, "module-sparknlp.base.light_pipeline"], [202, "module-sparknlp.base.multi_document_assembler"], [203, "module-sparknlp.base.prompt_assembler"], [204, "module-sparknlp.base.recursive_pipeline"], [205, "module-sparknlp.base.table_assembler"], [206, "module-sparknlp.base.token_assembler"], [207, "module-sparknlp.common"], [208, "module-sparknlp.common.annotator_approach"], [209, "module-sparknlp.common.annotator_model"], [210, "module-sparknlp.common.annotator_properties"], [211, "module-sparknlp.common.annotator_type"], [212, "module-sparknlp.common.coverage_result"], [213, "module-sparknlp.common.match_strategy"], [214, "module-sparknlp.common.properties"], [215, "module-sparknlp.common.read_as"], [216, "module-sparknlp.common.recursive_annotator_approach"], [217, "module-sparknlp.common.storage"], [218, "module-sparknlp.common.utils"], [219, "module-sparknlp.functions"], [220, "module-sparknlp.internal"], [221, "module-sparknlp.internal.annotator_java_ml"], [222, "module-sparknlp.internal.annotator_transformer"], [223, "module-sparknlp.internal.extended_java_wrapper"], [224, "module-sparknlp.internal.params_getters_setters"], [225, "module-sparknlp.internal.recursive"], [226, "module-sparknlp.logging"], [227, "module-sparknlp.logging.comet"], [228, "module-sparknlp.partition"], [229, "module-sparknlp.partition.partition"], [230, "module-sparknlp.partition.partition_properties"], [231, "module-sparknlp.partition.partition_transformer"], [232, "module-sparknlp.pretrained"], [233, "module-sparknlp.pretrained.pretrained_pipeline"], [234, "module-sparknlp.pretrained.resource_downloader"], [235, "module-sparknlp.pretrained.utils"], [236, "module-sparknlp.reader"], [237, "module-sparknlp.reader.enums"], [238, "module-sparknlp.reader.pdf_to_text"], [239, "module-sparknlp.reader.sparknlp_reader"], [240, "module-sparknlp.training"], [241, "module-sparknlp.training.conll"], [242, "module-sparknlp.training.conllu"], [243, "module-sparknlp.training.pos"], [244, "module-sparknlp.training.pub_tator"], [245, "module-sparknlp.training.spacy_to_annotation"], [247, "module-sparknlp.upload_to_hub"], [248, "module-sparknlp.util"], [251, "module-sparknlp.annotation"], [252, "module-sparknlp.annotation_audio"], [253, "module-sparknlp.annotation_image"], [254, "module-sparknlp.annotator.audio.hubert_for_ctc"], [255, "module-sparknlp.annotator.audio"], [256, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [257, "module-sparknlp.annotator.audio.whisper_for_ctc"], [258, "module-sparknlp.annotator.chunk2_doc"], [259, "module-sparknlp.annotator.chunker"], [260, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [261, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [262, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [263, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [264, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [265, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [266, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [267, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [268, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [269, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [270, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [271, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [272, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [273, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [274, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [275, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [276, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [277, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [278, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [279, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [280, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [281, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [282, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [283, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [284, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [285, "module-sparknlp.annotator.classifier_dl"], [286, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [287, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [288, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [289, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [290, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [291, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [292, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [293, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [294, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [295, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [296, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [297, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [298, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [299, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [300, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [301, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [302, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [303, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [304, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [305, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [306, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [307, "module-sparknlp.annotator.cleaners.cleaner"], [308, "module-sparknlp.annotator.cleaners.extractor"], [309, "module-sparknlp.annotator.cleaners"], [310, "module-sparknlp.annotator.coref"], [311, "module-sparknlp.annotator.coref.spanbert_coref"], [312, "module-sparknlp.annotator.cv.blip_for_question_answering"], [313, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [314, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [315, "module-sparknlp.annotator.cv.florence2_transformer"], [316, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [317, "module-sparknlp.annotator.cv"], [318, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [319, "module-sparknlp.annotator.cv.janus_for_multimodal"], [320, "module-sparknlp.annotator.cv.llava_for_multimodal"], [321, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [322, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [323, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [324, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [325, "module-sparknlp.annotator.cv.smolvlm_transformer"], [326, "module-sparknlp.annotator.cv.swin_for_image_classification"], [327, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [328, "module-sparknlp.annotator.cv.vit_for_image_classification"], [329, "module-sparknlp.annotator.date2_chunk"], [330, "module-sparknlp.annotator.dependency.dependency_parser"], [331, "module-sparknlp.annotator.dependency"], [332, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [333, "module-sparknlp.annotator.document_character_text_splitter"], [334, "module-sparknlp.annotator.document_normalizer"], [335, "module-sparknlp.annotator.document_token_splitter"], [336, "module-sparknlp.annotator.document_token_splitter_test"], [337, "module-sparknlp.annotator.embeddings.albert_embeddings"], [338, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [339, "module-sparknlp.annotator.embeddings.bert_embeddings"], [340, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [341, "module-sparknlp.annotator.embeddings.bge_embeddings"], [342, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [343, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [344, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [345, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [346, "module-sparknlp.annotator.embeddings.doc2vec"], [347, "module-sparknlp.annotator.embeddings.e5_embeddings"], [348, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [349, "module-sparknlp.annotator.embeddings"], [350, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [351, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [352, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [353, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [354, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [355, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [356, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [357, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [358, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [359, "module-sparknlp.annotator.embeddings.uae_embeddings"], [360, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [361, "module-sparknlp.annotator.embeddings.word2vec"], [362, "module-sparknlp.annotator.embeddings.word_embeddings"], [363, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [364, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [365, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [366, "module-sparknlp.annotator.er.entity_ruler"], [367, "module-sparknlp.annotator.er"], [368, "module-sparknlp.annotator.graph_extraction"], [369, "module-sparknlp.annotator"], [370, "module-sparknlp.annotator.keyword_extraction"], [371, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [372, "module-sparknlp.annotator.ld_dl"], [373, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [374, "module-sparknlp.annotator.lemmatizer"], [375, "module-sparknlp.annotator.matcher.big_text_matcher"], [376, "module-sparknlp.annotator.matcher.date_matcher"], [377, "module-sparknlp.annotator.matcher"], [378, "module-sparknlp.annotator.matcher.multi_date_matcher"], [379, "module-sparknlp.annotator.matcher.regex_matcher"], [380, "module-sparknlp.annotator.matcher.text_matcher"], [381, "module-sparknlp.annotator.n_gram_generator"], [382, "module-sparknlp.annotator.ner"], [383, "module-sparknlp.annotator.ner.ner_approach"], [384, "module-sparknlp.annotator.ner.ner_converter"], [385, "module-sparknlp.annotator.ner.ner_crf"], [386, "module-sparknlp.annotator.ner.ner_dl"], [387, "module-sparknlp.annotator.ner.ner_overwriter"], [388, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [389, "module-sparknlp.annotator.normalizer"], [390, "module-sparknlp.annotator.openai"], [391, "module-sparknlp.annotator.openai.openai_completion"], [392, "module-sparknlp.annotator.openai.openai_embeddings"], [393, "module-sparknlp.annotator.param.classifier_encoder"], [394, "module-sparknlp.annotator.param.evaluation_dl_params"], [395, "module-sparknlp.annotator.param"], [396, "module-sparknlp.annotator.pos"], [397, "module-sparknlp.annotator.pos.perceptron"], [398, "module-sparknlp.annotator.sentence"], [399, "module-sparknlp.annotator.sentence.sentence_detector"], [400, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [401, "module-sparknlp.annotator.sentiment"], [402, "module-sparknlp.annotator.sentiment.sentiment_detector"], [403, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [404, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [405, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [406, "module-sparknlp.annotator.seq2seq.bart_transformer"], [407, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [408, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [409, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [410, "module-sparknlp.annotator.seq2seq"], [411, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [412, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [413, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [414, "module-sparknlp.annotator.seq2seq.marian_transformer"], [415, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [416, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [417, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [418, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [419, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [420, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [421, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [422, "module-sparknlp.annotator.seq2seq.t5_transformer"], [423, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [424, "module-sparknlp.annotator.similarity"], [425, "module-sparknlp.annotator.spell_check.context_spell_checker"], [426, "module-sparknlp.annotator.spell_check"], [427, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [428, "module-sparknlp.annotator.spell_check.symmetric_delete"], [429, "module-sparknlp.annotator.stemmer"], [430, "module-sparknlp.annotator.stop_words_cleaner"], [431, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [432, "module-sparknlp.annotator.token.chunk_tokenizer"], [433, "module-sparknlp.annotator.token"], [434, "module-sparknlp.annotator.token.recursive_tokenizer"], [435, "module-sparknlp.annotator.token.regex_tokenizer"], [436, "module-sparknlp.annotator.token.tokenizer"], [437, "module-sparknlp.annotator.token2_chunk"], [438, "module-sparknlp.annotator.ws"], [439, "module-sparknlp.annotator.ws.word_segmenter"], [440, "module-sparknlp.base.audio_assembler"], [441, "module-sparknlp.base.doc2_chunk"], [442, "module-sparknlp.base.document_assembler"], [443, "module-sparknlp.base.embeddings_finisher"], [444, "module-sparknlp.base.finisher"], [445, "module-sparknlp.base.graph_finisher"], [446, "module-sparknlp.base.has_recursive_fit"], [447, "module-sparknlp.base.has_recursive_transform"], [448, "module-sparknlp.base.image_assembler"], [449, "module-sparknlp.base"], [450, "module-sparknlp.base.light_pipeline"], [451, "module-sparknlp.base.multi_document_assembler"], [452, "module-sparknlp.base.prompt_assembler"], [453, "module-sparknlp.base.recursive_pipeline"], [454, "module-sparknlp.base.table_assembler"], [455, "module-sparknlp.base.token_assembler"], [456, "module-sparknlp.common.annotator_approach"], [457, "module-sparknlp.common.annotator_model"], [458, "module-sparknlp.common.annotator_properties"], [459, "module-sparknlp.common.annotator_type"], [460, "module-sparknlp.common.coverage_result"], [461, "module-sparknlp.common"], [462, "module-sparknlp.common.match_strategy"], [463, "module-sparknlp.common.properties"], [464, "module-sparknlp.common.read_as"], [465, "module-sparknlp.common.recursive_annotator_approach"], [466, "module-sparknlp.common.storage"], [467, "module-sparknlp.common.utils"], [468, "module-sparknlp.functions"], [469, "module-sparknlp"], [470, "module-sparknlp.internal.annotator_java_ml"], [471, "module-sparknlp.internal.annotator_transformer"], [472, "module-sparknlp.internal.extended_java_wrapper"], [473, "module-sparknlp.internal"], [474, "module-sparknlp.internal.params_getters_setters"], [475, "module-sparknlp.internal.recursive"], [476, "module-sparknlp.logging.comet"], [477, "module-sparknlp.logging"], [478, "module-sparknlp.partition"], [479, "module-sparknlp.partition.partition"], [480, "module-sparknlp.partition.partition_properties"], [481, "module-sparknlp.partition.partition_transformer"], [482, "module-sparknlp.pretrained"], [483, "module-sparknlp.pretrained.pretrained_pipeline"], [484, "module-sparknlp.pretrained.resource_downloader"], [485, "module-sparknlp.pretrained.utils"], [486, "module-sparknlp.reader.enums"], [487, "module-sparknlp.reader"], [488, "module-sparknlp.reader.pdf_to_text"], [489, "module-sparknlp.reader.sparknlp_reader"], [490, "module-sparknlp.training.conll"], [491, "module-sparknlp.training.conllu"], [492, "module-sparknlp.training"], [493, "module-sparknlp.training.pos"], [494, "module-sparknlp.training.pub_tator"], [495, "module-sparknlp.training.spacy_to_annotation"], [496, "module-sparknlp.training.tfgraphs"], [497, "module-sparknlp.upload_to_hub"], [498, "module-sparknlp.util"]], "read() (in module sparknlp)": [[1, "sparknlp.read"], [469, "sparknlp.read"]], "sparknlp": [[1, "module-sparknlp"], [469, "module-sparknlp"]], "start() (in module sparknlp)": [[1, "sparknlp.start"], [469, "sparknlp.start"]], "version() (in module sparknlp)": [[1, "sparknlp.version"], [469, "sparknlp.version"]], "annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"], [251, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"], [251, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"], [251, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"], [251, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"], [251, "sparknlp.annotation.Annotation.fromRow"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"], [251, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"], [251, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"], [252, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"], [252, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"], [252, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"], [253, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"], [253, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"], [253, "module-sparknlp.annotation_image"]], "sparknlp.annotator": [[5, "module-sparknlp.annotator"], [369, "module-sparknlp.annotator"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"], [255, "module-sparknlp.annotator.audio"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"], [254, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "configprotobytes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.configProtoBytes"], [254, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.configProtoBytes"]], "inputannotatortypes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.inputAnnotatorTypes"], [254, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"], [254, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "name (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.name"], [254, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.name"]], "outputannotatortype (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.outputAnnotatorType"], [254, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.outputAnnotatorType"]], "pretrained() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"], [254, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"], [254, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"], [254, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"], [256, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "configprotobytes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.configProtoBytes"], [256, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.configProtoBytes"]], "inputannotatortypes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.inputAnnotatorTypes"], [256, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"], [256, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "name (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.name"], [256, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.name"]], "outputannotatortype (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.outputAnnotatorType"], [256, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.outputAnnotatorType"]], "pretrained() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"], [256, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"], [256, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [256, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "configprotobytes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.configProtoBytes"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.configProtoBytes"]], "getismultilingual() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "inputannotatortypes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.inputAnnotatorTypes"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.inputAnnotatorTypes"]], "ismultilingual (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.isMultilingual"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.isMultilingual"]], "language (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.language"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.language"]], "loadsavedmodel() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "name (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.name"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.name"]], "outputannotatortype (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.outputAnnotatorType"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.outputAnnotatorType"]], "pretrained() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"], [257, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"], [257, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc"], [258, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "inputannotatortypes (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.inputAnnotatorTypes"], [258, "sparknlp.annotator.chunk2_doc.Chunk2Doc.inputAnnotatorTypes"]], "name (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.name"], [258, "sparknlp.annotator.chunk2_doc.Chunk2Doc.name"]], "outputannotatortype (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.outputAnnotatorType"], [258, "sparknlp.annotator.chunk2_doc.Chunk2Doc.outputAnnotatorType"]], "setparams() (chunk2doc method)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.setParams"], [258, "sparknlp.annotator.chunk2_doc.Chunk2Doc.setParams"]], "sparknlp.annotator.chunk2_doc": [[10, "module-sparknlp.annotator.chunk2_doc"], [258, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[11, "sparknlp.annotator.chunker.Chunker"], [259, "sparknlp.annotator.chunker.Chunker"]], "inputannotatortypes (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.inputAnnotatorTypes"], [259, "sparknlp.annotator.chunker.Chunker.inputAnnotatorTypes"]], "name (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.name"], [259, "sparknlp.annotator.chunker.Chunker.name"]], "outputannotatortype (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.outputAnnotatorType"], [259, "sparknlp.annotator.chunker.Chunker.outputAnnotatorType"]], "regexparsers (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.regexParsers"], [259, "sparknlp.annotator.chunker.Chunker.regexParsers"]], "setregexparsers() (chunker method)": [[11, "sparknlp.annotator.chunker.Chunker.setRegexParsers"], [259, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[11, "module-sparknlp.annotator.chunker"], [259, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl": [[12, "module-sparknlp.annotator.classifier_dl"], [285, "module-sparknlp.annotator.classifier_dl"]], "albertformultiplechoice (class in sparknlp.annotator.classifier_dl.albert_for_multiple_choice)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice"], [260, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice"]], "choicesdelimiter (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.choicesDelimiter"], [260, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.inputAnnotatorTypes"], [260, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.loadSavedModel"], [260, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.loadSavedModel"]], "name (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.name"], [260, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.name"]], "outputannotatortype (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.outputAnnotatorType"], [260, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.outputAnnotatorType"]], "pretrained() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.pretrained"], [260, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (albertformultiplechoice method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.setChoicesDelimiter"], [260, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [260, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"], [261, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "coalescesentences (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.coalesceSentences"], [261, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.coalesceSentences"]], "configprotobytes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.configProtoBytes"], [261, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.inputAnnotatorTypes"], [261, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"], [261, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "name (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.name"], [261, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.name"]], "outputannotatortype (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.outputAnnotatorType"], [261, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"], [261, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"], [261, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [261, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"], [262, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "coalescesentences (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.coalesceSentences"], [262, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.coalesceSentences"]], "configprotobytes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.configProtoBytes"], [262, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.configProtoBytes"]], "getclasses() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"], [262, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "inputannotatortypes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.inputAnnotatorTypes"], [262, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"], [262, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "name (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.name"], [262, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.name"]], "outputannotatortype (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.outputAnnotatorType"], [262, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.outputAnnotatorType"]], "pretrained() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"], [262, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"], [262, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"], [262, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [262, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"], [263, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "configprotobytes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.configProtoBytes"], [263, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.configProtoBytes"]], "getclasses() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"], [263, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "inputannotatortypes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.inputAnnotatorTypes"], [263, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"], [263, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "name (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.name"], [263, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.name"]], "outputannotatortype (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.outputAnnotatorType"], [263, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.outputAnnotatorType"]], "pretrained() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"], [263, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"], [263, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [263, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "albertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"], [264, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"]], "coalescesentences (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.coalesceSentences"], [264, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.coalesceSentences"]], "configprotobytes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.configProtoBytes"], [264, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.configProtoBytes"]], "getclasses() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"], [264, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"]], "inputannotatortypes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.inputAnnotatorTypes"], [264, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"], [264, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"]], "name (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.name"], [264, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.name"]], "outputannotatortype (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.outputAnnotatorType"], [264, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"], [264, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"]], "setcoalescesentences() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"], [264, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"], [264, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [264, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "coalescesentences (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.coalesceSentences"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.coalesceSentences"]], "configprotobytes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.configProtoBytes"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.configProtoBytes"]], "getclasses() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "inputannotatortypes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.inputAnnotatorTypes"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "maxsentencelength (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.maxSentenceLength"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.maxSentenceLength"]], "name (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.name"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.name"]], "outputannotatortype (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.outputAnnotatorType"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"], [265, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [265, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertformultiplechoice (class in sparknlp.annotator.classifier_dl.bert_for_multiple_choice)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"], [266, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"]], "choicesdelimiter (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.choicesDelimiter"], [266, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.inputAnnotatorTypes"], [266, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"], [266, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"]], "name (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.name"], [266, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.name"]], "outputannotatortype (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.outputAnnotatorType"], [266, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.outputAnnotatorType"]], "pretrained() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"], [266, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (bertformultiplechoice method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"], [266, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [266, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"], [267, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "coalescesentences (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.coalesceSentences"], [267, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.coalesceSentences"]], "configprotobytes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.configProtoBytes"], [267, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.inputAnnotatorTypes"], [267, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"], [267, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "name (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.name"], [267, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.name"]], "outputannotatortype (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.outputAnnotatorType"], [267, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"], [267, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"], [267, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [267, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"], [268, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "coalescesentences (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.coalesceSentences"], [268, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.coalesceSentences"]], "configprotobytes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.configProtoBytes"], [268, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.configProtoBytes"]], "getclasses() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"], [268, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "inputannotatortypes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.inputAnnotatorTypes"], [268, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"], [268, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "name (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.name"], [268, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.name"]], "outputannotatortype (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.outputAnnotatorType"], [268, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.outputAnnotatorType"]], "pretrained() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"], [268, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"], [268, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"], [268, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [268, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"], [269, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "configprotobytes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.configProtoBytes"], [269, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.configProtoBytes"]], "getclasses() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"], [269, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "inputannotatortypes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.inputAnnotatorTypes"], [269, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"], [269, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "name (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.name"], [269, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.name"]], "outputannotatortype (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.outputAnnotatorType"], [269, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.outputAnnotatorType"]], "pretrained() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"], [269, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"], [269, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [269, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"], [270, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "coalescesentences (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.coalesceSentences"], [270, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.coalesceSentences"]], "configprotobytes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.configProtoBytes"], [270, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.configProtoBytes"]], "getclasses() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"], [270, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "inputannotatortypes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.inputAnnotatorTypes"], [270, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"], [270, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "name (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.name"], [270, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.name"]], "outputannotatortype (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.outputAnnotatorType"], [270, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"], [270, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"], [270, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"], [270, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [270, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"], [271, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "coalescesentences (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.coalesceSentences"], [271, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.configProtoBytes"], [271, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.inputAnnotatorTypes"], [271, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"], [271, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "name (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.name"], [271, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.name"]], "outputannotatortype (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.outputAnnotatorType"], [271, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"], [271, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"], [271, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [271, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"], [272, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "coalescesentences (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.coalesceSentences"], [272, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.coalesceSentences"]], "configprotobytes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.configProtoBytes"], [272, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.configProtoBytes"]], "getclasses() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"], [272, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "inputannotatortypes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.inputAnnotatorTypes"], [272, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"], [272, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "name (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.name"], [272, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.name"]], "outputannotatortype (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.outputAnnotatorType"], [272, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"], [272, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"], [272, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"], [272, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [272, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"], [273, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "configprotobytes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.configProtoBytes"], [273, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.configProtoBytes"]], "getclasses() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"], [273, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "inputannotatortypes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.inputAnnotatorTypes"], [273, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"], [273, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "name (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.name"], [273, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.name"]], "outputannotatortype (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.outputAnnotatorType"], [273, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.outputAnnotatorType"]], "pretrained() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"], [273, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"], [273, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [273, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "camembertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"], [274, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"]], "coalescesentences (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.coalesceSentences"], [274, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.configProtoBytes"], [274, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.configProtoBytes"]], "getclasses() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"], [274, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"]], "inputannotatortypes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.inputAnnotatorTypes"], [274, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"], [274, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"]], "name (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.name"], [274, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.name"]], "outputannotatortype (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.outputAnnotatorType"], [274, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"], [274, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"], [274, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"], [274, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [274, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "classes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.classes"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.classes"]], "configprotobytes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.configProtoBytes"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.configProtoBytes"]], "dropout (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.dropout"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.dropout"]], "inputannotatortypes (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.inputAnnotatorTypes"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.inputAnnotatorTypes"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.inputAnnotatorTypes"]], "name (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.name"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.name"]], "outputannotatortype (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.outputAnnotatorType"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.outputAnnotatorType"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.outputAnnotatorType"]], "pretrained() (classifierdlmodel static method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"], [275, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [275, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"], [276, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "coalescesentences (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.coalesceSentences"], [276, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.configProtoBytes"], [276, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.inputAnnotatorTypes"], [276, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"], [276, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "name (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.name"], [276, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.name"]], "outputannotatortype (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.outputAnnotatorType"], [276, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"], [276, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"], [276, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [276, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"], [277, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "coalescesentences (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.coalesceSentences"], [277, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.configProtoBytes"], [277, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.configProtoBytes"]], "getclasses() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"], [277, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "inputannotatortypes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.inputAnnotatorTypes"], [277, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"], [277, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "name (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.name"], [277, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.name"]], "outputannotatortype (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.outputAnnotatorType"], [277, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"], [277, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"], [277, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"], [277, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [277, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"], [278, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "configprotobytes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.configProtoBytes"], [278, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.configProtoBytes"]], "getclasses() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"], [278, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "inputannotatortypes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.inputAnnotatorTypes"], [278, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"], [278, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "name (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.name"], [278, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.name"]], "outputannotatortype (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.outputAnnotatorType"], [278, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"], [278, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"], [278, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [278, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"], [279, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "coalescesentences (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.coalesceSentences"], [279, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.configProtoBytes"], [279, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"], [279, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.inputAnnotatorTypes"], [279, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"], [279, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "name (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.name"], [279, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.name"]], "outputannotatortype (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.outputAnnotatorType"], [279, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"], [279, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"], [279, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"], [279, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [279, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"], [280, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "coalescesentences (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.coalesceSentences"], [280, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.configProtoBytes"], [280, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.inputAnnotatorTypes"], [280, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"], [280, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "name (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.name"], [280, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.name"]], "outputannotatortype (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.outputAnnotatorType"], [280, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"], [280, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"], [280, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [280, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "coalescesentences (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.coalesceSentences"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.configProtoBytes"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.inputAnnotatorTypes"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "name (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.name"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.name"]], "outputannotatortype (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.outputAnnotatorType"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [281, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "configprotobytes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.configProtoBytes"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.configProtoBytes"]], "getclasses() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "inputannotatortypes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.inputAnnotatorTypes"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "name (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.name"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.name"]], "outputannotatortype (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.outputAnnotatorType"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.outputAnnotatorType"]], "pretrained() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [282, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "coalescesentences (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.coalesceSentences"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.configProtoBytes"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.configProtoBytes"]], "getclasses() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "inputannotatortypes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.inputAnnotatorTypes"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "name (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.name"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.name"]], "outputannotatortype (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.outputAnnotatorType"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [283, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "distilbertformultiplechoice (class in sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice"], [284, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice"]], "choicesdelimiter (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.choicesDelimiter"], [284, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.inputAnnotatorTypes"], [284, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.loadSavedModel"], [284, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.loadSavedModel"]], "name (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.name"], [284, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.name"]], "outputannotatortype (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.outputAnnotatorType"], [284, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.outputAnnotatorType"]], "pretrained() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.pretrained"], [284, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (distilbertformultiplechoice method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.setChoicesDelimiter"], [284, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [284, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"], [286, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "coalescesentences (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.coalesceSentences"], [286, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.coalesceSentences"]], "configprotobytes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.configProtoBytes"], [286, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.inputAnnotatorTypes"], [286, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"], [286, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "name (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.name"], [286, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.name"]], "outputannotatortype (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.outputAnnotatorType"], [286, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.outputAnnotatorType"]], "pretrained() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"], [286, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"], [286, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [286, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"], [287, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "coalescesentences (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.coalesceSentences"], [287, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.coalesceSentences"]], "configprotobytes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.configProtoBytes"], [287, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.configProtoBytes"]], "getclasses() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"], [287, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "inputannotatortypes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.inputAnnotatorTypes"], [287, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"], [287, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "name (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.name"], [287, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.name"]], "outputannotatortype (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.outputAnnotatorType"], [287, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.outputAnnotatorType"]], "pretrained() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"], [287, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"], [287, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"], [287, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [287, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"], [288, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "configprotobytes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.configProtoBytes"], [288, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.configProtoBytes"]], "getclasses() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"], [288, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "inputannotatortypes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.inputAnnotatorTypes"], [288, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"], [288, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "name (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.name"], [288, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.name"]], "outputannotatortype (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.outputAnnotatorType"], [288, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.outputAnnotatorType"]], "pretrained() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"], [288, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"], [288, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [288, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"], [289, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "inputannotatortypes (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.inputAnnotatorTypes"], [289, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"], [289, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "name (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.name"], [289, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.name"]], "outputannotatortype (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.outputAnnotatorType"], [289, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.outputAnnotatorType"]], "pretrained() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"], [289, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [289, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "coalescesentences (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.coalesceSentences"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.coalesceSentences"]], "getclasses() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "inputannotatortypes (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.inputAnnotatorTypes"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "name (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.name"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.name"]], "outputannotatortype (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.outputAnnotatorType"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.outputAnnotatorType"]], "pretrained() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [290, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "mpnetfortokenclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"]], "configprotobytes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.configProtoBytes"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.configProtoBytes"]], "getclasses() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"]], "inputannotatortypes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.inputAnnotatorTypes"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"]], "name (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.name"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.name"]], "outputannotatortype (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.outputAnnotatorType"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.outputAnnotatorType"]], "pretrained() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"]], "setconfigprotobytes() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [291, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "classes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.classes"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.classes"]], "configprotobytes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.configProtoBytes"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.configProtoBytes"]], "inputannotatortypes (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.inputAnnotatorTypes"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.inputAnnotatorTypes"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.inputAnnotatorTypes"]], "name (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.name"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.name"]], "outputannotatortype (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.outputAnnotatorType"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.outputAnnotatorType"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.outputAnnotatorType"]], "pretrained() (multiclassifierdlmodel static method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setshuffleperepoch() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setShufflePerEpoch"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setShufflePerEpoch"]], "setthreshold() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "shuffleperepoch (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.shufflePerEpoch"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.shufflePerEpoch"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [292, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "threshold (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.threshold"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.threshold"]], "threshold (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.threshold"], [292, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.threshold"]], "robertaformultiplechoice (class in sparknlp.annotator.classifier_dl.roberta_for_multiple_choice)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice"], [293, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice"]], "choicesdelimiter (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.choicesDelimiter"], [293, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.inputAnnotatorTypes"], [293, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.loadSavedModel"], [293, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.loadSavedModel"]], "name (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.name"], [293, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.name"]], "outputannotatortype (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.outputAnnotatorType"], [293, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.pretrained"], [293, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.pretrained"]], "setchoicesdelimiter() (robertaformultiplechoice method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.setChoicesDelimiter"], [293, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [293, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"], [294, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "coalescesentences (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.coalesceSentences"], [294, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.configProtoBytes"], [294, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.inputAnnotatorTypes"], [294, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"], [294, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "name (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.name"], [294, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.name"]], "outputannotatortype (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.outputAnnotatorType"], [294, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"], [294, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"], [294, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [294, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"], [295, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "coalescesentences (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.coalesceSentences"], [295, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.configProtoBytes"], [295, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"], [295, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.inputAnnotatorTypes"], [295, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"], [295, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "name (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.name"], [295, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.name"]], "outputannotatortype (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.outputAnnotatorType"], [295, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"], [295, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"], [295, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"], [295, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [295, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"], [296, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "configprotobytes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.configProtoBytes"], [296, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.configProtoBytes"]], "getclasses() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"], [296, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "inputannotatortypes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.inputAnnotatorTypes"], [296, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"], [296, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "maxsentencelength (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.maxSentenceLength"], [296, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.maxSentenceLength"]], "name (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.name"], [296, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.name"]], "outputannotatortype (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.outputAnnotatorType"], [296, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"], [296, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"], [296, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"], [296, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [296, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "coalescesentences (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.coalesceSentences"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.configProtoBytes"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.inputAnnotatorTypes"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.maxSentenceLength"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.maxSentenceLength"]], "name (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.name"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.name"]], "outputannotatortype (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.outputAnnotatorType"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"], [297, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [297, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "classes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.classes"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.classes"]], "configprotobytes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.configProtoBytes"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.configProtoBytes"]], "dropout (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.dropout"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.dropout"]], "inputannotatortypes (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.inputAnnotatorTypes"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.inputAnnotatorTypes"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.inputAnnotatorTypes"]], "name (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.name"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.name"]], "outputannotatortype (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.outputAnnotatorType"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.outputAnnotatorType"]], "outputannotatortype (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.outputAnnotatorType"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.outputAnnotatorType"]], "pretrained() (sentimentdlmodel static method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [298, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "threshold (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.threshold"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.threshold"]], "threshold (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.threshold"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.threshold"]], "thresholdlabel (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.thresholdLabel"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.thresholdLabel"]], "thresholdlabel (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.thresholdLabel"], [298, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.thresholdLabel"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"], [299, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "inputannotatortypes (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.inputAnnotatorTypes"], [299, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"], [299, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "name (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.name"], [299, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.name"]], "pretrained() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"], [299, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [299, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaformultiplechoice (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice"], [300, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice"]], "inputannotatortypes (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.inputAnnotatorTypes"], [300, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.loadSavedModel"], [300, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.loadSavedModel"]], "name (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.name"], [300, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.name"]], "outputannotatortype (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.outputAnnotatorType"], [300, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.pretrained"], [300, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [300, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "coalescesentences (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.coalesceSentences"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.configProtoBytes"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.inputAnnotatorTypes"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "name (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.name"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.name"]], "outputannotatortype (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.outputAnnotatorType"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [301, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "coalescesentences (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.coalesceSentences"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.configProtoBytes"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.inputAnnotatorTypes"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "name (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.name"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.name"]], "outputannotatortype (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.outputAnnotatorType"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [302, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "configprotobytes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.configProtoBytes"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.configProtoBytes"]], "getclasses() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "inputannotatortypes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.inputAnnotatorTypes"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "name (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.name"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.name"]], "outputannotatortype (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.outputAnnotatorType"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [303, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "coalescesentences (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.coalesceSentences"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.configProtoBytes"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.inputAnnotatorTypes"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.maxSentenceLength"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.maxSentenceLength"]], "name (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.name"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.name"]], "outputannotatortype (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.outputAnnotatorType"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [304, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"], [305, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "coalescesentences (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.coalesceSentences"], [305, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.coalesceSentences"]], "configprotobytes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.configProtoBytes"], [305, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.configProtoBytes"]], "getclasses() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"], [305, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "inputannotatortypes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.inputAnnotatorTypes"], [305, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"], [305, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "name (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.name"], [305, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.name"]], "outputannotatortype (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.outputAnnotatorType"], [305, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"], [305, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"], [305, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"], [305, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [305, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "configprotobytes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.configProtoBytes"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.configProtoBytes"]], "getclasses() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "inputannotatortypes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.inputAnnotatorTypes"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "name (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.name"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.name"]], "outputannotatortype (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.outputAnnotatorType"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.outputAnnotatorType"]], "pretrained() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [306, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners": [[59, "module-sparknlp.annotator.cleaners"], [309, "module-sparknlp.annotator.cleaners"]], "cleaner (class in sparknlp.annotator.cleaners.cleaner)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner"]], "bullets (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.bullets"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.bullets"]], "cleanpostfixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPostfixPattern"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPostfixPattern"]], "cleanprefixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPrefixPattern"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPrefixPattern"]], "cleanermode (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanerMode"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanerMode"]], "dashes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.dashes"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.dashes"]], "encoding (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.encoding"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.encoding"]], "extrawhitespace (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.extraWhitespace"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.extraWhitespace"]], "ignorecase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.ignoreCase"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.ignoreCase"]], "inputannotatortypes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.inputAnnotatorTypes"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.inputAnnotatorTypes"]], "lowercase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.lowercase"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.lowercase"]], "name (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.name"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.name"]], "outputannotatortype (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.outputAnnotatorType"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.outputAnnotatorType"]], "setbullets() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setBullets"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.setBullets"]], "setcleanpostfixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPostfixPattern"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPostfixPattern"]], "setcleanprefixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPrefixPattern"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPrefixPattern"]], "setcleanermode() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanerMode"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanerMode"]], "setdashes() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setDashes"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.setDashes"]], "setencoding() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setEncoding"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.setEncoding"]], "setextrawhitespace() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setExtraWhitespace"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.setExtraWhitespace"]], "setignorecase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setIgnoreCase"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.setIgnoreCase"]], "setlowercase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setLowercase"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.setLowercase"]], "setstrip() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setStrip"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.setStrip"]], "settrailingpunctuation() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setTrailingPunctuation"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.setTrailingPunctuation"]], "sparknlp.annotator.cleaners.cleaner": [[60, "module-sparknlp.annotator.cleaners.cleaner"], [307, "module-sparknlp.annotator.cleaners.cleaner"]], "strip (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.strip"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.strip"]], "trailingpunctuation (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.trailingPunctuation"], [307, "sparknlp.annotator.cleaners.cleaner.Cleaner.trailingPunctuation"]], "extractor (class in sparknlp.annotator.cleaners.extractor)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor"], [308, "sparknlp.annotator.cleaners.extractor.Extractor"]], "emailaddress (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailAddress"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.emailAddress"]], "emaildatetimetzpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailDateTimeTzPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.emailDateTimeTzPattern"]], "extractormode (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.extractorMode"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.extractorMode"]], "imageurlpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.imageUrlPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.imageUrlPattern"]], "index (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.index"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.index"]], "inputannotatortypes (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.inputAnnotatorTypes"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.inputAnnotatorTypes"]], "ipaddressnamepattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressNamePattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressNamePattern"]], "ipaddresspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressPattern"]], "mapiidpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.mapiIdPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.mapiIdPattern"]], "name (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.name"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.name"]], "outputannotatortype (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.outputAnnotatorType"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.outputAnnotatorType"]], "setemailaddress() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailAddress"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailAddress"]], "setemaildatetimetzpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailDateTimeTzPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailDateTimeTzPattern"]], "setextractormode() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setExtractorMode"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.setExtractorMode"]], "setimageurlpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setImageUrlPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.setImageUrlPattern"]], "setindex() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIndex"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.setIndex"]], "setipaddressnamepattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressNamePattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressNamePattern"]], "setipaddresspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressPattern"]], "setmapiidpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setMapiIdPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.setMapiIdPattern"]], "settextpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setTextPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.setTextPattern"]], "setusphonenumberspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setUsPhoneNumbersPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.setUsPhoneNumbersPattern"]], "sparknlp.annotator.cleaners.extractor": [[61, "module-sparknlp.annotator.cleaners.extractor"], [308, "module-sparknlp.annotator.cleaners.extractor"]], "textpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.textPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.textPattern"]], "usphonenumberspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.usPhoneNumbersPattern"], [308, "sparknlp.annotator.cleaners.extractor.Extractor.usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[62, "module-sparknlp.annotator.coref"], [310, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "configprotobytes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.configProtoBytes"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.configProtoBytes"]], "inputannotatortypes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.inputAnnotatorTypes"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.inputAnnotatorTypes"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "maxsegmentlength (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.maxSegmentLength"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.maxSegmentLength"]], "name (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.name"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.name"]], "outputannotatortype (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.outputAnnotatorType"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.outputAnnotatorType"]], "pretrained() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[63, "module-sparknlp.annotator.coref.spanbert_coref"], [311, "module-sparknlp.annotator.coref.spanbert_coref"]], "textgenre (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.textGenre"], [311, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.textGenre"]], "sparknlp.annotator.cv": [[64, "module-sparknlp.annotator.cv"], [317, "module-sparknlp.annotator.cv"]], "blipforquestionanswering (class in sparknlp.annotator.cv.blip_for_question_answering)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering"], [312, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering"]], "configprotobytes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.configProtoBytes"], [312, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.inputAnnotatorTypes"], [312, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.loadSavedModel"], [312, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.loadSavedModel"]], "maxsentencelength (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.maxSentenceLength"], [312, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.maxSentenceLength"]], "name (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.name"], [312, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.name"]], "outputannotatortype (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.outputAnnotatorType"], [312, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.outputAnnotatorType"]], "pretrained() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.pretrained"], [312, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.pretrained"]], "setmaxsentencesize() (blipforquestionanswering method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.setMaxSentenceSize"], [312, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.setMaxSentenceSize"]], "sparknlp.annotator.cv.blip_for_question_answering": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"], [312, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"], [313, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "configprotobytes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.configProtoBytes"], [313, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.configProtoBytes"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"], [313, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "inputannotatortypes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.inputAnnotatorTypes"], [313, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"], [313, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "name (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.name"], [313, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.name"]], "outputannotatortype (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.outputAnnotatorType"], [313, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.outputAnnotatorType"]], "pretrained() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"], [313, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [313, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "configprotobytes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.configProtoBytes"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.configProtoBytes"]], "croppct (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.cropPct"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.cropPct"]], "dorescale (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.doRescale"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.doRescale"]], "getclasses() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "inputannotatortypes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.inputAnnotatorTypes"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "name (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.name"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.name"]], "outputannotatortype (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.outputAnnotatorType"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.outputAnnotatorType"]], "pretrained() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "rescalefactor (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.rescaleFactor"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.rescaleFactor"]], "setconfigprotobytes() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"], [314, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [314, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "florence2transformer (class in sparknlp.annotator.cv.florence2_transformer)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer"]], "batchsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.batchSize"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.batchSize"]], "beamsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.beamSize"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.beamSize"]], "dosample (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.doSample"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.doSample"]], "ignoretokenids (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.ignoreTokenIds"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.ignoreTokenIds"]], "inputannotatortypes (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.inputAnnotatorTypes"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (florence2transformer static method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.loadSavedModel"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.loadSavedModel"]], "maxoutputlength (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.maxOutputLength"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.maxOutputLength"]], "minoutputlength (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.minOutputLength"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.minOutputLength"]], "name (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.name"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.name"]], "norepeatngramsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.noRepeatNgramSize"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.noRepeatNgramSize"]], "outputannotatortype (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.outputAnnotatorType"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.outputAnnotatorType"]], "pretrained() (florence2transformer static method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.pretrained"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.pretrained"]], "repetitionpenalty (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.repetitionPenalty"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.repetitionPenalty"]], "setbatchsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBatchSize"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBatchSize"]], "setbeamsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBeamSize"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBeamSize"]], "setdosample() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setDoSample"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setDoSample"]], "setignoretokenids() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setIgnoreTokenIds"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMaxOutputLength"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMaxOutputLength"]], "setminoutputlength() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMinOutputLength"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setNoRepeatNgramSize"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setRepetitionPenalty"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setRepetitionPenalty"]], "settemperature() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTemperature"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTemperature"]], "settopk() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopK"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopK"]], "settopp() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopP"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopP"]], "sparknlp.annotator.cv.florence2_transformer": [[68, "module-sparknlp.annotator.cv.florence2_transformer"], [315, "module-sparknlp.annotator.cv.florence2_transformer"]], "temperature (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.temperature"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.temperature"]], "topk (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topK"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topK"]], "topp (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topP"], [315, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topP"]], "gemma3formultimodal (class in sparknlp.annotator.cv.gemma3_for_multimodal)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal"]], "beamsize (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.beamSize"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.beamSize"]], "configprotobytes (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.configProtoBytes"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.configProtoBytes"]], "dosample (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.doSample"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.doSample"]], "ignoretokenids (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.ignoreTokenIds"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.ignoreTokenIds"]], "inputannotatortypes (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.inputAnnotatorTypes"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (gemma3formultimodal static method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.loadSavedModel"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.loadSavedModel"]], "maxinputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxInputLength"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxInputLength"]], "maxoutputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxOutputLength"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxOutputLength"]], "minoutputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.minOutputLength"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.minOutputLength"]], "name (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.name"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.name"]], "norepeatngramsize (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.noRepeatNgramSize"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.noRepeatNgramSize"]], "outputannotatortype (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.outputAnnotatorType"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.outputAnnotatorType"]], "pretrained() (gemma3formultimodal static method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.pretrained"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.pretrained"]], "repetitionpenalty (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.repetitionPenalty"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.repetitionPenalty"]], "setbeamsize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setBeamSize"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setBeamSize"]], "setconfigprotobytes() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setConfigProtoBytes"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setConfigProtoBytes"]], "setdosample() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setDoSample"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setDoSample"]], "setignoretokenids() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setIgnoreTokenIds"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxOutputLength"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxSentenceSize"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMinOutputLength"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setNoRepeatNgramSize"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setRepetitionPenalty"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setRepetitionPenalty"]], "settemperature() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTemperature"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTemperature"]], "settopk() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopK"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopK"]], "settopp() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopP"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopP"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [316, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "temperature (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.temperature"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.temperature"]], "topk (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topK"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topK"]], "topp (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topP"], [316, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topP"]], "internvlformultimodal (class in sparknlp.annotator.cv.internvl_for_multimodal)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal"]], "beamsize (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.beamSize"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.beamSize"]], "dosample (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.doSample"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.doSample"]], "ignoretokenids (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.ignoreTokenIds"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.ignoreTokenIds"]], "inputannotatortypes (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.inputAnnotatorTypes"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (internvlformultimodal static method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.loadSavedModel"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.loadSavedModel"]], "maxoutputlength (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.maxOutputLength"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.maxOutputLength"]], "minoutputlength (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.minOutputLength"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.minOutputLength"]], "name (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.name"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.name"]], "norepeatngramsize (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.noRepeatNgramSize"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.noRepeatNgramSize"]], "outputannotatortype (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.outputAnnotatorType"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.outputAnnotatorType"]], "pretrained() (internvlformultimodal static method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.pretrained"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.pretrained"]], "repetitionpenalty (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.repetitionPenalty"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.repetitionPenalty"]], "setbeamsize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setBeamSize"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setBeamSize"]], "setdosample() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setDoSample"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setDoSample"]], "setignoretokenids() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setIgnoreTokenIds"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxOutputLength"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxSentenceSize"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMinOutputLength"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setNoRepeatNgramSize"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setRepetitionPenalty"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setRepetitionPenalty"]], "settemperature() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTemperature"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTemperature"]], "settopk() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopK"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopK"]], "settopp() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopP"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopP"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[70, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [318, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "temperature (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.temperature"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.temperature"]], "topk (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topK"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topK"]], "topp (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topP"], [318, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topP"]], "janusformultimodal (class in sparknlp.annotator.cv.janus_for_multimodal)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal"]], "beamsize (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.beamSize"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.beamSize"]], "configprotobytes (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.configProtoBytes"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.configProtoBytes"]], "dosample (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.doSample"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.doSample"]], "ignoretokenids (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.ignoreTokenIds"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.ignoreTokenIds"]], "imagegeneratemode (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.imageGenerateMode"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.imageGenerateMode"]], "inputannotatortypes (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.inputAnnotatorTypes"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (janusformultimodal static method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.loadSavedModel"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.loadSavedModel"]], "maxoutputlength (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.maxOutputLength"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.maxOutputLength"]], "minoutputlength (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.minOutputLength"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.minOutputLength"]], "name (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.name"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.name"]], "norepeatngramsize (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.noRepeatNgramSize"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.noRepeatNgramSize"]], "numofparallelimages (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.numOfParallelImages"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.numOfParallelImages"]], "outputannotatortype (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.outputAnnotatorType"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.outputAnnotatorType"]], "pretrained() (janusformultimodal static method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.pretrained"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.pretrained"]], "repetitionpenalty (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.repetitionPenalty"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.repetitionPenalty"]], "setbeamsize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setBeamSize"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setBeamSize"]], "setconfigprotobytes() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setConfigProtoBytes"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setConfigProtoBytes"]], "setdosample() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setDoSample"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setDoSample"]], "setignoretokenids() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setIgnoreTokenIds"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setIgnoreTokenIds"]], "setimagegeneratemode() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setImageGenerateMode"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setImageGenerateMode"]], "setmaxoutputlength() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxOutputLength"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxSentenceSize"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMinOutputLength"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNoRepeatNgramSize"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNoRepeatNgramSize"]], "setnumofparallelimages() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNumOfParallelImages"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNumOfParallelImages"]], "setrepetitionpenalty() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setRepetitionPenalty"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setRepetitionPenalty"]], "settemperature() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTemperature"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTemperature"]], "settopk() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopK"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopK"]], "settopp() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopP"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopP"]], "sparknlp.annotator.cv.janus_for_multimodal": [[71, "module-sparknlp.annotator.cv.janus_for_multimodal"], [319, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "temperature (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.temperature"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.temperature"]], "topk (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topK"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topK"]], "topp (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topP"], [319, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topP"]], "llavaformultimodal (class in sparknlp.annotator.cv.llava_for_multimodal)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal"]], "beamsize (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.beamSize"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.beamSize"]], "configprotobytes (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.configProtoBytes"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.configProtoBytes"]], "dosample (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.doSample"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.doSample"]], "ignoretokenids (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.ignoreTokenIds"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.ignoreTokenIds"]], "inputannotatortypes (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.inputAnnotatorTypes"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (llavaformultimodal static method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.loadSavedModel"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.loadSavedModel"]], "maxoutputlength (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.maxOutputLength"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.maxOutputLength"]], "minoutputlength (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.minOutputLength"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.minOutputLength"]], "name (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.name"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.name"]], "norepeatngramsize (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.noRepeatNgramSize"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.noRepeatNgramSize"]], "outputannotatortype (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.outputAnnotatorType"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.outputAnnotatorType"]], "pretrained() (llavaformultimodal static method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.pretrained"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.pretrained"]], "repetitionpenalty (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.repetitionPenalty"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.repetitionPenalty"]], "setbeamsize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setBeamSize"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setBeamSize"]], "setconfigprotobytes() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setConfigProtoBytes"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setConfigProtoBytes"]], "setdosample() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setDoSample"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setDoSample"]], "setignoretokenids() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setIgnoreTokenIds"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxOutputLength"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxSentenceSize"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMinOutputLength"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setNoRepeatNgramSize"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setRepetitionPenalty"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setRepetitionPenalty"]], "settemperature() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTemperature"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTemperature"]], "settopk() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopK"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopK"]], "settopp() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopP"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[72, "module-sparknlp.annotator.cv.llava_for_multimodal"], [320, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "temperature (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.temperature"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.temperature"]], "topk (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topK"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topK"]], "topp (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topP"], [320, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topP"]], "mllamaformultimodal (class in sparknlp.annotator.cv.mllama_for_multimodal)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal"]], "beamsize (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.beamSize"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.beamSize"]], "configprotobytes (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.configProtoBytes"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.configProtoBytes"]], "dosample (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.doSample"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.doSample"]], "ignoretokenids (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.ignoreTokenIds"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.ignoreTokenIds"]], "inputannotatortypes (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.inputAnnotatorTypes"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.inputAnnotatorTypes"]], "loadsavedmodel() (mllamaformultimodal static method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.loadSavedModel"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.loadSavedModel"]], "maxoutputlength (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.maxOutputLength"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.maxOutputLength"]], "minoutputlength (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.minOutputLength"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.minOutputLength"]], "name (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.name"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.name"]], "norepeatngramsize (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.noRepeatNgramSize"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.noRepeatNgramSize"]], "outputannotatortype (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.outputAnnotatorType"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.outputAnnotatorType"]], "pretrained() (mllamaformultimodal static method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.pretrained"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.pretrained"]], "repetitionpenalty (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.repetitionPenalty"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.repetitionPenalty"]], "setbeamsize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setBeamSize"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setBeamSize"]], "setconfigprotobytes() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setConfigProtoBytes"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setConfigProtoBytes"]], "setdosample() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setDoSample"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setDoSample"]], "setignoretokenids() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setIgnoreTokenIds"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setIgnoreTokenIds"]], "setmaxoutputlength() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxOutputLength"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxOutputLength"]], "setmaxsentencesize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxSentenceSize"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxSentenceSize"]], "setminoutputlength() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMinOutputLength"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMinOutputLength"]], "setnorepeatngramsize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setNoRepeatNgramSize"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setRepetitionPenalty"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setRepetitionPenalty"]], "settemperature() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTemperature"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTemperature"]], "settopk() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopK"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopK"]], "settopp() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopP"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[73, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [321, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "temperature (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.temperature"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.temperature"]], "topk (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topK"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topK"]], "topp (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topP"], [321, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topP"]], "paligemmaformultimodal (class in sparknlp.annotator.cv.paligemma_for_multimodal)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal"]], "beamsize (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.beamSize"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.beamSize"]], "dosample (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.doSample"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.doSample"]], "ignoretokenids (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.ignoreTokenIds"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.ignoreTokenIds"]], "inputannotatortypes (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.inputAnnotatorTypes"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (paligemmaformultimodal static method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.loadSavedModel"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.loadSavedModel"]], "maxoutputlength (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.maxOutputLength"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.maxOutputLength"]], "minoutputlength (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.minOutputLength"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.minOutputLength"]], "name (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.name"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.name"]], "norepeatngramsize (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.noRepeatNgramSize"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.noRepeatNgramSize"]], "outputannotatortype (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.outputAnnotatorType"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.outputAnnotatorType"]], "pretrained() (paligemmaformultimodal static method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.pretrained"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.pretrained"]], "repetitionpenalty (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.repetitionPenalty"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.repetitionPenalty"]], "setbeamsize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setBeamSize"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setBeamSize"]], "setdosample() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setDoSample"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setDoSample"]], "setignoretokenids() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setIgnoreTokenIds"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxOutputLength"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxSentenceSize"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMinOutputLength"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setNoRepeatNgramSize"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setRepetitionPenalty"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setRepetitionPenalty"]], "settemperature() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTemperature"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTemperature"]], "settopk() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopK"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopK"]], "settopp() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopP"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopP"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [322, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "temperature (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.temperature"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.temperature"]], "topk (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topK"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topK"]], "topp (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topP"], [322, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topP"]], "phi3vision (class in sparknlp.annotator.cv.phi3_vision_for_multimodal)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision"]], "beamsize (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.beamSize"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.beamSize"]], "configprotobytes (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.configProtoBytes"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.configProtoBytes"]], "dosample (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.doSample"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.doSample"]], "ignoretokenids (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.ignoreTokenIds"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.ignoreTokenIds"]], "inputannotatortypes (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.inputAnnotatorTypes"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.inputAnnotatorTypes"]], "loadsavedmodel() (phi3vision static method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.loadSavedModel"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.loadSavedModel"]], "maxoutputlength (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.maxOutputLength"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.maxOutputLength"]], "minoutputlength (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.minOutputLength"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.minOutputLength"]], "name (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.name"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.name"]], "norepeatngramsize (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.noRepeatNgramSize"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.noRepeatNgramSize"]], "outputannotatortype (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.outputAnnotatorType"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.outputAnnotatorType"]], "pretrained() (phi3vision static method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.pretrained"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.pretrained"]], "repetitionpenalty (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.repetitionPenalty"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.repetitionPenalty"]], "setbeamsize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setBeamSize"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setBeamSize"]], "setconfigprotobytes() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setConfigProtoBytes"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setConfigProtoBytes"]], "setdosample() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setDoSample"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setDoSample"]], "setignoretokenids() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setIgnoreTokenIds"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxOutputLength"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxOutputLength"]], "setmaxsentencesize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxSentenceSize"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxSentenceSize"]], "setminoutputlength() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMinOutputLength"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMinOutputLength"]], "setnorepeatngramsize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setNoRepeatNgramSize"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setRepetitionPenalty"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setRepetitionPenalty"]], "settemperature() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTemperature"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTemperature"]], "settopk() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopK"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopK"]], "settopp() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopP"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [323, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "temperature (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.temperature"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.temperature"]], "topk (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topK"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topK"]], "topp (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topP"], [323, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topP"]], "qwen2vltransformer (class in sparknlp.annotator.cv.qwen2vl_transformer)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer"]], "beamsize (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.beamSize"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.beamSize"]], "configprotobytes (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.configProtoBytes"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.configProtoBytes"]], "dosample (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.doSample"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.doSample"]], "ignoretokenids (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.ignoreTokenIds"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.ignoreTokenIds"]], "inputannotatortypes (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.inputAnnotatorTypes"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwen2vltransformer static method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.loadSavedModel"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.loadSavedModel"]], "maxoutputlength (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.maxOutputLength"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.maxOutputLength"]], "minoutputlength (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.minOutputLength"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.minOutputLength"]], "name (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.name"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.name"]], "norepeatngramsize (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.noRepeatNgramSize"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.noRepeatNgramSize"]], "outputannotatortype (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.outputAnnotatorType"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.outputAnnotatorType"]], "pretrained() (qwen2vltransformer static method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.pretrained"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.pretrained"]], "repetitionpenalty (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.repetitionPenalty"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.repetitionPenalty"]], "setbeamsize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setBeamSize"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setBeamSize"]], "setconfigprotobytes() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setConfigProtoBytes"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setConfigProtoBytes"]], "setdosample() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setDoSample"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setDoSample"]], "setignoretokenids() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setIgnoreTokenIds"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxOutputLength"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxOutputLength"]], "setmaxsentencesize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxSentenceSize"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxSentenceSize"]], "setminoutputlength() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMinOutputLength"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setNoRepeatNgramSize"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setRepetitionPenalty"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setRepetitionPenalty"]], "settemperature() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTemperature"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTemperature"]], "settopk() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopK"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopK"]], "settopp() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopP"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[76, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [324, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "temperature (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.temperature"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.temperature"]], "topk (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topK"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topK"]], "topp (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topP"], [324, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topP"]], "smolvlmtransformer (class in sparknlp.annotator.cv.smolvlm_transformer)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer"]], "beamsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.beamSize"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.beamSize"]], "doimagesplitting (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doImageSplitting"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doImageSplitting"]], "dosample (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doSample"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doSample"]], "ignoretokenids (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.ignoreTokenIds"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.ignoreTokenIds"]], "imagetoken (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.imageToken"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.imageToken"]], "inputannotatortypes (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.inputAnnotatorTypes"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (smolvlmtransformer static method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.loadSavedModel"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.loadSavedModel"]], "maximagesize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxImageSize"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxImageSize"]], "maxoutputlength (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxOutputLength"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxOutputLength"]], "minoutputlength (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.minOutputLength"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.minOutputLength"]], "name (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.name"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.name"]], "norepeatngramsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.noRepeatNgramSize"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.noRepeatNgramSize"]], "numvisiontokens (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.numVisionTokens"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.numVisionTokens"]], "outputannotatortype (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.outputAnnotatorType"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.outputAnnotatorType"]], "paddingconstant (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.paddingConstant"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.paddingConstant"]], "patchsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.patchSize"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.patchSize"]], "pretrained() (smolvlmtransformer static method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.pretrained"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.pretrained"]], "repetitionpenalty (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.repetitionPenalty"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.repetitionPenalty"]], "setbeamsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setBeamSize"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setBeamSize"]], "setconfigprotobytes() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setConfigProtoBytes"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setConfigProtoBytes"]], "setdoimagesplitting() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoImageSplitting"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoImageSplitting"]], "setdosample() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoSample"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoSample"]], "setignoretokenids() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setIgnoreTokenIds"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setIgnoreTokenIds"]], "setimagetoken() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setImageToken"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setImageToken"]], "setmaximagesize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxImageSize"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxImageSize"]], "setmaxoutputlength() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxOutputLength"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxOutputLength"]], "setmaxsentencesize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxSentenceSize"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxSentenceSize"]], "setminoutputlength() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMinOutputLength"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNoRepeatNgramSize"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNoRepeatNgramSize"]], "setnumvisiontokens() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNumVisionTokens"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNumVisionTokens"]], "setpaddingconstant() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPaddingConstant"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPaddingConstant"]], "setpatchsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPatchSize"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPatchSize"]], "setrepetitionpenalty() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setRepetitionPenalty"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setRepetitionPenalty"]], "setstoptokenids() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setStopTokenIds"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setStopTokenIds"]], "settemperature() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTemperature"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTemperature"]], "settopk() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopK"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopK"]], "settopp() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopP"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopP"]], "sparknlp.annotator.cv.smolvlm_transformer": [[77, "module-sparknlp.annotator.cv.smolvlm_transformer"], [325, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "stoptokenids (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.stopTokenIds"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.stopTokenIds"]], "temperature (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.temperature"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.temperature"]], "topk (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topK"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topK"]], "topp (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topP"], [325, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topP"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"], [326, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "configprotobytes (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.configProtoBytes"], [326, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.configProtoBytes"]], "getclasses() (swinforimageclassification method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"], [326, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "inputannotatortypes (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.inputAnnotatorTypes"], [326, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (swinforimageclassification static method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"], [326, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "name (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.name"], [326, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.name"]], "outputannotatortype (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.outputAnnotatorType"], [326, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.outputAnnotatorType"]], "pretrained() (swinforimageclassification static method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"], [326, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"], [326, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[78, "module-sparknlp.annotator.cv.swin_for_image_classification"], [326, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"], [327, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "configprotobytes (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.configProtoBytes"], [327, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.configProtoBytes"]], "inputannotatortypes (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.inputAnnotatorTypes"], [327, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.inputAnnotatorTypes"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"], [327, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "name (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.name"], [327, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.name"]], "outputannotatortype (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.outputAnnotatorType"], [327, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.outputAnnotatorType"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"], [327, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"], [327, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [327, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"], [328, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "configprotobytes (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.configProtoBytes"], [328, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.configProtoBytes"]], "getclasses() (vitforimageclassification method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"], [328, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "inputannotatortypes (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.inputAnnotatorTypes"], [328, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (vitforimageclassification static method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"], [328, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "name (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.name"], [328, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.name"]], "outputannotatortype (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.outputAnnotatorType"], [328, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.outputAnnotatorType"]], "pretrained() (vitforimageclassification static method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"], [328, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"], [328, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[80, "module-sparknlp.annotator.cv.vit_for_image_classification"], [328, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk"], [329, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "entityname (date2chunk attribute)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk.entityName"], [329, "sparknlp.annotator.date2_chunk.Date2Chunk.entityName"]], "inputannotatortypes (date2chunk attribute)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk.inputAnnotatorTypes"], [329, "sparknlp.annotator.date2_chunk.Date2Chunk.inputAnnotatorTypes"]], "name (date2chunk attribute)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk.name"], [329, "sparknlp.annotator.date2_chunk.Date2Chunk.name"]], "outputannotatortype (date2chunk attribute)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk.outputAnnotatorType"], [329, "sparknlp.annotator.date2_chunk.Date2Chunk.outputAnnotatorType"]], "setentityname() (date2chunk method)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"], [329, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[81, "module-sparknlp.annotator.date2_chunk"], [329, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency": [[82, "module-sparknlp.annotator.dependency"], [331, "module-sparknlp.annotator.dependency"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "conllu (dependencyparserapproach attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.conllU"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.conllU"]], "dependencytreebank (dependencyparserapproach attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.dependencyTreeBank"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.dependencyTreeBank"]], "inputannotatortypes (dependencyparserapproach attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.inputAnnotatorTypes"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (dependencyparsermodel attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.inputAnnotatorTypes"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.inputAnnotatorTypes"]], "name (dependencyparsermodel attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.name"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.name"]], "numberofiterations (dependencyparserapproach attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.numberOfIterations"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.numberOfIterations"]], "outputannotatortype (dependencyparserapproach attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.outputAnnotatorType"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (dependencyparsermodel attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.outputAnnotatorType"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.outputAnnotatorType"]], "perceptron (dependencyparsermodel attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.perceptron"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.perceptron"]], "pretrained() (dependencyparsermodel static method)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"], [330, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[83, "module-sparknlp.annotator.dependency.dependency_parser"], [330, "module-sparknlp.annotator.dependency.dependency_parser"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "conll2009 (typeddependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conll2009"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conll2009"]], "conllformat (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.conllFormat"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.conllFormat"]], "conllu (typeddependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conllU"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conllU"]], "inputannotatortypes (typeddependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.inputAnnotatorTypes"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.inputAnnotatorTypes"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.inputAnnotatorTypes"]], "name (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.name"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.name"]], "numberofiterations (typeddependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.numberOfIterations"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.numberOfIterations"]], "outputannotatortype (typeddependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.outputAnnotatorType"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.outputAnnotatorType"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.outputAnnotatorType"]], "pretrained() (typeddependencyparsermodel static method)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[84, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [332, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "traindependencypipe (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainDependencyPipe"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainDependencyPipe"]], "trainoptions (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainOptions"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainOptions"]], "trainparameters (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainParameters"], [332, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainParameters"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "chunkoverlap (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkOverlap"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkOverlap"]], "chunksize (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkSize"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkSize"]], "explodesplits (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.explodeSplits"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.explodeSplits"]], "inputannotatortypes (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.inputAnnotatorTypes"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.inputAnnotatorTypes"]], "keepseparators (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.keepSeparators"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.keepSeparators"]], "outputannotatortype (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.outputAnnotatorType"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.outputAnnotatorType"]], "patternsareregex (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.patternsAreRegex"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.patternsAreRegex"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[85, "module-sparknlp.annotator.document_character_text_splitter"], [333, "module-sparknlp.annotator.document_character_text_splitter"]], "splitpatterns (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.splitPatterns"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.splitPatterns"]], "trimwhitespace (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.trimWhitespace"], [333, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.trimWhitespace"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "action (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.action"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.action"]], "encoding (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.encoding"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.encoding"]], "inputannotatortypes (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.inputAnnotatorTypes"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.inputAnnotatorTypes"]], "lowercase (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.lowercase"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.lowercase"]], "outputannotatortype (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.outputAnnotatorType"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.outputAnnotatorType"]], "patterns (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.patterns"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.patterns"]], "policy (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.policy"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.policy"]], "replacement (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.replacement"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.replacement"]], "setaction() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"], [334, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[86, "module-sparknlp.annotator.document_normalizer"], [334, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"], [335, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "explodesplits (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.explodeSplits"], [335, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.explodeSplits"]], "inputannotatortypes (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.inputAnnotatorTypes"], [335, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.inputAnnotatorTypes"]], "numtokens (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.numTokens"], [335, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.numTokens"]], "outputannotatortype (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.outputAnnotatorType"], [335, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.outputAnnotatorType"]], "setexplodesplits() (documenttokensplitter method)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"], [335, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"], [335, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"], [335, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"], [335, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[87, "module-sparknlp.annotator.document_token_splitter"], [335, "module-sparknlp.annotator.document_token_splitter"]], "tokenoverlap (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.tokenOverlap"], [335, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.tokenOverlap"]], "trimwhitespace (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.trimWhitespace"], [335, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.trimWhitespace"]], "sparknlp.annotator.embeddings": [[89, "module-sparknlp.annotator.embeddings"], [349, "module-sparknlp.annotator.embeddings"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"], [337, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "configprotobytes (albertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.configProtoBytes"], [337, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.configProtoBytes"]], "inputannotatortypes (albertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.inputAnnotatorTypes"], [337, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (albertembeddings static method)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"], [337, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "name (albertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.name"], [337, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.name"]], "outputannotatortype (albertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.outputAnnotatorType"], [337, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.outputAnnotatorType"]], "pretrained() (albertembeddings static method)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"], [337, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"], [337, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[90, "module-sparknlp.annotator.embeddings.albert_embeddings"], [337, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "autoggufembeddings (class in sparknlp.annotator.embeddings.auto_gguf_embeddings)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings"]], "defragmentationthreshold (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.defragmentationThreshold"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.defragmentationThreshold"]], "embedding (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.embedding"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.embedding"]], "flashattention (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.flashAttention"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.flashAttention"]], "getmetadata() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.getMetadata"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.getMetadata"]], "gpusplitmode (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.gpuSplitMode"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.gpuSplitMode"]], "grpattnn (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnN"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnN"]], "grpattnw (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnW"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnW"]], "inputannotatortypes (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.inputAnnotatorTypes"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufembeddings static method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.loadSavedModel"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.loadSavedModel"]], "maingpu (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.mainGpu"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.mainGpu"]], "nbatch (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nBatch"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nBatch"]], "nchunks (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nChunks"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nChunks"]], "nctx (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nCtx"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nCtx"]], "ngpulayers (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nGpuLayers"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nGpuLayers"]], "nsequences (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nSequences"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nSequences"]], "nthreads (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreads"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreads"]], "nthreadsbatch (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreadsBatch"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreadsBatch"]], "nubatch (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nUbatch"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nUbatch"]], "name (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.name"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.name"]], "nokvoffload (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.noKvOffload"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.noKvOffload"]], "numastrategy (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.numaStrategy"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.numaStrategy"]], "outputannotatortype (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.outputAnnotatorType"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.outputAnnotatorType"]], "poolingtype (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.poolingType"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.poolingType"]], "pretrained() (autoggufembeddings static method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.pretrained"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.pretrained"]], "ropefreqbase (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqBase"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqBase"]], "ropefreqscale (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqScale"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqScale"]], "ropescalingtype (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeScalingType"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeScalingType"]], "setdefragmentationthreshold() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setDefragmentationThreshold"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setDefragmentationThreshold"]], "setflashattention() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setFlashAttention"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setFlashAttention"]], "setgpusplitmode() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGpuSplitMode"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGpuSplitMode"]], "setgrpattnn() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnN"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnN"]], "setgrpattnw() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnW"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnW"]], "setmaingpu() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setMainGpu"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setMainGpu"]], "setnbatch() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNBatch"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNBatch"]], "setnchunks() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNChunks"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNChunks"]], "setnctx() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNCtx"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNCtx"]], "setngpulayers() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNGpuLayers"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNGpuLayers"]], "setnparallel() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNParallel"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNParallel"]], "setnsequences() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNSequences"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNSequences"]], "setnthreads() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreads"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreads"]], "setnthreadsbatch() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreadsBatch"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreadsBatch"]], "setnubatch() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNUbatch"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNUbatch"]], "setnokvoffload() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNoKvOffload"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNoKvOffload"]], "setnumastrategy() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNumaStrategy"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNumaStrategy"]], "setpoolingtype() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setPoolingType"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setPoolingType"]], "setropefreqbase() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqBase"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqBase"]], "setropefreqscale() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqScale"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqScale"]], "setropescalingtype() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeScalingType"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeScalingType"]], "settensorsplit() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setTensorSplit"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setTensorSplit"]], "setusemlock() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMlock"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMlock"]], "setusemmap() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMmap"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMmap"]], "setyarnattnfactor() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnAttnFactor"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnAttnFactor"]], "setyarnbetafast() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaFast"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaFast"]], "setyarnbetaslow() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaSlow"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaSlow"]], "setyarnextfactor() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnExtFactor"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnExtFactor"]], "setyarnorigctx() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnOrigCtx"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnOrigCtx"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[91, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [338, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "tensorsplit (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.tensorSplit"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.tensorSplit"]], "usemlock (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMlock"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMlock"]], "usemmap (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMmap"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMmap"]], "yarnattnfactor (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnAttnFactor"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnAttnFactor"]], "yarnbetafast (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaFast"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaFast"]], "yarnbetaslow (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaSlow"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaSlow"]], "yarnextfactor (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnExtFactor"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnExtFactor"]], "yarnorigctx (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnOrigCtx"], [338, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnOrigCtx"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"], [339, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "configprotobytes (bertembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.configProtoBytes"], [339, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.configProtoBytes"]], "inputannotatortypes (bertembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.inputAnnotatorTypes"], [339, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bertembeddings static method)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"], [339, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "name (bertembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.name"], [339, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.name"]], "outputannotatortype (bertembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.outputAnnotatorType"], [339, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.outputAnnotatorType"]], "pretrained() (bertembeddings static method)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"], [339, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"], [339, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[92, "module-sparknlp.annotator.embeddings.bert_embeddings"], [339, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"], [340, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "configprotobytes (bertsentenceembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.configProtoBytes"], [340, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (bertsentenceembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.inputAnnotatorTypes"], [340, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.inputAnnotatorTypes"]], "islong (bertsentenceembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.isLong"], [340, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.isLong"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"], [340, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "name (bertsentenceembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.name"], [340, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.name"]], "outputannotatortype (bertsentenceembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.outputAnnotatorType"], [340, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentenceembeddings static method)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"], [340, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"], [340, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"], [340, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[93, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [340, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"], [341, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "configprotobytes (bgeembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.configProtoBytes"], [341, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.configProtoBytes"]], "inputannotatortypes (bgeembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.inputAnnotatorTypes"], [341, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bgeembeddings static method)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"], [341, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "name (bgeembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.name"], [341, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.name"]], "outputannotatortype (bgeembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.outputAnnotatorType"], [341, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.outputAnnotatorType"]], "pretrained() (bgeembeddings static method)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"], [341, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"], [341, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[94, "module-sparknlp.annotator.embeddings.bge_embeddings"], [341, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"], [342, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "configprotobytes (camembertembeddings attribute)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.configProtoBytes"], [342, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.configProtoBytes"]], "inputannotatortypes (camembertembeddings attribute)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.inputAnnotatorTypes"], [342, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (camembertembeddings static method)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"], [342, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "name (camembertembeddings attribute)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.name"], [342, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.name"]], "outputannotatortype (camembertembeddings attribute)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.outputAnnotatorType"], [342, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.outputAnnotatorType"]], "pretrained() (camembertembeddings static method)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"], [342, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"], [342, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[95, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [342, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"], [343, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "inputannotatortypes (chunkembeddings attribute)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.inputAnnotatorTypes"], [343, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.inputAnnotatorTypes"]], "name (chunkembeddings attribute)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.name"], [343, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.name"]], "outputannotatortype (chunkembeddings attribute)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.outputAnnotatorType"], [343, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.outputAnnotatorType"]], "poolingstrategy (chunkembeddings attribute)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.poolingStrategy"], [343, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.poolingStrategy"]], "setpoolingstrategy() (chunkembeddings method)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"], [343, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"], [343, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "skipoov (chunkembeddings attribute)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.skipOOV"], [343, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.skipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[96, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [343, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"], [344, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "configprotobytes (debertaembeddings attribute)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.configProtoBytes"], [344, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (debertaembeddings attribute)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.inputAnnotatorTypes"], [344, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (debertaembeddings static method)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"], [344, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "name (debertaembeddings attribute)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.name"], [344, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.name"]], "outputannotatortype (debertaembeddings attribute)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.outputAnnotatorType"], [344, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.outputAnnotatorType"]], "pretrained() (debertaembeddings static method)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"], [344, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"], [344, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[97, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [344, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"], [345, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "configprotobytes (distilbertembeddings attribute)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.configProtoBytes"], [345, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.configProtoBytes"]], "inputannotatortypes (distilbertembeddings attribute)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.inputAnnotatorTypes"], [345, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertembeddings static method)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"], [345, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "name (distilbertembeddings attribute)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.name"], [345, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.name"]], "outputannotatortype (distilbertembeddings attribute)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.outputAnnotatorType"], [345, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.outputAnnotatorType"]], "pretrained() (distilbertembeddings static method)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"], [345, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"], [345, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[98, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [345, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "inputannotatortypes (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.inputAnnotatorTypes"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (doc2vecmodel attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.inputAnnotatorTypes"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.inputAnnotatorTypes"]], "maxiter (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxIter"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxIter"]], "maxsentencelength (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxSentenceLength"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxSentenceLength"]], "mincount (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.minCount"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.minCount"]], "name (doc2vecmodel attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.name"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.name"]], "numpartitions (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.numPartitions"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.numPartitions"]], "outputannotatortype (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.outputAnnotatorType"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.outputAnnotatorType"]], "outputannotatortype (doc2vecmodel attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.outputAnnotatorType"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.outputAnnotatorType"]], "pretrained() (doc2vecmodel static method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "seed (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.seed"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.seed"]], "setmaxiter() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[99, "module-sparknlp.annotator.embeddings.doc2vec"], [346, "module-sparknlp.annotator.embeddings.doc2vec"]], "stepsize (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.stepSize"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.stepSize"]], "vectorsize (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.vectorSize"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.vectorSize"]], "vectorsize (doc2vecmodel attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.vectorSize"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.vectorSize"]], "windowsize (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.windowSize"], [346, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.windowSize"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"], [347, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "configprotobytes (e5embeddings attribute)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.configProtoBytes"], [347, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.configProtoBytes"]], "inputannotatortypes (e5embeddings attribute)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.inputAnnotatorTypes"], [347, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.inputAnnotatorTypes"]], "loadsavedmodel() (e5embeddings static method)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"], [347, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "name (e5embeddings attribute)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.name"], [347, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.name"]], "outputannotatortype (e5embeddings attribute)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.outputAnnotatorType"], [347, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.outputAnnotatorType"]], "pretrained() (e5embeddings static method)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"], [347, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"], [347, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[100, "module-sparknlp.annotator.embeddings.e5_embeddings"], [347, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "batchsize (elmoembeddings attribute)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.batchSize"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.batchSize"]], "configprotobytes (elmoembeddings attribute)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.configProtoBytes"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.configProtoBytes"]], "inputannotatortypes (elmoembeddings attribute)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.inputAnnotatorTypes"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (elmoembeddings static method)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "name (elmoembeddings attribute)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.name"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.name"]], "outputannotatortype (elmoembeddings attribute)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.outputAnnotatorType"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.outputAnnotatorType"]], "poolinglayer (elmoembeddings attribute)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.poolingLayer"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.poolingLayer"]], "pretrained() (elmoembeddings static method)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[101, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"], [348, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[101, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [348, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[102, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"], [350, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "configprotobytes (instructorembeddings attribute)": [[102, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.configProtoBytes"], [350, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.configProtoBytes"]], "inputannotatortypes (instructorembeddings attribute)": [[102, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.inputAnnotatorTypes"], [350, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.inputAnnotatorTypes"]], "instruction (instructorembeddings attribute)": [[102, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.instruction"], [350, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.instruction"]], "loadsavedmodel() (instructorembeddings static method)": [[102, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"], [350, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "name (instructorembeddings attribute)": [[102, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.name"], [350, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.name"]], "outputannotatortype (instructorembeddings attribute)": [[102, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.outputAnnotatorType"], [350, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.outputAnnotatorType"]], "pretrained() (instructorembeddings static method)": [[102, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"], [350, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[102, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"], [350, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[102, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"], [350, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[102, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [350, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[103, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"], [351, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "configprotobytes (longformerembeddings attribute)": [[103, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.configProtoBytes"], [351, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.configProtoBytes"]], "inputannotatortypes (longformerembeddings attribute)": [[103, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.inputAnnotatorTypes"], [351, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (longformerembeddings static method)": [[103, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"], [351, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "name (longformerembeddings attribute)": [[103, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.name"], [351, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.name"]], "outputannotatortype (longformerembeddings attribute)": [[103, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.outputAnnotatorType"], [351, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.outputAnnotatorType"]], "pretrained() (longformerembeddings static method)": [[103, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"], [351, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[103, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"], [351, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[103, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [351, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[104, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"], [352, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "configprotobytes (mpnetembeddings attribute)": [[104, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.configProtoBytes"], [352, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.configProtoBytes"]], "inputannotatortypes (mpnetembeddings attribute)": [[104, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.inputAnnotatorTypes"], [352, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetembeddings static method)": [[104, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"], [352, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "name (mpnetembeddings attribute)": [[104, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.name"], [352, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.name"]], "outputannotatortype (mpnetembeddings attribute)": [[104, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.outputAnnotatorType"], [352, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.outputAnnotatorType"]], "pretrained() (mpnetembeddings static method)": [[104, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"], [352, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[104, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"], [352, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[104, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [352, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "mxbaiembeddings (class in sparknlp.annotator.embeddings.mxbai_embeddings)": [[105, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"], [353, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"]], "inputannotatortypes (mxbaiembeddings attribute)": [[105, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.inputAnnotatorTypes"], [353, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mxbaiembeddings static method)": [[105, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"], [353, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"]], "name (mxbaiembeddings attribute)": [[105, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.name"], [353, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.name"]], "outputannotatortype (mxbaiembeddings attribute)": [[105, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.outputAnnotatorType"], [353, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.outputAnnotatorType"]], "poolingstrategy (mxbaiembeddings attribute)": [[105, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.poolingStrategy"], [353, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.poolingStrategy"]], "pretrained() (mxbaiembeddings static method)": [[105, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"], [353, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"]], "setpoolingstrategy() (mxbaiembeddings method)": [[105, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"], [353, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[105, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [353, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "nomicembeddings (class in sparknlp.annotator.embeddings.nomic_embeddings)": [[106, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"], [354, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"]], "configprotobytes (nomicembeddings attribute)": [[106, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.configProtoBytes"], [354, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.configProtoBytes"]], "inputannotatortypes (nomicembeddings attribute)": [[106, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.inputAnnotatorTypes"], [354, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (nomicembeddings static method)": [[106, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"], [354, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"]], "name (nomicembeddings attribute)": [[106, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.name"], [354, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.name"]], "outputannotatortype (nomicembeddings attribute)": [[106, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.outputAnnotatorType"], [354, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.outputAnnotatorType"]], "pretrained() (nomicembeddings static method)": [[106, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"], [354, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"]], "setconfigprotobytes() (nomicembeddings method)": [[106, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"], [354, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[106, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [354, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[107, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"], [355, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "configprotobytes (robertaembeddings attribute)": [[107, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.configProtoBytes"], [355, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (robertaembeddings attribute)": [[107, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.inputAnnotatorTypes"], [355, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertaembeddings static method)": [[107, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"], [355, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "name (robertaembeddings attribute)": [[107, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.name"], [355, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.name"]], "outputannotatortype (robertaembeddings attribute)": [[107, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.outputAnnotatorType"], [355, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (robertaembeddings static method)": [[107, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"], [355, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[107, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"], [355, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[107, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [355, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[108, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"], [356, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "configprotobytes (robertasentenceembeddings attribute)": [[108, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.configProtoBytes"], [356, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (robertasentenceembeddings attribute)": [[108, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.inputAnnotatorTypes"], [356, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[108, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"], [356, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "name (robertasentenceembeddings attribute)": [[108, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.name"], [356, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.name"]], "outputannotatortype (robertasentenceembeddings attribute)": [[108, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.outputAnnotatorType"], [356, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (robertasentenceembeddings static method)": [[108, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"], [356, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[108, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"], [356, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[108, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [356, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[109, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"], [357, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "inputannotatortypes (sentenceembeddings attribute)": [[109, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.inputAnnotatorTypes"], [357, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.inputAnnotatorTypes"]], "name (sentenceembeddings attribute)": [[109, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.name"], [357, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.name"]], "outputannotatortype (sentenceembeddings attribute)": [[109, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.outputAnnotatorType"], [357, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.outputAnnotatorType"]], "poolingstrategy (sentenceembeddings attribute)": [[109, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.poolingStrategy"], [357, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.poolingStrategy"]], "setpoolingstrategy() (sentenceembeddings method)": [[109, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"], [357, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[109, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [357, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "snowflakeembeddings (class in sparknlp.annotator.embeddings.snowflake_embeddings)": [[110, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"], [358, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"]], "inputannotatortypes (snowflakeembeddings attribute)": [[110, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.inputAnnotatorTypes"], [358, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (snowflakeembeddings static method)": [[110, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"], [358, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"]], "name (snowflakeembeddings attribute)": [[110, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.name"], [358, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.name"]], "outputannotatortype (snowflakeembeddings attribute)": [[110, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.outputAnnotatorType"], [358, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.outputAnnotatorType"]], "poolingstrategy (snowflakeembeddings attribute)": [[110, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.poolingStrategy"], [358, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.poolingStrategy"]], "pretrained() (snowflakeembeddings static method)": [[110, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"], [358, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"]], "setpoolingstrategy() (snowflakeembeddings method)": [[110, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"], [358, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[110, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [358, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "uaeembeddings (class in sparknlp.annotator.embeddings.uae_embeddings)": [[111, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"], [359, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"]], "inputannotatortypes (uaeembeddings attribute)": [[111, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.inputAnnotatorTypes"], [359, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (uaeembeddings static method)": [[111, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"], [359, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"]], "name (uaeembeddings attribute)": [[111, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.name"], [359, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.name"]], "outputannotatortype (uaeembeddings attribute)": [[111, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.outputAnnotatorType"], [359, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.outputAnnotatorType"]], "poolingstrategy (uaeembeddings attribute)": [[111, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.poolingStrategy"], [359, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.poolingStrategy"]], "pretrained() (uaeembeddings static method)": [[111, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"], [359, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"]], "setpoolingstrategy() (uaeembeddings method)": [[111, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"], [359, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[111, "module-sparknlp.annotator.embeddings.uae_embeddings"], [359, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[112, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"], [360, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "configprotobytes (universalsentenceencoder attribute)": [[112, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.configProtoBytes"], [360, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.configProtoBytes"]], "inputannotatortypes (universalsentenceencoder attribute)": [[112, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.inputAnnotatorTypes"], [360, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.inputAnnotatorTypes"]], "loadsp (universalsentenceencoder attribute)": [[112, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSP"], [360, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSP"]], "loadsavedmodel() (universalsentenceencoder static method)": [[112, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"], [360, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "name (universalsentenceencoder attribute)": [[112, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.name"], [360, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.name"]], "outputannotatortype (universalsentenceencoder attribute)": [[112, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.outputAnnotatorType"], [360, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.outputAnnotatorType"]], "pretrained() (universalsentenceencoder static method)": [[112, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"], [360, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[112, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"], [360, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[112, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"], [360, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[112, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [360, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "inputannotatortypes (word2vecapproach attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.inputAnnotatorTypes"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (word2vecmodel attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.inputAnnotatorTypes"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.inputAnnotatorTypes"]], "maxiter (word2vecapproach attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxIter"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxIter"]], "maxsentencelength (word2vecapproach attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxSentenceLength"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxSentenceLength"]], "mincount (word2vecapproach attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.minCount"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.minCount"]], "name (word2vecmodel attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.name"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.name"]], "numpartitions (word2vecapproach attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.numPartitions"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.numPartitions"]], "outputannotatortype (word2vecapproach attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.outputAnnotatorType"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.outputAnnotatorType"]], "outputannotatortype (word2vecmodel attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.outputAnnotatorType"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.outputAnnotatorType"]], "pretrained() (word2vecmodel static method)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "seed (word2vecapproach attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.seed"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.seed"]], "setmaxiter() (word2vecapproach method)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[113, "module-sparknlp.annotator.embeddings.word2vec"], [361, "module-sparknlp.annotator.embeddings.word2vec"]], "stepsize (word2vecapproach attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.stepSize"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.stepSize"]], "vectorsize (word2vecapproach attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.vectorSize"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.vectorSize"]], "vectorsize (word2vecmodel attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.vectorSize"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.vectorSize"]], "windowsize (word2vecapproach attribute)": [[113, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.windowSize"], [361, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.windowSize"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "databases (wordembeddingsmodel attribute)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.databases"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.databases"]], "inputannotatortypes (wordembeddings attribute)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.inputAnnotatorTypes"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.inputAnnotatorTypes"]], "inputannotatortypes (wordembeddingsmodel attribute)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.inputAnnotatorTypes"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.inputAnnotatorTypes"]], "loadstorage() (wordembeddingsmodel static method)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "name (wordembeddings attribute)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.name"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.name"]], "name (wordembeddingsmodel attribute)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.name"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.name"]], "outputannotatortype (wordembeddings attribute)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.outputAnnotatorType"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.outputAnnotatorType"]], "outputannotatortype (wordembeddingsmodel attribute)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.outputAnnotatorType"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.outputAnnotatorType"]], "overallcoverage() (wordembeddingsmodel static method)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "readcachesize (wordembeddings attribute)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.readCacheSize"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.readCacheSize"]], "readcachesize (wordembeddingsmodel attribute)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.readCacheSize"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.readCacheSize"]], "setreadcachesize() (wordembeddings method)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[114, "module-sparknlp.annotator.embeddings.word_embeddings"], [362, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "writebuffersize (wordembeddings attribute)": [[114, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.writeBufferSize"], [362, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.writeBufferSize"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[115, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"], [363, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "configprotobytes (xlmrobertaembeddings attribute)": [[115, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.configProtoBytes"], [363, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertaembeddings attribute)": [[115, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.inputAnnotatorTypes"], [363, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[115, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"], [363, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "name (xlmrobertaembeddings attribute)": [[115, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.name"], [363, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.name"]], "outputannotatortype (xlmrobertaembeddings attribute)": [[115, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.outputAnnotatorType"], [363, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertaembeddings static method)": [[115, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"], [363, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[115, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"], [363, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[115, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [363, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"], [364, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "configprotobytes (xlmrobertasentenceembeddings attribute)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.configProtoBytes"], [364, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertasentenceembeddings attribute)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.inputAnnotatorTypes"], [364, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"], [364, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "name (xlmrobertasentenceembeddings attribute)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.name"], [364, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.name"]], "outputannotatortype (xlmrobertasentenceembeddings attribute)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.outputAnnotatorType"], [364, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"], [364, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"], [364, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[116, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [364, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[117, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"], [365, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "configprotobytes (xlnetembeddings attribute)": [[117, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.configProtoBytes"], [365, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.configProtoBytes"]], "inputannotatortypes (xlnetembeddings attribute)": [[117, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.inputAnnotatorTypes"], [365, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetembeddings static method)": [[117, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"], [365, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "name (xlnetembeddings attribute)": [[117, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.name"], [365, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.name"]], "outputannotatortype (xlnetembeddings attribute)": [[117, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.outputAnnotatorType"], [365, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.outputAnnotatorType"]], "pretrained() (xlnetembeddings static method)": [[117, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"], [365, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[117, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"], [365, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[117, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [365, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er": [[118, "module-sparknlp.annotator.er"], [367, "module-sparknlp.annotator.er"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "alphabet (entityrulerapproach attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.alphabet"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.alphabet"]], "database (entityrulermodel attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.database"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.database"]], "inputannotatortypes (entityrulerapproach attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.inputAnnotatorTypes"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.inputAnnotatorTypes"]], "inputannotatortypes (entityrulermodel attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.inputAnnotatorTypes"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.inputAnnotatorTypes"]], "loadstorage() (entityrulermodel static method)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.loadStorage"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.loadStorage"]], "name (entityrulerapproach attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.name"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.name"]], "name (entityrulermodel attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.name"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.name"]], "optionalinputannotatortypes (entityrulerapproach attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.optionalInputAnnotatorTypes"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (entityrulermodel attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.optionalInputAnnotatorTypes"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (entityrulerapproach attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.outputAnnotatorType"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.outputAnnotatorType"]], "outputannotatortype (entityrulermodel attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.outputAnnotatorType"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.outputAnnotatorType"]], "patternsresource (entityrulerapproach attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.patternsResource"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.patternsResource"]], "pretrained() (entityrulermodel static method)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.pretrained"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.pretrained"]], "sentencematch (entityrulerapproach attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.sentenceMatch"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.sentenceMatch"]], "setalphabetresource() (entityrulerapproach method)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[119, "module-sparknlp.annotator.er.entity_ruler"], [366, "module-sparknlp.annotator.er.entity_ruler"]], "usestorage (entityrulerapproach attribute)": [[119, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.useStorage"], [366, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.useStorage"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "delimiter (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.delimiter"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.delimiter"]], "dependencyparsermodel (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.dependencyParserModel"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.dependencyParserModel"]], "entitytypes (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.entityTypes"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.entityTypes"]], "explodeentities (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.explodeEntities"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.explodeEntities"]], "includeedges (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.includeEdges"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.includeEdges"]], "inputannotatortypes (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.inputAnnotatorTypes"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.inputAnnotatorTypes"]], "maxsentencesize (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.maxSentenceSize"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.maxSentenceSize"]], "mergeentities (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntities"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntities"]], "mergeentitiesiobformat (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntitiesIOBFormat"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntitiesIOBFormat"]], "minsentencesize (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.minSentenceSize"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.minSentenceSize"]], "name (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.name"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.name"]], "optionalinputannotatortypes (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.optionalInputAnnotatorTypes"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.optionalInputAnnotatorTypes"]], "outputannotatortype (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.outputAnnotatorType"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.outputAnnotatorType"]], "posmodel (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.posModel"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.posModel"]], "relationshiptypes (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.relationshipTypes"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.relationshipTypes"]], "roottokens (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.rootTokens"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.rootTokens"]], "setdelimiter() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[120, "module-sparknlp.annotator.graph_extraction"], [368, "module-sparknlp.annotator.graph_extraction"]], "typeddependencyparsermodel (graphextraction attribute)": [[120, "sparknlp.annotator.graph_extraction.GraphExtraction.typedDependencyParserModel"], [368, "sparknlp.annotator.graph_extraction.GraphExtraction.typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[121, "module-sparknlp.annotator.keyword_extraction"], [370, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "inputannotatortypes (yakekeywordextraction attribute)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.inputAnnotatorTypes"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.inputAnnotatorTypes"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "maxngrams (yakekeywordextraction attribute)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.maxNGrams"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.maxNGrams"]], "minngrams (yakekeywordextraction attribute)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.minNGrams"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.minNGrams"]], "nkeywords (yakekeywordextraction attribute)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.nKeywords"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.nKeywords"]], "name (yakekeywordextraction attribute)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.name"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.name"]], "outputannotatortype (yakekeywordextraction attribute)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.outputAnnotatorType"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.outputAnnotatorType"]], "setmaxngrams() (yakekeywordextraction method)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[122, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [371, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "stopwords (yakekeywordextraction attribute)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.stopWords"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.stopWords"]], "threshold (yakekeywordextraction attribute)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.threshold"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.threshold"]], "windowsize (yakekeywordextraction attribute)": [[122, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.windowSize"], [371, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.windowSize"]], "sparknlp.annotator.ld_dl": [[123, "module-sparknlp.annotator.ld_dl"], [372, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "coalescesentences (languagedetectordl attribute)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.coalesceSentences"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.coalesceSentences"]], "configprotobytes (languagedetectordl attribute)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.configProtoBytes"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.configProtoBytes"]], "inputannotatortypes (languagedetectordl attribute)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.inputAnnotatorTypes"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.inputAnnotatorTypes"]], "languages (languagedetectordl attribute)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.languages"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.languages"]], "name (languagedetectordl attribute)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.name"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.name"]], "outputannotatortype (languagedetectordl attribute)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.outputAnnotatorType"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.outputAnnotatorType"]], "pretrained() (languagedetectordl static method)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[124, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [373, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "threshold (languagedetectordl attribute)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.threshold"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.threshold"]], "thresholdlabel (languagedetectordl attribute)": [[124, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.thresholdLabel"], [373, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.thresholdLabel"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[125, "sparknlp.annotator.lemmatizer.Lemmatizer"], [374, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[125, "sparknlp.annotator.lemmatizer.LemmatizerModel"], [374, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "dictionary (lemmatizer attribute)": [[125, "sparknlp.annotator.lemmatizer.Lemmatizer.dictionary"], [374, "sparknlp.annotator.lemmatizer.Lemmatizer.dictionary"]], "formcol (lemmatizer attribute)": [[125, "sparknlp.annotator.lemmatizer.Lemmatizer.formCol"], [374, "sparknlp.annotator.lemmatizer.Lemmatizer.formCol"]], "inputannotatortypes (lemmatizer attribute)": [[125, "sparknlp.annotator.lemmatizer.Lemmatizer.inputAnnotatorTypes"], [374, "sparknlp.annotator.lemmatizer.Lemmatizer.inputAnnotatorTypes"]], "inputannotatortypes (lemmatizermodel attribute)": [[125, "sparknlp.annotator.lemmatizer.LemmatizerModel.inputAnnotatorTypes"], [374, "sparknlp.annotator.lemmatizer.LemmatizerModel.inputAnnotatorTypes"]], "lemmacol (lemmatizer attribute)": [[125, "sparknlp.annotator.lemmatizer.Lemmatizer.lemmaCol"], [374, "sparknlp.annotator.lemmatizer.Lemmatizer.lemmaCol"]], "name (lemmatizermodel attribute)": [[125, "sparknlp.annotator.lemmatizer.LemmatizerModel.name"], [374, "sparknlp.annotator.lemmatizer.LemmatizerModel.name"]], "outputannotatortype (lemmatizer attribute)": [[125, "sparknlp.annotator.lemmatizer.Lemmatizer.outputAnnotatorType"], [374, "sparknlp.annotator.lemmatizer.Lemmatizer.outputAnnotatorType"]], "outputannotatortype (lemmatizermodel attribute)": [[125, "sparknlp.annotator.lemmatizer.LemmatizerModel.outputAnnotatorType"], [374, "sparknlp.annotator.lemmatizer.LemmatizerModel.outputAnnotatorType"]], "pretrained() (lemmatizermodel static method)": [[125, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"], [374, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[125, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"], [374, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[125, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"], [374, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[125, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"], [374, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[125, "module-sparknlp.annotator.lemmatizer"], [374, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher": [[126, "module-sparknlp.annotator.matcher"], [377, "module-sparknlp.annotator.matcher"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "casesensitive (bigtextmatcher attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.caseSensitive"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.caseSensitive"]], "casesensitive (bigtextmatchermodel attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.caseSensitive"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.caseSensitive"]], "databases (bigtextmatchermodel attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.databases"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.databases"]], "entities (bigtextmatcher attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.entities"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.entities"]], "inputannotatortypes (bigtextmatcher attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.inputAnnotatorTypes"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (bigtextmatchermodel attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.inputAnnotatorTypes"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.inputAnnotatorTypes"]], "loadstorage() (bigtextmatchermodel static method)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "mergeoverlapping (bigtextmatcher attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.mergeOverlapping"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.mergeOverlapping"]], "mergeoverlapping (bigtextmatchermodel attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.mergeOverlapping"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.mergeOverlapping"]], "name (bigtextmatchermodel attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.name"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.name"]], "outputannotatortype (bigtextmatcher attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.outputAnnotatorType"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.outputAnnotatorType"]], "outputannotatortype (bigtextmatchermodel attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.outputAnnotatorType"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.outputAnnotatorType"]], "pretrained() (bigtextmatchermodel static method)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "searchtrie (bigtextmatchermodel attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.searchTrie"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.searchTrie"]], "setcasesensitive() (bigtextmatcher method)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[127, "module-sparknlp.annotator.matcher.big_text_matcher"], [375, "module-sparknlp.annotator.matcher.big_text_matcher"]], "tokenizer (bigtextmatcher attribute)": [[127, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.tokenizer"], [375, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.tokenizer"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcher"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "aggressivematching (datematcherutils attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.aggressiveMatching"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.aggressiveMatching"]], "anchordateday (datematcherutils attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateDay"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateDay"]], "anchordatemonth (datematcherutils attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateMonth"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateMonth"]], "anchordateyear (datematcherutils attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateYear"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateYear"]], "defaultdaywhenmissing (datematcherutils attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.defaultDayWhenMissing"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.defaultDayWhenMissing"]], "inputannotatortypes (datematcher attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcher.inputAnnotatorTypes"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcher.inputAnnotatorTypes"]], "inputformats (datematcherutils attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.inputFormats"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.inputFormats"]], "name (datematcher attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcher.name"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcher.name"]], "outputannotatortype (datematcher attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcher.outputAnnotatorType"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcher.outputAnnotatorType"]], "outputformat (datematcherutils attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.outputFormat"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.outputFormat"]], "readmonthfirst (datematcherutils attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.readMonthFirst"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.readMonthFirst"]], "relaxedfactorystrategy (datematcherutils attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.relaxedFactoryStrategy"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.relaxedFactoryStrategy"]], "setaggressivematching() (datematcherutils method)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"]], "setanchordateday() (datematcherutils method)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "setsourcelanguage() (datematcherutils method)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setSourceLanguage"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setSourceLanguage"]], "sourcelanguage (datematcherutils attribute)": [[128, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.sourceLanguage"], [376, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.sourceLanguage"]], "sparknlp.annotator.matcher.date_matcher": [[128, "module-sparknlp.annotator.matcher.date_matcher"], [376, "module-sparknlp.annotator.matcher.date_matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[129, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"], [378, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "inputannotatortypes (multidatematcher attribute)": [[129, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.inputAnnotatorTypes"], [378, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.inputAnnotatorTypes"]], "name (multidatematcher attribute)": [[129, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.name"], [378, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.name"]], "outputannotatortype (multidatematcher attribute)": [[129, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.outputAnnotatorType"], [378, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.outputAnnotatorType"]], "sparknlp.annotator.matcher.multi_date_matcher": [[129, "module-sparknlp.annotator.matcher.multi_date_matcher"], [378, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "delimiter (regexmatcher attribute)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.delimiter"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.delimiter"]], "externalrules (regexmatcher attribute)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.externalRules"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.externalRules"]], "inputannotatortypes (regexmatcher attribute)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.inputAnnotatorTypes"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.inputAnnotatorTypes"]], "inputannotatortypes (regexmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.inputAnnotatorTypes"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.inputAnnotatorTypes"]], "name (regexmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.name"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.name"]], "outputannotatortype (regexmatcher attribute)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.outputAnnotatorType"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.outputAnnotatorType"]], "outputannotatortype (regexmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.outputAnnotatorType"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.outputAnnotatorType"]], "rules (regexmatcher attribute)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.rules"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.rules"]], "setdelimiter() (regexmatcher method)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[130, "module-sparknlp.annotator.matcher.regex_matcher"], [379, "module-sparknlp.annotator.matcher.regex_matcher"]], "strategy (regexmatcher attribute)": [[130, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.strategy"], [379, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.strategy"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "buildfromtokens (textmatcher attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.buildFromTokens"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.buildFromTokens"]], "buildfromtokens (textmatchermodel attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.buildFromTokens"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.buildFromTokens"]], "casesensitive (textmatcher attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.caseSensitive"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.caseSensitive"]], "entities (textmatcher attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entities"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entities"]], "entityvalue (textmatcher attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entityValue"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entityValue"]], "entityvalue (textmatchermodel attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.entityValue"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.entityValue"]], "inputannotatortypes (textmatcher attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.inputAnnotatorTypes"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (textmatchermodel attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.inputAnnotatorTypes"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.inputAnnotatorTypes"]], "mergeoverlapping (textmatcher attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.mergeOverlapping"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.mergeOverlapping"]], "mergeoverlapping (textmatchermodel attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.mergeOverlapping"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.mergeOverlapping"]], "name (textmatchermodel attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.name"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.name"]], "outputannotatortype (textmatcher attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.outputAnnotatorType"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.outputAnnotatorType"]], "outputannotatortype (textmatchermodel attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.outputAnnotatorType"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.outputAnnotatorType"]], "pretrained() (textmatchermodel static method)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "searchtrie (textmatchermodel attribute)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.searchTrie"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.searchTrie"]], "setbuildfromtokens() (textmatcher method)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[131, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"], [380, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[131, "module-sparknlp.annotator.matcher.text_matcher"], [380, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[132, "sparknlp.annotator.n_gram_generator.NGramGenerator"], [381, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "delimiter (ngramgenerator attribute)": [[132, "sparknlp.annotator.n_gram_generator.NGramGenerator.delimiter"], [381, "sparknlp.annotator.n_gram_generator.NGramGenerator.delimiter"]], "enablecumulative (ngramgenerator attribute)": [[132, "sparknlp.annotator.n_gram_generator.NGramGenerator.enableCumulative"], [381, "sparknlp.annotator.n_gram_generator.NGramGenerator.enableCumulative"]], "inputannotatortypes (ngramgenerator attribute)": [[132, "sparknlp.annotator.n_gram_generator.NGramGenerator.inputAnnotatorTypes"], [381, "sparknlp.annotator.n_gram_generator.NGramGenerator.inputAnnotatorTypes"]], "n (ngramgenerator attribute)": [[132, "sparknlp.annotator.n_gram_generator.NGramGenerator.n"], [381, "sparknlp.annotator.n_gram_generator.NGramGenerator.n"]], "name (ngramgenerator attribute)": [[132, "sparknlp.annotator.n_gram_generator.NGramGenerator.name"], [381, "sparknlp.annotator.n_gram_generator.NGramGenerator.name"]], "outputannotatortype (ngramgenerator attribute)": [[132, "sparknlp.annotator.n_gram_generator.NGramGenerator.outputAnnotatorType"], [381, "sparknlp.annotator.n_gram_generator.NGramGenerator.outputAnnotatorType"]], "setdelimiter() (ngramgenerator method)": [[132, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"], [381, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[132, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"], [381, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[132, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"], [381, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[132, "module-sparknlp.annotator.n_gram_generator"], [381, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[133, "module-sparknlp.annotator.ner"], [382, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "entities (nerapproach attribute)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach.entities"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach.entities"]], "getlabelcolumn() (nerapproach method)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "labelcolumn (nerapproach attribute)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach.labelColumn"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach.labelColumn"]], "maxepochs (nerapproach attribute)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach.maxEpochs"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach.maxEpochs"]], "minepochs (nerapproach attribute)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach.minEpochs"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach.minEpochs"]], "randomseed (nerapproach attribute)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach.randomSeed"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach.randomSeed"]], "setentities() (nerapproach method)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[134, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"], [383, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[134, "module-sparknlp.annotator.ner.ner_approach"], [383, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[135, "sparknlp.annotator.ner.ner_converter.NerConverter"], [384, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "inputannotatortypes (nerconverter attribute)": [[135, "sparknlp.annotator.ner.ner_converter.NerConverter.inputAnnotatorTypes"], [384, "sparknlp.annotator.ner.ner_converter.NerConverter.inputAnnotatorTypes"]], "name (nerconverter attribute)": [[135, "sparknlp.annotator.ner.ner_converter.NerConverter.name"], [384, "sparknlp.annotator.ner.ner_converter.NerConverter.name"]], "nerhasnoschema (nerconverter attribute)": [[135, "sparknlp.annotator.ner.ner_converter.NerConverter.nerHasNoSchema"], [384, "sparknlp.annotator.ner.ner_converter.NerConverter.nerHasNoSchema"]], "outputannotatortype (nerconverter attribute)": [[135, "sparknlp.annotator.ner.ner_converter.NerConverter.outputAnnotatorType"], [384, "sparknlp.annotator.ner.ner_converter.NerConverter.outputAnnotatorType"]], "preserveposition (nerconverter attribute)": [[135, "sparknlp.annotator.ner.ner_converter.NerConverter.preservePosition"], [384, "sparknlp.annotator.ner.ner_converter.NerConverter.preservePosition"]], "setnerhasnoschema() (nerconverter method)": [[135, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"], [384, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[135, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"], [384, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[135, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"], [384, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[135, "module-sparknlp.annotator.ner.ner_converter"], [384, "module-sparknlp.annotator.ner.ner_converter"]], "whitelist (nerconverter attribute)": [[135, "sparknlp.annotator.ner.ner_converter.NerConverter.whiteList"], [384, "sparknlp.annotator.ner.ner_converter.NerConverter.whiteList"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfModel"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "c0 (nercrfapproach attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.c0"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.c0"]], "externalfeatures (nercrfapproach attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.externalFeatures"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.externalFeatures"]], "includeconfidence (nercrfapproach attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.includeConfidence"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.includeConfidence"]], "includeconfidence (nercrfmodel attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfModel.includeConfidence"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfModel.includeConfidence"]], "inputannotatortypes (nercrfapproach attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.inputAnnotatorTypes"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.inputAnnotatorTypes"]], "inputannotatortypes (nercrfmodel attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfModel.inputAnnotatorTypes"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfModel.inputAnnotatorTypes"]], "l2 (nercrfapproach attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.l2"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.l2"]], "losseps (nercrfapproach attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.lossEps"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.lossEps"]], "minw (nercrfapproach attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.minW"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.minW"]], "name (nercrfmodel attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfModel.name"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfModel.name"]], "outputannotatortype (nercrfapproach attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.outputAnnotatorType"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.outputAnnotatorType"]], "outputannotatortype (nercrfmodel attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfModel.outputAnnotatorType"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfModel.outputAnnotatorType"]], "pretrained() (nercrfmodel static method)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[136, "module-sparknlp.annotator.ner.ner_crf"], [385, "module-sparknlp.annotator.ner.ner_crf"]], "verbose (nercrfapproach attribute)": [[136, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.verbose"], [385, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.verbose"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "batchsize (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.batchSize"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.batchSize"]], "bestmodelmetric (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.bestModelMetric"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.bestModelMetric"]], "classes (nerdlmodel attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel.classes"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel.classes"]], "configprotobytes (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.configProtoBytes"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.configProtoBytes"]], "configprotobytes (nerdlmodel attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel.configProtoBytes"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel.configProtoBytes"]], "dropout (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.dropout"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.dropout"]], "enablememoryoptimizer (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.enableMemoryOptimizer"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.enableMemoryOptimizer"]], "graphfolder (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.graphFolder"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.graphFolder"]], "includeallconfidencescores (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeAllConfidenceScores"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeAllConfidenceScores"]], "includeallconfidencescores (nerdlmodel attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeAllConfidenceScores"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeAllConfidenceScores"]], "includeconfidence (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeConfidence"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeConfidence"]], "includeconfidence (nerdlmodel attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeConfidence"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeConfidence"]], "inputannotatortypes (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.inputAnnotatorTypes"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (nerdlmodel attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel.inputAnnotatorTypes"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel.inputAnnotatorTypes"]], "lr (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.lr"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.lr"]], "name (nerdlmodel attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel.name"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel.name"]], "outputannotatortype (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.outputAnnotatorType"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.outputAnnotatorType"]], "outputannotatortype (nerdlmodel attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel.outputAnnotatorType"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel.outputAnnotatorType"]], "po (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.po"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.po"]], "pretrained() (nerdlmodel static method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"], [386, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[137, "module-sparknlp.annotator.ner.ner_dl"], [386, "module-sparknlp.annotator.ner.ner_dl"]], "usebestmodel (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useBestModel"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useBestModel"]], "usecontrib (nerdlapproach attribute)": [[137, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useContrib"], [386, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useContrib"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[138, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"], [387, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "inputannotatortypes (neroverwriter attribute)": [[138, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.inputAnnotatorTypes"], [387, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.inputAnnotatorTypes"]], "name (neroverwriter attribute)": [[138, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.name"], [387, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.name"]], "nerwords (neroverwriter attribute)": [[138, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.nerWords"], [387, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.nerWords"]], "newnerentity (neroverwriter attribute)": [[138, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.newNerEntity"], [387, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.newNerEntity"]], "outputannotatortype (neroverwriter attribute)": [[138, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.outputAnnotatorType"], [387, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.outputAnnotatorType"]], "replaceentities (neroverwriter attribute)": [[138, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.replaceEntities"], [387, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.replaceEntities"]], "setnerwords() (neroverwriter method)": [[138, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"], [387, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[138, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"], [387, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[138, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"], [387, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[138, "module-sparknlp.annotator.ner.ner_overwriter"], [387, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[139, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"], [388, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[139, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"], [388, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[139, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.ignoreEntities"], [388, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[139, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.inputAnnotatorTypes"], [388, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[139, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"], [388, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[139, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.name"], [388, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[139, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.outputAnnotatorType"], [388, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[139, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.predictionThreshold"], [388, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[139, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"], [388, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[139, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"], [388, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[139, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"], [388, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[139, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [388, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[140, "sparknlp.annotator.normalizer.Normalizer"], [389, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[140, "sparknlp.annotator.normalizer.NormalizerModel"], [389, "sparknlp.annotator.normalizer.NormalizerModel"]], "cleanuppatterns (normalizer attribute)": [[140, "sparknlp.annotator.normalizer.Normalizer.cleanupPatterns"], [389, "sparknlp.annotator.normalizer.Normalizer.cleanupPatterns"]], "cleanuppatterns (normalizermodel attribute)": [[140, "sparknlp.annotator.normalizer.NormalizerModel.cleanupPatterns"], [389, "sparknlp.annotator.normalizer.NormalizerModel.cleanupPatterns"]], "inputannotatortypes (normalizer attribute)": [[140, "sparknlp.annotator.normalizer.Normalizer.inputAnnotatorTypes"], [389, "sparknlp.annotator.normalizer.Normalizer.inputAnnotatorTypes"]], "inputannotatortypes (normalizermodel attribute)": [[140, "sparknlp.annotator.normalizer.NormalizerModel.inputAnnotatorTypes"], [389, "sparknlp.annotator.normalizer.NormalizerModel.inputAnnotatorTypes"]], "lowercase (normalizer attribute)": [[140, "sparknlp.annotator.normalizer.Normalizer.lowercase"], [389, "sparknlp.annotator.normalizer.Normalizer.lowercase"]], "lowercase (normalizermodel attribute)": [[140, "sparknlp.annotator.normalizer.NormalizerModel.lowercase"], [389, "sparknlp.annotator.normalizer.NormalizerModel.lowercase"]], "maxlength (normalizer attribute)": [[140, "sparknlp.annotator.normalizer.Normalizer.maxLength"], [389, "sparknlp.annotator.normalizer.Normalizer.maxLength"]], "minlength (normalizer attribute)": [[140, "sparknlp.annotator.normalizer.Normalizer.minLength"], [389, "sparknlp.annotator.normalizer.Normalizer.minLength"]], "name (normalizermodel attribute)": [[140, "sparknlp.annotator.normalizer.NormalizerModel.name"], [389, "sparknlp.annotator.normalizer.NormalizerModel.name"]], "outputannotatortype (normalizer attribute)": [[140, "sparknlp.annotator.normalizer.Normalizer.outputAnnotatorType"], [389, "sparknlp.annotator.normalizer.Normalizer.outputAnnotatorType"]], "outputannotatortype (normalizermodel attribute)": [[140, "sparknlp.annotator.normalizer.NormalizerModel.outputAnnotatorType"], [389, "sparknlp.annotator.normalizer.NormalizerModel.outputAnnotatorType"]], "setcleanuppatterns() (normalizer method)": [[140, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"], [389, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[140, "sparknlp.annotator.normalizer.Normalizer.setLowercase"], [389, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[140, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"], [389, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[140, "sparknlp.annotator.normalizer.Normalizer.setMinLength"], [389, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[140, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"], [389, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "slangdictionary (normalizer attribute)": [[140, "sparknlp.annotator.normalizer.Normalizer.slangDictionary"], [389, "sparknlp.annotator.normalizer.Normalizer.slangDictionary"]], "slangmatchcase (normalizer attribute)": [[140, "sparknlp.annotator.normalizer.Normalizer.slangMatchCase"], [389, "sparknlp.annotator.normalizer.Normalizer.slangMatchCase"]], "slangmatchcase (normalizermodel attribute)": [[140, "sparknlp.annotator.normalizer.NormalizerModel.slangMatchCase"], [389, "sparknlp.annotator.normalizer.NormalizerModel.slangMatchCase"]], "sparknlp.annotator.normalizer": [[140, "module-sparknlp.annotator.normalizer"], [389, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[141, "module-sparknlp.annotator.openai"], [390, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "bestof (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.bestOf"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.bestOf"]], "echo (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.echo"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.echo"]], "frequencypenalty (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.frequencyPenalty"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.frequencyPenalty"]], "inputannotatortypes (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.inputAnnotatorTypes"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.inputAnnotatorTypes"]], "logitbias (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logitBias"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logitBias"]], "logprobs (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logprobs"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logprobs"]], "maxtokens (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.maxTokens"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.maxTokens"]], "model (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.model"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.model"]], "name (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.name"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.name"]], "numberofcompletions (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.numberOfCompletions"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.numberOfCompletions"]], "outputannotatortype (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.outputAnnotatorType"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.outputAnnotatorType"]], "presencepenalty (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.presencePenalty"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.presencePenalty"]], "setbestof() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[142, "module-sparknlp.annotator.openai.openai_completion"], [391, "module-sparknlp.annotator.openai.openai_completion"]], "stop (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.stop"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.stop"]], "suffix (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.suffix"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.suffix"]], "temperature (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.temperature"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.temperature"]], "topp (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.topP"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.topP"]], "user (openaicompletion attribute)": [[142, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.user"], [391, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.user"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[143, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"], [392, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "inputannotatortypes (openaiembeddings attribute)": [[143, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.inputAnnotatorTypes"], [392, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.inputAnnotatorTypes"]], "model (openaiembeddings attribute)": [[143, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.model"], [392, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.model"]], "name (openaiembeddings attribute)": [[143, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.name"], [392, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.name"]], "outputannotatortype (openaiembeddings attribute)": [[143, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.outputAnnotatorType"], [392, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.outputAnnotatorType"]], "setmodel() (openaiembeddings method)": [[143, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"], [392, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[143, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"], [392, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[143, "module-sparknlp.annotator.openai.openai_embeddings"], [392, "module-sparknlp.annotator.openai.openai_embeddings"]], "user (openaiembeddings attribute)": [[143, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.user"], [392, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.user"]], "sparknlp.annotator.param": [[144, "module-sparknlp.annotator.param"], [395, "module-sparknlp.annotator.param"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "batchsize (classifierencoder attribute)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.batchSize"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.batchSize"]], "configprotobytes (classifierencoder attribute)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.configProtoBytes"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.configProtoBytes"]], "labelcolumn (classifierencoder attribute)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.labelColumn"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.labelColumn"]], "lr (classifierencoder attribute)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.lr"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.lr"]], "maxepochs (classifierencoder attribute)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.maxEpochs"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.maxEpochs"]], "randomseed (classifierencoder attribute)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.randomSeed"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.randomSeed"]], "setbatchsize() (classifierencoder method)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[145, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"], [393, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[145, "module-sparknlp.annotator.param.classifier_encoder"], [393, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "enableoutputlogs (evaluationdlparams attribute)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.enableOutputLogs"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.enableOutputLogs"]], "evaluationlogextended (evaluationdlparams attribute)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.evaluationLogExtended"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.evaluationLogExtended"]], "outputlogspath (evaluationdlparams attribute)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.outputLogsPath"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.outputLogsPath"]], "setenableoutputlogs() (evaluationdlparams method)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[146, "module-sparknlp.annotator.param.evaluation_dl_params"], [394, "module-sparknlp.annotator.param.evaluation_dl_params"]], "testdataset (evaluationdlparams attribute)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.testDataset"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.testDataset"]], "validationsplit (evaluationdlparams attribute)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.validationSplit"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.validationSplit"]], "verbose (evaluationdlparams attribute)": [[146, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.verbose"], [394, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.verbose"]], "sparknlp.annotator.pos": [[147, "module-sparknlp.annotator.pos"], [396, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronApproach"], [397, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronModel"], [397, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"], [397, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "inputannotatortypes (perceptronapproach attribute)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronApproach.inputAnnotatorTypes"], [397, "sparknlp.annotator.pos.perceptron.PerceptronApproach.inputAnnotatorTypes"]], "inputannotatortypes (perceptronmodel attribute)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronModel.inputAnnotatorTypes"], [397, "sparknlp.annotator.pos.perceptron.PerceptronModel.inputAnnotatorTypes"]], "niterations (perceptronapproach attribute)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronApproach.nIterations"], [397, "sparknlp.annotator.pos.perceptron.PerceptronApproach.nIterations"]], "name (perceptronmodel attribute)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronModel.name"], [397, "sparknlp.annotator.pos.perceptron.PerceptronModel.name"]], "outputannotatortype (perceptronapproach attribute)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronApproach.outputAnnotatorType"], [397, "sparknlp.annotator.pos.perceptron.PerceptronApproach.outputAnnotatorType"]], "outputannotatortype (perceptronmodel attribute)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronModel.outputAnnotatorType"], [397, "sparknlp.annotator.pos.perceptron.PerceptronModel.outputAnnotatorType"]], "poscol (perceptronapproach attribute)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronApproach.posCol"], [397, "sparknlp.annotator.pos.perceptron.PerceptronApproach.posCol"]], "pretrained() (perceptronmodel static method)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"], [397, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"], [397, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[148, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"], [397, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[148, "module-sparknlp.annotator.pos.perceptron"], [397, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[149, "module-sparknlp.annotator.sentence"], [398, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "custombounds (sentencedetectorparams attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBounds"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBounds"]], "customboundsstrategy (sentencedetectorparams attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBoundsStrategy"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBoundsStrategy"]], "detectlists (sentencedetector attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.detectLists"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.detectLists"]], "explodesentences (sentencedetectorparams attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.explodeSentences"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.explodeSentences"]], "inputannotatortypes (sentencedetector attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.inputAnnotatorTypes"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.inputAnnotatorTypes"]], "maxlength (sentencedetectorparams attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.maxLength"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.maxLength"]], "minlength (sentencedetectorparams attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.minLength"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.minLength"]], "name (sentencedetector attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.name"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.name"]], "outputannotatortype (sentencedetector attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.outputAnnotatorType"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.outputAnnotatorType"]], "setcustombounds() (sentencedetector method)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[150, "module-sparknlp.annotator.sentence.sentence_detector"], [399, "module-sparknlp.annotator.sentence.sentence_detector"]], "splitlength (sentencedetectorparams attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.splitLength"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.splitLength"]], "useabbreviations (sentencedetectorparams attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useAbbreviations"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useAbbreviations"]], "usecustomboundsonly (sentencedetectorparams attribute)": [[150, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useCustomBoundsOnly"], [399, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useCustomBoundsOnly"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "custombounds (sentencedetectordlmodel attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.customBounds"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.customBounds"]], "epochsnumber (sentencedetectordlapproach attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.epochsNumber"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.epochsNumber"]], "explodesentences (sentencedetectordlapproach attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.explodeSentences"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.explodeSentences"]], "explodesentences (sentencedetectordlmodel attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.explodeSentences"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.explodeSentences"]], "impossiblepenultimates (sentencedetectordlapproach attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.impossiblePenultimates"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.impossiblePenultimates"]], "impossiblepenultimates (sentencedetectordlmodel attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.impossiblePenultimates"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.impossiblePenultimates"]], "inputannotatortypes (sentencedetectordlapproach attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.inputAnnotatorTypes"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentencedetectordlmodel attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.inputAnnotatorTypes"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.inputAnnotatorTypes"]], "maxlength (sentencedetectordlmodel attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.maxLength"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.maxLength"]], "minlength (sentencedetectordlmodel attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.minLength"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.minLength"]], "modelarchitecture (sentencedetectordlapproach attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.modelArchitecture"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.modelArchitecture"]], "modelarchitecture (sentencedetectordlmodel attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.modelArchitecture"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.modelArchitecture"]], "name (sentencedetectordlapproach attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.name"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.name"]], "name (sentencedetectordlmodel attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.name"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.name"]], "outputannotatortype (sentencedetectordlapproach attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputAnnotatorType"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputAnnotatorType"]], "outputannotatortype (sentencedetectordlmodel attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.outputAnnotatorType"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.outputAnnotatorType"]], "outputlogspath (sentencedetectordlapproach attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputLogsPath"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputLogsPath"]], "pretrained() (sentencedetectordlmodel static method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[151, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [400, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "splitlength (sentencedetectordlmodel attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.splitLength"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.splitLength"]], "usecustomboundsonly (sentencedetectordlmodel attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.useCustomBoundsOnly"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.useCustomBoundsOnly"]], "validationsplit (sentencedetectordlapproach attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.validationSplit"], [400, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.validationSplit"]], "sparknlp.annotator.sentiment": [[152, "module-sparknlp.annotator.sentiment"], [401, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "decrementmultiplier (sentimentdetector attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.decrementMultiplier"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.decrementMultiplier"]], "dictionary (sentimentdetector attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.dictionary"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.dictionary"]], "enablescore (sentimentdetector attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.enableScore"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.enableScore"]], "incrementmultiplier (sentimentdetector attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.incrementMultiplier"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.incrementMultiplier"]], "inputannotatortypes (sentimentdetector attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.inputAnnotatorTypes"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdetectormodel attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.inputAnnotatorTypes"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.inputAnnotatorTypes"]], "name (sentimentdetectormodel attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.name"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.name"]], "negativemultiplier (sentimentdetector attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.negativeMultiplier"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.negativeMultiplier"]], "outputannotatortype (sentimentdetector attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.outputAnnotatorType"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.outputAnnotatorType"]], "outputannotatortype (sentimentdetectormodel attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.outputAnnotatorType"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.outputAnnotatorType"]], "positivemultiplier (sentimentdetector attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.positiveMultiplier"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.positiveMultiplier"]], "positivemultiplier (sentimentdetectormodel attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.positiveMultiplier"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.positiveMultiplier"]], "reversemultiplier (sentimentdetector attribute)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.reverseMultiplier"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.reverseMultiplier"]], "setdictionary() (sentimentdetector method)": [[153, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"], [402, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[153, "module-sparknlp.annotator.sentiment.sentiment_detector"], [402, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "featurelimit (viveknsentimentapproach attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.featureLimit"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.featureLimit"]], "featurelimit (viveknsentimentmodel attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.featureLimit"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.featureLimit"]], "importantfeatureratio (viveknsentimentapproach attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.importantFeatureRatio"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.importantFeatureRatio"]], "importantfeatureratio (viveknsentimentmodel attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.importantFeatureRatio"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.importantFeatureRatio"]], "inputannotatortypes (viveknsentimentapproach attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.inputAnnotatorTypes"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.inputAnnotatorTypes"]], "inputannotatortypes (viveknsentimentmodel attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.inputAnnotatorTypes"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.inputAnnotatorTypes"]], "name (viveknsentimentmodel attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.name"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.name"]], "outputannotatortype (viveknsentimentapproach attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.outputAnnotatorType"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.outputAnnotatorType"]], "outputannotatortype (viveknsentimentmodel attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.outputAnnotatorType"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.outputAnnotatorType"]], "pretrained() (viveknsentimentmodel static method)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "prunecorpus (viveknsentimentapproach attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.pruneCorpus"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.pruneCorpus"]], "sentimentcol (viveknsentimentapproach attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.sentimentCol"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.sentimentCol"]], "setprunecorpus() (viveknsentimentapproach method)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[154, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [403, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "unimportantfeaturestep (viveknsentimentapproach attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.unimportantFeatureStep"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.unimportantFeatureStep"]], "unimportantfeaturestep (viveknsentimentmodel attribute)": [[154, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.unimportantFeatureStep"], [403, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[155, "module-sparknlp.annotator.seq2seq"], [410, "module-sparknlp.annotator.seq2seq"]], "autoggufmodel (class in sparknlp.annotator.seq2seq.auto_gguf_model)": [[156, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"], [404, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"]], "inputannotatortypes (autoggufmodel attribute)": [[156, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.inputAnnotatorTypes"], [404, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufmodel static method)": [[156, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"], [404, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"]], "name (autoggufmodel attribute)": [[156, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.name"], [404, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.name"]], "outputannotatortype (autoggufmodel attribute)": [[156, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.outputAnnotatorType"], [404, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.outputAnnotatorType"]], "pretrained() (autoggufmodel static method)": [[156, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"], [404, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[156, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [404, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "autoggufvisionmodel (class in sparknlp.annotator.seq2seq.auto_gguf_vision_model)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel"], [405, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel"]], "inputannotatortypes (autoggufvisionmodel attribute)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.inputAnnotatorTypes"], [405, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufvisionmodel static method)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.loadSavedModel"], [405, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.loadSavedModel"]], "name (autoggufvisionmodel attribute)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.name"], [405, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.name"]], "outputannotatortype (autoggufvisionmodel attribute)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.outputAnnotatorType"], [405, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.outputAnnotatorType"]], "pretrained() (autoggufvisionmodel static method)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.pretrained"], [405, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[157, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [405, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "beamsize (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.beamSize"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.beamSize"]], "configprotobytes (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.configProtoBytes"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.configProtoBytes"]], "dosample (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.doSample"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.doSample"]], "ignoretokenids (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.ignoreTokenIds"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.ignoreTokenIds"]], "inputannotatortypes (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.inputAnnotatorTypes"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (barttransformer static method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "maxoutputlength (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.maxOutputLength"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.maxOutputLength"]], "minoutputlength (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.minOutputLength"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.minOutputLength"]], "name (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.name"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.name"]], "norepeatngramsize (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.noRepeatNgramSize"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.noRepeatNgramSize"]], "outputannotatortype (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.outputAnnotatorType"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.outputAnnotatorType"]], "pretrained() (barttransformer static method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "repetitionpenalty (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.repetitionPenalty"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.repetitionPenalty"]], "setbeamsize() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[158, "module-sparknlp.annotator.seq2seq.bart_transformer"], [406, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "task (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.task"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.task"]], "temperature (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.temperature"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.temperature"]], "topk (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topK"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topK"]], "topp (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topP"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topP"]], "usecache (barttransformer attribute)": [[158, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.useCache"], [406, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.useCache"]], "coheretransformer (class in sparknlp.annotator.seq2seq.cohere_transformer)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer"]], "beamsize (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.beamSize"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.beamSize"]], "configprotobytes (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.configProtoBytes"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.configProtoBytes"]], "dosample (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.doSample"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.doSample"]], "ignoretokenids (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.ignoreTokenIds"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.ignoreTokenIds"]], "inputannotatortypes (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.inputAnnotatorTypes"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (coheretransformer static method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.loadSavedModel"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.loadSavedModel"]], "maxoutputlength (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.maxOutputLength"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.maxOutputLength"]], "minoutputlength (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.minOutputLength"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.minOutputLength"]], "name (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.name"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.name"]], "norepeatngramsize (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.noRepeatNgramSize"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.noRepeatNgramSize"]], "outputannotatortype (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.outputAnnotatorType"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.outputAnnotatorType"]], "pretrained() (coheretransformer static method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.pretrained"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.pretrained"]], "repetitionpenalty (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.repetitionPenalty"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.repetitionPenalty"]], "setbeamsize() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setBeamSize"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setBeamSize"]], "setconfigprotobytes() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setConfigProtoBytes"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setConfigProtoBytes"]], "setdosample() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setDoSample"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setDoSample"]], "setignoretokenids() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setIgnoreTokenIds"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMaxOutputLength"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMaxOutputLength"]], "setminoutputlength() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMinOutputLength"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMinOutputLength"]], "setnorepeatngramsize() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setNoRepeatNgramSize"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setRepetitionPenalty"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setRepetitionPenalty"]], "setstoptokenids() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setStopTokenIds"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setStopTokenIds"]], "settemperature() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTemperature"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTemperature"]], "settopk() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopK"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopK"]], "settopp() (coheretransformer method)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopP"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[159, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [407, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "stoptokenids (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.stopTokenIds"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.stopTokenIds"]], "temperature (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.temperature"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.temperature"]], "topk (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topK"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topK"]], "topp (coheretransformer attribute)": [[159, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topP"], [407, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topP"]], "cpmtransformer (class in sparknlp.annotator.seq2seq.cpm_transformer)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"]], "configprotobytes (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.configProtoBytes"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.configProtoBytes"]], "dosample (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.doSample"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.doSample"]], "ignoretokenids (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.ignoreTokenIds"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.ignoreTokenIds"]], "inputannotatortypes (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.inputAnnotatorTypes"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (cpmtransformer static method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"]], "maxoutputlength (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.maxOutputLength"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.maxOutputLength"]], "minoutputlength (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.minOutputLength"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.minOutputLength"]], "name (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.name"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.name"]], "norepeatngramsize (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.noRepeatNgramSize"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.noRepeatNgramSize"]], "outputannotatortype (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.outputAnnotatorType"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.outputAnnotatorType"]], "pretrained() (cpmtransformer static method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"]], "repetitionpenalty (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.repetitionPenalty"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.repetitionPenalty"]], "setconfigprotobytes() (cpmtransformer method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"]], "setdosample() (cpmtransformer method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"]], "setignoretokenids() (cpmtransformer method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (cpmtransformer method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"]], "setminoutputlength() (cpmtransformer method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (cpmtransformer method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (cpmtransformer method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"]], "settemperature() (cpmtransformer method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"]], "settopk() (cpmtransformer method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"]], "settopp() (cpmtransformer method)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[160, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [408, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "temperature (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.temperature"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.temperature"]], "topk (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topK"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topK"]], "topp (cpmtransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topP"], [408, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topP"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "configprotobytes (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.configProtoBytes"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.configProtoBytes"]], "dosample (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.doSample"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.doSample"]], "ignoretokenids (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.ignoreTokenIds"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.ignoreTokenIds"]], "inputannotatortypes (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.inputAnnotatorTypes"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (gpt2transformer static method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "maxoutputlength (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.maxOutputLength"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.maxOutputLength"]], "minoutputlength (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.minOutputLength"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.minOutputLength"]], "name (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.name"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.name"]], "norepeatngramsize (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.noRepeatNgramSize"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.noRepeatNgramSize"]], "outputannotatortype (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.outputAnnotatorType"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.outputAnnotatorType"]], "pretrained() (gpt2transformer static method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "repetitionpenalty (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.repetitionPenalty"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.repetitionPenalty"]], "setconfigprotobytes() (gpt2transformer method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[161, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [409, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "task (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.task"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.task"]], "temperature (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.temperature"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.temperature"]], "topk (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topK"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topK"]], "topp (gpt2transformer attribute)": [[161, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topP"], [409, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topP"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "configprotobytes (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.configProtoBytes"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.configProtoBytes"]], "dosample (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.doSample"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.doSample"]], "ignoretokenids (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.ignoreTokenIds"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.ignoreTokenIds"]], "inputannotatortypes (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.inputAnnotatorTypes"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama2transformer static method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "maxoutputlength (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.maxOutputLength"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.maxOutputLength"]], "minoutputlength (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.minOutputLength"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.minOutputLength"]], "name (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.name"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.name"]], "norepeatngramsize (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.noRepeatNgramSize"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.noRepeatNgramSize"]], "outputannotatortype (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.outputAnnotatorType"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.outputAnnotatorType"]], "pretrained() (llama2transformer static method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "repetitionpenalty (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.repetitionPenalty"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.repetitionPenalty"]], "setconfigprotobytes() (llama2transformer method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[162, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [411, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "temperature (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.temperature"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.temperature"]], "topk (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topK"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topK"]], "topp (llama2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topP"], [411, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topP"]], "llama3transformer (class in sparknlp.annotator.seq2seq.llama3_transformer)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"]], "beamsize (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.beamSize"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.beamSize"]], "configprotobytes (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.configProtoBytes"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.configProtoBytes"]], "dosample (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.doSample"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.doSample"]], "ignoretokenids (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.ignoreTokenIds"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.ignoreTokenIds"]], "inputannotatortypes (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.inputAnnotatorTypes"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama3transformer static method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"]], "maxoutputlength (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.maxOutputLength"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.maxOutputLength"]], "minoutputlength (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.minOutputLength"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.minOutputLength"]], "name (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.name"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.name"]], "norepeatngramsize (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.noRepeatNgramSize"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.noRepeatNgramSize"]], "outputannotatortype (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.outputAnnotatorType"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.outputAnnotatorType"]], "pretrained() (llama3transformer static method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"]], "repetitionpenalty (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.repetitionPenalty"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.repetitionPenalty"]], "setbeamsize() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"]], "setconfigprotobytes() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"]], "setdosample() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"]], "setignoretokenids() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"]], "setminoutputlength() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"]], "setstoptokenids() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"]], "settemperature() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"]], "settopk() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"]], "settopp() (llama3transformer method)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[163, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [412, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "stoptokenids (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.stopTokenIds"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.stopTokenIds"]], "temperature (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.temperature"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.temperature"]], "topk (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topK"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topK"]], "topp (llama3transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topP"], [412, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topP"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "beamsize (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.beamSize"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.beamSize"]], "configprotobytes (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.configProtoBytes"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.configProtoBytes"]], "dosample (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.doSample"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.doSample"]], "ignoretokenids (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.ignoreTokenIds"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.ignoreTokenIds"]], "inputannotatortypes (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.inputAnnotatorTypes"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (m2m100transformer static method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "maxoutputlength (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.maxOutputLength"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.maxOutputLength"]], "minoutputlength (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.minOutputLength"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.minOutputLength"]], "name (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.name"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.name"]], "norepeatngramsize (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.noRepeatNgramSize"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.noRepeatNgramSize"]], "outputannotatortype (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.outputAnnotatorType"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.outputAnnotatorType"]], "pretrained() (m2m100transformer static method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "repetitionpenalty (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.repetitionPenalty"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.repetitionPenalty"]], "setbeamsize() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[164, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [413, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "srclang (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.srcLang"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.srcLang"]], "temperature (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.temperature"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.temperature"]], "tgtlang (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.tgtLang"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.tgtLang"]], "topk (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topK"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topK"]], "topp (m2m100transformer attribute)": [[164, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topP"], [413, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topP"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "configprotobytes (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.configProtoBytes"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.configProtoBytes"]], "dosample (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.doSample"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.doSample"]], "ignoretokenids (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.ignoreTokenIds"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.ignoreTokenIds"]], "inputannotatortypes (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.inputAnnotatorTypes"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.inputAnnotatorTypes"]], "langid (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.langId"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.langId"]], "loadsavedmodel() (mariantransformer static method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "maxinputlength (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxInputLength"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxInputLength"]], "maxoutputlength (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxOutputLength"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxOutputLength"]], "name (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.name"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.name"]], "norepeatngramsize (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.noRepeatNgramSize"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.noRepeatNgramSize"]], "outputannotatortype (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.outputAnnotatorType"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.outputAnnotatorType"]], "pretrained() (mariantransformer static method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "repetitionpenalty (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.repetitionPenalty"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.repetitionPenalty"]], "setconfigprotobytes() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[165, "module-sparknlp.annotator.seq2seq.marian_transformer"], [414, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "temperature (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.temperature"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.temperature"]], "topk (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topK"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topK"]], "topp (mariantransformer attribute)": [[165, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topP"], [414, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topP"]], "mistraltransformer (class in sparknlp.annotator.seq2seq.mistral_transformer)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"]], "configprotobytes (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.configProtoBytes"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.configProtoBytes"]], "dosample (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.doSample"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.doSample"]], "ignoretokenids (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.ignoreTokenIds"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.ignoreTokenIds"]], "inputannotatortypes (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.inputAnnotatorTypes"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (mistraltransformer static method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"]], "maxoutputlength (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.maxOutputLength"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.maxOutputLength"]], "minoutputlength (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.minOutputLength"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.minOutputLength"]], "name (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.name"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.name"]], "norepeatngramsize (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.noRepeatNgramSize"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.noRepeatNgramSize"]], "outputannotatortype (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.outputAnnotatorType"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.outputAnnotatorType"]], "pretrained() (mistraltransformer static method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"]], "repetitionpenalty (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.repetitionPenalty"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.repetitionPenalty"]], "setconfigprotobytes() (mistraltransformer method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"]], "setdosample() (mistraltransformer method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"]], "setignoretokenids() (mistraltransformer method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (mistraltransformer method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"]], "setminoutputlength() (mistraltransformer method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"]], "setnorepeatngramsize() (mistraltransformer method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mistraltransformer method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"]], "settemperature() (mistraltransformer method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"]], "settopk() (mistraltransformer method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"]], "settopp() (mistraltransformer method)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[166, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [415, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "temperature (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.temperature"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.temperature"]], "topk (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topK"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topK"]], "topp (mistraltransformer attribute)": [[166, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topP"], [415, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topP"]], "nllbtransformer (class in sparknlp.annotator.seq2seq.nllb_transformer)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"]], "beamsize (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.beamSize"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.beamSize"]], "configprotobytes (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.configProtoBytes"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.configProtoBytes"]], "dosample (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.doSample"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.doSample"]], "ignoretokenids (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.ignoreTokenIds"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.ignoreTokenIds"]], "inputannotatortypes (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.inputAnnotatorTypes"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (nllbtransformer static method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"]], "maxoutputlength (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.maxOutputLength"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.maxOutputLength"]], "minoutputlength (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.minOutputLength"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.minOutputLength"]], "name (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.name"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.name"]], "norepeatngramsize (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.noRepeatNgramSize"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.noRepeatNgramSize"]], "outputannotatortype (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.outputAnnotatorType"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.outputAnnotatorType"]], "pretrained() (nllbtransformer static method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"]], "repetitionpenalty (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.repetitionPenalty"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.repetitionPenalty"]], "setbeamsize() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"]], "setconfigprotobytes() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"]], "setdosample() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"]], "setignoretokenids() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"]], "setminoutputlength() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"]], "setnorepeatngramsize() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"]], "setsrclang() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"]], "settemperature() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"]], "settgtlang() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"]], "settopk() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"]], "settopp() (nllbtransformer method)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[167, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [416, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "srclang (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.srcLang"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.srcLang"]], "temperature (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.temperature"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.temperature"]], "tgtlang (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.tgtLang"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.tgtLang"]], "topk (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topK"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topK"]], "topp (nllbtransformer attribute)": [[167, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topP"], [416, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topP"]], "olmotransformer (class in sparknlp.annotator.seq2seq.olmo_transformer)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer"]], "configprotobytes (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.configProtoBytes"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.configProtoBytes"]], "dosample (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.doSample"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.doSample"]], "ignoretokenids (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.ignoreTokenIds"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.ignoreTokenIds"]], "inputannotatortypes (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.inputAnnotatorTypes"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (olmotransformer static method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.loadSavedModel"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.loadSavedModel"]], "maxoutputlength (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.maxOutputLength"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.maxOutputLength"]], "minoutputlength (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.minOutputLength"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.minOutputLength"]], "name (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.name"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.name"]], "norepeatngramsize (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.noRepeatNgramSize"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.noRepeatNgramSize"]], "outputannotatortype (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.outputAnnotatorType"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.outputAnnotatorType"]], "pretrained() (olmotransformer static method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.pretrained"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.pretrained"]], "repetitionpenalty (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.repetitionPenalty"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.repetitionPenalty"]], "setconfigprotobytes() (olmotransformer method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setConfigProtoBytes"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setConfigProtoBytes"]], "setdosample() (olmotransformer method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setDoSample"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setDoSample"]], "setignoretokenids() (olmotransformer method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setIgnoreTokenIds"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (olmotransformer method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMaxOutputLength"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMaxOutputLength"]], "setminoutputlength() (olmotransformer method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMinOutputLength"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMinOutputLength"]], "setnorepeatngramsize() (olmotransformer method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setNoRepeatNgramSize"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (olmotransformer method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setRepetitionPenalty"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setRepetitionPenalty"]], "settemperature() (olmotransformer method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTemperature"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTemperature"]], "settopk() (olmotransformer method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopK"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopK"]], "settopp() (olmotransformer method)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopP"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[168, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [417, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "temperature (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.temperature"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.temperature"]], "topk (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topK"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topK"]], "topp (olmotransformer attribute)": [[168, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topP"], [417, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topP"]], "phi2transformer (class in sparknlp.annotator.seq2seq.phi2_transformer)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"]], "configprotobytes (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.configProtoBytes"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.configProtoBytes"]], "dosample (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.doSample"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.doSample"]], "ignoretokenids (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.ignoreTokenIds"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.ignoreTokenIds"]], "inputannotatortypes (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.inputAnnotatorTypes"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi2transformer static method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"]], "maxoutputlength (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.maxOutputLength"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.maxOutputLength"]], "minoutputlength (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.minOutputLength"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.minOutputLength"]], "name (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.name"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.name"]], "norepeatngramsize (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.noRepeatNgramSize"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.noRepeatNgramSize"]], "outputannotatortype (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.outputAnnotatorType"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.outputAnnotatorType"]], "pretrained() (phi2transformer static method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"]], "repetitionpenalty (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.repetitionPenalty"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi2transformer method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"]], "setdosample() (phi2transformer method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"]], "setignoretokenids() (phi2transformer method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi2transformer method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"]], "setminoutputlength() (phi2transformer method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi2transformer method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi2transformer method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"]], "settemperature() (phi2transformer method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"]], "settopk() (phi2transformer method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"]], "settopp() (phi2transformer method)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[169, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [418, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "temperature (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.temperature"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.temperature"]], "topk (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topK"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topK"]], "topp (phi2transformer attribute)": [[169, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topP"], [418, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topP"]], "phi3transformer (class in sparknlp.annotator.seq2seq.phi3_transformer)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"]], "configprotobytes (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.configProtoBytes"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.configProtoBytes"]], "dosample (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.doSample"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.doSample"]], "ignoretokenids (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.ignoreTokenIds"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.ignoreTokenIds"]], "inputannotatortypes (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.inputAnnotatorTypes"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi3transformer static method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"]], "maxoutputlength (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.maxOutputLength"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.maxOutputLength"]], "minoutputlength (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.minOutputLength"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.minOutputLength"]], "name (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.name"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.name"]], "norepeatngramsize (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.noRepeatNgramSize"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.noRepeatNgramSize"]], "outputannotatortype (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.outputAnnotatorType"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.outputAnnotatorType"]], "pretrained() (phi3transformer static method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"]], "repetitionpenalty (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.repetitionPenalty"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi3transformer method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"]], "setdosample() (phi3transformer method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"]], "setignoretokenids() (phi3transformer method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3transformer method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"]], "setminoutputlength() (phi3transformer method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi3transformer method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3transformer method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"]], "settemperature() (phi3transformer method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"]], "settopk() (phi3transformer method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"]], "settopp() (phi3transformer method)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[170, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [419, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "temperature (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.temperature"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.temperature"]], "topk (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topK"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topK"]], "topp (phi3transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topP"], [419, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topP"]], "qwentransformer (class in sparknlp.annotator.seq2seq.qwen_transformer)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"]], "configprotobytes (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.configProtoBytes"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.configProtoBytes"]], "dosample (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.doSample"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.doSample"]], "ignoretokenids (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.ignoreTokenIds"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.ignoreTokenIds"]], "inputannotatortypes (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.inputAnnotatorTypes"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwentransformer static method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"]], "maxoutputlength (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.maxOutputLength"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.maxOutputLength"]], "minoutputlength (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.minOutputLength"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.minOutputLength"]], "name (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.name"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.name"]], "norepeatngramsize (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.noRepeatNgramSize"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.noRepeatNgramSize"]], "outputannotatortype (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.outputAnnotatorType"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.outputAnnotatorType"]], "pretrained() (qwentransformer static method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"]], "repetitionpenalty (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.repetitionPenalty"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.repetitionPenalty"]], "setconfigprotobytes() (qwentransformer method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"]], "setdosample() (qwentransformer method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"]], "setignoretokenids() (qwentransformer method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwentransformer method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"]], "setminoutputlength() (qwentransformer method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwentransformer method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwentransformer method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"]], "settemperature() (qwentransformer method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"]], "settopk() (qwentransformer method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"]], "settopp() (qwentransformer method)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[171, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [420, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "temperature (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.temperature"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.temperature"]], "topk (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topK"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topK"]], "topp (qwentransformer attribute)": [[171, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topP"], [420, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topP"]], "starcodertransformer (class in sparknlp.annotator.seq2seq.starcoder_transformer)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"]], "configprotobytes (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.configProtoBytes"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.configProtoBytes"]], "dosample (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.doSample"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.doSample"]], "ignoretokenids (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.ignoreTokenIds"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.ignoreTokenIds"]], "inputannotatortypes (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.inputAnnotatorTypes"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (starcodertransformer static method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"]], "maxoutputlength (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.maxOutputLength"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.maxOutputLength"]], "minoutputlength (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.minOutputLength"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.minOutputLength"]], "name (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.name"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.name"]], "norepeatngramsize (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.noRepeatNgramSize"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.noRepeatNgramSize"]], "outputannotatortype (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.outputAnnotatorType"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.outputAnnotatorType"]], "pretrained() (starcodertransformer static method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"]], "repetitionpenalty (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.repetitionPenalty"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.repetitionPenalty"]], "setconfigprotobytes() (starcodertransformer method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"]], "setdosample() (starcodertransformer method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"]], "setignoretokenids() (starcodertransformer method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (starcodertransformer method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"]], "setminoutputlength() (starcodertransformer method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"]], "setnorepeatngramsize() (starcodertransformer method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (starcodertransformer method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"]], "settemperature() (starcodertransformer method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"]], "settopk() (starcodertransformer method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"]], "settopp() (starcodertransformer method)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[172, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [421, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "temperature (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.temperature"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.temperature"]], "topk (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topK"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topK"]], "topp (starcodertransformer attribute)": [[172, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topP"], [421, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topP"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "configprotobytes (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.configProtoBytes"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.configProtoBytes"]], "dosample (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.doSample"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.doSample"]], "ignoretokenids (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.ignoreTokenIds"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.ignoreTokenIds"]], "inputannotatortypes (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.inputAnnotatorTypes"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (t5transformer static method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "maxnewtokens (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxNewTokens"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxNewTokens"]], "maxoutputlength (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxOutputLength"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxOutputLength"]], "minoutputlength (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.minOutputLength"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.minOutputLength"]], "name (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.name"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.name"]], "norepeatngramsize (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.noRepeatNgramSize"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.noRepeatNgramSize"]], "outputannotatortype (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.outputAnnotatorType"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.outputAnnotatorType"]], "pretrained() (t5transformer static method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "repetitionpenalty (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.repetitionPenalty"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.repetitionPenalty"]], "setconfigprotobytes() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[173, "module-sparknlp.annotator.seq2seq.t5_transformer"], [422, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "stopateos (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.stopAtEos"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.stopAtEos"]], "task (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.task"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.task"]], "temperature (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.temperature"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.temperature"]], "topk (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topK"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topK"]], "topp (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topP"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topP"]], "usecache (t5transformer attribute)": [[173, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.useCache"], [422, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.useCache"]], "sparknlp.annotator.similarity": [[174, "module-sparknlp.annotator.similarity"], [424, "module-sparknlp.annotator.similarity"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "aggregationmethod (documentsimilarityrankerapproach attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.aggregationMethod"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.aggregationMethod"]], "asretriever() (documentsimilarityrankerapproach method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "asretrieverquery (documentsimilarityrankerapproach attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetrieverQuery"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetrieverQuery"]], "bucketlength (documentsimilarityrankerapproach attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.bucketLength"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.bucketLength"]], "extractnearestneighbor (documentsimilarityrankerfinisher attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.extractNearestNeighbor"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.extractNearestNeighbor"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "identityranking (documentsimilarityrankerapproach attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.identityRanking"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.identityRanking"]], "inputannotatortypes (documentsimilarityrankerapproach attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.inputAnnotatorTypes"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentsimilarityrankermodel attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.inputAnnotatorTypes"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.inputAnnotatorTypes"]], "inputcols (documentsimilarityrankerfinisher attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.inputCols"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.inputCols"]], "name (documentsimilarityrankerfinisher attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.name"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.name"]], "name (documentsimilarityrankermodel attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.name"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.name"]], "numhashtables (documentsimilarityrankerapproach attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numHashTables"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numHashTables"]], "numberofneighbours (documentsimilarityrankerapproach attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numberOfNeighbours"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numberOfNeighbours"]], "outputannotatortype (documentsimilarityrankerapproach attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.outputAnnotatorType"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.outputAnnotatorType"]], "outputannotatortype (documentsimilarityrankermodel attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.outputAnnotatorType"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.outputAnnotatorType"]], "outputcols (documentsimilarityrankerfinisher attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.outputCols"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.outputCols"]], "setaggregationmethod() (documentsimilarityrankerapproach method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setparams() (documentsimilarityrankerfinisher method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setParams"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setParams"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "similaritymethod (documentsimilarityrankerapproach attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.similarityMethod"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.similarityMethod"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[175, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [423, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "visibledistances (documentsimilarityrankerapproach attribute)": [[175, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.visibleDistances"], [423, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.visibleDistances"]], "sparknlp.annotator.spell_check": [[176, "module-sparknlp.annotator.spell_check"], [426, "module-sparknlp.annotator.spell_check"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "batchsize (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.batchSize"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.batchSize"]], "casestrategy (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.caseStrategy"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.caseStrategy"]], "casestrategy (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.caseStrategy"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.caseStrategy"]], "classcount (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.classCount"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.classCount"]], "classes (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.classes"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.classes"]], "comparelowcase (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.compareLowcase"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.compareLowcase"]], "compoundcount (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.compoundCount"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.compoundCount"]], "configprotobytes (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.configProtoBytes"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.configProtoBytes"]], "configprotobytes (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.configProtoBytes"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.configProtoBytes"]], "correctsymbols (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.correctSymbols"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.correctSymbols"]], "epochs (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.epochs"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.epochs"]], "errorthreshold (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.errorThreshold"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.errorThreshold"]], "errorthreshold (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.errorThreshold"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.errorThreshold"]], "finalrate (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.finalRate"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.finalRate"]], "gamma (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.gamma"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.gamma"]], "getwordclasses() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "graphfolder (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.graphFolder"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.graphFolder"]], "idsvocab (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.idsVocab"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.idsVocab"]], "initialrate (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.initialRate"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.initialRate"]], "inputannotatortypes (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.inputAnnotatorTypes"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.inputAnnotatorTypes"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.inputAnnotatorTypes"]], "languagemodelclasses (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.languageModelClasses"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.languageModelClasses"]], "maxcandidates (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxCandidates"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxCandidates"]], "maxcandidates (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxCandidates"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxCandidates"]], "maxsentlen (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxSentLen"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxSentLen"]], "maxwindowlen (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxWindowLen"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxWindowLen"]], "maxwindowlen (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxWindowLen"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxWindowLen"]], "mincount (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.minCount"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.minCount"]], "name (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.name"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.name"]], "name (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.name"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.name"]], "outputannotatortype (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.outputAnnotatorType"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.outputAnnotatorType"]], "outputannotatortype (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.outputAnnotatorType"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.outputAnnotatorType"]], "pretrained() (contextspellcheckermodel static method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[177, "module-sparknlp.annotator.spell_check.context_spell_checker"], [425, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "tradeoff (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.tradeoff"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.tradeoff"]], "tradeoff (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.tradeoff"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.tradeoff"]], "updateregexclass() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "validationfraction (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.validationFraction"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.validationFraction"]], "vocabfreq (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabFreq"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabFreq"]], "vocabids (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabIds"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabIds"]], "weighteddistpath (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.weightedDistPath"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.weightedDistPath"]], "wordmaxdistance (contextspellcheckerapproach attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.wordMaxDistance"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.wordMaxDistance"]], "wordmaxdistance (contextspellcheckermodel attribute)": [[177, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.wordMaxDistance"], [425, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.wordMaxDistance"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "casesensitive (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.caseSensitive"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.caseSensitive"]], "dictionary (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary"]], "doublevariants (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.doubleVariants"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.doubleVariants"]], "dupslimit (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dupsLimit"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dupsLimit"]], "frequencypriority (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.frequencyPriority"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.frequencyPriority"]], "inputannotatortypes (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.inputAnnotatorTypes"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.inputAnnotatorTypes"]], "inputannotatortypes (norvigsweetingmodel attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.inputAnnotatorTypes"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.inputAnnotatorTypes"]], "intersections (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.intersections"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.intersections"]], "name (norvigsweetingmodel attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.name"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.name"]], "outputannotatortype (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.outputAnnotatorType"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.outputAnnotatorType"]], "outputannotatortype (norvigsweetingmodel attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.outputAnnotatorType"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.outputAnnotatorType"]], "pretrained() (norvigsweetingmodel static method)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "reductlimit (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.reductLimit"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.reductLimit"]], "setcasesensitive() (norvigsweetingapproach method)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "shortcircuit (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.shortCircuit"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.shortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[178, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [427, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "vowelswaplimit (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.vowelSwapLimit"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.vowelSwapLimit"]], "wordsizeignore (norvigsweetingapproach attribute)": [[178, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.wordSizeIgnore"], [427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.wordSizeIgnore"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "corpus (symmetricdeleteapproach attribute)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.corpus"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.corpus"]], "deletesthreshold (symmetricdeleteapproach attribute)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.deletesThreshold"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.deletesThreshold"]], "dictionary (symmetricdeleteapproach attribute)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary"]], "dupslimit (symmetricdeleteapproach attribute)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dupsLimit"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dupsLimit"]], "frequencythreshold (symmetricdeleteapproach attribute)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.frequencyThreshold"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.frequencyThreshold"]], "inputannotatortypes (symmetricdeleteapproach attribute)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.inputAnnotatorTypes"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.inputAnnotatorTypes"]], "inputannotatortypes (symmetricdeletemodel attribute)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.inputAnnotatorTypes"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.inputAnnotatorTypes"]], "maxeditdistance (symmetricdeleteapproach attribute)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.maxEditDistance"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.maxEditDistance"]], "name (symmetricdeletemodel attribute)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.name"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.name"]], "outputannotatortype (symmetricdeleteapproach attribute)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.outputAnnotatorType"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.outputAnnotatorType"]], "outputannotatortype (symmetricdeletemodel attribute)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.outputAnnotatorType"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.outputAnnotatorType"]], "pretrained() (symmetricdeletemodel static method)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[179, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"], [428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[179, "module-sparknlp.annotator.spell_check.symmetric_delete"], [428, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[180, "sparknlp.annotator.stemmer.Stemmer"], [429, "sparknlp.annotator.stemmer.Stemmer"]], "inputannotatortypes (stemmer attribute)": [[180, "sparknlp.annotator.stemmer.Stemmer.inputAnnotatorTypes"], [429, "sparknlp.annotator.stemmer.Stemmer.inputAnnotatorTypes"]], "language (stemmer attribute)": [[180, "sparknlp.annotator.stemmer.Stemmer.language"], [429, "sparknlp.annotator.stemmer.Stemmer.language"]], "name (stemmer attribute)": [[180, "sparknlp.annotator.stemmer.Stemmer.name"], [429, "sparknlp.annotator.stemmer.Stemmer.name"]], "outputannotatortype (stemmer attribute)": [[180, "sparknlp.annotator.stemmer.Stemmer.outputAnnotatorType"], [429, "sparknlp.annotator.stemmer.Stemmer.outputAnnotatorType"]], "sparknlp.annotator.stemmer": [[180, "module-sparknlp.annotator.stemmer"], [429, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "casesensitive (stopwordscleaner attribute)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.caseSensitive"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.caseSensitive"]], "inputannotatortypes (stopwordscleaner attribute)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.inputAnnotatorTypes"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.inputAnnotatorTypes"]], "loaddefaultstopwords() (stopwordscleaner method)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "locale (stopwordscleaner attribute)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.locale"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.locale"]], "name (stopwordscleaner attribute)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.name"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.name"]], "outputannotatortype (stopwordscleaner attribute)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.outputAnnotatorType"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.outputAnnotatorType"]], "pretrained() (stopwordscleaner static method)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[181, "module-sparknlp.annotator.stop_words_cleaner"], [430, "module-sparknlp.annotator.stop_words_cleaner"]], "stopwords (stopwordscleaner attribute)": [[181, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.stopWords"], [430, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.stopWords"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "graphfile (tfnerdlgraphbuilder attribute)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFile"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFile"]], "graphfolder (tfnerdlgraphbuilder attribute)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFolder"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFolder"]], "hiddenunitsnumber (tfnerdlgraphbuilder attribute)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.hiddenUnitsNumber"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.hiddenUnitsNumber"]], "inputannotatortypes (tfnerdlgraphbuilder attribute)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputAnnotatorTypes"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputAnnotatorTypes"]], "inputcols (tfnerdlgraphbuilder attribute)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputCols"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputCols"]], "inputcolsvalidation() (tfnerdlgraphbuilder method)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputColsValidation"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputColsValidation"]], "labelcolumn (tfnerdlgraphbuilder attribute)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.labelColumn"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.labelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[182, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"], [431, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[182, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [431, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token": [[183, "module-sparknlp.annotator.token"], [433, "module-sparknlp.annotator.token"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[184, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"], [432, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[184, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"], [432, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "inputannotatortypes (chunktokenizer attribute)": [[184, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.inputAnnotatorTypes"], [432, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (chunktokenizermodel attribute)": [[184, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.inputAnnotatorTypes"], [432, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.inputAnnotatorTypes"]], "name (chunktokenizer attribute)": [[184, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.name"], [432, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.name"]], "name (chunktokenizermodel attribute)": [[184, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.name"], [432, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.name"]], "sparknlp.annotator.token.chunk_tokenizer": [[184, "module-sparknlp.annotator.token.chunk_tokenizer"], [432, "module-sparknlp.annotator.token.chunk_tokenizer"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "infixes (recursivetokenizer attribute)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.infixes"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.infixes"]], "inputannotatortypes (recursivetokenizer attribute)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.inputAnnotatorTypes"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (recursivetokenizermodel attribute)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.inputAnnotatorTypes"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.inputAnnotatorTypes"]], "name (recursivetokenizer attribute)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.name"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.name"]], "name (recursivetokenizermodel attribute)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.name"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.name"]], "outputannotatortype (recursivetokenizer attribute)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.outputAnnotatorType"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.outputAnnotatorType"]], "outputannotatortype (recursivetokenizermodel attribute)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.outputAnnotatorType"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.outputAnnotatorType"]], "prefixes (recursivetokenizer attribute)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.prefixes"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.prefixes"]], "setinfixes() (recursivetokenizer method)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[185, "module-sparknlp.annotator.token.recursive_tokenizer"], [434, "module-sparknlp.annotator.token.recursive_tokenizer"]], "suffixes (recursivetokenizer attribute)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.suffixes"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.suffixes"]], "whitelist (recursivetokenizer attribute)": [[185, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.whitelist"], [434, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.whitelist"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "inputannotatortypes (regextokenizer attribute)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.inputAnnotatorTypes"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.inputAnnotatorTypes"]], "maxlength (regextokenizer attribute)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.maxLength"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.maxLength"]], "minlength (regextokenizer attribute)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.minLength"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.minLength"]], "name (regextokenizer attribute)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.name"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.name"]], "outputannotatortype (regextokenizer attribute)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.outputAnnotatorType"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.outputAnnotatorType"]], "pattern (regextokenizer attribute)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.pattern"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.pattern"]], "positionalmask (regextokenizer attribute)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.positionalMask"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.positionalMask"]], "preserveposition (regextokenizer attribute)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.preservePosition"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.preservePosition"]], "setmaxlength() (regextokenizer method)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[186, "module-sparknlp.annotator.token.regex_tokenizer"], [435, "module-sparknlp.annotator.token.regex_tokenizer"]], "tolowercase (regextokenizer attribute)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.toLowercase"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.toLowercase"]], "trimwhitespace (regextokenizer attribute)": [[186, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.trimWhitespace"], [435, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.trimWhitespace"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "casesensitiveexceptions (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.caseSensitiveExceptions"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.caseSensitiveExceptions"]], "casesensitiveexceptions (tokenizermodel attribute)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.caseSensitiveExceptions"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.caseSensitiveExceptions"]], "contextchars (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.contextChars"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.contextChars"]], "exceptions (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptions"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptions"]], "exceptions (tokenizermodel attribute)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.exceptions"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.exceptions"]], "exceptionspath (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptionsPath"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptionsPath"]], "getcasesensitiveexceptions() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "infixpatterns (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.infixPatterns"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.infixPatterns"]], "inputannotatortypes (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.inputAnnotatorTypes"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.inputAnnotatorTypes"]], "inputannotatortypes (tokenizermodel attribute)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.inputAnnotatorTypes"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.inputAnnotatorTypes"]], "maxlength (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.maxLength"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.maxLength"]], "minlength (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.minLength"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.minLength"]], "name (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.name"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.name"]], "name (tokenizermodel attribute)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.name"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.name"]], "outputannotatortype (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.outputAnnotatorType"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.outputAnnotatorType"]], "outputannotatortype (tokenizermodel attribute)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.outputAnnotatorType"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.outputAnnotatorType"]], "prefixpattern (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.prefixPattern"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.prefixPattern"]], "pretrained() (tokenizermodel static method)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "rules (tokenizermodel attribute)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.rules"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.rules"]], "setcasesensitiveexceptions() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[187, "module-sparknlp.annotator.token.tokenizer"], [436, "module-sparknlp.annotator.token.tokenizer"]], "splitchars (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.splitChars"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.splitChars"]], "splitchars (tokenizermodel attribute)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitChars"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitChars"]], "splitpattern (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.splitPattern"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.splitPattern"]], "splitpattern (tokenizermodel attribute)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitPattern"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitPattern"]], "suffixpattern (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.suffixPattern"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.suffixPattern"]], "targetpattern (tokenizer attribute)": [[187, "sparknlp.annotator.token.tokenizer.Tokenizer.targetPattern"], [436, "sparknlp.annotator.token.tokenizer.Tokenizer.targetPattern"]], "targetpattern (tokenizermodel attribute)": [[187, "sparknlp.annotator.token.tokenizer.TokenizerModel.targetPattern"], [436, "sparknlp.annotator.token.tokenizer.TokenizerModel.targetPattern"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[188, "sparknlp.annotator.token2_chunk.Token2Chunk"], [437, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "inputannotatortypes (token2chunk attribute)": [[188, "sparknlp.annotator.token2_chunk.Token2Chunk.inputAnnotatorTypes"], [437, "sparknlp.annotator.token2_chunk.Token2Chunk.inputAnnotatorTypes"]], "name (token2chunk attribute)": [[188, "sparknlp.annotator.token2_chunk.Token2Chunk.name"], [437, "sparknlp.annotator.token2_chunk.Token2Chunk.name"]], "outputannotatortype (token2chunk attribute)": [[188, "sparknlp.annotator.token2_chunk.Token2Chunk.outputAnnotatorType"], [437, "sparknlp.annotator.token2_chunk.Token2Chunk.outputAnnotatorType"]], "sparknlp.annotator.token2_chunk": [[188, "module-sparknlp.annotator.token2_chunk"], [437, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[189, "module-sparknlp.annotator.ws"], [438, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "ambiguitythreshold (wordsegmenterapproach attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.ambiguityThreshold"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.ambiguityThreshold"]], "enableregextokenizer (wordsegmenterapproach attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.enableRegexTokenizer"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.enableRegexTokenizer"]], "enableregextokenizer (wordsegmentermodel attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.enableRegexTokenizer"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.enableRegexTokenizer"]], "frequencythreshold (wordsegmenterapproach attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.frequencyThreshold"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.frequencyThreshold"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "inputannotatortypes (wordsegmenterapproach attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.inputAnnotatorTypes"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.inputAnnotatorTypes"]], "inputannotatortypes (wordsegmentermodel attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.inputAnnotatorTypes"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.inputAnnotatorTypes"]], "niterations (wordsegmenterapproach attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.nIterations"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.nIterations"]], "name (wordsegmenterapproach attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.name"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.name"]], "name (wordsegmentermodel attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.name"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.name"]], "outputannotatortype (wordsegmenterapproach attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.outputAnnotatorType"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.outputAnnotatorType"]], "outputannotatortype (wordsegmentermodel attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.outputAnnotatorType"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.outputAnnotatorType"]], "pattern (wordsegmenterapproach attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.pattern"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.pattern"]], "pattern (wordsegmentermodel attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pattern"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pattern"]], "poscol (wordsegmenterapproach attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.posCol"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.posCol"]], "pretrained() (wordsegmentermodel static method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[190, "module-sparknlp.annotator.ws.word_segmenter"], [439, "module-sparknlp.annotator.ws.word_segmenter"]], "tolowercase (wordsegmenterapproach attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.toLowercase"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.toLowercase"]], "tolowercase (wordsegmentermodel attribute)": [[190, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.toLowercase"], [439, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.toLowercase"]], "sparknlp.base": [[191, "module-sparknlp.base"], [449, "module-sparknlp.base"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[192, "sparknlp.base.audio_assembler.AudioAssembler"], [440, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[192, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"], [440, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "inputcol (audioassembler attribute)": [[192, "sparknlp.base.audio_assembler.AudioAssembler.inputCol"], [440, "sparknlp.base.audio_assembler.AudioAssembler.inputCol"]], "name (audioassembler attribute)": [[192, "sparknlp.base.audio_assembler.AudioAssembler.name"], [440, "sparknlp.base.audio_assembler.AudioAssembler.name"]], "outputannotatortype (audioassembler attribute)": [[192, "sparknlp.base.audio_assembler.AudioAssembler.outputAnnotatorType"], [440, "sparknlp.base.audio_assembler.AudioAssembler.outputAnnotatorType"]], "outputcol (audioassembler attribute)": [[192, "sparknlp.base.audio_assembler.AudioAssembler.outputCol"], [440, "sparknlp.base.audio_assembler.AudioAssembler.outputCol"]], "setinputcol() (audioassembler method)": [[192, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"], [440, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[192, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"], [440, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "setparams() (audioassembler method)": [[192, "sparknlp.base.audio_assembler.AudioAssembler.setParams"], [440, "sparknlp.base.audio_assembler.AudioAssembler.setParams"]], "sparknlp.base.audio_assembler": [[192, "module-sparknlp.base.audio_assembler"], [440, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "chunkcol (doc2chunk attribute)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.chunkCol"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.chunkCol"]], "failonmissing (doc2chunk attribute)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.failOnMissing"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.failOnMissing"]], "inputannotatortypes (doc2chunk attribute)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.inputAnnotatorTypes"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.inputAnnotatorTypes"]], "isarray (doc2chunk attribute)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.isArray"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.isArray"]], "lowercase (doc2chunk attribute)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.lowerCase"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.lowerCase"]], "name (doc2chunk attribute)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.name"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.name"]], "outputannotatortype (doc2chunk attribute)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.outputAnnotatorType"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.outputAnnotatorType"]], "setchunkcol() (doc2chunk method)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setparams() (doc2chunk method)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.setParams"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.setParams"]], "setstartcol() (doc2chunk method)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[193, "module-sparknlp.base.doc2_chunk"], [441, "module-sparknlp.base.doc2_chunk"]], "startcol (doc2chunk attribute)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.startCol"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.startCol"]], "startcolbytokenindex (doc2chunk attribute)": [[193, "sparknlp.base.doc2_chunk.Doc2Chunk.startColByTokenIndex"], [441, "sparknlp.base.doc2_chunk.Doc2Chunk.startColByTokenIndex"]], "documentassembler (class in sparknlp.base.document_assembler)": [[194, "sparknlp.base.document_assembler.DocumentAssembler"], [442, "sparknlp.base.document_assembler.DocumentAssembler"]], "cleanupmode (documentassembler attribute)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.cleanupMode"], [442, "sparknlp.base.document_assembler.DocumentAssembler.cleanupMode"]], "getoutputcol() (documentassembler method)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"], [442, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "idcol (documentassembler attribute)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.idCol"], [442, "sparknlp.base.document_assembler.DocumentAssembler.idCol"]], "inputcol (documentassembler attribute)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.inputCol"], [442, "sparknlp.base.document_assembler.DocumentAssembler.inputCol"]], "metadatacol (documentassembler attribute)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.metadataCol"], [442, "sparknlp.base.document_assembler.DocumentAssembler.metadataCol"]], "name (documentassembler attribute)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.name"], [442, "sparknlp.base.document_assembler.DocumentAssembler.name"]], "outputannotatortype (documentassembler attribute)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.outputAnnotatorType"], [442, "sparknlp.base.document_assembler.DocumentAssembler.outputAnnotatorType"]], "outputcol (documentassembler attribute)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.outputCol"], [442, "sparknlp.base.document_assembler.DocumentAssembler.outputCol"]], "setcleanupmode() (documentassembler method)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"], [442, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"], [442, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"], [442, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"], [442, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"], [442, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "setparams() (documentassembler method)": [[194, "sparknlp.base.document_assembler.DocumentAssembler.setParams"], [442, "sparknlp.base.document_assembler.DocumentAssembler.setParams"]], "sparknlp.base.document_assembler": [[194, "module-sparknlp.base.document_assembler"], [442, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "cleanannotations (embeddingsfinisher attribute)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.cleanAnnotations"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.cleanAnnotations"]], "getinputcols() (embeddingsfinisher method)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "inputcols (embeddingsfinisher attribute)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.inputCols"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.inputCols"]], "name (embeddingsfinisher attribute)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.name"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.name"]], "outputasvector (embeddingsfinisher attribute)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputAsVector"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputAsVector"]], "outputcols (embeddingsfinisher attribute)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputCols"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "setparams() (embeddingsfinisher method)": [[195, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setParams"], [443, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setParams"]], "sparknlp.base.embeddings_finisher": [[195, "module-sparknlp.base.embeddings_finisher"], [443, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[196, "sparknlp.base.finisher.Finisher"], [444, "sparknlp.base.finisher.Finisher"]], "annotationsplitsymbol (finisher attribute)": [[196, "sparknlp.base.finisher.Finisher.annotationSplitSymbol"], [444, "sparknlp.base.finisher.Finisher.annotationSplitSymbol"]], "cleanannotations (finisher attribute)": [[196, "sparknlp.base.finisher.Finisher.cleanAnnotations"], [444, "sparknlp.base.finisher.Finisher.cleanAnnotations"]], "getinputcols() (finisher method)": [[196, "sparknlp.base.finisher.Finisher.getInputCols"], [444, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[196, "sparknlp.base.finisher.Finisher.getOutputCols"], [444, "sparknlp.base.finisher.Finisher.getOutputCols"]], "includemetadata (finisher attribute)": [[196, "sparknlp.base.finisher.Finisher.includeMetadata"], [444, "sparknlp.base.finisher.Finisher.includeMetadata"]], "inputcols (finisher attribute)": [[196, "sparknlp.base.finisher.Finisher.inputCols"], [444, "sparknlp.base.finisher.Finisher.inputCols"]], "name (finisher attribute)": [[196, "sparknlp.base.finisher.Finisher.name"], [444, "sparknlp.base.finisher.Finisher.name"]], "outputasarray (finisher attribute)": [[196, "sparknlp.base.finisher.Finisher.outputAsArray"], [444, "sparknlp.base.finisher.Finisher.outputAsArray"]], "outputcols (finisher attribute)": [[196, "sparknlp.base.finisher.Finisher.outputCols"], [444, "sparknlp.base.finisher.Finisher.outputCols"]], "parseembeddingsvectors (finisher attribute)": [[196, "sparknlp.base.finisher.Finisher.parseEmbeddingsVectors"], [444, "sparknlp.base.finisher.Finisher.parseEmbeddingsVectors"]], "setannotationsplitsymbol() (finisher method)": [[196, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"], [444, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[196, "sparknlp.base.finisher.Finisher.setCleanAnnotations"], [444, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[196, "sparknlp.base.finisher.Finisher.setIncludeMetadata"], [444, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[196, "sparknlp.base.finisher.Finisher.setInputCols"], [444, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[196, "sparknlp.base.finisher.Finisher.setOutputAsArray"], [444, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[196, "sparknlp.base.finisher.Finisher.setOutputCols"], [444, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparams() (finisher method)": [[196, "sparknlp.base.finisher.Finisher.setParams"], [444, "sparknlp.base.finisher.Finisher.setParams"]], "setparseembeddingsvectors() (finisher method)": [[196, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"], [444, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[196, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"], [444, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[196, "module-sparknlp.base.finisher"], [444, "module-sparknlp.base.finisher"]], "valuesplitsymbol (finisher attribute)": [[196, "sparknlp.base.finisher.Finisher.valueSplitSymbol"], [444, "sparknlp.base.finisher.Finisher.valueSplitSymbol"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[197, "sparknlp.base.graph_finisher.GraphFinisher"], [445, "sparknlp.base.graph_finisher.GraphFinisher"]], "cleanannotations (graphfinisher attribute)": [[197, "sparknlp.base.graph_finisher.GraphFinisher.cleanAnnotations"], [445, "sparknlp.base.graph_finisher.GraphFinisher.cleanAnnotations"]], "inputcol (graphfinisher attribute)": [[197, "sparknlp.base.graph_finisher.GraphFinisher.inputCol"], [445, "sparknlp.base.graph_finisher.GraphFinisher.inputCol"]], "name (graphfinisher attribute)": [[197, "sparknlp.base.graph_finisher.GraphFinisher.name"], [445, "sparknlp.base.graph_finisher.GraphFinisher.name"]], "outputasarray (graphfinisher attribute)": [[197, "sparknlp.base.graph_finisher.GraphFinisher.outputAsArray"], [445, "sparknlp.base.graph_finisher.GraphFinisher.outputAsArray"]], "outputcol (graphfinisher attribute)": [[197, "sparknlp.base.graph_finisher.GraphFinisher.outputCol"], [445, "sparknlp.base.graph_finisher.GraphFinisher.outputCol"]], "setcleanannotations() (graphfinisher method)": [[197, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"], [445, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[197, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"], [445, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[197, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"], [445, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[197, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"], [445, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "setparams() (graphfinisher method)": [[197, "sparknlp.base.graph_finisher.GraphFinisher.setParams"], [445, "sparknlp.base.graph_finisher.GraphFinisher.setParams"]], "sparknlp.base.graph_finisher": [[197, "module-sparknlp.base.graph_finisher"], [445, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[198, "sparknlp.base.has_recursive_fit.HasRecursiveFit"], [446, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[198, "module-sparknlp.base.has_recursive_fit"], [446, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[199, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"], [447, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[199, "module-sparknlp.base.has_recursive_transform"], [447, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[200, "sparknlp.base.image_assembler.ImageAssembler"], [448, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[200, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"], [448, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "inputcol (imageassembler attribute)": [[200, "sparknlp.base.image_assembler.ImageAssembler.inputCol"], [448, "sparknlp.base.image_assembler.ImageAssembler.inputCol"]], "loadimagesasbytes() (imageassembler class method)": [[200, "sparknlp.base.image_assembler.ImageAssembler.loadImagesAsBytes"], [448, "sparknlp.base.image_assembler.ImageAssembler.loadImagesAsBytes"]], "name (imageassembler attribute)": [[200, "sparknlp.base.image_assembler.ImageAssembler.name"], [448, "sparknlp.base.image_assembler.ImageAssembler.name"]], "outputannotatortype (imageassembler attribute)": [[200, "sparknlp.base.image_assembler.ImageAssembler.outputAnnotatorType"], [448, "sparknlp.base.image_assembler.ImageAssembler.outputAnnotatorType"]], "outputcol (imageassembler attribute)": [[200, "sparknlp.base.image_assembler.ImageAssembler.outputCol"], [448, "sparknlp.base.image_assembler.ImageAssembler.outputCol"]], "setinputcol() (imageassembler method)": [[200, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"], [448, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[200, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"], [448, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "setparams() (imageassembler method)": [[200, "sparknlp.base.image_assembler.ImageAssembler.setParams"], [448, "sparknlp.base.image_assembler.ImageAssembler.setParams"]], "settextcol() (imageassembler method)": [[200, "sparknlp.base.image_assembler.ImageAssembler.setTextCol"], [448, "sparknlp.base.image_assembler.ImageAssembler.setTextCol"]], "sparknlp.base.image_assembler": [[200, "module-sparknlp.base.image_assembler"], [448, "module-sparknlp.base.image_assembler"]], "textcol (imageassembler attribute)": [[200, "sparknlp.base.image_assembler.ImageAssembler.textCol"], [448, "sparknlp.base.image_assembler.ImageAssembler.textCol"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[201, "sparknlp.base.light_pipeline.LightPipeline"], [450, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[201, "sparknlp.base.light_pipeline.LightPipeline.annotate"], [450, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[201, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"], [450, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[201, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"], [450, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[201, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"], [450, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[201, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"], [450, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[201, "module-sparknlp.base.light_pipeline"], [450, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[201, "sparknlp.base.light_pipeline.LightPipeline.transform"], [450, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "cleanupmode (multidocumentassembler attribute)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.cleanupMode"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.cleanupMode"]], "getoutputcols() (multidocumentassembler method)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "idcol (multidocumentassembler attribute)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.idCol"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.idCol"]], "inputcols (multidocumentassembler attribute)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.inputCols"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.inputCols"]], "metadatacol (multidocumentassembler attribute)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.metadataCol"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.metadataCol"]], "name (multidocumentassembler attribute)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.name"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.name"]], "outputannotatortype (multidocumentassembler attribute)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputAnnotatorType"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputAnnotatorType"]], "outputcols (multidocumentassembler attribute)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputCols"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputCols"]], "setcleanupmode() (multidocumentassembler method)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "setparams() (multidocumentassembler method)": [[202, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setParams"], [451, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setParams"]], "sparknlp.base.multi_document_assembler": [[202, "module-sparknlp.base.multi_document_assembler"], [451, "module-sparknlp.base.multi_document_assembler"]], "promptassembler (class in sparknlp.base.prompt_assembler)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler"], [452, "sparknlp.base.prompt_assembler.PromptAssembler"]], "addassistant (promptassembler attribute)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler.addAssistant"], [452, "sparknlp.base.prompt_assembler.PromptAssembler.addAssistant"]], "chattemplate (promptassembler attribute)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler.chatTemplate"], [452, "sparknlp.base.prompt_assembler.PromptAssembler.chatTemplate"]], "inputcol (promptassembler attribute)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler.inputCol"], [452, "sparknlp.base.prompt_assembler.PromptAssembler.inputCol"]], "name (promptassembler attribute)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler.name"], [452, "sparknlp.base.prompt_assembler.PromptAssembler.name"]], "outputannotatortype (promptassembler attribute)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler.outputAnnotatorType"], [452, "sparknlp.base.prompt_assembler.PromptAssembler.outputAnnotatorType"]], "outputcol (promptassembler attribute)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler.outputCol"], [452, "sparknlp.base.prompt_assembler.PromptAssembler.outputCol"]], "setaddassistant() (promptassembler method)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"], [452, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"]], "setchattemplate() (promptassembler method)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"], [452, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"]], "setinputcol() (promptassembler method)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"], [452, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"]], "setoutputcol() (promptassembler method)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"], [452, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"]], "setparams() (promptassembler method)": [[203, "sparknlp.base.prompt_assembler.PromptAssembler.setParams"], [452, "sparknlp.base.prompt_assembler.PromptAssembler.setParams"]], "sparknlp.base.prompt_assembler": [[203, "module-sparknlp.base.prompt_assembler"], [452, "module-sparknlp.base.prompt_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[204, "sparknlp.base.recursive_pipeline.RecursivePipeline"], [453, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[204, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"], [453, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[204, "module-sparknlp.base.recursive_pipeline"], [453, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[205, "sparknlp.base.table_assembler.TableAssembler"], [454, "sparknlp.base.table_assembler.TableAssembler"]], "csvdelimiter (tableassembler attribute)": [[205, "sparknlp.base.table_assembler.TableAssembler.csvDelimiter"], [454, "sparknlp.base.table_assembler.TableAssembler.csvDelimiter"]], "escapecsvdelimiter (tableassembler attribute)": [[205, "sparknlp.base.table_assembler.TableAssembler.escapeCsvDelimiter"], [454, "sparknlp.base.table_assembler.TableAssembler.escapeCsvDelimiter"]], "inputannotatortypes (tableassembler attribute)": [[205, "sparknlp.base.table_assembler.TableAssembler.inputAnnotatorTypes"], [454, "sparknlp.base.table_assembler.TableAssembler.inputAnnotatorTypes"]], "inputformat (tableassembler attribute)": [[205, "sparknlp.base.table_assembler.TableAssembler.inputFormat"], [454, "sparknlp.base.table_assembler.TableAssembler.inputFormat"]], "name (tableassembler attribute)": [[205, "sparknlp.base.table_assembler.TableAssembler.name"], [454, "sparknlp.base.table_assembler.TableAssembler.name"]], "outputannotatortype (tableassembler attribute)": [[205, "sparknlp.base.table_assembler.TableAssembler.outputAnnotatorType"], [454, "sparknlp.base.table_assembler.TableAssembler.outputAnnotatorType"]], "setcsvdelimiter() (tableassembler method)": [[205, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"], [454, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[205, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"], [454, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[205, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"], [454, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[205, "module-sparknlp.base.table_assembler"], [454, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[206, "sparknlp.base.token_assembler.TokenAssembler"], [455, "sparknlp.base.token_assembler.TokenAssembler"]], "inputannotatortypes (tokenassembler attribute)": [[206, "sparknlp.base.token_assembler.TokenAssembler.inputAnnotatorTypes"], [455, "sparknlp.base.token_assembler.TokenAssembler.inputAnnotatorTypes"]], "name (tokenassembler attribute)": [[206, "sparknlp.base.token_assembler.TokenAssembler.name"], [455, "sparknlp.base.token_assembler.TokenAssembler.name"]], "outputannotatortype (tokenassembler attribute)": [[206, "sparknlp.base.token_assembler.TokenAssembler.outputAnnotatorType"], [455, "sparknlp.base.token_assembler.TokenAssembler.outputAnnotatorType"]], "preserveposition (tokenassembler attribute)": [[206, "sparknlp.base.token_assembler.TokenAssembler.preservePosition"], [455, "sparknlp.base.token_assembler.TokenAssembler.preservePosition"]], "setparams() (tokenassembler method)": [[206, "sparknlp.base.token_assembler.TokenAssembler.setParams"], [455, "sparknlp.base.token_assembler.TokenAssembler.setParams"]], "setpreserveposition() (tokenassembler method)": [[206, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"], [455, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[206, "module-sparknlp.base.token_assembler"], [455, "module-sparknlp.base.token_assembler"]], "sparknlp.common": [[207, "module-sparknlp.common"], [461, "module-sparknlp.common"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[208, "sparknlp.common.annotator_approach.AnnotatorApproach"], [456, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[208, "module-sparknlp.common.annotator_approach"], [456, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[209, "sparknlp.common.annotator_model.AnnotatorModel"], [457, "sparknlp.common.annotator_model.AnnotatorModel"]], "setparams() (annotatormodel method)": [[209, "sparknlp.common.annotator_model.AnnotatorModel.setParams"], [457, "sparknlp.common.annotator_model.AnnotatorModel.setParams"]], "sparknlp.common.annotator_model": [[209, "module-sparknlp.common.annotator_model"], [457, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "inputannotatortypes (annotatorproperties attribute)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.inputAnnotatorTypes"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.inputAnnotatorTypes"]], "inputcols (annotatorproperties attribute)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.inputCols"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.inputCols"]], "inputcolsvalidation() (annotatorproperties method)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.inputColsValidation"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.inputColsValidation"]], "lazyannotator (annotatorproperties attribute)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.lazyAnnotator"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.lazyAnnotator"]], "optionalinputannotatortypes (annotatorproperties attribute)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.optionalInputAnnotatorTypes"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorproperties attribute)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.outputAnnotatorType"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.outputAnnotatorType"]], "outputcol (annotatorproperties attribute)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.outputCol"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.outputCol"]], "setinputcols() (annotatorproperties method)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[210, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"], [458, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[210, "module-sparknlp.common.annotator_properties"], [458, "module-sparknlp.common.annotator_properties"]], "audio (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.AUDIO"], [459, "sparknlp.common.annotator_type.AnnotatorType.AUDIO"]], "annotatortype (class in sparknlp.common.annotator_type)": [[211, "sparknlp.common.annotator_type.AnnotatorType"], [459, "sparknlp.common.annotator_type.AnnotatorType"]], "category (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.CATEGORY"], [459, "sparknlp.common.annotator_type.AnnotatorType.CATEGORY"]], "chunk (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.CHUNK"], [459, "sparknlp.common.annotator_type.AnnotatorType.CHUNK"]], "date (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.DATE"], [459, "sparknlp.common.annotator_type.AnnotatorType.DATE"]], "dependency (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.DEPENDENCY"], [459, "sparknlp.common.annotator_type.AnnotatorType.DEPENDENCY"]], "document (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.DOCUMENT"], [459, "sparknlp.common.annotator_type.AnnotatorType.DOCUMENT"]], "doc_similarity_rankings (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.DOC_SIMILARITY_RANKINGS"], [459, "sparknlp.common.annotator_type.AnnotatorType.DOC_SIMILARITY_RANKINGS"]], "dummy (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.DUMMY"], [459, "sparknlp.common.annotator_type.AnnotatorType.DUMMY"]], "entity (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.ENTITY"], [459, "sparknlp.common.annotator_type.AnnotatorType.ENTITY"]], "image (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.IMAGE"], [459, "sparknlp.common.annotator_type.AnnotatorType.IMAGE"]], "labeled_dependency (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.LABELED_DEPENDENCY"], [459, "sparknlp.common.annotator_type.AnnotatorType.LABELED_DEPENDENCY"]], "language (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.LANGUAGE"], [459, "sparknlp.common.annotator_type.AnnotatorType.LANGUAGE"]], "named_entity (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.NAMED_ENTITY"], [459, "sparknlp.common.annotator_type.AnnotatorType.NAMED_ENTITY"]], "negex (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.NEGEX"], [459, "sparknlp.common.annotator_type.AnnotatorType.NEGEX"]], "node (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.NODE"], [459, "sparknlp.common.annotator_type.AnnotatorType.NODE"]], "pos (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.POS"], [459, "sparknlp.common.annotator_type.AnnotatorType.POS"]], "sentence_embeddings (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.SENTENCE_EMBEDDINGS"], [459, "sparknlp.common.annotator_type.AnnotatorType.SENTENCE_EMBEDDINGS"]], "sentiment (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.SENTIMENT"], [459, "sparknlp.common.annotator_type.AnnotatorType.SENTIMENT"]], "table (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.TABLE"], [459, "sparknlp.common.annotator_type.AnnotatorType.TABLE"]], "token (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.TOKEN"], [459, "sparknlp.common.annotator_type.AnnotatorType.TOKEN"]], "wordpiece (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.WORDPIECE"], [459, "sparknlp.common.annotator_type.AnnotatorType.WORDPIECE"]], "word_embeddings (annotatortype attribute)": [[211, "sparknlp.common.annotator_type.AnnotatorType.WORD_EMBEDDINGS"], [459, "sparknlp.common.annotator_type.AnnotatorType.WORD_EMBEDDINGS"]], "sparknlp.common.annotator_type": [[211, "module-sparknlp.common.annotator_type"], [459, "module-sparknlp.common.annotator_type"]], "coverageresult (class in sparknlp.common.coverage_result)": [[212, "sparknlp.common.coverage_result.CoverageResult"], [460, "sparknlp.common.coverage_result.CoverageResult"]], "sparknlp.common.coverage_result": [[212, "module-sparknlp.common.coverage_result"], [460, "module-sparknlp.common.coverage_result"]], "match_all (matchstrategy attribute)": [[213, "sparknlp.common.match_strategy.MatchStrategy.MATCH_ALL"], [462, "sparknlp.common.match_strategy.MatchStrategy.MATCH_ALL"]], "match_complete (matchstrategy attribute)": [[213, "sparknlp.common.match_strategy.MatchStrategy.MATCH_COMPLETE"], [462, "sparknlp.common.match_strategy.MatchStrategy.MATCH_COMPLETE"]], "match_first (matchstrategy attribute)": [[213, "sparknlp.common.match_strategy.MatchStrategy.MATCH_FIRST"], [462, "sparknlp.common.match_strategy.MatchStrategy.MATCH_FIRST"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[213, "sparknlp.common.match_strategy.MatchStrategy"], [462, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[213, "module-sparknlp.common.match_strategy"], [462, "module-sparknlp.common.match_strategy"]], "hasaudiofeatureproperties (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties"], [463, "sparknlp.common.properties.HasAudioFeatureProperties"]], "hasbatchedannotate (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasBatchedAnnotate"], [463, "sparknlp.common.properties.HasBatchedAnnotate"]], "hasbatchedannotateaudio (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasBatchedAnnotateAudio"], [463, "sparknlp.common.properties.HasBatchedAnnotateAudio"]], "hasbatchedannotateimage (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasBatchedAnnotateImage"], [463, "sparknlp.common.properties.HasBatchedAnnotateImage"]], "hascandidatelabelsproperties (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasCandidateLabelsProperties"], [463, "sparknlp.common.properties.HasCandidateLabelsProperties"]], "hascasesensitiveproperties (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasCaseSensitiveProperties"], [463, "sparknlp.common.properties.HasCaseSensitiveProperties"]], "hasclassifieractivationproperties (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasClassifierActivationProperties"], [463, "sparknlp.common.properties.HasClassifierActivationProperties"]], "hasclstokenproperties (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasClsTokenProperties"], [463, "sparknlp.common.properties.HasClsTokenProperties"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasEmbeddingsProperties"], [463, "sparknlp.common.properties.HasEmbeddingsProperties"]], "hasenablecachingproperties (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasEnableCachingProperties"], [463, "sparknlp.common.properties.HasEnableCachingProperties"]], "hasengine (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasEngine"], [463, "sparknlp.common.properties.HasEngine"]], "hasgeneratorproperties (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasGeneratorProperties"], [463, "sparknlp.common.properties.HasGeneratorProperties"]], "hasimagefeatureproperties (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasImageFeatureProperties"], [463, "sparknlp.common.properties.HasImageFeatureProperties"]], "hasllamacppproperties (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasLlamaCppProperties"], [463, "sparknlp.common.properties.HasLlamaCppProperties"]], "haslongmaxsentencelengthlimit (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit"], [463, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit"]], "hasmaxsentencelengthlimit (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasMaxSentenceLengthLimit"], [463, "sparknlp.common.properties.HasMaxSentenceLengthLimit"]], "hasrescalefactor (class in sparknlp.common.properties)": [[214, "sparknlp.common.properties.HasRescaleFactor"], [463, "sparknlp.common.properties.HasRescaleFactor"]], "activation (hasclassifieractivationproperties attribute)": [[214, "sparknlp.common.properties.HasClassifierActivationProperties.activation"], [463, "sparknlp.common.properties.HasClassifierActivationProperties.activation"]], "batchsize (hasbatchedannotate attribute)": [[214, "sparknlp.common.properties.HasBatchedAnnotate.batchSize"], [463, "sparknlp.common.properties.HasBatchedAnnotate.batchSize"]], "batchsize (hasbatchedannotateaudio attribute)": [[214, "sparknlp.common.properties.HasBatchedAnnotateAudio.batchSize"], [463, "sparknlp.common.properties.HasBatchedAnnotateAudio.batchSize"]], "batchsize (hasbatchedannotateimage attribute)": [[214, "sparknlp.common.properties.HasBatchedAnnotateImage.batchSize"], [463, "sparknlp.common.properties.HasBatchedAnnotateImage.batchSize"]], "beamsize (hasgeneratorproperties attribute)": [[214, "sparknlp.common.properties.HasGeneratorProperties.beamSize"], [463, "sparknlp.common.properties.HasGeneratorProperties.beamSize"]], "cacheprompt (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.cachePrompt"], [463, "sparknlp.common.properties.HasLlamaCppProperties.cachePrompt"]], "candidatelabels (hascandidatelabelsproperties attribute)": [[214, "sparknlp.common.properties.HasCandidateLabelsProperties.candidateLabels"], [463, "sparknlp.common.properties.HasCandidateLabelsProperties.candidateLabels"]], "casesensitive (hascasesensitiveproperties attribute)": [[214, "sparknlp.common.properties.HasCaseSensitiveProperties.caseSensitive"], [463, "sparknlp.common.properties.HasCaseSensitiveProperties.caseSensitive"]], "chattemplate (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.chatTemplate"], [463, "sparknlp.common.properties.HasLlamaCppProperties.chatTemplate"]], "contradictionidparam (hascandidatelabelsproperties attribute)": [[214, "sparknlp.common.properties.HasCandidateLabelsProperties.contradictionIdParam"], [463, "sparknlp.common.properties.HasCandidateLabelsProperties.contradictionIdParam"]], "defragmentationthreshold (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.defragmentationThreshold"], [463, "sparknlp.common.properties.HasLlamaCppProperties.defragmentationThreshold"]], "dimension (hasembeddingsproperties attribute)": [[214, "sparknlp.common.properties.HasEmbeddingsProperties.dimension"], [463, "sparknlp.common.properties.HasEmbeddingsProperties.dimension"]], "disabletokenids (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.disableTokenIds"], [463, "sparknlp.common.properties.HasLlamaCppProperties.disableTokenIds"]], "donormalize (hasaudiofeatureproperties attribute)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.doNormalize"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.doNormalize"]], "donormalize (hasimagefeatureproperties attribute)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.doNormalize"], [463, "sparknlp.common.properties.HasImageFeatureProperties.doNormalize"]], "dorescale (hasrescalefactor attribute)": [[214, "sparknlp.common.properties.HasRescaleFactor.doRescale"], [463, "sparknlp.common.properties.HasRescaleFactor.doRescale"]], "doresize (hasimagefeatureproperties attribute)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.doResize"], [463, "sparknlp.common.properties.HasImageFeatureProperties.doResize"]], "dosample (hasgeneratorproperties attribute)": [[214, "sparknlp.common.properties.HasGeneratorProperties.doSample"], [463, "sparknlp.common.properties.HasGeneratorProperties.doSample"]], "dynamictemperatureexponent (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureExponent"], [463, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureExponent"]], "dynamictemperaturerange (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureRange"], [463, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureRange"]], "embedding (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.embedding"], [463, "sparknlp.common.properties.HasLlamaCppProperties.embedding"]], "enablecaching (hasenablecachingproperties attribute)": [[214, "sparknlp.common.properties.HasEnableCachingProperties.enableCaching"], [463, "sparknlp.common.properties.HasEnableCachingProperties.enableCaching"]], "engine (hasengine attribute)": [[214, "sparknlp.common.properties.HasEngine.engine"], [463, "sparknlp.common.properties.HasEngine.engine"]], "entailmentidparam (hascandidatelabelsproperties attribute)": [[214, "sparknlp.common.properties.HasCandidateLabelsProperties.entailmentIdParam"], [463, "sparknlp.common.properties.HasCandidateLabelsProperties.entailmentIdParam"]], "featureextractortype (hasimagefeatureproperties attribute)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.featureExtractorType"], [463, "sparknlp.common.properties.HasImageFeatureProperties.featureExtractorType"]], "featuresize (hasaudiofeatureproperties attribute)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.featureSize"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.featureSize"]], "flashattention (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.flashAttention"], [463, "sparknlp.common.properties.HasLlamaCppProperties.flashAttention"]], "frequencypenalty (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.frequencyPenalty"], [463, "sparknlp.common.properties.HasLlamaCppProperties.frequencyPenalty"]], "getactivation() (hasclassifieractivationproperties method)": [[214, "sparknlp.common.properties.HasClassifierActivationProperties.getActivation"], [463, "sparknlp.common.properties.HasClassifierActivationProperties.getActivation"]], "getbatchsize() (hasbatchedannotate method)": [[214, "sparknlp.common.properties.HasBatchedAnnotate.getBatchSize"], [463, "sparknlp.common.properties.HasBatchedAnnotate.getBatchSize"]], "getbatchsize() (hasbatchedannotateaudio method)": [[214, "sparknlp.common.properties.HasBatchedAnnotateAudio.getBatchSize"], [463, "sparknlp.common.properties.HasBatchedAnnotateAudio.getBatchSize"]], "getbatchsize() (hasbatchedannotateimage method)": [[214, "sparknlp.common.properties.HasBatchedAnnotateImage.getBatchSize"], [463, "sparknlp.common.properties.HasBatchedAnnotateImage.getBatchSize"]], "getcasesensitive() (hascasesensitiveproperties method)": [[214, "sparknlp.common.properties.HasCaseSensitiveProperties.getCaseSensitive"], [463, "sparknlp.common.properties.HasCaseSensitiveProperties.getCaseSensitive"]], "getdimension() (hasembeddingsproperties method)": [[214, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"], [463, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "getenablecaching() (hasenablecachingproperties method)": [[214, "sparknlp.common.properties.HasEnableCachingProperties.getEnableCaching"], [463, "sparknlp.common.properties.HasEnableCachingProperties.getEnableCaching"]], "getengine() (hasengine method)": [[214, "sparknlp.common.properties.HasEngine.getEngine"], [463, "sparknlp.common.properties.HasEngine.getEngine"]], "getmaxsentencelength() (hasmaxsentencelengthlimit method)": [[214, "sparknlp.common.properties.HasMaxSentenceLengthLimit.getMaxSentenceLength"], [463, "sparknlp.common.properties.HasMaxSentenceLengthLimit.getMaxSentenceLength"]], "getmetadata() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.getMetadata"], [463, "sparknlp.common.properties.HasLlamaCppProperties.getMetadata"]], "getmultilabel() (hasclassifieractivationproperties method)": [[214, "sparknlp.common.properties.HasClassifierActivationProperties.getMultilabel"], [463, "sparknlp.common.properties.HasClassifierActivationProperties.getMultilabel"]], "getuseclstoken() (hasclstokenproperties method)": [[214, "sparknlp.common.properties.HasClsTokenProperties.getUseCLSToken"], [463, "sparknlp.common.properties.HasClsTokenProperties.getUseCLSToken"]], "gpusplitmode (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.gpuSplitMode"], [463, "sparknlp.common.properties.HasLlamaCppProperties.gpuSplitMode"]], "grammar (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.grammar"], [463, "sparknlp.common.properties.HasLlamaCppProperties.grammar"]], "grpattnn (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnN"], [463, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnN"]], "grpattnw (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnW"], [463, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnW"]], "ignoreeos (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.ignoreEos"], [463, "sparknlp.common.properties.HasLlamaCppProperties.ignoreEos"]], "imagemean (hasimagefeatureproperties attribute)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.imageMean"], [463, "sparknlp.common.properties.HasImageFeatureProperties.imageMean"]], "imagestd (hasimagefeatureproperties attribute)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.imageStd"], [463, "sparknlp.common.properties.HasImageFeatureProperties.imageStd"]], "inputprefix (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefix"], [463, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefix"]], "inputprefixbos (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefixBos"], [463, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefixBos"]], "inputsuffix (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.inputSuffix"], [463, "sparknlp.common.properties.HasLlamaCppProperties.inputSuffix"]], "lookupcachedynamicfilepath (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheDynamicFilePath"], [463, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheDynamicFilePath"]], "lookupcachestaticfilepath (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheStaticFilePath"], [463, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheStaticFilePath"]], "maingpu (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.mainGpu"], [463, "sparknlp.common.properties.HasLlamaCppProperties.mainGpu"]], "maxoutputlength (hasgeneratorproperties attribute)": [[214, "sparknlp.common.properties.HasGeneratorProperties.maxOutputLength"], [463, "sparknlp.common.properties.HasGeneratorProperties.maxOutputLength"]], "maxsentencelength (hasmaxsentencelengthlimit attribute)": [[214, "sparknlp.common.properties.HasMaxSentenceLengthLimit.maxSentenceLength"], [463, "sparknlp.common.properties.HasMaxSentenceLengthLimit.maxSentenceLength"]], "max_length_limit (haslongmaxsentencelengthlimit attribute)": [[214, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit.max_length_limit"], [463, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit.max_length_limit"]], "max_length_limit (hasmaxsentencelengthlimit attribute)": [[214, "sparknlp.common.properties.HasMaxSentenceLengthLimit.max_length_limit"], [463, "sparknlp.common.properties.HasMaxSentenceLengthLimit.max_length_limit"]], "minkeep (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.minKeep"], [463, "sparknlp.common.properties.HasLlamaCppProperties.minKeep"]], "minoutputlength (hasgeneratorproperties attribute)": [[214, "sparknlp.common.properties.HasGeneratorProperties.minOutputLength"], [463, "sparknlp.common.properties.HasGeneratorProperties.minOutputLength"]], "minp (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.minP"], [463, "sparknlp.common.properties.HasLlamaCppProperties.minP"]], "mirostat (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.miroStat"], [463, "sparknlp.common.properties.HasLlamaCppProperties.miroStat"]], "mirostateta (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.miroStatEta"], [463, "sparknlp.common.properties.HasLlamaCppProperties.miroStatEta"]], "mirostattau (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.miroStatTau"], [463, "sparknlp.common.properties.HasLlamaCppProperties.miroStatTau"]], "modelalias (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.modelAlias"], [463, "sparknlp.common.properties.HasLlamaCppProperties.modelAlias"]], "modeldraft (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.modelDraft"], [463, "sparknlp.common.properties.HasLlamaCppProperties.modelDraft"]], "multilabel (hasclassifieractivationproperties attribute)": [[214, "sparknlp.common.properties.HasClassifierActivationProperties.multilabel"], [463, "sparknlp.common.properties.HasClassifierActivationProperties.multilabel"]], "nbatch (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nBatch"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nBatch"]], "nchunks (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nChunks"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nChunks"]], "nctx (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nCtx"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nCtx"]], "ndraft (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nDraft"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nDraft"]], "ngpulayers (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayers"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayers"]], "ngpulayersdraft (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayersDraft"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayersDraft"]], "nkeep (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nKeep"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nKeep"]], "npredict (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nPredict"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nPredict"]], "nprobs (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nProbs"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nProbs"]], "nreturnsequences (hasgeneratorproperties attribute)": [[214, "sparknlp.common.properties.HasGeneratorProperties.nReturnSequences"], [463, "sparknlp.common.properties.HasGeneratorProperties.nReturnSequences"]], "nsequences (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nSequences"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nSequences"]], "nthreads (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nThreads"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nThreads"]], "nthreadsbatch (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatch"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatch"]], "nthreadsbatchdraft (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatchDraft"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatchDraft"]], "nthreadsdraft (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsDraft"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsDraft"]], "nubatch (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.nUbatch"], [463, "sparknlp.common.properties.HasLlamaCppProperties.nUbatch"]], "nokvoffload (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.noKvOffload"], [463, "sparknlp.common.properties.HasLlamaCppProperties.noKvOffload"]], "norepeatngramsize (hasgeneratorproperties attribute)": [[214, "sparknlp.common.properties.HasGeneratorProperties.noRepeatNgramSize"], [463, "sparknlp.common.properties.HasGeneratorProperties.noRepeatNgramSize"]], "numastrategy (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.numaStrategy"], [463, "sparknlp.common.properties.HasLlamaCppProperties.numaStrategy"]], "psplit (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.pSplit"], [463, "sparknlp.common.properties.HasLlamaCppProperties.pSplit"]], "paddingside (hasaudiofeatureproperties attribute)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.paddingSide"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.paddingSide"]], "paddingvalue (hasaudiofeatureproperties attribute)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.paddingValue"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.paddingValue"]], "penalizenl (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.penalizeNl"], [463, "sparknlp.common.properties.HasLlamaCppProperties.penalizeNl"]], "penaltyprompt (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.penaltyPrompt"], [463, "sparknlp.common.properties.HasLlamaCppProperties.penaltyPrompt"]], "poolingtype (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.poolingType"], [463, "sparknlp.common.properties.HasLlamaCppProperties.poolingType"]], "presencepenalty (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.presencePenalty"], [463, "sparknlp.common.properties.HasLlamaCppProperties.presencePenalty"]], "repeatlastn (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.repeatLastN"], [463, "sparknlp.common.properties.HasLlamaCppProperties.repeatLastN"]], "repeatpenalty (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.repeatPenalty"], [463, "sparknlp.common.properties.HasLlamaCppProperties.repeatPenalty"]], "repetitionpenalty (hasgeneratorproperties attribute)": [[214, "sparknlp.common.properties.HasGeneratorProperties.repetitionPenalty"], [463, "sparknlp.common.properties.HasGeneratorProperties.repetitionPenalty"]], "resample (hasimagefeatureproperties attribute)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.resample"], [463, "sparknlp.common.properties.HasImageFeatureProperties.resample"]], "rescalefactor (hasrescalefactor attribute)": [[214, "sparknlp.common.properties.HasRescaleFactor.rescaleFactor"], [463, "sparknlp.common.properties.HasRescaleFactor.rescaleFactor"]], "returnattentionmask (hasaudiofeatureproperties attribute)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.returnAttentionMask"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.returnAttentionMask"]], "ropefreqbase (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqBase"], [463, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqBase"]], "ropefreqscale (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqScale"], [463, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqScale"]], "ropescalingtype (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.ropeScalingType"], [463, "sparknlp.common.properties.HasLlamaCppProperties.ropeScalingType"]], "samplers (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.samplers"], [463, "sparknlp.common.properties.HasLlamaCppProperties.samplers"]], "samplingrate (hasaudiofeatureproperties attribute)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.samplingRate"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.samplingRate"]], "seed (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.seed"], [463, "sparknlp.common.properties.HasLlamaCppProperties.seed"]], "setactivation() (hasclassifieractivationproperties method)": [[214, "sparknlp.common.properties.HasClassifierActivationProperties.setActivation"], [463, "sparknlp.common.properties.HasClassifierActivationProperties.setActivation"]], "setbatchsize() (hasbatchedannotate method)": [[214, "sparknlp.common.properties.HasBatchedAnnotate.setBatchSize"], [463, "sparknlp.common.properties.HasBatchedAnnotate.setBatchSize"]], "setbatchsize() (hasbatchedannotateaudio method)": [[214, "sparknlp.common.properties.HasBatchedAnnotateAudio.setBatchSize"], [463, "sparknlp.common.properties.HasBatchedAnnotateAudio.setBatchSize"]], "setbatchsize() (hasbatchedannotateimage method)": [[214, "sparknlp.common.properties.HasBatchedAnnotateImage.setBatchSize"], [463, "sparknlp.common.properties.HasBatchedAnnotateImage.setBatchSize"]], "setbeamsize() (hasgeneratorproperties method)": [[214, "sparknlp.common.properties.HasGeneratorProperties.setBeamSize"], [463, "sparknlp.common.properties.HasGeneratorProperties.setBeamSize"]], "setcacheprompt() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setCachePrompt"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setCachePrompt"]], "setcandidatelabels() (hascandidatelabelsproperties method)": [[214, "sparknlp.common.properties.HasCandidateLabelsProperties.setCandidateLabels"], [463, "sparknlp.common.properties.HasCandidateLabelsProperties.setCandidateLabels"]], "setcasesensitive() (hascasesensitiveproperties method)": [[214, "sparknlp.common.properties.HasCaseSensitiveProperties.setCaseSensitive"], [463, "sparknlp.common.properties.HasCaseSensitiveProperties.setCaseSensitive"]], "setchattemplate() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setChatTemplate"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setChatTemplate"]], "setcontradictionidparam() (hascandidatelabelsproperties method)": [[214, "sparknlp.common.properties.HasCandidateLabelsProperties.setContradictionIdParam"], [463, "sparknlp.common.properties.HasCandidateLabelsProperties.setContradictionIdParam"]], "setdefragmentationthreshold() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setDefragmentationThreshold"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setDefragmentationThreshold"]], "setdimension() (hasembeddingsproperties method)": [[214, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"], [463, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdisabletokenids() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setDisableTokenIds"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setDisableTokenIds"]], "setdonormalize() (hasaudiofeatureproperties method)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.setDoNormalize"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.setDoNormalize"]], "setdonormalize() (hasimagefeatureproperties method)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.setDoNormalize"], [463, "sparknlp.common.properties.HasImageFeatureProperties.setDoNormalize"]], "setdorescale() (hasrescalefactor method)": [[214, "sparknlp.common.properties.HasRescaleFactor.setDoRescale"], [463, "sparknlp.common.properties.HasRescaleFactor.setDoRescale"]], "setdoresize() (hasimagefeatureproperties method)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.setDoResize"], [463, "sparknlp.common.properties.HasImageFeatureProperties.setDoResize"]], "setdosample() (hasgeneratorproperties method)": [[214, "sparknlp.common.properties.HasGeneratorProperties.setDoSample"], [463, "sparknlp.common.properties.HasGeneratorProperties.setDoSample"]], "setdynamictemperatureexponent() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureExponent"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureRange"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureRange"]], "setembedding() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setEmbedding"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setEmbedding"]], "setenablecaching() (hasenablecachingproperties method)": [[214, "sparknlp.common.properties.HasEnableCachingProperties.setEnableCaching"], [463, "sparknlp.common.properties.HasEnableCachingProperties.setEnableCaching"]], "setentailmentidparam() (hascandidatelabelsproperties method)": [[214, "sparknlp.common.properties.HasCandidateLabelsProperties.setEntailmentIdParam"], [463, "sparknlp.common.properties.HasCandidateLabelsProperties.setEntailmentIdParam"]], "setfeatureextractortype() (hasimagefeatureproperties method)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.setFeatureExtractorType"], [463, "sparknlp.common.properties.HasImageFeatureProperties.setFeatureExtractorType"]], "setfeaturesize() (hasaudiofeatureproperties method)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.setFeatureSize"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.setFeatureSize"]], "setflashattention() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setFlashAttention"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setFlashAttention"]], "setfrequencypenalty() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setFrequencyPenalty"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setFrequencyPenalty"]], "setgpusplitmode() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setGpuSplitMode"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setGpuSplitMode"]], "setgrammar() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setGrammar"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setGrammar"]], "setgrpattnn() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnN"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnN"]], "setgrpattnw() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnW"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnW"]], "setignoreeos() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setIgnoreEos"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setIgnoreEos"]], "setimagemean() (hasimagefeatureproperties method)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.setImageMean"], [463, "sparknlp.common.properties.HasImageFeatureProperties.setImageMean"]], "setimagestd() (hasimagefeatureproperties method)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.setImageStd"], [463, "sparknlp.common.properties.HasImageFeatureProperties.setImageStd"]], "setinputprefix() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefix"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefix"]], "setinputprefixbos() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefixBos"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefixBos"]], "setinputsuffix() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setInputSuffix"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setInputSuffix"]], "setlookupcachedynamicfilepath() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheDynamicFilePath"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheDynamicFilePath"]], "setlookupcachestaticfilepath() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheStaticFilePath"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheStaticFilePath"]], "setloraadapters() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setLoraAdapters"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setLoraAdapters"]], "setmaingpu() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setMainGpu"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setMainGpu"]], "setmaxoutputlength() (hasgeneratorproperties method)": [[214, "sparknlp.common.properties.HasGeneratorProperties.setMaxOutputLength"], [463, "sparknlp.common.properties.HasGeneratorProperties.setMaxOutputLength"]], "setmaxsentencelength() (hasmaxsentencelengthlimit method)": [[214, "sparknlp.common.properties.HasMaxSentenceLengthLimit.setMaxSentenceLength"], [463, "sparknlp.common.properties.HasMaxSentenceLengthLimit.setMaxSentenceLength"]], "setminkeep() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setMinKeep"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setMinKeep"]], "setminoutputlength() (hasgeneratorproperties method)": [[214, "sparknlp.common.properties.HasGeneratorProperties.setMinOutputLength"], [463, "sparknlp.common.properties.HasGeneratorProperties.setMinOutputLength"]], "setminp() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setMinP"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setMinP"]], "setmirostat() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStat"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStat"]], "setmirostateta() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatEta"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatEta"]], "setmirostattau() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatTau"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatTau"]], "setmodelalias() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setModelAlias"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setModelAlias"]], "setmodeldraft() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setModelDraft"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setModelDraft"]], "setmultilabel() (hasclassifieractivationproperties method)": [[214, "sparknlp.common.properties.HasClassifierActivationProperties.setMultilabel"], [463, "sparknlp.common.properties.HasClassifierActivationProperties.setMultilabel"]], "setnbatch() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNBatch"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNBatch"]], "setnchunks() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNChunks"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNChunks"]], "setnctx() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNCtx"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNCtx"]], "setndraft() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNDraft"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNDraft"]], "setngpulayers() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayers"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayers"]], "setngpulayersdraft() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayersDraft"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayersDraft"]], "setnkeep() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNKeep"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNKeep"]], "setnparallel() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNParallel"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNParallel"]], "setnpredict() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNPredict"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNPredict"]], "setnprobs() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNProbs"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNProbs"]], "setnreturnsequences() (hasgeneratorproperties method)": [[214, "sparknlp.common.properties.HasGeneratorProperties.setNReturnSequences"], [463, "sparknlp.common.properties.HasGeneratorProperties.setNReturnSequences"]], "setnsequences() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNSequences"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNSequences"]], "setnthreads() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNThreads"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNThreads"]], "setnthreadsbatch() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatch"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatch"]], "setnthreadsbatchdraft() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatchDraft"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatchDraft"]], "setnthreadsdraft() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsDraft"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsDraft"]], "setnubatch() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNUbatch"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNUbatch"]], "setnokvoffload() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNoKvOffload"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNoKvOffload"]], "setnorepeatngramsize() (hasgeneratorproperties method)": [[214, "sparknlp.common.properties.HasGeneratorProperties.setNoRepeatNgramSize"], [463, "sparknlp.common.properties.HasGeneratorProperties.setNoRepeatNgramSize"]], "setnumastrategy() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setNumaStrategy"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setNumaStrategy"]], "setpsplit() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setPSplit"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setPSplit"]], "setpaddingside() (hasaudiofeatureproperties method)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingSide"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingSide"]], "setpaddingvalue() (hasaudiofeatureproperties method)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingValue"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingValue"]], "setpenalizenl() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setPenalizeNl"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setPenalizeNl"]], "setpenaltyprompt() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setPenaltyPrompt"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setPenaltyPrompt"]], "setpoolingtype() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setPoolingType"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setPoolingType"]], "setpresencepenalty() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setPresencePenalty"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setPresencePenalty"]], "setrepeatlastn() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatLastN"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatLastN"]], "setrepeatpenalty() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatPenalty"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatPenalty"]], "setrepetitionpenalty() (hasgeneratorproperties method)": [[214, "sparknlp.common.properties.HasGeneratorProperties.setRepetitionPenalty"], [463, "sparknlp.common.properties.HasGeneratorProperties.setRepetitionPenalty"]], "setresample() (hasimagefeatureproperties method)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.setResample"], [463, "sparknlp.common.properties.HasImageFeatureProperties.setResample"]], "setrescalefactor() (hasrescalefactor method)": [[214, "sparknlp.common.properties.HasRescaleFactor.setRescaleFactor"], [463, "sparknlp.common.properties.HasRescaleFactor.setRescaleFactor"]], "setreturnattentionmask() (hasaudiofeatureproperties method)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.setReturnAttentionMask"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.setReturnAttentionMask"]], "setropefreqbase() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqBase"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqBase"]], "setropefreqscale() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqScale"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqScale"]], "setropescalingtype() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setRopeScalingType"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setRopeScalingType"]], "setsamplers() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setSamplers"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setSamplers"]], "setsamplingrate() (hasaudiofeatureproperties method)": [[214, "sparknlp.common.properties.HasAudioFeatureProperties.setSamplingRate"], [463, "sparknlp.common.properties.HasAudioFeatureProperties.setSamplingRate"]], "setseed() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setSeed"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setSeed"]], "setsize() (hasimagefeatureproperties method)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.setSize"], [463, "sparknlp.common.properties.HasImageFeatureProperties.setSize"]], "setstopstrings() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setStopStrings"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setStopStrings"]], "setsystemprompt() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setSystemPrompt"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setSystemPrompt"]], "settask() (hasgeneratorproperties method)": [[214, "sparknlp.common.properties.HasGeneratorProperties.setTask"], [463, "sparknlp.common.properties.HasGeneratorProperties.setTask"]], "settemperature() (hasgeneratorproperties method)": [[214, "sparknlp.common.properties.HasGeneratorProperties.setTemperature"], [463, "sparknlp.common.properties.HasGeneratorProperties.setTemperature"]], "settemperature() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setTemperature"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setTemperature"]], "settensorsplit() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setTensorSplit"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setTensorSplit"]], "settfsz() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setTfsZ"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setTfsZ"]], "setthreshold() (hasclassifieractivationproperties method)": [[214, "sparknlp.common.properties.HasClassifierActivationProperties.setThreshold"], [463, "sparknlp.common.properties.HasClassifierActivationProperties.setThreshold"]], "settokenbias() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setTokenBias"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setTokenBias"]], "settokenidbias() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setTokenIdBias"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setTokenIdBias"]], "settopk() (hasgeneratorproperties method)": [[214, "sparknlp.common.properties.HasGeneratorProperties.setTopK"], [463, "sparknlp.common.properties.HasGeneratorProperties.setTopK"]], "settopk() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setTopK"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setTopK"]], "settopp() (hasgeneratorproperties method)": [[214, "sparknlp.common.properties.HasGeneratorProperties.setTopP"], [463, "sparknlp.common.properties.HasGeneratorProperties.setTopP"]], "settopp() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setTopP"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setTopP"]], "settypicalp() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setTypicalP"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setTypicalP"]], "setuseclstoken() (hasclstokenproperties method)": [[214, "sparknlp.common.properties.HasClsTokenProperties.setUseCLSToken"], [463, "sparknlp.common.properties.HasClsTokenProperties.setUseCLSToken"]], "setusechattemplate() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setUseChatTemplate"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setUseChatTemplate"]], "setusemlock() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setUseMlock"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setUseMlock"]], "setusemmap() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setUseMmap"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setUseMmap"]], "setyarnattnfactor() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setYarnAttnFactor"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setYarnAttnFactor"]], "setyarnbetafast() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaFast"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaFast"]], "setyarnbetaslow() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaSlow"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaSlow"]], "setyarnextfactor() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setYarnExtFactor"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setYarnExtFactor"]], "setyarnorigctx() (hasllamacppproperties method)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.setYarnOrigCtx"], [463, "sparknlp.common.properties.HasLlamaCppProperties.setYarnOrigCtx"]], "size (hasimagefeatureproperties attribute)": [[214, "sparknlp.common.properties.HasImageFeatureProperties.size"], [463, "sparknlp.common.properties.HasImageFeatureProperties.size"]], "sparknlp.common.properties": [[214, "module-sparknlp.common.properties"], [463, "module-sparknlp.common.properties"]], "stopstrings (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.stopStrings"], [463, "sparknlp.common.properties.HasLlamaCppProperties.stopStrings"]], "systemprompt (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.systemPrompt"], [463, "sparknlp.common.properties.HasLlamaCppProperties.systemPrompt"]], "task (hasgeneratorproperties attribute)": [[214, "sparknlp.common.properties.HasGeneratorProperties.task"], [463, "sparknlp.common.properties.HasGeneratorProperties.task"]], "temperature (hasgeneratorproperties attribute)": [[214, "sparknlp.common.properties.HasGeneratorProperties.temperature"], [463, "sparknlp.common.properties.HasGeneratorProperties.temperature"]], "temperature (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.temperature"], [463, "sparknlp.common.properties.HasLlamaCppProperties.temperature"]], "tensorsplit (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.tensorSplit"], [463, "sparknlp.common.properties.HasLlamaCppProperties.tensorSplit"]], "tfsz (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.tfsZ"], [463, "sparknlp.common.properties.HasLlamaCppProperties.tfsZ"]], "threshold (hasclassifieractivationproperties attribute)": [[214, "sparknlp.common.properties.HasClassifierActivationProperties.threshold"], [463, "sparknlp.common.properties.HasClassifierActivationProperties.threshold"]], "topk (hasgeneratorproperties attribute)": [[214, "sparknlp.common.properties.HasGeneratorProperties.topK"], [463, "sparknlp.common.properties.HasGeneratorProperties.topK"]], "topk (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.topK"], [463, "sparknlp.common.properties.HasLlamaCppProperties.topK"]], "topp (hasgeneratorproperties attribute)": [[214, "sparknlp.common.properties.HasGeneratorProperties.topP"], [463, "sparknlp.common.properties.HasGeneratorProperties.topP"]], "topp (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.topP"], [463, "sparknlp.common.properties.HasLlamaCppProperties.topP"]], "typicalp (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.typicalP"], [463, "sparknlp.common.properties.HasLlamaCppProperties.typicalP"]], "useclstoken (hasclstokenproperties attribute)": [[214, "sparknlp.common.properties.HasClsTokenProperties.useCLSToken"], [463, "sparknlp.common.properties.HasClsTokenProperties.useCLSToken"]], "usechattemplate (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.useChatTemplate"], [463, "sparknlp.common.properties.HasLlamaCppProperties.useChatTemplate"]], "usemlock (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.useMlock"], [463, "sparknlp.common.properties.HasLlamaCppProperties.useMlock"]], "usemmap (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.useMmap"], [463, "sparknlp.common.properties.HasLlamaCppProperties.useMmap"]], "yarnattnfactor (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.yarnAttnFactor"], [463, "sparknlp.common.properties.HasLlamaCppProperties.yarnAttnFactor"]], "yarnbetafast (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaFast"], [463, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaFast"]], "yarnbetaslow (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaSlow"], [463, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaSlow"]], "yarnextfactor (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.yarnExtFactor"], [463, "sparknlp.common.properties.HasLlamaCppProperties.yarnExtFactor"]], "yarnorigctx (hasllamacppproperties attribute)": [[214, "sparknlp.common.properties.HasLlamaCppProperties.yarnOrigCtx"], [463, "sparknlp.common.properties.HasLlamaCppProperties.yarnOrigCtx"]], "binary (readas attribute)": [[215, "sparknlp.common.read_as.ReadAs.BINARY"], [464, "sparknlp.common.read_as.ReadAs.BINARY"]], "readas (class in sparknlp.common.read_as)": [[215, "sparknlp.common.read_as.ReadAs"], [464, "sparknlp.common.read_as.ReadAs"]], "spark (readas attribute)": [[215, "sparknlp.common.read_as.ReadAs.SPARK"], [464, "sparknlp.common.read_as.ReadAs.SPARK"]], "text (readas attribute)": [[215, "sparknlp.common.read_as.ReadAs.TEXT"], [464, "sparknlp.common.read_as.ReadAs.TEXT"]], "sparknlp.common.read_as": [[215, "module-sparknlp.common.read_as"], [464, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[216, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"], [465, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[216, "module-sparknlp.common.recursive_annotator_approach"], [465, "module-sparknlp.common.recursive_annotator_approach"]], "hasstorage (class in sparknlp.common.storage)": [[217, "sparknlp.common.storage.HasStorage"], [466, "sparknlp.common.storage.HasStorage"]], "hasstoragemodel (class in sparknlp.common.storage)": [[217, "sparknlp.common.storage.HasStorageModel"], [466, "sparknlp.common.storage.HasStorageModel"]], "hasstorageoptions (class in sparknlp.common.storage)": [[217, "sparknlp.common.storage.HasStorageOptions"], [466, "sparknlp.common.storage.HasStorageOptions"]], "hasstorageref (class in sparknlp.common.storage)": [[217, "sparknlp.common.storage.HasStorageRef"], [466, "sparknlp.common.storage.HasStorageRef"]], "enableinmemorystorage (hasstorageoptions attribute)": [[217, "sparknlp.common.storage.HasStorageOptions.enableInMemoryStorage"], [466, "sparknlp.common.storage.HasStorageOptions.enableInMemoryStorage"]], "getenableinmemorystorage() (hasstorageoptions method)": [[217, "sparknlp.common.storage.HasStorageOptions.getEnableInMemoryStorage"], [466, "sparknlp.common.storage.HasStorageOptions.getEnableInMemoryStorage"]], "getincludestorage() (hasstorageoptions method)": [[217, "sparknlp.common.storage.HasStorageOptions.getIncludeStorage"], [466, "sparknlp.common.storage.HasStorageOptions.getIncludeStorage"]], "getstoragepath() (hasstorage method)": [[217, "sparknlp.common.storage.HasStorage.getStoragePath"], [466, "sparknlp.common.storage.HasStorage.getStoragePath"]], "getstorageref() (hasstorageref method)": [[217, "sparknlp.common.storage.HasStorageRef.getStorageRef"], [466, "sparknlp.common.storage.HasStorageRef.getStorageRef"]], "includestorage (hasstorageoptions attribute)": [[217, "sparknlp.common.storage.HasStorageOptions.includeStorage"], [466, "sparknlp.common.storage.HasStorageOptions.includeStorage"]], "loadstorage() (hasstoragemodel static method)": [[217, "sparknlp.common.storage.HasStorageModel.loadStorage"], [466, "sparknlp.common.storage.HasStorageModel.loadStorage"]], "loadstorages() (hasstoragemodel static method)": [[217, "sparknlp.common.storage.HasStorageModel.loadStorages"], [466, "sparknlp.common.storage.HasStorageModel.loadStorages"]], "savestorage() (hasstoragemodel method)": [[217, "sparknlp.common.storage.HasStorageModel.saveStorage"], [466, "sparknlp.common.storage.HasStorageModel.saveStorage"]], "setenableinmemorystorage() (hasstorageoptions method)": [[217, "sparknlp.common.storage.HasStorageOptions.setEnableInMemoryStorage"], [466, "sparknlp.common.storage.HasStorageOptions.setEnableInMemoryStorage"]], "setincludestorage() (hasstorageoptions method)": [[217, "sparknlp.common.storage.HasStorageOptions.setIncludeStorage"], [466, "sparknlp.common.storage.HasStorageOptions.setIncludeStorage"]], "setstoragepath() (hasstorage method)": [[217, "sparknlp.common.storage.HasStorage.setStoragePath"], [466, "sparknlp.common.storage.HasStorage.setStoragePath"]], "setstorageref() (hasstorageref method)": [[217, "sparknlp.common.storage.HasStorageRef.setStorageRef"], [466, "sparknlp.common.storage.HasStorageRef.setStorageRef"]], "sparknlp.common.storage": [[217, "module-sparknlp.common.storage"], [466, "module-sparknlp.common.storage"]], "storagepath (hasstorage attribute)": [[217, "sparknlp.common.storage.HasStorage.storagePath"], [466, "sparknlp.common.storage.HasStorage.storagePath"]], "storageref (hasstorageref attribute)": [[217, "sparknlp.common.storage.HasStorageRef.storageRef"], [466, "sparknlp.common.storage.HasStorageRef.storageRef"]], "externalresource() (in module sparknlp.common.utils)": [[218, "sparknlp.common.utils.ExternalResource"], [467, "sparknlp.common.utils.ExternalResource"]], "regexrule() (in module sparknlp.common.utils)": [[218, "sparknlp.common.utils.RegexRule"], [467, "sparknlp.common.utils.RegexRule"]], "sparknlp.common.utils": [[218, "module-sparknlp.common.utils"], [467, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[219, "sparknlp.functions.explode_annotations_col"], [468, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[219, "sparknlp.functions.filter_by_annotations_col"], [468, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[219, "sparknlp.functions.map_annotations"], [468, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[219, "sparknlp.functions.map_annotations_array"], [468, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[219, "sparknlp.functions.map_annotations_col"], [468, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[219, "sparknlp.functions.map_annotations_cols"], [468, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[219, "sparknlp.functions.map_annotations_strict"], [468, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[219, "module-sparknlp.functions"], [468, "module-sparknlp.functions"]], "sparknlp.internal": [[220, "module-sparknlp.internal"], [473, "module-sparknlp.internal"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[221, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"], [470, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[221, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"], [470, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[221, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"], [470, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[221, "module-sparknlp.internal.annotator_java_ml"], [470, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[222, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"], [471, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "outputannotatortype (annotatortransformer attribute)": [[222, "sparknlp.internal.annotator_transformer.AnnotatorTransformer.outputAnnotatorType"], [471, "sparknlp.internal.annotator_transformer.AnnotatorTransformer.outputAnnotatorType"]], "sparknlp.internal.annotator_transformer": [[222, "module-sparknlp.internal.annotator_transformer"], [471, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[223, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"], [472, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "apply() (extendedjavawrapper method)": [[223, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.apply"], [472, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.apply"]], "getdataframe() (extendedjavawrapper method)": [[223, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.getDataFrame"], [472, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.getDataFrame"]], "new_java_array() (extendedjavawrapper method)": [[223, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"], [472, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "new_java_array_integer() (extendedjavawrapper method)": [[223, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_integer"], [472, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_integer"]], "new_java_array_string() (extendedjavawrapper method)": [[223, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_string"], [472, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_string"]], "new_java_obj() (extendedjavawrapper method)": [[223, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_obj"], [472, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_obj"]], "spark_version() (extendedjavawrapper method)": [[223, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.spark_version"], [472, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.spark_version"]], "sparknlp.internal.extended_java_wrapper": [[223, "module-sparknlp.internal.extended_java_wrapper"], [472, "module-sparknlp.internal.extended_java_wrapper"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[224, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"], [474, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[224, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"], [474, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "getter_attrs (paramsgetterssetters attribute)": [[224, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getter_attrs"], [474, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getter_attrs"]], "setparamvalue() (paramsgetterssetters method)": [[224, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"], [474, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[224, "module-sparknlp.internal.params_getters_setters"], [474, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[225, "sparknlp.internal.recursive.RecursiveEstimator"], [475, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[225, "sparknlp.internal.recursive.RecursiveTransformer"], [475, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[225, "sparknlp.internal.recursive.RecursiveEstimator.fit"], [475, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[225, "module-sparknlp.internal.recursive"], [475, "module-sparknlp.internal.recursive"]], "transform_recursive() (recursivetransformer method)": [[225, "sparknlp.internal.recursive.RecursiveTransformer.transform_recursive"], [475, "sparknlp.internal.recursive.RecursiveTransformer.transform_recursive"]], "sparknlp.logging": [[226, "module-sparknlp.logging"], [477, "module-sparknlp.logging"]], "cometlogger (class in sparknlp.logging.comet)": [[227, "sparknlp.logging.comet.CometLogger"], [476, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[227, "sparknlp.logging.comet.CometLogger.end"], [476, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[227, "sparknlp.logging.comet.CometLogger.log_asset"], [476, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[227, "sparknlp.logging.comet.CometLogger.log_asset_data"], [476, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[227, "sparknlp.logging.comet.CometLogger.log_completed_run"], [476, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[227, "sparknlp.logging.comet.CometLogger.log_metrics"], [476, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[227, "sparknlp.logging.comet.CometLogger.log_parameters"], [476, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[227, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"], [476, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[227, "sparknlp.logging.comet.CometLogger.log_visualization"], [476, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[227, "sparknlp.logging.comet.CometLogger.monitor"], [476, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[227, "module-sparknlp.logging.comet"], [476, "module-sparknlp.logging.comet"]], "sparknlp.partition": [[228, "module-sparknlp.partition"], [478, "module-sparknlp.partition"]], "partition (class in sparknlp.partition.partition)": [[229, "sparknlp.partition.partition.Partition"], [479, "sparknlp.partition.partition.Partition"]], "partition() (partition method)": [[229, "sparknlp.partition.partition.Partition.partition"], [479, "sparknlp.partition.partition.Partition.partition"]], "partition_text() (partition method)": [[229, "sparknlp.partition.partition.Partition.partition_text"], [479, "sparknlp.partition.partition.Partition.partition_text"]], "partition_urls() (partition method)": [[229, "sparknlp.partition.partition.Partition.partition_urls"], [479, "sparknlp.partition.partition.Partition.partition_urls"]], "sparknlp.partition.partition": [[229, "module-sparknlp.partition.partition"], [479, "module-sparknlp.partition.partition"]], "hasemailreaderproperties (class in sparknlp.partition.partition_properties)": [[230, "sparknlp.partition.partition_properties.HasEmailReaderProperties"], [480, "sparknlp.partition.partition_properties.HasEmailReaderProperties"]], "hasexcelreaderproperties (class in sparknlp.partition.partition_properties)": [[230, "sparknlp.partition.partition_properties.HasExcelReaderProperties"], [480, "sparknlp.partition.partition_properties.HasExcelReaderProperties"]], "hashtmlreaderproperties (class in sparknlp.partition.partition_properties)": [[230, "sparknlp.partition.partition_properties.HasHTMLReaderProperties"], [480, "sparknlp.partition.partition_properties.HasHTMLReaderProperties"]], "haspowerpointproperties (class in sparknlp.partition.partition_properties)": [[230, "sparknlp.partition.partition_properties.HasPowerPointProperties"], [480, "sparknlp.partition.partition_properties.HasPowerPointProperties"]], "hastextreaderproperties (class in sparknlp.partition.partition_properties)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties"]], "addattachmentcontent (hasemailreaderproperties attribute)": [[230, "sparknlp.partition.partition_properties.HasEmailReaderProperties.addAttachmentContent"], [480, "sparknlp.partition.partition_properties.HasEmailReaderProperties.addAttachmentContent"]], "appendcells (hasexcelreaderproperties attribute)": [[230, "sparknlp.partition.partition_properties.HasExcelReaderProperties.appendCells"], [480, "sparknlp.partition.partition_properties.HasExcelReaderProperties.appendCells"]], "cellseparator (hasexcelreaderproperties attribute)": [[230, "sparknlp.partition.partition_properties.HasExcelReaderProperties.cellSeparator"], [480, "sparknlp.partition.partition_properties.HasExcelReaderProperties.cellSeparator"]], "getaddattachmentcontent() (hasemailreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasEmailReaderProperties.getAddAttachmentContent"], [480, "sparknlp.partition.partition_properties.HasEmailReaderProperties.getAddAttachmentContent"]], "getappendcells() (hasexcelreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getAppendCells"], [480, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getAppendCells"]], "getcellseparator() (hasexcelreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getCellSeparator"], [480, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getCellSeparator"]], "getgroupbrokenparagraphs() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.getGroupBrokenParagraphs"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.getGroupBrokenParagraphs"]], "getincludeslidenotes() (haspowerpointproperties method)": [[230, "sparknlp.partition.partition_properties.HasPowerPointProperties.getIncludeSlideNotes"], [480, "sparknlp.partition.partition_properties.HasPowerPointProperties.getIncludeSlideNotes"]], "getmaxlinecount() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.getMaxLineCount"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.getMaxLineCount"]], "getparagraphsplit() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.getParagraphSplit"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.getParagraphSplit"]], "getshortlinewordthreshold() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.getShortLineWordThreshold"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.getShortLineWordThreshold"]], "getthreshold() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.getThreshold"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.getThreshold"]], "gettimeout() (hashtmlreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.getTimeout"], [480, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.getTimeout"]], "gettitlelengthsize() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.getTitleLengthSize"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.getTitleLengthSize"]], "groupbrokenparagraphs (hastextreaderproperties attribute)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.groupBrokenParagraphs"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.groupBrokenParagraphs"]], "includeslidenotes (haspowerpointproperties attribute)": [[230, "sparknlp.partition.partition_properties.HasPowerPointProperties.includeSlideNotes"], [480, "sparknlp.partition.partition_properties.HasPowerPointProperties.includeSlideNotes"]], "maxlinecount (hastextreaderproperties attribute)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.maxLineCount"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.maxLineCount"]], "paragraphsplit (hastextreaderproperties attribute)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.paragraphSplit"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.paragraphSplit"]], "setaddattachmentcontent() (hasemailreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasEmailReaderProperties.setAddAttachmentContent"], [480, "sparknlp.partition.partition_properties.HasEmailReaderProperties.setAddAttachmentContent"]], "setappendcells() (hasexcelreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setAppendCells"], [480, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setAppendCells"]], "setcellseparator() (hasexcelreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setCellSeparator"], [480, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setCellSeparator"]], "setgroupbrokenparagraphs() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.setGroupBrokenParagraphs"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.setGroupBrokenParagraphs"]], "setheaders() (hashtmlreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setHeaders"], [480, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setHeaders"]], "setincludeslidenotes() (haspowerpointproperties method)": [[230, "sparknlp.partition.partition_properties.HasPowerPointProperties.setIncludeSlideNotes"], [480, "sparknlp.partition.partition_properties.HasPowerPointProperties.setIncludeSlideNotes"]], "setmaxlinecount() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.setMaxLineCount"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.setMaxLineCount"]], "setparagraphsplit() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.setParagraphSplit"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.setParagraphSplit"]], "setshortlinewordthreshold() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.setShortLineWordThreshold"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.setShortLineWordThreshold"]], "setthreshold() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.setThreshold"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.setThreshold"]], "settimeout() (hashtmlreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setTimeout"], [480, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setTimeout"]], "settitlelengthsize() (hastextreaderproperties method)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.setTitleLengthSize"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.setTitleLengthSize"]], "shortlinewordthreshold (hastextreaderproperties attribute)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.shortLineWordThreshold"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.shortLineWordThreshold"]], "sparknlp.partition.partition_properties": [[230, "module-sparknlp.partition.partition_properties"], [480, "module-sparknlp.partition.partition_properties"]], "threshold (hastextreaderproperties attribute)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.threshold"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.threshold"]], "timeout (hashtmlreaderproperties attribute)": [[230, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.timeout"], [480, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.timeout"]], "titlelengthsize (hastextreaderproperties attribute)": [[230, "sparknlp.partition.partition_properties.HasTextReaderProperties.titleLengthSize"], [480, "sparknlp.partition.partition_properties.HasTextReaderProperties.titleLengthSize"]], "partitiontransformer (class in sparknlp.partition.partition_transformer)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer"]], "contentpath (partitiontransformer attribute)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.contentPath"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.contentPath"]], "contenttype (partitiontransformer attribute)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.contentType"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.contentType"]], "getcontentpath() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentPath"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentPath"]], "getcontenttype() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentType"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentType"]], "getincludepagebreaks() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.getIncludePageBreaks"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.getIncludePageBreaks"]], "getinfertablestructure() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.getInferTableStructure"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.getInferTableStructure"]], "getstorecontent() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.getStoreContent"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.getStoreContent"]], "gettitlefontsize() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.getTitleFontSize"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.getTitleFontSize"]], "includepagebreaks (partitiontransformer attribute)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.includePageBreaks"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.includePageBreaks"]], "infertablestructure (partitiontransformer attribute)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.inferTableStructure"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.inferTableStructure"]], "inputannotatortypes (partitiontransformer attribute)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.inputAnnotatorTypes"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.inputAnnotatorTypes"]], "name (partitiontransformer attribute)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.name"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.name"]], "outputannotatortype (partitiontransformer attribute)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.outputAnnotatorType"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.outputAnnotatorType"]], "setcontentpath() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentPath"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentPath"]], "setcontenttype() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentType"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentType"]], "setincludepagebreaks() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.setIncludePageBreaks"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.setIncludePageBreaks"]], "setinfertablestructure() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.setInferTableStructure"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.setInferTableStructure"]], "setstorecontent() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.setStoreContent"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.setStoreContent"]], "settitlefontsize() (partitiontransformer method)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.setTitleFontSize"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.setTitleFontSize"]], "sparknlp.partition.partition_transformer": [[231, "module-sparknlp.partition.partition_transformer"], [481, "module-sparknlp.partition.partition_transformer"]], "storecontent (partitiontransformer attribute)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.storeContent"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.storeContent"]], "titlefontsize (partitiontransformer attribute)": [[231, "sparknlp.partition.partition_transformer.PartitionTransformer.titleFontSize"], [481, "sparknlp.partition.partition_transformer.PartitionTransformer.titleFontSize"]], "sparknlp.pretrained": [[232, "module-sparknlp.pretrained"], [482, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[233, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"], [483, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[233, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"], [483, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "from_disk() (pretrainedpipeline static method)": [[233, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.from_disk"], [483, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.from_disk"]], "fullannotate() (pretrainedpipeline method)": [[233, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"], [483, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[233, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"], [483, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[233, "module-sparknlp.pretrained.pretrained_pipeline"], [483, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[233, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"], [483, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[234, "sparknlp.pretrained.resource_downloader.ResourceDownloader"], [484, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[234, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"], [484, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[234, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"], [484, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[234, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"], [484, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[234, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"], [484, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[234, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"], [484, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[234, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"], [484, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[234, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"], [484, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[234, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"], [484, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[234, "module-sparknlp.pretrained.resource_downloader"], [484, "module-sparknlp.pretrained.resource_downloader"]], "printprogress() (in module sparknlp.pretrained.utils)": [[235, "sparknlp.pretrained.utils.printProgress"], [485, "sparknlp.pretrained.utils.printProgress"]], "sparknlp.pretrained.utils": [[235, "module-sparknlp.pretrained.utils"], [485, "module-sparknlp.pretrained.utils"]], "sparknlp.reader": [[236, "module-sparknlp.reader"], [487, "module-sparknlp.reader"]], "pdf_layout_text_stripper (textstrippertype attribute)": [[237, "sparknlp.reader.enums.TextStripperType.PDF_LAYOUT_TEXT_STRIPPER"], [486, "sparknlp.reader.enums.TextStripperType.PDF_LAYOUT_TEXT_STRIPPER"]], "pdf_text_stripper (textstrippertype attribute)": [[237, "sparknlp.reader.enums.TextStripperType.PDF_TEXT_STRIPPER"], [486, "sparknlp.reader.enums.TextStripperType.PDF_TEXT_STRIPPER"]], "textstrippertype (class in sparknlp.reader.enums)": [[237, "sparknlp.reader.enums.TextStripperType"], [486, "sparknlp.reader.enums.TextStripperType"]], "sparknlp.reader.enums": [[237, "module-sparknlp.reader.enums"], [486, "module-sparknlp.reader.enums"]], "pdftotext (class in sparknlp.reader.pdf_to_text)": [[238, "sparknlp.reader.pdf_to_text.PdfToText"], [488, "sparknlp.reader.pdf_to_text.PdfToText"]], "onlypagenum (pdftotext attribute)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.onlyPageNum"], [488, "sparknlp.reader.pdf_to_text.PdfToText.onlyPageNum"]], "pagenumcol (pdftotext attribute)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.pageNumCol"], [488, "sparknlp.reader.pdf_to_text.PdfToText.pageNumCol"]], "partitionnum (pdftotext attribute)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.partitionNum"], [488, "sparknlp.reader.pdf_to_text.PdfToText.partitionNum"]], "setinputcol() (pdftotext method)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.setInputCol"], [488, "sparknlp.reader.pdf_to_text.PdfToText.setInputCol"]], "setonlypagenum() (pdftotext method)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.setOnlyPageNum"], [488, "sparknlp.reader.pdf_to_text.PdfToText.setOnlyPageNum"]], "setoutputcol() (pdftotext method)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.setOutputCol"], [488, "sparknlp.reader.pdf_to_text.PdfToText.setOutputCol"]], "setpagenumcol() (pdftotext method)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.setPageNumCol"], [488, "sparknlp.reader.pdf_to_text.PdfToText.setPageNumCol"]], "setpartitionnum() (pdftotext method)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.setPartitionNum"], [488, "sparknlp.reader.pdf_to_text.PdfToText.setPartitionNum"]], "setsort() (pdftotext method)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.setSort"], [488, "sparknlp.reader.pdf_to_text.PdfToText.setSort"]], "setsplitpage() (pdftotext method)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.setSplitPage"], [488, "sparknlp.reader.pdf_to_text.PdfToText.setSplitPage"]], "setstoresplittedpdf() (pdftotext method)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.setStoreSplittedPdf"], [488, "sparknlp.reader.pdf_to_text.PdfToText.setStoreSplittedPdf"]], "settextstripper() (pdftotext method)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.setTextStripper"], [488, "sparknlp.reader.pdf_to_text.PdfToText.setTextStripper"]], "sort (pdftotext attribute)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.sort"], [488, "sparknlp.reader.pdf_to_text.PdfToText.sort"]], "sparknlp.reader.pdf_to_text": [[238, "module-sparknlp.reader.pdf_to_text"], [488, "module-sparknlp.reader.pdf_to_text"]], "splitpage (pdftotext attribute)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.splitPage"], [488, "sparknlp.reader.pdf_to_text.PdfToText.splitPage"]], "storesplittedpdf (pdftotext attribute)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.storeSplittedPdf"], [488, "sparknlp.reader.pdf_to_text.PdfToText.storeSplittedPdf"]], "textstripper (pdftotext attribute)": [[238, "sparknlp.reader.pdf_to_text.PdfToText.textStripper"], [488, "sparknlp.reader.pdf_to_text.PdfToText.textStripper"]], "sparknlpreader (class in sparknlp.reader.sparknlp_reader)": [[239, "sparknlp.reader.sparknlp_reader.SparkNLPReader"], [489, "sparknlp.reader.sparknlp_reader.SparkNLPReader"]], "doc() (sparknlpreader method)": [[239, "sparknlp.reader.sparknlp_reader.SparkNLPReader.doc"], [489, "sparknlp.reader.sparknlp_reader.SparkNLPReader.doc"]], "email() (sparknlpreader method)": [[239, "sparknlp.reader.sparknlp_reader.SparkNLPReader.email"], [489, "sparknlp.reader.sparknlp_reader.SparkNLPReader.email"]], "html() (sparknlpreader method)": [[239, "sparknlp.reader.sparknlp_reader.SparkNLPReader.html"], [489, "sparknlp.reader.sparknlp_reader.SparkNLPReader.html"]], "pdf() (sparknlpreader method)": [[239, "sparknlp.reader.sparknlp_reader.SparkNLPReader.pdf"], [489, "sparknlp.reader.sparknlp_reader.SparkNLPReader.pdf"]], "ppt() (sparknlpreader method)": [[239, "sparknlp.reader.sparknlp_reader.SparkNLPReader.ppt"], [489, "sparknlp.reader.sparknlp_reader.SparkNLPReader.ppt"]], "sparknlp.reader.sparknlp_reader": [[239, "module-sparknlp.reader.sparknlp_reader"], [489, "module-sparknlp.reader.sparknlp_reader"]], "txt() (sparknlpreader method)": [[239, "sparknlp.reader.sparknlp_reader.SparkNLPReader.txt"], [489, "sparknlp.reader.sparknlp_reader.SparkNLPReader.txt"]], "xls() (sparknlpreader method)": [[239, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xls"], [489, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xls"]], "sparknlp.training": [[240, "module-sparknlp.training"], [492, "module-sparknlp.training"]], "conll (class in sparknlp.training.conll)": [[241, "sparknlp.training.conll.CoNLL"], [490, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[241, "sparknlp.training.conll.CoNLL.readDataset"], [490, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[241, "module-sparknlp.training.conll"], [490, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[242, "sparknlp.training.conllu.CoNLLU"], [491, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[242, "sparknlp.training.conllu.CoNLLU.readDataset"], [491, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[242, "module-sparknlp.training.conllu"], [491, "module-sparknlp.training.conllu"]], "pos (class in sparknlp.training.pos)": [[243, "sparknlp.training.pos.POS"], [493, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[243, "sparknlp.training.pos.POS.readDataset"], [493, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[243, "module-sparknlp.training.pos"], [493, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[244, "sparknlp.training.pub_tator.PubTator"], [494, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[244, "sparknlp.training.pub_tator.PubTator.readDataset"], [494, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[244, "module-sparknlp.training.pub_tator"], [494, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[245, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"], [495, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "readjsonfile() (spacytoannotation method)": [[245, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation.readJsonFile"], [495, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation.readJsonFile"]], "sparknlp.training.spacy_to_annotation": [[245, "module-sparknlp.training.spacy_to_annotation"], [495, "module-sparknlp.training.spacy_to_annotation"]], "pushtohub (class in sparknlp.upload_to_hub)": [[247, "sparknlp.upload_to_hub.PushToHub"], [497, "sparknlp.upload_to_hub.PushToHub"]], "check_for_required_info() (pushtohub method)": [[247, "sparknlp.upload_to_hub.PushToHub.check_for_required_info"], [497, "sparknlp.upload_to_hub.PushToHub.check_for_required_info"]], "create_docs() (pushtohub method)": [[247, "sparknlp.upload_to_hub.PushToHub.create_docs"], [497, "sparknlp.upload_to_hub.PushToHub.create_docs"]], "list_of_tasks (pushtohub attribute)": [[247, "sparknlp.upload_to_hub.PushToHub.list_of_tasks"], [497, "sparknlp.upload_to_hub.PushToHub.list_of_tasks"]], "push_to_hub() (pushtohub method)": [[247, "sparknlp.upload_to_hub.PushToHub.push_to_hub"], [497, "sparknlp.upload_to_hub.PushToHub.push_to_hub"]], "sparknlp.upload_to_hub": [[247, "module-sparknlp.upload_to_hub"], [497, "module-sparknlp.upload_to_hub"]], "unzip_directory() (pushtohub method)": [[247, "sparknlp.upload_to_hub.PushToHub.unzip_directory"], [497, "sparknlp.upload_to_hub.PushToHub.unzip_directory"]], "zip_directory() (pushtohub method)": [[247, "sparknlp.upload_to_hub.PushToHub.zip_directory"], [497, "sparknlp.upload_to_hub.PushToHub.zip_directory"]], "conllgenerator (class in sparknlp.util)": [[248, "sparknlp.util.CoNLLGenerator"], [498, "sparknlp.util.CoNLLGenerator"]], "exportconllfiles() (conllgenerator static method)": [[248, "sparknlp.util.CoNLLGenerator.exportConllFiles"], [498, "sparknlp.util.CoNLLGenerator.exportConllFiles"]], "get_config_path() (in module sparknlp.util)": [[248, "sparknlp.util.get_config_path"], [498, "sparknlp.util.get_config_path"]], "sparknlp.util": [[248, "module-sparknlp.util"], [498, "module-sparknlp.util"]], "annotatortype (annotation attribute)": [[251, "sparknlp.annotation.Annotation.annotatorType"]], "begin (annotation attribute)": [[251, "sparknlp.annotation.Annotation.begin"]], "embeddings (annotation attribute)": [[251, "sparknlp.annotation.Annotation.embeddings"]], "end (annotation attribute)": [[251, "sparknlp.annotation.Annotation.end"]], "metadata (annotation attribute)": [[251, "sparknlp.annotation.Annotation.metadata"]], "result (annotation attribute)": [[251, "sparknlp.annotation.Annotation.result"]], "annotatortype (annotationaudio attribute)": [[252, "sparknlp.annotation_audio.AnnotationAudio.annotatorType"]], "metadata (annotationaudio attribute)": [[252, "sparknlp.annotation_audio.AnnotationAudio.metadata"]], "result (annotationaudio attribute)": [[252, "sparknlp.annotation_audio.AnnotationAudio.result"]], "annotatortype (annotationimage attribute)": [[253, "sparknlp.annotation_image.AnnotationImage.annotatorType"]], "height (annotationimage attribute)": [[253, "sparknlp.annotation_image.AnnotationImage.height"]], "metadata (annotationimage attribute)": [[253, "sparknlp.annotation_image.AnnotationImage.metadata"]], "mode (annotationimage attribute)": [[253, "sparknlp.annotation_image.AnnotationImage.mode"]], "nchannels (annotationimage attribute)": [[253, "sparknlp.annotation_image.AnnotationImage.nChannels"]], "origin (annotationimage attribute)": [[253, "sparknlp.annotation_image.AnnotationImage.origin"]], "result (annotationimage attribute)": [[253, "sparknlp.annotation_image.AnnotationImage.result"]], "width (annotationimage attribute)": [[253, "sparknlp.annotation_image.AnnotationImage.width"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[336, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[336, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[336, "module-sparknlp.annotator.document_token_splitter_test"]], "test_run() (documenttokensplittertestspec method)": [[336, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.test_run"]], "annotators (in module sparknlp.annotator)": [[369, "sparknlp.annotator.annotators"]], "audio (in module sparknlp.annotator)": [[369, "sparknlp.annotator.audio"]], "classifier (in module sparknlp.annotator)": [[369, "sparknlp.annotator.classifier"]], "coref (in module sparknlp.annotator)": [[369, "sparknlp.annotator.coref"]], "cv (in module sparknlp.annotator)": [[369, "sparknlp.annotator.cv"]], "embeddings (in module sparknlp.annotator)": [[369, "sparknlp.annotator.embeddings"]], "er (in module sparknlp.annotator)": [[369, "sparknlp.annotator.er"]], "keyword (in module sparknlp.annotator)": [[369, "sparknlp.annotator.keyword"]], "ld (in module sparknlp.annotator)": [[369, "sparknlp.annotator.ld"]], "ner (in module sparknlp.annotator)": [[369, "sparknlp.annotator.ner"]], "parser (in module sparknlp.annotator)": [[369, "sparknlp.annotator.parser"]], "pos (in module sparknlp.annotator)": [[369, "sparknlp.annotator.pos"]], "regex (in module sparknlp.annotator)": [[369, "sparknlp.annotator.regex"]], "sbd (in module sparknlp.annotator)": [[369, "sparknlp.annotator.sbd"]], "sda (in module sparknlp.annotator)": [[369, "sparknlp.annotator.sda"]], "sentence_detector_dl (in module sparknlp.annotator)": [[369, "sparknlp.annotator.sentence_detector_dl"]], "seq2seq (in module sparknlp.annotator)": [[369, "sparknlp.annotator.seq2seq"]], "spell (in module sparknlp.annotator)": [[369, "sparknlp.annotator.spell"]], "ws (in module sparknlp.annotator)": [[369, "sparknlp.annotator.ws"]], "dictionary_path (norvigsweetingapproach attribute)": [[427, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary_path"]], "dictionary_path (symmetricdeleteapproach attribute)": [[428, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary_path"]], "parse_embeddings (lightpipeline attribute)": [[450, "sparknlp.base.light_pipeline.LightPipeline.parse_embeddings"]], "pipeline_model (lightpipeline attribute)": [[450, "sparknlp.base.light_pipeline.LightPipeline.pipeline_model"]], "stages (recursivepipelinemodel attribute)": [[453, "sparknlp.base.recursive_pipeline.RecursivePipelineModel.stages"]], "covered (coverageresult attribute)": [[460, "sparknlp.common.coverage_result.CoverageResult.covered"]], "percentage (coverageresult attribute)": [[460, "sparknlp.common.coverage_result.CoverageResult.percentage"]], "total (coverageresult attribute)": [[460, "sparknlp.common.coverage_result.CoverageResult.total"]], "annotators (in module sparknlp)": [[469, "sparknlp.annotators"]], "embeddings (in module sparknlp)": [[469, "sparknlp.embeddings"]], "java_obj (extendedjavawrapper attribute)": [[472, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.java_obj"]], "sc (extendedjavawrapper attribute)": [[472, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.sc"]], "comet_ml (in module sparknlp.logging.comet)": [[476, "sparknlp.logging.comet.comet_ml"]], "comet_mode (cometlogger attribute)": [[476, "sparknlp.logging.comet.CometLogger.comet_mode"]], "experiment (cometlogger attribute)": [[476, "sparknlp.logging.comet.CometLogger.experiment"]], "experiment_id (cometlogger attribute)": [[476, "sparknlp.logging.comet.CometLogger.experiment_id"]], "experiment_kwargs (cometlogger attribute)": [[476, "sparknlp.logging.comet.CometLogger.experiment_kwargs"]], "project_name (cometlogger attribute)": [[476, "sparknlp.logging.comet.CometLogger.project_name"]], "thread (cometlogger attribute)": [[476, "sparknlp.logging.comet.CometLogger.thread"]], "workspace (cometlogger attribute)": [[476, "sparknlp.logging.comet.CometLogger.workspace"]], "spark (partition attribute)": [[479, "sparknlp.partition.partition.Partition.spark"]], "light_model (pretrainedpipeline attribute)": [[483, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.light_model"]], "spark (sparknlpreader attribute)": [[489, "sparknlp.reader.sparknlp_reader.SparkNLPReader.spark"]], "sparknlp.training.tfgraphs": [[496, "module-sparknlp.training.tfgraphs"]], "tf_graph (in module sparknlp.training.tfgraphs)": [[496, "sparknlp.training.tfgraphs.tf_graph"]], "tf_graph_1x (in module sparknlp.training.tfgraphs)": [[496, "sparknlp.training.tfgraphs.tf_graph_1x"]]}})