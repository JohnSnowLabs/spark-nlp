Search.setIndex({"docnames": ["_api/modules", "_api/sparknlp", "_api/sparknlp.annotation", "_api/sparknlp.annotation_audio", "_api/sparknlp.annotation_image", "_api/sparknlp.annotator", "_api/sparknlp.annotator.audio", "_api/sparknlp.annotator.audio.hubert_for_ctc", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc", "_api/sparknlp.annotator.audio.whisper_for_ctc", "_api/sparknlp.annotator.chunk2_doc", "_api/sparknlp.annotator.chunker", "_api/sparknlp.annotator.classifier_dl", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.classifier_dl", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.sentiment_dl", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification", "_api/sparknlp.annotator.cleaners", "_api/sparknlp.annotator.cleaners.cleaner", "_api/sparknlp.annotator.cleaners.extractor", "_api/sparknlp.annotator.coref", "_api/sparknlp.annotator.coref.spanbert_coref", "_api/sparknlp.annotator.cv", "_api/sparknlp.annotator.cv.blip_for_question_answering", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification", "_api/sparknlp.annotator.cv.convnext_for_image_classification", "_api/sparknlp.annotator.cv.florence2_transformer", "_api/sparknlp.annotator.cv.gemma3_for_multimodal", "_api/sparknlp.annotator.cv.internvl_for_multimodal", "_api/sparknlp.annotator.cv.janus_for_multimodal", "_api/sparknlp.annotator.cv.llava_for_multimodal", "_api/sparknlp.annotator.cv.mllama_for_multimodal", "_api/sparknlp.annotator.cv.paligemma_for_multimodal", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal", "_api/sparknlp.annotator.cv.qwen2vl_transformer", "_api/sparknlp.annotator.cv.smolvlm_transformer", "_api/sparknlp.annotator.cv.swin_for_image_classification", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning", "_api/sparknlp.annotator.cv.vit_for_image_classification", "_api/sparknlp.annotator.date2_chunk", "_api/sparknlp.annotator.dependency", "_api/sparknlp.annotator.dependency.dependency_parser", "_api/sparknlp.annotator.dependency.typed_dependency_parser", "_api/sparknlp.annotator.document_character_text_splitter", "_api/sparknlp.annotator.document_normalizer", "_api/sparknlp.annotator.document_token_splitter", "_api/sparknlp.annotator.document_token_splitter_test", "_api/sparknlp.annotator.embeddings", "_api/sparknlp.annotator.embeddings.albert_embeddings", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings", "_api/sparknlp.annotator.embeddings.bert_embeddings", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings", "_api/sparknlp.annotator.embeddings.bge_embeddings", "_api/sparknlp.annotator.embeddings.camembert_embeddings", "_api/sparknlp.annotator.embeddings.chunk_embeddings", "_api/sparknlp.annotator.embeddings.deberta_embeddings", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings", "_api/sparknlp.annotator.embeddings.doc2vec", "_api/sparknlp.annotator.embeddings.e5_embeddings", "_api/sparknlp.annotator.embeddings.e5v_embeddings", "_api/sparknlp.annotator.embeddings.elmo_embeddings", "_api/sparknlp.annotator.embeddings.instructor_embeddings", "_api/sparknlp.annotator.embeddings.longformer_embeddings", "_api/sparknlp.annotator.embeddings.mpnet_embeddings", "_api/sparknlp.annotator.embeddings.mxbai_embeddings", "_api/sparknlp.annotator.embeddings.nomic_embeddings", "_api/sparknlp.annotator.embeddings.roberta_embeddings", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.sentence_embeddings", "_api/sparknlp.annotator.embeddings.snowflake_embeddings", "_api/sparknlp.annotator.embeddings.uae_embeddings", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder", "_api/sparknlp.annotator.embeddings.word2vec", "_api/sparknlp.annotator.embeddings.word_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.xlnet_embeddings", "_api/sparknlp.annotator.er", "_api/sparknlp.annotator.er.entity_ruler", "_api/sparknlp.annotator.graph_extraction", "_api/sparknlp.annotator.keyword_extraction", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction", "_api/sparknlp.annotator.ld_dl", "_api/sparknlp.annotator.ld_dl.language_detector_dl", "_api/sparknlp.annotator.lemmatizer", "_api/sparknlp.annotator.matcher", "_api/sparknlp.annotator.matcher.big_text_matcher", "_api/sparknlp.annotator.matcher.date_matcher", "_api/sparknlp.annotator.matcher.multi_date_matcher", "_api/sparknlp.annotator.matcher.regex_matcher", "_api/sparknlp.annotator.matcher.text_matcher", "_api/sparknlp.annotator.n_gram_generator", "_api/sparknlp.annotator.ner", "_api/sparknlp.annotator.ner.ner_approach", "_api/sparknlp.annotator.ner.ner_converter", "_api/sparknlp.annotator.ner.ner_crf", "_api/sparknlp.annotator.ner.ner_dl", "_api/sparknlp.annotator.ner.ner_overwriter", "_api/sparknlp.annotator.ner.zero_shot_ner_model", "_api/sparknlp.annotator.normalizer", "_api/sparknlp.annotator.openai", "_api/sparknlp.annotator.openai.openai_completion", "_api/sparknlp.annotator.openai.openai_embeddings", "_api/sparknlp.annotator.param", "_api/sparknlp.annotator.param.classifier_encoder", "_api/sparknlp.annotator.param.evaluation_dl_params", "_api/sparknlp.annotator.pos", "_api/sparknlp.annotator.pos.perceptron", "_api/sparknlp.annotator.sentence", "_api/sparknlp.annotator.sentence.sentence_detector", "_api/sparknlp.annotator.sentence.sentence_detector_dl", "_api/sparknlp.annotator.sentiment", "_api/sparknlp.annotator.sentiment.sentiment_detector", "_api/sparknlp.annotator.sentiment.vivekn_sentiment", "_api/sparknlp.annotator.seq2seq", "_api/sparknlp.annotator.seq2seq.auto_gguf_model", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model", "_api/sparknlp.annotator.seq2seq.bart_transformer", "_api/sparknlp.annotator.seq2seq.cohere_transformer", "_api/sparknlp.annotator.seq2seq.cpm_transformer", "_api/sparknlp.annotator.seq2seq.gpt2_transformer", "_api/sparknlp.annotator.seq2seq.llama2_transformer", "_api/sparknlp.annotator.seq2seq.llama3_transformer", "_api/sparknlp.annotator.seq2seq.m2m100_transformer", "_api/sparknlp.annotator.seq2seq.marian_transformer", "_api/sparknlp.annotator.seq2seq.mistral_transformer", "_api/sparknlp.annotator.seq2seq.nllb_transformer", "_api/sparknlp.annotator.seq2seq.olmo_transformer", "_api/sparknlp.annotator.seq2seq.phi2_transformer", "_api/sparknlp.annotator.seq2seq.phi3_transformer", "_api/sparknlp.annotator.seq2seq.qwen_transformer", "_api/sparknlp.annotator.seq2seq.starcoder_transformer", "_api/sparknlp.annotator.seq2seq.t5_transformer", "_api/sparknlp.annotator.similarity", "_api/sparknlp.annotator.similarity.document_similarity_ranker", "_api/sparknlp.annotator.spell_check", "_api/sparknlp.annotator.spell_check.context_spell_checker", "_api/sparknlp.annotator.spell_check.norvig_sweeting", "_api/sparknlp.annotator.spell_check.symmetric_delete", "_api/sparknlp.annotator.stemmer", "_api/sparknlp.annotator.stop_words_cleaner", "_api/sparknlp.annotator.tf_ner_dl_graph_builder", "_api/sparknlp.annotator.token", "_api/sparknlp.annotator.token.chunk_tokenizer", "_api/sparknlp.annotator.token.recursive_tokenizer", "_api/sparknlp.annotator.token.regex_tokenizer", "_api/sparknlp.annotator.token.tokenizer", "_api/sparknlp.annotator.token2_chunk", "_api/sparknlp.annotator.ws", "_api/sparknlp.annotator.ws.word_segmenter", "_api/sparknlp.base", "_api/sparknlp.base.audio_assembler", "_api/sparknlp.base.doc2_chunk", "_api/sparknlp.base.document_assembler", "_api/sparknlp.base.embeddings_finisher", "_api/sparknlp.base.finisher", "_api/sparknlp.base.graph_finisher", "_api/sparknlp.base.has_recursive_fit", "_api/sparknlp.base.has_recursive_transform", "_api/sparknlp.base.image_assembler", "_api/sparknlp.base.light_pipeline", "_api/sparknlp.base.multi_document_assembler", "_api/sparknlp.base.prompt_assembler", "_api/sparknlp.base.recursive_pipeline", "_api/sparknlp.base.table_assembler", "_api/sparknlp.base.token_assembler", "_api/sparknlp.common", "_api/sparknlp.common.annotator_approach", "_api/sparknlp.common.annotator_model", "_api/sparknlp.common.annotator_properties", "_api/sparknlp.common.annotator_type", "_api/sparknlp.common.coverage_result", "_api/sparknlp.common.match_strategy", "_api/sparknlp.common.properties", "_api/sparknlp.common.read_as", "_api/sparknlp.common.recursive_annotator_approach", "_api/sparknlp.common.storage", "_api/sparknlp.common.utils", "_api/sparknlp.functions", "_api/sparknlp.internal", "_api/sparknlp.internal.annotator_java_ml", "_api/sparknlp.internal.annotator_transformer", "_api/sparknlp.internal.extended_java_wrapper", "_api/sparknlp.internal.params_getters_setters", "_api/sparknlp.internal.recursive", "_api/sparknlp.logging", "_api/sparknlp.logging.comet", "_api/sparknlp.partition", "_api/sparknlp.partition.partition", "_api/sparknlp.partition.partition_properties", "_api/sparknlp.partition.partition_transformer", "_api/sparknlp.pretrained", "_api/sparknlp.pretrained.pretrained_pipeline", "_api/sparknlp.pretrained.resource_downloader", "_api/sparknlp.pretrained.utils", "_api/sparknlp.reader", "_api/sparknlp.reader.enums", "_api/sparknlp.reader.pdf_to_text", "_api/sparknlp.reader.sparknlp_reader", "_api/sparknlp.training", "_api/sparknlp.training.conll", "_api/sparknlp.training.conllu", "_api/sparknlp.training.pos", "_api/sparknlp.training.pub_tator", "_api/sparknlp.training.spacy_to_annotation", "_api/sparknlp.training.tfgraphs", "_api/sparknlp.upload_to_hub", "_api/sparknlp.util", "getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distilbert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/cleaners/cleaner/index", "reference/autosummary/sparknlp/annotator/cleaners/extractor/index", "reference/autosummary/sparknlp/annotator/cleaners/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/blip_for_question_answering/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/florence2_transformer/index", "reference/autosummary/sparknlp/annotator/cv/gemma3_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/internvl_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/janus_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/llava_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/mllama_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/paligemma_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/phi3_vision_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/qwen2vl_transformer/index", "reference/autosummary/sparknlp/annotator/cv/smolvlm_transformer/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/auto_gguf_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/e5v_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_vision_model/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/cohere_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/olmo_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/prompt_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/partition/index", "reference/autosummary/sparknlp/partition/partition/index", "reference/autosummary/sparknlp/partition/partition_properties/index", "reference/autosummary/sparknlp/partition/partition_transformer/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/reader/enums/index", "reference/autosummary/sparknlp/reader/index", "reference/autosummary/sparknlp/reader/pdf_to_text/index", "reference/autosummary/sparknlp/reader/sparknlp_reader/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["_api/modules.rst", "_api/sparknlp.rst", "_api/sparknlp.annotation.rst", "_api/sparknlp.annotation_audio.rst", "_api/sparknlp.annotation_image.rst", "_api/sparknlp.annotator.rst", "_api/sparknlp.annotator.audio.rst", "_api/sparknlp.annotator.audio.hubert_for_ctc.rst", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc.rst", "_api/sparknlp.annotator.audio.whisper_for_ctc.rst", "_api/sparknlp.annotator.chunk2_doc.rst", "_api/sparknlp.annotator.chunker.rst", "_api/sparknlp.annotator.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.sentiment_dl.rst", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification.rst", "_api/sparknlp.annotator.cleaners.rst", "_api/sparknlp.annotator.cleaners.cleaner.rst", "_api/sparknlp.annotator.cleaners.extractor.rst", "_api/sparknlp.annotator.coref.rst", "_api/sparknlp.annotator.coref.spanbert_coref.rst", "_api/sparknlp.annotator.cv.rst", "_api/sparknlp.annotator.cv.blip_for_question_answering.rst", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification.rst", "_api/sparknlp.annotator.cv.convnext_for_image_classification.rst", "_api/sparknlp.annotator.cv.florence2_transformer.rst", "_api/sparknlp.annotator.cv.gemma3_for_multimodal.rst", "_api/sparknlp.annotator.cv.internvl_for_multimodal.rst", "_api/sparknlp.annotator.cv.janus_for_multimodal.rst", "_api/sparknlp.annotator.cv.llava_for_multimodal.rst", "_api/sparknlp.annotator.cv.mllama_for_multimodal.rst", "_api/sparknlp.annotator.cv.paligemma_for_multimodal.rst", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal.rst", "_api/sparknlp.annotator.cv.qwen2vl_transformer.rst", "_api/sparknlp.annotator.cv.smolvlm_transformer.rst", "_api/sparknlp.annotator.cv.swin_for_image_classification.rst", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.rst", "_api/sparknlp.annotator.cv.vit_for_image_classification.rst", "_api/sparknlp.annotator.date2_chunk.rst", "_api/sparknlp.annotator.dependency.rst", "_api/sparknlp.annotator.dependency.dependency_parser.rst", "_api/sparknlp.annotator.dependency.typed_dependency_parser.rst", "_api/sparknlp.annotator.document_character_text_splitter.rst", "_api/sparknlp.annotator.document_normalizer.rst", "_api/sparknlp.annotator.document_token_splitter.rst", "_api/sparknlp.annotator.document_token_splitter_test.rst", "_api/sparknlp.annotator.embeddings.rst", "_api/sparknlp.annotator.embeddings.albert_embeddings.rst", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.bge_embeddings.rst", "_api/sparknlp.annotator.embeddings.camembert_embeddings.rst", "_api/sparknlp.annotator.embeddings.chunk_embeddings.rst", "_api/sparknlp.annotator.embeddings.deberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.doc2vec.rst", "_api/sparknlp.annotator.embeddings.e5_embeddings.rst", "_api/sparknlp.annotator.embeddings.e5v_embeddings.rst", "_api/sparknlp.annotator.embeddings.elmo_embeddings.rst", "_api/sparknlp.annotator.embeddings.instructor_embeddings.rst", "_api/sparknlp.annotator.embeddings.longformer_embeddings.rst", "_api/sparknlp.annotator.embeddings.mpnet_embeddings.rst", "_api/sparknlp.annotator.embeddings.mxbai_embeddings.rst", "_api/sparknlp.annotator.embeddings.nomic_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.snowflake_embeddings.rst", "_api/sparknlp.annotator.embeddings.uae_embeddings.rst", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder.rst", "_api/sparknlp.annotator.embeddings.word2vec.rst", "_api/sparknlp.annotator.embeddings.word_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlnet_embeddings.rst", "_api/sparknlp.annotator.er.rst", "_api/sparknlp.annotator.er.entity_ruler.rst", "_api/sparknlp.annotator.graph_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction.rst", "_api/sparknlp.annotator.ld_dl.rst", "_api/sparknlp.annotator.ld_dl.language_detector_dl.rst", "_api/sparknlp.annotator.lemmatizer.rst", "_api/sparknlp.annotator.matcher.rst", "_api/sparknlp.annotator.matcher.big_text_matcher.rst", "_api/sparknlp.annotator.matcher.date_matcher.rst", "_api/sparknlp.annotator.matcher.multi_date_matcher.rst", "_api/sparknlp.annotator.matcher.regex_matcher.rst", "_api/sparknlp.annotator.matcher.text_matcher.rst", "_api/sparknlp.annotator.n_gram_generator.rst", "_api/sparknlp.annotator.ner.rst", "_api/sparknlp.annotator.ner.ner_approach.rst", "_api/sparknlp.annotator.ner.ner_converter.rst", "_api/sparknlp.annotator.ner.ner_crf.rst", "_api/sparknlp.annotator.ner.ner_dl.rst", "_api/sparknlp.annotator.ner.ner_overwriter.rst", "_api/sparknlp.annotator.ner.zero_shot_ner_model.rst", "_api/sparknlp.annotator.normalizer.rst", "_api/sparknlp.annotator.openai.rst", "_api/sparknlp.annotator.openai.openai_completion.rst", "_api/sparknlp.annotator.openai.openai_embeddings.rst", "_api/sparknlp.annotator.param.rst", "_api/sparknlp.annotator.param.classifier_encoder.rst", "_api/sparknlp.annotator.param.evaluation_dl_params.rst", "_api/sparknlp.annotator.pos.rst", "_api/sparknlp.annotator.pos.perceptron.rst", "_api/sparknlp.annotator.sentence.rst", "_api/sparknlp.annotator.sentence.sentence_detector.rst", "_api/sparknlp.annotator.sentence.sentence_detector_dl.rst", "_api/sparknlp.annotator.sentiment.rst", "_api/sparknlp.annotator.sentiment.sentiment_detector.rst", "_api/sparknlp.annotator.sentiment.vivekn_sentiment.rst", "_api/sparknlp.annotator.seq2seq.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_model.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model.rst", "_api/sparknlp.annotator.seq2seq.bart_transformer.rst", "_api/sparknlp.annotator.seq2seq.cohere_transformer.rst", "_api/sparknlp.annotator.seq2seq.cpm_transformer.rst", "_api/sparknlp.annotator.seq2seq.gpt2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama3_transformer.rst", "_api/sparknlp.annotator.seq2seq.m2m100_transformer.rst", "_api/sparknlp.annotator.seq2seq.marian_transformer.rst", "_api/sparknlp.annotator.seq2seq.mistral_transformer.rst", "_api/sparknlp.annotator.seq2seq.nllb_transformer.rst", "_api/sparknlp.annotator.seq2seq.olmo_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi2_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi3_transformer.rst", "_api/sparknlp.annotator.seq2seq.qwen_transformer.rst", "_api/sparknlp.annotator.seq2seq.starcoder_transformer.rst", "_api/sparknlp.annotator.seq2seq.t5_transformer.rst", "_api/sparknlp.annotator.similarity.rst", "_api/sparknlp.annotator.similarity.document_similarity_ranker.rst", "_api/sparknlp.annotator.spell_check.rst", "_api/sparknlp.annotator.spell_check.context_spell_checker.rst", "_api/sparknlp.annotator.spell_check.norvig_sweeting.rst", "_api/sparknlp.annotator.spell_check.symmetric_delete.rst", "_api/sparknlp.annotator.stemmer.rst", "_api/sparknlp.annotator.stop_words_cleaner.rst", "_api/sparknlp.annotator.tf_ner_dl_graph_builder.rst", "_api/sparknlp.annotator.token.rst", "_api/sparknlp.annotator.token.chunk_tokenizer.rst", "_api/sparknlp.annotator.token.recursive_tokenizer.rst", "_api/sparknlp.annotator.token.regex_tokenizer.rst", "_api/sparknlp.annotator.token.tokenizer.rst", "_api/sparknlp.annotator.token2_chunk.rst", "_api/sparknlp.annotator.ws.rst", "_api/sparknlp.annotator.ws.word_segmenter.rst", "_api/sparknlp.base.rst", "_api/sparknlp.base.audio_assembler.rst", "_api/sparknlp.base.doc2_chunk.rst", "_api/sparknlp.base.document_assembler.rst", "_api/sparknlp.base.embeddings_finisher.rst", "_api/sparknlp.base.finisher.rst", "_api/sparknlp.base.graph_finisher.rst", "_api/sparknlp.base.has_recursive_fit.rst", "_api/sparknlp.base.has_recursive_transform.rst", "_api/sparknlp.base.image_assembler.rst", "_api/sparknlp.base.light_pipeline.rst", "_api/sparknlp.base.multi_document_assembler.rst", "_api/sparknlp.base.prompt_assembler.rst", "_api/sparknlp.base.recursive_pipeline.rst", "_api/sparknlp.base.table_assembler.rst", "_api/sparknlp.base.token_assembler.rst", "_api/sparknlp.common.rst", "_api/sparknlp.common.annotator_approach.rst", "_api/sparknlp.common.annotator_model.rst", "_api/sparknlp.common.annotator_properties.rst", "_api/sparknlp.common.annotator_type.rst", "_api/sparknlp.common.coverage_result.rst", "_api/sparknlp.common.match_strategy.rst", "_api/sparknlp.common.properties.rst", "_api/sparknlp.common.read_as.rst", "_api/sparknlp.common.recursive_annotator_approach.rst", "_api/sparknlp.common.storage.rst", "_api/sparknlp.common.utils.rst", "_api/sparknlp.functions.rst", "_api/sparknlp.internal.rst", "_api/sparknlp.internal.annotator_java_ml.rst", "_api/sparknlp.internal.annotator_transformer.rst", "_api/sparknlp.internal.extended_java_wrapper.rst", "_api/sparknlp.internal.params_getters_setters.rst", "_api/sparknlp.internal.recursive.rst", "_api/sparknlp.logging.rst", "_api/sparknlp.logging.comet.rst", "_api/sparknlp.partition.rst", "_api/sparknlp.partition.partition.rst", "_api/sparknlp.partition.partition_properties.rst", "_api/sparknlp.partition.partition_transformer.rst", "_api/sparknlp.pretrained.rst", "_api/sparknlp.pretrained.pretrained_pipeline.rst", "_api/sparknlp.pretrained.resource_downloader.rst", "_api/sparknlp.pretrained.utils.rst", "_api/sparknlp.reader.rst", "_api/sparknlp.reader.enums.rst", "_api/sparknlp.reader.pdf_to_text.rst", "_api/sparknlp.reader.sparknlp_reader.rst", "_api/sparknlp.training.rst", "_api/sparknlp.training.conll.rst", "_api/sparknlp.training.conllu.rst", "_api/sparknlp.training.pos.rst", "_api/sparknlp.training.pub_tator.rst", "_api/sparknlp.training.spacy_to_annotation.rst", "_api/sparknlp.training.tfgraphs.rst", "_api/sparknlp.upload_to_hub.rst", "_api/sparknlp.util.rst", "getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distilbert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/cleaner/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/extractor/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/blip_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/florence2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/gemma3_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/internvl_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/janus_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/llava_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/mllama_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/paligemma_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/phi3_vision_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/qwen2vl_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/smolvlm_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/auto_gguf_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5v_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_vision_model/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/cohere_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/olmo_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/prompt_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/partition/index.rst", "reference/autosummary/sparknlp/partition/partition/index.rst", "reference/autosummary/sparknlp/partition/partition_properties/index.rst", "reference/autosummary/sparknlp/partition/partition_transformer/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/reader/enums/index.rst", "reference/autosummary/sparknlp/reader/index.rst", "reference/autosummary/sparknlp/reader/pdf_to_text/index.rst", "reference/autosummary/sparknlp/reader/sparknlp_reader/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["sparknlp", "sparknlp package", "sparknlp.annotation module", "sparknlp.annotation_audio module", "sparknlp.annotation_image module", "sparknlp.annotator package", "sparknlp.annotator.audio package", "sparknlp.annotator.audio.hubert_for_ctc module", "sparknlp.annotator.audio.wav2vec2_for_ctc module", "sparknlp.annotator.audio.whisper_for_ctc module", "sparknlp.annotator.chunk2_doc module", "sparknlp.annotator.chunker module", "sparknlp.annotator.classifier_dl package", "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.albert_for_question_answering module", "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.albert_for_token_classification module", "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.bert_for_question_answering module", "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.bert_for_token_classification module", "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.camembert_for_question_answering module", "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.camembert_for_token_classification module", "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.classifier_dl module", "sparknlp.annotator.classifier_dl.deberta_for_question_answering module", "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.deberta_for_token_classification module", "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module", "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.longformer_for_question_answering module", "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module", "sparknlp.annotator.classifier_dl.longformer_for_token_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module", "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module", "sparknlp.annotator.classifier_dl.multi_classifier_dl module", "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.sentiment_dl module", "sparknlp.annotator.classifier_dl.tapas_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module", "sparknlp.annotator.cleaners package", "sparknlp.annotator.cleaners.cleaner module", "sparknlp.annotator.cleaners.extractor module", "sparknlp.annotator.coref package", "sparknlp.annotator.coref.spanbert_coref module", "sparknlp.annotator.cv package", "sparknlp.annotator.cv.blip_for_question_answering module", "sparknlp.annotator.cv.clip_for_zero_shot_classification module", "sparknlp.annotator.cv.convnext_for_image_classification module", "sparknlp.annotator.cv.florence2_transformer module", "sparknlp.annotator.cv.gemma3_for_multimodal module", "sparknlp.annotator.cv.internvl_for_multimodal module", "sparknlp.annotator.cv.janus_for_multimodal module", "sparknlp.annotator.cv.llava_for_multimodal module", "sparknlp.annotator.cv.mllama_for_multimodal module", "sparknlp.annotator.cv.paligemma_for_multimodal module", "sparknlp.annotator.cv.phi3_vision_for_multimodal module", "sparknlp.annotator.cv.qwen2vl_transformer module", "sparknlp.annotator.cv.smolvlm_transformer module", "sparknlp.annotator.cv.swin_for_image_classification module", "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module", "sparknlp.annotator.cv.vit_for_image_classification module", "sparknlp.annotator.date2_chunk module", "sparknlp.annotator.dependency package", "sparknlp.annotator.dependency.dependency_parser module", "sparknlp.annotator.dependency.typed_dependency_parser module", "sparknlp.annotator.document_character_text_splitter module", "sparknlp.annotator.document_normalizer module", "sparknlp.annotator.document_token_splitter module", "sparknlp.annotator.document_token_splitter_test module", "sparknlp.annotator.embeddings package", "sparknlp.annotator.embeddings.albert_embeddings module", "sparknlp.annotator.embeddings.auto_gguf_embeddings module", "sparknlp.annotator.embeddings.bert_embeddings module", "sparknlp.annotator.embeddings.bert_sentence_embeddings module", "sparknlp.annotator.embeddings.bge_embeddings module", "sparknlp.annotator.embeddings.camembert_embeddings module", "sparknlp.annotator.embeddings.chunk_embeddings module", "sparknlp.annotator.embeddings.deberta_embeddings module", "sparknlp.annotator.embeddings.distil_bert_embeddings module", "sparknlp.annotator.embeddings.doc2vec module", "sparknlp.annotator.embeddings.e5_embeddings module", "sparknlp.annotator.embeddings.e5v_embeddings module", "sparknlp.annotator.embeddings.elmo_embeddings module", "sparknlp.annotator.embeddings.instructor_embeddings module", "sparknlp.annotator.embeddings.longformer_embeddings module", "sparknlp.annotator.embeddings.mpnet_embeddings module", "sparknlp.annotator.embeddings.mxbai_embeddings module", "sparknlp.annotator.embeddings.nomic_embeddings module", "sparknlp.annotator.embeddings.roberta_embeddings module", "sparknlp.annotator.embeddings.roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.sentence_embeddings module", "sparknlp.annotator.embeddings.snowflake_embeddings module", "sparknlp.annotator.embeddings.uae_embeddings module", "sparknlp.annotator.embeddings.universal_sentence_encoder module", "sparknlp.annotator.embeddings.word2vec module", "sparknlp.annotator.embeddings.word_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.xlnet_embeddings module", "sparknlp.annotator.er package", "sparknlp.annotator.er.entity_ruler module", "sparknlp.annotator.graph_extraction module", "sparknlp.annotator.keyword_extraction package", "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module", "sparknlp.annotator.ld_dl package", "sparknlp.annotator.ld_dl.language_detector_dl module", "sparknlp.annotator.lemmatizer module", "sparknlp.annotator.matcher package", "sparknlp.annotator.matcher.big_text_matcher module", "sparknlp.annotator.matcher.date_matcher module", "sparknlp.annotator.matcher.multi_date_matcher module", "sparknlp.annotator.matcher.regex_matcher module", "sparknlp.annotator.matcher.text_matcher module", "sparknlp.annotator.n_gram_generator module", "sparknlp.annotator.ner package", "sparknlp.annotator.ner.ner_approach module", "sparknlp.annotator.ner.ner_converter module", "sparknlp.annotator.ner.ner_crf module", "sparknlp.annotator.ner.ner_dl module", "sparknlp.annotator.ner.ner_overwriter module", "sparknlp.annotator.ner.zero_shot_ner_model module", "sparknlp.annotator.normalizer module", "sparknlp.annotator.openai package", "sparknlp.annotator.openai.openai_completion module", "sparknlp.annotator.openai.openai_embeddings module", "sparknlp.annotator.param package", "sparknlp.annotator.param.classifier_encoder module", "sparknlp.annotator.param.evaluation_dl_params module", "sparknlp.annotator.pos package", "sparknlp.annotator.pos.perceptron module", "sparknlp.annotator.sentence package", "sparknlp.annotator.sentence.sentence_detector module", "sparknlp.annotator.sentence.sentence_detector_dl module", "sparknlp.annotator.sentiment package", "sparknlp.annotator.sentiment.sentiment_detector module", "sparknlp.annotator.sentiment.vivekn_sentiment module", "sparknlp.annotator.seq2seq package", "sparknlp.annotator.seq2seq.auto_gguf_model module", "sparknlp.annotator.seq2seq.auto_gguf_vision_model module", "sparknlp.annotator.seq2seq.bart_transformer module", "sparknlp.annotator.seq2seq.cohere_transformer module", "sparknlp.annotator.seq2seq.cpm_transformer module", "sparknlp.annotator.seq2seq.gpt2_transformer module", "sparknlp.annotator.seq2seq.llama2_transformer module", "sparknlp.annotator.seq2seq.llama3_transformer module", "sparknlp.annotator.seq2seq.m2m100_transformer module", "sparknlp.annotator.seq2seq.marian_transformer module", "sparknlp.annotator.seq2seq.mistral_transformer module", "sparknlp.annotator.seq2seq.nllb_transformer module", "sparknlp.annotator.seq2seq.olmo_transformer module", "sparknlp.annotator.seq2seq.phi2_transformer module", "sparknlp.annotator.seq2seq.phi3_transformer module", "sparknlp.annotator.seq2seq.qwen_transformer module", "sparknlp.annotator.seq2seq.starcoder_transformer module", "sparknlp.annotator.seq2seq.t5_transformer module", "sparknlp.annotator.similarity package", "sparknlp.annotator.similarity.document_similarity_ranker module", "sparknlp.annotator.spell_check package", "sparknlp.annotator.spell_check.context_spell_checker module", "sparknlp.annotator.spell_check.norvig_sweeting module", "sparknlp.annotator.spell_check.symmetric_delete module", "sparknlp.annotator.stemmer module", "sparknlp.annotator.stop_words_cleaner module", "sparknlp.annotator.tf_ner_dl_graph_builder module", "sparknlp.annotator.token package", "sparknlp.annotator.token.chunk_tokenizer module", "sparknlp.annotator.token.recursive_tokenizer module", "sparknlp.annotator.token.regex_tokenizer module", "sparknlp.annotator.token.tokenizer module", "sparknlp.annotator.token2_chunk module", "sparknlp.annotator.ws package", "sparknlp.annotator.ws.word_segmenter module", "sparknlp.base package", "sparknlp.base.audio_assembler module", "sparknlp.base.doc2_chunk module", "sparknlp.base.document_assembler module", "sparknlp.base.embeddings_finisher module", "sparknlp.base.finisher module", "sparknlp.base.graph_finisher module", "sparknlp.base.has_recursive_fit module", "sparknlp.base.has_recursive_transform module", "sparknlp.base.image_assembler module", "sparknlp.base.light_pipeline module", "sparknlp.base.multi_document_assembler module", "sparknlp.base.prompt_assembler module", "sparknlp.base.recursive_pipeline module", "sparknlp.base.table_assembler module", "sparknlp.base.token_assembler module", "sparknlp.common package", "sparknlp.common.annotator_approach module", "sparknlp.common.annotator_model module", "sparknlp.common.annotator_properties module", "sparknlp.common.annotator_type module", "sparknlp.common.coverage_result module", "sparknlp.common.match_strategy module", "sparknlp.common.properties module", "sparknlp.common.read_as module", "sparknlp.common.recursive_annotator_approach module", "sparknlp.common.storage module", "sparknlp.common.utils module", "sparknlp.functions module", "sparknlp.internal package", "sparknlp.internal.annotator_java_ml module", "sparknlp.internal.annotator_transformer module", "sparknlp.internal.extended_java_wrapper module", "sparknlp.internal.params_getters_setters module", "sparknlp.internal.recursive module", "sparknlp.logging package", "sparknlp.logging.comet module", "sparknlp.partition package", "sparknlp.partition.partition module", "sparknlp.partition.partition_properties module", "sparknlp.partition.partition_transformer module", "sparknlp.pretrained package", "sparknlp.pretrained.pretrained_pipeline module", "sparknlp.pretrained.resource_downloader module", "sparknlp.pretrained.utils module", "sparknlp.reader package", "sparknlp.reader.enums module", "sparknlp.reader.pdf_to_text module", "sparknlp.reader.sparknlp_reader module", "sparknlp.training package", "sparknlp.training.conll module", "sparknlp.training.conllu module", "sparknlp.training.pos module", "sparknlp.training.pub_tator module", "sparknlp.training.spacy_to_annotation module", "sparknlp.training.tfgraphs module", "sparknlp.upload_to_hub module", "sparknlp.util module", "Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners.cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners.extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.blip_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.florence2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.gemma3_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.internvl_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.janus_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.llava_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.mllama_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.paligemma_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.phi3_vision_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.qwen2vl_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.smolvlm_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.auto_gguf_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bge_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5v_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mxbai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.nomic_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.snowflake_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.uae_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_vision_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.cohere_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.cpm_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.m2m100_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.mistral_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.nllb_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.olmo_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.qwen_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.starcoder_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.prompt_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.enums</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.pdf_to_text</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.sparknlp_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"6": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "packag": [0, 90, 91, 94, 97, 157, 158, 228, 250, 338, 339, 342, 345, 406, 407, 478, 503, 504], "subpackag": 0, "annot": [0, 1, 3, 4, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 219, 220, 221, 222, 223, 226, 228, 230, 232, 233, 234, 235, 236, 244, 246, 251, 253, 254, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 469, 470, 471, 472, 473, 475, 477, 478, 481, 483, 485, 486, 487, 495, 497, 502, 503, 508, 509, 510, 511, 512], "submodul": 0, "modul": [0, 251, 286, 332, 351, 369, 371, 372, 374, 379, 384, 392, 397, 398, 400, 403, 412, 428, 435, 440, 451, 463, 475, 480, 484, 489, 494], "content": [0, 65, 71, 72, 73, 74, 75, 76, 77, 97, 115, 155, 194, 204, 230, 231, 232, 239, 240, 244, 505, 511], "base": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 225, 226, 228, 230, 231, 232, 234, 235, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 375, 376, 377, 378, 380, 381, 382, 383, 385, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 458, 459, 460, 463, 465, 467, 471, 473, 477, 478, 502, 506, 507, 510], "common": [0, 1, 50, 112, 120, 129, 143, 144, 170, 171, 173, 185, 194, 270, 299, 339, 361, 368, 378, 393, 394, 420, 421, 423, 434, 443, 471, 509], "intern": [0, 1, 102, 171, 174, 178, 188, 191, 206, 350, 395, 396, 421, 424, 427, 438, 441, 456, 460, 465, 471, 482], "log": [0, 1, 28, 44, 50, 138, 143, 147, 152, 162, 169, 251, 276, 293, 299, 388, 393, 396, 402, 411, 419, 471], "partit": [0, 1, 99, 114, 239, 242, 347, 363, 471, 490, 492], "pretrain": [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 134, 137, 138, 139, 140, 148, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 184, 188, 190, 191, 196, 197, 202, 220, 228, 251, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 375, 376, 377, 378, 381, 382, 387, 388, 389, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 438, 441, 445, 446, 452, 470, 471, 478, 502, 505, 509], "reader": [0, 1, 230, 235, 471, 481, 486], "train": [0, 1, 7, 9, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 70, 71, 78, 80, 83, 84, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 111, 113, 114, 116, 117, 118, 123, 125, 126, 128, 131, 132, 135, 137, 138, 141, 146, 147, 149, 152, 154, 155, 159, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 185, 186, 191, 194, 202, 215, 218, 228, 234, 251, 255, 258, 263, 264, 265, 266, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 288, 289, 291, 292, 293, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 314, 315, 319, 320, 327, 329, 331, 333, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 354, 356, 357, 358, 360, 362, 363, 365, 366, 367, 373, 375, 376, 377, 381, 382, 385, 387, 388, 391, 395, 396, 399, 402, 404, 405, 408, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 434, 436, 441, 443, 452, 465, 468, 471, 478, 485, 502, 506, 507, 509, 510], "annotation_audio": [0, 1, 471], "annotationaudio": [0, 1, 3, 253], "annotation_imag": [0, 1, 471], "annotationimag": [0, 1, 4, 158, 202, 234, 254, 407, 452, 485], "function": [0, 1, 69, 70, 71, 73, 77, 102, 112, 115, 158, 159, 174, 196, 204, 235, 251, 317, 319, 320, 322, 326, 350, 361, 364, 407, 408, 424, 445, 454, 486, 501, 509], "explode_annotations_col": [0, 1, 220, 470], "filter_by_annotations_col": [0, 1, 220, 470], "map_annot": [0, 1, 220, 470], "map_annotations_arrai": [0, 1, 220, 470], "map_annotations_col": [0, 1, 220, 470], "map_annotations_strict": [0, 1, 220, 470], "upload_to_hub": [0, 1, 471], "pushtohub": [0, 1, 248, 499], "util": [0, 1, 7, 71, 96, 101, 137, 140, 151, 152, 167, 172, 180, 205, 208, 213, 216, 218, 222, 225, 233, 255, 320, 344, 349, 387, 390, 401, 402, 417, 422, 430, 455, 462, 463, 466, 468, 471, 472, 476, 484], "conllgener": [0, 1, 249, 500], "embeddingsdataframeutil": [0, 1, 101, 249, 349, 500], "get_config_path": [0, 1, 249, 500], "read": [0, 1, 28, 50, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 99, 114, 123, 126, 128, 129, 130, 131, 132, 137, 140, 141, 147, 152, 154, 162, 178, 179, 180, 188, 191, 193, 195, 201, 203, 216, 218, 219, 221, 222, 228, 229, 230, 231, 232, 235, 237, 239, 240, 242, 243, 244, 245, 276, 299, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 347, 363, 373, 376, 377, 378, 380, 381, 382, 387, 390, 391, 396, 402, 404, 411, 427, 429, 430, 438, 441, 442, 444, 450, 453, 466, 468, 469, 471, 472, 478, 480, 481, 482, 483, 486, 489, 490, 491, 492, 493, 495, 496, 502, 506, 512], "start": [0, 1, 7, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 104, 121, 123, 137, 138, 152, 157, 158, 194, 215, 228, 251, 255, 262, 268, 272, 277, 281, 287, 290, 295, 301, 302, 353, 370, 373, 387, 388, 402, 406, 407, 443, 465, 471, 478, 502, 505, 507, 510, 511], "version": [0, 1, 9, 86, 94, 98, 100, 105, 164, 171, 172, 204, 226, 234, 235, 250, 258, 335, 342, 346, 348, 354, 395, 396, 414, 421, 422, 433, 454, 460, 465, 471, 476, 477, 482, 485, 486, 506, 511], "audio": [1, 3, 5, 193, 208, 212, 228, 253, 371, 442, 461, 471, 478], "classifier_dl": [1, 5, 371, 471], "cleaner": [1, 5, 371, 471], "coref": [1, 5, 371, 471], "cv": [1, 5, 371, 471], "depend": [1, 2, 5, 63, 95, 105, 110, 118, 120, 121, 123, 125, 138, 166, 178, 191, 208, 212, 215, 248, 250, 252, 308, 312, 343, 354, 359, 367, 368, 370, 371, 373, 375, 388, 416, 427, 441, 461, 465, 471, 499], "embed": [1, 2, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 70, 74, 77, 121, 137, 138, 139, 144, 157, 158, 161, 176, 195, 196, 197, 202, 203, 208, 215, 220, 226, 234, 248, 249, 252, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 317, 319, 323, 326, 370, 371, 387, 388, 389, 394, 406, 407, 410, 425, 444, 445, 446, 452, 453, 465, 470, 471, 477, 485, 500, 505], "er": [1, 5, 371, 471], "keyword_extract": [1, 5, 371, 471], "ld_dl": [1, 5, 371, 471], "matcher": [1, 5, 371, 471], "ner": [1, 5, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 116, 117, 121, 185, 202, 220, 228, 234, 264, 270, 274, 279, 283, 289, 292, 297, 304, 307, 365, 366, 370, 371, 434, 452, 470, 471, 478, 485, 502], "openai": [1, 5, 107, 162, 356, 371, 411, 471], "param": [1, 5, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 211, 215, 218, 225, 226, 230, 231, 232, 239, 240, 246, 309, 371, 387, 425, 459, 460, 465, 471, 476, 477, 481, 482, 491, 497], "po": [1, 2, 5, 11, 15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 83, 84, 121, 134, 137, 138, 186, 191, 202, 208, 212, 220, 234, 241, 242, 252, 260, 263, 266, 269, 271, 273, 278, 280, 282, 284, 288, 296, 298, 303, 305, 306, 331, 333, 370, 371, 387, 388, 436, 441, 452, 461, 470, 471, 485, 492, 494, 505, 509, 510, 511], "sentenc": [1, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 83, 84, 86, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 144, 149, 155, 159, 166, 174, 176, 178, 182, 185, 187, 189, 191, 195, 197, 202, 203, 206, 207, 215, 234, 242, 243, 244, 245, 246, 248, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 317, 319, 320, 321, 322, 323, 324, 325, 326, 330, 331, 333, 335, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 394, 399, 405, 408, 416, 424, 425, 427, 432, 434, 437, 439, 441, 444, 446, 452, 453, 456, 457, 465, 471, 485, 492, 493, 495, 496, 497, 506, 510, 511], "sentiment": [1, 2, 5, 28, 44, 50, 102, 118, 174, 208, 212, 248, 252, 276, 293, 299, 350, 367, 371, 424, 461, 471, 499, 506, 507], "seq2seq": [1, 5, 371, 471], "similar": [1, 5, 66, 90, 103, 112, 113, 123, 125, 158, 173, 314, 338, 352, 361, 362, 371, 373, 375, 407, 423, 471], "spell_check": [1, 5, 371, 471], "token": [1, 2, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 83, 84, 87, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 126, 127, 128, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 146, 147, 149, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 191, 194, 196, 202, 205, 207, 208, 212, 215, 234, 242, 245, 246, 248, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 333, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 373, 376, 377, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 396, 399, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 431, 432, 439, 441, 443, 445, 452, 455, 457, 461, 465, 471, 485, 492, 496, 497, 499, 506, 510, 511], "w": [1, 5, 120, 131, 137, 141, 186, 188, 368, 371, 381, 387, 391, 436, 438, 471], "chunk2_doc": [1, 5, 371, 471], "chunk2doc": [1, 5, 10, 194, 259, 443], "chunker": [1, 5, 96, 344, 371, 471], "date2_chunk": [1, 5, 371, 471], "date2chunk": [1, 5, 81, 330], "document_character_text_splitt": [1, 5, 371, 471], "documentcharactertextsplitt": [1, 5, 85, 334], "document_norm": [1, 5, 371, 471], "documentnorm": [1, 5, 85, 86, 87, 334, 335, 336], "document_token_splitt": [1, 5, 371, 471], "documenttokensplitt": [1, 5, 87, 336], "document_token_splitter_test": [1, 5, 371, 471], "graph_extract": [1, 5, 371, 471], "graphextract": [1, 5, 121, 198, 370, 447], "lemmat": [1, 5, 154, 182, 205, 207, 248, 371, 404, 432, 455, 457, 471], "lemmatizermodel": [1, 5, 126, 376], "n_gram_gener": [1, 5, 371, 471], "ngramgener": [1, 5, 96, 133, 344, 383], "normal": [1, 5, 28, 67, 78, 79, 80, 86, 128, 152, 155, 182, 196, 205, 207, 215, 276, 315, 327, 328, 329, 335, 371, 377, 402, 405, 432, 445, 455, 457, 465, 471, 506, 507], "normalizermodel": [1, 5, 141, 391], "stemmer": [1, 5, 182, 371, 432, 471], "stop_words_clean": [1, 5, 371, 471], "stopwordsclean": [1, 5, 182, 196, 207, 432, 445, 457], "tf_ner_dl_graph_build": [1, 5, 371, 471], "tfnerdlgraphbuild": [1, 5, 183, 433], "tfnerdlgraphbuildermodel": [1, 5, 183, 433], "token2_chunk": [1, 5, 371, 471], "token2chunk": [1, 5, 189, 439], "audio_assembl": [1, 7, 8, 9, 192, 255, 257, 258, 451, 471], "audioassembl": [1, 7, 8, 9, 192, 193, 255, 257, 258, 442], "doc2_chunk": [1, 192, 451, 471], "doc2chunk": [1, 10, 192, 194, 259, 443], "document_assembl": [1, 51, 140, 176, 192, 206, 300, 390, 425, 451, 456, 471], "documentassembl": [1, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 203, 205, 206, 207, 228, 232, 242, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 312, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 453, 455, 456, 457, 478, 483, 492, 502, 506], "embeddings_finish": [1, 192, 451, 471], "embeddingsfinish": [1, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 192, 196, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 445], "finish": [1, 155, 176, 192, 196, 198, 203, 205, 405, 425, 445, 447, 451, 455, 471], "graph_finish": [1, 192, 451, 471], "graphfinish": [1, 121, 192, 198, 370, 447], "has_recursive_fit": [1, 192, 451, 471], "hasrecursivefit": [1, 192, 199, 200, 448, 449], "has_recursive_transform": [1, 192, 451, 471], "hasrecursivetransform": [1, 192, 200, 449], "image_assembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 101, 158, 192, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 349, 407, 451, 471], "imageassembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 101, 158, 192, 201, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 349, 407, 450], "light_pipelin": [1, 192, 451, 471], "lightpipelin": [1, 192, 202, 234, 452, 485, 510], "multi_document_assembl": [1, 192, 451, 471], "multidocumentassembl": [1, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 192, 203, 261, 262, 267, 268, 272, 277, 281, 285, 287, 290, 294, 295, 300, 301, 302, 453], "prompt_assembl": [1, 192, 451, 471], "promptassembl": [1, 192, 204, 454], "recursive_pipelin": [1, 192, 226, 451, 471, 477], "recursivepipelin": [1, 192, 199, 200, 205, 211, 448, 449, 455, 460], "recursivepipelinemodel": [1, 192, 205, 455], "table_assembl": [1, 51, 192, 300, 451, 471], "tableassembl": [1, 51, 192, 206, 300, 456], "token_assembl": [1, 192, 451, 471], "tokenassembl": [1, 192, 207, 457], "annotator_approach": [1, 208, 463, 471], "annotatorapproach": [1, 28, 44, 50, 83, 84, 99, 114, 115, 120, 126, 128, 131, 132, 137, 138, 141, 149, 152, 154, 155, 176, 178, 179, 180, 186, 188, 191, 208, 209, 217, 228, 458, 467, 478], "annotator_model": [1, 208, 463, 471], "annotatormodel": [1, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 186, 187, 188, 189, 191, 202, 206, 208, 210, 211, 232, 235, 452, 459, 486], "annotator_properti": [1, 208, 463, 471], "annotatorproperti": [1, 10, 194, 207, 208, 209, 210, 211, 217, 460], "annotator_typ": [1, 2, 3, 4, 208, 252, 253, 254, 463, 471], "annotatortyp": [1, 2, 3, 4, 22, 96, 133, 194, 195, 201, 203, 208, 212, 220, 252, 253, 254, 270, 344, 383, 443, 444, 450, 453, 461, 505], "coverage_result": [1, 208, 463, 471], "coverageresult": [1, 115, 208, 213, 364, 462], "match_strategi": [1, 208, 463, 471], "matchstrategi": [1, 129, 208, 214, 378, 464], "properti": [1, 90, 171, 199, 200, 208, 211, 231, 338, 421, 448, 449, 460, 463, 471, 482], "hasaudiofeatureproperti": [1, 7, 8, 9, 208, 215, 465], "hasbatchedannot": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 90, 91, 92, 93, 94, 95, 97, 98, 100, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 138, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 465], "hasbatchedannotateaudio": [1, 7, 8, 9, 208, 215, 465], "hasbatchedannotateimag": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 101, 208, 215, 465], "hascandidatelabelsproperti": [1, 17, 18, 23, 27, 32, 36, 49, 56, 65, 66, 71, 72, 73, 74, 75, 76, 77, 208, 215, 465], "hascasesensitiveproperti": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 116, 117, 118, 208, 215, 218, 465], "hasclassifieractivationproperti": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 208, 215, 465], "hasclstokenproperti": [1, 94, 208, 215, 465], "hasembeddingsproperti": [1, 63, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 176, 208, 215, 465], "hasenablecachingproperti": [1, 99, 114, 176, 208, 215, 465], "hasengin": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 93, 95, 97, 98, 101, 102, 104, 108, 109, 113, 116, 117, 118, 125, 138, 140, 152, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 208, 215, 465], "hasgeneratorproperti": [1, 9, 69, 70, 79, 208, 215, 465], "hasimagefeatureproperti": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 101, 208, 215, 465], "hasllamacppproperti": [1, 157, 158, 208, 215, 465], "haslongmaxsentencelengthlimit": [1, 38, 39, 40, 104, 208, 215, 465], "hasmaxsentencelengthlimit": [1, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 47, 52, 53, 54, 55, 57, 58, 63, 90, 92, 93, 94, 95, 97, 98, 100, 103, 105, 106, 107, 108, 109, 111, 112, 116, 117, 118, 208, 215, 465], "hasrescalefactor": [1, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 101, 208, 215, 465], "read_a": [1, 83, 84, 120, 126, 128, 131, 132, 137, 141, 147, 154, 179, 180, 188, 208, 218, 219, 242, 243, 331, 333, 368, 376, 377, 381, 382, 387, 391, 396, 404, 429, 430, 438, 463, 468, 469, 471, 492, 493], "reada": [1, 83, 84, 115, 120, 126, 128, 131, 132, 137, 141, 147, 154, 179, 180, 185, 188, 208, 216, 218, 219, 242, 243, 331, 333, 364, 368, 376, 377, 381, 382, 387, 391, 396, 404, 429, 430, 434, 438, 466, 468, 469, 492, 493], "recursive_annotator_approach": [1, 208, 463, 471], "recursiveannotatorapproach": [1, 208, 217, 467], "storag": [1, 115, 120, 128, 208, 364, 368, 377, 463, 471], "hasstorag": [1, 115, 120, 128, 208, 218, 468], "hasstoragemodel": [1, 115, 120, 128, 208, 218, 468], "hasstorageopt": [1, 208, 218, 468], "hasstorageref": [1, 28, 44, 50, 63, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 125, 138, 208, 218, 468], "externalresourc": [1, 128, 132, 208, 219, 377, 382, 469], "regexrul": [1, 208, 219, 469], "annotator_java_ml": [1, 221, 471, 475], "annotatorjavamlread": [1, 209, 210, 217, 221, 222, 223, 472], "annotator_transform": [1, 221, 471, 475], "annotatortransform": [1, 10, 176, 193, 194, 195, 196, 197, 198, 201, 203, 204, 207, 221, 223, 473], "extended_java_wrapp": [1, 221, 471, 475], "extendedjavawrapp": [1, 221, 224, 230, 240, 242, 243, 244, 245, 246, 474], "params_getters_sett": [1, 221, 471, 475], "paramsgetterssett": [1, 146, 147, 209, 210, 217, 221, 223, 225, 476], "recurs": [1, 186, 205, 217, 221, 436, 455, 467, 471, 475], "recursiveestim": [1, 199, 217, 221, 226, 477], "recursivetransform": [1, 200, 221, 226, 477], "comet": [1, 227, 471, 479, 504], "cometlogg": [1, 227, 228, 478, 502], "partition_properti": [1, 229, 471, 480], "haschunkerproperti": [1, 229, 231, 232, 482], "hasemailreaderproperti": [1, 229, 231, 232, 482], "hasexcelreaderproperti": [1, 229, 231, 232, 482], "hashtmlreaderproperti": [1, 229, 231, 232, 482], "haspowerpointproperti": [1, 229, 231, 232, 482], "hastextreaderproperti": [1, 229, 231, 232, 482], "partition_transform": [1, 229, 471, 480], "partitiontransform": [1, 229, 232, 483], "pretrained_pipelin": [1, 233, 471, 484], "pretrainedpipelin": [1, 10, 197, 202, 220, 233, 234, 259, 446, 452, 470, 485, 505, 510, 511], "resource_download": [1, 233, 471, 484], "resourcedownload": [1, 233, 235, 486, 506, 511], "printprogress": [1, 233, 236, 487], "enum": [1, 237, 471, 489], "textstrippertyp": [1, 237, 238, 239, 488, 490], "pdf_to_text": [1, 237, 471, 489], "pdftotext": [1, 237, 239, 490], "sparknlp_read": [1, 237, 471, 489], "sparknlpread": [1, 237, 240, 491], "conll": [1, 83, 84, 137, 138, 241, 243, 331, 333, 387, 388, 471, 493, 494, 509], "conllu": [1, 82, 83, 84, 126, 241, 331, 333, 376, 471, 494, 509], "pub_tat": [1, 241, 471, 494], "pubtat": [1, 241, 245, 496, 509], "spacy_to_annot": [1, 241, 471, 494], "spacytoannot": [1, 241, 246, 497], "tfgraph": [1, 241, 471, 494], "arraytyp": [1, 2, 194, 220, 252, 443, 470], "copi": [1, 2, 3, 4, 235, 252, 253, 254, 486], "datatyp": [1, 2, 220, 252, 470], "fromrow": [1, 2, 252], "torow": [1, 2, 252], "check_for_required_info": [1, 248, 499], "create_doc": [1, 248, 499], "list_of_task": [1, 248, 499], "push_to_hub": [1, 248, 499], "unzip_directori": [1, 248, 499], "zip_directori": [1, 248, 499], "exportconllfil": [1, 249, 500], "emptyimagerow": [1, 101, 249, 349, 500], "imageschema": [1, 101, 249, 349, 500], "none": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 126, 128, 131, 132, 137, 138, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 210, 211, 223, 226, 228, 230, 232, 234, 235, 240, 246, 248, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 375, 376, 377, 381, 382, 387, 388, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 456, 459, 460, 471, 473, 474, 477, 478, 481, 483, 485, 486, 491, 497, 499, 507], "sourc": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 230, 231, 232, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 503], "gpu": [1, 79, 90, 91, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 215, 308, 328, 338, 339, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 465, 471], "fals": [1, 2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 198, 202, 203, 204, 206, 207, 215, 220, 228, 231, 234, 239, 240, 242, 243, 244, 246, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 452, 453, 454, 456, 457, 465, 470, 471, 478, 482, 485, 490, 491, 492, 493, 495, 497, 502, 505, 506, 507, 512], "apple_silicon": [1, 471], "aarch64": [1, 471], "memori": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 91, 102, 115, 157, 158, 215, 218, 230, 232, 250, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 338, 339, 350, 364, 406, 407, 465, 468, 471, 481, 483], "16g": [1, 250, 471], "cache_fold": [1, 471], "log_fold": [1, 471], "cluster_tmp_dir": [1, 471], "real_time_output": [1, 471], "output_level": [1, 471], "1": [1, 7, 9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 42, 44, 46, 47, 49, 50, 53, 54, 56, 57, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 87, 90, 91, 92, 93, 94, 97, 99, 102, 103, 109, 114, 115, 116, 117, 118, 123, 128, 129, 130, 131, 132, 133, 136, 137, 138, 140, 143, 144, 147, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 187, 191, 196, 197, 204, 215, 226, 228, 234, 235, 240, 242, 243, 245, 246, 250, 255, 258, 259, 260, 263, 265, 266, 269, 271, 273, 275, 276, 278, 280, 282, 284, 288, 291, 293, 296, 298, 299, 303, 305, 306, 308, 312, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 336, 338, 339, 340, 341, 342, 345, 347, 350, 352, 358, 363, 364, 365, 366, 367, 373, 377, 378, 380, 381, 382, 383, 386, 387, 388, 390, 393, 394, 395, 396, 401, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 433, 437, 441, 445, 446, 454, 460, 465, 471, 476, 477, 478, 482, 485, 486, 491, 492, 493, 496, 497, 502, 505, 506, 510, 511], "pyspark": [1, 2, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 201, 202, 203, 206, 207, 218, 220, 224, 226, 228, 230, 234, 239, 240, 242, 243, 244, 245, 250, 252, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 450, 452, 453, 456, 457, 468, 470, 471, 474, 477, 478, 481, 485, 490, 491, 492, 493, 495, 496, 506, 507], "instanc": [1, 44, 140, 222, 293, 337, 390, 395, 396, 460, 465, 471, 472, 476, 482], "default": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 146, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 186, 187, 188, 191, 194, 195, 196, 197, 198, 201, 202, 203, 206, 211, 215, 219, 220, 228, 234, 235, 239, 242, 243, 244, 245, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 433, 436, 437, 438, 441, 443, 444, 445, 446, 447, 450, 452, 453, 456, 465, 469, 470, 471, 478, 485, 486, 490, 492, 493, 495, 496, 506], "paramet": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 211, 215, 218, 219, 220, 225, 226, 228, 230, 231, 232, 234, 235, 239, 240, 242, 243, 244, 245, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 460, 465, 468, 469, 470, 471, 476, 477, 478, 481, 482, 483, 485, 486, 490, 491, 492, 493, 495, 496], "spark": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 143, 144, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 216, 218, 220, 221, 223, 224, 228, 230, 232, 234, 235, 239, 240, 242, 243, 244, 245, 246, 249, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 390, 391, 393, 394, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 463, 466, 468, 470, 471, 473, 474, 475, 478, 481, 483, 485, 486, 490, 491, 492, 493, 495, 496, 497, 500, 501, 503, 504, 505, 506, 508, 509, 510, 512], "nlp": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 126, 128, 131, 132, 137, 138, 139, 140, 141, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 185, 186, 188, 191, 192, 194, 195, 196, 197, 201, 202, 203, 205, 206, 207, 208, 221, 228, 230, 232, 234, 235, 242, 243, 244, 245, 252, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 335, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 375, 376, 377, 381, 382, 387, 388, 389, 390, 391, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 434, 436, 438, 441, 443, 444, 445, 446, 450, 451, 452, 453, 455, 456, 457, 463, 471, 475, 478, 481, 483, 485, 486, 492, 493, 495, 496, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512], "The": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 185, 187, 188, 191, 195, 197, 201, 202, 203, 204, 206, 215, 218, 220, 228, 230, 232, 234, 235, 242, 243, 244, 245, 246, 248, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 386, 387, 388, 389, 390, 391, 393, 394, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 434, 437, 438, 441, 444, 446, 450, 452, 453, 454, 456, 465, 468, 470, 471, 478, 481, 483, 485, 486, 492, 493, 495, 496, 497, 499, 502, 505, 506, 507, 509, 510, 512], "would": [1, 28, 63, 85, 96, 110, 129, 152, 276, 312, 334, 344, 359, 378, 402, 471, 506], "result": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 215, 220, 228, 234, 242, 243, 246, 248, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 465, 470, 471, 478, 485, 492, 493, 497, 499, 502, 503, 505, 506, 507, 510, 511], "equival": [1, 17, 18, 23, 27, 32, 36, 49, 56, 202, 265, 266, 271, 275, 280, 284, 298, 305, 452, 471, 510], "sparksess": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 128, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 201, 218, 242, 243, 244, 245, 250, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 377, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 450, 468, 471, 492, 493, 495, 496], "builder": [1, 183, 250, 433, 471], "appnam": [1, 250, 471], "master": [1, 250, 471], "local": [1, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 123, 143, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 182, 202, 215, 234, 250, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 373, 393, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 432, 452, 465, 471, 485, 510], "config": [1, 250, 471, 503], "driver": [1, 158, 250, 407, 471], "serial": [1, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 120, 125, 138, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 250, 255, 257, 258, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 315, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 368, 375, 388, 395, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 471], "org": [1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 136, 137, 138, 139, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 191, 202, 215, 220, 230, 234, 240, 242, 250, 386, 387, 388, 389, 408, 441, 452, 470, 471, 481, 485, 491, 492, 503, 512], "apach": [1, 107, 167, 203, 250, 356, 417, 453, 471], "kryoseri": [1, 250, 471], "buffer": [1, 93, 115, 250, 341, 364, 471], "max": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 72, 74, 75, 76, 90, 92, 93, 94, 95, 97, 98, 100, 103, 104, 105, 106, 107, 108, 109, 111, 112, 116, 117, 118, 123, 176, 180, 215, 230, 250, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 321, 323, 324, 325, 338, 340, 341, 342, 343, 345, 346, 348, 352, 353, 354, 355, 356, 357, 358, 360, 361, 365, 366, 367, 373, 425, 430, 465, 471, 481], "2000m": [1, 250, 471], "maxresults": [1, 250, 471], "jar": [1, 250, 471], "com": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 126, 128, 131, 132, 137, 138, 140, 141, 143, 144, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 185, 186, 188, 191, 206, 230, 232, 240, 250, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 375, 376, 377, 381, 382, 387, 388, 390, 391, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 434, 436, 438, 441, 456, 471, 481, 483, 491], "johnsnowlab": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 126, 128, 131, 132, 137, 138, 140, 141, 143, 144, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 185, 186, 188, 191, 196, 197, 206, 232, 250, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 335, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 375, 376, 377, 381, 382, 387, 388, 390, 391, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 434, 436, 438, 441, 445, 446, 456, 471, 483], "nlp_2": [1, 250, 471], "12": [1, 90, 116, 117, 118, 123, 129, 130, 136, 149, 178, 189, 202, 220, 234, 244, 246, 250, 338, 365, 366, 367, 373, 378, 380, 386, 399, 427, 439, 452, 470, 471, 485, 495, 497, 505], "releas": [1, 9, 86, 90, 94, 95, 97, 107, 108, 109, 116, 117, 159, 160, 163, 164, 167, 169, 170, 172, 173, 174, 258, 335, 338, 342, 343, 345, 356, 357, 358, 365, 366, 408, 409, 413, 414, 417, 419, 420, 422, 423, 424, 471], "getorcr": [1, 250, 471], "bool": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 60, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 87, 91, 92, 93, 96, 100, 101, 108, 113, 116, 120, 121, 125, 128, 129, 132, 133, 136, 137, 138, 141, 147, 151, 152, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 182, 187, 188, 191, 194, 196, 197, 198, 202, 204, 206, 211, 215, 218, 228, 230, 231, 234, 235, 239, 242, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 308, 317, 319, 320, 321, 322, 323, 324, 325, 326, 334, 335, 336, 339, 340, 341, 344, 348, 349, 357, 362, 365, 368, 370, 375, 377, 378, 382, 383, 386, 387, 388, 391, 396, 401, 402, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 432, 437, 438, 441, 443, 445, 446, 447, 452, 454, 456, 460, 465, 468, 471, 478, 481, 482, 485, 486, 490, 492], "option": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 125, 126, 128, 131, 132, 137, 138, 140, 141, 147, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 188, 191, 193, 195, 201, 202, 203, 215, 218, 219, 220, 226, 228, 230, 232, 234, 235, 239, 240, 242, 243, 244, 245, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 373, 375, 376, 377, 381, 382, 387, 388, 390, 391, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 438, 441, 442, 444, 450, 452, 453, 468, 469, 470, 471, 477, 478, 481, 483, 485, 486, 490, 491, 492, 493, 495, 496, 506], "whether": [1, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 120, 121, 128, 129, 130, 132, 133, 136, 137, 138, 141, 143, 147, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 182, 187, 188, 191, 194, 196, 197, 198, 202, 204, 206, 207, 211, 215, 218, 231, 232, 234, 239, 242, 245, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 368, 370, 377, 378, 380, 382, 383, 386, 387, 388, 391, 393, 396, 401, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 432, 437, 438, 441, 443, 445, 446, 447, 452, 454, 456, 457, 460, 465, 468, 471, 482, 485, 490, 492, 496, 507], "enabl": [1, 91, 118, 138, 157, 158, 163, 169, 170, 172, 176, 179, 196, 215, 231, 232, 239, 339, 367, 388, 406, 407, 413, 419, 420, 422, 425, 429, 465, 471, 483, 490], "acceler": [1, 79, 102, 118, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 308, 328, 350, 367, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 471], "must": [1, 91, 99, 114, 126, 128, 131, 132, 143, 147, 154, 155, 157, 158, 179, 180, 194, 215, 220, 228, 242, 337, 339, 347, 363, 376, 377, 381, 382, 393, 396, 404, 405, 406, 407, 429, 430, 443, 465, 470, 471, 478, 492], "set": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 211, 215, 218, 219, 225, 228, 231, 232, 235, 239, 242, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 433, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 459, 460, 465, 468, 469, 471, 476, 477, 478, 482, 486, 490, 492, 502, 506, 509, 510], "up": [1, 7, 9, 28, 44, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 94, 99, 100, 104, 105, 110, 112, 114, 123, 143, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 250, 251, 255, 258, 276, 293, 308, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 337, 342, 347, 348, 353, 354, 359, 361, 363, 373, 393, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465, 471, 502, 506, 509, 510], "correctli": [1, 471], "appl": [1, 7, 8, 93, 109, 117, 255, 257, 341, 358, 366, 471], "silicon": [1, 7, 8, 255, 257, 471], "support": [1, 7, 8, 9, 28, 44, 68, 69, 70, 71, 87, 90, 91, 94, 100, 101, 104, 105, 123, 138, 141, 152, 157, 158, 165, 166, 168, 171, 172, 173, 182, 201, 204, 206, 215, 230, 232, 255, 257, 258, 276, 293, 308, 316, 317, 319, 320, 336, 338, 342, 348, 349, 353, 354, 373, 388, 391, 402, 406, 407, 415, 416, 418, 421, 422, 423, 432, 450, 454, 456, 465, 471, 481, 483, 503], "maco": [1, 471], "linux": [1, 471], "str": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 211, 215, 218, 219, 220, 225, 228, 230, 231, 232, 234, 235, 239, 240, 242, 243, 244, 245, 248, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 433, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 460, 465, 468, 469, 470, 471, 476, 478, 481, 482, 483, 485, 486, 490, 491, 492, 493, 495, 496, 499], "how": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 90, 91, 92, 94, 95, 96, 97, 98, 100, 102, 104, 107, 108, 110, 112, 116, 118, 120, 121, 125, 126, 128, 131, 132, 136, 137, 138, 141, 143, 147, 151, 154, 157, 158, 160, 165, 179, 180, 187, 188, 191, 195, 198, 203, 204, 214, 215, 216, 218, 219, 242, 243, 246, 250, 251, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 314, 315, 320, 321, 322, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 338, 339, 340, 342, 343, 344, 345, 346, 348, 350, 353, 356, 357, 359, 361, 365, 367, 368, 370, 375, 376, 377, 381, 382, 386, 387, 388, 391, 393, 396, 401, 404, 406, 407, 409, 415, 429, 430, 437, 438, 441, 444, 447, 453, 454, 464, 465, 466, 468, 469, 471, 492, 493, 497, 502, 506, 511], "much": [1, 17, 18, 23, 27, 28, 32, 36, 49, 51, 56, 90, 94, 100, 107, 108, 109, 141, 163, 165, 191, 265, 266, 271, 275, 276, 280, 284, 298, 300, 305, 338, 342, 348, 356, 357, 358, 391, 413, 415, 441, 471, 506], "alloc": [1, 471], "locat": [1, 10, 13, 19, 37, 45, 120, 151, 234, 259, 261, 267, 285, 294, 368, 401, 471, 485, 506], "download": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 121, 125, 126, 128, 132, 137, 138, 139, 140, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 234, 235, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 370, 375, 376, 377, 382, 387, 388, 389, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441, 471, 485, 486, 505, 506, 509, 510], "extract": [1, 10, 11, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 61, 67, 78, 79, 80, 83, 85, 87, 96, 115, 119, 120, 121, 122, 123, 128, 129, 130, 132, 136, 137, 138, 139, 151, 152, 154, 176, 178, 180, 185, 189, 196, 197, 198, 202, 204, 215, 228, 230, 231, 234, 239, 259, 260, 262, 268, 272, 277, 281, 287, 290, 295, 301, 302, 309, 315, 327, 328, 329, 331, 334, 336, 344, 364, 368, 369, 370, 372, 373, 377, 378, 380, 382, 386, 387, 388, 389, 401, 402, 404, 425, 427, 430, 434, 439, 445, 446, 447, 452, 454, 465, 471, 478, 481, 482, 485, 490, 502], "model": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 126, 128, 131, 132, 136, 137, 138, 140, 141, 142, 143, 144, 147, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 185, 186, 188, 191, 204, 210, 215, 218, 226, 228, 234, 235, 248, 249, 251, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 375, 376, 377, 381, 382, 386, 387, 388, 390, 391, 393, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 433, 434, 436, 438, 441, 454, 459, 465, 468, 471, 477, 478, 485, 486, 499, 500, 502, 503, 505, 509, 511, 512], "pipelin": [1, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 201, 202, 203, 205, 206, 207, 226, 228, 232, 233, 234, 235, 236, 239, 248, 251, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 450, 452, 453, 455, 456, 457, 471, 477, 478, 483, 484, 485, 486, 487, 490, 503, 505, 506, 509], "If": [1, 9, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 110, 115, 120, 125, 129, 130, 136, 137, 138, 141, 147, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 183, 202, 215, 226, 228, 231, 235, 250, 258, 263, 265, 266, 269, 271, 273, 275, 276, 278, 280, 282, 284, 288, 291, 293, 296, 298, 299, 303, 305, 306, 308, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 337, 359, 364, 368, 375, 378, 380, 386, 387, 388, 391, 396, 401, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 433, 452, 465, 471, 477, 478, 482, 486, 502, 504, 506], "user": [1, 69, 71, 72, 73, 74, 75, 76, 77, 101, 136, 137, 142, 143, 144, 157, 158, 161, 164, 167, 188, 204, 205, 215, 228, 239, 240, 251, 317, 320, 321, 322, 323, 324, 325, 326, 349, 386, 387, 393, 394, 406, 407, 410, 414, 417, 438, 454, 455, 465, 471, 478, 490, 491, 502], "home": [1, 123, 240, 373, 471, 491], "directori": [1, 158, 230, 235, 240, 407, 471, 481, 486, 491, 502], "under": [1, 2, 98, 105, 107, 118, 123, 167, 173, 252, 346, 354, 356, 367, 373, 417, 423, 471], "cache_pretrain": [1, 471], "us": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 140, 143, 144, 147, 149, 151, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 187, 188, 189, 191, 194, 195, 196, 197, 202, 203, 204, 205, 206, 207, 214, 215, 220, 228, 230, 231, 232, 234, 235, 239, 240, 242, 243, 244, 245, 251, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 390, 393, 394, 396, 399, 401, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 433, 437, 438, 439, 441, 443, 444, 445, 446, 452, 453, 454, 455, 456, 457, 464, 465, 470, 471, 478, 481, 482, 483, 485, 486, 491, 492, 493, 495, 496, 503, 504, 505, 506, 507, 509], "cluster": [1, 7, 94, 100, 103, 113, 255, 342, 348, 352, 362, 471], "temporarili": [1, 172, 422, 471], "file": [1, 3, 7, 8, 28, 44, 50, 65, 71, 72, 73, 74, 75, 76, 77, 83, 84, 86, 113, 115, 120, 126, 128, 131, 132, 137, 138, 141, 147, 152, 154, 158, 178, 179, 180, 183, 188, 193, 206, 216, 218, 228, 230, 232, 237, 239, 240, 242, 243, 244, 245, 248, 253, 255, 257, 276, 293, 299, 313, 320, 321, 322, 323, 324, 325, 326, 331, 333, 335, 362, 364, 368, 376, 377, 381, 382, 387, 388, 391, 396, 402, 404, 407, 427, 429, 430, 433, 438, 442, 456, 466, 468, 471, 478, 481, 483, 489, 490, 491, 492, 493, 495, 496, 499, 502, 512], "unpack": [1, 471], "index": [1, 2, 59, 61, 106, 111, 112, 123, 128, 187, 218, 242, 252, 309, 355, 360, 361, 373, 377, 437, 468, 471, 492], "wordembed": [1, 5, 89, 96, 110, 115, 138, 196, 344, 359, 364, 388, 445, 471], "By": [1, 112, 154, 159, 174, 182, 187, 196, 228, 337, 361, 404, 408, 424, 432, 437, 445, 471, 478, 502], "thi": [1, 2, 3, 4, 7, 8, 9, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 126, 128, 129, 131, 132, 133, 136, 137, 138, 139, 141, 143, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 185, 186, 187, 188, 189, 191, 193, 195, 196, 198, 201, 202, 203, 204, 205, 206, 207, 211, 214, 215, 222, 226, 228, 230, 232, 234, 235, 240, 244, 246, 250, 251, 252, 253, 254, 255, 257, 258, 260, 263, 264, 265, 266, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 288, 289, 291, 292, 293, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 376, 377, 378, 381, 382, 383, 386, 387, 388, 389, 391, 393, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 434, 436, 437, 438, 439, 441, 442, 444, 445, 447, 450, 452, 453, 454, 455, 456, 457, 459, 460, 464, 465, 471, 472, 476, 477, 478, 481, 482, 485, 486, 491, 495, 497, 501, 502, 505, 506, 507, 509, 510, 511], "i": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 215, 219, 220, 226, 228, 232, 235, 239, 240, 242, 244, 245, 246, 250, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 434, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 465, 469, 470, 471, 477, 478, 483, 486, 490, 491, 492, 495, 496, 497, 502, 503, 505, 506, 507, 509, 510, 511, 512], "hadoop": [1, 471], "tmp": [1, 193, 201, 442, 450, 471, 502], "dir": [1, 471], "via": [1, 9, 15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 113, 201, 215, 258, 263, 265, 266, 269, 271, 273, 275, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 362, 450, 465, 471], "configur": [1, 67, 110, 188, 230, 240, 250, 315, 337, 359, 438, 471, 481, 491], "note": [1, 7, 8, 9, 17, 18, 23, 28, 36, 44, 49, 50, 56, 79, 90, 91, 94, 98, 100, 102, 105, 108, 110, 115, 116, 118, 123, 138, 143, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 202, 215, 218, 230, 231, 240, 250, 255, 257, 258, 265, 266, 271, 276, 284, 293, 298, 299, 305, 308, 328, 338, 339, 342, 346, 348, 350, 354, 357, 359, 364, 365, 367, 373, 388, 393, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 452, 465, 468, 471, 481, 482, 491, 511], "s3": [1, 235, 471, 486], "hdf": [1, 471], "dbf": [1, 471], "dict": [1, 2, 3, 4, 83, 84, 120, 126, 128, 131, 132, 137, 139, 140, 141, 143, 147, 154, 178, 179, 180, 188, 202, 215, 219, 226, 228, 230, 231, 232, 234, 240, 248, 252, 253, 254, 331, 333, 368, 376, 377, 381, 382, 387, 389, 390, 391, 393, 396, 404, 427, 429, 430, 438, 452, 465, 469, 471, 477, 478, 481, 482, 483, 485, 491, 499], "custom": [1, 85, 115, 137, 138, 151, 152, 188, 204, 228, 240, 334, 364, 387, 388, 401, 402, 438, 454, 471, 478, 491], "save": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 138, 147, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 218, 228, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 388, 396, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 468, 471, 478, 502, 506], "from": [1, 2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 215, 220, 224, 228, 230, 231, 232, 234, 235, 239, 240, 242, 243, 244, 245, 246, 251, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 395, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 455, 456, 457, 459, 465, 470, 471, 474, 477, 478, 481, 482, 483, 485, 486, 490, 491, 492, 493, 495, 496, 497, 502, 505, 506, 507, 510, 511, 512], "dure": [1, 7, 28, 44, 50, 66, 91, 98, 103, 137, 138, 147, 151, 157, 158, 176, 178, 215, 228, 231, 255, 276, 293, 299, 314, 339, 346, 352, 387, 388, 396, 401, 406, 407, 425, 427, 465, 471, 478, 502], "annotator_log": [1, 471], "print": [1, 86, 235, 335, 337, 471, 486], "jvm": [1, 182, 432, 471], "output": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 211, 215, 220, 228, 230, 231, 232, 239, 244, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 460, 465, 470, 471, 478, 481, 482, 483, 490, 495, 502, 505, 506, 507], "real": [1, 138, 167, 169, 170, 171, 172, 228, 388, 417, 419, 420, 421, 422, 471, 478, 502], "time": [1, 28, 44, 50, 61, 90, 94, 99, 114, 116, 117, 123, 129, 147, 155, 158, 178, 191, 276, 293, 299, 309, 338, 342, 347, 363, 365, 366, 373, 378, 396, 405, 407, 427, 441, 471, 505, 506, 510, 511], "int": [1, 2, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 121, 123, 125, 129, 133, 135, 137, 138, 141, 143, 146, 147, 149, 151, 152, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 180, 183, 187, 188, 191, 215, 228, 230, 231, 239, 242, 252, 254, 255, 257, 258, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 292, 293, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 309, 312, 313, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 338, 339, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 370, 373, 375, 378, 383, 385, 387, 388, 391, 393, 395, 396, 399, 401, 402, 405, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 430, 433, 437, 438, 441, 465, 471, 478, 481, 482, 490, 492], "level": [1, 16, 28, 44, 50, 92, 93, 104, 108, 109, 113, 115, 117, 120, 137, 138, 147, 178, 232, 242, 264, 276, 293, 299, 340, 341, 353, 357, 358, 362, 364, 366, 368, 387, 388, 396, 427, 471, 492], "return": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 125, 126, 128, 132, 133, 135, 137, 138, 140, 143, 149, 151, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 186, 188, 191, 194, 201, 202, 215, 218, 219, 220, 222, 226, 230, 231, 234, 235, 240, 242, 243, 244, 245, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 317, 321, 322, 323, 324, 325, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 373, 375, 376, 377, 382, 383, 385, 387, 388, 390, 393, 399, 401, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 436, 438, 441, 443, 450, 452, 465, 468, 469, 470, 471, 472, 477, 481, 482, 485, 486, 491, 492, 493, 495, 496], "initi": [1, 99, 114, 157, 158, 171, 178, 187, 205, 215, 242, 243, 244, 245, 347, 363, 406, 407, 421, 427, 437, 455, 465, 471, 492, 493, 495, 496, 502], "session": [1, 240, 242, 243, 244, 245, 251, 471, 491, 492, 493, 495, 496], "sinc": [1, 86, 105, 123, 162, 163, 250, 335, 337, 354, 373, 411, 413, 471, 506, 507, 511], "2": [1, 7, 8, 11, 28, 44, 50, 51, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 84, 90, 91, 92, 93, 94, 96, 97, 102, 103, 107, 108, 113, 116, 117, 118, 120, 121, 123, 129, 130, 131, 132, 133, 136, 138, 143, 144, 147, 151, 154, 157, 158, 159, 161, 162, 163, 164, 167, 170, 171, 176, 178, 179, 180, 189, 202, 215, 220, 224, 234, 235, 240, 243, 246, 250, 255, 257, 260, 276, 293, 299, 300, 313, 314, 316, 319, 320, 321, 322, 323, 324, 325, 327, 328, 333, 338, 339, 340, 341, 342, 344, 345, 350, 352, 356, 357, 362, 365, 366, 367, 368, 370, 373, 378, 380, 381, 382, 383, 386, 388, 393, 394, 396, 401, 406, 407, 408, 410, 411, 413, 414, 417, 420, 421, 425, 427, 429, 439, 452, 465, 470, 471, 474, 485, 486, 491, 493, 497, 505, 506, 511], "python": [1, 125, 230, 251, 375, 471, 481], "deprec": [1, 250, 471], "you": [1, 17, 18, 23, 36, 49, 56, 77, 83, 84, 85, 87, 94, 96, 98, 100, 107, 108, 110, 121, 129, 139, 143, 160, 164, 166, 170, 196, 198, 202, 204, 215, 228, 232, 235, 240, 244, 246, 250, 265, 266, 271, 284, 298, 305, 308, 326, 331, 333, 334, 336, 337, 342, 344, 346, 348, 356, 357, 359, 370, 378, 389, 393, 409, 414, 416, 420, 445, 447, 452, 454, 465, 471, 478, 483, 486, 491, 495, 497, 502, 504, 506, 507, 510, 511, 512], "ar": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 90, 91, 92, 94, 95, 97, 98, 102, 103, 104, 106, 108, 111, 112, 113, 115, 116, 117, 118, 120, 121, 123, 125, 126, 129, 131, 133, 136, 138, 139, 140, 141, 143, 149, 151, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 181, 191, 196, 201, 202, 204, 205, 206, 214, 215, 216, 220, 228, 230, 231, 235, 245, 246, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 337, 338, 339, 340, 342, 343, 345, 346, 350, 352, 353, 355, 357, 360, 361, 362, 364, 365, 366, 367, 368, 370, 373, 375, 376, 378, 381, 383, 386, 388, 389, 390, 391, 393, 399, 401, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 431, 433, 441, 445, 450, 452, 454, 455, 456, 464, 465, 466, 470, 471, 478, 481, 482, 486, 496, 497, 502, 503, 504, 505, 506, 507, 510, 511, 512], "consid": [1, 85, 115, 121, 123, 143, 155, 157, 158, 160, 164, 166, 178, 179, 180, 182, 186, 215, 230, 231, 235, 250, 308, 334, 364, 370, 373, 393, 406, 407, 409, 414, 416, 427, 429, 430, 432, 436, 465, 471, 481, 486], "stick": [1, 250, 471], "lower": [1, 86, 90, 123, 143, 176, 178, 194, 250, 335, 338, 373, 393, 425, 427, 443, 471], "current": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 87, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 123, 128, 129, 130, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 183, 202, 206, 211, 215, 218, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 336, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 373, 377, 378, 380, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 452, 456, 460, 465, 468, 471, 505, 506, 507], "contain": [2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 63, 66, 67, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 234, 235, 236, 240, 242, 243, 244, 245, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 263, 264, 265, 266, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 288, 289, 291, 292, 293, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 312, 314, 315, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 485, 486, 487, 491, 492, 493, 495, 496, 499, 500, 502, 505, 506], "dataformat": [2, 3, 4, 9, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 120, 121, 126, 128, 129, 130, 131, 132, 137, 138, 141, 147, 154, 159, 171, 174, 179, 180, 188, 191, 193, 195, 197, 198, 201, 203, 204, 206, 230, 232, 239, 240, 242, 243, 244, 245, 246, 252, 253, 254, 258, 309, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 368, 370, 376, 377, 378, 380, 381, 382, 387, 388, 391, 396, 404, 408, 421, 424, 429, 430, 438, 441, 442, 444, 446, 447, 450, 453, 454, 456, 481, 483, 490, 491, 492, 493, 495, 496, 497, 503, 512], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 228, 230, 231, 232, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 371, 463, 475, 494, 501, 502, 510, 512], "begin": [2, 63, 85, 87, 136, 162, 186, 188, 194, 195, 203, 220, 252, 312, 334, 336, 386, 411, 436, 438, 443, 444, 453, 470, 505], "end": [2, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 63, 75, 85, 87, 138, 143, 144, 152, 157, 158, 159, 161, 169, 174, 186, 188, 191, 195, 203, 204, 215, 220, 227, 228, 230, 242, 252, 262, 268, 272, 277, 281, 287, 290, 295, 301, 302, 312, 324, 334, 336, 388, 393, 394, 402, 406, 407, 408, 410, 419, 424, 436, 438, 441, 444, 453, 454, 465, 470, 478, 481, 492, 502, 505, 507], "metadata": [2, 3, 4, 51, 63, 81, 87, 91, 123, 132, 137, 138, 140, 149, 195, 197, 201, 202, 203, 215, 220, 228, 230, 232, 235, 240, 252, 253, 254, 300, 312, 330, 336, 339, 373, 382, 387, 388, 390, 399, 444, 446, 450, 452, 453, 465, 470, 478, 481, 486, 491, 505, 507], "object": [2, 3, 4, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 137, 138, 140, 143, 149, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 191, 202, 212, 213, 214, 215, 216, 218, 228, 234, 235, 248, 249, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 375, 376, 387, 388, 390, 393, 399, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 431, 432, 441, 464, 466, 473, 474, 478, 505, 506], "repres": [2, 3, 4, 83, 84, 90, 97, 103, 106, 111, 112, 118, 120, 121, 128, 132, 133, 143, 144, 161, 167, 188, 228, 234, 252, 253, 254, 331, 333, 338, 345, 352, 355, 360, 361, 367, 368, 370, 377, 382, 383, 393, 394, 410, 417, 438, 478, 485, 506], "detail": [2, 3, 4, 9, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 111, 116, 117, 123, 140, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 252, 253, 254, 258, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 360, 365, 366, 373, 390, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "type": [2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 215, 220, 222, 229, 230, 231, 232, 234, 237, 238, 239, 244, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 465, 470, 472, 480, 481, 482, 483, 485, 488, 489, 490, 495, 505, 506, 509], "possibl": [2, 3, 4, 60, 61, 96, 98, 116, 117, 120, 151, 178, 180, 195, 203, 204, 214, 216, 228, 252, 253, 254, 308, 344, 346, 365, 366, 368, 401, 427, 430, 444, 453, 454, 464, 466, 478, 502], "valu": [2, 3, 4, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 93, 96, 102, 103, 106, 111, 112, 113, 116, 120, 121, 123, 125, 126, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 182, 183, 187, 188, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 211, 214, 215, 216, 218, 225, 228, 230, 231, 232, 238, 239, 240, 252, 253, 254, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 341, 344, 350, 352, 355, 360, 361, 362, 365, 368, 370, 373, 375, 376, 378, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 405, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 432, 433, 437, 438, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 460, 464, 465, 466, 468, 476, 478, 481, 482, 483, 490, 491, 502, 512], "document": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 198, 202, 203, 204, 206, 207, 208, 212, 228, 229, 230, 231, 232, 234, 239, 240, 242, 243, 244, 246, 250, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 452, 453, 454, 456, 457, 461, 478, 480, 481, 482, 483, 485, 490, 491, 492, 493, 495, 497, 502, 506, 507, 509, 510, 511], "wordpiec": [2, 208, 212, 252, 461], "word_embed": [2, 5, 89, 90, 92, 95, 96, 97, 98, 102, 104, 108, 110, 114, 116, 118, 137, 138, 147, 183, 208, 212, 252, 338, 340, 343, 344, 345, 346, 350, 351, 353, 357, 359, 363, 365, 367, 371, 387, 388, 396, 461], "sentence_embed": [2, 5, 28, 44, 50, 89, 91, 93, 94, 99, 100, 101, 103, 105, 106, 107, 109, 111, 112, 113, 117, 144, 176, 208, 212, 228, 252, 276, 293, 299, 339, 341, 342, 347, 348, 349, 351, 352, 354, 355, 356, 358, 360, 361, 362, 366, 371, 394, 425, 461, 478, 502, 506], "categori": [2, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 66, 67, 78, 80, 208, 212, 228, 252, 263, 265, 266, 269, 271, 273, 275, 276, 278, 280, 282, 284, 288, 291, 293, 296, 298, 299, 303, 305, 306, 314, 315, 327, 329, 461, 478, 502, 506], "date": [2, 61, 81, 129, 130, 131, 204, 208, 212, 252, 309, 330, 378, 380, 381, 454, 461], "entiti": [2, 10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 63, 78, 81, 95, 119, 120, 121, 127, 128, 132, 134, 135, 136, 137, 138, 139, 140, 185, 189, 197, 202, 208, 212, 234, 248, 252, 259, 264, 270, 274, 279, 283, 289, 292, 297, 304, 307, 312, 327, 330, 343, 368, 369, 370, 377, 382, 384, 385, 386, 387, 388, 389, 390, 434, 439, 446, 452, 461, 485, 499], "chunk": [2, 10, 11, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 60, 61, 81, 85, 87, 91, 96, 99, 114, 120, 123, 128, 131, 132, 133, 136, 157, 158, 185, 189, 194, 197, 208, 212, 215, 220, 228, 229, 231, 232, 245, 248, 252, 259, 260, 261, 262, 267, 268, 272, 277, 281, 285, 287, 290, 294, 295, 300, 301, 302, 308, 309, 330, 334, 336, 339, 344, 347, 363, 368, 373, 377, 381, 382, 383, 386, 406, 407, 434, 439, 443, 446, 461, 465, 470, 478, 480, 483, 496, 502, 512], "named_ent": [2, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 121, 136, 137, 138, 139, 140, 147, 202, 208, 212, 234, 252, 264, 270, 274, 279, 283, 289, 292, 297, 304, 307, 370, 386, 387, 388, 389, 390, 396, 452, 461, 485], "negex": [2, 208, 212, 252, 461], "labeled_depend": [2, 84, 121, 208, 212, 252, 333, 461], "languag": [2, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 125, 126, 128, 129, 132, 137, 138, 140, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 188, 191, 194, 203, 204, 207, 208, 212, 215, 230, 232, 235, 248, 252, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 373, 374, 375, 376, 377, 382, 387, 388, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 431, 432, 438, 441, 443, 453, 454, 457, 461, 465, 481, 483, 486, 499, 506], "keyword": [2, 122, 123, 154, 248, 252, 371, 372, 373, 404, 499], "dummi": [2, 86, 208, 212, 249, 252, 335, 461, 500], "first": [2, 97, 99, 100, 102, 103, 107, 111, 114, 116, 117, 123, 131, 137, 138, 139, 151, 159, 166, 167, 168, 169, 172, 173, 174, 176, 178, 182, 187, 196, 204, 207, 214, 215, 250, 252, 308, 345, 347, 348, 350, 352, 356, 360, 363, 365, 366, 373, 381, 387, 388, 389, 401, 408, 416, 417, 418, 419, 422, 423, 424, 425, 427, 432, 437, 445, 454, 457, 464, 465, 502, 506, 507, 511], "charact": [2, 13, 19, 37, 45, 86, 102, 104, 120, 125, 131, 133, 141, 151, 152, 178, 179, 180, 187, 188, 191, 197, 230, 231, 252, 261, 267, 285, 294, 335, 350, 353, 368, 375, 381, 383, 391, 401, 402, 427, 429, 430, 437, 438, 441, 446, 481], "last": [2, 91, 106, 111, 112, 129, 130, 157, 158, 185, 204, 215, 246, 252, 339, 355, 360, 361, 378, 380, 406, 407, 434, 454, 465, 497, 510], "string": [2, 9, 13, 19, 28, 37, 44, 45, 50, 60, 63, 83, 86, 120, 131, 133, 139, 141, 152, 154, 157, 158, 174, 176, 180, 182, 186, 194, 195, 197, 201, 202, 203, 204, 215, 230, 231, 232, 239, 240, 252, 258, 261, 267, 276, 285, 293, 294, 299, 308, 312, 331, 335, 368, 381, 383, 389, 391, 402, 406, 407, 424, 430, 432, 436, 443, 444, 446, 450, 452, 453, 454, 465, 481, 482, 483, 490, 491, 510], "associ": [2, 3, 4, 44, 113, 120, 131, 136, 143, 228, 252, 253, 254, 293, 362, 368, 381, 386, 393, 478], "list": [2, 3, 4, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 107, 108, 109, 113, 116, 117, 118, 120, 121, 123, 125, 129, 131, 135, 136, 138, 139, 140, 141, 143, 146, 151, 152, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 182, 183, 186, 188, 196, 197, 202, 203, 211, 215, 220, 226, 228, 230, 232, 234, 235, 240, 246, 248, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 292, 293, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 312, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 334, 335, 338, 339, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 356, 357, 358, 362, 365, 366, 367, 368, 370, 373, 375, 378, 381, 385, 386, 388, 389, 390, 391, 393, 395, 401, 402, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 436, 438, 445, 446, 452, 453, 460, 465, 470, 477, 478, 481, 483, 485, 486, 491, 497, 499, 501, 506], "vector": [2, 44, 92, 93, 94, 96, 97, 99, 100, 102, 113, 114, 115, 176, 196, 197, 252, 293, 340, 341, 342, 344, 345, 347, 348, 350, 362, 363, 364, 425, 445, 446, 505], "where": [2, 44, 97, 101, 102, 111, 120, 123, 126, 128, 131, 132, 133, 143, 149, 152, 154, 159, 162, 174, 176, 179, 180, 191, 194, 244, 252, 293, 345, 349, 350, 360, 368, 373, 376, 377, 381, 382, 383, 393, 399, 402, 404, 408, 411, 424, 425, 429, 430, 441, 443, 495], "applic": [2, 77, 80, 112, 123, 159, 163, 164, 167, 169, 170, 171, 172, 214, 227, 228, 252, 326, 329, 361, 373, 408, 413, 414, 417, 419, 420, 421, 422, 464, 478, 479, 502, 504], "static": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 125, 126, 128, 132, 137, 138, 140, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 215, 218, 234, 235, 249, 252, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 375, 376, 377, 382, 387, 388, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441, 465, 468, 485, 486, 500, 506], "sql": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 128, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 202, 218, 220, 226, 230, 234, 240, 242, 243, 244, 245, 252, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 377, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 450, 452, 468, 470, 477, 481, 485, 491, 492, 493, 495, 496], "creat": [2, 3, 4, 28, 44, 50, 69, 77, 87, 92, 93, 99, 108, 111, 114, 115, 121, 138, 143, 144, 147, 149, 157, 165, 168, 172, 185, 191, 202, 205, 220, 231, 242, 243, 244, 245, 248, 249, 250, 252, 253, 254, 276, 293, 299, 317, 326, 336, 337, 340, 341, 347, 357, 360, 363, 364, 370, 388, 393, 394, 396, 399, 406, 415, 418, 422, 434, 441, 452, 455, 470, 492, 493, 495, 496, 499, 500, 506, 507, 510, 512], "new": [2, 3, 4, 10, 50, 63, 78, 81, 90, 92, 93, 97, 102, 103, 104, 115, 118, 139, 140, 143, 157, 159, 162, 164, 169, 170, 174, 178, 197, 226, 231, 250, 252, 253, 254, 259, 299, 312, 327, 330, 338, 340, 341, 345, 350, 352, 353, 364, 367, 389, 390, 393, 395, 396, 406, 408, 411, 414, 419, 420, 424, 427, 433, 446, 460, 465, 476, 477, 482, 505, 506], "differ": [2, 3, 4, 67, 78, 83, 84, 101, 102, 103, 108, 109, 116, 118, 123, 129, 151, 152, 161, 168, 172, 178, 188, 191, 202, 228, 237, 252, 253, 254, 315, 327, 331, 333, 349, 350, 352, 357, 358, 365, 367, 373, 378, 401, 402, 410, 418, 422, 427, 438, 441, 452, 478, 489, 510], "all": [2, 3, 4, 5, 9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 85, 86, 90, 92, 93, 94, 95, 106, 110, 111, 112, 115, 118, 120, 125, 129, 133, 138, 141, 143, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 182, 187, 191, 196, 198, 214, 215, 228, 231, 235, 250, 252, 253, 254, 258, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 300, 303, 305, 306, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 334, 335, 338, 340, 341, 342, 343, 355, 359, 360, 361, 364, 367, 368, 371, 375, 378, 388, 391, 393, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 437, 441, 445, 447, 464, 465, 478, 482, 486, 501, 506, 511], "should": [2, 3, 4, 11, 28, 44, 50, 67, 78, 79, 80, 85, 91, 94, 99, 100, 107, 114, 116, 123, 125, 132, 133, 137, 138, 143, 147, 151, 152, 157, 158, 166, 178, 187, 202, 204, 211, 215, 234, 242, 243, 250, 252, 253, 254, 260, 276, 293, 299, 308, 309, 315, 327, 328, 329, 334, 337, 339, 342, 347, 348, 356, 363, 365, 373, 375, 382, 383, 387, 388, 393, 396, 401, 402, 406, 407, 416, 425, 427, 437, 452, 454, 459, 460, 465, 473, 477, 485, 492, 493], "newli": [2, 3, 4, 112, 252, 253, 254, 361], "structtyp": [2, 220, 249, 252], "schema": [2, 136, 228, 249, 252, 386, 478, 500, 502], "look": [2, 138, 158, 169, 170, 171, 172, 179, 252, 337, 388, 407, 419, 420, 421, 422, 429, 505], "like": [2, 7, 14, 20, 24, 28, 29, 33, 38, 41, 46, 52, 53, 63, 79, 86, 90, 94, 96, 98, 104, 110, 118, 121, 123, 131, 136, 143, 152, 155, 157, 158, 161, 162, 165, 168, 172, 178, 188, 191, 215, 228, 252, 255, 262, 268, 272, 276, 277, 281, 287, 290, 295, 301, 302, 312, 328, 335, 338, 342, 344, 346, 353, 359, 367, 370, 373, 381, 386, 393, 402, 405, 406, 407, 410, 411, 415, 418, 422, 427, 438, 441, 465, 478, 502, 504, 505], "struct": [2, 195, 201, 203, 230, 240, 252, 444, 450, 453, 481, 491], "containsnul": [2, 44, 193, 195, 201, 203, 230, 240, 252, 293, 442, 444, 450, 453, 481, 491], "true": [2, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 66, 67, 77, 78, 79, 80, 85, 86, 87, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 128, 129, 130, 132, 136, 138, 141, 151, 152, 154, 157, 162, 165, 176, 178, 179, 182, 187, 188, 191, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 215, 220, 228, 230, 231, 235, 239, 240, 242, 243, 245, 246, 249, 252, 263, 264, 265, 266, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 288, 289, 291, 292, 293, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 314, 315, 326, 327, 328, 329, 334, 335, 336, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 375, 377, 378, 380, 382, 386, 388, 391, 401, 402, 406, 415, 425, 427, 429, 437, 438, 441, 442, 443, 444, 445, 446, 447, 450, 453, 454, 456, 465, 478, 481, 482, 486, 490, 491, 492, 493, 496, 497, 502, 506, 507], "nullabl": [2, 44, 193, 195, 201, 203, 230, 239, 240, 252, 293, 442, 444, 450, 453, 481, 490, 491], "integ": [2, 67, 78, 79, 80, 106, 111, 112, 195, 201, 203, 215, 239, 252, 315, 327, 328, 329, 355, 360, 361, 444, 450, 453, 490], "map": [2, 11, 44, 91, 94, 115, 120, 143, 149, 157, 158, 178, 195, 201, 203, 204, 215, 220, 226, 230, 240, 248, 252, 260, 293, 339, 342, 364, 368, 393, 395, 396, 399, 406, 407, 427, 444, 450, 453, 454, 460, 465, 470, 476, 477, 481, 482, 491, 505], "kei": [2, 7, 67, 70, 83, 84, 108, 109, 116, 117, 126, 140, 168, 195, 201, 202, 203, 228, 230, 234, 240, 248, 252, 255, 315, 319, 331, 333, 357, 358, 365, 366, 376, 390, 418, 444, 450, 452, 453, 478, 481, 485, 491, 499, 502], "valuecontainsnul": [2, 195, 201, 203, 230, 240, 252, 444, 450, 453, 481, 491], "arrai": [2, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 125, 126, 133, 138, 146, 149, 151, 152, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 185, 186, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 220, 230, 232, 240, 252, 255, 257, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 375, 376, 383, 388, 395, 399, 401, 402, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 434, 436, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 470, 481, 483, 491, 507, 510], "element": [2, 44, 133, 143, 176, 193, 195, 201, 203, 204, 230, 231, 232, 240, 252, 293, 383, 393, 425, 442, 444, 450, 453, 454, 481, 482, 491], "float": [2, 3, 7, 8, 9, 28, 44, 50, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 91, 125, 137, 138, 140, 143, 146, 147, 152, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 191, 193, 195, 196, 202, 203, 215, 230, 252, 253, 255, 257, 258, 276, 293, 299, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 339, 375, 387, 388, 390, 393, 395, 396, 402, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 441, 442, 444, 445, 452, 453, 465, 481], "row": [2, 51, 85, 87, 115, 151, 152, 155, 195, 203, 204, 206, 220, 230, 231, 232, 242, 249, 252, 300, 334, 336, 364, 401, 402, 405, 444, 453, 454, 456, 470, 481, 482, 492, 500], "column": [2, 10, 28, 44, 50, 86, 115, 126, 135, 137, 138, 146, 147, 149, 155, 158, 176, 183, 188, 191, 193, 194, 195, 196, 197, 198, 201, 203, 204, 207, 211, 220, 232, 234, 239, 242, 244, 252, 259, 276, 293, 299, 335, 364, 376, 385, 387, 388, 395, 396, 399, 405, 407, 425, 433, 438, 441, 442, 443, 444, 445, 446, 447, 450, 453, 454, 457, 460, 470, 483, 485, 490, 492, 495, 506], "transform": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 215, 220, 223, 226, 228, 232, 233, 234, 239, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 454, 456, 457, 465, 470, 473, 477, 478, 483, 485, 490, 502, 505, 506, 507, 510, 511, 512], "an": [2, 7, 8, 9, 11, 28, 44, 50, 51, 66, 67, 70, 78, 79, 80, 83, 85, 86, 91, 95, 97, 102, 103, 104, 105, 106, 107, 111, 112, 118, 120, 123, 125, 128, 129, 130, 131, 132, 133, 137, 138, 140, 143, 147, 149, 151, 152, 154, 155, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 185, 188, 191, 194, 195, 196, 197, 198, 201, 202, 203, 204, 207, 215, 219, 220, 222, 226, 228, 232, 240, 242, 243, 244, 245, 252, 255, 257, 258, 260, 276, 293, 299, 300, 308, 314, 315, 319, 327, 328, 329, 331, 334, 335, 337, 339, 343, 345, 350, 352, 353, 354, 355, 356, 360, 361, 367, 368, 373, 375, 377, 378, 380, 381, 382, 383, 387, 388, 390, 393, 395, 396, 399, 401, 402, 404, 405, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 434, 438, 441, 443, 444, 445, 446, 447, 450, 452, 453, 454, 457, 460, 465, 469, 470, 472, 476, 477, 478, 482, 491, 492, 493, 495, 496, 501, 503, 505, 506, 507, 509, 510], "alreadi": [3, 121, 123, 137, 138, 139, 188, 189, 202, 234, 253, 370, 373, 387, 388, 389, 438, 439, 452, 485, 510], "load": [3, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 123, 125, 126, 128, 132, 134, 137, 138, 140, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 201, 215, 218, 232, 234, 235, 239, 246, 250, 251, 253, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 373, 375, 376, 377, 382, 387, 388, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441, 450, 465, 468, 485, 486, 490, 497, 506, 509], "process": [3, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 116, 117, 118, 121, 123, 125, 136, 137, 138, 147, 152, 157, 158, 159, 162, 167, 171, 172, 174, 176, 188, 191, 193, 194, 195, 196, 197, 201, 203, 205, 207, 215, 228, 230, 240, 253, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 329, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 365, 366, 367, 370, 373, 375, 386, 387, 388, 396, 402, 406, 407, 408, 411, 417, 421, 422, 424, 425, 441, 442, 443, 444, 445, 446, 450, 453, 455, 457, 465, 478, 481, 491, 502, 505, 506, 507, 508], "byte": [3, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 125, 138, 146, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 201, 228, 230, 232, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 315, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 375, 388, 395, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 450, 478, 481, 483], "origin": [4, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 99, 104, 108, 114, 136, 152, 157, 158, 159, 201, 215, 249, 254, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 338, 339, 347, 353, 357, 363, 386, 402, 406, 407, 408, 450, 465], "height": [4, 67, 78, 79, 80, 201, 215, 249, 254, 315, 327, 328, 329, 450, 465], "width": [4, 67, 78, 79, 80, 91, 157, 158, 201, 215, 249, 254, 315, 327, 328, 329, 339, 406, 407, 450, 465], "nchannel": [4, 201, 249, 254, 450], "mode": [4, 28, 44, 50, 60, 71, 138, 147, 179, 195, 201, 203, 204, 228, 249, 254, 276, 293, 299, 308, 320, 388, 396, 429, 444, 450, 453, 454, 478], "imag": [4, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 101, 158, 171, 201, 202, 208, 212, 215, 234, 249, 254, 309, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 349, 407, 421, 450, 452, 461, 465, 485, 500], "uri": [4, 235, 254, 486], "pixel": [4, 78, 254, 327], "number": [4, 9, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 83, 84, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 133, 135, 137, 138, 143, 146, 149, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 183, 191, 215, 231, 239, 242, 243, 254, 258, 265, 266, 271, 275, 276, 280, 284, 293, 298, 299, 305, 309, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 333, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 373, 383, 385, 387, 388, 393, 395, 399, 401, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 433, 441, 465, 490, 492, 493], "color": [4, 254], "channel": [4, 67, 78, 79, 80, 178, 215, 254, 315, 327, 328, 329, 427, 465], "opencv": [4, 201, 254, 450], "hubert_for_ctc": [5, 6, 256, 371], "hubertforctc": [5, 6, 7, 255], "wav2vec2_for_ctc": [5, 6, 256, 371], "wav2vec2forctc": [5, 6, 8, 257], "whisper_for_ctc": [5, 6, 256, 371], "whisperforctc": [5, 6, 9, 258], "albert_for_multiple_choic": [5, 12, 286, 371], "albertformultiplechoic": [5, 12, 13, 261], "albert_for_question_answ": [5, 12, 286, 371], "albertforquestionansw": [5, 12, 14, 262], "albert_for_sequence_classif": [5, 12, 286, 371], "albertforsequenceclassif": [5, 12, 15, 30, 263, 278], "albert_for_token_classif": [5, 12, 286, 371], "albertfortokenclassif": [5, 12, 16, 90, 264, 338], "albert_for_zero_shot_classif": [5, 12, 286, 371], "albertforzeroshotclassif": [5, 12, 17, 265], "bart_for_zero_shot_classif": [5, 12, 286, 371], "bartforzeroshotclassif": [5, 12, 17, 18, 265, 266], "bert_for_multiple_choic": [5, 12, 286, 371], "bertformultiplechoic": [5, 12, 19, 267], "bert_for_question_answ": [5, 12, 286, 371], "bertforquestionansw": [5, 12, 13, 20, 51, 261, 268, 300], "bert_for_sequence_classif": [5, 12, 286, 371], "bertforsequenceclassif": [5, 12, 21, 23, 269, 271], "bert_for_token_classif": [5, 12, 286, 371], "bertfortokenclassif": [5, 12, 22, 270], "bert_for_zero_shot_classif": [5, 12, 286, 371], "bertforzeroshotclassif": [5, 12, 23, 271], "camembert_for_question_answ": [5, 12, 286, 371], "camembertforquestionansw": [5, 12, 24, 272], "camembert_for_sequence_classif": [5, 12, 286, 371], "camembertforsequenceclassif": [5, 12, 25, 27, 273, 275], "camembert_for_token_classif": [5, 12, 286, 371], "camembertfortokenclassif": [5, 12, 26, 274], "camembert_for_zero_shot_classif": [5, 12, 286, 371], "camembertforzeroshotclassif": [5, 12, 27, 275], "classifierdlapproach": [5, 12, 28, 44, 276, 293, 506], "classifierdlmodel": [5, 12, 28, 44, 276, 293, 506], "deberta_for_question_answ": [5, 12, 286, 371], "debertaforquestionansw": [5, 12, 29, 277], "deberta_for_sequence_classif": [5, 12, 286, 371], "debertaforsequenceclassif": [5, 12, 27, 30, 32, 275, 278, 280], "deberta_for_token_classif": [5, 12, 286, 371], "debertafortokenclassif": [5, 12, 31, 279], "deberta_for_zero_shot_classif": [5, 12, 286, 371], "debertaforzeroshotclassif": [5, 12, 32, 280], "distil_bert_for_question_answ": [5, 12, 286, 371], "distilbertforquestionansw": [5, 12, 33, 281], "distil_bert_for_sequence_classif": [5, 12, 286, 371], "distilbertforsequenceclassif": [5, 12, 17, 34, 36, 265, 282, 284], "distil_bert_for_token_classif": [5, 12, 286, 371], "distilbertfortokenclassif": [5, 12, 35, 283], "distil_bert_for_zero_shot_classif": [5, 12, 286, 371], "distilbertforzeroshotclassif": [5, 12, 36, 284], "distilbert_for_multiple_choic": [5, 12, 286, 371], "distilbertformultiplechoic": [5, 12, 37, 285], "longformer_for_question_answ": [5, 12, 286, 371], "longformerforquestionansw": [5, 12, 38, 287], "longformer_for_sequence_classif": [5, 12, 286, 371], "longformerforsequenceclassif": [5, 12, 39, 288], "longformer_for_token_classif": [5, 12, 286, 371], "longformerfortokenclassif": [5, 12, 40, 289], "mpnet_for_question_answ": [5, 12, 286, 371], "mpnetforquestionansw": [5, 12, 41, 290], "mpnet_for_sequence_classif": [5, 12, 286, 371], "mpnetforsequenceclassif": [5, 12, 42, 291], "mpnet_for_token_classif": [5, 12, 286, 371], "mpnetfortokenclassif": [5, 12, 43, 292], "multi_classifier_dl": [5, 12, 286, 371], "multiclassifierdlapproach": [5, 12, 28, 44, 228, 276, 293, 478, 502], "multiclassifierdlmodel": [5, 12, 28, 44, 276, 293], "roberta_for_multiple_choic": [5, 12, 286, 371], "robertaformultiplechoic": [5, 12, 45, 294], "roberta_for_question_answ": [5, 12, 286, 371], "robertaforquestionansw": [5, 12, 45, 46, 140, 294, 295, 390], "roberta_for_sequence_classif": [5, 12, 286, 371], "robertaforsequenceclassif": [5, 12, 47, 49, 296, 298], "roberta_for_token_classif": [5, 12, 286, 371], "robertafortokenclassif": [5, 12, 48, 297], "roberta_for_zero_shot_classif": [5, 12, 286, 371], "robertaforzeroshotclassif": [5, 12, 49, 298], "sentiment_dl": [5, 12, 286, 371], "sentimentdlapproach": [5, 12, 28, 44, 50, 276, 293, 299], "sentimentdlmodel": [5, 12, 28, 44, 50, 276, 293, 299], "tapas_for_question_answ": [5, 12, 286, 371], "tapasforquestionansw": [5, 12, 51, 300], "xlm_roberta_for_multiple_choic": [5, 12, 286, 371], "xlmrobertaformultiplechoic": [5, 12, 52, 301], "xlm_roberta_for_question_answ": [5, 12, 286, 371], "xlmrobertaforquestionansw": [5, 12, 53, 302], "xlm_roberta_for_sequence_classif": [5, 12, 286, 371], "xlmrobertaforsequenceclassif": [5, 12, 54, 56, 303, 305], "xlm_roberta_for_token_classif": [5, 12, 286, 371], "xlmrobertafortokenclassif": [5, 12, 43, 55, 292, 304], "xlm_roberta_for_zero_shot_classif": [5, 12, 286, 371], "xlmrobertaforzeroshotclassif": [5, 12, 56, 305], "xlnet_for_sequence_classif": [5, 12, 286, 371], "xlnetforsequenceclassif": [5, 12, 57, 306], "xlnet_for_token_classif": [5, 12, 286, 371], "xlnetfortokenclassif": [5, 12, 58, 307], "extractor": [5, 59, 128, 132, 185, 310, 371, 377, 382, 434], "spanbert_coref": [5, 62, 311, 371], "spanbertcorefmodel": [5, 62, 63, 312], "blip_for_question_answ": [5, 64, 318, 371], "blipforquestionansw": [5, 64, 65, 313], "clip_for_zero_shot_classif": [5, 64, 318, 371], "clipforzeroshotclassif": [5, 64, 65, 66, 71, 72, 73, 75, 76, 313, 314, 320, 321, 322, 324, 325], "convnext_for_image_classif": [5, 64, 318, 371], "convnextforimageclassif": [5, 64, 67, 315], "florence2_transform": [5, 64, 318, 371], "florence2transform": [5, 64, 68, 316], "gemma3_for_multimod": [5, 64, 318, 371], "gemma3formultimod": [5, 64, 69, 317], "internvl_for_multimod": [5, 64, 318, 371], "internvlformultimod": [5, 64, 70, 319], "janus_for_multimod": [5, 64, 318, 371], "janusformultimod": [5, 64, 71, 320], "llava_for_multimod": [5, 64, 318, 371], "llavaformultimod": [5, 64, 72, 321], "mllama_for_multimod": [5, 64, 318, 371], "mllamaformultimod": [5, 64, 73, 322], "paligemma_for_multimod": [5, 64, 318, 371], "paligemmaformultimod": [5, 64, 74, 323], "phi3_vision_for_multimod": [5, 64, 318, 371], "phi3vis": [5, 64, 75, 324], "qwen2vl_transform": [5, 64, 318, 371], "qwen2vltransform": [5, 64, 76, 325], "smolvlm_transform": [5, 64, 318, 371], "smolvlmtransform": [5, 64, 77, 326], "swin_for_image_classif": [5, 64, 318, 371], "swinforimageclassif": [5, 64, 78, 327], "vision_encoder_decoder_for_image_capt": [5, 64, 318, 371], "visionencoderdecoderforimagecapt": [5, 64, 79, 328], "vit_for_image_classif": [5, 64, 318, 371], "vitforimageclassif": [5, 64, 80, 329], "dependency_pars": [5, 82, 235, 332, 371, 486, 511], "dependencyparserapproach": [5, 82, 83, 243, 331, 493, 512], "dependencyparsermodel": [5, 82, 83, 84, 121, 331, 333, 370], "typed_dependency_pars": [5, 82, 332, 371], "typeddependencyparserapproach": [5, 82, 83, 84, 331, 333], "typeddependencyparsermodel": [5, 82, 84, 121, 333, 370], "albert_embed": [5, 89, 351, 371], "albertembed": [5, 16, 89, 90, 264, 338], "auto_gguf_embed": [5, 89, 351, 371], "autoggufembed": [5, 89, 91, 339], "bert_embed": [5, 89, 351, 371], "bertembed": [5, 89, 92, 96, 103, 110, 138, 196, 340, 344, 352, 359, 388, 445], "bert_sentence_embed": [5, 89, 351, 371], "bertsentenceembed": [5, 44, 50, 89, 93, 109, 117, 293, 299, 341, 358, 366], "bge_embed": [5, 89, 351, 371], "bgeembed": [5, 89, 94, 342], "camembert_embed": [5, 89, 351, 371], "camembertembed": [5, 89, 95, 343], "chunk_embed": [5, 89, 351, 371], "chunkembed": [5, 89, 96, 196, 344, 445], "deberta_embed": [5, 89, 351, 371], "debertaembed": [5, 89, 97, 345], "distil_bert_embed": [5, 89, 351, 371], "distilbertembed": [5, 89, 98, 346], "doc2vec": [5, 89, 351, 371], "doc2vecapproach": [5, 89, 99, 347], "doc2vecmodel": [5, 89, 99, 347], "e5_embed": [5, 89, 351, 371], "e5embed": [5, 89, 100, 105, 107, 176, 348, 354, 356, 425], "e5v_embed": [5, 89, 351, 371], "e5vembed": [5, 89, 101, 249, 349, 500], "elmo_embed": [5, 89, 351, 371], "elmoembed": [5, 89, 102, 350], "instructor_embed": [5, 89, 351, 371], "instructorembed": [5, 89, 103, 352], "longformer_embed": [5, 89, 351, 371], "longformerembed": [5, 89, 104, 353], "mpnet_embed": [5, 89, 351, 371], "mpnetembed": [5, 89, 105, 354], "mxbai_embed": [5, 89, 351, 371], "mxbaiembed": [5, 89, 106, 355], "nomic_embed": [5, 89, 351, 371], "nomicembed": [5, 89, 107, 356], "roberta_embed": [5, 89, 351, 371], "robertaembed": [5, 89, 108, 116, 357, 365], "roberta_sentence_embed": [5, 89, 351, 371], "robertasentenceembed": [5, 89, 109, 358], "sentenceembed": [5, 28, 44, 50, 89, 110, 115, 196, 276, 293, 299, 359, 364, 445], "snowflake_embed": [5, 89, 351, 371], "snowflakeembed": [5, 89, 111, 360], "uae_embed": [5, 89, 351, 371], "uaeembed": [5, 89, 112, 361], "universal_sentence_encod": [5, 89, 351, 371], "universalsentenceencod": [5, 28, 44, 50, 89, 113, 228, 276, 293, 299, 362, 478, 502, 506], "word2vec": [5, 89, 99, 347, 351, 371], "word2vecapproach": [5, 89, 114, 363], "word2vecmodel": [5, 89, 114, 363], "wordembeddingsmodel": [5, 89, 96, 110, 115, 121, 137, 138, 139, 196, 344, 359, 364, 370, 387, 388, 389, 445], "xlm_roberta_embed": [5, 89, 351, 371], "xlmrobertaembed": [5, 89, 116, 365], "xlm_roberta_sentence_embed": [5, 89, 351, 371], "xlmrobertasentenceembed": [5, 89, 117, 366], "xlnet_embed": [5, 89, 351, 371], "xlnetembed": [5, 89, 118, 367], "entity_rul": [5, 119, 369, 371], "entityrulerapproach": [5, 119, 120, 368], "entityrulermodel": [5, 119, 120, 368], "yake_keyword_extract": [5, 122, 371, 372], "yakekeywordextract": [5, 122, 123, 373], "language_detector_dl": [5, 124, 371, 374], "languagedetectordl": [5, 124, 125, 375], "big_text_match": [5, 127, 371, 379], "bigtextmatch": [5, 127, 128, 132, 377, 382], "bigtextmatchermodel": [5, 127, 128, 377], "date_match": [5, 127, 371, 379], "datematch": [5, 81, 127, 129, 330, 378], "datematcherutil": [5, 127, 129, 130, 378], "multi_date_match": [5, 127, 371, 379], "multidatematch": [5, 81, 127, 129, 130, 330, 378, 380], "regex_match": [5, 127, 371, 379], "regexmatch": [5, 127, 131, 381], "regexmatchermodel": [5, 127, 131, 381], "text_match": [5, 127, 371, 379], "textmatch": [5, 127, 128, 132, 185, 377, 382, 434], "textmatchermodel": [5, 127, 128, 132, 377, 382], "ner_approach": [5, 134, 371, 384], "nerapproach": [5, 134, 135, 137, 138, 385], "ner_convert": [5, 134, 371, 384], "nerconvert": [5, 96, 134, 136, 137, 138, 228, 344, 386, 387, 388, 478, 502], "ner_crf": [5, 134, 371, 384], "nercrfapproach": [5, 134, 137, 138, 387, 388], "nercrfmodel": [5, 134, 137, 138, 387, 388], "ner_dl": [5, 134, 371, 384], "nerdlapproach": [5, 134, 137, 138, 242, 387, 388, 492, 512], "nerdlmodel": [5, 121, 134, 136, 137, 138, 139, 228, 235, 370, 386, 387, 388, 389, 478, 486, 502], "ner_overwrit": [5, 134, 371, 384], "neroverwrit": [5, 134, 139, 389], "zero_shot_ner_model": [5, 134, 371, 384], "zeroshotnermodel": [5, 134, 140, 390], "openai_complet": [5, 142, 371, 392], "openaicomplet": [5, 142, 143, 393], "openai_embed": [5, 142, 371, 392], "openaiembed": [5, 142, 144, 394], "classifier_encod": [5, 145, 371, 397], "classifierencod": [5, 28, 44, 50, 145, 146, 395], "evaluation_dl_param": [5, 145, 371, 397], "evaluationdlparam": [5, 28, 44, 50, 138, 145, 147, 396], "perceptron": [5, 82, 83, 148, 331, 371, 398], "perceptronapproach": [5, 148, 149, 244, 399, 495, 512], "perceptronmodel": [5, 11, 83, 84, 121, 137, 148, 149, 242, 260, 331, 333, 370, 387, 399, 492], "sentence_detector": [5, 51, 140, 150, 300, 371, 390, 400], "sentencedetector": [5, 11, 28, 51, 63, 83, 84, 93, 96, 109, 113, 117, 121, 123, 126, 131, 133, 137, 138, 139, 140, 149, 150, 151, 152, 182, 185, 205, 207, 215, 242, 260, 276, 300, 312, 331, 333, 341, 344, 358, 362, 366, 370, 373, 376, 381, 383, 387, 388, 389, 390, 399, 401, 402, 432, 434, 455, 457, 465, 492, 506, 507], "sentencedetectorparam": [5, 150, 151, 401], "sentence_detector_dl": [5, 150, 166, 308, 371, 400, 416], "sentencedetectordlapproach": [5, 150, 152, 402], "sentencedetectordlmodel": [5, 150, 152, 166, 308, 402, 416], "sentiment_detector": [5, 153, 371, 403], "sentimentdetector": [5, 153, 154, 404], "sentimentdetectormodel": [5, 153, 154, 404], "vivekn_senti": [5, 153, 371, 403], "viveknsentimentapproach": [5, 153, 154, 155, 404, 405], "viveknsentimentmodel": [5, 153, 155, 405], "auto_gguf_model": [5, 91, 156, 339, 371, 412], "autoggufmodel": [5, 156, 157, 406], "auto_gguf_vision_model": [5, 156, 371, 412], "autoggufvisionmodel": [5, 156, 158, 407], "bart_transform": [5, 156, 371, 412], "barttransform": [5, 156, 159, 408], "cohere_transform": [5, 156, 371, 412], "coheretransform": [5, 156, 160, 409], "cpm_transform": [5, 156, 371, 412], "cpmtransform": [5, 156, 161, 410], "gpt2_transform": [5, 156, 371, 412], "gpt2transform": [5, 156, 162, 411], "llama2_transform": [5, 156, 371, 412], "llama2transform": [5, 156, 163, 413], "llama3_transform": [5, 156, 371, 412], "llama3transform": [5, 156, 164, 414], "m2m100_transform": [5, 156, 371, 412], "m2m100transform": [5, 156, 165, 415], "marian_transform": [5, 156, 371, 412], "mariantransform": [5, 60, 156, 166, 308, 416], "mistral_transform": [5, 156, 371, 412], "mistraltransform": [5, 156, 167, 417], "nllb_transform": [5, 156, 371, 412], "nllbtransform": [5, 156, 168, 418], "olmo_transform": [5, 156, 371, 412], "olmotransform": [5, 156, 169, 419], "phi2_transform": [5, 156, 371, 412], "phi2transform": [5, 156, 170, 420], "phi3_transform": [5, 156, 371, 412], "phi3transform": [5, 156, 171, 421], "qwen_transform": [5, 156, 371, 412], "qwentransform": [5, 156, 172, 422], "starcoder_transform": [5, 156, 371, 412], "starcodertransform": [5, 156, 173, 423], "t5_transform": [5, 156, 371, 412], "t5transform": [5, 156, 174, 424], "document_similarity_rank": [5, 175, 371, 426], "documentsimilarityrankerapproach": [5, 175, 176, 425], "documentsimilarityrankerfinish": [5, 175, 176, 425], "documentsimilarityrankermodel": [5, 175, 176, 425], "context_spell_check": [5, 177, 371, 428], "contextspellcheckerapproach": [5, 177, 178, 179, 180, 427, 429, 430], "contextspellcheckermodel": [5, 177, 178, 179, 180, 427, 429, 430], "norvig_sweet": [5, 177, 371, 428], "norvigsweetingapproach": [5, 177, 178, 179, 180, 427, 429, 430, 512], "norvigsweetingmodel": [5, 177, 178, 179, 180, 427, 429, 430], "symmetric_delet": [5, 177, 371, 428], "symmetricdeleteapproach": [5, 177, 178, 179, 180, 427, 429, 430, 512], "symmetricdeletemodel": [5, 177, 178, 179, 180, 427, 429, 430], "chunk_token": [5, 184, 371, 435], "chunktoken": [5, 184, 185, 434], "chunktokenizermodel": [5, 184, 185, 434], "recursive_token": [5, 184, 371, 435], "recursivetoken": [5, 184, 186, 436], "recursivetokenizermodel": [5, 184, 186, 436], "regex_token": [5, 184, 371, 435], "regextoken": [5, 184, 187, 191, 437, 441, 507], "tokenizermodel": [5, 128, 184, 185, 188, 377, 438], "word_segment": [5, 190, 371, 440], "wordsegmenterapproach": [5, 190, 191, 441], "wordsegmentermodel": [5, 190, 191, 441], "inputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 206, 207, 208, 211, 229, 232, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 443, 456, 457, 460, 483], "name": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 211, 215, 218, 220, 225, 228, 229, 231, 232, 234, 235, 239, 242, 244, 248, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 453, 454, 456, 457, 460, 465, 468, 470, 476, 478, 483, 485, 486, 490, 492, 495, 499, 502, 506], "outputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 201, 203, 204, 206, 207, 208, 211, 221, 223, 229, 232, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 436, 437, 438, 439, 441, 442, 443, 444, 450, 453, 454, 456, 457, 460, 473, 483], "setparam": [5, 10, 175, 176, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 207, 208, 210, 259, 425, 442, 443, 444, 445, 446, 447, 450, 453, 454, 457, 459], "regexpars": [5, 11, 260], "setregexpars": [5, 11, 260], "entitynam": [5, 81, 330], "setentitynam": [5, 81, 330], "chunkoverlap": [5, 85, 334], "chunksiz": [5, 85, 334], "explodesplit": [5, 85, 87, 334, 336], "keepsepar": [5, 85, 334], "patternsareregex": [5, 85, 334], "setchunkoverlap": [5, 85, 334], "setchunks": [5, 85, 334], "setexplodesplit": [5, 85, 87, 334, 336], "setkeepsepar": [5, 85, 334], "setpatternsareregex": [5, 85, 334], "setsplitpattern": [5, 85, 184, 188, 334, 438], "settrimwhitespac": [5, 85, 87, 184, 187, 334, 336, 437], "splitpattern": [5, 85, 184, 188, 334, 438], "trimwhitespac": [5, 85, 87, 184, 187, 334, 336, 437], "action": [5, 86, 335], "encod": [5, 28, 59, 60, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 86, 92, 93, 97, 103, 104, 107, 113, 140, 159, 165, 166, 168, 228, 276, 308, 313, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 335, 340, 341, 345, 352, 353, 356, 362, 390, 408, 415, 416, 418, 478], "lowercas": [5, 59, 60, 86, 141, 187, 191, 192, 194, 308, 335, 391, 437, 441, 443], "pattern": [5, 11, 60, 61, 85, 86, 120, 129, 131, 141, 179, 180, 184, 187, 188, 190, 191, 204, 231, 260, 308, 309, 334, 335, 368, 378, 381, 391, 429, 430, 437, 438, 441, 454], "polici": [5, 86, 335], "replac": [5, 80, 86, 97, 101, 104, 125, 126, 139, 152, 159, 179, 180, 214, 329, 335, 345, 349, 353, 375, 376, 389, 402, 408, 429, 430, 464, 506], "setact": [5, 86, 335], "setencod": [5, 59, 60, 86, 308, 335], "setlowercas": [5, 59, 60, 86, 141, 192, 194, 207, 308, 335, 391, 443, 457], "setpattern": [5, 86, 184, 187, 190, 191, 335, 437, 441], "setpolici": [5, 86, 335], "setreplac": [5, 86, 335], "numtoken": [5, 87, 336], "setnumtoken": [5, 87, 336], "settokenoverlap": [5, 87, 336], "tokenoverlap": [5, 87, 336], "delimit": [5, 13, 19, 37, 45, 115, 120, 121, 126, 127, 131, 133, 137, 141, 154, 187, 206, 231, 242, 244, 261, 267, 285, 294, 364, 368, 370, 376, 381, 383, 387, 391, 404, 437, 456, 482, 492, 495], "entitytyp": [5, 121, 370], "explodeent": [5, 121, 370], "includeedg": [5, 121, 370], "maxsentences": [5, 121, 370], "mergeent": [5, 121, 370], "mergeentitiesiobformat": [5, 121, 370], "minsentences": [5, 121, 370], "optionalinputannotatortyp": [5, 119, 120, 121, 208, 211, 368, 370, 460], "posmodel": [5, 121, 370], "relationshiptyp": [5, 121, 370], "roottoken": [5, 121, 370], "setdelimit": [5, 121, 127, 131, 133, 370, 381, 383], "setdependencyparsermodel": [5, 121, 370], "setentitytyp": [5, 121, 370], "setexplodeent": [5, 121, 370], "setincludeedg": [5, 121, 370], "setmaxsentences": [5, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 121, 313, 317, 319, 320, 321, 322, 323, 324, 325, 326, 370], "setmergeent": [5, 121, 370], "setmergeentitiesiobformat": [5, 121, 370], "setminsentences": [5, 121, 370], "setposmodel": [5, 121, 370], "setrelationshiptyp": [5, 121, 370], "setroottoken": [5, 121, 370], "settypeddependencyparsermodel": [5, 121, 370], "dictionari": [5, 115, 123, 126, 131, 137, 139, 140, 141, 153, 154, 177, 179, 180, 204, 228, 248, 364, 373, 376, 381, 387, 389, 390, 391, 404, 429, 430, 454, 478, 499], "formcol": [5, 126, 243, 376, 493], "lemmacol": [5, 126, 243, 376, 493], "setdictionari": [5, 126, 153, 154, 177, 179, 180, 376, 404, 429, 430], "setformcol": [5, 126, 376], "setlemmacol": [5, 126, 376], "enablecumul": [5, 133, 383], "n": [5, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 87, 91, 117, 123, 133, 136, 137, 138, 143, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 186, 202, 204, 206, 215, 220, 230, 231, 234, 250, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 334, 336, 339, 366, 373, 383, 386, 387, 388, 393, 401, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 436, 452, 454, 456, 465, 470, 481, 485], "setenablecumul": [5, 133, 383], "setn": [5, 96, 133, 344, 383], "cleanuppattern": [5, 86, 141, 335, 391], "maxlength": [5, 141, 150, 151, 152, 184, 187, 188, 391, 401, 402, 437, 438], "minlength": [5, 141, 150, 151, 152, 184, 187, 188, 391, 401, 402, 437, 438], "setcleanuppattern": [5, 141, 391], "setmaxlength": [5, 141, 150, 151, 152, 184, 187, 188, 391, 401, 402, 437, 438], "setminlength": [5, 141, 150, 151, 152, 184, 187, 188, 391, 401, 402, 437, 438], "setslangdictionari": [5, 141, 391], "slangdictionari": [5, 141, 391], "slangmatchcas": [5, 141, 391], "casesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 116, 117, 118, 127, 128, 132, 177, 179, 182, 208, 215, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 365, 366, 367, 377, 382, 429, 432, 465], "loaddefaultstopword": [5, 122, 123, 182, 373, 432], "setcasesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 96, 98, 104, 108, 116, 127, 128, 132, 137, 177, 179, 182, 196, 207, 208, 215, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 344, 346, 353, 357, 365, 377, 382, 387, 429, 432, 445, 457, 465], "setlocal": [5, 182, 432], "setstopword": [5, 122, 123, 139, 182, 373, 389, 432], "stopword": [5, 122, 123, 139, 182, 373, 389, 432], "getgraphfil": [5, 183, 433], "getgraphfold": [5, 183, 433], "gethiddenunitsnumb": [5, 183, 433], "getinputcol": [5, 175, 176, 183, 192, 196, 197, 208, 211, 425, 433, 445, 446, 460], "getlabelcolumn": [5, 134, 135, 183, 385, 433], "graphfil": [5, 183, 433], "graphfold": [5, 134, 138, 177, 178, 183, 388, 427, 433], "hiddenunitsnumb": [5, 183, 433], "inputcol": [5, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 42, 44, 46, 47, 49, 50, 53, 54, 56, 57, 110, 125, 175, 176, 183, 192, 193, 195, 196, 197, 198, 201, 203, 204, 208, 211, 232, 239, 263, 265, 266, 269, 271, 273, 275, 276, 278, 280, 282, 284, 288, 291, 293, 296, 298, 299, 303, 305, 306, 359, 375, 425, 433, 442, 444, 445, 446, 447, 450, 453, 454, 460, 483, 490], "inputcolsvalid": [5, 183, 208, 211, 433, 460], "labelcolumn": [5, 28, 44, 50, 134, 135, 137, 138, 145, 146, 183, 276, 293, 299, 385, 387, 388, 395, 433], "setgraphfil": [5, 183, 433], "setgraphfold": [5, 134, 138, 177, 178, 183, 388, 427, 433], "sethiddenunitsnumb": [5, 183, 433], "setinputcol": [5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 208, 211, 228, 232, 237, 239, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 453, 454, 456, 457, 460, 478, 483, 490, 502, 506, 507], "setlabelcolumn": [5, 28, 44, 50, 134, 135, 137, 138, 145, 146, 183, 228, 276, 293, 299, 385, 387, 388, 395, 433, 478, 502, 506], "avail": [5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 123, 125, 126, 129, 131, 137, 138, 149, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 191, 215, 234, 235, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 371, 373, 375, 376, 378, 381, 387, 388, 399, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 441, 465, 473, 485, 486, 502, 509], "configprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 89, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 124, 125, 134, 138, 145, 146, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 255, 257, 258, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 375, 388, 395, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427], "loadsavedmodel": [6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "setconfigprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 62, 63, 64, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 89, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 107, 108, 109, 113, 116, 117, 118, 124, 125, 134, 138, 145, 146, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 255, 257, 258, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 292, 293, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 312, 315, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 356, 357, 358, 362, 365, 366, 367, 375, 388, 395, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427], "getismultilingu": [6, 9, 258], "getlanguag": [6, 9, 258], "ismultilingu": [6, 9, 258], "setlanguag": [6, 9, 258], "settask": [6, 9, 156, 159, 162, 174, 208, 215, 258, 408, 411, 424, 465], "concern": [7, 8, 9, 15, 66, 67, 78, 79, 80, 81, 90, 255, 257, 258, 263, 314, 315, 327, 328, 329, 330, 338], "classnam": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 126, 128, 131, 132, 137, 138, 140, 141, 143, 144, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 185, 186, 188, 191, 206, 209, 210, 217, 223, 232, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 375, 376, 377, 381, 382, 387, 388, 390, 391, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 434, 436, 438, 441, 456, 458, 459, 467, 473, 483], "java_model": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 126, 128, 131, 132, 137, 138, 140, 141, 143, 144, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 182, 185, 186, 188, 191, 200, 206, 210, 226, 232, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 375, 376, 377, 381, 382, 387, 388, 390, 391, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 434, 436, 438, 441, 449, 456, 459, 477, 483], "hubert": [7, 255], "head": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 63, 85, 90, 118, 136, 137, 138, 158, 202, 220, 234, 255, 257, 258, 261, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 301, 302, 303, 304, 306, 307, 312, 334, 338, 367, 386, 387, 388, 407, 452, 470, 485, 506], "top": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 90, 123, 143, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 203, 215, 250, 255, 257, 258, 261, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 301, 302, 303, 304, 306, 307, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 338, 373, 393, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 453, 465], "connectionist": [7, 8, 9, 255, 257, 258], "tempor": [7, 8, 9, 255, 257, 258], "classif": [7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 66, 67, 78, 80, 90, 94, 100, 103, 113, 155, 159, 174, 215, 248, 255, 257, 258, 261, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 301, 302, 303, 304, 306, 307, 314, 315, 327, 329, 338, 342, 348, 352, 362, 405, 408, 424, 465, 499, 506], "ctc": [7, 8, 9, 255, 257, 258], "wa": [7, 8, 15, 16, 18, 21, 22, 23, 28, 30, 31, 32, 34, 35, 36, 39, 40, 43, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 78, 85, 86, 87, 95, 97, 98, 104, 108, 109, 115, 116, 117, 123, 143, 144, 155, 159, 162, 163, 165, 167, 170, 173, 178, 230, 234, 255, 257, 263, 264, 266, 269, 270, 271, 276, 278, 279, 280, 282, 283, 284, 288, 289, 292, 296, 297, 298, 299, 303, 304, 305, 306, 307, 314, 315, 327, 334, 335, 336, 343, 345, 346, 353, 357, 358, 364, 365, 366, 373, 393, 394, 405, 408, 411, 413, 415, 417, 420, 423, 427, 481, 485, 506, 507], "propos": [7, 8, 67, 78, 90, 95, 97, 98, 105, 108, 109, 112, 116, 117, 118, 168, 255, 257, 315, 327, 338, 343, 345, 346, 354, 357, 358, 361, 365, 366, 367, 418], "self": [7, 8, 78, 90, 104, 166, 255, 257, 308, 327, 338, 353, 416], "supervis": [7, 8, 9, 90, 100, 102, 107, 113, 123, 159, 162, 165, 171, 255, 257, 258, 338, 348, 350, 356, 362, 373, 408, 411, 415, 421], "speech": [7, 8, 9, 11, 95, 148, 149, 191, 244, 248, 255, 257, 258, 260, 343, 398, 399, 441, 495, 512], "represent": [7, 8, 78, 90, 92, 93, 98, 99, 100, 102, 111, 114, 115, 116, 117, 118, 136, 174, 176, 206, 219, 232, 255, 257, 327, 338, 340, 341, 346, 347, 348, 350, 360, 363, 364, 365, 366, 367, 386, 424, 425, 456, 469], "learn": [7, 8, 28, 44, 50, 71, 73, 77, 81, 90, 98, 99, 102, 108, 109, 113, 114, 116, 117, 118, 123, 137, 138, 146, 152, 157, 158, 159, 161, 162, 163, 164, 169, 170, 171, 172, 174, 178, 215, 228, 255, 257, 276, 293, 299, 320, 322, 326, 330, 338, 346, 347, 350, 357, 358, 362, 363, 365, 366, 367, 373, 387, 388, 395, 402, 406, 407, 408, 410, 411, 413, 414, 419, 420, 421, 422, 424, 427, 465, 478, 504], "mask": [7, 78, 97, 105, 116, 117, 118, 159, 187, 255, 327, 345, 354, 365, 366, 367, 408, 437], "predict": [7, 9, 66, 78, 97, 105, 138, 157, 158, 162, 174, 215, 228, 255, 258, 314, 327, 345, 354, 388, 406, 407, 411, 424, 465, 478, 502], "hidden": [7, 14, 16, 20, 22, 24, 26, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 90, 102, 118, 183, 255, 262, 264, 268, 270, 272, 274, 277, 279, 281, 283, 287, 289, 290, 292, 295, 297, 301, 302, 304, 307, 338, 350, 367, 433], "unit": [7, 162, 163, 183, 255, 411, 413, 433], "wei": [7, 78, 255, 327], "ning": [7, 255], "hsu": [7, 255], "benjamin": [7, 95, 255, 343], "bolt": [7, 255], "yao": [7, 255], "hung": [7, 255], "tsai": [7, 255], "kushal": [7, 255], "lakhotia": [7, 255], "ruslan": [7, 255], "salakhutdinov": [7, 255], "abdelrahman": [7, 8, 255, 257], "moham": [7, 8, 255, 257], "take": [7, 8, 17, 18, 23, 36, 49, 51, 56, 85, 87, 95, 105, 121, 132, 158, 168, 179, 182, 188, 205, 242, 255, 257, 265, 266, 271, 284, 298, 300, 305, 334, 336, 343, 354, 370, 382, 395, 396, 407, 418, 429, 432, 438, 455, 460, 465, 476, 482, 492, 505, 506, 510, 511], "transcrib": [7, 8, 9, 255, 257, 258], "text": [7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 214, 215, 216, 219, 220, 228, 230, 231, 232, 238, 239, 240, 242, 243, 244, 245, 248, 249, 255, 257, 258, 259, 260, 263, 264, 265, 266, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 286, 288, 289, 291, 292, 293, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 464, 465, 466, 469, 470, 478, 481, 482, 483, 488, 490, 491, 492, 493, 495, 496, 499, 500, 502, 505, 506, 507, 511, 512], "need": [7, 8, 9, 11, 17, 83, 84, 94, 98, 100, 107, 108, 115, 120, 121, 123, 126, 129, 131, 137, 138, 141, 147, 149, 152, 155, 157, 158, 162, 165, 168, 170, 178, 179, 180, 187, 188, 193, 201, 202, 204, 228, 235, 242, 243, 244, 250, 255, 257, 258, 260, 265, 331, 333, 337, 342, 346, 348, 356, 357, 364, 368, 370, 373, 378, 381, 387, 388, 391, 396, 399, 402, 405, 406, 407, 411, 415, 418, 420, 427, 429, 430, 437, 438, 442, 450, 452, 454, 478, 486, 492, 493, 495, 502, 504, 506, 507, 510, 512], "provid": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 125, 126, 128, 129, 130, 131, 132, 137, 138, 141, 149, 152, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 191, 202, 215, 220, 234, 249, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 375, 376, 377, 378, 380, 381, 382, 387, 388, 391, 395, 396, 399, 402, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 441, 452, 460, 465, 470, 472, 476, 482, 485, 500, 507], "pre": [7, 8, 9, 28, 44, 50, 66, 80, 92, 93, 97, 98, 100, 102, 105, 107, 113, 138, 147, 159, 174, 188, 195, 197, 203, 207, 243, 255, 257, 258, 276, 293, 299, 314, 329, 340, 341, 345, 346, 348, 350, 354, 356, 362, 388, 396, 408, 424, 444, 446, 453, 457, 493, 506], "processor": [7, 8, 255, 257], "m1": [7, 8, 255, 257], "due": [7, 8, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 90, 104, 112, 159, 255, 257, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 338, 353, 361, 408], "instruct": [7, 8, 73, 76, 89, 103, 161, 164, 167, 171, 255, 257, 322, 325, 352, 410, 414, 417, 421], "xla": [7, 8, 255, 257], "can": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 131, 136, 137, 138, 139, 140, 143, 144, 149, 151, 152, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 189, 191, 195, 196, 203, 204, 205, 206, 211, 215, 219, 228, 234, 235, 240, 242, 243, 244, 250, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 381, 386, 387, 388, 389, 390, 393, 394, 399, 401, 402, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 439, 441, 444, 445, 453, 454, 455, 456, 465, 469, 478, 485, 486, 491, 492, 493, 495, 502, 504, 506, 507, 509, 510, 511, 512], "companion": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 137, 138, 140, 149, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 191, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 375, 376, 387, 388, 390, 399, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 441, 474], "speechtotext": [7, 8, 9, 255, 257, 258], "setoutputcol": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 208, 211, 228, 232, 237, 239, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 453, 454, 456, 457, 460, 478, 483, 490, 502, 506, 507], "asr_hubert_large_ls960": [7, 9, 255, 258], "For": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 140, 141, 143, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 188, 191, 195, 196, 197, 203, 204, 207, 215, 228, 230, 234, 235, 245, 250, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 390, 391, 393, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 438, 441, 444, 445, 446, 453, 454, 457, 465, 478, 481, 485, 486, 496, 502, 503, 505, 506, 507, 508, 509, 510], "pleas": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 72, 74, 75, 76, 78, 79, 80, 83, 84, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 125, 126, 128, 129, 131, 132, 137, 138, 141, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 185, 186, 191, 195, 203, 204, 205, 235, 250, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 321, 323, 324, 325, 327, 328, 329, 331, 333, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 375, 376, 377, 378, 381, 382, 387, 388, 391, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 434, 436, 441, 444, 453, 454, 455, 486, 503, 504, 508, 511], "see": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 188, 191, 195, 196, 197, 198, 203, 204, 207, 215, 218, 228, 234, 235, 245, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 438, 441, 444, 445, 446, 447, 453, 454, 457, 465, 468, 478, 485, 486, 496, 502, 503, 504, 509, 511, 512], "hub": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 125, 126, 137, 138, 149, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 191, 235, 248, 251, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 375, 376, 387, 388, 399, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 441, 486, 499], "To": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 91, 92, 94, 95, 97, 98, 104, 108, 112, 116, 118, 123, 129, 131, 149, 151, 157, 158, 159, 162, 169, 174, 191, 198, 202, 204, 205, 228, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 313, 314, 315, 320, 321, 322, 324, 325, 326, 327, 328, 329, 338, 339, 340, 342, 343, 345, 346, 353, 357, 361, 365, 367, 373, 378, 381, 399, 401, 406, 407, 408, 411, 419, 424, 441, 447, 452, 454, 455, 478, 502, 510], "which": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 97, 98, 99, 102, 103, 104, 106, 108, 110, 111, 112, 113, 114, 116, 118, 121, 123, 129, 130, 131, 138, 140, 141, 143, 144, 151, 152, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 179, 187, 191, 196, 202, 215, 220, 235, 242, 243, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 340, 341, 342, 343, 345, 346, 347, 350, 352, 353, 355, 357, 359, 360, 361, 362, 363, 365, 367, 370, 373, 378, 380, 381, 388, 390, 391, 393, 394, 401, 402, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 437, 441, 445, 452, 465, 470, 486, 492, 493, 506, 507], "compat": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 95, 97, 98, 104, 108, 113, 116, 118, 138, 196, 201, 235, 249, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 313, 314, 315, 320, 321, 322, 324, 325, 326, 327, 328, 329, 338, 340, 343, 345, 346, 353, 357, 365, 367, 388, 445, 450, 486, 500], "import": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 201, 202, 203, 204, 205, 206, 207, 220, 228, 234, 239, 240, 242, 243, 244, 245, 246, 250, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 450, 452, 453, 454, 455, 456, 457, 470, 478, 485, 490, 491, 492, 493, 495, 496, 497, 502, 505, 506, 509, 510, 511, 512], "them": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 95, 97, 98, 104, 108, 116, 118, 120, 121, 123, 129, 131, 152, 164, 166, 173, 178, 182, 191, 201, 205, 207, 250, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 313, 314, 315, 320, 321, 322, 324, 325, 326, 327, 328, 329, 338, 340, 343, 345, 346, 353, 357, 365, 367, 368, 370, 373, 378, 381, 402, 414, 416, 423, 427, 432, 441, 450, 455, 457, 506, 507], "5669": [7, 8, 9, 66, 67, 78, 79, 80, 95, 255, 257, 258, 314, 315, 327, 328, 329, 343], "more": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 95, 98, 100, 102, 103, 110, 116, 117, 121, 123, 129, 133, 136, 140, 143, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 179, 187, 188, 195, 196, 197, 203, 204, 207, 215, 228, 230, 232, 234, 240, 245, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 335, 343, 346, 348, 350, 352, 359, 365, 366, 370, 373, 378, 383, 386, 390, 393, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 437, 438, 444, 445, 446, 453, 454, 457, 465, 478, 481, 483, 485, 491, 496, 502, 503, 504, 506, 509, 512], "extend": [7, 8, 9, 11, 28, 44, 50, 63, 66, 67, 71, 73, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 98, 102, 108, 110, 113, 115, 116, 118, 123, 125, 126, 129, 130, 131, 132, 133, 137, 138, 140, 141, 147, 149, 151, 152, 154, 155, 157, 158, 159, 166, 174, 176, 178, 179, 181, 182, 186, 188, 191, 195, 196, 197, 203, 204, 207, 234, 255, 257, 258, 260, 276, 293, 299, 308, 312, 314, 315, 320, 322, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 346, 350, 357, 359, 362, 364, 365, 367, 373, 375, 376, 378, 380, 381, 382, 383, 387, 388, 390, 391, 396, 399, 401, 402, 404, 405, 406, 407, 408, 416, 424, 425, 427, 429, 431, 432, 436, 438, 441, 444, 445, 446, 453, 454, 457, 485], "exampl": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 220, 228, 230, 232, 234, 235, 239, 240, 242, 243, 244, 245, 246, 251, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 455, 456, 457, 470, 478, 481, 483, 485, 486, 490, 491, 492, 493, 495, 496, 497, 502, 505, 506, 507, 509, 510, 511, 512], "hubertforctctestspec": [7, 255], "paper": [7, 9, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 123, 152, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 191, 215, 245, 255, 258, 308, 315, 327, 328, 329, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 373, 402, 405, 408, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 441, 496, 512], "abstract": [7, 9, 67, 78, 80, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 116, 117, 118, 123, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 245, 255, 258, 308, 315, 327, 329, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 365, 366, 367, 373, 408, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 468, 496, 512], "approach": [7, 9, 67, 78, 101, 108, 109, 112, 118, 123, 135, 137, 138, 140, 152, 154, 159, 162, 163, 164, 167, 170, 174, 178, 179, 180, 209, 255, 258, 315, 327, 349, 357, 358, 361, 367, 373, 385, 387, 388, 390, 402, 404, 408, 411, 413, 414, 417, 420, 424, 427, 429, 430, 458, 509], "challeng": [7, 44, 78, 98, 102, 103, 108, 109, 112, 123, 167, 168, 170, 255, 293, 327, 346, 350, 352, 357, 358, 361, 373, 417, 418, 420], "three": [7, 94, 178, 189, 255, 342, 427, 439], "uniqu": [7, 143, 144, 159, 218, 255, 393, 394, 408, 468], "problem": [7, 17, 44, 90, 102, 105, 112, 159, 174, 178, 191, 255, 265, 293, 338, 350, 354, 361, 408, 424, 427, 441], "multipl": [7, 9, 13, 19, 37, 44, 45, 77, 80, 94, 95, 120, 123, 129, 151, 159, 164, 168, 172, 173, 176, 188, 220, 228, 230, 239, 242, 255, 258, 261, 267, 285, 293, 294, 326, 329, 342, 343, 368, 373, 378, 401, 408, 414, 418, 422, 423, 425, 438, 470, 478, 481, 490, 492], "sound": [7, 85, 255, 334], "each": [7, 8, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 67, 78, 79, 80, 85, 94, 97, 99, 100, 105, 107, 110, 114, 115, 120, 121, 123, 126, 128, 129, 131, 132, 133, 135, 137, 138, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 158, 159, 172, 176, 178, 179, 180, 187, 188, 191, 195, 203, 214, 215, 220, 226, 244, 255, 257, 265, 266, 271, 275, 276, 280, 284, 293, 298, 299, 305, 315, 327, 328, 329, 334, 342, 345, 347, 348, 354, 356, 359, 363, 364, 368, 370, 373, 376, 377, 378, 381, 382, 383, 385, 387, 388, 390, 391, 393, 394, 396, 399, 401, 402, 404, 407, 408, 422, 425, 427, 429, 430, 437, 438, 441, 444, 453, 464, 465, 470, 477, 495, 507], "input": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 211, 215, 220, 226, 230, 232, 234, 239, 242, 243, 244, 245, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 460, 465, 470, 477, 481, 483, 485, 490, 492, 493, 495, 496, 506, 507, 510, 512], "utter": [7, 255], "lexicon": [7, 255], "phase": [7, 98, 159, 255, 346, 408], "have": [7, 17, 18, 23, 28, 36, 44, 49, 50, 56, 87, 90, 95, 98, 103, 108, 109, 115, 123, 131, 133, 136, 137, 138, 139, 143, 149, 151, 152, 158, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 180, 189, 204, 207, 250, 255, 265, 266, 271, 276, 284, 293, 298, 299, 305, 336, 337, 338, 343, 346, 352, 357, 358, 364, 373, 381, 383, 386, 387, 388, 389, 393, 399, 401, 402, 407, 409, 410, 411, 413, 414, 418, 419, 420, 421, 422, 430, 439, 454, 457, 473, 506, 507, 510], "variabl": [7, 99, 114, 204, 255, 347, 363, 454], "length": [7, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 85, 87, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 116, 117, 118, 133, 141, 143, 151, 152, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 187, 188, 204, 215, 230, 231, 239, 255, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 334, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 365, 366, 367, 383, 391, 393, 401, 402, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 437, 438, 454, 465, 481, 490], "explicit": [7, 129, 151, 162, 255, 337, 401, 411], "segment": [7, 63, 67, 68, 78, 98, 108, 190, 191, 248, 255, 312, 315, 316, 327, 346, 357, 440, 441], "deal": [7, 202, 255, 452, 510], "we": [7, 8, 9, 28, 44, 67, 78, 80, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 112, 113, 114, 116, 117, 118, 123, 137, 138, 141, 143, 152, 157, 158, 159, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 188, 202, 204, 220, 250, 255, 257, 258, 276, 293, 308, 315, 327, 329, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 356, 357, 358, 361, 362, 363, 365, 366, 367, 373, 387, 388, 391, 393, 402, 406, 407, 408, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 438, 452, 454, 470, 502, 505, 506, 507, 510, 511, 512], "bert": [7, 15, 19, 20, 21, 22, 23, 25, 27, 30, 34, 35, 39, 42, 47, 51, 54, 57, 79, 90, 92, 93, 97, 98, 104, 105, 108, 109, 111, 116, 117, 118, 138, 139, 140, 159, 174, 255, 263, 267, 268, 269, 270, 271, 273, 275, 278, 282, 283, 288, 291, 296, 300, 303, 306, 328, 338, 340, 341, 345, 346, 353, 354, 357, 358, 360, 365, 366, 367, 388, 389, 390, 408, 424], "offlin": [7, 228, 255, 478], "step": [7, 28, 44, 50, 99, 114, 138, 147, 228, 255, 276, 293, 299, 347, 363, 388, 396, 478, 502, 506], "align": [7, 171, 172, 255, 421, 422], "target": [7, 113, 126, 157, 158, 159, 165, 166, 168, 188, 194, 202, 215, 234, 255, 308, 362, 406, 407, 408, 415, 416, 418, 438, 443, 452, 465, 485], "label": [7, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 78, 80, 83, 84, 94, 100, 112, 120, 125, 135, 136, 137, 138, 140, 146, 147, 154, 155, 174, 178, 183, 191, 215, 228, 242, 255, 263, 264, 265, 266, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 288, 289, 291, 292, 293, 296, 297, 298, 299, 303, 304, 305, 306, 307, 314, 315, 327, 329, 331, 333, 342, 348, 361, 368, 375, 385, 386, 387, 388, 390, 395, 396, 404, 405, 424, 427, 433, 441, 465, 478, 492, 502, 506], "loss": [7, 90, 98, 103, 138, 174, 255, 338, 346, 352, 388, 424, 502], "A": [7, 8, 50, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 101, 108, 109, 111, 115, 120, 123, 126, 128, 131, 132, 133, 140, 141, 143, 144, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 179, 180, 187, 188, 201, 215, 228, 230, 240, 244, 250, 255, 257, 299, 312, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 337, 338, 349, 357, 358, 360, 364, 368, 373, 376, 377, 381, 382, 383, 390, 391, 393, 394, 404, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 437, 438, 450, 465, 478, 481, 491, 495, 504, 506, 512], "ingredi": [7, 255], "our": [7, 90, 94, 95, 98, 99, 100, 102, 103, 104, 108, 109, 113, 114, 116, 117, 123, 152, 159, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 220, 234, 255, 338, 342, 343, 346, 347, 348, 350, 352, 353, 357, 358, 362, 363, 365, 366, 373, 402, 408, 411, 413, 414, 415, 417, 418, 420, 421, 422, 423, 424, 470, 485, 511], "appli": [7, 10, 28, 44, 50, 67, 80, 85, 86, 120, 121, 138, 139, 147, 151, 157, 158, 174, 178, 179, 197, 204, 215, 220, 221, 224, 231, 242, 255, 259, 276, 293, 299, 315, 329, 334, 335, 368, 370, 388, 389, 396, 401, 406, 407, 424, 427, 429, 446, 454, 465, 470, 474, 492], "over": [7, 69, 85, 98, 105, 116, 117, 118, 159, 163, 167, 168, 179, 182, 188, 220, 228, 255, 317, 334, 346, 354, 365, 366, 367, 408, 413, 417, 418, 429, 438, 470, 478, 502], "region": [7, 255], "onli": [7, 9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 94, 100, 101, 102, 105, 113, 118, 129, 131, 141, 143, 151, 152, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 186, 191, 204, 205, 214, 215, 239, 242, 249, 255, 258, 308, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 342, 348, 349, 350, 354, 362, 367, 378, 381, 391, 393, 401, 402, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 436, 441, 454, 455, 464, 465, 490, 492, 500], "forc": [7, 91, 157, 158, 215, 239, 255, 339, 406, 407, 465], "combin": [7, 17, 18, 23, 27, 32, 36, 49, 56, 79, 98, 104, 115, 123, 159, 165, 168, 174, 178, 179, 191, 255, 265, 266, 271, 275, 280, 284, 298, 305, 328, 346, 353, 364, 373, 408, 415, 418, 424, 427, 429, 441], "acoust": [7, 255], "continu": [7, 136, 157, 158, 162, 176, 198, 215, 255, 386, 406, 407, 411, 425, 447, 465, 502], "reli": [7, 83, 84, 118, 123, 255, 331, 333, 367, 373], "primarili": [7, 112, 255, 361], "consist": [7, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 97, 104, 131, 149, 155, 170, 172, 191, 206, 244, 255, 313, 317, 319, 320, 321, 322, 323, 324, 325, 326, 338, 345, 353, 381, 399, 405, 420, 422, 441, 456, 495], "unsupervis": [7, 116, 117, 118, 123, 159, 162, 255, 365, 366, 367, 373, 408, 411], "rather": [7, 67, 91, 157, 158, 215, 255, 315, 337, 339, 406, 407, 465], "than": [7, 44, 50, 67, 91, 94, 98, 99, 101, 103, 114, 116, 117, 118, 123, 125, 133, 137, 143, 157, 158, 161, 162, 163, 164, 165, 166, 170, 171, 173, 179, 180, 215, 255, 293, 299, 315, 337, 339, 342, 346, 347, 349, 352, 363, 365, 366, 367, 373, 375, 383, 387, 393, 406, 407, 410, 411, 413, 414, 415, 416, 420, 421, 423, 429, 430, 465, 506], "intrins": [7, 67, 255, 315], "qualiti": [7, 70, 78, 111, 112, 162, 164, 165, 168, 171, 173, 255, 319, 327, 360, 361, 411, 414, 415, 418, 421, 423], "assign": [7, 44, 120, 139, 154, 255, 293, 368, 389, 404], "simpl": [7, 60, 92, 93, 120, 162, 255, 308, 340, 341, 368, 411, 507], "k": [7, 9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 196, 215, 255, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 445, 465], "mean": [7, 9, 11, 17, 18, 23, 27, 32, 36, 44, 49, 56, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 106, 111, 112, 116, 123, 125, 129, 130, 143, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 187, 196, 202, 204, 215, 255, 258, 260, 265, 266, 271, 275, 280, 284, 293, 298, 305, 308, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 339, 355, 360, 361, 365, 373, 375, 378, 380, 393, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 437, 445, 452, 454, 465, 506, 507, 510], "teacher": [7, 255], "100": [7, 28, 44, 51, 80, 99, 114, 116, 123, 143, 152, 165, 206, 255, 276, 293, 300, 329, 347, 363, 365, 373, 393, 402, 415, 456], "two": [7, 44, 71, 72, 73, 75, 76, 77, 78, 83, 84, 90, 97, 99, 113, 114, 115, 116, 117, 121, 158, 171, 189, 204, 242, 255, 293, 320, 321, 322, 324, 325, 326, 327, 331, 333, 338, 345, 347, 362, 363, 364, 365, 366, 370, 407, 421, 439, 454, 492, 506], "iter": [7, 83, 84, 90, 99, 114, 149, 164, 191, 204, 228, 255, 331, 333, 338, 347, 363, 399, 414, 441, 454, 478, 502], "either": [7, 9, 28, 50, 80, 84, 95, 96, 110, 120, 123, 125, 131, 154, 155, 174, 191, 194, 202, 203, 206, 234, 239, 255, 258, 276, 299, 329, 333, 343, 344, 359, 368, 373, 375, 381, 404, 405, 424, 441, 443, 452, 453, 456, 485, 490, 507], "match": [7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 71, 86, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 116, 117, 118, 120, 127, 128, 129, 130, 131, 132, 141, 149, 151, 159, 162, 164, 173, 188, 191, 194, 204, 214, 215, 255, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 315, 320, 335, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 365, 366, 367, 368, 377, 378, 379, 380, 381, 382, 391, 399, 401, 408, 411, 414, 423, 438, 441, 443, 454, 464, 465, 505], "improv": [7, 90, 92, 93, 95, 97, 102, 103, 108, 109, 112, 116, 117, 137, 138, 162, 163, 164, 168, 169, 170, 171, 172, 174, 176, 255, 338, 340, 341, 343, 345, 350, 352, 357, 358, 361, 365, 366, 387, 388, 411, 413, 414, 418, 419, 420, 421, 422, 424, 425, 511], "upon": [7, 70, 87, 94, 123, 157, 158, 172, 173, 215, 255, 319, 336, 342, 373, 406, 407, 422, 423, 465], "state": [7, 14, 16, 20, 22, 24, 26, 28, 29, 31, 33, 35, 38, 40, 41, 43, 44, 46, 48, 50, 52, 53, 55, 58, 67, 69, 78, 80, 90, 92, 93, 95, 100, 102, 103, 104, 105, 108, 109, 112, 118, 123, 138, 159, 162, 163, 168, 169, 170, 171, 174, 203, 255, 262, 264, 268, 270, 272, 274, 276, 277, 279, 281, 283, 287, 289, 290, 292, 293, 295, 297, 299, 301, 302, 304, 307, 315, 317, 327, 329, 338, 340, 341, 343, 348, 350, 352, 353, 354, 357, 358, 361, 367, 373, 388, 408, 411, 413, 418, 419, 420, 421, 424, 453, 503, 506], "art": [7, 28, 44, 67, 69, 78, 80, 90, 92, 93, 94, 95, 100, 102, 103, 104, 105, 108, 109, 112, 118, 123, 138, 159, 162, 168, 169, 170, 171, 174, 203, 255, 276, 293, 315, 317, 327, 329, 338, 340, 341, 342, 343, 348, 350, 352, 353, 354, 357, 358, 361, 367, 373, 388, 408, 411, 418, 419, 420, 421, 424, 453], "wav2vec": [7, 8, 255, 257], "perform": [7, 67, 71, 77, 78, 80, 86, 90, 94, 95, 97, 98, 100, 101, 102, 103, 107, 108, 109, 111, 113, 115, 116, 117, 118, 138, 155, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 176, 179, 240, 255, 315, 320, 326, 327, 329, 335, 338, 342, 343, 345, 346, 348, 349, 350, 352, 356, 357, 358, 360, 362, 364, 365, 366, 367, 388, 405, 408, 409, 410, 411, 413, 414, 415, 417, 418, 420, 421, 422, 423, 424, 425, 429, 491], "librispeech": [7, 255], "960h": [7, 255], "libri": [7, 255], "light": [7, 98, 118, 123, 202, 251, 255, 346, 367, 373, 452, 509, 511], "60": [7, 98, 151, 160, 164, 255, 346, 401, 409, 414], "000h": [7, 255], "benchmark": [7, 9, 73, 80, 90, 94, 97, 98, 100, 102, 116, 117, 159, 161, 163, 164, 167, 168, 170, 171, 173, 174, 248, 255, 258, 322, 329, 338, 342, 345, 346, 348, 350, 365, 366, 408, 410, 413, 414, 417, 418, 420, 421, 423, 424, 499], "10min": [7, 255], "1h": [7, 255], "10h": [7, 255], "100h": [7, 255], "fine": [7, 9, 63, 92, 93, 98, 100, 101, 105, 140, 159, 163, 164, 167, 170, 171, 174, 246, 255, 258, 312, 340, 341, 346, 348, 349, 354, 390, 408, 413, 414, 417, 420, 421, 424, 497], "tune": [7, 9, 63, 73, 92, 93, 98, 100, 101, 105, 140, 159, 163, 164, 167, 170, 171, 174, 255, 258, 312, 322, 340, 341, 346, 348, 349, 354, 390, 408, 413, 414, 417, 420, 421, 424], "subset": [7, 168, 255, 418], "1b": [7, 255], "show": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 220, 230, 232, 235, 239, 240, 242, 243, 244, 245, 246, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 453, 454, 456, 457, 470, 481, 483, 486, 490, 491, 492, 493, 495, 496, 497, 502, 505, 506, 507, 511], "19": [7, 81, 94, 100, 107, 133, 244, 246, 255, 330, 342, 348, 356, 383, 495, 497], "13": [7, 10, 11, 63, 116, 117, 121, 149, 170, 173, 197, 246, 255, 259, 260, 312, 365, 366, 370, 399, 420, 423, 446, 497], "rel": [7, 95, 97, 116, 129, 130, 137, 161, 168, 178, 255, 343, 345, 365, 378, 380, 387, 410, 418, 427, 505], "wer": [7, 255], "reduct": [7, 90, 179, 255, 338, 429], "dev": [7, 78, 90, 102, 113, 255, 327, 338, 350, 362], "other": [7, 10, 44, 67, 79, 87, 95, 106, 107, 110, 111, 112, 113, 121, 123, 141, 154, 159, 162, 165, 173, 174, 178, 185, 186, 196, 197, 250, 255, 259, 293, 315, 328, 336, 343, 355, 356, 359, 360, 361, 362, 370, 373, 391, 404, 408, 411, 415, 423, 424, 427, 434, 436, 445, 446, 506], "test": [7, 28, 44, 50, 66, 67, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 92, 93, 113, 115, 126, 128, 131, 132, 137, 138, 147, 149, 158, 162, 163, 170, 171, 179, 180, 185, 191, 230, 242, 243, 244, 245, 246, 255, 276, 293, 299, 314, 315, 319, 320, 322, 325, 326, 327, 328, 329, 331, 333, 337, 340, 341, 362, 364, 376, 377, 381, 382, 387, 388, 396, 399, 407, 411, 413, 420, 421, 429, 430, 434, 441, 481, 492, 493, 495, 496, 497, 506, 512], "evalu": [7, 28, 44, 50, 95, 100, 103, 104, 112, 116, 117, 147, 159, 160, 163, 165, 167, 168, 169, 170, 173, 211, 228, 230, 231, 255, 276, 293, 299, 343, 348, 352, 353, 361, 365, 366, 396, 408, 409, 413, 415, 417, 418, 419, 420, 423, 460, 478, 481], "batchsiz": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 89, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 116, 117, 118, 134, 138, 145, 146, 159, 166, 177, 178, 208, 215, 255, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 313, 314, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 365, 366, 367, 388, 395, 408, 416, 427, 465], "size": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 121, 123, 138, 146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 208, 215, 230, 232, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 334, 335, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 364, 365, 366, 367, 370, 373, 388, 395, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 465, 481, 505, 510, 511], "batch": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 116, 117, 118, 138, 146, 157, 158, 159, 166, 178, 215, 255, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 313, 314, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 338, 339, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 365, 366, 367, 388, 395, 406, 407, 408, 416, 427, 465], "refer": [7, 9, 63, 67, 69, 72, 73, 74, 75, 76, 78, 80, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 123, 140, 143, 144, 151, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 191, 194, 195, 203, 215, 218, 230, 250, 251, 255, 258, 308, 312, 315, 317, 321, 322, 323, 324, 325, 327, 329, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 373, 390, 393, 394, 401, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 441, 443, 444, 453, 465, 468, 481, 506, 508, 509], "ml": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 201, 202, 203, 205, 206, 207, 228, 239, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 450, 452, 453, 455, 456, 457, 478, 490, 502, 506, 510], "audio_cont": [7, 8, 9, 193, 255, 257, 258, 442], "setstag": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 194, 196, 206, 207, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 445, 456, 457, 506, 507], "processedaudiofloat": [7, 8, 9, 255, 257, 258], "createdatafram": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 81, 83, 84, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 203, 204, 206, 207, 220, 228, 232, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 312, 330, 331, 333, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 453, 454, 456, 457, 470, 478, 483, 502, 505, 506, 507, 511], "rawfloat": [7, 8, 9, 255, 257, 258], "todf": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 201, 203, 204, 206, 207, 220, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 312, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 450, 453, 454, 456, 457, 470, 505, 506, 507, 511], "fit": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 194, 196, 202, 205, 206, 207, 221, 226, 228, 232, 239, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 390, 391, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 443, 445, 452, 455, 456, 457, 477, 478, 483, 490, 502, 506, 507, 510], "select": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 91, 96, 98, 101, 115, 121, 123, 125, 137, 138, 140, 143, 144, 155, 157, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 186, 191, 193, 195, 197, 198, 201, 203, 204, 206, 207, 220, 228, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 330, 339, 344, 346, 349, 364, 370, 373, 375, 387, 388, 390, 393, 394, 405, 406, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 436, 441, 442, 444, 446, 447, 450, 453, 454, 456, 457, 470, 478, 502, 507], "truncat": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 66, 67, 69, 70, 71, 73, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 91, 101, 115, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 194, 195, 197, 198, 203, 204, 206, 207, 220, 240, 244, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 314, 315, 317, 319, 320, 322, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 339, 349, 364, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 446, 447, 453, 454, 456, 457, 470, 491, 495, 505, 506, 507], "mister": [7, 8, 255, 257], "quilter": [7, 8, 9, 255, 257, 258], "THE": [7, 8, 86, 255, 257, 335], "apostl": [7, 8, 9, 255, 257, 258], "OF": [7, 8, 90, 255, 257, 338], "midl": [7, 8, 255, 257], "clase": [7, 8, 255, 257], "AND": [7, 8, 255, 257], "glad": [7, 8, 9, 255, 257, 258], "TO": [7, 8, 242, 255, 257, 492, 512], "welcom": [7, 8, 9, 251, 255, 257, 258], "hi": [7, 8, 9, 87, 140, 152, 255, 257, 258, 336, 390, 402], "gospel": [7, 8, 9, 255, 257, 258], "parent": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 211, 215, 218, 231, 232, 239, 331, 333], "undefin": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 211, 215, 218, 231, 232, 239], "doc": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 211, 215, 218, 230, 231, 232, 237, 239, 240, 245, 393, 394, 427, 481, 483, 491, 496, 512], "configproto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 125, 138, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 255, 257, 258, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 315, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 375, 388, 395, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427], "tensorflow": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 123, 125, 138, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 255, 257, 258, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 315, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 373, 375, 388, 395, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427], "get": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 107, 108, 109, 113, 116, 117, 118, 123, 125, 135, 138, 146, 149, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 183, 188, 191, 193, 195, 196, 197, 201, 202, 203, 211, 215, 218, 225, 231, 251, 258, 276, 293, 339, 373, 385, 399, 425, 427, 433, 438, 441, 442, 444, 445, 446, 450, 452, 453, 460, 465, 468, 476, 482, 502, 506, 511, 512], "config_proto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 107, 108, 109, 113, 116, 117, 118, 125, 138, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178], "serializetostr": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 107, 108, 109, 113, 116, 117, 118, 125, 138, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178], "folder": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 138, 147, 152, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 180, 183, 235, 242, 248, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 388, 396, 402, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 430, 433, 486, 492, 499], "spark_sess": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "restor": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 128, 132, 137, 138, 140, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 375, 376, 377, 382, 387, 388, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441], "lang": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 126, 128, 132, 137, 138, 140, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 234, 235, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 375, 376, 377, 382, 387, 388, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441, 485, 486, 506, 511], "en": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 120, 121, 125, 126, 128, 132, 137, 138, 140, 149, 152, 155, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 234, 235, 243, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 367, 368, 370, 375, 376, 377, 382, 387, 388, 390, 399, 402, 405, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441, 485, 486, 493, 506, 511, 512], "remote_loc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 125, 126, 128, 132, 137, 138, 140, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 234, 235, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 375, 376, 377, 382, 387, 388, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441, 485, 486], "remot": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 128, 132, 137, 138, 140, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 231, 234, 235, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 375, 376, 377, 382, 387, 388, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441, 482, 485, 486], "address": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 128, 132, 137, 138, 140, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 375, 376, 377, 382, 387, 388, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441], "resourc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 125, 126, 128, 131, 132, 137, 138, 140, 141, 147, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 185, 188, 191, 205, 216, 219, 231, 233, 235, 242, 243, 244, 245, 246, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 375, 376, 377, 381, 382, 387, 388, 390, 391, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 434, 438, 441, 455, 466, 469, 482, 484, 486, 492, 493, 495, 496, 497, 506, 512], "Will": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 128, 132, 137, 138, 140, 149, 151, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 375, 376, 377, 382, 387, 388, 390, 399, 401, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441], "repositori": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 128, 132, 137, 138, 140, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 234, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 375, 376, 377, 382, 387, 388, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441, 485, 503], "otherwis": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 128, 132, 137, 138, 140, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 188, 191, 194, 215, 228, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 375, 376, 377, 382, 387, 388, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 432, 438, 441, 443, 465, 478], "b": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 107, 108, 109, 113, 116, 117, 118, 125, 128, 132, 136, 137, 138, 139, 140, 146, 151, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 191, 202, 220, 234, 242, 245, 255, 257, 258, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 292, 293, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 312, 315, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 356, 357, 358, 362, 365, 366, 367, 375, 377, 382, 386, 387, 388, 389, 390, 395, 401, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 441, 452, 470, 485, 492, 496, 512], "wav2vec2": [8, 257], "framework": [8, 71, 159, 166, 169, 174, 250, 257, 308, 320, 337, 408, 416, 419, 424], "alexei": [8, 257], "baevski": [8, 257], "henri": [8, 257], "zhou": [8, 257], "michael": [8, 185, 257, 434], "auli": [8, 257], "asr_wav2vec2_base_960h": [8, 257], "wav2vec2forctctestspec": [8, 257], "whisper": [9, 258], "automat": [9, 121, 123, 140, 166, 179, 230, 258, 308, 337, 370, 373, 390, 416, 429, 481, 505, 506], "recognit": [9, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 67, 73, 80, 95, 134, 137, 138, 140, 248, 258, 264, 270, 274, 279, 283, 289, 292, 297, 304, 307, 315, 322, 329, 343, 384, 387, 388, 390, 499], "asr": [9, 258], "system": [9, 76, 91, 123, 157, 158, 159, 162, 164, 165, 168, 204, 215, 258, 325, 339, 373, 406, 407, 408, 411, 414, 415, 418, 454, 465], "680": [9, 258], "000": [9, 51, 123, 162, 168, 191, 206, 258, 300, 373, 411, 418, 441, 456], "hour": [9, 87, 129, 130, 258, 336, 378, 380], "multilingu": [9, 69, 70, 116, 117, 160, 165, 168, 172, 191, 258, 317, 319, 365, 366, 409, 415, 418, 422, 441], "multitask": [9, 103, 162, 258, 352, 411], "collect": [9, 73, 112, 123, 163, 170, 228, 258, 322, 361, 373, 413, 420, 478, 502], "web": [9, 63, 86, 95, 111, 162, 171, 228, 258, 312, 335, 343, 360, 411, 421, 478, 502], "It": [9, 15, 17, 18, 21, 23, 27, 28, 30, 32, 34, 36, 39, 44, 47, 49, 50, 51, 54, 56, 57, 66, 67, 69, 71, 78, 79, 85, 86, 92, 93, 95, 97, 98, 99, 101, 104, 108, 109, 114, 116, 117, 120, 123, 133, 155, 158, 159, 161, 166, 170, 172, 176, 178, 179, 180, 186, 197, 202, 232, 235, 250, 258, 263, 265, 266, 269, 271, 275, 276, 278, 280, 282, 284, 288, 293, 296, 298, 299, 300, 303, 305, 306, 308, 314, 315, 317, 320, 327, 328, 334, 335, 337, 340, 341, 343, 345, 346, 347, 349, 353, 357, 358, 363, 365, 366, 368, 373, 383, 405, 407, 408, 410, 416, 420, 422, 425, 427, 429, 430, 436, 446, 452, 483, 486, 505, 510], "well": [9, 65, 70, 72, 75, 77, 80, 83, 84, 85, 100, 113, 116, 117, 123, 143, 159, 160, 172, 173, 206, 258, 313, 319, 321, 324, 326, 329, 331, 333, 334, 348, 362, 365, 366, 373, 393, 408, 409, 422, 423, 456], "translat": [9, 129, 159, 162, 165, 166, 168, 174, 191, 248, 258, 308, 408, 411, 415, 416, 418, 424, 441], "those": [9, 95, 121, 139, 172, 258, 343, 370, 389, 422, 506, 507], "english": [9, 50, 94, 95, 107, 123, 165, 167, 168, 179, 182, 191, 235, 258, 299, 342, 343, 356, 373, 415, 417, 418, 429, 432, 441, 486], "moment": [9, 158, 204, 258, 407, 454], "greedi": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "search": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 94, 111, 129, 159, 160, 164, 165, 168, 176, 179, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 342, 360, 378, 408, 409, 414, 415, 418, 425, 429, 465], "task": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 67, 68, 71, 77, 78, 80, 90, 92, 93, 94, 95, 97, 98, 100, 103, 104, 105, 107, 112, 113, 116, 117, 118, 123, 140, 156, 159, 161, 162, 166, 167, 168, 172, 173, 174, 205, 208, 215, 248, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 315, 316, 320, 326, 327, 329, 338, 340, 341, 342, 343, 345, 346, 348, 352, 353, 354, 356, 361, 362, 365, 366, 367, 373, 390, 408, 410, 411, 416, 417, 418, 422, 423, 424, 455, 465, 499], "asr_whisper_tiny_opt": [9, 258], "whisperforctctestspec": [9, 258], "robust": [9, 103, 171, 258, 352, 421], "larg": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 85, 87, 90, 91, 97, 98, 100, 102, 105, 111, 112, 116, 117, 118, 123, 125, 128, 132, 138, 157, 158, 159, 160, 161, 162, 163, 164, 165, 170, 172, 173, 180, 204, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 313, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 334, 336, 338, 339, 345, 346, 348, 350, 354, 360, 361, 365, 366, 367, 373, 375, 377, 382, 388, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 422, 423, 454], "scale": [9, 67, 78, 79, 80, 90, 91, 98, 100, 104, 105, 116, 117, 157, 158, 159, 161, 162, 163, 164, 165, 168, 170, 171, 174, 215, 258, 315, 327, 328, 329, 338, 339, 346, 348, 353, 354, 365, 366, 406, 407, 408, 410, 411, 413, 414, 415, 418, 420, 421, 424, 465], "weak": [9, 100, 258, 348], "studi": [9, 87, 98, 108, 109, 159, 169, 174, 258, 336, 346, 357, 358, 408, 419, 424], "capabl": [9, 66, 69, 70, 78, 98, 118, 160, 162, 164, 167, 171, 172, 258, 314, 317, 319, 327, 346, 367, 409, 411, 414, 417, 421, 422], "simpli": [9, 86, 103, 258, 335, 352, 507], "amount": [9, 80, 113, 123, 132, 157, 158, 162, 172, 191, 202, 215, 258, 329, 362, 373, 382, 406, 407, 411, 422, 441, 452, 465, 510], "transcript": [9, 258], "internet": [9, 258], "when": [9, 10, 11, 15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 67, 78, 79, 80, 85, 86, 90, 91, 100, 121, 129, 130, 133, 138, 143, 157, 158, 159, 162, 165, 170, 171, 172, 174, 178, 179, 182, 186, 191, 202, 204, 215, 230, 231, 232, 242, 258, 259, 260, 263, 266, 269, 271, 278, 280, 282, 284, 288, 296, 298, 303, 305, 306, 315, 327, 328, 329, 334, 335, 337, 338, 339, 348, 370, 378, 380, 383, 388, 393, 406, 407, 408, 411, 415, 420, 421, 422, 424, 427, 429, 432, 436, 441, 452, 454, 465, 481, 482, 492, 506, 507, 510], "gener": [9, 28, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 90, 91, 94, 96, 98, 100, 103, 104, 107, 110, 112, 118, 121, 123, 137, 138, 140, 143, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 183, 197, 198, 204, 215, 228, 230, 232, 248, 258, 276, 293, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 338, 339, 342, 344, 346, 348, 352, 353, 356, 359, 361, 367, 370, 373, 387, 388, 390, 393, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 446, 447, 454, 465, 478, 481, 499, 502, 505, 506, 507], "standard": [9, 67, 73, 78, 79, 80, 86, 104, 129, 130, 159, 179, 180, 188, 215, 258, 315, 322, 327, 328, 329, 335, 353, 378, 380, 408, 429, 430, 438, 465], "often": [9, 90, 101, 108, 109, 118, 258, 338, 349, 357, 358, 367], "competit": [9, 116, 117, 123, 165, 172, 258, 365, 366, 373, 415, 422], "prior": [9, 67, 94, 98, 103, 104, 143, 169, 178, 240, 258, 315, 342, 346, 352, 353, 393, 419, 427, 491], "fulli": [9, 107, 234, 258, 356, 485], "zero": [9, 66, 100, 115, 140, 162, 258, 314, 348, 364, 390, 411], "shot": [9, 66, 100, 140, 162, 258, 314, 348, 390, 411], "transfer": [9, 80, 98, 100, 113, 116, 117, 159, 162, 174, 258, 329, 346, 348, 362, 365, 366, 408, 411, 424], "without": [9, 66, 77, 92, 93, 100, 101, 103, 116, 117, 123, 158, 162, 167, 191, 240, 258, 314, 326, 340, 341, 348, 349, 352, 365, 366, 373, 407, 411, 417, 441, 491], "ani": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 94, 99, 100, 103, 113, 114, 120, 123, 138, 162, 165, 174, 178, 196, 197, 235, 248, 258, 265, 266, 271, 275, 280, 284, 298, 305, 314, 337, 342, 347, 348, 352, 362, 363, 368, 373, 388, 411, 415, 424, 427, 445, 446, 486, 499, 503, 506, 507, 512], "compar": [9, 78, 80, 90, 97, 98, 102, 103, 105, 118, 123, 152, 159, 161, 163, 172, 173, 174, 178, 228, 258, 327, 329, 338, 345, 346, 350, 352, 354, 367, 373, 402, 408, 410, 413, 422, 423, 424, 427, 478, 502], "human": [9, 97, 123, 161, 163, 164, 167, 168, 170, 172, 258, 345, 373, 410, 413, 414, 417, 418, 420, 422], "accuraci": [9, 67, 78, 83, 84, 92, 93, 99, 111, 113, 114, 116, 117, 137, 138, 149, 167, 179, 191, 258, 315, 327, 331, 333, 340, 341, 347, 360, 362, 363, 365, 366, 387, 388, 399, 417, 429, 441, 502], "infer": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 68, 77, 91, 92, 93, 95, 98, 118, 157, 158, 161, 163, 167, 169, 201, 258, 265, 266, 271, 275, 280, 284, 298, 305, 314, 316, 326, 339, 340, 341, 343, 346, 367, 406, 407, 410, 413, 417, 419, 450], "code": [9, 63, 66, 97, 99, 103, 104, 107, 108, 109, 114, 116, 117, 123, 125, 159, 161, 167, 169, 171, 172, 173, 174, 240, 258, 312, 314, 337, 345, 347, 352, 353, 356, 357, 358, 363, 365, 366, 373, 375, 408, 410, 417, 419, 421, 422, 423, 424, 491, 503, 511], "serv": [9, 78, 258, 327, 503], "foundat": [9, 163, 164, 258, 413, 414], "further": [9, 10, 90, 103, 111, 123, 137, 138, 143, 171, 207, 258, 259, 338, 352, 360, 373, 387, 388, 393, 421, 457], "work": [9, 67, 98, 103, 104, 112, 125, 143, 157, 159, 163, 165, 166, 170, 172, 174, 185, 215, 232, 250, 258, 308, 315, 346, 352, 353, 361, 375, 393, 406, 408, 413, 415, 416, 420, 422, 424, 434, 465, 483, 505, 507, 511], "e": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 84, 86, 100, 102, 103, 104, 105, 120, 121, 137, 138, 159, 162, 166, 171, 174, 176, 178, 182, 206, 215, 228, 230, 232, 249, 258, 260, 261, 263, 264, 267, 269, 270, 273, 274, 278, 279, 282, 283, 285, 288, 289, 291, 292, 294, 296, 297, 303, 304, 306, 307, 308, 315, 333, 335, 348, 350, 352, 353, 354, 368, 370, 387, 388, 408, 411, 416, 421, 424, 425, 427, 432, 456, 465, 478, 481, 483, 500, 502], "g": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 84, 86, 100, 102, 103, 105, 121, 137, 138, 159, 162, 166, 171, 174, 178, 182, 206, 215, 228, 232, 249, 258, 260, 261, 263, 264, 267, 269, 270, 273, 274, 278, 279, 282, 283, 285, 288, 289, 291, 292, 294, 296, 297, 303, 304, 306, 307, 308, 315, 333, 335, 348, 350, 352, 354, 370, 387, 388, 408, 411, 416, 421, 424, 427, 432, 456, 465, 478, 483, 500, 502], "check": [9, 71, 73, 77, 94, 100, 107, 138, 151, 177, 178, 179, 180, 202, 207, 234, 248, 258, 320, 322, 326, 342, 348, 356, 388, 401, 427, 428, 429, 430, 452, 457, 485, 499, 506, 511], "descript": [9, 84, 103, 110, 123, 129, 163, 170, 179, 186, 214, 216, 248, 258, 333, 352, 359, 373, 378, 413, 420, 429, 436, 464, 466, 499], "minoutputlength": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 465], "minimum": [9, 44, 50, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 99, 114, 121, 123, 125, 135, 137, 138, 141, 151, 152, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 179, 180, 187, 188, 215, 232, 242, 258, 293, 299, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 347, 363, 370, 373, 375, 385, 387, 388, 391, 401, 402, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 429, 430, 437, 438, 465, 492], "sequenc": [9, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 104, 106, 111, 112, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 182, 204, 215, 258, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 308, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 339, 353, 355, 360, 361, 393, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 432, 454, 465], "maxoutputlength": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 258, 308, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "maximum": [9, 28, 44, 50, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 99, 114, 121, 123, 135, 137, 138, 141, 143, 146, 151, 152, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 187, 188, 215, 231, 258, 276, 293, 299, 308, 312, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 337, 347, 363, 370, 373, 385, 387, 388, 391, 393, 395, 401, 402, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 437, 438, 465], "dosampl": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "sampl": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 111, 143, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 360, 393, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "decod": [9, 60, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 91, 97, 104, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 308, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 339, 345, 353, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "temperatur": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 142, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 393, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "next": [9, 42, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 108, 109, 123, 129, 130, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 291, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 357, 358, 373, 378, 380, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "probabl": [9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 123, 143, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 179, 215, 258, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 373, 393, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 465], "topk": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "highest": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 143, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 179, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 393, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 465], "vocabulari": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 99, 114, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 347, 363, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 465], "keep": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 85, 91, 123, 141, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 334, 339, 373, 391, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "filter": [9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 116, 117, 123, 136, 137, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 182, 215, 220, 235, 258, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 365, 366, 373, 386, 387, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 432, 465, 470, 486], "topp": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 142, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 393, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "most": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 85, 87, 95, 98, 104, 105, 123, 138, 143, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 308, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 334, 336, 343, 346, 353, 354, 373, 388, 393, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "add": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 115, 129, 130, 151, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 188, 204, 215, 248, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 364, 378, 380, 401, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 438, 454, 465, 499, 506], "top_p": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 143, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 316, 317, 328, 393], "higher": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 115, 123, 143, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 364, 373, 393, 405, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "kept": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "repetitionpenalti": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "repetit": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "penalti": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "norepeatngrams": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "ngram": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 96, 133, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 344, 383, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "occur": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "onc": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 204, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 454, 465], "beamsiz": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 159, 160, 164, 165, 168, 208, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 414, 415, 418, 465], "beam": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 160, 164, 165, 168, 215, 258, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 414, 415, 418, 465], "mr": [9, 258], "middl": [9, 186, 191, 258, 436, 441], "langaug": [9, 234, 258, 485], "xx": [9, 23, 56, 116, 117, 125, 161, 165, 166, 168, 258, 271, 305, 308, 365, 366, 375, 410, 415, 416, 418], "do": [9, 10, 87, 113, 123, 136, 160, 182, 188, 202, 204, 258, 259, 336, 362, 373, 386, 409, 432, 438, 452, 454, 502, 506, 510], "convert": [10, 60, 79, 81, 86, 96, 105, 110, 115, 129, 130, 133, 136, 141, 143, 159, 174, 187, 189, 191, 194, 197, 198, 228, 259, 308, 328, 330, 335, 344, 354, 359, 364, 378, 380, 383, 386, 391, 393, 408, 424, 437, 439, 441, 443, 446, 447, 478, 502, 509], "back": [10, 87, 143, 159, 259, 336, 393, 408], "try": [10, 178, 242, 259, 427, 492], "re": [10, 94, 100, 107, 204, 259, 342, 348, 356, 454, 506], "analysi": [10, 28, 44, 50, 102, 103, 118, 153, 154, 174, 213, 230, 248, 259, 276, 293, 299, 350, 352, 367, 403, 404, 424, 462, 481, 499, 507], "york": [10, 140, 197, 259, 390, 446], "jersei": [10, 197, 259, 446], "aren": [10, 197, 259, 446], "t": [10, 17, 18, 23, 27, 32, 36, 49, 56, 87, 91, 98, 108, 126, 141, 152, 154, 157, 158, 170, 188, 197, 204, 215, 259, 265, 266, 271, 275, 280, 284, 298, 305, 336, 339, 346, 357, 376, 391, 402, 404, 406, 407, 420, 438, 446, 454, 465], "far": [10, 143, 162, 197, 259, 393, 411, 446], "apart": [10, 83, 84, 197, 259, 331, 333, 446], "actual": [10, 133, 197, 207, 259, 383, 446, 457], "id": [10, 44, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 116, 120, 143, 144, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 194, 195, 197, 203, 207, 215, 228, 242, 259, 293, 309, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 335, 365, 368, 393, 394, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 443, 444, 446, 453, 457, 465, 478, 492], "defin": [10, 11, 136, 137, 138, 178, 182, 186, 197, 204, 220, 228, 234, 239, 259, 260, 386, 387, 388, 427, 432, 436, 446, 454, 470, 478, 485, 490, 502, 506, 510], "amongst": [10, 197, 259, 446], "thing": [10, 164, 178, 197, 259, 414, 427, 446], "explain_document_dl": [10, 197, 202, 220, 234, 259, 446, 452, 470, 485], "chunktodoc": [10, 259], "chunkconvert": [10, 259], "explainresult": [10, 197, 259, 446], "selectexpr": [10, 11, 28, 51, 63, 66, 67, 78, 79, 80, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 126, 128, 129, 130, 131, 132, 133, 136, 139, 140, 141, 149, 151, 152, 154, 158, 166, 181, 182, 185, 187, 188, 189, 194, 196, 197, 220, 242, 243, 244, 259, 260, 276, 300, 308, 312, 314, 315, 327, 328, 329, 331, 333, 334, 335, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 373, 376, 377, 378, 380, 381, 382, 383, 386, 389, 390, 391, 399, 401, 402, 404, 407, 416, 431, 432, 434, 437, 438, 439, 443, 445, 446, 470, 492, 493, 495, 505, 506, 511], "explod": [10, 11, 28, 51, 63, 83, 84, 85, 87, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 128, 130, 131, 132, 133, 136, 139, 140, 149, 151, 152, 166, 189, 196, 197, 220, 242, 244, 259, 260, 276, 300, 308, 312, 331, 333, 334, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 373, 377, 380, 381, 382, 383, 386, 389, 390, 399, 401, 402, 416, 439, 445, 446, 470, 492, 495, 505, 506, 511], "col": [10, 83, 84, 120, 128, 136, 139, 176, 194, 196, 197, 198, 203, 220, 240, 259, 331, 333, 368, 377, 386, 389, 446, 470, 491, 505], "7": [10, 50, 78, 92, 93, 97, 129, 130, 144, 149, 162, 163, 167, 170, 171, 197, 244, 246, 250, 259, 299, 327, 340, 341, 345, 378, 380, 394, 399, 411, 413, 417, 420, 421, 446, 495, 497, 505], "loc": [10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 121, 136, 137, 138, 197, 202, 220, 234, 242, 259, 264, 270, 274, 279, 283, 289, 292, 297, 304, 307, 370, 386, 387, 388, 446, 452, 470, 485, 492], "22": [10, 197, 242, 259, 446, 492, 505], "part": [11, 95, 123, 126, 148, 149, 157, 158, 163, 181, 191, 194, 215, 232, 244, 248, 260, 337, 343, 373, 376, 398, 399, 406, 407, 413, 431, 441, 443, 465, 495, 512], "tag": [11, 28, 44, 50, 86, 95, 135, 136, 137, 138, 139, 148, 149, 191, 220, 228, 230, 232, 240, 242, 244, 245, 248, 260, 276, 293, 299, 335, 343, 385, 386, 387, 388, 389, 398, 399, 441, 470, 478, 481, 491, 492, 495, 496, 499, 512], "order": [11, 85, 103, 118, 120, 123, 129, 157, 158, 159, 163, 170, 179, 180, 202, 207, 215, 220, 260, 334, 337, 352, 367, 368, 373, 378, 406, 407, 408, 413, 420, 429, 430, 452, 457, 465, 470, 506, 507, 510, 512], "meaning": [11, 181, 260, 431], "phrase": [11, 95, 99, 114, 128, 132, 260, 343, 347, 363, 377, 382], "onto": [11, 220, 260, 470, 507], "pars": [11, 82, 83, 84, 95, 120, 126, 129, 130, 178, 179, 180, 202, 204, 206, 230, 231, 234, 240, 242, 244, 260, 331, 332, 333, 343, 368, 376, 378, 380, 427, 429, 430, 452, 454, 456, 481, 485, 491, 492, 495], "regular": [11, 85, 131, 137, 151, 260, 334, 381, 387, 401], "express": [11, 50, 63, 85, 129, 131, 151, 260, 299, 312, 334, 378, 381, 401], "wrap": [11, 260, 309, 425, 458, 459, 467, 473, 477], "angl": [11, 112, 260, 361], "bracket": [11, 260], "easili": [11, 102, 149, 196, 260, 350, 399, 445, 502], "distinguish": [11, 260], "itself": [11, 123, 168, 174, 191, 205, 260, 337, 373, 418, 424, 441, 455, 507], "form": [11, 28, 44, 50, 115, 120, 126, 128, 129, 131, 132, 152, 154, 179, 180, 191, 196, 228, 242, 243, 260, 276, 293, 299, 364, 368, 376, 377, 378, 381, 382, 402, 404, 429, 430, 441, 445, 478, 492, 493, 506], "peter": [11, 104, 126, 141, 149, 152, 179, 181, 242, 260, 353, 376, 391, 399, 402, 429, 431, 492], "piper": [11, 126, 149, 181, 260, 376, 399, 431], "employe": [11, 126, 149, 181, 260, 376, 399, 431], "pick": [11, 126, 149, 181, 260, 376, 399, 431], "peck": [11, 126, 149, 181, 260, 376, 399, 431], "pickl": [11, 126, 149, 181, 260, 376, 399, 431], "pepper": [11, 126, 149, 181, 260, 376, 399, 431], "nnp": [11, 149, 202, 220, 242, 243, 244, 245, 260, 399, 452, 470, 492, 493, 495, 496, 505, 510, 511, 512], "nn": [11, 85, 149, 242, 243, 244, 245, 260, 334, 399, 492, 493, 495, 496, 512], "vbp": [11, 149, 202, 243, 260, 399, 452, 493, 505, 510, 511], "vbg": [11, 149, 260, 399], "IN": [11, 149, 202, 220, 243, 244, 245, 260, 399, 452, 470, 493, 495, 496, 505, 510, 511], "jj": [11, 149, 202, 220, 242, 244, 260, 399, 452, 470, 492, 495, 505, 510, 511, 512], "enclos": [11, 260], "treat": [11, 178, 191, 260, 427, 441], "group": [11, 91, 157, 158, 163, 167, 172, 188, 215, 230, 231, 260, 339, 406, 407, 413, 417, 422, 438, 465, 481], "so": [11, 17, 18, 23, 28, 36, 49, 50, 56, 87, 123, 136, 143, 152, 165, 204, 205, 228, 260, 265, 266, 271, 276, 284, 298, 299, 305, 336, 337, 373, 386, 393, 402, 415, 454, 455, 478, 502], "here": [11, 126, 204, 220, 260, 376, 454, 470, 506], "specif": [11, 51, 71, 83, 84, 86, 92, 93, 98, 112, 113, 121, 123, 138, 159, 162, 164, 165, 168, 173, 176, 183, 202, 205, 228, 232, 260, 300, 320, 331, 333, 335, 340, 341, 346, 361, 362, 370, 373, 388, 408, 411, 414, 415, 418, 423, 433, 452, 455, 478, 510], "noun": [11, 243, 260, 493], "success": [11, 95, 105, 162, 260, 343, 354, 411], "grammar": [11, 157, 158, 208, 215, 260, 406, 407, 465], "parser": [11, 83, 84, 121, 248, 260, 331, 333, 370, 371], "Of": [11, 90, 191, 260, 338, 441], "postag": [11, 260], "11": [11, 81, 116, 117, 129, 130, 133, 149, 239, 246, 260, 330, 365, 366, 378, 380, 383, 399, 490, 497], "21": [11, 129, 130, 139, 149, 246, 260, 378, 380, 389, 399, 497], "35": [11, 94, 149, 160, 246, 260, 342, 399, 409, 497], "39": [11, 139, 144, 149, 244, 246, 260, 389, 394, 399, 495, 497], "52": [11, 139, 149, 244, 260, 389, 399, 495], "58": [11, 78, 149, 260, 327, 399], "choicesdelimit": [12, 13, 19, 37, 45, 261, 267, 285, 294], "setchoicesdelimit": [12, 13, 19, 37, 45, 261, 267, 285, 294], "coalescesent": [12, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 124, 125, 262, 263, 265, 266, 268, 269, 271, 272, 273, 275, 277, 278, 280, 281, 282, 284, 287, 288, 291, 295, 296, 298, 302, 303, 305, 306, 375], "getclass": [12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 54, 55, 56, 57, 58, 64, 67, 78, 80, 134, 140, 263, 264, 265, 266, 269, 270, 271, 273, 274, 275, 278, 279, 280, 282, 283, 284, 288, 289, 291, 292, 296, 297, 298, 303, 304, 305, 306, 307, 315, 327, 329, 390], "setcoalescesent": [12, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 124, 125, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 375], "maxsentencelength": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 77, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 116, 117, 118, 208, 215, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 319, 320, 321, 322, 323, 324, 325, 326, 338, 340, 341, 342, 343, 345, 346, 347, 348, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 365, 366, 367, 465], "setmaxsentencelength": [12, 18, 48, 49, 56, 89, 99, 114, 208, 215, 266, 297, 298, 305, 347, 363, 465], "dropout": [12, 28, 50, 134, 138, 276, 299, 388], "setdropout": [12, 28, 50, 134, 138, 276, 299, 388, 506], "setshuffleperepoch": [12, 44, 228, 293, 478, 502], "setthreshold": [12, 44, 50, 122, 123, 124, 125, 208, 215, 228, 229, 231, 293, 299, 373, 375, 465, 478, 482, 502], "setverbos": [12, 44, 134, 137, 138, 145, 147, 293, 387, 388, 396], "shuffleperepoch": [12, 44, 293], "threshold": [12, 44, 50, 91, 99, 114, 122, 123, 124, 125, 137, 140, 157, 158, 178, 191, 208, 215, 229, 230, 231, 232, 293, 299, 339, 347, 363, 373, 375, 387, 390, 406, 407, 427, 441, 465, 481, 482], "setthresholdlabel": [12, 50, 124, 125, 299, 375], "thresholdlabel": [12, 50, 124, 125, 299, 375], "classifi": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 67, 78, 123, 196, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 314, 315, 327, 371, 373, 445, 506], "dl": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 125, 138, 140, 179, 180, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 375, 388, 390, 429, 430], "albert": [13, 14, 15, 16, 90, 261, 262, 263, 264, 338], "choic": [13, 19, 37, 45, 108, 109, 131, 164, 167, 261, 267, 285, 294, 357, 358, 381, 414, 417], "linear": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 78, 91, 157, 158, 162, 215, 261, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 301, 302, 303, 304, 306, 307, 327, 339, 406, 407, 411, 465], "layer": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 90, 91, 92, 93, 97, 102, 118, 157, 158, 215, 261, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 301, 302, 303, 304, 306, 307, 338, 339, 340, 341, 345, 350, 367, 406, 407, 465], "pool": [13, 15, 19, 21, 25, 30, 34, 37, 39, 42, 45, 47, 54, 57, 91, 96, 102, 106, 110, 111, 112, 157, 158, 215, 261, 263, 267, 269, 273, 278, 282, 285, 288, 291, 294, 296, 303, 306, 339, 344, 350, 355, 359, 360, 361, 406, 407, 465], "softmax": [13, 15, 17, 18, 19, 21, 23, 25, 27, 32, 34, 36, 37, 39, 42, 45, 47, 49, 54, 56, 57, 97, 99, 114, 178, 215, 261, 263, 265, 266, 267, 269, 271, 273, 275, 280, 282, 284, 285, 288, 291, 294, 296, 298, 303, 305, 306, 345, 347, 363, 427, 465], "rocstori": [13, 19, 37, 45, 261, 267, 285, 294], "swag": [13, 19, 37, 45, 261, 267, 285, 294], "spanclassifi": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 261, 262, 267, 268, 272, 277, 281, 285, 287, 290, 294, 295, 301, 302], "document_quest": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 261, 262, 267, 268, 272, 277, 281, 285, 287, 290, 294, 295, 300, 301, 302], "document_context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 261, 262, 267, 268, 272, 277, 281, 285, 287, 290, 294, 295, 301, 302], "answer": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 92, 93, 102, 118, 140, 159, 160, 162, 167, 174, 202, 204, 248, 261, 262, 267, 268, 272, 277, 281, 285, 287, 290, 294, 295, 300, 301, 302, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 331, 333, 334, 340, 341, 350, 367, 390, 408, 409, 411, 417, 424, 452, 454], "albert_base_uncased_multiple_choic": [13, 261], "allow": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 102, 107, 113, 137, 138, 141, 151, 152, 159, 173, 187, 188, 205, 214, 232, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 350, 356, 362, 387, 388, 391, 401, 402, 408, 423, 437, 438, 455, 464, 483], "faster": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 98, 102, 157, 158, 167, 179, 180, 215, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 339, 346, 350, 406, 407, 417, 429, 430, 465], "requir": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 83, 84, 90, 93, 94, 97, 100, 102, 107, 113, 116, 117, 123, 138, 141, 155, 178, 189, 191, 194, 196, 201, 207, 248, 251, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 333, 337, 338, 341, 342, 345, 348, 350, 356, 362, 365, 366, 373, 388, 391, 405, 427, 439, 441, 443, 445, 450, 457, 499, 505, 506, 507], "8": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 67, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 97, 98, 100, 103, 104, 105, 106, 107, 108, 109, 111, 112, 116, 117, 118, 129, 133, 138, 139, 143, 144, 147, 162, 171, 178, 189, 191, 242, 246, 250, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 315, 331, 333, 334, 335, 336, 338, 340, 341, 342, 343, 345, 346, 348, 352, 353, 354, 355, 356, 357, 358, 360, 361, 365, 366, 367, 378, 383, 388, 389, 393, 394, 396, 411, 421, 427, 439, 441, 492, 497], "ignor": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 116, 117, 118, 128, 133, 136, 140, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 179, 182, 202, 215, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 365, 366, 367, 377, 383, 386, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 432, 452, 465], "case": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 84, 85, 86, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 116, 117, 118, 120, 125, 128, 132, 141, 160, 163, 170, 178, 179, 182, 188, 194, 215, 242, 243, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 333, 334, 335, 337, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 365, 366, 367, 368, 375, 377, 382, 409, 413, 420, 427, 429, 432, 438, 443, 465, 492, 493, 506], "512": [13, 15, 17, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36, 37, 39, 42, 45, 47, 49, 51, 54, 56, 57, 87, 94, 100, 102, 105, 106, 107, 111, 112, 166, 215, 261, 263, 265, 266, 267, 269, 271, 273, 275, 278, 280, 282, 284, 285, 288, 291, 294, 296, 298, 300, 303, 305, 306, 308, 336, 342, 348, 350, 354, 355, 356, 360, 361, 416, 465], "question": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 92, 93, 102, 108, 109, 118, 140, 149, 159, 160, 162, 167, 174, 202, 248, 261, 262, 267, 268, 272, 277, 281, 285, 287, 290, 294, 295, 300, 301, 302, 313, 317, 319, 320, 321, 322, 323, 324, 325, 326, 331, 333, 340, 341, 350, 357, 358, 367, 390, 399, 408, 409, 411, 417, 424, 452], "context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 69, 70, 91, 92, 93, 99, 102, 107, 114, 118, 143, 155, 157, 158, 163, 171, 172, 178, 188, 215, 231, 261, 262, 267, 268, 272, 277, 281, 285, 287, 290, 294, 295, 301, 302, 317, 319, 339, 340, 341, 347, 350, 356, 363, 367, 393, 405, 406, 407, 413, 421, 422, 427, 438, 465], "questionansw": [13, 19, 20, 37, 45, 261, 267, 268, 285, 294], "eiffel": [13, 19, 37, 45, 261, 267, 285, 294], "tower": [13, 19, 37, 45, 261, 267, 285, 294], "countri": [13, 19, 37, 45, 178, 261, 267, 285, 294, 427], "germani": [13, 19, 37, 45, 261, 267, 285, 294], "franc": [13, 19, 27, 37, 45, 166, 261, 267, 275, 285, 294, 308, 416], "itali": [13, 19, 37, 45, 261, 267, 285, 294], "split": [13, 19, 37, 45, 66, 67, 77, 78, 79, 80, 85, 87, 91, 151, 152, 157, 158, 166, 185, 186, 187, 191, 215, 231, 239, 261, 267, 285, 294, 308, 314, 315, 326, 327, 328, 329, 334, 336, 339, 401, 402, 406, 407, 416, 434, 436, 437, 441, 465, 490], "bert_base_uncased_multiple_choic": [13, 19, 37, 261, 267, 285], "span": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 159, 173, 174, 262, 268, 272, 277, 281, 287, 290, 295, 301, 302, 408, 423, 424], "squad": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 90, 92, 93, 97, 105, 108, 109, 159, 262, 268, 272, 277, 281, 287, 290, 295, 301, 302, 338, 340, 341, 345, 354, 357, 358, 408], "comput": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 67, 78, 80, 90, 97, 98, 103, 113, 162, 166, 167, 168, 176, 180, 191, 202, 262, 268, 272, 277, 281, 287, 290, 295, 301, 302, 308, 315, 327, 329, 338, 345, 346, 352, 362, 411, 416, 417, 418, 425, 430, 441, 452, 510], "logit": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 32, 33, 34, 36, 38, 39, 41, 42, 46, 47, 49, 52, 53, 54, 56, 57, 143, 157, 158, 215, 262, 263, 265, 266, 268, 269, 271, 272, 273, 275, 277, 280, 281, 282, 284, 287, 288, 290, 291, 295, 296, 298, 301, 302, 303, 305, 306, 393, 406, 407, 465], "albert_base_qa_squad2": [14, 262], "128": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 90, 92, 93, 95, 97, 98, 103, 108, 109, 116, 117, 118, 228, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 287, 289, 290, 291, 292, 293, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 338, 340, 341, 343, 345, 346, 352, 357, 358, 365, 366, 367, 478, 502], "what": [14, 20, 24, 29, 33, 38, 41, 46, 50, 52, 53, 65, 67, 72, 73, 83, 84, 123, 125, 140, 143, 166, 168, 178, 186, 243, 262, 268, 272, 277, 281, 287, 290, 295, 299, 301, 302, 308, 313, 315, 321, 322, 331, 333, 373, 375, 390, 393, 416, 418, 427, 436, 493, 503], "": [14, 17, 18, 20, 23, 24, 27, 29, 32, 33, 36, 38, 41, 46, 49, 52, 53, 56, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 90, 94, 95, 97, 98, 99, 100, 104, 107, 108, 109, 113, 114, 116, 117, 120, 123, 131, 138, 141, 143, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 186, 187, 188, 191, 193, 197, 202, 204, 215, 220, 226, 228, 240, 250, 251, 262, 265, 266, 268, 271, 272, 275, 277, 280, 281, 284, 287, 290, 295, 298, 301, 302, 305, 308, 309, 313, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 334, 335, 336, 337, 338, 342, 343, 345, 346, 347, 348, 353, 356, 357, 358, 363, 365, 366, 368, 373, 381, 388, 391, 393, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 436, 437, 438, 441, 442, 446, 452, 454, 458, 459, 465, 467, 470, 473, 477, 478, 491, 502, 505, 506, 507, 510], "my": [14, 16, 17, 20, 22, 24, 28, 29, 31, 33, 35, 38, 40, 41, 42, 43, 46, 48, 50, 52, 53, 55, 58, 85, 86, 87, 131, 133, 140, 143, 151, 161, 162, 163, 167, 169, 170, 171, 172, 182, 185, 187, 204, 262, 264, 265, 268, 270, 272, 276, 277, 279, 281, 283, 287, 289, 290, 291, 292, 295, 297, 299, 301, 302, 304, 307, 334, 335, 336, 381, 383, 390, 393, 401, 410, 411, 413, 417, 419, 420, 421, 422, 432, 434, 437, 454, 506], "clara": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 140, 262, 268, 272, 277, 281, 287, 290, 295, 301, 302, 390], "live": [14, 16, 20, 22, 24, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 140, 162, 163, 228, 262, 264, 268, 270, 272, 277, 279, 281, 283, 287, 289, 290, 292, 295, 297, 301, 302, 304, 307, 390, 411, 413, 478, 502], "berkelei": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 169, 170, 171, 172, 262, 268, 272, 277, 281, 287, 290, 295, 301, 302, 419, 420, 421, 422], "instead": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 93, 123, 125, 129, 130, 174, 196, 197, 201, 202, 231, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 341, 373, 375, 378, 380, 424, 445, 446, 450, 452, 510], "per": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 94, 100, 107, 116, 117, 125, 129, 133, 135, 136, 137, 138, 143, 146, 191, 202, 204, 220, 231, 234, 239, 242, 263, 264, 265, 266, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 288, 289, 291, 292, 293, 296, 297, 298, 299, 303, 304, 305, 306, 307, 342, 348, 356, 365, 366, 375, 378, 383, 385, 386, 387, 388, 393, 441, 452, 454, 470, 485, 490, 492], "averag": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 94, 96, 100, 103, 107, 110, 116, 117, 125, 138, 149, 176, 215, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 300, 303, 305, 306, 342, 344, 348, 352, 356, 359, 365, 366, 375, 388, 399, 425, 465], "regress": [15, 21, 25, 30, 34, 39, 42, 47, 54, 57, 159, 174, 263, 269, 273, 278, 282, 288, 291, 296, 303, 306, 408, 424], "multi": [15, 21, 25, 28, 30, 34, 39, 42, 44, 47, 50, 54, 57, 90, 111, 113, 116, 117, 123, 125, 166, 215, 263, 269, 273, 276, 278, 282, 288, 291, 293, 296, 299, 303, 306, 308, 338, 360, 362, 365, 366, 373, 375, 416, 465], "sequenceclassifi": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306], "albert_base_sequence_classifier_imdb": [15, 263], "activ": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 123, 172, 201, 208, 215, 250, 263, 265, 266, 269, 271, 273, 275, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 373, 422, 450, 465], "calcul": [15, 17, 18, 21, 23, 25, 27, 28, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 115, 133, 138, 147, 154, 176, 215, 263, 265, 266, 269, 271, 273, 275, 276, 280, 282, 284, 288, 291, 293, 296, 298, 299, 303, 305, 306, 364, 383, 388, 396, 404, 425, 465], "sigmoid": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 215, 263, 265, 266, 269, 271, 273, 275, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 465], "love": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 93, 109, 117, 152, 155, 263, 266, 269, 271, 276, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 341, 358, 366, 402, 405, 506], "movi": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 155, 161, 263, 266, 269, 271, 276, 278, 280, 282, 284, 288, 296, 298, 299, 303, 305, 306, 405, 410, 506], "child": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 263, 266, 269, 271, 278, 280, 282, 284, 288, 296, 298, 303, 305, 306], "pretti": [15, 18, 21, 23, 30, 32, 34, 36, 39, 44, 47, 49, 54, 56, 57, 123, 263, 266, 269, 271, 278, 280, 282, 284, 288, 293, 296, 298, 303, 305, 306, 373], "bore": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 263, 266, 269, 271, 278, 280, 282, 284, 288, 296, 298, 303, 305, 306], "neg": [15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 111, 154, 155, 176, 215, 228, 263, 266, 269, 271, 273, 278, 280, 282, 284, 288, 296, 298, 299, 303, 305, 306, 360, 404, 405, 425, 465, 478, 502], "limit": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 69, 78, 80, 87, 90, 95, 104, 105, 112, 115, 118, 123, 155, 174, 179, 215, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 315, 317, 327, 329, 336, 338, 343, 353, 354, 361, 364, 367, 373, 424, 429, 465], "almost": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306], "help": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 69, 76, 83, 84, 85, 90, 91, 143, 144, 157, 158, 160, 163, 164, 166, 170, 188, 204, 215, 228, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 308, 317, 325, 331, 333, 334, 338, 339, 393, 394, 406, 407, 409, 413, 414, 416, 420, 438, 454, 465, 478, 502, 507, 511], "feed": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306], "entir": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 94, 106, 111, 112, 166, 171, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 296, 298, 303, 305, 306, 308, 315, 342, 355, 360, 361, 416, 421], "one": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 44, 47, 49, 54, 56, 57, 63, 67, 78, 79, 80, 83, 84, 86, 92, 93, 101, 105, 110, 116, 117, 118, 123, 125, 129, 131, 136, 143, 152, 158, 171, 179, 185, 204, 207, 215, 230, 231, 240, 263, 265, 266, 269, 271, 273, 275, 278, 280, 282, 284, 288, 291, 293, 296, 298, 303, 305, 306, 312, 315, 327, 328, 329, 331, 333, 335, 340, 341, 349, 354, 359, 365, 366, 367, 373, 375, 378, 381, 386, 393, 402, 407, 421, 429, 434, 454, 457, 465, 481, 482, 491, 502, 506], "token_classifi": [16, 26, 40, 43, 48, 55, 58, 264, 274, 289, 292, 297, 304, 307], "albert_base_token_classifier_conll03": [16, 264], "tokenclassifi": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 264, 270, 274, 279, 283, 289, 292, 297, 304, 307], "john": [16, 22, 31, 35, 40, 43, 48, 55, 58, 63, 93, 109, 117, 120, 121, 139, 141, 152, 198, 240, 246, 264, 270, 279, 283, 289, 292, 297, 304, 307, 312, 341, 358, 366, 368, 370, 389, 391, 402, 447, 491, 497], "lenon": [16, 22, 31, 35, 40, 43, 48, 55, 58, 264, 270, 279, 283, 289, 292, 297, 304, 307], "born": [16, 22, 31, 35, 40, 43, 48, 55, 58, 162, 163, 264, 270, 279, 283, 289, 292, 297, 304, 307, 411, 413], "london": [16, 22, 31, 35, 40, 43, 48, 55, 58, 264, 270, 279, 283, 289, 292, 297, 304, 307], "pari": [16, 22, 31, 35, 40, 43, 48, 55, 58, 140, 264, 270, 279, 283, 289, 292, 297, 304, 307, 390], "sarah": [16, 22, 31, 35, 40, 43, 48, 55, 58, 264, 270, 279, 283, 289, 292, 297, 304, 307], "o": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 136, 137, 138, 139, 202, 220, 234, 242, 245, 264, 270, 274, 279, 283, 289, 292, 297, 304, 307, 386, 387, 388, 389, 452, 470, 485, 492, 496, 512], "modelforsequenceclassif": [17, 18, 23, 27, 32, 36, 49, 56, 265, 266, 271, 275, 280, 284, 298, 305], "nli": [17, 18, 23, 27, 32, 36, 49, 56, 265, 266, 271, 275, 280, 284, 298, 305], "natur": [17, 18, 23, 27, 32, 36, 49, 50, 56, 80, 90, 91, 92, 93, 95, 97, 98, 99, 105, 113, 114, 118, 125, 159, 162, 167, 172, 174, 194, 203, 207, 265, 266, 271, 275, 280, 284, 298, 299, 305, 329, 338, 339, 340, 341, 343, 345, 346, 347, 354, 362, 363, 367, 375, 408, 411, 417, 422, 424, 443, 453, 457], "don": [17, 18, 23, 27, 32, 36, 49, 56, 98, 108, 141, 265, 266, 271, 275, 280, 284, 298, 305, 346, 357, 391], "hardcod": [17, 18, 23, 27, 32, 36, 49, 56, 265, 266, 271, 275, 280, 284, 298, 305], "potenti": [17, 18, 23, 27, 32, 36, 49, 56, 78, 161, 165, 169, 171, 178, 265, 266, 271, 275, 280, 284, 298, 305, 327, 410, 415, 419, 421, 427], "thei": [17, 18, 23, 27, 32, 36, 49, 51, 56, 83, 84, 85, 138, 141, 143, 158, 162, 205, 243, 265, 266, 271, 275, 280, 284, 298, 300, 305, 331, 333, 334, 388, 391, 393, 407, 411, 455, 473, 493, 506], "chosen": [17, 18, 23, 27, 32, 36, 49, 56, 83, 84, 138, 143, 265, 266, 271, 275, 280, 284, 298, 305, 331, 333, 388, 393], "runtim": [17, 18, 23, 27, 32, 36, 49, 56, 265, 266, 271, 275, 280, 284, 298, 305], "usual": [17, 18, 23, 27, 32, 36, 49, 56, 80, 207, 235, 265, 266, 271, 275, 280, 284, 298, 305, 329, 457, 486], "slower": [17, 18, 23, 27, 32, 36, 49, 56, 265, 266, 271, 275, 280, 284, 298, 305], "flexibl": [17, 18, 23, 27, 32, 36, 49, 56, 66, 71, 78, 265, 266, 271, 275, 280, 284, 298, 305, 314, 320, 327], "loop": [17, 18, 23, 36, 49, 56, 204, 265, 266, 271, 284, 298, 305, 454], "through": [17, 18, 23, 36, 49, 56, 90, 105, 121, 123, 133, 165, 168, 170, 198, 265, 266, 271, 284, 298, 305, 338, 354, 370, 373, 415, 418, 420, 447, 507], "longer": [17, 18, 23, 36, 49, 56, 90, 99, 104, 114, 125, 163, 166, 167, 265, 266, 271, 284, 298, 305, 308, 338, 347, 353, 363, 375, 413, 416, 417, 511], "pass": [17, 18, 23, 27, 32, 36, 49, 56, 143, 204, 265, 266, 271, 275, 280, 284, 298, 305, 337, 393, 454], "pose": [17, 18, 23, 27, 32, 36, 49, 56, 265, 266, 271, 275, 280, 284, 298, 305], "premis": [17, 18, 23, 27, 32, 36, 49, 56, 265, 266, 271, 275, 280, 284, 298, 305], "hypothesi": [17, 18, 23, 27, 32, 36, 49, 56, 265, 266, 271, 275, 280, 284, 298, 305], "pair": [17, 18, 23, 27, 32, 36, 49, 56, 66, 100, 101, 107, 111, 121, 165, 228, 265, 266, 271, 275, 280, 284, 298, 305, 314, 348, 349, 356, 360, 370, 415, 478], "albert_base_zero_shot_classifier_onnx": [17, 265], "iphon": [17, 265], "resolv": [17, 265], "asap": [17, 265], "urgent": [17, 265], "albert_zero_shot_classifier_onnx": [17, 265], "bart": [17, 18, 159, 265, 266, 408], "bartforsequenceclassif": [18, 266], "bart_large_zero_shot_classifier_mnli": [18, 266], "bert_base_cased_qa_squad2": [20, 268], "bert_base_sequence_classifier_imdb": [21, 269], "bert_base_token_classifier_conll03": [22, 270], "bert_zero_shot_classifier_mnli": [23, 271], "camembert": [24, 25, 26, 95, 272, 273, 274, 343], "camembert_base_qa_fquad": [24, 272], "fr": [24, 25, 27, 95, 125, 165, 168, 272, 273, 275, 343, 375, 415, 418], "sequence_classifi": [25, 273], "camembert_base_sequence_classifier_allocin": [25, 273], "j": [25, 120, 273, 368], "ai": [25, 143, 144, 159, 164, 228, 273, 393, 394, 408, 414, 478, 502], "ador\u00e9": [25, 273], "ce": [25, 273], "film": [25, 273], "lorsqu": [25, 273], "\u00e9tai": [25, 273], "enfant": [25, 273], "je": [25, 273], "d\u00e9test": [25, 273], "\u00e7a": [25, 273], "camembert_base_token_classifier_wikin": [26, 274], "georg": [26, 274], "washington": [26, 274], "est": [26, 95, 125, 166, 274, 308, 343, 375, 416], "all\u00e9": [26, 274], "\u00e0": [26, 274], "camembert_zero_shot_classifier_xnli_onnx": [27, 275], "multi_class": [27, 275], "setcandidatelabel": [27, 66, 208, 215, 275, 314, 465], "sport": [27, 275], "politiqu": [27, 275], "scienc": [27, 103, 123, 169, 173, 275, 352, 373, 419, 423, 503], "l": [27, 71, 275, 320], "\u00e9quip": [27, 275], "de": [27, 80, 95, 123, 125, 166, 275, 308, 329, 343, 373, 375, 416], "joue": [27, 275], "aujourd": [27, 275], "hui": [27, 275], "au": [27, 275], "parc": [27, 275], "princ": [27, 275], "classifierdl": [28, 276, 506], "univers": [28, 83, 84, 101, 112, 113, 161, 166, 168, 169, 170, 171, 172, 276, 308, 331, 333, 349, 361, 362, 410, 416, 418, 419, 420, 421, 422], "deep": [28, 92, 93, 102, 123, 137, 152, 178, 215, 276, 340, 341, 350, 373, 387, 402, 427, 465], "dnn": [28, 276], "built": [28, 44, 69, 161, 172, 203, 250, 276, 293, 317, 410, 422, 453], "insid": [28, 44, 136, 149, 188, 242, 276, 293, 386, 399, 438, 492], "instanti": [28, 44, 50, 83, 84, 99, 114, 115, 120, 126, 128, 131, 132, 137, 138, 141, 149, 152, 154, 155, 176, 178, 179, 180, 185, 186, 191, 240, 242, 243, 276, 293, 299, 331, 333, 337, 347, 363, 364, 368, 376, 377, 381, 382, 387, 388, 391, 399, 402, 404, 405, 425, 427, 429, 430, 434, 436, 441, 491, 492, 493], "dataset": [28, 44, 50, 83, 84, 94, 95, 99, 100, 103, 104, 105, 108, 109, 111, 112, 114, 115, 123, 125, 137, 138, 147, 152, 162, 164, 165, 168, 169, 171, 173, 178, 191, 226, 232, 234, 242, 243, 244, 245, 251, 276, 293, 299, 331, 333, 342, 343, 347, 348, 352, 353, 354, 357, 358, 360, 361, 363, 364, 373, 375, 387, 388, 396, 402, 411, 414, 415, 418, 419, 421, 423, 427, 441, 477, 483, 485, 492, 493, 495, 496, 509], "monitor": [28, 44, 50, 138, 143, 144, 227, 228, 276, 293, 299, 388, 393, 394, 478, 502], "metric": [28, 44, 50, 138, 180, 228, 276, 293, 299, 388, 430, 478], "done": [28, 44, 50, 108, 109, 137, 138, 276, 293, 299, 357, 358, 387, 388, 507], "settestdataset": [28, 44, 50, 138, 145, 147, 276, 293, 299, 388, 396], "method": [28, 44, 50, 90, 91, 94, 98, 99, 103, 105, 114, 118, 123, 138, 157, 158, 176, 215, 235, 276, 293, 299, 337, 338, 339, 342, 346, 347, 352, 354, 363, 367, 373, 388, 406, 407, 425, 465, 486, 501], "expect": [28, 44, 50, 94, 100, 107, 118, 138, 158, 188, 204, 220, 249, 276, 293, 299, 342, 348, 356, 367, 388, 407, 438, 454, 470, 500], "path": [28, 44, 50, 65, 68, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 99, 114, 115, 120, 121, 126, 128, 131, 132, 137, 138, 140, 141, 147, 152, 154, 157, 158, 162, 178, 179, 180, 183, 188, 201, 202, 215, 218, 219, 228, 230, 232, 234, 239, 240, 242, 243, 244, 245, 248, 276, 293, 299, 313, 316, 319, 320, 321, 322, 323, 324, 325, 326, 331, 333, 347, 363, 364, 368, 370, 376, 377, 381, 382, 387, 388, 390, 391, 396, 402, 404, 406, 407, 411, 427, 429, 430, 433, 438, 450, 452, 465, 468, 469, 478, 481, 485, 490, 491, 492, 493, 495, 496, 499, 502], "parquet": [28, 44, 50, 138, 147, 193, 276, 293, 299, 388, 396, 442], "datafram": [28, 44, 50, 99, 114, 115, 138, 147, 149, 176, 191, 201, 202, 215, 216, 220, 226, 228, 230, 232, 234, 240, 242, 243, 244, 245, 249, 276, 293, 299, 347, 363, 364, 388, 396, 399, 425, 441, 450, 452, 465, 466, 470, 477, 478, 481, 485, 491, 492, 493, 495, 496, 500, 502, 506, 510, 512], "ha": [28, 44, 50, 51, 66, 67, 78, 79, 80, 85, 86, 87, 90, 97, 98, 102, 108, 109, 112, 115, 123, 126, 131, 138, 147, 152, 154, 158, 159, 160, 168, 169, 171, 174, 179, 180, 191, 193, 194, 201, 202, 215, 228, 235, 244, 276, 293, 299, 300, 314, 315, 327, 328, 329, 334, 335, 336, 338, 345, 346, 350, 357, 358, 361, 364, 373, 376, 381, 388, 396, 402, 404, 407, 408, 409, 418, 419, 421, 424, 429, 430, 441, 442, 443, 450, 452, 465, 478, 486, 495, 502, 506, 507], "same": [28, 44, 50, 63, 69, 90, 105, 108, 115, 116, 120, 121, 138, 143, 147, 161, 170, 171, 174, 176, 205, 228, 276, 293, 299, 312, 317, 338, 354, 357, 364, 365, 368, 370, 388, 393, 396, 410, 420, 421, 424, 425, 455, 478, 507], "also": [28, 44, 50, 66, 67, 71, 73, 76, 77, 78, 79, 80, 86, 90, 94, 101, 102, 104, 115, 116, 117, 120, 121, 123, 129, 131, 136, 137, 138, 147, 152, 155, 159, 161, 167, 171, 173, 182, 202, 206, 240, 250, 276, 293, 299, 314, 315, 320, 322, 325, 326, 327, 328, 329, 335, 338, 342, 349, 350, 353, 364, 365, 366, 368, 370, 373, 378, 381, 386, 387, 388, 395, 396, 402, 405, 408, 410, 417, 421, 423, 432, 452, 456, 460, 465, 476, 482, 491, 502, 506, 507, 508, 509, 511], "follow": [28, 44, 50, 63, 76, 81, 86, 102, 104, 111, 115, 123, 129, 130, 131, 136, 138, 141, 151, 167, 171, 189, 204, 206, 232, 276, 293, 299, 312, 325, 330, 335, 350, 353, 360, 364, 373, 378, 380, 381, 386, 388, 391, 401, 417, 421, 439, 454, 456, 502, 504, 507], "preprocessingpipelin": [28, 44, 50, 138, 147, 276, 293, 299, 388, 396], "randomsplit": [28, 44, 50, 138, 147, 276, 293, 299, 388, 396], "write": [28, 44, 50, 115, 138, 143, 147, 161, 173, 179, 180, 276, 293, 299, 364, 388, 393, 396, 410, 423, 429, 430, 507], "overwrit": [28, 44, 50, 138, 139, 147, 228, 276, 293, 299, 388, 389, 396, 478], "test_data": [28, 44, 50, 138, 147, 276, 293, 299, 388, 396], "usag": [28, 44, 50, 63, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 98, 102, 108, 113, 115, 116, 118, 120, 123, 125, 126, 129, 130, 131, 132, 137, 138, 141, 149, 151, 152, 154, 155, 157, 158, 159, 166, 174, 176, 178, 179, 181, 182, 186, 188, 191, 276, 293, 299, 308, 312, 331, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 346, 350, 357, 362, 364, 365, 367, 368, 373, 375, 376, 378, 380, 381, 382, 387, 388, 391, 399, 401, 402, 404, 405, 406, 407, 408, 416, 424, 425, 427, 429, 431, 432, 436, 438, 441], "64": [28, 44, 50, 90, 138, 146, 276, 293, 299, 338, 388, 395, 506], "coeffici": [28, 50, 137, 138, 276, 299, 387, 388], "5": [28, 44, 50, 63, 70, 78, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 125, 129, 130, 133, 136, 138, 143, 144, 149, 155, 162, 170, 171, 172, 191, 196, 202, 215, 220, 228, 234, 243, 244, 245, 246, 276, 293, 299, 312, 319, 327, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 373, 375, 378, 380, 383, 386, 388, 393, 394, 399, 411, 420, 421, 422, 441, 445, 452, 465, 470, 478, 485, 493, 495, 496, 497, 502, 505, 506, 512], "enableoutputlog": [28, 44, 50, 138, 145, 147, 276, 293, 299, 388, 396], "stdout": [28, 44, 50, 138, 147, 276, 293, 299, 388, 396], "addit": [28, 44, 50, 83, 84, 92, 93, 120, 137, 138, 143, 147, 151, 158, 162, 173, 188, 228, 276, 293, 299, 331, 333, 337, 340, 341, 368, 387, 388, 393, 396, 401, 407, 411, 423, 438, 478, 505, 506], "evaluationlogextend": [28, 44, 50, 138, 145, 147, 276, 293, 299, 388, 396], "valid": [28, 44, 50, 129, 138, 147, 152, 178, 276, 293, 299, 378, 388, 396, 402, 427, 502], "displai": [28, 44, 50, 147, 162, 228, 276, 293, 299, 396, 411, 478, 502], "lr": [28, 44, 50, 134, 138, 145, 146, 191, 276, 293, 299, 388, 395, 441], "rate": [28, 44, 50, 71, 81, 99, 108, 109, 114, 115, 138, 146, 157, 158, 176, 178, 215, 276, 293, 299, 320, 330, 347, 357, 358, 363, 364, 388, 395, 406, 407, 425, 427, 465], "005": [28, 50, 138, 146, 276, 299, 388, 395], "maxepoch": [28, 44, 50, 134, 135, 137, 138, 145, 146, 276, 293, 299, 385, 387, 388, 395], "epoch": [28, 44, 50, 135, 137, 138, 146, 147, 152, 177, 178, 228, 276, 293, 299, 385, 387, 388, 395, 396, 402, 427, 478], "30": [28, 50, 123, 129, 130, 136, 146, 166, 202, 220, 234, 246, 276, 299, 308, 373, 378, 380, 386, 395, 416, 452, 470, 485, 497, 505], "outputlogspath": [28, 44, 50, 138, 145, 147, 150, 152, 276, 293, 299, 388, 396, 402], "randomse": [28, 44, 50, 134, 135, 137, 138, 145, 146, 276, 293, 299, 385, 387, 388, 395], "random": [28, 44, 50, 99, 114, 135, 137, 138, 143, 146, 166, 176, 196, 276, 293, 299, 347, 363, 385, 387, 388, 393, 395, 416, 425, 445], "seed": [28, 44, 50, 89, 99, 114, 135, 137, 138, 146, 157, 158, 166, 208, 215, 276, 293, 299, 347, 363, 385, 387, 388, 395, 406, 407, 416, 465], "shuffl": [28, 44, 135, 146, 159, 276, 293, 385, 395, 408], "testdataset": [28, 44, 50, 138, 145, 147, 228, 276, 293, 299, 388, 396, 478, 502], "statist": [28, 44, 50, 115, 123, 138, 147, 276, 293, 299, 364, 373, 388, 396], "validationsplit": [28, 44, 50, 138, 145, 147, 150, 152, 276, 293, 299, 388, 396, 402], "choos": [28, 44, 50, 96, 110, 138, 143, 147, 152, 179, 215, 276, 293, 299, 344, 359, 388, 393, 402, 429], "proport": [28, 44, 50, 138, 147, 152, 155, 276, 293, 299, 388, 396, 402], "against": [28, 44, 50, 120, 123, 128, 132, 138, 147, 152, 170, 171, 205, 276, 293, 299, 368, 373, 377, 382, 388, 396, 402, 420, 421, 455], "between": [28, 44, 50, 71, 78, 83, 84, 85, 87, 101, 105, 108, 109, 113, 116, 117, 118, 121, 138, 143, 147, 151, 152, 165, 167, 168, 178, 215, 231, 276, 293, 299, 320, 327, 331, 333, 334, 336, 349, 354, 357, 358, 362, 365, 366, 367, 370, 388, 393, 396, 401, 402, 415, 417, 418, 427, 465], "off": [28, 44, 50, 113, 116, 117, 138, 147, 152, 169, 276, 293, 299, 362, 365, 366, 388, 396, 402, 419], "verbos": [28, 44, 50, 134, 137, 138, 145, 147, 276, 293, 299, 387, 388, 396], "accept": [28, 44, 50, 77, 143, 230, 232, 276, 293, 299, 326, 393, 481, 483], "singl": [28, 44, 50, 71, 100, 101, 103, 115, 121, 123, 159, 165, 176, 185, 186, 188, 204, 215, 231, 239, 242, 276, 293, 299, 320, 337, 348, 349, 352, 364, 370, 373, 408, 415, 425, 434, 436, 438, 454, 465, 482, 490, 492], "item": [28, 50, 115, 143, 204, 228, 242, 276, 299, 364, 393, 454, 478, 492, 502], "doubl": [28, 50, 154, 193, 206, 276, 299, 442, 456], "In": [28, 44, 50, 67, 80, 87, 95, 97, 98, 104, 105, 107, 115, 118, 120, 123, 125, 126, 128, 131, 132, 151, 152, 154, 158, 159, 162, 163, 165, 167, 168, 170, 172, 173, 174, 179, 180, 191, 228, 232, 244, 276, 293, 299, 315, 329, 336, 343, 345, 346, 353, 354, 356, 364, 367, 368, 373, 375, 376, 377, 381, 382, 401, 402, 404, 407, 408, 411, 413, 415, 417, 418, 420, 422, 423, 424, 429, 430, 441, 478, 495, 502, 506, 507, 511, 512], "csv": [28, 50, 120, 147, 206, 276, 299, 368, 396, 456, 506], "best": [28, 50, 90, 95, 100, 103, 108, 109, 123, 125, 138, 143, 159, 161, 165, 173, 204, 276, 299, 338, 343, 348, 352, 357, 358, 373, 375, 388, 393, 408, 410, 415, 423, 454, 506], "wach": [28, 276, 506], "ever": [28, 50, 86, 276, 299, 335, 506], "opinion": [28, 50, 276, 299, 506], "win": [28, 50, 276, 299, 506], "award": [28, 50, 276, 299, 506], "terribl": [28, 50, 276, 299, 506], "act": [28, 50, 211, 276, 299, 506], "bad": [28, 50, 154, 228, 276, 299, 404, 478, 502, 506], "realli": [28, 50, 143, 155, 276, 299, 393, 405, 506], "Then": [28, 44, 137, 138, 165, 168, 207, 228, 250, 276, 293, 387, 388, 415, 418, 457, 478, 506], "trane": [28, 276], "smallcorpu": [28, 50, 276, 299, 506], "header": [28, 50, 51, 204, 206, 230, 231, 232, 240, 276, 299, 300, 454, 456, 481, 482, 483, 491, 506], "src": [28, 50, 66, 67, 78, 79, 80, 83, 84, 115, 126, 128, 131, 132, 137, 138, 149, 158, 167, 179, 180, 185, 191, 242, 243, 244, 245, 246, 276, 299, 314, 315, 327, 328, 329, 331, 333, 364, 376, 377, 381, 382, 387, 388, 399, 407, 417, 429, 430, 434, 441, 492, 493, 495, 496, 497, 506, 512], "useembed": [28, 44, 50, 113, 276, 293, 299, 362, 506], "docclassifi": [28, 44, 50, 276, 293, 299, 506], "setbatchs": [28, 44, 50, 64, 68, 89, 91, 102, 134, 138, 145, 146, 157, 158, 177, 178, 208, 215, 228, 276, 293, 299, 316, 339, 350, 388, 395, 406, 407, 427, 465, 478, 502, 506], "setmaxepoch": [28, 44, 50, 134, 135, 137, 138, 145, 146, 228, 276, 293, 299, 385, 387, 388, 395, 478, 502, 506], "20": [28, 42, 51, 67, 69, 77, 85, 118, 136, 157, 159, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 202, 206, 220, 234, 276, 291, 300, 315, 317, 326, 334, 367, 386, 406, 408, 410, 411, 413, 415, 417, 418, 419, 420, 421, 422, 423, 452, 456, 470, 485, 506], "setlr": [28, 44, 50, 134, 138, 145, 146, 228, 276, 293, 299, 388, 395, 478, 502, 506], "5e": [28, 50, 276, 299, 506], "pipelinemodel": [28, 42, 44, 50, 83, 84, 86, 99, 114, 137, 138, 155, 178, 179, 180, 191, 202, 205, 228, 232, 235, 276, 291, 293, 299, 331, 333, 335, 347, 363, 387, 388, 405, 427, 429, 430, 441, 452, 455, 478, 483, 486, 506, 509], "v": [28, 44, 50, 81, 97, 101, 105, 115, 123, 125, 128, 138, 146, 147, 161, 180, 215, 220, 276, 293, 299, 330, 345, 349, 354, 364, 373, 375, 377, 388, 395, 396, 410, 430, 465, 470], "your": [28, 44, 50, 83, 87, 91, 98, 99, 108, 110, 114, 126, 128, 131, 132, 136, 137, 138, 141, 143, 144, 149, 154, 155, 157, 158, 178, 179, 185, 186, 191, 196, 232, 250, 251, 276, 293, 299, 331, 336, 339, 346, 347, 357, 359, 363, 376, 377, 381, 382, 386, 387, 388, 391, 393, 394, 399, 404, 405, 406, 407, 427, 429, 434, 436, 441, 445, 483, 504, 506, 509, 510, 512], "own": [28, 44, 50, 83, 99, 114, 126, 128, 131, 132, 137, 138, 141, 149, 154, 155, 178, 179, 185, 186, 191, 251, 276, 293, 299, 331, 337, 347, 363, 376, 377, 381, 382, 387, 388, 391, 399, 404, 405, 427, 429, 434, 436, 441, 509, 510, 512], "classifierdl_use_trec6": [28, 276, 506], "trec": [28, 276], "sarcasmdl": [28, 276, 506], "classifierdl_use_sarcasm": [28, 276, 506], "sarcasm": [28, 276, 506], "m": [28, 87, 129, 130, 160, 240, 246, 276, 336, 378, 380, 409, 491, 497, 506], "readi": [28, 234, 250, 276, 485, 506], "could": [28, 98, 123, 131, 147, 178, 276, 346, 373, 381, 396, 427, 505, 506, 507], "put": [28, 204, 220, 276, 454, 470, 506], "word": [28, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 90, 96, 97, 99, 101, 102, 108, 110, 113, 114, 115, 118, 120, 121, 123, 126, 133, 136, 139, 140, 141, 149, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 186, 188, 190, 191, 202, 220, 230, 231, 232, 234, 240, 244, 245, 248, 276, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 331, 333, 338, 344, 345, 347, 349, 350, 357, 359, 362, 363, 364, 367, 368, 370, 373, 376, 383, 386, 389, 390, 391, 399, 404, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 431, 432, 436, 438, 440, 441, 452, 470, 481, 483, 485, 491, 495, 496, 505, 506], "wake": [28, 276, 506], "am": [28, 85, 129, 130, 157, 161, 162, 163, 164, 169, 170, 171, 172, 185, 276, 334, 378, 380, 406, 410, 411, 413, 414, 419, 420, 421, 422, 434, 506], "mondai": [28, 276, 506], "arrays_zip": [28, 83, 84, 123, 276, 331, 333, 373, 506], "out": [28, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 94, 100, 107, 123, 126, 141, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 181, 182, 276, 317, 319, 320, 321, 322, 323, 324, 325, 326, 339, 342, 348, 356, 373, 376, 391, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 431, 432, 506], "deberta": [29, 30, 31, 32, 97, 277, 278, 279, 280, 345], "deberta_v3_xsmall_qa_squad2": [29, 277], "v2": [30, 31, 92, 93, 97, 173, 278, 279, 340, 341, 345, 423], "v3": [30, 31, 278, 279], "deberta_v3_xsmall_sequence_classifier_imdb": [30, 278], "deberta_base_sequence_classifier_imdb": [30, 278], "deberta_v3_xsmall_token_classifier_conll03": [31, 279], "deberta_base_zero_shot_classifier_mnli_anli_v3": [32, 280], "distilbert": [33, 34, 36, 37, 98, 281, 282, 284, 285, 346], "distilbert_base_cased_qa_squad2": [33, 281], "distilbert_base_sequence_classifier_imdb": [34, 282], "distilbert_base_token_classifier_conll03": [35, 283], "distilbert_base_zero_shot_classifier_uncased_mnli": [36, 284], "distilbert_base_uncased_multiple_choic": [37, 285], "longform": [38, 39, 40, 104, 287, 288, 289, 353], "longformer_base_base_qa_squad2": [38, 287], "longformer_base_sequence_classifier_imdb": [39, 288], "4096": [39, 69, 70, 90, 104, 158, 215, 288, 317, 319, 338, 353, 407, 465], "xlnet_base_token_classifier_conll03": [40, 58, 289, 307], "longformer_base_token_classifier_conll03": [40, 289], "mpnet": [41, 42, 105, 290, 291, 354], "mpnet_base_question_answering_squad2": [41, 290], "mpnet_sequence_classifier_ukr_messag": [42, 291], "drive": [42, 291], "car": [42, 291], "bu": [42, 291], "arriv": [42, 291], "minut": [42, 44, 291, 293], "pineappl": [42, 291], "pizza": [42, 291], "worst": [42, 291], "transport": [42, 291], "movement": [42, 291], "food": [42, 143, 144, 158, 291, 393, 394, 407], "mpnet_base_sequence_classifier_imdb": [42, 291], "xlm": [43, 52, 53, 54, 55, 116, 117, 292, 301, 302, 303, 304, 365, 366], "roberta": [43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 79, 95, 97, 104, 105, 108, 109, 116, 117, 140, 159, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 328, 343, 345, 353, 354, 357, 358, 365, 366, 390, 408], "mpnet_base_token_classifi": [43, 55, 292, 304], "multiclassifierdl": [44, 293], "bidirect": [44, 92, 93, 102, 118, 159, 293, 340, 341, 350, 367, 408], "gru": [44, 293], "convolut": [44, 67, 80, 293, 315, 329], "machin": [44, 67, 85, 87, 99, 114, 123, 137, 159, 162, 165, 166, 168, 174, 228, 293, 308, 315, 334, 336, 347, 363, 373, 387, 408, 411, 415, 416, 418, 424, 478, 504], "strongli": [44, 293], "relat": [44, 83, 84, 121, 293, 331, 333, 370, 511], "variant": [44, 81, 104, 113, 171, 293, 330, 353, 362, 421], "mai": [44, 87, 91, 143, 157, 158, 163, 165, 170, 194, 215, 240, 293, 336, 337, 339, 393, 406, 407, 413, 415, 420, 443, 465, 491, 505, 506, 507, 510, 511], "multiclass": [44, 215, 293], "categor": [44, 235, 293, 486], "precis": [44, 83, 84, 87, 215, 293, 331, 333, 336, 465], "constraint": [44, 293], "mani": [44, 73, 97, 108, 109, 123, 143, 159, 161, 162, 163, 165, 166, 168, 174, 191, 293, 308, 322, 337, 345, 357, 358, 373, 393, 408, 410, 411, 413, 415, 416, 418, 424, 441], "formal": [44, 293], "find": [44, 83, 84, 107, 108, 109, 112, 113, 120, 121, 126, 129, 159, 162, 173, 293, 331, 333, 356, 357, 358, 361, 362, 368, 370, 376, 378, 408, 411, 423], "x": [44, 71, 220, 242, 250, 293, 320, 470, 492, 512], "binari": [44, 201, 208, 216, 228, 239, 240, 293, 450, 466, 478, 490, 491], "y": [44, 87, 250, 293, 336], "multiclassifi": [44, 228, 293, 478, 502], "001": [44, 81, 137, 138, 293, 330, 387, 388], "10": [44, 63, 68, 83, 87, 94, 123, 129, 130, 139, 143, 160, 165, 176, 179, 228, 246, 293, 312, 316, 331, 336, 342, 373, 378, 380, 389, 393, 409, 415, 425, 429, 478, 497, 505], "44": [44, 99, 114, 149, 168, 293, 347, 363, 399, 418], "ed58abb40640f983": [44, 293], "pn": [44, 293], "newsyou": [44, 293], "toxic": [44, 168, 170, 293, 418, 420], "a1237f726b5f5d89": [44, 293], "dude": [44, 293], "place": [44, 80, 158, 204, 293, 329, 337, 407, 454], "obscen": [44, 293], "insult": [44, 293], "24b0d6c8733c2abe": [44, 293], "thank": [44, 118, 123, 160, 246, 293, 367, 373, 409, 497], "8c4478fb239bcfc0": [44, 293], "gee": [44, 293], "traindataset": [44, 228, 293, 478, 502], "printschema": [44, 193, 195, 201, 203, 230, 239, 240, 293, 442, 444, 450, 453, 481, 490, 491], "root": [44, 63, 83, 84, 121, 193, 195, 201, 203, 230, 239, 240, 243, 293, 312, 331, 333, 370, 442, 444, 450, 453, 481, 490, 491, 493], "setcleanupmod": [44, 192, 195, 203, 293, 444, 453], "shrink": [44, 195, 203, 293, 444, 453], "1e": [44, 228, 293, 478, 502], "setvalidationsplit": [44, 145, 147, 150, 152, 293, 396, 402], "multiclassifierdl_use_tox": [44, 293], "comment": [44, 123, 293, 373], "jigsaw": [44, 293], "good": [44, 95, 98, 113, 155, 293, 343, 346, 362, 405], "stuff": [44, 293], "wtf": [44, 293], "kind": [44, 123, 129, 130, 293, 373, 378, 380], "crap": [44, 293], "roberta_base_uncased_multiple_choic": [45, 294], "roberta_base_qa_squad2": [46, 140, 295, 390], "roberta_base_sequence_classifier_imdb": [47, 296], "roberta_base_token_classifier_conll03": [48, 297], "roberta_base_zero_shot_classifier_nli": [49, 298], "sentimentdl": [50, 299], "affect": [50, 188, 215, 299, 438, 465], "subject": [50, 83, 84, 299, 331, 333], "view": [50, 299], "product": [50, 169, 299, 419], "review": [50, 143, 224, 299, 393, 474], "tweet": [50, 299], "interpret": [50, 85, 120, 172, 218, 299, 334, 368, 422, 468], "posit": [50, 97, 98, 105, 111, 116, 117, 118, 123, 136, 143, 154, 155, 158, 176, 187, 191, 207, 215, 228, 299, 345, 346, 354, 360, 365, 366, 367, 373, 386, 393, 404, 405, 407, 425, 437, 441, 457, 465, 478, 502], "final": [50, 85, 104, 108, 109, 116, 117, 125, 138, 165, 178, 299, 334, 353, 357, 358, 365, 366, 375, 388, 415, 427, 506], "otheriws": [50, 125, 299, 375], "neutral": [50, 125, 299, 375], "score": [50, 92, 93, 116, 117, 123, 125, 137, 138, 140, 154, 155, 162, 299, 340, 341, 365, 366, 373, 375, 387, 388, 390, 404, 405, 411], "less": [50, 98, 125, 129, 133, 137, 166, 170, 179, 299, 346, 375, 378, 383, 387, 416, 420, 429], "watch": [50, 155, 161, 299, 405, 410], "32": [50, 90, 91, 102, 157, 158, 215, 246, 299, 338, 339, 350, 406, 407, 465, 497, 505, 511], "p": [50, 86, 99, 114, 125, 138, 147, 157, 158, 186, 215, 299, 335, 347, 363, 375, 388, 396, 406, 407, 436, 465], "sentimentdl_use_imdb": [50, 299], "imdb": [50, 299], "sentimentdl_use_twitt": [50, 299], "wow": [50, 299], "video": [50, 123, 299, 373], "awesom": [50, 299], "bruh": [50, 299], "damn": [50, 299], "wast": [50, 155, 299, 405], "implement": [51, 99, 114, 116, 140, 152, 178, 199, 200, 300, 309, 337, 347, 363, 365, 390, 402, 425, 427, 448, 449, 458, 459, 467, 473, 477], "tapa": [51, 300], "design": [51, 67, 77, 78, 81, 92, 93, 108, 109, 112, 128, 159, 164, 166, 169, 173, 228, 300, 308, 315, 326, 327, 330, 340, 341, 357, 358, 361, 377, 408, 414, 416, 419, 423, 478, 502], "about": [51, 65, 72, 73, 77, 83, 84, 108, 109, 111, 115, 123, 140, 143, 151, 161, 180, 202, 205, 248, 300, 313, 321, 322, 326, 331, 333, 357, 358, 360, 364, 373, 390, 393, 401, 410, 430, 452, 455, 499, 505, 507, 510, 511], "tabular": [51, 206, 300, 456], "tabl": [51, 176, 206, 208, 212, 230, 232, 240, 300, 425, 456, 461, 481, 491], "tri": [51, 300], "share": [51, 123, 300, 373, 507], "its": [51, 70, 80, 97, 98, 104, 118, 123, 149, 154, 158, 159, 166, 167, 169, 170, 171, 172, 173, 182, 204, 228, 244, 300, 308, 319, 329, 345, 346, 353, 367, 373, 399, 404, 407, 408, 416, 417, 419, 420, 421, 422, 423, 432, 454, 478, 495], "table_qa_tapas_base_finetuned_wtq": [51, 300], "table_json": [51, 300], "document_t": [51, 206, 300, 456], "stage": [51, 111, 176, 202, 205, 228, 232, 239, 300, 360, 425, 452, 455, 478, 483, 490, 502, 506, 507, 510], "json_data": [51, 300], "monei": [51, 206, 300, 456], "ag": [51, 94, 100, 107, 206, 300, 342, 348, 356, 456], "donald": [51, 206, 300, 456], "trump": [51, 206, 300, 456], "75": [51, 123, 171, 206, 300, 373, 421, 456], "elon": [51, 206, 300, 456], "musk": [51, 206, 300, 456], "55": [51, 139, 206, 246, 300, 389, 456, 497], "AS": [51, 63, 140, 300, 312, 390], "who": [51, 85, 87, 164, 186, 300, 334, 336, 414, 436, 506], "earn": [51, 300], "count": [51, 143, 172, 178, 231, 300, 393, 422, 427], "old": [51, 63, 244, 300, 312, 495], "xlm_roberta_base_qa_squad2": [52, 53, 301, 302], "xlm_roberta_base_mc": [52, 301], "xlm_roberta_base_sequence_classifier_imdb": [54, 303], "xlm_roberta_large_zero_shot_classifier_xnli_anli": [56, 305], "xlmroberta": [56, 305], "xlnet": [57, 58, 105, 118, 306, 307, 354, 367], "xlnet_base_sequence_classifier_imdb": [57, 306], "bullet": [59, 60, 61, 240, 308, 491], "cleanpostfixpattern": [59, 60, 308], "cleanprefixpattern": [59, 60, 308], "cleanermod": [59, 60, 308], "dash": [59, 60, 308], "extrawhitespac": [59, 60, 308], "ignorecas": [59, 60, 308], "setbullet": [59, 60, 308], "setcleanpostfixpattern": [59, 60, 308], "setcleanprefixpattern": [59, 60, 308], "setcleanermod": [59, 60, 308], "setdash": [59, 60, 308], "setextrawhitespac": [59, 60, 308], "setignorecas": [59, 60, 308], "setstrip": [59, 60, 308], "settrailingpunctu": [59, 60, 308], "strip": [59, 60, 308], "trailingpunctu": [59, 60, 308], "emailaddress": [59, 61, 309], "emaildatetimetzpattern": [59, 61, 309], "extractormod": [59, 61, 309], "imageurlpattern": [59, 61, 309], "ipaddressnamepattern": [59, 61, 309], "ipaddresspattern": [59, 61, 309], "mapiidpattern": [59, 61, 309], "setemailaddress": [59, 61, 309], "setemaildatetimetzpattern": [59, 61, 309], "setextractormod": [59, 61, 309], "setimageurlpattern": [59, 61, 309], "setindex": [59, 61, 309], "setipaddressnamepattern": [59, 61, 309], "setipaddresspattern": [59, 61, 309], "setmapiidpattern": [59, 61, 309], "settextpattern": [59, 61, 309], "setusphonenumberspattern": [59, 61, 309], "textpattern": [59, 61, 309], "usphonenumberspattern": [59, 61, 309], "handl": [60, 69, 70, 159, 167, 218, 241, 308, 317, 319, 408, 417, 468, 494], "postfix": [60, 308], "regex": [60, 85, 86, 120, 129, 131, 141, 178, 179, 180, 187, 188, 191, 230, 231, 308, 334, 335, 368, 371, 378, 381, 391, 427, 429, 430, 437, 438, 441, 481], "prefix": [60, 136, 157, 158, 184, 186, 188, 215, 228, 308, 386, 406, 407, 436, 438, 465, 478, 502], "clean": [60, 86, 141, 159, 174, 207, 308, 335, 391, 408, 424, 457, 507], "bytes_string_to_str": [60, 308], "clean_non_ascii_char": [60, 308], "clean_ordered_bullet": [60, 308], "clean_postfix": [60, 308], "clean_prefix": [60, 308], "remove_punctu": [60, 308], "replace_unicode_quot": [60, 308], "utf": [60, 86, 308, 335], "remov": [60, 86, 108, 109, 141, 155, 187, 196, 197, 198, 248, 308, 335, 357, 358, 391, 405, 437, 445, 446, 447], "extra": [60, 178, 179, 204, 308, 427, 429, 454, 506], "whitespac": [60, 85, 87, 187, 191, 194, 308, 334, 336, 437, 441, 443], "oper": [60, 98, 104, 178, 186, 308, 346, 353, 427, 436, 505], "lead": [60, 90, 95, 106, 111, 112, 116, 117, 164, 308, 338, 343, 355, 360, 361, 365, 366, 414], "trail": [60, 308], "punctuat": [60, 141, 151, 308, 391, 401], "specifi": [61, 67, 91, 139, 140, 143, 152, 157, 158, 176, 215, 242, 243, 309, 315, 337, 339, 389, 390, 393, 402, 406, 407, 465, 492, 493], "email": [61, 230, 232, 237, 240, 309, 481, 483, 491], "timestamp": [61, 239, 309, 490], "includ": [61, 70, 78, 86, 92, 93, 94, 99, 102, 112, 114, 116, 117, 118, 121, 123, 129, 136, 137, 138, 143, 159, 160, 162, 163, 169, 171, 172, 173, 174, 176, 178, 197, 201, 218, 228, 230, 231, 232, 239, 245, 250, 309, 319, 327, 335, 337, 340, 341, 342, 347, 350, 361, 363, 365, 366, 367, 370, 373, 378, 386, 387, 388, 393, 408, 409, 411, 413, 419, 421, 422, 423, 424, 425, 427, 446, 450, 468, 478, 481, 482, 483, 490, 496, 503, 505, 506, 507, 512], "zone": [61, 112, 309, 361], "email_d": 61, "email_address": 61, "ip_address": 61, "ip_address_nam": 61, "mapi_id": 61, "us_phone_numb": 61, "image_url": 61, "text_aft": 61, "text_befor": 61, "url": [61, 103, 230, 231, 232, 240, 309, 352, 481, 483, 491], "after": [61, 81, 83, 84, 99, 108, 109, 113, 114, 129, 130, 136, 143, 161, 167, 186, 207, 228, 231, 250, 309, 330, 331, 333, 347, 357, 358, 363, 378, 380, 386, 393, 410, 417, 436, 457, 478, 505, 506], "befor": [61, 86, 115, 129, 130, 159, 174, 179, 187, 191, 250, 309, 335, 337, 364, 378, 380, 408, 424, 425, 429, 437, 441, 459, 477, 502], "ip": [61, 309], "mapi": [61, 309], "u": [61, 83, 84, 97, 98, 123, 130, 136, 137, 138, 202, 220, 234, 243, 309, 331, 333, 345, 346, 373, 380, 386, 387, 388, 452, 470, 485, 493, 504, 507, 512], "phone": [61, 123, 171, 309, 373, 421], "maxsegmentlength": [62, 63, 312], "setmaxsegmentlength": [62, 63, 312], "settextgenr": [62, 63, 312], "textgenr": [62, 63, 312], "corefer": [63, 312], "resolut": [63, 78, 312, 327], "spanbert": [63, 312], "identifi": [63, 115, 123, 128, 131, 143, 144, 173, 187, 188, 219, 228, 230, 312, 364, 373, 377, 381, 393, 394, 423, 437, 438, 469, 478, 481, 507], "given": [63, 67, 78, 79, 80, 85, 87, 103, 120, 123, 140, 157, 158, 159, 162, 169, 174, 178, 179, 180, 182, 201, 204, 214, 215, 226, 228, 248, 312, 315, 327, 328, 329, 334, 336, 352, 368, 373, 390, 406, 407, 408, 411, 419, 424, 427, 429, 430, 432, 450, 454, 464, 465, 477, 478, 499], "told": [63, 130, 312, 380], "mari": [63, 93, 109, 117, 152, 312, 341, 358, 366, 402], "he": [63, 85, 87, 97, 130, 186, 246, 312, 334, 336, 345, 380, 436, 497], "borrow": [63, 312], "book": [63, 86, 162, 178, 243, 312, 335, 411, 427, 493], "her": [63, 140, 312, 390], "link": [63, 234, 312, 485], "ontonot": [63, 312], "corefresolut": [63, 312], "spanbert_base_coref": [63, 312], "genr": [63, 312], "One": [63, 103, 123, 158, 186, 189, 312, 352, 373, 407, 436, 439], "bc": [63, 312], "broadcast": [63, 312], "convers": [63, 312], "bn": [63, 312], "nw": [63, 312], "wire": [63, 312], "pt": [63, 312], "pivot": [63, 112, 312, 361], "testament": [63, 312], "tc": [63, 312], "telephon": [63, 312], "wb": [63, 312], "mz": 63, "getcandidatelabel": [64, 66, 314], "croppct": [64, 67, 315], "dorescal": [64, 67, 78, 79, 208, 215, 315, 327, 328, 465], "rescalefactor": [64, 67, 78, 79, 208, 215, 315, 327, 328, 465], "setcroppct": [64, 67, 315], "setdorescal": [64, 67, 208, 215, 315, 465], "setrescalefactor": [64, 67, 208, 215, 315, 465], "ignoretokenid": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "setbeams": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 159, 160, 164, 165, 168, 208, 215, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 414, 415, 418, 465], "setdosampl": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "setignoretokenid": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "setmaxoutputlength": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "setminoutputlength": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 156, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 465], "setnorepeatngrams": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "setrepetitionpenalti": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "settemperatur": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 142, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 393, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "settopk": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "settopp": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 142, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 215, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 393, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "maxinputlength": [64, 69, 156, 166, 308, 317, 416], "imagegeneratemod": [64, 71, 320], "numofparallelimag": [64, 71, 320], "setimagegeneratemod": [64, 71, 320], "setnumofparallelimag": [64, 71, 320], "doimagesplit": [64, 77, 326], "imagetoken": [64, 77, 326], "maximages": [64, 77, 326], "numvisiontoken": [64, 77, 326], "paddingconst": [64, 77, 326], "patchsiz": [64, 77, 326], "setdoimagesplit": [64, 77, 326], "setimagetoken": [64, 77, 326], "setmaximages": [64, 77, 326], "setnumvisiontoken": [64, 77, 326], "setpaddingconst": [64, 77, 326], "setpatchs": [64, 77, 326], "setstoptokenid": [64, 77, 156, 160, 164, 326, 409, 414], "stoptokenid": [64, 77, 156, 160, 164, 326, 409, 414], "blip": [65, 313], "visual": [65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 228, 313, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 478], "vision": [65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 171, 313, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 421], "togeth": [65, 72, 75, 77, 103, 158, 313, 321, 324, 326, 352, 407], "visualqaclassifi": [65, 71, 72, 73, 74, 75, 76, 77, 313, 320, 321, 322, 323, 324, 325, 326], "blip_vqa_bas": [65, 313], "50": [65, 68, 69, 71, 72, 73, 74, 75, 76, 138, 139, 149, 159, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 246, 313, 316, 317, 320, 321, 322, 323, 324, 325, 388, 389, 399, 408, 410, 411, 413, 415, 417, 418, 419, 420, 421, 422, 423, 497], "image_df": [65, 68, 70, 71, 72, 73, 74, 75, 76, 101, 313, 316, 319, 320, 321, 322, 323, 324, 325, 349], "sparksessionfortest": [65, 71, 72, 73, 74, 75, 76, 313, 320, 321, 322, 323, 324, 325], "images_path": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326], "test_df": [65, 68, 70, 71, 72, 73, 74, 75, 76, 101, 313, 316, 319, 320, 321, 322, 323, 324, 325, 349], "withcolumn": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 101, 158, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 349, 407], "lit": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 101, 158, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 349, 407], "pictur": [65, 71, 72, 73, 75, 77, 313, 320, 321, 322, 324, 326], "setsiz": [65, 208, 215, 313, 465], "384": [65, 71, 77, 313, 320, 326], "cat_imag": [65, 71, 72, 73, 75, 76, 77, 313, 320, 321, 322, 324, 325, 326], "jpg": [65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 158, 313, 314, 315, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 407], "cat": [65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 101, 158, 313, 314, 315, 320, 321, 322, 324, 325, 326, 327, 328, 329, 349, 407], "abov": [65, 101, 115, 121, 244, 349, 364, 370, 495], "skip": [65, 99, 114, 121, 178, 347, 363, 370, 427], "blip_vqa_tf": [65, 313], "clip": [66, 158, 314, 407], "contrast": [66, 100, 103, 104, 107, 128, 174, 314, 348, 352, 353, 356, 377, 424], "neural": [66, 80, 92, 93, 97, 138, 152, 159, 166, 308, 314, 329, 340, 341, 345, 388, 402, 408, 416], "network": [66, 80, 92, 93, 102, 138, 152, 314, 329, 340, 341, 350, 388, 402], "abil": [66, 112, 123, 159, 161, 162, 167, 314, 361, 373, 408, 410, 411, 417], "hard": [66, 111, 181, 314, 360, 431], "make": [66, 67, 77, 78, 86, 91, 95, 104, 105, 116, 117, 123, 143, 144, 152, 155, 157, 158, 159, 164, 167, 173, 179, 250, 314, 315, 326, 327, 335, 339, 343, 353, 354, 365, 366, 373, 393, 394, 402, 405, 406, 407, 408, 414, 417, 423, 429, 508, 512], "veri": [66, 79, 80, 95, 102, 116, 117, 118, 155, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 202, 308, 314, 328, 329, 343, 350, 365, 366, 367, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 452, 505, 507, 510, 511], "gpt": [66, 108, 143, 159, 162, 171, 314, 357, 393, 408, 411, 421], "imageclassifi": [66, 67, 78, 79, 80, 314, 315, 327, 328, 329], "zero_shot_classifier_clip_vit_base_patch32": [66, 314], "huggingfac": [66, 67, 71, 73, 76, 77, 78, 79, 80, 95, 101, 170, 171, 314, 315, 320, 322, 325, 326, 327, 328, 329, 343, 349, 420, 421], "librari": [66, 67, 71, 73, 76, 77, 78, 79, 80, 91, 125, 157, 158, 194, 195, 196, 203, 207, 251, 314, 315, 320, 322, 325, 326, 327, 328, 329, 339, 375, 406, 407, 443, 444, 445, 453, 457, 511], "clipforzeroshotclassificationtestspec": [66, 314], "candidatelabel": [66, 208, 215, 314, 465], "imagedf": [66, 67, 69, 77, 78, 79, 80, 314, 315, 317, 326, 327, 328, 329], "dropinvalid": [66, 67, 78, 79, 80, 314, 315, 327, 328, 329], "photo": [66, 314], "bird": [66, 79, 158, 314, 328, 407], "dog": [66, 74, 79, 158, 314, 323, 328, 407], "hen": [66, 67, 78, 79, 80, 158, 314, 315, 327, 328, 329, 407], "hippo": [66, 67, 78, 80, 158, 314, 315, 327, 329, 407], "room": [66, 79, 158, 204, 314, 328, 407, 454], "tractor": [66, 67, 78, 79, 80, 158, 314, 315, 327, 328, 329, 407], "ostrich": [66, 67, 78, 79, 80, 158, 314, 315, 327, 328, 329, 407], "ox": [66, 67, 78, 79, 80, 158, 314, 315, 327, 328, 329, 407], "pipelinedf": [66, 67, 78, 79, 80, 314, 315, 327, 328, 329], "revers": [66, 67, 78, 79, 80, 158, 314, 315, 327, 328, 329, 407], "image_nam": [66, 67, 78, 79, 80, 158, 314, 315, 327, 328, 329, 407], "palac": [66, 67, 78, 79, 80, 158, 314, 315, 327, 328, 329, 407], "jpeg": [66, 67, 78, 79, 80, 158, 201, 314, 315, 327, 328, 329, 407, 450], "egyptian_cat": [66, 67, 78, 79, 80, 158, 314, 315, 327, 328, 329, 407], "hippopotamu": [66, 67, 78, 79, 80, 158, 314, 315, 327, 328, 329, 407], "junco": [66, 67, 78, 79, 80, 158, 314, 315, 327, 328, 329, 407], "bluetick": [66, 67, 74, 78, 79, 80, 158, 314, 315, 323, 327, 328, 329, 407], "chihuahua": [66, 67, 78, 79, 80, 158, 314, 315, 327, 328, 329, 407], "image_classifier_vit_base_patch16_224": [66, 80, 314, 329], "convnet": [67, 315], "convnext": [67, 315], "2020": [67, 123, 129, 130, 152, 315, 373, 378, 380, 402], "zhuang": [67, 315], "liu": [67, 78, 97, 108, 109, 315, 327, 345, 357, 358], "hanzi": [67, 315], "mao": [67, 315], "chao": [67, 315], "yuan": [67, 315], "wu": [67, 315], "christoph": [67, 315], "feichtenhof": [67, 315], "trevor": [67, 315], "darrel": [67, 315], "sain": [67, 315], "xie": [67, 315], "pure": [67, 77, 80, 166, 308, 315, 326, 329, 416], "inspir": [67, 155, 169, 179, 180, 224, 315, 405, 419, 429, 430, 474], "claim": [67, 315], "outperform": [67, 73, 94, 100, 104, 105, 107, 112, 113, 116, 117, 118, 123, 161, 162, 163, 164, 167, 170, 173, 315, 322, 342, 348, 353, 354, 356, 361, 362, 365, 366, 367, 373, 410, 411, 413, 414, 417, 420, 423], "convnextforimageclassificationtestspec": [67, 315], "roar": [67, 315], "began": [67, 315], "introduct": [67, 315], "vit": [67, 79, 80, 315, 328, 329], "quickli": [67, 143, 315, 393], "supersed": [67, 315], "vanilla": [67, 315], "hand": [67, 186, 315, 436], "face": [67, 112, 315, 361], "difficulti": [67, 315], "detect": [67, 68, 78, 113, 124, 125, 143, 144, 150, 151, 152, 230, 231, 232, 248, 315, 316, 327, 362, 374, 375, 393, 394, 400, 401, 402, 481], "semant": [67, 78, 94, 102, 103, 112, 113, 176, 191, 315, 327, 342, 350, 352, 361, 362, 425, 441], "hierarch": [67, 78, 99, 114, 315, 327, 347, 363], "swin": [67, 78, 315, 327], "reintroduc": [67, 315], "sever": [67, 158, 173, 230, 315, 407, 423, 481, 512], "practic": [67, 95, 159, 167, 174, 315, 343, 408, 417, 424], "viabl": [67, 315], "backbon": [67, 78, 118, 315, 327, 367], "demonstr": [67, 78, 98, 101, 104, 112, 123, 162, 164, 165, 166, 172, 308, 315, 327, 346, 349, 353, 361, 373, 411, 414, 415, 416, 422], "remark": [67, 164, 315, 414], "wide": [67, 86, 92, 93, 97, 98, 100, 116, 117, 159, 163, 173, 315, 335, 340, 341, 345, 346, 348, 365, 366, 408, 413, 423], "varieti": [67, 68, 104, 105, 116, 117, 160, 315, 316, 353, 354, 365, 366, 409, 511], "howev": [67, 90, 105, 110, 112, 118, 123, 141, 163, 165, 168, 235, 315, 338, 354, 359, 361, 367, 373, 391, 413, 415, 418, 486, 505], "effect": [67, 78, 79, 80, 104, 112, 143, 151, 159, 165, 167, 168, 174, 215, 315, 327, 328, 329, 353, 361, 393, 401, 408, 415, 417, 418, 424, 465], "hybrid": [67, 315], "still": [67, 162, 228, 315, 411, 478], "credit": [67, 315], "superior": [67, 164, 167, 172, 315, 414, 417, 422], "inher": [67, 315], "induct": [67, 98, 315, 346], "bias": [67, 98, 169, 170, 315, 346, 419, 420], "reexamin": [67, 315], "space": [67, 99, 112, 114, 115, 133, 158, 176, 207, 315, 347, 361, 363, 364, 383, 407, 425, 457], "achiev": [67, 94, 97, 100, 103, 104, 105, 108, 109, 116, 117, 118, 138, 159, 161, 162, 163, 166, 168, 171, 174, 202, 308, 315, 342, 345, 348, 352, 353, 354, 357, 358, 365, 366, 367, 388, 408, 410, 411, 413, 416, 418, 421, 424, 452, 510], "gradual": [67, 315], "modern": [67, 315], "resnet": [67, 315], "toward": [67, 158, 162, 168, 315, 407, 411, 418], "discov": [67, 315, 503], "compon": [67, 80, 112, 193, 201, 315, 329, 361, 395, 396, 442, 450, 460, 465, 476, 482, 510], "contribut": [67, 163, 170, 315, 413, 420], "along": [67, 94, 121, 201, 315, 342, 370, 450], "wai": [67, 83, 84, 120, 121, 169, 170, 171, 172, 205, 234, 315, 331, 333, 368, 370, 419, 420, 421, 422, 455, 485], "outcom": [67, 315], "explor": [67, 112, 159, 165, 170, 174, 315, 361, 408, 415, 420, 424], "famili": [67, 69, 86, 94, 100, 163, 164, 171, 315, 317, 335, 342, 348, 413, 414, 421], "dub": [67, 116, 117, 315, 365, 366], "construct": [67, 99, 114, 188, 234, 315, 337, 347, 363, 438, 485, 509], "compet": [67, 315], "favor": [67, 315], "term": [67, 123, 315, 373], "scalabl": [67, 111, 315, 360], "87": [67, 78, 315, 327], "imagenet": [67, 78, 80, 315, 327, 329], "coco": [67, 78, 315, 327], "ade20k": [67, 78, 315, 327], "while": [67, 70, 71, 77, 78, 80, 90, 98, 103, 115, 123, 143, 147, 158, 162, 165, 168, 228, 315, 319, 320, 326, 327, 329, 338, 346, 352, 364, 373, 393, 396, 407, 411, 415, 418, 478, 502, 507], "maintain": [67, 70, 77, 315, 319, 326], "simplic": [67, 159, 315, 408], "effici": [67, 77, 78, 97, 99, 111, 113, 114, 164, 166, 167, 173, 308, 315, 326, 327, 345, 347, 360, 362, 363, 414, 416, 417, 423, 505], "dores": [67, 78, 79, 80, 208, 215, 315, 327, 328, 329, 465], "resiz": [67, 78, 79, 80, 215, 315, 327, 328, 329, 465], "certain": [67, 78, 79, 80, 178, 215, 315, 327, 328, 329, 427, 465], "donorm": [67, 78, 79, 80, 208, 215, 315, 327, 328, 329, 465], "deviat": [67, 78, 79, 80, 215, 315, 327, 328, 329, 465], "featureextractortyp": [67, 78, 79, 80, 208, 215, 315, 327, 328, 329, 465], "architectur": [67, 70, 71, 77, 78, 79, 80, 90, 92, 93, 97, 108, 125, 138, 152, 159, 168, 169, 172, 174, 215, 315, 319, 320, 326, 327, 328, 329, 338, 340, 341, 345, 357, 375, 388, 402, 408, 418, 419, 422, 424, 465], "featur": [67, 69, 70, 76, 78, 79, 80, 83, 99, 106, 111, 112, 114, 123, 133, 137, 147, 155, 158, 167, 176, 215, 228, 232, 315, 317, 319, 325, 327, 328, 329, 331, 347, 355, 360, 361, 363, 373, 383, 387, 396, 407, 417, 425, 465, 478, 483, 509], "imagemean": [67, 78, 79, 80, 208, 215, 315, 327, 328, 329, 465], "imagestd": [67, 78, 79, 80, 208, 215, 315, 327, 328, 329, 465], "resampl": [67, 78, 79, 80, 208, 215, 315, 327, 328, 329, 465], "pil": [67, 78, 79, 80, 215, 315, 327, 328, 329, 465], "nearest": [67, 78, 79, 80, 176, 215, 315, 327, 328, 329, 425, 465], "bilinear": [67, 78, 79, 80, 215, 315, 327, 328, 329, 465], "bicub": [67, 78, 79, 80, 215, 315, 327, 328, 329, 465], "do_res": [67, 78, 79, 80, 215, 315, 327, 328, 329, 465], "tupl": [67, 78, 79, 80, 204, 215, 226, 315, 327, 328, 329, 454, 465, 477], "rescal": [67, 78, 79, 215, 315, 327, 328, 465], "factor": [67, 78, 79, 91, 116, 117, 118, 157, 158, 159, 174, 178, 215, 315, 327, 328, 339, 365, 366, 367, 406, 407, 408, 424, 427, 465], "percentag": [67, 115, 178, 191, 315, 364, 427, 441, 462], "crop": [67, 315], "tabbi": [67, 78, 315, 327], "river": [67, 78, 80, 315, 327, 329], "hors": [67, 78, 80, 315, 327, 329], "amphibiu": [67, 78, 80, 315, 327, 329], "snowbird": [67, 78, 80, 315, 327, 329], "struthio": [67, 78, 80, 315, 327, 329], "camelu": [67, 78, 80, 315, 327, 329], "thresher": [67, 315], "thrasher": [67, 315], "thresh": [67, 315], "image_classifier_convnext_tiny_224_loc": [67, 315], "determin": [67, 116, 204, 215, 231, 315, 337, 365, 454, 465], "smaller": [67, 87, 98, 99, 111, 114, 315, 336, 346, 347, 360, 363], "224": [67, 315], "256": [67, 158, 315, 407], "edg": [67, 98, 121, 161, 164, 315, 346, 370, 410, 414], "afterward": [67, 315], "boolean": [67, 129, 215, 315, 378, 465], "255": [67, 215, 315, 465], "florenc": [68, 316], "prompt": [68, 91, 143, 157, 158, 171, 204, 215, 316, 339, 393, 406, 407, 421, 454, 465], "caption": [68, 73, 79, 158, 316, 322, 328, 407], "ocr": [68, 316], "describ": [68, 69, 71, 76, 77, 83, 84, 107, 121, 123, 166, 308, 316, 317, 320, 325, 326, 331, 333, 356, 370, 373, 416], "florence2": [68, 316], "florence2_base_ft_int4": [68, 316], "200": [68, 85, 159, 168, 174, 316, 334, 408, 418, 424], "od": [68, 316], "use_openvino": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 92, 93, 100, 101, 107, 108, 116, 160, 161, 163, 164, 165, 167, 168, 170, 171, 172, 173, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 340, 341, 348, 349, 356, 357, 365, 409, 410, 413, 414, 415, 417, 418, 420, 421, 422, 423], "gram": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 94, 99, 100, 107, 114, 123, 133, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 342, 347, 348, 356, 363, 373, 383, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "cumul": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "gemma": [69, 317], "merger": [69, 70, 74, 317, 319, 323], "merg": [69, 70, 74, 121, 128, 132, 230, 231, 317, 319, 323, 370, 377, 382, 481, 482], "lightweight": [69, 77, 171, 317, 326, 421], "open": [69, 73, 77, 107, 111, 125, 160, 161, 163, 164, 165, 169, 170, 171, 172, 173, 188, 194, 195, 196, 203, 207, 317, 322, 326, 356, 360, 375, 409, 410, 413, 414, 415, 419, 420, 421, 422, 423, 438, 443, 444, 445, 453, 457, 503], "googl": [69, 90, 92, 93, 97, 99, 102, 108, 109, 113, 114, 123, 174, 232, 243, 317, 338, 340, 341, 345, 347, 350, 357, 358, 362, 363, 373, 424, 483, 493], "research": [69, 90, 92, 93, 97, 99, 114, 160, 166, 168, 169, 170, 174, 308, 317, 338, 340, 341, 345, 347, 363, 409, 416, 418, 419, 420, 424], "technologi": [69, 123, 317, 373], "gemini": [69, 317], "128k": [69, 171, 317, 421], "window": [69, 70, 78, 79, 99, 104, 113, 114, 123, 138, 167, 172, 178, 317, 319, 327, 328, 347, 353, 363, 373, 388, 417, 422, 427], "140": [69, 125, 317, 375], "multimod": [69, 70, 71, 73, 76, 77, 101, 158, 161, 201, 249, 317, 319, 320, 322, 325, 326, 349, 407, 410, 450, 500], "both": [69, 70, 92, 93, 100, 102, 107, 113, 121, 143, 159, 164, 167, 169, 171, 172, 317, 319, 340, 341, 348, 350, 356, 362, 370, 393, 408, 414, 417, 419, 421, 422, 506, 507], "optim": [69, 70, 73, 91, 94, 99, 108, 109, 111, 112, 114, 138, 140, 152, 157, 158, 160, 163, 164, 170, 171, 215, 317, 319, 322, 339, 342, 347, 357, 358, 360, 361, 363, 388, 390, 402, 406, 407, 409, 413, 414, 420, 421, 465], "deploy": [69, 70, 317, 319], "laptop": [69, 317], "desktop": [69, 86, 317, 335], "cloud": [69, 123, 317, 373], "visualqa": [69, 70, 77, 317, 319, 326], "gemma3_4b_it_int4": [69, 317], "9": [69, 97, 116, 117, 133, 144, 157, 161, 165, 171, 317, 345, 365, 366, 383, 394, 406, 410, 415, 421, 505, 510, 511], "testdf": [69, 77, 317, 326], "bo": [69, 157, 158, 215, 317, 406, 407, 465], "start_of_turn": [69, 317], "nyou": [69, 76, 87, 204, 317, 325, 336, 454], "assist": [69, 70, 72, 73, 75, 76, 101, 160, 164, 173, 204, 220, 317, 319, 321, 322, 324, 325, 349, 409, 414, 423, 454, 470], "start_of_imag": [69, 317], "end_of_turn": [69, 317], "http": [69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 94, 95, 97, 99, 101, 102, 103, 107, 113, 114, 143, 144, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 191, 215, 230, 232, 240, 338, 342, 343, 345, 347, 349, 350, 352, 356, 362, 363, 393, 394, 408, 410, 420, 421, 422, 441, 481, 483, 491, 503], "arxiv": [69, 70, 71, 72, 73, 74, 75, 76, 77, 104, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 353, 408], "pdf": [69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 230, 232, 237, 239, 240, 481, 483, 490, 491], "1909": [69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215], "05858": [69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215], "__": [69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 196, 197, 215, 335, 408, 445, 446], "ctrl": [69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 317, 319, 320, 321, 322, 323, 324, 325, 326, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "condit": [69, 70, 71, 72, 73, 74, 75, 76, 77, 92, 93, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 215, 317, 319, 320, 321, 322, 323, 324, 325, 326, 340, 341, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 465], "control": [69, 70, 71, 72, 73, 74, 75, 76, 77, 143, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 215, 308, 317, 319, 320, 321, 322, 323, 324, 325, 326, 393, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 465], "internvl": [70, 319], "advanc": [70, 94, 125, 164, 167, 172, 173, 194, 204, 207, 319, 342, 375, 414, 417, 422, 423, 443, 454, 457], "mllm": [70, 319], "seri": [70, 161, 169, 172, 319, 410, 419, 422], "build": [70, 97, 98, 108, 109, 121, 123, 128, 162, 163, 165, 169, 170, 173, 228, 250, 319, 345, 346, 357, 358, 370, 373, 377, 411, 413, 415, 419, 420, 423, 478, 502], "core": [70, 112, 319, 361], "introduc": [70, 92, 93, 94, 98, 102, 103, 104, 105, 112, 159, 163, 164, 167, 171, 172, 173, 174, 319, 340, 341, 342, 346, 350, 352, 353, 354, 361, 408, 413, 414, 417, 421, 422, 423, 424], "signific": [70, 108, 109, 116, 117, 123, 126, 163, 172, 319, 357, 358, 365, 366, 373, 376, 413, 422], "enhanc": [70, 71, 97, 155, 159, 164, 167, 170, 319, 320, 345, 405, 408, 414, 417, 420], "strategi": [70, 91, 96, 106, 110, 111, 112, 127, 129, 131, 151, 157, 158, 178, 214, 215, 231, 319, 339, 344, 355, 359, 360, 361, 378, 381, 401, 406, 407, 427, 464, 465], "int4": [70, 319], "quantiz": [70, 319], "internvl2_5_1b_int4": [70, 319], "larger": [70, 71, 73, 77, 79, 91, 94, 95, 98, 108, 109, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 176, 308, 319, 320, 322, 326, 328, 339, 342, 343, 346, 357, 358, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425], "im_start": [70, 76, 77, 319, 325, 326], "ndescrib": [70, 74, 319, 323], "im_end": [70, 76, 319, 325], "janu": [71, 320], "alongsid": [71, 73, 173, 232, 320, 322, 423], "novel": [71, 97, 105, 112, 118, 123, 159, 168, 320, 345, 354, 361, 367, 373, 408, 418], "autoregress": [71, 118, 320, 367], "unifi": [71, 159, 174, 230, 320, 408, 424, 481], "understand": [71, 92, 93, 98, 105, 116, 118, 123, 159, 164, 170, 171, 173, 174, 191, 320, 340, 341, 346, 354, 365, 367, 373, 408, 414, 420, 421, 423, 424, 441, 505], "decoupl": [71, 320], "separ": [71, 85, 87, 98, 108, 131, 133, 151, 152, 179, 188, 191, 197, 220, 231, 232, 242, 320, 334, 336, 346, 357, 381, 383, 401, 402, 429, 438, 441, 446, 470, 492, 504], "pathwai": [71, 320], "allevi": [71, 320], "conflict": [71, 320], "role": [71, 204, 320, 454], "surpass": [71, 78, 97, 107, 161, 167, 320, 327, 345, 356, 410, 417], "previou": [71, 78, 103, 105, 116, 117, 162, 164, 168, 172, 211, 320, 327, 352, 354, 365, 366, 411, 414, 418, 422, 506], "exce": [71, 108, 109, 143, 320, 357, 358, 393], "deepseek": [71, 320], "llm": [71, 73, 112, 163, 164, 170, 172, 173, 320, 322, 361, 413, 414, 420, 422, 423], "3b": [71, 173, 320, 423], "approxim": [71, 176, 320, 425], "500b": [71, 320], "emploi": [71, 87, 118, 320, 336, 367], "siglip": [71, 320], "downsampl": [71, 320], "16": [71, 90, 118, 139, 232, 244, 320, 338, 367, 389, 483, 495, 505], "janus_1_3b_int4": [71, 320], "suit": [71, 73, 76, 77, 94, 111, 320, 322, 325, 326, 342, 360], "image_placehold": [71, 320], "nassist": [71, 74, 77, 320, 323, 326], "unusu": [71, 72, 73, 75, 76, 77, 320, 321, 322, 324, 325, 326], "aspect": [71, 72, 73, 75, 77, 167, 320, 321, 322, 324, 326, 417], "presenc": [71, 72, 73, 75, 77, 157, 158, 215, 320, 321, 322, 324, 326, 406, 407, 465], "ly": [71, 72, 73, 75, 76, 77, 158, 320, 321, 322, 324, 325, 326, 407], "pink": [71, 72, 73, 75, 76, 77, 158, 320, 321, 322, 324, 325, 326, 407], "couch": [71, 72, 73, 75, 76, 77, 79, 320, 321, 322, 324, 325, 326, 328], "parallel": [71, 91, 101, 151, 152, 202, 215, 242, 320, 339, 349, 401, 402, 452, 465, 492, 510], "llava": [72, 321], "llava_1_5_7b_hf": [72, 321], "llama": [73, 91, 157, 158, 163, 164, 167, 170, 201, 204, 322, 339, 406, 407, 413, 414, 417, 420, 450, 454], "compris": [73, 143, 322, 393], "11b": [73, 322], "90b": [73, 322], "These": [73, 78, 90, 108, 109, 112, 118, 123, 137, 162, 164, 172, 204, 234, 322, 327, 338, 357, 358, 361, 367, 373, 387, 411, 414, 422, 454, 485, 504], "reason": [73, 85, 87, 143, 160, 167, 170, 171, 173, 322, 334, 336, 393, 409, 417, 420, 421, 423], "proprietari": [73, 111, 169, 172, 322, 360, 419, 422], "industri": [73, 86, 322, 335], "llama_3_2_11b_vision_instruct_int4": [73, 322], "begin_of_text": [73, 322], "start_header_id": [73, 101, 164, 204, 322, 349, 414, 454], "end_header_id": [73, 101, 164, 204, 322, 349, 414, 454], "eot_id": [73, 101, 204, 322, 349, 454], "paligemma": [74, 323], "paligemma_3b_pt_224_int4": [74, 323], "stand": [74, 79, 92, 93, 158, 167, 323, 328, 340, 341, 407, 417], "grassi": [74, 158, 323, 407], "field": [74, 79, 94, 99, 114, 115, 120, 132, 158, 169, 170, 171, 172, 248, 323, 328, 342, 347, 363, 364, 368, 382, 407, 419, 420, 421, 422, 499], "phi_3_vision_128k_instruct": [75, 324], "image_1": [75, 324], "nwhat": [75, 324], "phi3v": [75, 324], "qwen2": [76, 172, 325, 422], "integr": [76, 94, 118, 123, 142, 166, 228, 308, 325, 342, 367, 373, 392, 416, 478, 502, 504], "respons": [76, 143, 152, 163, 164, 170, 173, 325, 393, 402, 413, 414, 420, 423], "queri": [76, 94, 100, 107, 111, 163, 167, 172, 176, 325, 342, 348, 356, 360, 413, 417, 422, 425, 503], "qwen2_vl_2b_instruct_int4": [76, 325], "vision_start": [76, 325], "image_pad": [76, 325], "vision_end": [76, 325], "becaus": [76, 143, 154, 250, 309, 325, 393, 404, 425, 459, 477], "smolvlm": [77, 326], "compact": [77, 326], "arbitrari": [77, 159, 167, 326, 408, 417], "produc": [77, 326, 506], "stori": [77, 326], "ground": [77, 79, 326, 328], "Its": [77, 78, 84, 140, 159, 326, 327, 333, 390, 408], "suitabl": [77, 163, 170, 326, 413, 420], "devic": [77, 98, 326, 346], "strong": [77, 100, 101, 116, 117, 169, 170, 171, 172, 326, 348, 349, 365, 366, 419, 420, 421, 422], "smolvlm_instruct_int4": [77, 326], "49153": [77, 326], "81": [77, 244, 326, 495], "patch": [77, 80, 326, 329], "14": [77, 136, 149, 189, 202, 220, 234, 244, 326, 386, 399, 439, 452, 470, 485, 495], "pad": [77, 245, 326, 496], "constant": [77, 214, 216, 326, 464, 466], "end_of_utter": [77, 326], "openvino": [77, 92, 93, 100, 101, 108, 116, 326, 340, 341, 348, 349, 357, 365], "stop": [77, 123, 137, 142, 143, 157, 158, 160, 164, 174, 182, 215, 236, 248, 326, 373, 387, 393, 406, 407, 409, 414, 424, 432, 465, 487], "termin": [77, 326], "swinimageclassif": [78, 327], "shift": [78, 327], "ze": [78, 327], "yutong": [78, 327], "lin": [78, 327], "yue": [78, 327], "cao": [78, 327], "han": [78, 327], "hu": [78, 327], "yixuan": [78, 327], "zheng": [78, 327], "zhang": [78, 327], "stephen": [78, 327], "bain": [78, 327], "guo": [78, 327], "basic": [78, 123, 151, 204, 250, 327, 373, 401, 454, 505], "whose": [78, 171, 327, 337, 421], "scheme": [78, 108, 159, 327, 357, 408], "bring": [78, 165, 327, 415, 506], "greater": [78, 123, 143, 157, 158, 215, 327, 373, 393, 406, 407, 465], "attent": [78, 80, 91, 97, 104, 143, 157, 158, 163, 167, 172, 215, 327, 329, 339, 345, 353, 393, 406, 407, 413, 417, 422, 465], "non": [78, 161, 165, 170, 188, 191, 327, 410, 415, 420, 438, 441], "overlap": [78, 85, 87, 128, 132, 229, 231, 327, 334, 336, 377, 382, 482], "cross": [78, 116, 117, 139, 327, 365, 366, 389], "connect": [78, 327], "image_classifier_swin_base_patch4_window7_224": [78, 327], "swinforimageclassificationtest": [78, 327], "present": [78, 90, 100, 102, 104, 108, 109, 113, 116, 117, 121, 143, 147, 152, 159, 166, 176, 308, 327, 338, 348, 350, 353, 357, 358, 362, 365, 366, 370, 393, 396, 402, 408, 416, 425], "call": [78, 92, 93, 98, 100, 112, 123, 143, 162, 163, 170, 171, 204, 226, 235, 242, 327, 337, 340, 341, 346, 348, 361, 373, 393, 411, 413, 420, 421, 454, 477, 486, 492, 506, 512], "purpos": [78, 98, 100, 152, 327, 346, 348, 402], "adapt": [78, 172, 215, 327, 422, 465], "aris": [78, 327], "domain": [78, 103, 112, 123, 162, 240, 327, 352, 361, 373, 411, 491], "variat": [78, 327], "high": [78, 91, 111, 112, 113, 116, 117, 157, 158, 159, 165, 166, 168, 171, 173, 215, 308, 327, 339, 360, 361, 362, 365, 366, 406, 407, 408, 415, 416, 418, 421, 423, 465], "variou": [78, 112, 118, 167, 170, 173, 229, 230, 231, 232, 240, 249, 327, 361, 367, 417, 420, 423, 480, 481, 482, 483, 491, 500], "complex": [78, 102, 112, 113, 123, 167, 172, 179, 180, 327, 350, 361, 362, 373, 417, 422, 429, 430], "respect": [78, 97, 115, 137, 138, 171, 244, 327, 337, 345, 364, 387, 388, 421, 495], "broad": [78, 85, 162, 327, 334, 411], "rang": [78, 92, 93, 97, 98, 100, 103, 116, 117, 157, 158, 159, 163, 164, 170, 215, 327, 340, 341, 345, 346, 348, 352, 365, 366, 406, 407, 408, 413, 414, 420, 465], "1k": [78, 327], "dens": [78, 92, 93, 94, 165, 171, 176, 327, 340, 341, 342, 415, 421, 425], "box": [78, 101, 165, 168, 327, 349, 415, 418], "ap": [78, 327], "51": [78, 195, 203, 244, 327, 444, 453, 495], "53": [78, 128, 132, 327, 377, 382], "miou": [78, 327], "val": [78, 327], "margin": [78, 105, 118, 327, 354, 367], "prove": [78, 327], "benefici": [78, 123, 327, 373], "mlp": [78, 327], "visionencoderdecod": [79, 328], "auto": [79, 159, 183, 328, 408, 433], "beit": [79, 328], "deit": [79, 328], "gpt2": [79, 162, 328, 411], "image_captioning_vit_gpt2": [79, 328], "visionencoderdecodertestspec": [79, 328], "nreturnsequ": [79, 208, 215, 328, 465], "computation": [79, 102, 108, 109, 118, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 308, 328, 350, 357, 358, 367, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424], "expens": [79, 102, 108, 109, 118, 154, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 179, 308, 328, 350, 357, 358, 367, 404, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 429], "especi": [79, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 308, 328, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424], "recommend": [79, 91, 102, 118, 143, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 250, 308, 328, 339, 350, 367, 393, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424], "imagecapt": [79, 328], "fill": [79, 159, 248, 328, 408, 499], "furnitur": [79, 328], "lai": [79, 168, 328, 418], "anoth": [79, 158, 215, 328, 407, 465, 507], "brown": [79, 158, 230, 328, 407, 481], "bear": [79, 230, 328, 481], "bodi": [79, 158, 328, 407], "water": [79, 158, 328, 407], "flock": [79, 328], "chicken": [79, 158, 328, 407], "lush": [79, 328], "green": [79, 158, 328, 407], "small": [79, 80, 86, 90, 91, 95, 98, 99, 107, 114, 126, 149, 157, 158, 168, 170, 171, 173, 202, 215, 231, 244, 328, 329, 335, 338, 339, 343, 346, 347, 356, 363, 376, 399, 406, 407, 418, 420, 421, 423, 452, 465, 495, 510], "wet": [79, 328], "wooden": [79, 328], "floor": [79, 158, 328, 407], "wear": [79, 158, 328, 407], "blue": [79, 328], "sweater": [79, 158, 328, 407], "man": [79, 91, 158, 162, 163, 328, 339, 407, 411, 413], "cow": [79, 328], "altern": [80, 123, 143, 154, 178, 179, 180, 202, 206, 329, 373, 393, 404, 427, 429, 430, 452, 456, 506, 511], "vitimageclassificationtestspec": [80, 329], "becom": [80, 90, 98, 123, 169, 329, 338, 346, 373, 419], "facto": [80, 123, 329, 373], "remain": [80, 86, 90, 98, 123, 248, 329, 335, 338, 346, 373, 499], "conjunct": [80, 329], "overal": [80, 115, 118, 161, 171, 329, 364, 367, 410, 421], "structur": [80, 140, 188, 207, 230, 231, 232, 329, 390, 457, 481, 505], "relianc": [80, 112, 329, 361], "cnn": [80, 125, 138, 152, 329, 375, 388, 402], "necessari": [80, 98, 329, 337, 346, 502, 509], "directli": [80, 165, 168, 202, 228, 235, 329, 415, 418, 452, 478, 486, 502], "mid": [80, 329], "cifar": [80, 329], "vtab": [80, 329], "etc": [80, 96, 100, 103, 105, 161, 172, 196, 207, 232, 329, 344, 348, 352, 354, 410, 422, 445, 457, 483, 502], "attain": [80, 329], "excel": [80, 118, 167, 230, 232, 240, 329, 367, 417, 481, 483, 491], "substanti": [80, 92, 93, 329, 340, 341], "fewer": [80, 90, 103, 176, 329, 338, 352, 425], "worth": [80, 329], "16x16": [80, 329], "egyptian": [80, 329], "date_chunk": [81, 330], "omicron": [81, 330], "covid": [81, 330], "world": [81, 85, 86, 87, 106, 111, 112, 167, 169, 170, 171, 172, 185, 228, 246, 330, 334, 335, 336, 355, 360, 361, 417, 419, 420, 421, 422, 434, 478, 497, 502], "health": [81, 330], "organ": [81, 123, 166, 204, 308, 330, 373, 416, 454], "nov": [81, 129, 130, 244, 330, 378, 380, 495], "26": [81, 136, 202, 204, 220, 234, 246, 330, 386, 452, 454, 470, 485, 497], "2021": [81, 129, 130, 330, 378, 380], "118": [81, 206, 330, 456], "121": [81, 330], "01": [81, 129, 130, 131, 330, 378, 380, 381], "dependencytreebank": [82, 83, 331], "numberofiter": [82, 83, 84, 331, 333], "setconllu": [82, 83, 84, 331, 333], "setdependencytreebank": [82, 83, 331], "setnumberofiter": [82, 83, 84, 331, 333], "conll2009": [82, 84, 333], "setconll2009": [82, 84, 333], "conllformat": [82, 84, 333], "traindependencypip": [82, 84, 333], "trainopt": [82, 84, 333], "trainparamet": [82, 84, 333], "dependencypars": [83, 84, 121, 331, 333, 370], "unlabel": [83, 92, 93, 94, 159, 162, 174, 331, 340, 341, 342, 408, 411, 424], "grammat": [83, 84, 331, 333], "inform": [83, 84, 103, 105, 115, 116, 123, 129, 136, 157, 158, 159, 178, 195, 203, 240, 245, 251, 331, 333, 352, 354, 364, 365, 373, 378, 386, 406, 407, 408, 427, 444, 453, 491, 496, 502, 503, 504, 505, 506, 512], "relationship": [83, 84, 113, 121, 331, 333, 362, 370], "tell": [83, 84, 123, 220, 331, 333, 373, 470], "verb": [83, 84, 243, 331, 333, 493], "modifi": [83, 84, 108, 109, 136, 143, 152, 331, 333, 357, 358, 386, 393, 402], "particular": [83, 84, 123, 235, 331, 333, 373, 486, 506], "treebank": [83, 331], "penn": [83, 331], "converg": [83, 84, 149, 191, 331, 333, 399, 441], "better": [83, 84, 90, 97, 101, 105, 118, 123, 137, 149, 151, 152, 155, 159, 161, 163, 191, 331, 333, 338, 345, 349, 354, 367, 373, 387, 399, 401, 402, 405, 408, 410, 413, 441], "postagg": [83, 84, 121, 137, 149, 331, 333, 370, 387, 399], "dependency_treebank": [83, 331], "emptydataset": [83, 84, 331, 333], "tree": [83, 121, 331, 370], "bank": [83, 331], "dep": [83, 331], "dependency_conllu": [83, 121, 331, 370], "typeddependencyparsermdoel": [83, 331], "union": [83, 84, 331, 333], "worker": [83, 84, 331, 333], "turner": [83, 84, 331, 333], "newal": [83, 84, 331, 333], "sai": [83, 84, 123, 188, 331, 333, 373, 438], "disappoint": [83, 84, 331, 333], "talk": [83, 84, 143, 331, 333, 393], "stricken": [83, 84, 331, 333], "firm": [83, 84, 331, 333], "feder": [83, 84, 331, 333], "mogul": [83, 84, 331, 333], "typeddependencypars": [84, 121, 333, 370], "beforehand": [84, 333], "2009": [84, 333], "dependency_typ": [84, 121, 333, 370], "train_smal": [84, 333], "txt": [84, 85, 87, 99, 114, 115, 126, 128, 131, 132, 149, 152, 154, 178, 179, 180, 185, 188, 230, 237, 240, 244, 245, 333, 334, 336, 347, 363, 364, 376, 377, 381, 382, 399, 402, 404, 427, 429, 430, 434, 438, 481, 491, 495, 496, 512], "typdep": [84, 333], "dependency_typed_conllu": [84, 121, 333, 370], "amod": [84, 333], "flat": [84, 121, 198, 333, 370, 447], "nsubj": [84, 121, 198, 243, 333, 370, 447, 493], "parataxi": [84, 333], "pipe": 84, "roughli": [85, 334], "subtext": [85, 334], "perfect": [85, 87, 334, 336], "observ": [85, 87, 113, 334, 336, 362], "seen": [85, 87, 159, 334, 336, 408], "addition": [85, 87, 118, 138, 149, 167, 172, 195, 203, 234, 334, 336, 367, 388, 399, 417, 422, 444, 453, 485], "trim": [85, 87, 204, 334, 336, 454], "individu": [85, 87, 123, 178, 231, 334, 336, 337, 373, 427, 482], "documentcharactertextsplittertest": [85, 334], "decreas": [85, 143, 176, 334, 393, 425], "prioriti": [85, 179, 188, 334, 429, 438], "textdf": [85, 87, 101, 334, 336, 349], "sherlockholm": [85, 87, 99, 114, 178, 334, 336, 347, 363, 427, 512], "wholetext": [85, 87, 334, 336], "textsplitt": [85, 87, 334, 336], "20000": [85, 334], "80": [85, 87, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 131, 196, 207, 334, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 381, 445, 457], "project": [85, 87, 123, 157, 166, 169, 173, 176, 228, 251, 308, 334, 336, 373, 406, 416, 419, 423, 425, 478, 503], "gutenberg": [85, 87, 334, 336], "adventur": [85, 87, 334, 336], "sherlock": [85, 87, 178, 334, 336, 427], "holm": [85, 87, 178, 334, 336, 427], "arthur": [85, 87, 334, 336], "conan": [85, 87, 334, 336], "doyl": [85, 87, 334, 336], "19994": [85, 334], "And": [85, 334], "mademoisel": [85, 334], "ask": [85, 160, 240, 334, 409, 491], "brioni": [85, 334], "lodg": [85, 334], "serpentin": [85, 334], "aven": [85, 334], "19798": [85, 334], "39395": [85, 334], "19597": [85, 334], "did": [85, 123, 167, 172, 334, 373, 417, 422], "woman": [85, 334], "think": [85, 334], "39371": [85, 334], "59242": [85, 334], "19871": [85, 334], "But": [85, 87, 94, 100, 107, 334, 336, 342, 348, 356], "said": [85, 87, 334, 336], "million": [85, 107, 123, 139, 162, 334, 356, 373, 389, 411], "red": [85, 158, 334, 407], "men": [85, 334], "nwould": [85, 334], "59166": [85, 334], "77833": [85, 334], "18667": [85, 334], "friend": [85, 334], "enthusiast": [85, 334], "musician": [85, 334], "being": [85, 98, 138, 143, 147, 159, 163, 166, 171, 174, 176, 308, 334, 346, 388, 393, 396, 408, 413, 416, 421, 424, 425], "himself": [85, 334], "nveri": [85, 334], "capab": [85, 334], "77835": [85, 334], "97769": [85, 334], "19934": [85, 334], "yet": [85, 235, 334, 486], "convinc": [85, 334], "ncome": [85, 334], "li": [85, 171, 334, 421], "97771": [85, 334], "117248": [85, 334], "19477": [85, 334], "she": [85, 186, 334, 436], "had": [85, 123, 143, 334, 373, 393], "slate": [85, 334], "colour": [85, 334], "brim": [85, 334], "straw": [85, 334], "hat": [85, 334], "nfeather": [85, 334], "117250": [85, 334], "137242": [85, 334], "19992": [85, 334], "That": [85, 123, 186, 228, 334, 373, 436, 478, 502, 507], "littl": [85, 152, 334, 402, 511], "paradox": [85, 334], "profoundli": [85, 334], "singulari": [85, 334], "137244": [85, 334], "157171": [85, 334], "19927": [85, 334], "raw": [86, 158, 162, 186, 188, 191, 201, 230, 232, 335, 407, 411, 436, 438, 441, 450, 481, 505, 507], "scrape": [86, 335], "page": [86, 162, 169, 230, 232, 234, 239, 251, 335, 411, 419, 481, 485, 490, 501, 509, 511], "xml": [86, 237, 240, 335, 491], "dirti": [86, 141, 335, 391], "want": [86, 87, 120, 139, 235, 335, 336, 368, 389, 486, 507], "pretty_al": [86, 335], "normalizeddocu": [86, 335], "div": [86, 335], "theworldsgreatest": [86, 335], "right": [86, 92, 93, 159, 191, 204, 335, 340, 341, 408, 441, 454], "hide": [86, 335], "toptext": [86, 335], "style": [86, 125, 174, 335, 375, 424], "font": [86, 230, 232, 335, 481], "sego": [86, 335], "ui": [86, 335], "arial": [86, 335], "san": [86, 123, 335, 373], "serif": [86, 335], "largest": [86, 123, 162, 335, 373, 411], "develop": [86, 123, 163, 164, 166, 168, 169, 170, 172, 173, 221, 308, 335, 373, 413, 414, 416, 418, 419, 420, 422, 423, 475], "site": [86, 123, 161, 335, 373, 410], "h1": [86, 335], "300": [86, 335], "160": [86, 335], "lorem": [86, 128, 132, 335, 377, 382], "ipsum": [86, 128, 132, 335, 377, 382], "typeset": [86, 335], "been": [86, 95, 162, 163, 164, 170, 189, 207, 235, 335, 343, 411, 413, 414, 420, 439, 457, 486], "1500": [86, 335], "unknown": [86, 87, 125, 335, 336, 375], "printer": [86, 335], "took": [86, 168, 335, 418], "gallei": [86, 335], "scrambl": [86, 335], "specimen": [86, 335], "surviv": [86, 335], "five": [86, 139, 158, 335, 389, 407], "centuri": [86, 167, 191, 335, 417, 441], "leap": [86, 335], "electron": [86, 335], "essenti": [86, 162, 169, 335, 411, 419], "unchang": [86, 335], "popularis": [86, 335], "1960": [86, 335], "letraset": [86, 335], "sheet": [86, 251, 335], "passag": [86, 94, 100, 107, 335, 342, 348, 356], "recent": [86, 92, 93, 97, 108, 109, 123, 143, 159, 335, 340, 341, 345, 357, 358, 373, 393, 408], "publish": [86, 108, 109, 335, 357, 358], "softwar": [86, 173, 335, 423], "aldu": [86, 335], "pagemak": [86, 335], "measur": [87, 98, 108, 109, 159, 171, 228, 336, 346, 357, 358, 408, 421, 478], "futur": [87, 152, 159, 174, 336, 402, 408, 424], "techniqu": [87, 90, 97, 159, 162, 164, 168, 172, 174, 176, 336, 338, 345, 408, 411, 414, 418, 422, 424, 425], "documenttokensplittertest": [87, 336], "3018": [87, 336], "crime": [87, 336], "occupi": [87, 336], "nimmens": [87, 336], "faculti": [87, 336], "extraordinari": [87, 336], "power": [87, 92, 93, 159, 169, 174, 240, 336, 340, 341, 408, 419, 424, 491], "2950": [87, 336], "5707": [87, 336], "2757": [87, 336], "chang": [87, 103, 215, 224, 336, 337, 352, 465, 474], "cloth": [87, 336], "imagin": [87, 336], "ndeduc": [87, 336], "As": [87, 90, 92, 93, 94, 98, 100, 107, 123, 143, 169, 336, 338, 340, 341, 342, 346, 348, 356, 373, 393, 419], "5659": [87, 336], "8483": [87, 336], "2824": [87, 336], "quarter": [87, 336], "receiv": [87, 244, 336, 495, 512], "Be": [87, 336], "chamber": [87, 336], "nnot": [87, 336], "8427": [87, 336], "11241": [87, 336], "2814": [87, 336], "piti": [87, 336], "nto": [87, 336], "miss": [87, 129, 130, 194, 336, 378, 380, 443], "client": [87, 336], "never": [87, 155, 336, 405, 506], "mind": [87, 168, 336, 418], "him": [87, 130, 336, 380], "11188": [87, 336], "13970": [87, 336], "2782": [87, 336], "person": [87, 120, 243, 336, 368, 493], "me": [87, 130, 164, 336, 380, 414], "wish": [87, 336], "agent": [87, 172, 336, 422], "conf": [87, 336], "13918": [87, 336], "16898": [87, 336], "2980": [87, 336], "letter": [87, 141, 162, 163, 178, 244, 336, 391, 411, 413, 427, 495, 512], "secret": [87, 336], "marriag": [87, 336], "16836": [87, 336], "19744": [87, 336], "2908": [87, 336], "seven": [87, 336], "hundr": [87, 116, 117, 336, 365, 366], "nnote": [87, 336], "nholm": [87, 336], "scribbl": [87, 336], "receipt": [87, 336], "shee": [87, 336], "19683": [87, 336], "22551": [87, 336], "2868": [87, 336], "defragmentationthreshold": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "flashattent": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "getmetadata": [89, 91, 208, 215, 339, 465], "gpusplitmod": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "grpattnn": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "grpattnw": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "maingpu": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "nbatch": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "nchunk": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "nctx": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "ngpulay": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "nsequenc": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "nthread": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "nthreadsbatch": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "nubatch": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "nokvoffload": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "numastrategi": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "poolingtyp": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "ropefreqbas": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "ropefreqscal": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "ropescalingtyp": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "setdefragmentationthreshold": [89, 91, 208, 215, 339, 465], "setflashattent": [89, 91, 208, 215, 339, 465], "setgpusplitmod": [89, 91, 208, 215, 339, 465], "setgrpattnn": [89, 91, 208, 215, 339, 465], "setgrpattnw": [89, 91, 208, 215, 339, 465], "setmaingpu": [89, 91, 208, 215, 339, 465], "setnbatch": [89, 91, 208, 215, 339, 465], "setnchunk": [89, 91, 208, 215, 339, 465], "setnctx": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "setngpulay": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "setnparallel": [89, 91, 208, 215, 339, 465], "setnsequ": [89, 91, 208, 215, 339, 465], "setnthread": [89, 91, 208, 215, 339, 465], "setnthreadsbatch": [89, 91, 208, 215, 339, 465], "setnubatch": [89, 91, 208, 215, 339, 465], "setnokvoffload": [89, 91, 208, 215, 339, 465], "setnumastrategi": [89, 91, 208, 215, 339, 465], "setpoolingtyp": [89, 91, 208, 215, 339, 465], "setropefreqbas": [89, 91, 208, 215, 339, 465], "setropefreqscal": [89, 91, 208, 215, 339, 465], "setropescalingtyp": [89, 91, 208, 215, 339, 465], "settensorsplit": [89, 91, 208, 215, 339, 465], "setusemlock": [89, 91, 208, 215, 339, 465], "setusemmap": [89, 91, 208, 215, 339, 465], "setyarnattnfactor": [89, 91, 208, 215, 339, 465], "setyarnbetafast": [89, 91, 208, 215, 339, 465], "setyarnbetaslow": [89, 91, 208, 215, 339, 465], "setyarnextfactor": [89, 91, 208, 215, 339, 465], "setyarnorigctx": [89, 91, 208, 215, 339, 465], "tensorsplit": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "usemlock": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "usemmap": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "yarnattnfactor": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "yarnbetafast": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "yarnbetaslow": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "yarnextfactor": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "yarnorigctx": [89, 91, 157, 158, 208, 215, 339, 406, 407, 465], "islong": [89, 93, 341], "setislong": [89, 93, 341], "poolingstrategi": [89, 96, 106, 110, 111, 112, 344, 355, 359, 360, 361], "setpoolingstrategi": [89, 96, 106, 110, 111, 112, 344, 355, 359, 360, 361], "setskipoov": [89, 96, 344], "skipoov": [89, 96, 344], "maxit": [89, 99, 114, 347, 363], "mincount": [89, 99, 114, 177, 178, 347, 363, 427], "numpartit": [89, 99, 114, 347, 363], "setmaxit": [89, 99, 114, 347, 363], "setmincount": [89, 99, 114, 177, 178, 347, 363, 427], "setnumpartit": [89, 99, 114, 347, 363], "setse": [89, 99, 114, 208, 215, 347, 363, 465], "setsteps": [89, 99, 114, 347, 363], "setvectors": [89, 99, 114, 347, 363], "setwindows": [89, 99, 114, 122, 123, 347, 363, 373], "stepsiz": [89, 99, 114, 347, 363], "vectors": [89, 99, 114, 347, 363], "windows": [89, 99, 114, 122, 123, 347, 363, 373], "getvector": [89, 99, 114, 347, 363], "poolinglay": [89, 102, 350], "setpoolinglay": [89, 102, 350], "setinstruct": [89, 103, 352], "loadsp": [89, 113, 362], "setloadsp": [89, 113, 362], "readcaches": [89, 115, 364], "setreadcaches": [89, 115, 364], "setwritebuffers": [89, 115, 364], "writebuffers": [89, 115, 364], "databas": [89, 115, 119, 120, 127, 128, 218, 364, 368, 377, 468], "loadstorag": [89, 115, 119, 120, 127, 128, 208, 218, 364, 368, 377, 468], "overallcoverag": [89, 115, 364], "withcoveragecolumn": [89, 115, 364], "lite": [90, 338], "toyota": [90, 338], "technolog": [90, 338], "institut": [90, 338], "chicago": [90, 338], "offici": [90, 123, 136, 137, 138, 202, 220, 234, 338, 373, 386, 387, 388, 452, 470, 485, 503], "tf": [90, 113, 338, 362], "wrapper": [90, 338, 474], "port": [90, 338], "albert_base_uncas": [90, 338], "albert_bas": [90, 338], "768": [90, 92, 93, 94, 95, 97, 98, 100, 103, 104, 105, 106, 107, 108, 109, 111, 112, 116, 117, 118, 338, 340, 341, 342, 343, 345, 346, 348, 352, 353, 354, 355, 356, 357, 358, 360, 361, 365, 366, 367], "emb": [90, 107, 111, 338, 356, 360], "dim": [90, 91, 157, 158, 215, 338, 339, 406, 407, 465], "12m": [90, 338], "albert_large_uncas": [90, 338], "albert_larg": [90, 338], "1024": [90, 102, 104, 118, 338, 350, 353, 367], "24": [90, 118, 128, 132, 136, 178, 202, 220, 234, 338, 367, 377, 382, 386, 427, 452, 470, 485, 505], "18m": [90, 338], "albert_xlarge_uncas": [90, 338], "albert_xlarg": [90, 338], "2048": [90, 338], "60m": [90, 338], "albert_xxlarge_uncas": [90, 338], "albert_xxlarg": [90, 338], "235m": [90, 338], "sentencepiec": [90, 97, 113, 338, 345, 362], "everi": [90, 92, 93, 94, 95, 97, 98, 100, 103, 104, 105, 106, 107, 108, 109, 111, 112, 116, 117, 118, 138, 155, 166, 178, 195, 203, 205, 215, 308, 338, 340, 341, 342, 343, 345, 346, 348, 352, 353, 354, 355, 356, 357, 358, 360, 361, 365, 366, 367, 388, 405, 416, 427, 444, 453, 455, 507], "dimens": [90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 208, 215, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 465], "repeat": [90, 143, 157, 158, 215, 338, 393, 406, 407, 465], "footprint": [90, 338], "cost": [90, 167, 178, 179, 338, 417, 427, 429], "FOR": [90, 338], "tfhub": [90, 102, 113, 338, 350, 362], "q": [90, 338], "increas": [90, 91, 94, 100, 107, 115, 123, 143, 157, 158, 159, 162, 165, 176, 179, 180, 215, 338, 339, 342, 348, 356, 364, 373, 393, 406, 407, 408, 411, 415, 425, 429, 465], "downstream": [90, 95, 97, 102, 103, 104, 118, 159, 162, 172, 174, 338, 343, 345, 350, 352, 353, 367, 408, 411, 422, 424], "some": [90, 91, 93, 116, 123, 138, 152, 157, 158, 161, 162, 164, 171, 204, 205, 215, 228, 246, 338, 339, 341, 365, 373, 388, 402, 406, 407, 410, 411, 414, 421, 454, 455, 465, 478, 497, 505, 506, 510, 511], "point": [90, 92, 93, 151, 152, 195, 203, 240, 242, 338, 340, 341, 401, 402, 444, 453, 491, 492], "harder": [90, 338], "tpu": [90, 338], "consumpt": [90, 113, 115, 338, 362, 364], "speed": [90, 137, 161, 166, 167, 308, 338, 387, 410, 416, 417], "devlin": [90, 108, 109, 338, 357, 358], "et": [90, 108, 109, 125, 338, 357, 358, 375], "al": [90, 108, 109, 338, 357, 358], "2019": [90, 95, 97, 108, 109, 116, 117, 159, 338, 343, 345, 357, 358, 365, 366, 408], "comprehens": [90, 94, 112, 159, 161, 162, 164, 167, 172, 173, 338, 342, 361, 408, 410, 411, 414, 417, 422, 423], "empir": [90, 92, 93, 116, 117, 118, 338, 340, 341, 365, 366, 367], "evid": [90, 338], "focus": [90, 111, 123, 143, 158, 172, 173, 338, 360, 373, 393, 407, 422, 423], "inter": [90, 338], "coher": [90, 160, 162, 231, 338, 409, 411], "establish": [90, 338], "glue": [90, 92, 93, 98, 105, 108, 109, 116, 117, 159, 338, 340, 341, 346, 354, 357, 358, 365, 366, 408], "race": [90, 97, 108, 109, 338, 345, 357, 358], "finished_embed": [90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367], "setoutputasvector": [90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 192, 196, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 445], "setcleanannot": [90, 97, 98, 102, 104, 108, 110, 113, 115, 116, 118, 192, 196, 197, 198, 338, 345, 346, 350, 353, 357, 359, 362, 364, 365, 367, 445, 446, 447], "1342473030090332": [90, 97, 338, 345], "3855540752410889": [90, 97, 338, 345], "9818322062492371": [90, 97, 338, 345], "784737348556518": [90, 97, 338, 345], "847029983997345": [90, 97, 338, 345], "047153353691101": [90, 97, 338, 345], "1520637571811676": [90, 97, 338, 345], "6245765686035156": [90, 97, 338, 345], "009860038757324219": [90, 97, 338, 345], "13450059294700623": [90, 97, 338, 345], "707749128341675": [90, 97, 338, 345], "2916892766952": [90, 97, 338, 345], "04192575812339783": [90, 97, 338, 345], "5764210224151611": [90, 97, 338, 345], "3196685314178467": [90, 97, 338, 345], "527840495109": [90, 97, 338, 345], "15583214163780212": [90, 97, 338, 345], "1614152491092682": [90, 97, 338, 345], "28423872590065": [90, 97, 338, 345], "135491415858268": [90, 97, 338, 345], "cpp": [91, 157, 158, 201, 204, 339, 406, 407, 450, 454], "cl": [91, 94, 106, 111, 112, 215, 339, 342, 355, 360, 361, 465], "nomic_embed_text_v1": [91, 339], "q8_0": [91, 339], "gguf": [91, 339], "autoggufembeddingstest": [91, 339], "notebook": [91, 157, 158, 173, 176, 204, 228, 250, 339, 406, 407, 423, 425, 454, 478, 502], "thread": [91, 157, 158, 215, 339, 406, 407, 465, 478], "logic": [91, 157, 158, 170, 171, 215, 339, 406, 407, 420, 421, 465], "bla": [91, 157, 158, 215, 339, 406, 407, 465], "physic": [91, 157, 158, 215, 339, 406, 407, 465], "maxim": [91, 118, 157, 158, 178, 215, 339, 367, 406, 407, 427, 465], "store": [91, 121, 157, 158, 206, 215, 232, 234, 239, 246, 339, 370, 395, 396, 406, 407, 456, 460, 465, 476, 482, 483, 485, 490, 497, 503], "vram": [91, 157, 158, 215, 339, 406, 407, 465], "across": [91, 102, 157, 158, 162, 163, 164, 167, 172, 176, 215, 339, 350, 406, 407, 411, 413, 414, 417, 422, 425, 465], "main": [91, 120, 157, 158, 176, 188, 215, 251, 339, 368, 406, 407, 425, 438, 465, 505, 509, 512], "scratch": [91, 157, 158, 215, 339, 406, 407, 465], "tensor": [91, 102, 157, 158, 215, 339, 350, 406, 407, 465], "distribut": [91, 99, 114, 157, 158, 215, 339, 347, 363, 406, 407, 465], "rope": [91, 157, 158, 215, 339, 406, 407, 465], "frequenc": [91, 143, 155, 157, 158, 178, 179, 180, 191, 215, 339, 393, 405, 406, 407, 427, 429, 430, 441, 465], "ntk": [91, 157, 158, 215, 339, 406, 407, 465], "awar": [91, 157, 158, 178, 215, 339, 406, 407, 427, 465], "expand": [91, 157, 158, 167, 215, 339, 406, 407, 417, 465], "yarn": [91, 157, 158, 215, 339, 406, 407, 465], "extrapol": [91, 157, 158, 215, 339, 406, 407, 465], "mix": [91, 102, 111, 157, 158, 215, 309, 339, 350, 360, 406, 407, 425, 459, 465, 477], "sqrt": [91, 157, 158, 215, 339, 406, 407, 465], "magnitud": [91, 103, 157, 158, 179, 180, 215, 339, 352, 406, 407, 429, 430, 465], "low": [91, 94, 116, 117, 157, 158, 168, 173, 178, 215, 339, 342, 365, 366, 406, 407, 418, 423, 427, 465], "correct": [91, 116, 157, 158, 178, 179, 180, 191, 215, 339, 365, 406, 407, 427, 429, 430, 441, 465], "beta": [91, 157, 158, 172, 215, 339, 406, 407, 422, 465], "alpha": [91, 157, 158, 161, 178, 215, 339, 406, 407, 410, 427, 465], "kv": [91, 157, 158, 215, 339, 406, 407, 465], "cach": [91, 115, 157, 158, 159, 174, 176, 215, 235, 339, 364, 406, 407, 408, 424, 425, 465, 486], "defragment": [91, 157, 158, 215, 339, 406, 407, 465], "numa": [91, 157, 158, 215, 339, 406, 407, 465], "unless": [91, 157, 158, 215, 339, 406, 407, 465], "unspecifi": [91, 157, 158, 215, 339, 406, 407, 465], "flash": [91, 157, 158, 215, 339, 406, 407, 465], "pageout": [91, 157, 158, 215, 339, 406, 407, 465], "mlock": [91, 157, 158, 215, 339, 406, 407, 465], "ram": [91, 157, 158, 215, 339, 406, 407, 465], "swap": [91, 157, 158, 179, 215, 339, 406, 407, 429, 465], "compress": [91, 157, 158, 215, 339, 406, 407, 465], "disabl": [91, 155, 157, 158, 195, 203, 215, 239, 339, 406, 407, 444, 453, 465, 490], "offload": [91, 157, 158, 215, 339, 406, 407, 465], "sure": [91, 155, 157, 158, 250, 339, 405, 406, 407], "adjust": [91, 157, 158, 215, 339, 406, 407, 465], "accord": [91, 123, 157, 158, 163, 178, 242, 339, 373, 406, 407, 413, 427, 492], "hardwar": [91, 157, 158, 339, 406, 407], "avoid": [91, 105, 154, 157, 158, 215, 339, 354, 404, 406, 407, 465], "error": [91, 157, 158, 178, 337, 339, 406, 407, 427], "99": [91, 157, 158, 339, 406, 407], "moon": [91, 106, 111, 112, 339, 355, 360, 361], "jupit": [91, 339], "77": [91, 339], "total": [91, 152, 158, 191, 339, 402, 407, 441, 462], "79": [91, 129, 130, 339, 378, 380], "confirm": [91, 339], "satellit": [91, 339], "made": [91, 94, 97, 113, 339, 342, 345, 362, 502], "ones": [91, 158, 339, 407], "034486726": [91, 339], "07770534": [91, 339], "15982522": [91, 339], "017873349": [91, 339], "013914132": [91, 339], "0365736": [91, 339], "nparallel": [91, 215, 339, 465], "alia": [91, 157, 158, 215, 220, 339, 406, 407, 465, 470], "small_bert_l2_768": [92, 340], "unlik": [92, 93, 103, 116, 123, 169, 186, 340, 341, 352, 365, 373, 419, 436], "jointli": [92, 93, 340, 341], "left": [92, 93, 158, 159, 168, 191, 211, 340, 341, 407, 408, 418, 441], "just": [92, 93, 98, 108, 133, 138, 231, 340, 341, 346, 357, 383, 388], "modif": [92, 93, 340, 341], "conceptu": [92, 93, 340, 341], "obtain": [92, 93, 95, 100, 113, 168, 340, 341, 343, 348, 362, 418], "eleven": [92, 93, 340, 341], "push": [92, 93, 248, 340, 341, 499], "absolut": [92, 93, 340, 341], "multinli": [92, 93, 340, 341], "86": [92, 93, 97, 340, 341, 345], "v1": [92, 93, 107, 340, 341, 356], "f1": [92, 93, 116, 117, 138, 162, 340, 341, 365, 366, 388, 411], "93": [92, 93, 340, 341], "83": [92, 93, 97, 244, 245, 340, 341, 345, 495, 496, 512], "small_bert_l2_128": [92, 340], "3497989177703857": [92, 103, 340, 352], "480538547039032": [92, 103, 340, 352], "3238905668258667": [92, 103, 340, 352], "612930893898010": [92, 103, 340, 352], "1357314586639404": [92, 340], "32984697818756104": [92, 340], "6032363176345825": [92, 340], "6791689395904": [92, 340], "8244884014129639": [92, 340], "27088963985443115": [92, 340], "059438943862915": [92, 340], "9817547798156": [92, 340], "1648050546646118": [92, 340], "4725411534309387": [92, 340], "5938255786895752": [92, 340], "5780693292617": [92, 340], "9125322699546814": [92, 340], "4563939869403839": [92, 340], "3975459933280945": [92, 340], "81611204147338": [92, 340], "backend": [92, 93, 100, 108, 116, 204, 340, 341, 348, 357, 365, 454], "sentence_bert_embed": [93, 341], "sent_small_bert_l2_768": [93, 341], "long": [93, 104, 107, 111, 112, 118, 158, 167, 171, 215, 239, 337, 341, 353, 356, 360, 361, 367, 407, 417, 421, 465, 490], "sent_small_bert_l2_128": [93, 341], "orang": [93, 109, 117, 341, 358, 366], "8951074481010437": [93, 109, 117, 341, 358, 366], "13753940165042877": [93, 109, 117, 341, 358, 366], "3108254075050354": [93, 109, 117, 341, 358, 366], "65693199634552": [93, 109, 117, 341, 358, 366], "6180210709571838": [93, 109, 117, 341, 358, 366], "12179657071828842": [93, 109, 117, 341, 358, 366], "191165953874588": [93, 109, 117, 341, 358, 366], "4497021436691": [93, 109, 117, 341, 358, 366], "822715163230896": [93, 109, 117, 341, 358, 366], "7568016648292542": [93, 109, 117, 341, 358, 366], "1165061742067337": [93, 109, 117, 341, 358, 366], "59048593044281": [93, 109, 117, 341, 358, 366], "bge": [94, 342], "baai": [94, 342], "dimension": [94, 113, 342, 362], "retriev": [94, 100, 103, 111, 115, 126, 176, 179, 180, 181, 228, 231, 234, 250, 342, 348, 352, 360, 364, 376, 425, 429, 430, 431, 478, 482, 485, 502, 506, 507], "bge_bas": [94, 342], "c": [94, 95, 99, 114, 123, 166, 191, 250, 308, 342, 343, 347, 363, 373, 416, 441], "pack": [94, 342], "chines": [94, 161, 191, 342, 410, 441], "github": [94, 97, 103, 107, 108, 112, 166, 169, 172, 173, 234, 251, 308, 342, 345, 352, 356, 357, 361, 416, 419, 422, 423, 485], "significantli": [94, 97, 102, 108, 109, 116, 117, 123, 171, 172, 173, 342, 345, 350, 357, 358, 365, 366, 373, 421, 422, 423], "critic": [94, 168, 342, 418], "mteb": [94, 100, 342, 348], "cover": [94, 152, 159, 165, 168, 174, 191, 342, 402, 408, 415, 418, 424, 441, 462], "mtp": [94, 342], "massiv": [94, 165, 342, 415], "curat": [94, 100, 107, 111, 342, 348, 356, 360], "corpora": [94, 105, 123, 128, 342, 354, 373, 377], "tem": [94, 342], "stateof": [94, 342], "meanwhil": [94, 342], "publicli": [94, 97, 116, 117, 171, 342, 345, 365, 366, 421], "flagopen": [94, 342], "flagembed": [94, 342], "useclstoken": [94, 208, 215, 342, 465], "protein": [94, 100, 107, 342, 348, 356], "femal": [94, 100, 107, 342, 348, 356], "eat": [94, 100, 107, 342, 348, 356], "guidelin": [94, 100, 107, 342, 348, 356], "cdc": [94, 100, 107, 342, 348, 356], "women": [94, 100, 107, 342, 348, 356], "70": [94, 100, 103, 107, 163, 164, 170, 342, 348, 352, 356, 413, 414, 420], "46": [94, 100, 107, 246, 342, 348, 356, 497], "dai": [94, 100, 107, 129, 130, 178, 342, 348, 356, 378, 380, 427], "chart": [94, 100, 107, 228, 342, 348, 356, 478, 502], "ll": [94, 100, 107, 191, 342, 348, 356, 441], "marathon": [94, 100, 107, 342, 348, 356], "below": [94, 100, 107, 121, 342, 348, 356, 370, 511], "0190285e": [94, 100, 107, 342, 348, 356], "005974853": [94, 100, 107, 342, 348, 356], "072875895": [94, 100, 107, 342, 348, 356], "007944068": [94, 100, 107, 342, 348, 356], "026059335": [94, 100, 107, 342, 348, 356], "0080": [94, 100, 107, 342, 348, 356], "050514214": [94, 100, 107, 342, 348, 356], "010061974": [94, 100, 107, 342, 348, 356], "04340176": [94, 100, 107, 342, 348, 356], "020937217": [94, 100, 107, 342, 348, 356], "05170225": [94, 100, 107, 342, 348, 356], "01157857": [94, 100, 107, 342, 348, 356], "bge_small_en_v1": [94, 342], "tasti": [95, 343], "french": [95, 123, 166, 182, 308, 343, 373, 416, 432], "loui": [95, 343], "martin": [95, 343], "muller": [95, 343], "pedro": [95, 343], "javier": [95, 343], "ortiz": [95, 343], "su\u00e1rez": [95, 343], "yoann": [95, 343], "dupont": [95, 343], "laurent": [95, 343], "romari": [95, 343], "\u00e9ric": [95, 343], "villemont": [95, 343], "la": [95, 143, 166, 308, 343, 393, 416], "clergeri": [95, 343], "djam\u00e9": [95, 343], "seddah": [95, 343], "beno\u00eet": [95, 343], "sagot": [95, 343], "facebook": [95, 97, 116, 117, 159, 343, 345, 365, 366, 408], "138gb": [95, 343], "camembert_bas": [95, 343], "camembertembeddingstestspec": [95, 343], "co": [95, 101, 123, 170, 171, 343, 349, 373, 420, 421], "now": [95, 152, 202, 250, 343, 402, 452, 507], "ubiquit": [95, 169, 343, 419], "despit": [95, 159, 171, 343, 408, 421], "concaten": [95, 191, 231, 343, 441, 482], "except": [95, 133, 138, 184, 188, 239, 337, 343, 383, 388, 438, 490], "investig": [95, 98, 113, 343, 346, 362], "feasibl": [95, 343], "monolingu": [95, 116, 117, 343, 365, 366], "crawl": [95, 159, 174, 343, 408, 424], "prefer": [95, 121, 171, 198, 343, 370, 421, 447], "wikipedia": [95, 125, 162, 230, 240, 343, 375, 411, 481, 491], "surprisingli": [95, 113, 343, 362], "4gb": [95, 343], "130": [95, 343], "gb": [95, 343], "reach": [95, 123, 162, 191, 343, 373, 411, 441], "four": [95, 152, 158, 189, 191, 343, 402, 407, 439, 441], "un": [95, 125, 343, 375], "08442357927560806": [95, 343], "12863239645957947": [95, 343], "03835778683423996": [95, 343], "200479581952": [95, 343], "048462312668561935": [95, 343], "12637358903884888": [95, 343], "27429091930389404": [95, 343], "07516729831": [95, 343], "02690504491329193": [95, 343], "12104076147079468": [95, 343], "012526623904705048": [95, 343], "031543646007": [95, 343], "05877285450696945": [95, 343], "08773420006036758": [95, 343], "06381352990865707": [95, 343], "122621834278": [95, 343], "aggreg": [96, 110, 176, 344, 359, 425], "sum": [96, 102, 110, 215, 344, 350, 359, 465], "discard": [96, 140, 344, 390], "oov": [96, 344], "55661": [96, 344], "42829502": [96, 344], "86661": [96, 344], "409785": [96, 344], "06316501": [96, 344], "120775": [96, 344], "0732005": [96, 344], "40674996": [96, 344], "22938299": [96, 344], "50597": [96, 344], "288195": [96, 344], "555655": [96, 344], "465145": [96, 344], "140118": [96, 344], "17417": [96, 344], "095253006": [96, 344], "0530925": [96, 344], "218465": [96, 344], "714395": [96, 344], "79860497": [96, 344], "0129999": [96, 344], "139705": [96, 344], "177955": [96, 344], "1887775": [96, 344], "45545": [96, 344], "20030999": [96, 344], "461557": [96, 344], "07891501": [96, 344], "disentangl": [97, 345], "pengcheng": [97, 345], "xiaodong": [97, 345], "jianfeng": [97, 345], "gao": [97, 345], "weizhu": [97, 345], "chen": [97, 108, 109, 345, 357, 358], "2018": [97, 108, 109, 345, 357, 358], "half": [97, 123, 345, 373], "deberta_v3_bas": [97, 345], "microsoft": [97, 100, 105, 107, 166, 170, 171, 308, 345, 348, 354, 356, 416, 420, 421], "www": [97, 230, 232, 240, 345, 481, 483, 491], "blog": [97, 172, 345, 422], "superglu": [97, 345], "progress": [97, 152, 187, 345, 402, 437], "mechan": [97, 104, 345, 353], "weight": [97, 102, 107, 123, 137, 139, 160, 169, 173, 178, 345, 350, 356, 373, 387, 389, 409, 419, 423, 427], "among": [97, 105, 161, 170, 171, 345, 354, 410, 420, 421], "matric": [97, 345], "second": [97, 102, 131, 151, 182, 187, 204, 231, 345, 350, 381, 401, 432, 437, 454, 482, 506], "mnli": [97, 345], "90": [97, 345], "91": [97, 345], "88": [97, 345], "fast": [98, 155, 163, 166, 202, 308, 346, 405, 413, 416, 452, 510], "cheap": [98, 346], "distil": [98, 346], "40": [98, 100, 139, 157, 158, 160, 163, 164, 166, 168, 308, 346, 348, 389, 406, 407, 409, 413, 414, 416, 418], "uncas": [98, 111, 346, 360], "run": [98, 123, 176, 228, 235, 250, 337, 346, 373, 425, 478, 486, 503, 511], "preserv": [98, 136, 187, 207, 346, 386, 437, 457], "95": [98, 158, 346, 407], "distilbert_base_cas": [98, 346], "doesn": [98, 108, 346, 357], "token_type_id": [98, 108, 346, 357], "indic": [98, 108, 187, 191, 346, 357, 437, 441], "belong": [98, 108, 171, 346, 357, 421], "sep_token": [98, 108, 346, 357], "sep": [98, 346], "position_id": [98, 346], "ad": [98, 102, 143, 178, 204, 232, 240, 346, 350, 393, 427, 454, 491], "though": [98, 123, 346, 373], "let": [98, 143, 186, 250, 346, 393, 436, 506], "know": [98, 166, 205, 308, 346, 416, 455], "cheaper": [98, 346], "lighter": [98, 346], "preval": [98, 346], "constrain": [98, 157, 158, 215, 346, 406, 407, 465], "budget": [98, 346], "counterpart": [98, 346], "leverag": [98, 105, 111, 167, 228, 346, 354, 360, 417, 478, 502], "knowledg": [98, 123, 169, 170, 171, 172, 198, 204, 250, 346, 373, 419, 420, 421, 422, 447, 454], "reduc": [98, 105, 167, 170, 179, 180, 207, 346, 354, 417, 420, 429, 430, 457], "retain": [98, 346], "97": [98, 129, 130, 191, 346, 378, 380, 441], "tripl": [98, 121, 346, 370], "cosin": [98, 112, 346, 361], "distanc": [98, 158, 176, 178, 179, 180, 346, 407, 425, 427, 429, 430], "proof": [98, 346], "concept": [98, 346, 507], "experi": [98, 112, 118, 143, 159, 161, 167, 228, 346, 361, 367, 393, 408, 410, 417, 478, 503], "1127224713563919": [98, 346], "1982710212469101": [98, 346], "5360898375511169": [98, 346], "272536993026733": [98, 346], "35534414649009705": [98, 346], "13215228915214539": [98, 346], "40981462597846985": [98, 346], "14036104083061": [98, 346], "328085333108902": [98, 346], "06269335001707077": [98, 346], "017595693469047546": [98, 346], "024373905733": [98, 346], "15617232024669647": [98, 346], "2967822253704071": [98, 346], "22324979305267334": [98, 346], "04568954557180": [98, 346], "45411425828933716": [98, 346], "01173491682857275": [98, 346], "190129816532135": [98, 346], "1178255230188369": [98, 346], "corpu": [99, 102, 114, 123, 126, 149, 159, 174, 177, 178, 180, 244, 347, 350, 363, 373, 376, 399, 408, 424, 427, 430, 495, 512], "algorithm": [99, 114, 123, 137, 155, 178, 179, 180, 181, 347, 363, 373, 387, 405, 427, 429, 430], "appear": [99, 114, 143, 158, 178, 347, 363, 393, 407, 427], "divid": [99, 114, 347, 363], "1000": [99, 114, 121, 137, 347, 363, 370, 387], "025": [99, 114, 155, 347, 363], "estim": [99, 114, 183, 199, 226, 231, 347, 363, 433, 448, 458, 467, 477, 506], "composition": [99, 114, 347, 363], "numiter": [99, 114, 347, 363], "equal": [99, 114, 347, 363], "doc2vec_gigaword_300": [99, 347], "06222493574023247": [99, 114, 347, 363], "011579325422644615": [99, 114, 347, 363], "009919632226228714": [99, 114, 347, 363], "109361454844": [99, 114, 347, 363], "doc2vec_wiki": [99, 347], "e5": [100, 101, 348, 349], "weakli": [100, 107, 348, 356], "tailor": [100, 103, 168, 348, 352, 418], "e5_smal": [100, 348], "unilm": [100, 107, 348, 356], "manner": [100, 123, 348, 373], "signal": [100, 102, 348, 350], "ccpair": [100, 348], "readili": [100, 348], "conduct": [100, 112, 348, 361], "extens": [100, 112, 167, 173, 224, 348, 361, 417, 423, 474], "56": [100, 244, 348, 495], "beir": [100, 348], "bm25": [100, 348], "baselin": [100, 113, 162, 348, 362, 411], "beat": [100, 348], "exist": [100, 102, 111, 112, 143, 161, 165, 178, 196, 198, 215, 228, 232, 248, 348, 350, 360, 361, 393, 410, 415, 427, 445, 447, 465, 478, 483, 499], "royokong": [101, 349], "bridg": [101, 349], "modal": [101, 349], "gap": [101, 168, 349, 418], "even": [101, 123, 129, 161, 164, 172, 174, 349, 373, 378, 410, 414, 422, 424], "exclus": [101, 143, 172, 349, 393, 422], "yield": [101, 349], "e5v": [101, 349], "e5v_int4": [101, 349], "nsummari": [101, 349], "imageprompt": [101, 349], "textprompt": [101, 349], "sent": [101, 123, 349, 373], "textdesc": [101, 349], "sit": [101, 128, 132, 158, 349, 377, 382, 407], "nullimagedf": [101, 349], "sparkcontext": [101, 349], "engin": [101, 166, 167, 185, 208, 215, 308, 349, 416, 417, 434, 465], "elmo": [102, 350], "billion": [102, 160, 162, 163, 164, 167, 170, 171, 173, 350, 409, 411, 413, 414, 417, 420, 421, 423], "lookup": [102, 115, 118, 128, 157, 158, 179, 180, 215, 218, 350, 364, 367, 377, 406, 407, 429, 430, 465, 468], "word_emb": [102, 350], "shape": [102, 350], "batch_siz": [102, 350], "max_length": [102, 350], "lstm_outputs1": [102, 350], "lstm": [102, 138, 350, 388], "lstm_outputs2": [102, 350], "trainabl": [102, 350], "contextu": [102, 159, 164, 168, 178, 350, 408, 414, 418, 427], "characterist": [102, 231, 350], "syntax": [102, 350], "vari": [102, 143, 172, 350, 393, 422], "linguist": [102, 191, 350, 441], "polysemi": [102, 350], "bilm": [102, 350], "six": [102, 179, 180, 350, 429, 430], "textual": [102, 103, 112, 167, 231, 350, 352, 361, 417, 482], "entail": [102, 350], "expos": [102, 350], "crucial": [102, 111, 112, 350, 360, 361], "semi": [102, 350], "662458181381226e": [102, 350], "2541114091873169": [102, 350], "6275503039360046": [102, 350], "5787073969841": [102, 350], "19154725968837738": [102, 350], "22998669743537903": [102, 350], "2894386649131775": [102, 350], "21524395048618": [102, 350], "10400570929050446": [102, 350], "12288510054349899": [102, 350], "07056470215320587": [102, 350], "246389418840": [102, 350], "49932169914245605": [102, 350], "12706467509269714": [102, 350], "30969417095184326": [102, 350], "2643227577209": [102, 350], "8871506452560425": [102, 350], "20039963722229004": [102, 350], "0601330995559692": [102, 350], "0348707810044": [102, 350], "instructor": [103, 352], "finetun": [103, 104, 118, 172, 352, 353, 367, 422], "financ": [103, 352], "sota": [103, 112, 118, 352, 361, 367], "divers": [103, 113, 159, 162, 164, 173, 174, 352, 362, 408, 411, 414, 423, 424, 503], "medicin": [103, 352], "instructor_bas": [103, 352], "summar": [103, 104, 123, 159, 160, 162, 166, 174, 215, 248, 308, 352, 353, 373, 408, 409, 411, 416, 424, 465], "embedd": [103, 352], "hkunlp": [103, 352], "explain": [103, 228, 352, 478, 502, 509, 511], "special": [103, 172, 178, 191, 352, 422, 427, 441, 472, 507], "330": [103, 352], "mixtur": [103, 168, 172, 352, 418, 422], "66": [103, 139, 352, 389], "unseen": [103, 352], "suggest": [103, 162, 352, 411], "mitig": [103, 112, 352, 361], "io": [103, 172, 352, 422], "dynam": [103, 157, 158, 166, 215, 308, 352, 406, 407, 416, 465], "scalar": [103, 352], "degre": [103, 352], "freedom": [103, 352], "horava": [103, 352], "lifshitz": [103, 352], "graviti": [103, 352], "iz": [104, 353], "beltagi": [104, 353], "matthew": [104, 353], "arman": [104, 353], "cohan": [104, 353], "checkpoint": [104, 169, 353, 419], "mlm": [104, 105, 353, 354], "096": [104, 353], "longformer_base_4096": [104, 353], "unabl": [104, 353], "quadrat": [104, 353], "linearli": [104, 353], "easi": [104, 353], "thousand": [104, 165, 168, 353, 415, 418], "drop": [104, 182, 353, 432], "motiv": [104, 353], "global": [104, 168, 353, 418], "text8": [104, 353], "enwik8": [104, 353], "wikihop": [104, 353], "triviaqa": [104, 353], "led": [104, 108, 109, 123, 353, 357, 358, 373], "found": [104, 115, 123, 179, 186, 194, 242, 353, 364, 373, 429, 436, 443, 492, 509], "18792399764060974": [104, 108, 353, 357], "14591649174690247": [104, 108, 353, 357], "20547787845134735": [104, 108, 353, 357], "1468472778797": [104, 108, 353, 357], "22845706343650818": [104, 108, 353, 357], "18073144555091858": [104, 108, 353, 357], "09725798666477203": [104, 108, 353, 357], "0417917296290": [104, 108, 353, 357], "07037967443466187": [104, 108, 353, 357], "14801117777824402": [104, 108, 353, 357], "03603338822722435": [104, 108, 353, 357], "17893412709": [104, 108, 353, 357], "08734266459941864": [104, 108, 353, 357], "2486150562763214": [104, 108, 353, 357], "009067727252840996": [104, 108, 353, 357], "24408400058": [104, 108, 353, 357], "22409197688102722": [104, 108, 353, 357], "4312366545200348": [104, 108, 353, 357], "1401449590921402": [104, 108, 353, 357], "356410235166549": [104, 108, 353, 357], "adopt": [105, 167, 354, 417], "permut": [105, 118, 354, 367], "inherit": [105, 309, 354, 425, 459, 477], "advantag": [105, 205, 354, 455], "all_mpnet_base_v2": [105, 354], "neglect": [105, 118, 354, 367], "plm": [105, 354], "doe": [105, 116, 123, 136, 165, 166, 168, 202, 205, 235, 354, 365, 373, 386, 415, 416, 418, 452, 455, 486, 507, 510, 511], "full": [105, 107, 118, 172, 173, 230, 232, 354, 356, 367, 422, 423, 481, 506], "thu": [105, 123, 354, 373], "suffer": [105, 118, 354, 367], "discrep": [105, 118, 354, 367], "auxiliari": [105, 354], "160gb": [105, 354], "down": [105, 138, 230, 354, 388, 481, 506, 507], "stream": [105, 143, 157, 158, 161, 215, 354, 393, 406, 407, 410, 465], "experiment": [105, 123, 354, 373], "022502584": [105, 354], "078291744": [105, 354], "023030775": [105, 354], "0051000593": [105, 354], "080340415": [105, 354], "039": [105, 354], "041702367": [105, 354], "0010974605": [105, 354], "015534201": [105, 354], "07092203": [105, 354], "0017729357": [105, 354], "04661": [105, 354], "mxbai": [106, 355], "mxbai_large_v1": [106, 355], "hello": [106, 111, 112, 128, 132, 157, 160, 185, 204, 246, 355, 360, 361, 377, 382, 406, 409, 434, 454, 497], "50387806": [106, 111, 112, 355, 360, 361], "5861606": [106, 111, 112, 355, 360, 361], "35129607": [106, 111, 112, 355, 360, 361], "76046336": [106, 111, 112, 355, 360, 361], "32446072": [106, 111, 112, 355, 360, 361], "117674336": [106, 111, 112, 355, 360, 361], "6660665": [106, 111, 112, 355, 360, 361], "961762": [106, 111, 112, 355, 360, 361], "24854276": [106, 111, 112, 355, 360, 361], "1018044": [106, 111, 112, 355, 360, 361], "6569202": [106, 111, 112, 355, 360, 361], "027635604": [106, 111, 112, 355, 360, 361], "1915": [106, 111, 112, 355, 360, 361], "cls_avg": [106, 111, 112, 355, 360, 361], "avg": [106, 111, 112, 355, 360, 361], "nomic": [107, 356], "8192": [107, 356], "ada": [107, 144, 356, 394], "002": [107, 144, 356, 394], "short": [107, 112, 230, 231, 356, 361, 481], "nomic_embed_v1": [107, 356], "technic": [107, 111, 169, 172, 356, 360, 419, 422], "report": [107, 108, 109, 111, 113, 159, 169, 172, 228, 356, 357, 358, 360, 362, 408, 419, 422, 478, 502], "reproduc": [107, 165, 228, 356, 415, 478, 502, 503], "opendata": [107, 356], "licens": [107, 167, 173, 356, 417, 423], "loader": [107, 356], "235": [107, 356], "replic": [107, 108, 109, 159, 356, 357, 358, 408], "embedtext": [107, 356], "nomicai": [107, 356], "contrastor": [107, 356], "robustli": [108, 109, 140, 357, 358, 390], "yinhan": [108, 109, 357, 358], "myle": [108, 109, 116, 117, 357, 358, 365, 366], "ott": [108, 109, 116, 117, 357, 358, 365, 366], "naman": [108, 109, 116, 117, 357, 358, 365, 366], "goyal": [108, 109, 116, 117, 357, 358, 365, 366], "jingfei": [108, 109, 357, 358], "du": [108, 109, 125, 357, 358, 375], "mandar": [108, 109, 357, 358], "joshi": [108, 109, 357, 358], "danqi": [108, 109, 357, 358], "omer": [108, 109, 357, 358], "levi": [108, 109, 357, 358], "mike": [108, 109, 357, 358], "lewi": [108, 109, 357, 358], "luke": [108, 109, 116, 117, 357, 358, 365, 366], "zettlemoy": [108, 109, 116, 117, 357, 358, 365, 366], "veselin": [108, 109, 116, 117, 357, 358, 365, 366], "stoyanov": [108, 109, 116, 117, 357, 358, 365, 366], "hyperparamet": [108, 109, 357, 358], "mini": [108, 109, 171, 357, 358, 421], "roberta_bas": [108, 357], "bpe": [108, 357], "gain": [108, 109, 116, 117, 159, 165, 357, 358, 365, 366, 408, 415], "care": [108, 109, 188, 357, 358, 438], "comparison": [108, 109, 113, 172, 182, 357, 358, 362, 422, 432], "privat": [108, 109, 357, 358, 472], "impact": [108, 109, 357, 358], "carefulli": [108, 109, 143, 173, 357, 358, 393, 423], "undertrain": [108, 109, 357, 358], "highlight": [108, 109, 357, 358], "previous": [108, 109, 123, 172, 357, 358, 373, 422], "overlook": [108, 109, 357, 358], "rais": [108, 109, 123, 133, 138, 228, 337, 357, 358, 373, 383, 388, 478], "sent_roberta_bas": [109, 358], "embeddingssent": [110, 359], "22093398869037628": [110, 359], "25130119919776917": [110, 359], "41810303926467896": [110, 359], "380883991718": [110, 359], "snowflak": [111, 360], "arctic": [111, 360], "snowflake_artic_m": [111, 360], "accur": [111, 113, 155, 159, 179, 360, 362, 405, 408, 429], "deriv": [111, 180, 360, 430], "400m": [111, 360], "public": [111, 121, 235, 248, 360, 370, 486, 506], "1m": [111, 360], "triplet": [111, 360], "harm": [111, 360], "mine": [111, 165, 168, 360, 415, 418], "shortli": [111, 360], "uae": [112, 361], "satur": [112, 361], "uae_large_v1": [112, 361], "st": [112, 361], "vanish": [112, 361], "gradient": [112, 137, 361, 387], "issu": [112, 191, 251, 361, 441], "idea": [112, 118, 361, 367], "advers": [112, 361], "imped": [112, 361], "hinder": [112, 361], "furthermor": [112, 118, 172, 361, 367, 422], "examin": [112, 361], "scenario": [112, 155, 249, 361, 405, 500], "were": [112, 115, 138, 172, 228, 361, 364, 388, 422, 478, 502], "uae_smal": [112, 361], "tfhub_us": [113, 362], "op": [113, 362], "lingual": [113, 116, 117, 123, 125, 166, 308, 362, 365, 366, 373, 375, 416], "trade": [113, 116, 117, 362, 365, 366], "tend": [113, 362], "With": [113, 118, 123, 173, 362, 367, 373, 423], "minim": [113, 140, 166, 308, 362, 390, 416], "encourag": [113, 164, 362, 414], "weat": [113, 362], "bia": [113, 143, 157, 158, 172, 215, 362, 393, 406, 407, 422, 465], "freeli": [113, 362], "04616805538535118": [113, 362], "022307956591248512": [113, 362], "044395286589860916": [113, 362], "0016493503": [113, 362], "changeabl": 113, "nor": [113, 123, 373], "word2vec_gigaword_300": [114, 363], "word2vec_wiki": [114, 363], "setstoragepath": [115, 128, 208, 218, 364, 377, 468], "line": [115, 120, 128, 132, 143, 152, 154, 178, 230, 231, 234, 239, 240, 242, 244, 364, 368, 377, 382, 393, 402, 404, 427, 481, 485, 491, 492, 495], "39658191506190343": [115, 364], "630968081620067": [115, 364], "5393722253731201": [115, 364], "8428180123359783": [115, 364], "7535235923631415": [115, 364], "9699218875629833": [115, 364], "10397182122983872": [115, 364], "11833962569383116": [115, 364], "stress": [115, 364], "0492683418305907": [115, 364], "9415954572751959": [115, 364], "47624463167525755": [115, 364], "16790967216778263": [115, 364], "induc": [115, 364], "1535748762292387": [115, 364], "33498936903209897": [115, 364], "9235178224122094": [115, 364], "1158772920395934": [115, 364], "dump": [115, 364], "disk": [115, 364, 506, 507], "10000": [115, 364], "random_embeddings_dim4": [115, 364], "setstorageref": [115, 208, 218, 364, 468], "glove_4d": [115, 364], "setdimens": [115, 208, 215, 364, 465], "patient": [115, 364], "diagnos": [115, 364], "diabet": [115, 364], "9439099431037903": [115, 364], "4707513153553009": [115, 364], "806300163269043": [115, 364], "16176554560661316": [115, 364], "7966810464859009": [115, 364], "5551124811172485": [115, 364], "8861005902290344": [115, 364], "28284206986427307": [115, 364], "025029370561242104": [115, 364], "35177749395370483": [115, 364], "052506182342767715": [115, 364], "1887107789516449": [115, 364], "08617766946554184": [115, 364], "8399239182472229": [115, 364], "5395117998123169": [115, 364], "7864698767662048": [115, 364], "6599600911140442": [115, 364], "16109347343444824": [115, 364], "6041093468666077": [115, 364], "8913561105728149": [115, 364], "5955275893211365": [115, 364], "01899011991918087": [115, 364], "4397728443145752": [115, 364], "8911281824111938": [115, 364], "9840458631515503": [115, 364], "7599489092826843": [115, 364], "9417727589607239": [115, 364], "8624503016471863": [115, 364], "glove_100d": [115, 138, 364, 388], "There": [115, 120, 121, 158, 186, 364, 368, 370, 407, 436, 504, 506, 507, 512], "conveni": [115, 364], "coverag": [115, 213, 364, 462], "stat": [115, 364], "whole": [115, 169, 218, 234, 364, 419, 468, 485], "570580005645752": [115, 364], "44183000922203064": [115, 364], "7010200023651123": [115, 364], "417129993438720": [115, 364], "542639970779419": [115, 364], "4147599935531616": [115, 364], "0321999788284302": [115, 364], "4024400115013122": [115, 364], "2708599865436554": [115, 364], "04400600120425224": [115, 364], "020260000601410866": [115, 364], "17395000159": [115, 364], "6191999912261963": [115, 364], "14650000631809235": [115, 364], "08592499792575836": [115, 364], "2629800140857": [115, 364], "3397899866104126": [115, 364], "20940999686717987": [115, 364], "46347999572753906": [115, 364], "6479200124740": [115, 364], "storage_ref": [115, 120, 128, 218, 364, 368, 377, 468], "embeddings_col": [115, 364], "coverateresult": [115, 364], "wordsoverallcoverag": [115, 364], "resultdf": [115, 232, 364, 483], "output_col": [115, 364], "wordscoverag": [115, 364], "cov_embed": [115, 364], "alexi": [116, 117, 365, 366], "conneau": [116, 117, 365, 366], "kartikai": [116, 117, 365, 366], "khandelw": [116, 117, 365, 366], "vishrav": [116, 117, 365, 366], "chaudhari": [116, 117, 365, 366], "guillaum": [116, 117, 365, 366], "wenzek": [116, 117, 365, 366], "francisco": [116, 117, 123, 365, 366, 373], "guzman": [116, 365], "edouard": [116, 117, 365, 366], "grave": [116, 117, 365, 366], "5tb": [116, 117, 365, 366], "commoncrawl": [116, 117, 365, 366], "xlm_roberta_bas": [116, 365], "abl": [116, 165, 174, 228, 365, 415, 424, 478, 505], "terabyt": [116, 117, 365, 366], "r": [116, 117, 123, 160, 365, 366, 373, 409], "mbert": [116, 117, 365, 366], "xnli": [116, 117, 365, 366], "mlqa": [116, 117, 365, 366], "particularli": [116, 117, 159, 172, 365, 366, 408, 422], "swahili": [116, 117, 365, 366], "urdu": [116, 117, 365, 366], "capac": [116, 117, 162, 165, 365, 366, 411, 415], "dilut": [116, 117, 365, 366], "sacrif": [116, 117, 365, 366], "ri": [116, 117, 365, 366], "05969233065843582": [116, 365], "030789051204919815": [116, 365], "04443822056055069": [116, 365], "09564960747": [116, 365], "038839809596538544": [116, 365], "011712731793522835": [116, 365], "019954433664679527": [116, 365], "0667808502": [116, 365], "03952755779027939": [116, 365], "03455188870429993": [116, 365], "019103847444057465": [116, 365], "04311436787": [116, 365], "09579929709434509": [116, 365], "02494969218969345": [116, 365], "014753809198737144": [116, 365], "10259044915": [116, 365], "004710011184215546": [116, 365], "022148698568344116": [116, 365], "011723337695002556": [116, 365], "013356896": [116, 365], "guzm\u00e3": [117, 366], "sent_xlm_roberta_bas": [117, 366], "xl": [118, 230, 232, 237, 240, 367, 481, 483, 491], "exhibit": [118, 367], "involv": [118, 152, 169, 367, 402, 419], "rank": [118, 161, 176, 178, 367, 410, 425, 427], "xlnet_large_cas": [118, 367], "xlnet_base_cas": [118, 367], "zihangdai": [118, 367], "denois": [118, 159, 367, 408], "autoencod": [118, 159, 367, 408], "corrupt": [118, 159, 367, 408], "pro": [118, 367], "con": [118, 367], "likelihood": [118, 143, 367, 393], "overcom": [118, 367], "formul": [118, 367], "6287205219268799": [118, 367], "4865287244319916": [118, 367], "186111718416214": [118, 367], "234187275171279": [118, 367], "1967450380325317": [118, 367], "2746637463569641": [118, 367], "9481253027915955": [118, 367], "3431355059146881": [118, 367], "0777631998062134": [118, 367], "092679977416992": [118, 367], "5331977605819702": [118, 367], "11190271377563": [118, 367], "8349916934967041": [118, 367], "45627787709236145": [118, 367], "7890847325325012": [118, 367], "028069257736": [118, 367], "134845569729805": [118, 367], "11672890186309814": [118, 367], "4945235550403595": [118, 367], "66587203741073": [118, 367], "alphabet": [119, 120, 141, 368, 391], "patternsresourc": [119, 120, 368], "sentencematch": [119, 120, 368], "setalphabetresourc": [119, 120, 368], "setpatternsresourc": [119, 120, 368], "setsentencematch": [119, 120, 368], "setusestorag": [119, 120, 368], "usestorag": [119, 120, 368], "entityrul": [120, 368], "exact": [120, 128, 132, 143, 368, 377, 382, 393], "definit": [120, 140, 242, 368, 390, 492], "json": [120, 143, 204, 206, 228, 246, 368, 393, 454, 456, 478, 497], "jsonl": [120, 368], "might": [120, 138, 191, 368, 388, 441, 511], "rule": [120, 127, 129, 131, 154, 184, 186, 188, 214, 219, 232, 368, 378, 381, 404, 436, 438, 464, 469], "winterfel": [120, 368], "jon": [120, 368], "snow": [120, 139, 158, 178, 368, 389, 407, 427], "stark": [120, 368], "eddard": [120, 368], "rocksdb": [120, 368], "lord": [120, 368], "29": [120, 139, 191, 244, 246, 368, 389, 441, 495, 497], "38": [120, 171, 246, 368, 421, 497], "plain": [120, 230, 231, 232, 368, 481, 482, 483, 512], "entity_pattern": [120, 368], "graph": [121, 138, 166, 178, 183, 198, 308, 370, 388, 416, 427, 433, 447], "node": [121, 208, 212, 370, 461], "relev": [121, 123, 143, 155, 370, 373, 393], "taken": [121, 370], "implicitli": [121, 370], "travers": [121, 370], "neighbor": [121, 176, 370, 425], "symbol": [121, 178, 191, 370, 427, 441], "coordin": [121, 151, 240, 370, 401, 491], "remoteloc": [121, 370], "rdf": [121, 198, 370, 447], "nertagg": [121, 137, 138, 139, 370, 387, 388, 389], "morn": [121, 198, 370, 447], "flight": [121, 198, 370, 447], "denver": [121, 198, 370, 447], "18": [121, 129, 130, 133, 136, 139, 158, 202, 220, 234, 370, 378, 380, 383, 386, 389, 407, 452, 470, 485, 505], "path1": [121, 370], "iob": [121, 136, 137, 138, 370, 386, 387, 388], "iob2": [121, 136, 370, 386], "getstopword": [122, 123, 373], "maxngram": [122, 123, 373], "minngram": [122, 123, 373], "nkeyword": [122, 123, 373], "setmaxngram": [122, 123, 373], "setminngram": [122, 123, 373], "setnkeyword": [122, 123, 373], "yake": [123, 373], "independ": [123, 179, 180, 186, 373, 429, 430, 436], "grow": [123, 373], "autom": [123, 167, 373, 417], "adequ": [123, 373], "emerg": [123, 159, 174, 373, 408, 424], "tool": [123, 143, 159, 172, 173, 204, 373, 393, 408, 422, 423, 454], "thesauri": [123, 373], "neither": [123, 373], "written": [123, 166, 308, 373, 416], "plethora": [123, 373], "situat": [123, 152, 373, 402], "access": [123, 169, 204, 373, 419, 454], "restrict": [123, 170, 373, 420], "therefor": [123, 373, 510], "boundari": [123, 151, 152, 155, 188, 191, 230, 231, 232, 373, 401, 402, 405, 438, 441, 481], "detector": [123, 129, 154, 373, 378, 404], "section": [123, 195, 203, 231, 232, 373, 444, 453, 502, 504, 510], "tweakabl": [123, 373], "upper": [123, 373], "bound": [123, 151, 152, 155, 373, 401, 402, 405], "occurr": [123, 214, 373, 464], "campo": [123, 373], "mangaravit": [123, 373], "pasquali": [123, 373], "jatowt": [123, 373], "jorg": [123, 373], "nune": [123, 373], "journal": [123, 191, 373, 441], "elsevi": [123, 373], "vol": [123, 373], "509": [123, 373], "pp": [123, 191, 373, 441], "257": [123, 373], "289": [123, 373], "turn": [123, 207, 373, 457, 506], "come": [123, 136, 143, 163, 169, 373, 386, 393, 413, 419], "fly": [123, 373], "demand": [123, 373], "within": [123, 149, 155, 159, 162, 188, 194, 232, 373, 399, 405, 408, 411, 438, 443, 483], "resort": [123, 373], "alwai": [123, 143, 164, 169, 170, 171, 172, 174, 337, 373, 393, 414, 419, 420, 421, 422, 424], "solut": [123, 167, 373, 417], "articl": [123, 178, 373, 427], "rest": [123, 136, 373, 386], "extern": [123, 126, 131, 132, 137, 138, 178, 183, 205, 219, 242, 243, 244, 245, 250, 373, 376, 381, 382, 388, 427, 433, 455, 469, 492, 493, 495, 496], "merit": [123, 373], "ten": [123, 373], "carri": [123, 373], "twenti": [123, 373], "setcontextchar": [123, 184, 188, 373, 438], "acquir": [123, 373], "kaggl": [123, 173, 373, 423], "platform": [123, 143, 144, 228, 373, 393, 394, 478, 504], "host": [123, 373], "transact": [123, 373], "somewhat": [123, 373], "vagu": [123, 373], "confer": [123, 373], "week": [123, 129, 130, 185, 373, 378, 380, 434], "announc": [123, 139, 373, 389], "earli": [123, 373], "tomorrow": [123, 129, 130, 373, 378, 380], "founder": [123, 373], "ceo": [123, 373], "anthoni": [123, 373], "goldbloom": [123, 373], "declin": [123, 373], "deni": [123, 373], "acquisit": [123, 373], "happen": [123, 373], "rumor": [123, 373], "scientist": [123, 373], "ben": [123, 373], "hamner": [123, 373], "2010": [123, 373], "servic": [123, 143, 166, 308, 373, 393, 416], "got": [123, 373], "few": [123, 188, 244, 373, 438, 495, 512], "competitor": [123, 373], "drivendata": [123, 373], "topcod": [123, 373], "hackerrank": [123, 373], "manag": [123, 235, 250, 373, 486, 503], "stai": [123, 373], "ahead": [123, 373], "nich": [123, 373], "bui": [123, 243, 373, 493], "commun": [123, 163, 164, 169, 170, 373, 413, 414, 419, 420], "mindshar": [123, 373], "too": [123, 154, 373, 404, 505], "plenti": [123, 373], "bit": [123, 152, 373, 402, 511], "histori": [123, 152, 178, 373, 402, 427], "earlier": [123, 373], "month": [123, 129, 130, 244, 373, 378, 380, 495, 512], "team": [123, 166, 228, 308, 373, 416, 478, 502], "around": [123, 158, 168, 373, 407, 418], "youtub": [123, 373], "interest": [123, 169, 170, 171, 172, 373, 419, 420, 421, 422], "kernel": [123, 373], "On": [123, 161, 162, 166, 308, 373, 410, 411, 416], "analyz": [123, 155, 373, 405], "compani": [123, 166, 308, 373, 416], "script": [123, 165, 373, 415], "centric": [123, 165, 168, 373, 415, 418], "job": [123, 194, 373, 443], "board": [123, 149, 244, 373, 399, 495], "unclear": [123, 373], "crunchbas": [123, 373], "pitchbook": [123, 373], "launch": [123, 373], "investor": [123, 373], "ventur": [123, 373], "sv": [123, 373], "angel": [123, 161, 373, 410], "levchin": [123, 373], "naravik": [123, 373], "chie": [123, 373], "economist": [123, 373], "hal": [123, 373], "varian": [123, 373], "khosla": [123, 373], "yuri": [123, 373], "milner": [123, 373], "resulttupl": [123, 373], "ascend": [123, 373], "orderbi": [123, 373], "32051516486864573": [123, 373], "37786450577630676": [123, 373], "39922830978423146": [123, 373], "40224744669493756": [123, 373], "41584827825302534": [123, 373], "danish": [123, 182, 373, 432], "dutch": [123, 182, 373, 432], "finnish": [123, 182, 373, 432], "german": [123, 182, 242, 373, 432, 492, 512], "hungarian": [123, 182, 373, 432], "italian": [123, 143, 178, 182, 373, 393, 427, 432], "norwegian": [123, 182, 373, 432], "portugues": [123, 182, 373, 432], "russian": [123, 182, 373, 432], "spanish": [123, 182, 373, 432], "swedish": [123, 182, 373, 432], "turkish": [123, 182, 373, 432], "ld": [125, 371, 375], "identif": [125, 218, 375, 468], "rnn": [125, 375], "tatoeba": [125, 375], "wiki": [125, 375], "languagedetector": [125, 375], "ld_wiki_tatoeba_cnn_21": [125, 375], "java": [125, 235, 250, 309, 375, 425, 458, 459, 467, 473, 474, 477, 486], "scala": [125, 309, 375, 425, 458, 459, 467, 473, 477], "program": [125, 173, 375, 423], "biblioth\u00e8qu": [125, 375], "traitement": [125, 375], "pour": [125, 375], "le": [125, 166, 308, 375, 416], "avanc\u00e9": [125, 375], "langag": [125, 375], "naturel": [125, 375], "programm": [125, 375], "ist": [125, 375], "ein": [125, 375], "textverarbeitungsbibliothek": [125, 375], "f\u00fcr": [125, 375], "fortgeschritten": [125, 375], "nat\u00fcrlich": [125, 375], "sprachverarbeitung": [125, 375], "die": [125, 375], "programmiersprachen": [125, 375], "und": [125, 375], "lemma": [126, 154, 202, 234, 243, 376, 404, 452, 485, 493, 507, 510, 511], "predefin": [126, 128, 131, 132, 154, 376, 377, 381, 382, 404], "lemmas_smal": [126, 154, 376, 404], "keydelimit": 126, "valuedelimit": 126, "correspend": [126, 376], "key_delimit": [126, 376], "value_delimit": [126, 376], "fromlemma": [126, 376], "lemma_antbnc": [126, 376], "mergeoverlap": [127, 128, 132, 377, 382], "setent": [127, 128, 132, 134, 135, 185, 377, 382, 385, 434], "setmergeoverlap": [127, 128, 132, 377, 382], "settoken": [127, 128, 377], "searchtri": [127, 128, 132, 377, 382], "aggressivematch": [127, 129, 378], "anchordatedai": [127, 129, 130, 378, 380], "anchordatemonth": [127, 129, 130, 378, 380], "anchordateyear": [127, 129, 130, 378, 380], "defaultdaywhenmiss": [127, 129, 130, 378, 380], "inputformat": [127, 129, 192, 206, 378, 456], "outputformat": [127, 129, 378], "readmonthfirst": [127, 129, 130, 378, 380], "relaxedfactorystrategi": [127, 129, 378], "setaggressivematch": [127, 129, 378], "setanchordatedai": [127, 129, 130, 378, 380], "setanchordatemonth": [127, 129, 130, 378, 380], "setanchordateyear": [127, 129, 130, 378, 380], "setdefaultdaywhenmiss": [127, 129, 378], "setinputformat": [127, 129, 192, 206, 378, 456], "setoutputformat": [127, 129, 130, 378, 380], "setreadmonthfirst": [127, 129, 378], "setrelaxedfactorystrategi": [127, 129, 378], "setsourcelanguag": [127, 129, 378], "sourcelanguag": [127, 129, 378], "externalrul": [127, 131, 381], "setexternalrul": [127, 131, 381], "setrul": [127, 131, 381], "setstrategi": [127, 131, 381], "buildfromtoken": [127, 132, 382], "entityvalu": [127, 132, 382], "setbuildfromtoken": [127, 132, 382], "setentityvalu": [127, 132, 382], "trie": [128, 377], "dolor": [128, 132, 377, 382], "magna": [128, 132, 377, 382], "aliqua": [128, 132, 377, 382], "laborum": [128, 132, 377, 382], "entityextractor": [128, 132, 185, 377, 382, 434], "59": [128, 129, 130, 132, 377, 378, 380, 382], "tokenizer_model": [128, 377], "btm": [128, 377], "tmvocab": [128, 377], "tmedg": [128, 377], "tmnode": [128, 377], "1978": [129, 130, 378, 380], "28": [129, 130, 136, 202, 220, 232, 234, 246, 378, 380, 386, 452, 470, 483, 485, 497, 505], "1984": [129, 130, 378, 380], "04": [129, 130, 378, 380], "02": [129, 130, 378, 380], "1980": [129, 130, 378, 380], "31st": [129, 130, 378, 380], "april": [129, 130, 378, 380], "year": [129, 130, 162, 163, 185, 244, 378, 380, 411, 413, 434, 495], "2008": [129, 130, 378, 380], "fri": [129, 130, 378, 380], "1997": [129, 130, 378, 380], "jan": [129, 130, 378, 380], "sun": [129, 130, 378, 380], "1st": [129, 130, 378, 380], "thursdai": [129, 130, 378, 380], "wednesdai": [129, 130, 378, 380], "todai": [129, 130, 160, 168, 204, 246, 378, 380, 409, 418, 454, 497], "yesterdai": [129, 130, 378, 380], "0600h": [129, 130, 378, 380], "06": [129, 130, 378, 380], "00": [129, 130, 378, 380], "6pm": [129, 130, 378, 380], "23": [129, 130, 131, 139, 149, 244, 245, 246, 378, 380, 381, 389, 399, 495, 496, 497, 512], "1988": [129, 130, 378, 380], "31": [129, 130, 131, 139, 149, 244, 378, 380, 381, 389, 399, 495], "dateformat": [129, 130, 378, 380], "desir": [129, 130, 378, 380], "yyyi": [129, 130, 378, 380], "mm": [129, 130, 191, 378, 380, 441], "dd": [129, 130, 131, 378, 380, 381], "anchor": [129, 130, 378, 380], "januari": [129, 130, 378, 380], "15": [129, 239, 246, 378, 490, 497], "aggress": [129, 378], "attempt": [129, 179, 378, 429], "ambigu": [129, 378], "juli": [129, 378], "07": [129, 378], "05": [129, 158, 239, 378, 407, 490], "2015": [129, 378], "relax": [129, 158, 378, 407], "Not": [129, 138, 205, 378, 388, 455], "5th": [129, 378], "match_first": [129, 131, 208, 214, 378, 381, 464], "exhaust": [129, 378], "saw": [130, 380], "visit": [130, 143, 380, 393], "57": [130, 139, 380, 389], "65": [130, 139, 380, 389], "d": [131, 141, 188, 232, 381, 391, 438, 483, 504], "1970": [131, 381], "match_al": [131, 208, 214, 381, 464], "match_complet": [131, 208, 214, 381, 464], "ceremoni": [131, 381], "71": [131, 381], "short_dat": [131, 381], "regardless": [132, 382], "27": [132, 149, 151, 244, 382, 399, 401, 495], "48": [132, 191, 246, 382, 441, 497], "null": [133, 383], "empti": [133, 158, 176, 183, 194, 202, 230, 231, 383, 407, 425, 443, 452, 481], "join": [133, 149, 204, 206, 230, 231, 244, 383, 399, 454, 456, 481, 482, 495], "minepoch": [134, 135, 137, 138, 385, 387, 388], "setminepoch": [134, 135, 137, 385, 387], "setrandomse": [134, 135, 138, 145, 146, 156, 166, 385, 388, 395, 416], "nerhasnoschema": [134, 136, 386], "preserveposit": [134, 136, 184, 187, 192, 207, 386, 437, 457], "setnerhasnoschema": [134, 136, 386], "setpreserveposit": [134, 136, 184, 187, 192, 207, 386, 437, 457], "setwhitelist": [134, 136, 184, 186, 386, 436], "whitelist": [134, 136, 184, 186, 386, 436], "c0": [134, 137, 387], "externalfeatur": [134, 137, 387], "includeconfid": [134, 137, 138, 387, 388], "l2": [134, 137, 387], "lossep": [134, 137, 387], "minw": [134, 137, 387], "setc0": [134, 137, 387], "setexternalfeatur": [134, 137, 387], "setincludeconfid": [134, 137, 138, 387, 388], "setl2": [134, 137, 387], "setlossep": [134, 137, 387], "setminw": [134, 137, 387], "bestmodelmetr": [134, 138, 388], "enablememoryoptim": [134, 138, 388], "includeallconfidencescor": [134, 138, 388], "setbestmodelmetr": [134, 138, 388], "setenablememoryoptim": [134, 138, 388], "setincludeallconfidencescor": [134, 138, 388], "setpo": [134, 138, 388], "setusebestmodel": [134, 138, 388], "setusecontrib": [134, 138, 388], "usebestmodel": [134, 138, 388], "usecontrib": [134, 138, 388], "nerword": [134, 139, 389], "newnerent": [134, 139, 389], "replaceent": [134, 139, 389], "setnerword": [134, 139, 389], "setnewnerent": [134, 139, 389], "setreplaceent": [134, 139, 389], "ignoreent": [134, 140, 390], "predictionthreshold": [134, 140, 390], "setentitydefinit": [134, 140, 390], "setpredictionthreshold": [134, 140, 390], "recogn": [135, 136, 137, 138, 139, 140, 178, 385, 386, 387, 388, 389, 390, 427], "friendli": [136, 143, 166, 308, 386, 393, 416], "outsid": [136, 386], "ekeu": [136, 137, 138, 202, 220, 234, 386, 387, 388, 452, 470, 485], "36": [136, 149, 202, 220, 234, 244, 246, 386, 399, 452, 470, 485, 495, 497], "baghdad": [136, 137, 138, 202, 220, 234, 386, 387, 388, 452, 470, 485], "37": [136, 202, 220, 234, 386, 452, 470, 485], "nercrf": [137, 387], "crf": [137, 138, 387, 388], "2003": [137, 138, 191, 242, 387, 388, 441, 492, 512], "exclud": [137, 138, 387, 388], "decai": [137, 138, 387, 388], "2250000": [137, 387], "ep": [137, 387], "confid": [137, 138, 140, 387, 388, 390], "trainingdata": [137, 138, 152, 179, 180, 242, 387, 388, 402, 429, 430, 492], "readdataset": [137, 138, 149, 191, 241, 242, 243, 244, 245, 246, 387, 388, 399, 441, 492, 493, 495, 496, 497, 512], "conll2003": [137, 138, 242, 387, 388, 492, 512], "eng": [137, 138, 242, 387, 388, 492, 512], "c0valu": [137, 387], "l2valu": [137, 387], "verbosevalu": [137, 387], "prerequisit": [137, 138, 139, 387, 388, 389, 506], "nerdl": [138, 388], "char": [138, 141, 152, 388, 391, 402], "bilstm": [138, 388], "tagger": [138, 244, 388, 495, 512], "rage": [138, 388], "contrib": [138, 388], "cell": [138, 206, 230, 231, 232, 388, 456, 481, 482], "slightli": [138, 152, 172, 388, 402, 422], "slow": [138, 388], "micro": [138, 388], "macro": [138, 388], "nermodel": [138, 388], "setnewresult": [139, 389], "overwritten": [139, 389], "lab": [139, 389], "42": [139, 149, 389, 399], "45": [139, 149, 244, 246, 389, 399, 495, 497], "47": [139, 244, 246, 389, 495, 497], "ner_overwritten": [139, 389], "cardin": [139, 389], "rw": [139, 389], "zeroshotn": [140, 390], "zer_shot_n": [140, 390], "entitydefinit": [140, 390], "citi": [140, 390], "town": [140, 390], "01f": [140, 390], "zero_shot_n": [140, 390], "hellen": [140, 390], "5328949": [140, 390], "9360068": [140, 390], "83294415": [140, 390], "45366877": [140, 390], "shortcut": [140, 390], "zero_shot_ner_roberta": [140, 390], "stem": [141, 181, 202, 234, 391, 431, 452, 485, 510, 511], "henc": [141, 391], "pl": [141, 391], "slang": [141, 391], "alphanumer": [141, 391], "za": [141, 391], "z": [141, 157, 158, 188, 215, 391, 406, 407, 438, 465], "brother": [141, 391], "dont": [141, 155, 391, 405], "sensit": [141, 179, 182, 188, 429, 432, 438], "bestof": [142, 143, 393], "echo": [142, 143, 393], "frequencypenalti": [142, 143, 157, 158, 208, 215, 393, 406, 407, 465], "logitbia": [142, 143, 393], "logprob": [142, 143, 393], "maxtoken": [142, 143, 393], "numberofcomplet": [142, 143, 393], "presencepenalti": [142, 143, 157, 158, 208, 215, 393, 406, 407, 465], "setbestof": [142, 143, 393], "setecho": [142, 143, 393], "setfrequencypenalti": [142, 143, 208, 215, 393, 465], "setlogitbia": [142, 143, 393], "setlogprob": [142, 143, 393], "setmaxtoken": [142, 143, 393], "setmodel": [142, 143, 144, 150, 152, 393, 394, 402], "setnumberofcomplet": [142, 143, 393], "setpresencepenalti": [142, 143, 208, 215, 393, 465], "setstop": [142, 143, 393], "setsuffix": [142, 143, 184, 186, 393, 436], "setus": [142, 143, 144, 393, 394], "suffix": [142, 143, 157, 158, 184, 186, 188, 215, 393, 406, 407, 436, 438, 465, 506], "request": [143, 144, 173, 230, 393, 394, 423, 481], "complet": [143, 157, 158, 173, 215, 228, 393, 406, 407, 423, 465, 478, 503, 506], "api": [143, 144, 251, 393, 394, 502, 506, 509], "executor": [143, 144, 393, 394], "insert": [143, 179, 180, 231, 393, 429, 430, 506], "nucleu": [143, 393], "mass": [143, 393], "penal": [143, 157, 158, 215, 393, 406, 407, 465], "topic": [143, 393], "verbatim": [143, 393], "best_of": [143, 393], "server": [143, 157, 158, 393, 406, 407, 511], "side": [143, 158, 161, 191, 393, 407, 410, 441], "abus": [143, 144, 393, 394], "davinci": [143, 393], "003": [143, 393], "empty_df": [143, 144, 393, 394], "sample_text": [143, 144, 393, 394], "restaur": [143, 154, 393, 404], "eateri": [143, 393], "dine": [143, 393], "sample_df": [143, 144, 393, 394], "258": [143, 393], "ni": [143, 204, 393, 454], "pleasur": [143, 393], "fiorita": [143, 393], "truli": [143, 169, 393, 419], "delight": [143, 393], "menu": [143, 393], "boast": [143, 393], "wonder": [143, 393], "classic": [143, 393], "dish": [143, 393], "exquisit": [143, 393], "prepar": [143, 193, 195, 201, 203, 393, 442, 444, 450, 453], "staff": [143, 154, 393, 404], "227": [143, 393], "barbecu": [143, 393], "joe": [143, 393], "dinner": [143, 393], "amaz": [143, 393], "pull": [143, 173, 393, 423], "pork": [143, 393], "smoke": [143, 393], "turkei": [143, 393], "brisket": [143, 393], "rib": [143, 393], "sandwich": [143, 393], "opt": [143, 393], "172": [143, 393], "overallr": [143, 393], "reviewbodi": [143, 393], "enjoi": [143, 158, 161, 393, 407, 410], "meal": [143, 393], "flavour": [143, 393], "beautifulli": [143, 158, 393, 407], "cannot": [143, 204, 393, 454], "candid": [143, 178, 179, 180, 188, 393, 427, 429, 430, 438], "consum": [143, 393], "quota": [143, 393], "ensur": [143, 167, 168, 173, 393, 417, 418, 423, 473], "max_token": [143, 393], "mathemat": [143, 161, 167, 172, 393, 410, 417, 422], "ban": [143, 393], "50256": [143, 393], "prevent": [143, 393], "endoftext": [143, 393], "plu": [143, 162, 393, 411], "determinist": [143, 393], "alter": [143, 393], "delici": [144, 394], "waiter": [144, 394], "002297497": [144, 394], "009297881": [144, 394], "015739758": [144, 394], "0076794787": [144, 394], "004737794": [144, 394], "01487661": [144, 394], "009856389": [144, 394], "03823238": [144, 394], "0069305706": [144, 394], "028610818": [144, 394], "025208998": [144, 394], "018138802": [144, 394], "0036271256": [144, 394], "025539026": [144, 394], "204275e": [144, 394], "016374426": [144, 394], "02828079": [144, 394], "0054073683": [144, 394], "009710415": [144, 394], "016399812": [144, 394], "015397037": [144, 394], "00427766": [144, 394], "006987691": [144, 394], "0072859847": [144, 394], "003874646": [144, 394], "018544989": [144, 394], "008752067": [144, 394], "022657635": [144, 394], "011493831": [144, 394], "023901584": [144, 394], "015638212": [144, 394], "0035192322": [144, 394], "034932107": [144, 394], "0041919798": [144, 394], "02612292": [144, 394], "021515233": [144, 394], "005715182": [144, 394], "011754045": [144, 394], "008453773": [144, 394], "004080913": [144, 394], "019179657": [144, 394], "014419649": [144, 394], "00893612": [144, 394], "0063911034": [144, 394], "045670684": [144, 394], "017884934": [144, 394], "005610462": [144, 394], "219344e": [144, 394], "02211182": [144, 394], "0039539794": [144, 394], "021007499": [144, 394], "017631067": [144, 394], "011696924": [144, 394], "02260686": [144, 394], "016336346": [144, 394], "017174106": [144, 394], "008466466": [144, 394], "0015922225": [144, 394], "025094759": [144, 394], "024967825": [144, 394], "007806412": [144, 394], "005794516": [144, 394], "022187982": [144, 394], "0029162979": [144, 394], "0060959826": [144, 394], "025564414": [144, 394], "008104706": [144, 394], "0010178483": [144, 394], "9823447e": [144, 394], "0046425937": [144, 394], "02074094": [144, 394], "013467647": [144, 394], "004626727": [144, 394], "016006319": [144, 394], "0166156": [144, 394], "008948814": [144, 394], "007616012": [144, 394], "013619968": [144, 394], "0069749975": [144, 394], "0052677416": [144, 394], "009881775": [144, 394], "04592455": [144, 394], "0030464048": [144, 394], "024003131": [144, 394], "02301305": [144, 394], "006981344": [144, 394], "023571556": [144, 394], "009938896": [144, 394], "006537077": [144, 394], "033332746": [144, 394], "002690991": [144, 394], "019928563": [144, 394], "0017596161": [144, 394], "001090835": [144, 394], "022683023": [144, 394], "005007528": [144, 394], "01540973": [144, 394], "031530287": [144, 394], "0054676617": [144, 394], "015980931": [144, 394], "0051471544": [144, 394], "019890483": [144, 394], "009386734": [144, 394], "0062133963": [144, 394], "031174876": [144, 394], "009405775": [144, 394], "015270104": [144, 394], "028864685": [144, 394], "021020193": [144, 394], "018303815": [144, 394], "0029210579": [144, 394], "012693353": [144, 394], "005102728": [144, 394], "049580235": [144, 394], "04300508": [144, 394], "1293065e": [144, 394], "0215787": [144, 394], "016894853": [144, 394], "0065434235": [144, 394], "041431103": [144, 394], "662815e": [144, 394], "03351045": [144, 394], "0128901": [144, 394], "010510096": [144, 394], "807209e": [144, 394], "01835459": [144, 394], "2869726e": [144, 394], "01309954": [144, 394], "011982525": [144, 394], "005813556": [144, 394], "0070194243": [144, 394], "008637827": [144, 394], "018456135": [144, 394], "5521466e": [144, 394], "019141577": [144, 394], "021896034": [144, 394], "02975322": [144, 394], "0043220865": [144, 394], "0015160623": [144, 394], "0052074483": [144, 394], "0149527695": [144, 394], "0213883": [144, 394], "018836936": [144, 394], "01105591": [144, 394], "0074636918": [144, 394], "022632249": [144, 394], "0036810723": [144, 394], "006286383": [144, 394], "025678653": [144, 394], "027773056": [144, 394], "03668379": [144, 394], "00445854": [144, 394], "013911915": [144, 394], "008015852": [144, 394], "0056739287": [144, 394], "010281616": [144, 394], "0057659554": [144, 394], "00872668": [144, 394], "010649723": [144, 394], "0787844e": [144, 394], "032164957": [144, 394], "023838118": [144, 394], "002641804": [144, 394], "030387888": [144, 394], "029626286": [144, 394], "016602905": [144, 394], "0021784967": [144, 394], "0010519617": [144, 394], "0116524985": [144, 394], "018519603": [144, 394], "007552545": [144, 394], "007419265": [144, 394], "0011090817": [144, 394], "0044331537": [144, 394], "009989669": [144, 394], "007533505": [144, 394], "0061943564": [144, 394], "0057088356": [144, 394], "028230017": [144, 394], "0042554466": [144, 394], "029321646": [144, 394], "024790118": [144, 394], "015676292": [144, 394], "018202268": [144, 394], "0075017717": [144, 394], "00865052": [144, 394], "0063942764": [144, 394], "0020118963": [144, 394], "036963046": [144, 394], "002335577": [144, 394], "020804405": [144, 394], "6888937": [144, 394], "019598536": [144, 394], "0034748053": [144, 394], "0067401705": [144, 394], "02835695": [144, 394], "023393849": [144, 394], "0071527045": [144, 394], "010586256": [144, 394], "0096088685": [144, 394], "009488282": [144, 394], "021337526": [144, 394], "6766098e": [144, 394], "019801632": [144, 394], "0022705235": [144, 394], "009558095": [144, 394], "0020753632": [144, 394], "708839e": [144, 394], "0066449703": [144, 394], "04130417": [144, 394], "011220924": [144, 394], "013391487": [144, 394], "027722282": [144, 394], "011366897": [144, 394], "4434706e": [144, 394], "015460504": [144, 394], "549375e": [144, 394], "01449581": [144, 394], "008529933": [144, 394], "018875016": [144, 394], "017745307": [144, 394], "009437508": [144, 394], "024587024": [144, 394], "013010687": [144, 394], "008993241": [144, 394], "005093208": [144, 394], "024218917": [144, 394], "024066597": [144, 394], "0037857925": [144, 394], "031047942": [144, 394], "015003543": [144, 394], "023266915": [144, 394], "03021018": [144, 394], "0069115306": [144, 394], "010154682": [144, 394], "011430364": [144, 394], "030311726": [144, 394], "01764376": [144, 394], "0020975766": [144, 394], "006746517": [144, 394], "009748495": [144, 394], "01665368": [144, 394], "003658859": [144, 394], "02789999": [144, 394], "0040682196": [144, 394], "0031289116": [144, 394], "029905539": [144, 394], "016882159": [144, 394], "0021689767": [144, 394], "023228835": [144, 394], "011773085": [144, 394], "014292715": [144, 394], "019827018": [144, 394], "029575512": [144, 394], "0015803224": [144, 394], "018405361": [144, 394], "002776671": [144, 394], "019370057": [144, 394], "027569963": [144, 394], "008460119": [144, 394], "012445833": [144, 394], "0028322043": [144, 394], "0052804346": [144, 394], "006422837": [144, 394], "009335961": [144, 394], "02354617": [144, 394], "0010345082": [144, 394], "018900402": [144, 394], "0029908712": [144, 394], "0068544107": [144, 394], "010148335": [144, 394], "007939693": [144, 394], "0072796377": [144, 394], "020537846": [144, 394], "010928977": [144, 394], "029880153": [144, 394], "0038492593": [144, 394], "002795711": [144, 394], "01892579": [144, 394], "029956313": [144, 394], "024612412": [144, 394], "00446806": [144, 394], "026452947": [144, 394], "017605681": [144, 394], "041177236": [144, 394], "02018243": [144, 394], "014648129": [144, 394], "021553313": [144, 394], "0015017823": [144, 394], "0034874987": [144, 394], "034170505": [144, 394], "036125284": [144, 394], "02805231": [144, 394], "018430749": [144, 394], "003404992": [144, 394], "009329614": [144, 394], "020766325": [144, 394], "012560072": [144, 394], "01707256": [144, 394], "011538258": [144, 394], "007711212": [144, 394], "01332802": [144, 394], "007412918": [144, 394], "022492621": [144, 394], "0059055826": [144, 394], "025754813": [144, 394], "01904003": [144, 394], "013353407": [144, 394], "0026005507": [144, 394], "022530701": [144, 394], "007895266": [144, 394], "842112e": [144, 394], "028103083": [144, 394], "013962688": [144, 394], "019979337": [144, 394], "02115982": [144, 394], "0029305778": [144, 394], "01340418": [144, 394], "01609517": [144, 394], "011880978": [144, 394], "016793307": [144, 394], "0048837676": [144, 394], "013036073": [144, 394], "025767507": [144, 394], "030337114": [144, 394], "022454541": [144, 394], "018824242": [144, 394], "0019785764": [144, 394], "006146756": [144, 394], "0021055099": [144, 394], "0014525956": [144, 394], "011157458": [144, 394], "005293128": [144, 394], "011468444": [144, 394], "021591393": [144, 394], "0051535014": [144, 394], "005597769": [144, 394], "1935701e": [144, 394], "012731433": [144, 394], "0034208586": [144, 394], "024688572": [144, 394], "0018103895": [144, 394], "001299482": [144, 394], "005461315": [144, 394], "024878971": [144, 394], "030565593": [144, 394], "016717145": [144, 394], "013226474": [144, 394], "008764761": [144, 394], "007355798": [144, 394], "0070638508": [144, 394], "005734222": [144, 394], "012084072": [144, 394], "023749264": [144, 394], "028813912": [144, 394], "015892077": [144, 394], "0033573918": [144, 394], "0052201413": [144, 394], "01672984": [144, 394], "0014105488": [144, 394], "02184526": [144, 394], "019560456": [144, 394], "0063752364": [144, 394], "008777454": [144, 394], "00418246": [144, 394], "013861141": [144, 394], "012877407": [144, 394], "009500975": [144, 394], "005804036": [144, 394], "0013859555": [144, 394], "025335932": [144, 394], "01779608": [144, 394], "01537165": [144, 394], "0019722297": [144, 394], "011081297": [144, 394], "0073875315": [144, 394], "0015795291": [144, 394], "015968239": [144, 394], "013454954": [144, 394], "0026592575": [144, 394], "0020944031": [144, 394], "014140395": [144, 394], "0023339903": [144, 394], "0064989966": [144, 394], "0030828982": [144, 394], "0046870206": [144, 394], "013239168": [144, 394], "017491441": [144, 394], "011106684": [144, 394], "029702445": [144, 394], "003696939": [144, 394], "013784981": [144, 394], "017250266": [144, 394], "0037762725": [144, 394], "021413686": [144, 394], "017047172": [144, 394], "019268509": [144, 394], "006898837": [144, 394], "013924608": [144, 394], "009266147": [144, 394], "0023577902": [144, 394], "020905953": [144, 394], "005264568": [144, 394], "0014875022": [144, 394], "0064513967": [144, 394], "003044818": [144, 394], "0073431046": [144, 394], "0012431552": [144, 394], "0021166166": [144, 394], "0019404964": [144, 394], "018646536": [144, 394], "6913787e": [144, 394], "01518125": [144, 394], "0013581888": [144, 394], "016755225": [144, 394], "5418405e": [144, 394], "0076921717": [144, 394], "016780613": [144, 394], "56008e": [144, 394], "010948017": [144, 394], "956349e": [144, 394], "006108676": [144, 394], "011290737": [144, 394], "027443029": [144, 394], "008910734": [144, 394], "012858367": [144, 394], "016844079": [144, 394], "017592987": [144, 394], "01476237": [144, 394], "0039793663": [144, 394], "008066626": [144, 394], "0018421229": [144, 394], "03422128": [144, 394], "016526746": [144, 394], "022200674": [144, 394], "0010051549": [144, 394], "004474407": [144, 394], "6767073e": [144, 394], "007749292": [144, 394], "026249854": [144, 394], "006670357": [144, 394], "014775063": [144, 394], "02589444": [144, 394], "0023530303": [144, 394], "0066068904": [144, 394], "0067147836": [144, 394], "0012542619": [144, 394], "018671922": [144, 394], "0022498968": [144, 394], "0048552076": [144, 394], "0031463648": [144, 394], "0217691": [144, 394], "011849245": [144, 394], "0026735375": [144, 394], "011024177": [144, 394], "01733912": [144, 394], "0073621445": [144, 394], "012407753": [144, 394], "0032939252": [144, 394], "0072288644": [144, 394], "014457729": [144, 394], "0011781019": [144, 394], "009615215": [144, 394], "0141150085": [144, 394], "025376e": [144, 394], "04615303": [144, 394], "031631835": [144, 394], "005131288": [144, 394], "006594197": [144, 394], "025386706": [144, 394], "028204631": [144, 394], "023482703": [144, 394], "013086847": [144, 394], "022314915": [144, 394], "2082416e": [144, 394], "023457317": [144, 394], "006013476": [144, 394], "0125029525": [144, 394], "0021404168": [144, 394], "023977743": [144, 394], "0033542186": [144, 394], "029423192": [144, 394], "0019960299": [144, 394], "0076477453": [144, 394], "080113e": [144, 394], "030413274": [144, 394], "008790147": [144, 394], "013493034": [144, 394], "078089505": [144, 394], "004842514": [144, 394], "015232024": [144, 394], "00825068": [144, 394], "036785338": [144, 394], "335175e": [144, 394], "03891782": [144, 394], "004680674": [144, 394], "005451795": [144, 394], "012134845": [144, 394], "02490436": [144, 394], "007101931": [144, 394], "026351402": [144, 394], "0043093935": [144, 394], "0059595294": [144, 394], "024561638": [144, 394], "019331977": [144, 394], "02385081": [144, 394], "008206253": [144, 394], "015942851": [144, 394], "027138388": [144, 394], "01521933": [144, 394], "0043728603": [144, 394], "025500946": [144, 394], "026173694": [144, 394], "0011558884": [144, 394], "023381157": [144, 394], "0016207825": [144, 394], "001237602": [144, 394], "0049916613": [144, 394], "0024085636": [144, 394], "015587438": [144, 394], "0048203007": [144, 394], "35144e": [144, 394], "012255432": [144, 394], "0048742476": [144, 394], "0062546497": [144, 394], "04051718": [144, 394], "0051090745": [144, 394], "016932933": [144, 394], "0016660026": [144, 394], "02774767": [144, 394], "050976507": [144, 394], "03043866": [144, 394], "0028655245": [144, 394], "0023292303": [144, 394], "0104275895": [144, 394], "004360167": [144, 394], "011144764": [144, 394], "024282385": [144, 394], "013988075": [144, 394], "016234798": [144, 394], "014698903": [144, 394], "037673872": [144, 394], "0054644886": [144, 394], "020461684": [144, 394], "012598153": [144, 394], "012363326": [144, 394], "002833791": [144, 394], "0029274046": [144, 394], "01243314": [144, 394], "0037413659": [144, 394], "012820287": [144, 394], "0070511578": [144, 394], "017364508": [144, 394], "0025545373": [144, 394], "0034843255": [144, 394], "009773882": [144, 394], "0010368882": [144, 394], "009894469": [144, 394], "330013e": [144, 394], "008237986": [144, 394], "0013804021": [144, 394], "0035890455": [144, 394], "029194713": [144, 394], "022721102": [144, 394], "026605267": [144, 394], "011151111": [144, 394], "0054200618": [144, 394], "0043919003": [144, 394], "0022181633": [144, 394], "0025402573": [144, 394], "015562051": [144, 394], "021984888": [144, 394], "025145533": [144, 394], "008422039": [144, 394], "0032590183": [144, 394], "008130092": [144, 394], "0019309763": [144, 394], "009278841": [144, 394], "981743e": [144, 394], "04363975": [144, 394], "008510893": [144, 394], "011360551": [144, 394], "025069373": [144, 394], "004252273": [144, 394], "011132071": [144, 394], "020474378": [144, 394], "014889303": [144, 394], "01896387": [144, 394], "0075461986": [144, 394], "012096765": [144, 394], "030489434": [144, 394], "012166579": [144, 394], "032393437": [144, 394], "0035763523": [144, 394], "009018627": [144, 394], "007438305": [144, 394], "0064196633": [144, 394], "025056679": [144, 394], "012230045": [144, 394], "821482e": [144, 394], "0124839125": [144, 394], "0014454556": [144, 394], "012744127": [144, 394], "007159051": [144, 394], "010402203": [144, 394], "010053135": [144, 394], "0042808335": [144, 394], "0025307373": [144, 394], "004128513": [144, 394], "010890896": [144, 394], "025716733": [144, 394], "024155451": [144, 394], "04023793": [144, 394], "015257411": [144, 394], "0129154865": [144, 394], "013264554": [144, 394], "028636204": [144, 394], "023520783": [144, 394], "004890114": [144, 394], "008022199": [144, 394], "016184025": [144, 394], "051535014": [144, 394], "011792125": [144, 394], "009291534": [144, 394], "031707995": [144, 394], "039476328": [144, 394], "004699714": [144, 394], "014216555": [144, 394], "01480045": [144, 394], "0065053436": [144, 394], "0044997935": [144, 394], "021705633": [144, 394], "0904366e": [144, 394], "019585844": [144, 394], "0036842457": [144, 394], "455769e": [144, 394], "006727477": [144, 394], "0108718565": [144, 394], "0046076872": [144, 394], "0303625": [144, 394], "02967706": [144, 394], "026554495": [144, 394], "014825836": [144, 394], "009786575": [144, 394], "009285187": [144, 394], "020931339": [144, 394], "003630299": [144, 394], "004693367": [144, 394], "009589829": [144, 394], "013886528": [144, 394], "017694535": [144, 394], "027493803": [144, 394], "004982141": [144, 394], "0071717445": [144, 394], "03297733": [144, 394], "007571585": [144, 394], "006276863": [144, 394], "016069785": [144, 394], "0464047e": [144, 394], "0025450173": [144, 394], "015358957": [144, 394], "018494215": [144, 394], "7068556e": [144, 394], "027646123": [144, 394], "0011114617": [144, 394], "013429567": [144, 394], "007920653": [144, 394], "0050011813": [144, 394], "013543808": [144, 394], "014381569": [144, 394], "0047346205": [144, 394], "018798856": [144, 394], "019674698": [144, 394], "012629886": [144, 394], "029803993": [144, 394], "009862735": [144, 394], "0033732585": [144, 394], "013048767": [144, 394], "009456548": [144, 394], "03815622": [144, 394], "286778e": [144, 394], "0040301397": [144, 394], "014254635": [144, 394], "0038809928": [144, 394], "016666373": [144, 394], "6997105e": [144, 394], "017351814": [144, 394], "015549357": [144, 394], "02952474": [144, 394], "00431574": [144, 394], "009818309": [144, 394], "470635e": [144, 394], "011404978": [144, 394], "025082065": [144, 394], "021908727": [144, 394], "018951176": [144, 394], "022936888": [144, 394], "013658048": [144, 394], "004671154": [144, 394], "0296009": [144, 394], "0127949": [144, 394], "018341895": [144, 394], "6842424e": [144, 394], "01292818": [144, 394], "0036429923": [144, 394], "030083247": [144, 394], "00215311": [144, 394], "024206225": [144, 394], "02619908": [144, 394], "009837349": [144, 394], "010256229": [144, 394], "008168173": [144, 394], "0100340955": [144, 394], "013150314": [144, 394], "02188334": [144, 394], "010935323": [144, 394], "008371267": [144, 394], "00857436": [144, 394], "0036144322": [144, 394], "009697721": [144, 394], "007863532": [144, 394], "018100722": [144, 394], "019446217": [144, 394], "023495397": [144, 394], "0037032857": [144, 394], "009380388": [144, 394], "027265321": [144, 394], "007140011": [144, 394], "015193944": [144, 394], "004556914": [144, 394], "013632661": [144, 394], "0056358487": [144, 394], "01040855": [144, 394], "0050519546": [144, 394], "008155479": [144, 394], "9020106e": [144, 394], "032571144": [144, 394], "0048076073": [144, 394], "0060293428": [144, 394], "016031705": [144, 394], "021781793": [144, 394], "0015866691": [144, 394], "0016088824": [144, 394], "024752038": [144, 394], "0019547765": [144, 394], "012369673": [144, 394], "015320877": [144, 394], "012706046": [144, 394], "009082094": [144, 394], "010249883": [144, 394], "019128883": [144, 394], "02543748": [144, 394], "0084982": [144, 394], "0032970984": [144, 394], "012991647": [144, 394], "022479929": [144, 394], "02316537": [144, 394], "0012312552": [144, 394], "0042840065": [144, 394], "018227655": [144, 394], "005731049": [144, 394], "02604676": [144, 394], "006689397": [144, 394], "006305423": [144, 394], "018075334": [144, 394], "019484296": [144, 394], "01783416": [144, 394], "0012130085": [144, 394], "015866691": [144, 394], "020626698": [144, 394], "039882515": [144, 394], "008682254": [144, 394], "0022546567": [144, 394], "009323268": [144, 394], "035871416": [144, 394], "014330796": [144, 394], "0145465825": [144, 394], "023216143": [144, 394], "011531911": [144, 394], "020372832": [144, 394], "00641649": [144, 394], "013531114": [144, 394], "016437892": [144, 394], "013124927": [144, 394], "019814324": [144, 394], "0015136823": [144, 394], "016247492": [144, 394], "004753661": [144, 394], "013823061": [144, 394], "007907959": [144, 394], "027113002": [144, 394], "009932549": [144, 394], "009659641": [144, 394], "0044807536": [144, 394], "009850042": [144, 394], "014191168": [144, 394], "042954307": [144, 394], "024701266": [144, 394], "01059895": [144, 394], "0047885673": [144, 394], "021629473": [144, 394], "006651317": [144, 394], "031098714": [144, 394], "0058262493": [144, 394], "0051249415": [144, 394], "0065180366": [144, 394], "0519563e": [144, 394], "009792922": [144, 394], "0423958": [144, 394], "010992444": [144, 394], "008739374": [144, 394], "002449817": [144, 394], "012045992": [144, 394], "014089622": [144, 394], "0018310162": [144, 394], "014406956": [144, 394], "033180423": [144, 394], "0052709146": [144, 394], "0016802826": [144, 394], "012750473": [144, 394], "018329201": [144, 394], "005750089": [144, 394], "048234742": [144, 394], "01771992": [144, 394], "009240761": [144, 394], "789961e": [144, 394], "017669147": [144, 394], "01730104": [144, 394], "0026529108": [144, 394], "022543395": [144, 394], "017288346": [144, 394], "007971426": [144, 394], "019065415": [144, 394], "007857186": [144, 394], "0481933e": [144, 394], "016488666": [144, 394], "709636e": [144, 394], "009348654": [144, 394], "0049281945": [144, 394], "0059436625": [144, 394], "020956725": [144, 394], "003538272": [144, 394], "0038905127": [144, 394], "0016485492": [144, 394], "0044141137": [144, 394], "01271874": [144, 394], "01483853": [144, 394], "01245218": [144, 394], "0023657237": [144, 394], "0037794458": [144, 394], "5497736e": [144, 394], "00882188": [144, 394], "015815917": [144, 394], "016767919": [144, 394], "005185235": [144, 394], "018049948": [144, 394], "007685825": [144, 394], "21934114": [144, 394], "012007912": [144, 394], "005039261": [144, 394], "037445392": [144, 394], "4307736e": [144, 394], "031403355": [144, 394], "0018468829": [144, 394], "0024656837": [144, 394], "01722488": [144, 394], "013213781": [144, 394], "011512871": [144, 394], "0015811158": [144, 394], "0035287521": [144, 394], "0062419563": [144, 394], "0048456877": [144, 394], "025120145": [144, 394], "023800036": [144, 394], "0269697e": [144, 394], "03554139": [144, 394], "01071319": [144, 394], "2110125e": [144, 394], "017313734": [144, 394], "03777542": [144, 394], "0019944431": [144, 394], "04402055": [144, 394], "02442201": [144, 394], "018976564": [144, 394], "005873849": [144, 394], "006924224": [144, 394], "003865126": [144, 394], "0057437425": [144, 394], "0038206992": [144, 394], "013163007": [144, 394], "01646328": [144, 394], "02446009": [144, 394], "018748082": [144, 394], "027239935": [144, 394], "0032479118": [144, 394], "03653147": [144, 394], "015206637": [144, 394], "018773468": [144, 394], "00643553": [144, 394], "010141989": [144, 394], "009183641": [144, 394], "02025859": [144, 394], "019852404": [144, 394], "006054729": [144, 394], "010630683": [144, 394], "009481935": [144, 394], "059881e": [144, 394], "03005786": [144, 394], "014851223": [144, 394], "014280022": [144, 394], "003274885": [144, 394], "0014168955": [144, 394], "025005905": [144, 394], "9089613e": [144, 394], "022302222": [144, 394], "008999587": [144, 394], "010097562": [144, 394], "024942439": [144, 394], "012807593": [144, 394], "019547764": [144, 394], "034957495": [144, 394], "026833748": [144, 394], "7683392e": [144, 394], "0068417173": [144, 394], "011182844": [144, 394], "016907547": [144, 394], "03013402": [144, 394], "0041062995": [144, 394], "014571969": [144, 394], "02070286": [144, 394], "011335164": [144, 394], "012725086": [144, 394], "8341785e": [144, 394], "0013653288": [144, 394], "017859548": [144, 394], "0056802756": [144, 394], "006556117": [144, 394], "0033002717": [144, 394], "011398631": [144, 394], "010954363": [144, 394], "055139925": [144, 394], "009424815": [144, 394], "004959928": [144, 394], "028788524": [144, 394], "0031241516": [144, 394], "0027465243": [144, 394], "036810722": [144, 394], "0031828582": [144, 394], "005543822": [144, 394], "0026053106": [144, 394], "6973375e": [144, 394], "017935708": [144, 394], "0015406557": [144, 394], "0023911104": [144, 394], "016945627": [144, 394], "0035636588": [144, 394], "02396505": [144, 394], "01911619": [144, 394], "0029448578": [144, 394], "033408906": [144, 394], "020550538": [144, 394], "01294722": [144, 394], "011500178": [144, 394], "011988872": [144, 394], "025424786": [144, 394], "011887325": [144, 394], "038587794": [144, 394], "003395472": [144, 394], "007946039": [144, 394], "019966645": [144, 394], "033713546": [144, 394], "018189576": [144, 394], "026859134": [144, 394], "012223699": [144, 394], "024802811": [144, 394], "099946e": [144, 394], "0010448216": [144, 394], "005020221": [144, 394], "012356979": [144, 394], "007590625": [144, 394], "03089562": [144, 394], "014521196": [144, 394], "017212186": [144, 394], "024917051": [144, 394], "020169739": [144, 394], "044680603": [144, 394], "005658062": [144, 394], "013835755": [144, 394], "3776127e": [144, 394], "0028496578": [144, 394], "006467263": [144, 394], "053007443": [144, 394], "011614418": [144, 394], "0056453687": [144, 394], "16145945": [144, 394], "0091963345": [144, 394], "024548944": [144, 394], "016425198": [144, 394], "015701678": [144, 394], "862344e": [144, 394], "023190755": [144, 394], "0074509983": [144, 394], "018088028": [144, 394], "010205456": [144, 394], "010383163": [144, 394], "033028103": [144, 394], "0023324036": [144, 394], "019052723": [144, 394], "016590212": [144, 394], "4408938e": [144, 394], "02324153": [144, 394], "019623924": [144, 394], "0383847": [144, 394], "002686231": [144, 394], "0010852817": [144, 394], "0076223584": [144, 394], "002762391": [144, 394], "030540207": [144, 394], "0037667525": [144, 394], "011005137": [144, 394], "0017850028": [144, 394], "005984916": [144, 394], "0029353378": [144, 394], "02555172": [144, 394], "00855532": [144, 394], "010287963": [144, 394], "2544602e": [144, 394], "0065624635": [144, 394], "017808774": [144, 394], "03528752": [144, 394], "013188394": [144, 394], "027925376": [144, 394], "0014248289": [144, 394], "009342308": [144, 394], "0017247093": [144, 394], "023596942": [144, 394], "004709234": [144, 394], "037369233": [144, 394], "016082479": [144, 394], "0011963486": [144, 394], "00222451": [144, 394], "014165782": [144, 394], "0014414889": [144, 394], "0058865426": [144, 394], "2633766e": [144, 394], "012274472": [144, 394], "011328817": [144, 394], "0020372833": [144, 394], "0013026553": [144, 394], "00635937": [144, 394], "00651169": [144, 394], "0024672705": [144, 394], "0026640175": [144, 394], "0033669118": [144, 394], "0074763848": [144, 394], "311968e": [144, 394], "023444623": [144, 394], "017656455": [144, 394], "0065243836": [144, 394], "021832567": [144, 394], "02320345": [144, 394], "015092397": [144, 394], "034119733": [144, 394], "025983294": [144, 394], "021324834": [144, 394], "015663598": [144, 394], "00417294": [144, 394], "014965463": [144, 394], "014203862": [144, 394], "0074319583": [144, 394], "007381185": [144, 394], "0035446188": [144, 394], "009310574": [144, 394], "02562788": [144, 394], "01101783": [144, 394], "009050361": [144, 394], "010484709": [144, 394], "005835769": [144, 394], "0036620323": [144, 394], "0055565154": [144, 394], "028712364": [144, 394], "033586614": [144, 394], "027087616": [144, 394], "019509684": [144, 394], "005166195": [144, 394], "020042805": [144, 394], "019903177": [144, 394], "010738577": [144, 394], "038816273": [144, 394], "014990849": [144, 394], "025412092": [144, 394], "030464048": [144, 394], "009158255": [144, 394], "046609994": [144, 394], "9095457e": [144, 394], "0016675893": [144, 394], "012921833": [144, 394], "2828116e": [144, 394], "0033288319": [144, 394], "10784273": [144, 394], "022898808": [144, 394], "020563232": [144, 394], "020487072": [144, 394], "0063117696": [144, 394], "005299475": [144, 394], "013442261": [144, 394], "0112590045": [144, 394], "015282797": [144, 394], "013581888": [144, 394], "023723876": [144, 394], "00847916": [144, 394], "025221692": [144, 394], "028686978": [144, 394], "8655227e": [144, 394], "005169368": [144, 394], "0765446e": [144, 394], "011436711": [144, 394], "004963101": [144, 394], "0067592105": [144, 394], "007527158": [144, 394], "029854767": [144, 394], "0072098244": [144, 394], "011246311": [144, 394], "009945242": [144, 394], "017326428": [144, 394], "004052353": [144, 394], "011684231": [144, 394], "311375e": [144, 394], "026986068": [144, 394], "012801247": [144, 394], "0023815904": [144, 394], "047600072": [144, 394], "006886144": [144, 394], "004464887": [144, 394], "9809546e": [144, 394], "018684616": [144, 394], "022924196": [144, 394], "0070575043": [144, 394], "0037730993": [144, 394], "025830973": [144, 394], "029651672": [144, 394], "0046140337": [144, 394], "041710358": [144, 394], "0058960626": [144, 394], "0018706829": [144, 394], "0065878504": [144, 394], "0067338236": [144, 394], "0011431951": [144, 394], "020233205": [144, 394], "008218946": [144, 394], "015930157": [144, 394], "0024022171": [144, 394], "0051439814": [144, 394], "0120777255": [144, 394], "00895516": [144, 394], "010116602": [144, 394], "038638566": [144, 394], "0056231553": [144, 394], "840722e": [144, 394], "009754842": [144, 394], "0074256114": [144, 394], "0011773085": [144, 394], "7314436e": [144, 394], "02014435": [144, 394], "010186416": [144, 394], "0067211306": [144, 394], "015828611": [144, 394], "0043665133": [144, 394], "0112526575": [144, 394], "031073328": [144, 394], "018126108": [144, 394], "014432343": [144, 394], "0021118566": [144, 394], "017389894": [144, 394], "023635022": [144, 394], "0062736897": [144, 394], "040187154": [144, 394], "006905184": [144, 394], "0068163304": [144, 394], "0087838005": [144, 394], "010072175": [144, 394], "00832684": [144, 394], "01061799": [144, 394], "01268066": [144, 394], "0137088215": [144, 394], "007926999": [144, 394], "01711064": [144, 394], "00885996": [144, 394], "015422424": [144, 394], "0052011013": [144, 394], "022327607": [144, 394], "0092280675": [144, 394], "022251448": [144, 394], "0045251804": [144, 394], "5886433e": [144, 394], "020360138": [144, 394], "021870647": [144, 394], "013251861": [144, 394], "027595349": [144, 394], "01094167": [144, 394], "011550951": [144, 394], "0033034452": [144, 394], "026072146": [144, 394], "030032473": [144, 394], "00411582": [144, 394], "012185619": [144, 394], "0096215615": [144, 394], "002618004": [144, 394], "006575157": [144, 394], "03675995": [144, 394], "010986097": [144, 394], "023673104": [144, 394], "011900018": [144, 394], "016044399": [144, 394], "0040206197": [144, 394], "018722696": [144, 394], "0038873393": [144, 394], "011163804": [144, 394], "01919235": [144, 394], "015790531": [144, 394], "0013692954": [144, 394], "011836552": [144, 394], "005096381": [144, 394], "031200262": [144, 394], "0358968": [144, 394], "009126521": [144, 394], "013696128": [144, 394], "014711596": [144, 394], "018608455": [144, 394], "03922246": [144, 394], "0179484": [144, 394], "0069178776": [144, 394], "010909937": [144, 394], "013569194": [144, 394], "019839711": [144, 394], "024447398": [144, 394], "01086551": [144, 394], "010294309": [144, 394], "024726652": [144, 394], "016679065": [144, 394], "0013145554": [144, 394], "004617207": [144, 394], "004690194": [144, 394], "013315327": [144, 394], "0112653505": [144, 394], "0016009491": [144, 394], "003998406": [144, 394], "025272466": [144, 394], "0030051514": [144, 394], "007869879": [144, 394], "031251036": [144, 394], "005375635": [144, 394], "0046203807": [144, 394], "0030099114": [144, 394], "0071273176": [144, 394], "012020606": [144, 394], "016285572": [144, 394], "033865865": [144, 394], "04290353": [144, 394], "009107481": [144, 394], "007400225": [144, 394], "018253041": [144, 394], "016704453": [144, 394], "003957153": [144, 394], "022644943": [144, 394], "0074446513": [144, 394], "012122152": [144, 394], "0013796088": [144, 394], "019014644": [144, 394], "026909908": [144, 394], "003035298": [144, 394], "012153885": [144, 394], "020499766": [144, 394], "006010303": [144, 394], "004026966": [144, 394], "3466855e": [144, 394], "001078935": [144, 394], "0051725414": [144, 394], "0014906756": [144, 394], "009526362": [144, 394], "016310958": [144, 394], "010357776": [144, 394], "0145338895": [144, 394], "015993625": [144, 394], "025259772": [144, 394], "036937658": [144, 394], "0044014202": [144, 394], "008713987": [144, 394], "003931766": [144, 394], "0053597684": [144, 394], "02797615": [144, 394], "020093577": [144, 394], "004550567": [144, 394], "024434704": [144, 394], "0029956312": [144, 394], "6632223e": [144, 394], "51248e": [144, 394], "028915457": [144, 394], "023470009": [144, 394], "008675907": [144, 394], "014013462": [144, 394], "0031527115": [144, 394], "0018865496": [144, 394], "0033986452": [144, 394], "040974144": [144, 394], "002589444": [144, 394], "0018516429": [144, 394], "049504075": [144, 394], "00884092": [144, 394], "004541047": [144, 394], "014076929": [144, 394], "015473197": [144, 394], "0027211376": [144, 394], "031327195": [144, 394], "041126464": [144, 394], "018595763": [144, 394], "0104593225": [144, 394], "01938275": [144, 394], "0027592175": [144, 394], "setenableoutputlog": [145, 147, 228, 396, 478, 502], "setevaluationlogextend": [145, 147, 396], "setoutputlogspath": [145, 147, 150, 152, 228, 396, 402, 478, 502], "assum": [147, 396], "getniter": [148, 149, 190, 191, 399, 441], "niter": [148, 149, 190, 191, 399, 441], "poscol": [148, 149, 190, 191, 242, 399, 441, 492], "setiter": [148, 149, 399], "setposcolumn": [148, 149, 190, 191, 399, 441], "member": [149, 234, 399, 485], "helper": [149, 158, 191, 198, 220, 244, 245, 246, 251, 399, 407, 441, 447, 470, 495, 496, 497, 509, 512], "datasetpath": [149, 399], "pierr": [149, 244, 399, 495], "vinken": [149, 244, 399, 495], "34": [149, 244, 246, 399, 495, 497], "md": [149, 244, 399, 495], "vb": [149, 242, 244, 399, 492, 495, 512], "41": [149, 151, 244, 246, 399, 401, 495, 497], "43": [149, 151, 244, 246, 399, 401, 495, 497], "dt": [149, 244, 245, 399, 495, 496, 512], "49": [149, 244, 399, 495], "anc": [149, 244, 399, 495, 512], "trainingperceptrondf": [149, 399], "trainedpo": [149, 399], "cd": [149, 242, 244, 399, 492, 495], "pos_anc": [149, 399], "25": [149, 151, 244, 246, 399, 401, 495, 497], "33": [149, 239, 246, 399, 490, 497], "detectlist": [150, 151, 401], "setcustombound": [150, 151, 152, 401, 402], "setcustomboundsstrategi": [150, 151, 401], "setdetectlist": [150, 151, 401], "setexplodesent": [150, 151, 152, 401, 402], "setsplitlength": [150, 151, 152, 401, 402], "setuseabbrevi": [150, 151, 401], "setusecustomboundsonli": [150, 151, 152, 401, 402], "custombound": [150, 151, 152, 401, 402], "customboundsstrategi": [150, 151, 401], "explodesent": [150, 151, 152, 242, 243, 401, 402, 492, 493], "splitlength": [150, 151, 152, 401, 402], "useabbrevi": [150, 151, 401], "usecustomboundsonli": [150, 151, 152, 401, 402], "epochsnumb": [150, 152, 402], "impossiblepenultim": [150, 152, 402], "modelarchitectur": [150, 152, 402], "setepochsnumb": [150, 152, 402], "setimpossiblepenultim": [150, 152, 402], "ii": [151, 401], "abbrevi": [151, 401], "period": [151, 401], "geo": [151, 401], "1026": [151, 401], "253": [151, 401], "553": [151, 401], "ellipsi": [151, 401], "quotat": [151, 401], "mark": [151, 152, 191, 401, 402, 441], "exclam": [151, 401], "breaker": [151, 401], "pragmaticcontentformatt": [151, 401], "explicitli": [151, 152, 182, 220, 401, 402, 432, 470, 506], "prepend": [151, 194, 401, 443], "break": [151, 168, 230, 232, 401, 418, 481], "append": [151, 178, 231, 401, 427, 482, 506], "forcibli": [151, 152, 401, 402], "99999": [151, 152, 188, 401, 402, 438], "nhow": [151, 401], "third": [151, 182, 227, 242, 251, 401, 432, 479, 492], "sentencedetectordl": [152, 166, 308, 402, 416], "imposs": [152, 191, 402, 441], "penultim": [152, 402], "eo": [152, 402], "stefan": [152, 402], "schweter": [152, 402], "sajawel": [152, 402], "ahm": [152, 402], "broken": [152, 230, 231, 402, 481], "moder": [152, 402], "lack": [152, 402], "easier": [152, 197, 402, 446, 508, 512], "polit": [152, 402], "successor": [152, 402], "great": [152, 402], "heritag": [152, 173, 402, 423], "bequeath": [152, 402], "nelson": [152, 402], "mandela": [152, 402], "epochs_numb": [152, 402], "impossible_penultim": [152, 402], "model_architectur": [152, 402], "output_logs_path": [152, 402], "validation_split": [152, 402], "sentencedl": [152, 402], "sentencesdl": [152, 402], "helen": [152, 402], "peopl": [152, 402], "decrementmultipli": [153, 154, 404], "enablescor": [153, 154, 404], "incrementmultipli": [153, 154, 404], "negativemultipli": [153, 154, 404], "positivemultipli": [153, 154, 404], "reversemultipli": [153, 154, 404], "featurelimit": [153, 155, 405], "importantfeatureratio": [153, 155, 405], "prunecorpu": [153, 155, 405], "sentimentcol": [153, 155, 405], "setprunecorpu": [153, 155, 405], "setsentimentcol": [153, 155, 405], "unimportantfeaturestep": [153, 155, 405], "els": [154, 204, 404, 454], "cool": [154, 404], "superb": [154, 404], "uninspir": [154, 404], "sentimentscor": [154, 404], "nice": [154, 228, 404, 478, 502], "multipli": 154, "decrement": 154, "increment": [154, 187, 437], "revert": 154, "entri": [154, 195, 203, 235, 404, 444, 453, 486], "sttr": [154, 404], "sda": [154, 155, 371, 404, 405], "pragmat": [154, 404], "viveknsenti": [155, 405], "analys": [155, 405], "vivek": [155, 405], "narayanan": [155, 405], "give": [155, 405], "transit": [155, 178, 405, 427], "unfrequ": [155, 405], "scope": [155, 405], "naiv": [155, 405], "bay": [155, 405], "vivekn": [155, 405], "train_senti": [155, 405], "result_senti": [155, 405], "final_senti": [155, 405], "cast": [155, 193, 405, 442], "horribl": [155, 405], "go": [155, 405, 506], "again": [155, 186, 405, 436], "anyon": [155, 405], "protagonist": [155, 405], "music": [155, 405], "boost": 155, "dirt": 155, "lookahead": 155, "unimport": 155, "sentiment_vivekn": [155, 405], "setcach": [156, 159, 408], "usecach": [156, 159, 174, 408, 424], "setsrclang": [156, 165, 168, 415, 418], "settgtlang": [156, 165, 168, 415, 418], "srclang": [156, 165, 168, 415, 418], "tgtlang": [156, 165, 168, 415, 418], "langid": [156, 166, 308, 416], "setlangid": [156, 166, 416], "setmaxinputlength": [156, 166, 308, 416], "maxnewtoken": [156, 174, 424], "setmaxnewtoken": [156, 174, 424], "setstopateo": [156, 174, 424], "setusecach": [156, 174, 424], "stopateo": [156, 174, 424], "settabl": [157, 158, 406, 407], "explan": [157, 158, 178, 406, 407, 427, 509], "phi3": [157, 171, 406, 421], "5_mini_4k_instruct_q4_gguf": [157, 406], "autoggufmodeltest": [157, 406], "nthreadsdraft": [157, 158, 208, 215, 406, 407, 465], "draft": [157, 158, 215, 406, 407, 465], "nthreadsbatchdraft": [157, 158, 208, 215, 406, 407, 465], "ndraft": [157, 158, 208, 215, 406, 407, 465], "specul": [157, 158, 215, 406, 407, 465], "psplit": [157, 158, 208, 215, 406, 407, 465], "ngpulayersdraft": [157, 158, 208, 215, 406, 407, 465], "modeldraft": [157, 158, 208, 215, 406, 407, 465], "modelalia": [157, 158, 208, 215, 406, 407, 465], "lookupcachestaticfilepath": [157, 158, 208, 215, 406, 407, 465], "updat": [157, 158, 178, 215, 406, 407, 427, 465], "lookupcachedynamicfilepath": [157, 158, 208, 215, 406, 407, 465], "inputprefixbo": [157, 158, 208, 215, 406, 407, 465], "preced": [157, 158, 215, 406, 407, 465, 506], "systemprompt": [157, 158, 208, 215, 406, 407, 465], "chattempl": [157, 158, 192, 204, 208, 215, 406, 407, 454, 465], "chat": [157, 158, 161, 163, 164, 167, 170, 171, 172, 204, 215, 406, 407, 410, 413, 414, 417, 420, 421, 422, 454, 465], "templat": [157, 158, 204, 215, 406, 407, 454, 465], "inputprefix": [157, 158, 208, 215, 406, 407, 465], "inputsuffix": [157, 158, 208, 215, 406, 407, 465], "infil": [157, 158, 215, 406, 407, 465], "cacheprompt": [157, 158, 208, 215, 406, 407, 465], "rememb": [157, 158, 178, 215, 406, 407, 427, 465], "reprocess": [157, 158, 215, 406, 407, 465], "npredict": [157, 158, 208, 215, 406, 407, 465], "minp": [157, 158, 208, 215, 406, 407, 465], "min": [157, 158, 178, 215, 406, 407, 427, 465], "tfsz": [157, 158, 208, 215, 406, 407, 465], "tail": [157, 158, 215, 406, 407, 465], "free": [157, 158, 166, 215, 308, 406, 407, 416, 465], "typicalp": [157, 158, 208, 215, 406, 407, 465], "typic": [157, 158, 162, 215, 232, 406, 407, 411, 465, 483], "dynatemprang": [157, 158, 215, 406, 407], "dynatempexpon": [157, 158, 215, 406, 407], "expon": [157, 158, 215, 406, 407, 465], "repeatlastn": [157, 158, 208, 215, 406, 407, 465], "repeatpenalti": [157, 158, 208, 215, 406, 407, 465], "mirostat": [157, 158, 208, 215, 406, 407, 465], "mirostattau": [157, 158, 208, 215, 406, 407, 465], "entropi": [157, 158, 215, 406, 407, 465], "tau": [157, 158, 215, 406, 407, 465], "mirostateta": [157, 158, 208, 215, 406, 407, 465], "eta": [157, 158, 215, 406, 407, 465], "penalizenl": [157, 158, 208, 215, 406, 407, 465], "newlin": [157, 158, 178, 215, 406, 407, 427, 465], "nkeep": [157, 158, 208, 215, 406, 407, 465], "rng": [157, 158, 215, 406, 407, 465], "nprob": [157, 158, 208, 215, 406, 407, 465], "minkeep": [157, 158, 208, 215, 406, 407, 465], "sampler": [157, 158, 208, 215, 406, 407, 465], "least": [157, 158, 191, 215, 406, 407, 441, 465], "bnf": [157, 158, 215, 406, 407, 465], "penaltyprompt": [157, 158, 208, 215, 406, 407, 465], "overrid": [157, 158, 215, 226, 230, 337, 406, 407, 465, 477, 481], "ignoreeo": [157, 158, 208, 215, 406, 407, 465], "impli": [157, 158, 215, 406, 407, 465], "inf": [157, 158, 215, 406, 407, 465], "disabletokenid": [157, 158, 208, 215, 406, 407, 465], "stopstr": [157, 158, 208, 215, 406, 407, 465], "usechattempl": [157, 158, 208, 215, 406, 407, 465], "setnpredict": [157, 158, 208, 215, 406, 407, 465], "setpenalizenl": [157, 158, 208, 215, 406, 407, 465], "78": [157, 171, 244, 406, 421, 495], "ingest": [158, 407], "At": [158, 204, 230, 407, 454, 481, 507], "hasllamacppinferenceproperti": [158, 407], "hasllamacppmodelproperti": [158, 407], "preprocess": [158, 228, 230, 407, 478, 481, 502], "loadimagesasbyt": [158, 192, 201, 407, 450], "llava_v1": [158, 407], "5_7b_q4_0_gguf": [158, 407], "autoggufvisionmodeltest": [158, 407], "caption_docu": [158, 407], "imagespath": [158, 407], "setminkeep": [158, 208, 215, 407, 465], "setminp": [158, 208, 215, 407, 465], "setnprob": [158, 208, 215, 407, 465], "setrepeatlastn": [158, 208, 215, 407, 465], "setrepeatpenalti": [158, 208, 215, 407, 465], "setstopstr": [158, 208, 215, 407, 465], "settfsz": [158, 208, 215, 407, 465], "settypicalp": [158, 208, 215, 407, 465], "depict": [158, 407], "ornat": [158, 407], "ceil": [158, 407], "decor": [158, 407], "wall": [158, 407], "chair": [158, 407], "throughout": [158, 407], "cushion": [158, 407], "surfac": [158, 407], "possibli": [158, 407], "bed": [158, 407], "sofa": [158, 407], "scene": [158, 407], "sleep": [158, 407], "hold": [158, 202, 407, 452, 510], "swim": [158, 407], "aquarium": [158, 407], "seem": [158, 407], "babi": [158, 407], "adult": [158, 407], "young": [158, 407], "gather": [158, 234, 407, 485], "neck": [158, 407], "grass": [158, 407], "speci": [158, 407], "held": [158, 407], "black": [158, 407], "white": [158, 178, 407, 427], "chest": [158, 407], "someth": [158, 407], "anim": [158, 407], "vicin": [158, 407], "collar": [158, 407], "stare": [158, 407], "front": [158, 407], "owner": [158, 407], "comfort": [158, 407], "seat": [158, 407], "yellow": [158, 407], "wheel": [158, 407], "tire": [158, 407], "park": [158, 407], "bull": [158, 407], "horn": [158, 407], "modelpath": [158, 407], "mmprojpath": [158, 407], "captur": [159, 176, 408, 425], "past": [159, 166, 235, 308, 408, 416, 486], "incorpor": [159, 171, 408, 421], "versatil": [159, 167, 173, 408, 417, 423], "valuabl": [159, 173, 408, 423], "summari": [159, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 174, 408, 410, 411, 413, 415, 417, 418, 419, 420, 421, 422, 424], "distilbart_xsum_12_6": [159, 408], "barttestspec": [159, 408], "ab": [159, 408], "1910": [159, 408], "13461": [159, 408], "pytorch": [159, 165, 168, 408, 415, 418], "fairseq": [159, 165, 168, 408, 415, 418], "nois": [159, 408], "reconstruct": [159, 207, 408, 457], "tranform": [159, 408], "randomli": [159, 408], "dialogu": [159, 163, 164, 170, 408, 413, 414, 420], "roug": [159, 408], "bleu": [159, 165, 168, 408, 415, 418], "ablat": [159, 408], "influenc": [159, 178, 408, 427], "rich": [159, 174, 408, 424], "rise": [159, 174, 408, 424], "methodologi": [159, 174, 408, 424], "landscap": [159, 174, 408, 424], "systemat": [159, 174, 408, 424], "dozen": [159, 174, 408, 424], "insight": [159, 174, 408, 424], "coloss": [159, 174, 408, 424], "facilit": [159, 174, 408, 424], "use_cach": [159, 408], "command": [160, 409], "c4ai": [160, 409], "highli": [160, 172, 409, 422], "rag": [160, 176, 409, 425], "c4ai_command_r_v01_int4": [160, 409], "bos_token": [160, 204, 409, 454], "start_of_turn_token": [160, 409], "user_token": [160, 409], "end_of_turn_token": [160, 409], "chatbot_token": [160, 409], "excit": [160, 163, 409, 413], "whatev": [160, 409], "minicpm": [161, 410], "unveil": [161, 410], "2b": [161, 410], "4b": [161, 172, 410, 422], "close": [161, 163, 164, 169, 170, 410, 413, 414, 419, 420], "mistral": [161, 167, 410, 417], "7b": [161, 163, 167, 169, 170, 171, 172, 173, 410, 413, 417, 419, 420, 421, 422, 423], "llama2": [161, 163, 410, 413], "13b": [161, 163, 167, 172, 173, 410, 413, 417, 422, 423], "mpt": [161, 410], "30b": [161, 410], "falcon": [161, 410], "40b": [161, 410], "mtbench": [161, 410], "closest": [161, 410], "70b": [161, 163, 164, 410, 413, 414], "vicuna": [161, 410], "33b": [161, 173, 410, 423], "v0": [161, 167, 410, 417], "zephyr": [161, 410], "dpo": [161, 410], "multimodel": [161, 410], "phi": [161, 170, 171, 410, 420, 421], "6b": [161, 410], "qwen": [161, 172, 410, 422], "vl": [161, 410], "deploi": [161, 166, 171, 308, 410, 416, 421, 503], "smartphon": [161, 410], "verbal": [161, 410], "cpm": [161, 410], "mini_cpm_2b_8bit": [161, 410], "shengdinghu": [161, 410], "notion": [161, 410], "d4d3a8c426424654a4e80e42a711cb20": [161, 410], "openbmb": [161, 410], "leonardo": [161, 162, 163, 167, 169, 170, 171, 172, 410, 411, 413, 417, 419, 420, 421, 422], "student": [161, 169, 170, 171, 172, 410, 419, 420, 421, 422], "california": [161, 169, 170, 171, 172, 410, 419, 420, 421, 422], "lo": [161, 410], "passion": [161, 169, 170, 171, 172, 410, 419, 420, 421, 422], "cultur": [161, 410], "plai": [161, 410], "basketbal": [161, 410], "caus": [162, 188, 411, 438], "goal": [162, 168, 191, 411, 418, 441], "direct": [162, 165, 168, 171, 411, 415, 418, 421], "10x": [162, 411], "synthet": [162, 170, 171, 411, 420, 421], "unpreced": [162, 411], "prime": [162, 411], "lengthi": [162, 411], "benefit": [162, 411], "suffici": [162, 411], "learner": [162, 411], "taskspecif": [162, 411], "webpag": [162, 230, 411, 481, 503], "webtext": [162, 411], "coqa": [162, 411], "exceed": [162, 164, 411, 414], "127": [162, 411], "fashion": [162, 176, 411, 425], "5b": [162, 172, 411, 422], "underfit": [162, 411], "reflect": [162, 165, 411, 415], "paragraph": [162, 178, 230, 231, 240, 411, 427, 481, 491], "promis": [162, 411], "1776": [162, 163, 411, 413], "came": [162, 163, 411, 413], "kingdom": [162, 163, 411, 413], "4k": [163, 171, 413, 421], "reinforc": [163, 164, 170, 172, 413, 414, 420, 422], "feedback": [163, 164, 170, 172, 413, 414, 420, 422], "rlhf": [163, 164, 172, 413, 414, 422], "safeti": [163, 164, 168, 170, 171, 413, 414, 418, 420, 421], "chatgpt": [163, 413], "llam2": [163, 170, 413, 420], "facebookresearch": [163, 164, 413, 414], "substitut": [163, 170, 413, 420], "llama_2_7b_chat_hf_int4": [163, 413], "cut": [164, 204, 414, 454], "8b": [164, 172, 414, 422], "expans": [164, 414], "offer": [164, 167, 169, 414, 417, 419, 506, 508, 511], "known": [164, 414], "llama3": [164, 414], "llama_3_7b_instruct_hf_int4": [164, 414], "latest": [164, 414], "meta": [164, 228, 414, 478, 504], "commerci": [164, 166, 169, 308, 414, 416, 419], "aim": [164, 168, 176, 414, 418, 425], "foster": [164, 414], "collabor": [164, 173, 414, 423], "minion": [164, 414], "chatbot": [164, 414], "respond": [164, 204, 414, 454], "speak": [164, 414], "oooh": [164, 414], "yeah": [164, 414], "bana": [164, 414], "na": [164, 414], "m2m100": [165, 415], "seq": [165, 168, 415, 418], "900": [165, 415], "m2m100_418m": [165, 415], "beyond": [165, 168, 415, 418], "worldwid": [165, 415], "spars": [165, 168, 415, 418], "focu": [165, 168, 171, 415, 418, 421], "wmt": [165, 415], "m2m": [165, 415], "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": [165, 168, 415, 418], "life": [165, 168, 415, 418], "chocol": [165, 168, 415, 418], "marian": [166, 308, 416], "mainli": [166, 308, 416], "academ": [166, 171, 308, 416, 421], "notabl": [166, 167, 308, 416, 417], "edinburgh": [166, 308, 416], "adam": [166, 308, 416], "mickiewicz": [166, 308, 416], "pozna\u0144": [166, 308, 416], "contributor": [166, 308, 416], "mariannmt": [166, 308, 416], "behind": [166, 168, 169, 170, 172, 308, 416, 418, 419, 420, 422], "opus_mt_en_fr": [166, 308, 416], "differenti": [166, 308, 416], "toolkit": [166, 308, 416], "capit": [166, 178, 232, 308, 416, 427], "quell": [166, 308, 416], "capital": [166, 308, 416], "devrait": [166, 308, 416], "savoir": [166, 308, 416], "fran\u00e7ai": [166, 308, 416], "34b": [167, 173, 417, 423], "strike": [167, 417], "balanc": [167, 215, 417, 465], "rival": [167, 171, 417, 421], "codellama": [167, 173, 417, 423], "latter": [167, 417], "gqa": [167, 172, 417, 422], "quicker": [167, 417], "compromis": [167, 417], "streamlin": [167, 228, 417, 478, 502], "smoother": [167, 417], "slide": [167, 172, 231, 240, 417, 422, 482, 491], "swa": [167, 172, 417, 422], "reliabl": [167, 228, 417, 478, 502], "mistral_7b": [167, 417], "mistralai": [167, 417], "coupl": [167, 417], "da": [167, 417], "vinci": [167, 417], "invent": [167, 417], "microscop": [167, 417], "No": [167, 168, 243, 417, 418, 493, 505], "late": [167, 417], "16th": [167, 417], "nllb": [168, 418], "nllb_distilled_600m_8int": [168, 418], "driven": [168, 418], "erad": [168, 418], "barrier": [168, 418], "solidifi": [168, 418], "artifici": [168, 169, 170, 171, 172, 418, 419, 420, 421, 422], "intellig": [168, 169, 170, 171, 172, 418, 419, 420, 421, 422], "effort": [168, 169, 418, 419], "coalesc": [168, 418], "leav": [168, 418], "vast": [168, 418], "major": [168, 418], "mostli": [168, 418], "safe": [168, 418], "ethic": [168, 418], "consider": [168, 418], "exploratori": [168, 418], "interview": [168, 418], "nativ": [168, 418, 503], "speaker": [168, 230, 231, 418, 481, 482], "narrow": [168, 418], "gate": [168, 169, 418, 419], "expert": [168, 418], "counteract": [168, 418], "overfit": [168, 418], "flore": [168, 418], "assess": [168, 170, 171, 418, 420, 421], "groundwork": [168, 418], "realiz": [168, 418], "zho_han": [168, 418], "eng_latn": [168, 418], "olmo": [169, 419], "dolma": [169, 419], "soon": [169, 419], "olmo_1b_int4": [169, 419], "lm": [169, 178, 419, 427], "surg": [169, 419], "interfac": [169, 228, 230, 419, 478, 481, 502, 510], "undisclos": [169, 419], "scientif": [169, 173, 419, 423], "risk": [169, 419], "believ": [169, 419], "hope": [169, 419], "empow": [169, 419], "strengthen": [169, 419], "wave": [169, 419], "innov": [169, 171, 419, 421], "skill": [169, 170, 171, 172, 419, 420, 421, 422], "textbook": [170, 420], "augment": [170, 420], "websit": [170, 171, 420, 421], "educ": [170, 420], "sens": [170, 171, 420, 421, 511], "showcas": [170, 171, 172, 420, 421, 422], "nearli": [170, 420], "hasn": [170, 420], "intent": [170, 205, 420, 455], "craft": [170, 420], "vital": [170, 420], "societ": [170, 420], "phi2": [170, 420], "medium": [171, 421], "14b": [171, 172, 421, 422], "underw": [171, 421], "post": [171, 421], "math": [171, 172, 173, 421, 422, 423], "phi_3_mini_128k_instruct": [171, 421], "big": [171, 230, 240, 421, 481, 491], "trillion": [171, 173, 421, 423], "mixtral": [171, 421], "8x7b": [171, 421], "69": [171, 244, 421, 495], "mmlu": [171, 421], "mt": [171, 421], "bench": [171, 421], "enough": [171, 421], "compos": [171, 421], "heavili": [171, 421], "8t": [171, 421], "moreov": [171, 421], "qwen1": [172, 422], "72b": [172, 422], "stabl": [172, 422], "32k": [172, 422], "swiglu": [172, 422], "qkv": [172, 422], "qwenlm": [172, 422], "revolution": [172, 422], "thought": [172, 422], "instal": [172, 228, 251, 422, 478, 504], "encompass": [172, 422], "distinct": [172, 422], "multitud": [172, 422], "possess": [172, 422], "plan": [172, 191, 422, 441], "impress": [172, 422], "bigger": [172, 422], "fall": [172, 422], "qwen_7": [172, 422], "5b_chat": [172, 422], "starcoder2": [173, 423], "predecessor": [173, 423], "starcoder2transform": [173, 423], "bigcod": [173, 423], "starcod": [173, 423], "partnership": [173, 423], "swh": [173, 423], "stack": [173, 423], "digit": [173, 423], "archiv": [173, 423], "619": [173, 423], "15b": [173, 423], "thoroughli": [173, 423], "starcoderbas": [173, 423], "twice": [173, 423], "although": [173, 423], "deepseekcod": [173, 423], "openrail": [173, 423], "transpar": [173, 423], "regard": [173, 214, 423, 464], "persist": [173, 242, 423, 492], "swhid": [173, 423], "def": [173, 220, 423, 470], "t5": [174, 424], "reconsid": [174, 424], "hyper": [174, 424], "t5_small": [174, 424], "encount": [174, 424], "aggregationmethod": [175, 176, 425], "asretriev": [175, 176, 425], "asretrieverqueri": [175, 176, 425], "bucketlength": [175, 176, 425], "identityrank": [175, 176, 425], "numhasht": [175, 176, 425], "numberofneighbour": [175, 176, 425], "setaggregationmethod": [175, 176, 425], "setbucketlength": [175, 176, 425], "setidentityrank": [175, 176, 425], "setnumhasht": [175, 176, 425], "setnumberofneighbour": [175, 176, 425], "setsimilaritymethod": [175, 176, 425], "setvisibledist": [175, 176, 425], "similaritymethod": [175, 176, 425], "visibledist": [175, 176, 425], "extractnearestneighbor": [175, 176, 425], "getoutputcol": [175, 176, 192, 193, 195, 196, 197, 201, 203, 208, 211, 425, 442, 444, 445, 446, 450, 453, 460], "outputcol": [175, 176, 192, 193, 195, 196, 197, 198, 201, 203, 204, 208, 211, 232, 239, 425, 442, 444, 445, 446, 447, 450, 453, 454, 460, 483, 490], "setextractnearestneighbor": [175, 176, 425], "documentsimilarityrank": [176, 425], "lsh": [176, 425], "lib": [176, 425], "execut": [176, 202, 337, 425, 452, 506, 510], "ranker": [176, 425], "jupyt": [176, 228, 250, 425, 478, 502], "doc_similarity_rank": [176, 208, 212, 425, 461], "enablecach": [176, 208, 215, 425, 465], "rdd": [176, 215, 425, 465], "neighbour": [176, 425], "brp": [176, 425], "bucket": [176, 425], "euclidean": [176, 425], "hash": [176, 425], "ident": [176, 425], "debug": [176, 425], "document_similarity_ranker_finish": [176, 425], "finished_doc_similarity_rankings_id": [176, 425], "finished_doc_similarity_rankings_neighbor": [176, 425], "docsimrankerpipelin": [176, 425], "1510101612": [176, 425], "1634839239": [176, 425], "12448559591306324": [176, 425], "612640902": [176, 425], "1274183715": [176, 425], "1220122862046063": [176, 425], "1320876223": [176, 425], "1293373212": [176, 425], "17848855164122393": [176, 425], "1548374770": [176, 425], "1719102856": [176, 425], "23297156732534166": [176, 425], "wise": [176, 425], "inclus": [176, 425], "visibl": [176, 425], "addregexclass": [177, 178, 427], "addvocabclass": [177, 178, 427], "casestrategi": [177, 178, 427], "classcount": [177, 178, 427], "compoundcount": [177, 178, 427], "errorthreshold": [177, 178, 427], "finalr": [177, 178, 427], "initialr": [177, 178, 427], "languagemodelclass": [177, 178, 427], "maxcandid": [177, 178, 427], "maxsentlen": [177, 178, 427], "maxwindowlen": [177, 178, 427], "setcasestrategi": [177, 178, 427], "setclasscount": [177, 178, 427], "setcompoundcount": [177, 178, 427], "setepoch": [177, 178, 427], "seterrorthreshold": [177, 178, 427], "setfinalr": [177, 178, 427], "setinitialr": [177, 178, 427], "setlanguagemodelclass": [177, 178, 427], "setmaxcandid": [177, 178, 427], "setmaxsentlen": [177, 178, 427], "setmaxwindowlen": [177, 178, 427], "settradeoff": [177, 178, 427], "setvalidationfract": [177, 178, 427], "setweighteddistpath": [177, 178, 427], "setwordmaxdist": [177, 178, 427], "tradeoff": [177, 178, 427], "validationfract": [177, 178, 427], "weighteddistpath": [177, 178, 427], "wordmaxdist": [177, 178, 427], "comparelowcas": [177, 178, 427], "correctsymbol": [177, 178, 427], "gamma": [177, 178, 427], "getwordclass": [177, 178, 427], "idsvocab": [177, 178, 427], "setclass": [177, 178, 427], "setcomparelowcas": [177, 178, 427], "setcorrectsymbol": [177, 178, 427], "setgamma": [177, 178, 427], "setidsvocab": [177, 178, 427], "setvocabfreq": [177, 178, 427], "setvocabid": [177, 178, 427], "setweight": [177, 178, 427], "updateregexclass": [177, 178, 427], "updatevocabclass": [177, 178, 427], "vocabfreq": [177, 178, 427], "vocabid": [177, 178, 427], "doublevari": [177, 179, 429], "dupslimit": [177, 179, 180, 429, 430], "frequencyprior": [177, 179, 429], "intersect": [177, 179, 429], "reductlimit": [177, 179, 429], "setdoublevari": [177, 179, 429], "setfrequencyprior": [177, 179, 429], "setshortcircuit": [177, 179, 429], "shortcircuit": [177, 179, 429], "vowelswaplimit": [177, 179, 429], "wordsizeignor": [177, 179, 429], "deletesthreshold": [177, 180, 430], "frequencythreshold": [177, 180, 190, 191, 430, 441], "maxeditdist": [177, 180, 430], "setdeletesthreshold": [177, 180, 430], "setfrequencythreshold": [177, 180, 190, 191, 430, 441], "setmaxeditdist": [177, 180, 430], "spell": [177, 178, 179, 180, 202, 207, 248, 371, 427, 428, 429, 430, 452, 457, 509, 510, 511], "contextspellcheck": [178, 427], "noisi": [178, 427], "surround": [178, 206, 427, 456], "edit": [178, 179, 180, 427, 429, 430], "subword": [178, 427], "checker": [178, 179, 180, 427, 429, 430, 509], "uppercas": [178, 427], "perplex": [178, 427], "nlm": [178, 427], "datapoint": [178, 427], "vocab": [178, 427], "compound": [178, 427], "levenshtein": [178, 179, 180, 427, 429, 430], "depth": [178, 427, 509], "spellcheck": [178, 179, 180, 427, 429, 430], "1650": [178, 427], "_name_": [178, 427], "userdist": [178, 427], "sentlen": [178, 427], "fraction": [178, 427], "dist": [178, 427], "spellcheck_dl": [178, 427], "decis": [178, 427], "usenewlin": [178, 427], "cold": [178, 427], "dreari": [178, 427], "smow": [178, 427], "norvigsweet": [179, 429], "norvig": [179, 429], "bayesian": [179, 429], "tokenpattern": [179, 429], "ham": [179, 429], "duplic": [179, 180, 429], "vowel": [179, 429], "corrector": [179, 429], "gummi": [179, 180, 429, 430], "gummic": [179, 180, 429, 430], "gummier": [179, 180, 429, 430], "gummiest": [179, 180, 429, 430], "gummifer": [179, 180, 429, 430], "basi": [179, 180, 429, 430], "sensitivti": 179, "token_pattern": [179, 180, 429, 430], "symmetr": [179, 180, 429, 430], "delet": [179, 180, 429, 430, 506], "damerau": [179, 180, 429, 430], "transpos": [179, 180, 429, 430], "spellcheck_norvig": [179, 429], "symspel": [179, 180, 429, 430], "somtim": [179, 429], "wrrite": [179, 180, 429, 430], "wordz": [179, 180, 429, 430], "erong": [179, 180, 429, 430], "sometim": [179, 180, 429, 430, 506], "wrong": [179, 180, 429, 430], "symmetricdelet": [180, 430], "teach": [180, 430], "patttern": [180, 430], "spellcheck_sd": [180, 430], "spmetim": [180, 430], "employ": [181, 431], "mllib": [182, 432, 503], "stopwordsremov": [182, 432], "cleantoken": [182, 196, 207, 432, 445, 457], "stopwords_en": [182, 432], "forth": [182, 432], "defaultparamswrit": 183, "defaultparamsread": 183, "assertiondlapproach": [183, 433], "medicalnerapproach": [183, 433], "srt": [183, 433], "greaph": [183, 433], "infix": [184, 186, 188, 436, 438], "setinfix": [184, 186, 436], "setprefix": [184, 186, 436], "positionalmask": [184, 187, 437], "setpositionalmask": [184, 187, 437], "settolowercas": [184, 187, 190, 191, 437, 441], "tolowercas": [184, 187, 190, 191, 437, 441], "addcontextchar": [184, 188, 438], "addexcept": [184, 188, 438], "addinfixpattern": [184, 188, 438], "addsplitchar": [184, 188, 438], "casesensitiveexcept": [184, 188, 438], "contextchar": [184, 188, 438], "exceptionspath": [184, 188, 438], "getcasesensitiveexcept": [184, 188, 438], "getcontextchar": [184, 188, 438], "getexcept": [184, 188, 438], "getinfixpattern": [184, 188, 438], "getprefixpattern": [184, 188, 438], "getsplitchar": [184, 188, 438], "getsuffixpattern": [184, 188, 438], "infixpattern": [184, 188, 438], "prefixpattern": [184, 188, 438], "setcasesensitiveexcept": [184, 188, 438], "setexcept": [184, 188, 438], "setexceptionspath": [184, 188, 438], "setinfixpattern": [184, 188, 438], "setprefixpattern": [184, 188, 438], "setsplitchar": [184, 188, 438], "setsuffixpattern": [184, 188, 438], "settargetpattern": [184, 188, 438], "splitchar": [184, 188, 438], "suffixpattern": [184, 188, 438], "targetpattern": [184, 188, 438], "flatten": [185, 434], "artist": [185, 434], "benezar": [185, 434], "robert": [185, 434], "farendel": [185, 434], "graduat": [185, 434], "luca": [185, 434], "qam": [186, 436], "guarante": [187, 437], "flag": [187, 437], "eventu": [187, 437], "nthi": [187, 437], "tokenizedsent": [188, 438], "rulefactori": [188, 214, 438, 464], "grab": [188, 438], "sub": [188, 438], "won": [188, 438], "didn": [188, 438], "jane": [188, 438], "boyfriend": [188, 438], "piec": [188, 438], "token_rul": [188, 438], "factori": 188, "17": [189, 244, 246, 439, 495, 497], "ambiguitythreshold": [190, 191, 441], "enableregextoken": [190, 191, 441], "getambiguitythreshold": [190, 191, 441], "getfrequencythreshold": [190, 191, 441], "setambiguitythreshold": [190, 191, 441], "setenableregextoken": [190, 191, 441], "setniter": [190, 191, 441], "wordsegment": [191, 441], "korean": [191, 441], "japanes": [191, 441], "correspond": [191, 228, 441, 478], "rr": [191, 441], "likewis": [191, 441], "themselv": [191, 441], "\u4e0a\u6d77": [191, 441], "\u8ba1\u5212": [191, 441], "\u5230": [191, 441], "\u672c": [191, 441], "\u4e16\u7eaa": [191, 441], "\u672b": [191, 441], "\u5b9e\u73b0": [191, 441], "\u4eba\u5747": [191, 441], "\u56fd\u5185": [191, 441], "\u751f\u4ea7": [191, 441], "\u603b\u503c": [191, 441], "\u4e94\u5343": [191, 441], "\u7f8e\u5143": [191, 441], "\u4e0a": [191, 441], "\u6d77": [191, 441], "\u8ba1": [191, 441], "\u5212": [191, 441], "\u4e16": [191, 441], "\u7eaa": [191, 441], "\u5b9e": [191, 441], "\u73b0": [191, 441], "\u4eba": [191, 441], "\u5747": [191, 441], "\u56fd": [191, 441], "\u5185": [191, 441], "\u751f": [191, 441], "\u4ea7": [191, 441], "\u603b": [191, 441], "ll\u503c": [191, 441], "\u4e94": [191, 441], "\u5343": [191, 441], "\u7f8e": [191, 441], "\u5143": [191, 441], "shanghai": [191, 441], "dollar": [191, 441], "capita": [191, 441], "gdp": [191, 441], "tip": [191, 441], "frame": [191, 441], "frequent": [191, 441], "xue": [191, 441], "nianwen": [191, 441], "volum": [191, 441], "februari": [191, 441], "aclweb": [191, 441], "aclanthologi": [191, 441], "o03": [191, 441], "4002": [191, 441], "chinese_train": [191, 441], "utf8": [191, 441], "\u5341": [191, 441], "\u56db": [191, 441], "\u4e0d": [191, 441], "\u662f": [191, 441], "trainingdataset": [191, 441], "plit": [191, 441], "words_seg": [191, 441], "wordseg_pku": [191, 441], "zh": [191, 441], "\u7136\u800c": [191, 441], "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": [191, 441], "\u9019\u6a23": [191, 441], "\u7684": [191, 441], "\u8655\u7406": [191, 441], "\u4e5f": [191, 441], "\u884d\u751f": [191, 441], "\u4e86": [191, 441], "\u4e00\u4e9b": [191, 441], "\u554f\u984c": [191, 441], "chunkcol": [192, 194, 443], "failonmiss": [192, 194, 443], "isarrai": [192, 194, 443], "setchunkcol": [192, 194, 443], "setfailonmiss": [192, 194, 443], "setisarrai": [192, 194, 443], "setstartcol": [192, 194, 443], "setstartcolbytokenindex": [192, 194, 443], "startcol": [192, 194, 443], "startcolbytokenindex": [192, 194, 443], "cleanupmod": [192, 195, 203, 444, 453], "idcol": [192, 195, 203, 444, 453], "metadatacol": [192, 195, 203, 444, 453], "setidcol": [192, 195, 203, 444, 453], "setmetadatacol": [192, 195, 203, 444, 453], "cleanannot": [192, 196, 197, 198, 445, 446, 447], "outputasvector": [192, 196, 445], "annotationsplitsymbol": [192, 197, 446], "includemetadata": [192, 197, 446], "outputasarrai": [192, 197, 198, 446, 447], "parseembeddingsvector": [192, 197, 446], "setannotationsplitsymbol": [192, 197, 446], "setincludemetadata": [192, 197, 446, 507], "setoutputasarrai": [192, 197, 198, 446, 447], "setparseembeddingsvector": [192, 197, 446], "setvaluesplitsymbol": [192, 197, 446], "valuesplitsymbol": [192, 197, 446], "settextcol": [192, 201, 450], "textcol": [192, 201, 242, 243, 450, 492, 493], "fullannot": [192, 202, 233, 234, 452, 485], "fullannotateimag": [192, 202, 233, 234, 452, 485], "getignoreunsupport": [192, 202, 452], "setignoreunsupport": [192, 202, 452], "addassist": [192, 204, 454], "setaddassist": [192, 204, 454], "setchattempl": [192, 204, 208, 215, 454, 465], "csvdelimit": [192, 206, 456], "escapecsvdelimit": [192, 206, 456], "setcsvdelimit": [192, 206, 456], "setescapecsvdelimit": [192, 206, 456], "inferschema": [193, 442], "librispeech_asr_dummy_clean_audio_array_parquet": [193, 442], "float_arrai": [193, 442], "stringtyp": [194, 220, 249, 443], "fail": [194, 337, 443], "chunkassembl": [194, 443], "cleanup": [195, 203, 444, 453], "inplac": [195, 203, 444, 453], "inplace_ful": [195, 203, 444, 453], "shrink_ful": [195, 203, 444, 453], "each_ful": [195, 203, 444, 453], "delete_ful": [195, 203, 444, 453], "usabl": [196, 445], "lda": [196, 445], "forest": [196, 445], "featurecol": [196, 445], "gloveembed": [196, 445], "finished_sentence_embed": [196, 445], "resultwiths": [196, 445], "1619900017976761": [196, 445], "045552998781204224": [196, 445], "03229299932718277": [196, 445], "685609996318": [196, 445], "42416998744010925": [196, 445], "1378999948501587": [196, 445], "5717899799346924": [196, 445], "5078899860382": [196, 445], "08621499687433243": [196, 445], "15772999823093414": [196, 445], "06067200005054474": [196, 445], "395359992980": [196, 445], "4970499873161316": [196, 445], "7164199948310852": [196, 445], "40119001269340515": [196, 445], "05761000141501": [196, 445], "08170200139284134": [196, 445], "7159299850463867": [196, 445], "20677000284194946": [196, 445], "0295659992843": [196, 445], "ouput": 196, "finishedresult": [198, 447], "java_obj": [199, 224, 226, 448, 474, 477], "javaobject": [199, 200, 226, 448, 449, 477], "abc": [199, 226], "classmethod": [201, 222, 450, 472], "png": [201, 450], "gif": [201, 450], "bmp": [201, 450], "parse_embed": [202, 234, 452, 485], "principl": [202, 452, 510], "everyth": [202, 452, 510, 511], "happi": [202, 452, 505, 507, 510, 511], "prp": [202, 243, 244, 452, 493, 495, 505, 510, 511, 512], "rb": [202, 244, 452, 495, 505, 510, 511, 512], "optional_target": [202, 234, 452, 485], "explain_document_pipelin": [202, 220, 234, 452, 470, 485, 505, 510, 511], "dict_kei": [202, 234, 452, 485], "path_to_imag": [202, 234, 452, 485], "unsupport": [202, 452], "text2": [203, 453], "document1": [203, 453], "document2": [203, 453], "assembl": [204, 231, 454, 482], "messag": [204, 337, 454, 504], "df": [204, 230, 454, 481], "custom_tool": [204, 454], "endif": [204, 454], "tools_in_user_messag": [204, 454], "date_str": [204, 454], "jul": [204, 454], "2024": [204, 454], "block": [204, 230, 231, 454, 481, 482], "slot": [204, 454], "system_messag": [204, 454], "builtin": [204, 454], "builtin_tool": [204, 454], "environ": [204, 250, 337, 454, 503], "ipython": [204, 454], "reject": [204, 242, 454, 492, 512], "equalto": [204, 454], "code_interpret": [204, 454], "decemb": [204, 454], "2023": [204, 454], "argument": [204, 235, 248, 337, 454, 486, 499], "tojson": [204, 454], "indent": [204, 454], "endfor": [204, 454], "guidanc": [204, 454], "plug": [204, 454], "first_user_messag": [204, 454], "raise_except": [204, 454], "proper": [204, 454], "tool_cal": [204, 454], "elif": [204, 454], "python_tag": [204, 454], "arg_nam": [204, 454], "arg_val": [204, 454], "eom_id": [204, 454], "add_generation_prompt": [204, 454], "nhello": [204, 454], "arg": [205, 222, 224, 249, 455, 474, 500], "kwarg": [205, 230, 455, 481], "javaestim": [205, 209, 226], "decid": [205, 231, 455], "behav": [205, 455], "exactli": [205, 455], "pipeline_model": [205, 228, 239, 452, 455, 478, 490, 502], "intend": [205, 455], "tab": [206, 228, 456, 478, 502], "escap": [206, 456], "quot": [206, 456], "defailt": [206, 456], "comma": [206, 456], "table_csv": [206, 456], "csv_data": [206, 456], "input_format": [206, 456], "cleantext": [207, 457], "opensourc": [207, 457], "getlazyannot": [208, 211, 460], "lazyannot": [208, 211, 460], "setlazyannot": [208, 211, 460], "features": [208, 215, 465], "paddingsid": [208, 215, 465], "paddingvalu": [208, 215, 465], "returnattentionmask": [208, 215, 465], "samplingr": [208, 215, 465], "setdonorm": [208, 215, 465], "setfeatures": [208, 215, 465], "setpaddingsid": [208, 215, 465], "setpaddingvalu": [208, 215, 465], "setreturnattentionmask": [208, 215, 465], "setsamplingr": [208, 215, 465], "getbatchs": [208, 215, 465], "contradictionidparam": [208, 215, 465], "entailmentidparam": [208, 215, 465], "setcontradictionidparam": [208, 215, 465], "setentailmentidparam": [208, 215, 465], "getcasesensit": [208, 215, 465], "getactiv": [208, 215, 465], "getmultilabel": [208, 215, 465], "multilabel": [208, 215, 465], "setactiv": [208, 215, 465], "setmultilabel": [208, 215, 465], "getuseclstoken": [208, 215, 465], "setuseclstoken": [208, 215, 465], "getdimens": [208, 215, 465], "getenablecach": [208, 215, 465], "setenablecach": [208, 215, 465], "getengin": [208, 215, 465], "setnreturnsequ": [208, 215, 465], "setdores": [208, 215, 465], "setfeatureextractortyp": [208, 215, 465], "setimagemean": [208, 215, 465], "setimagestd": [208, 215, 465], "setresampl": [208, 215, 465], "dynamictemperatureexpon": [208, 215, 465], "dynamictemperaturerang": [208, 215, 465], "setcacheprompt": [208, 215, 465], "setdisabletokenid": [208, 215, 465], "setdynamictemperatureexpon": [208, 215, 465], "setdynamictemperaturerang": [208, 215, 465], "setembed": [208, 215, 465], "setgrammar": [208, 215, 465], "setignoreeo": [208, 215, 465], "setinputprefix": [208, 215, 465], "setinputprefixbo": [208, 215, 465], "setinputsuffix": [208, 215, 465], "setlookupcachedynamicfilepath": [208, 215, 465], "setlookupcachestaticfilepath": [208, 215, 465], "setloraadapt": [208, 215, 465], "setmirostat": [208, 215, 465], "setmirostateta": [208, 215, 465], "setmirostattau": [208, 215, 465], "setmodelalia": [208, 215, 465], "setmodeldraft": [208, 215, 465], "setndraft": [208, 215, 465], "setngpulayersdraft": [208, 215, 465], "setnkeep": [208, 215, 465], "setnthreadsbatchdraft": [208, 215, 465], "setnthreadsdraft": [208, 215, 465], "setpsplit": [208, 215, 465], "setpenaltyprompt": [208, 215, 465], "setsampl": [208, 215, 465], "setsystemprompt": [208, 215, 465], "settokenbia": [208, 215, 465], "settokenidbia": [208, 215, 465], "setusechattempl": [208, 215, 465], "max_length_limit": [208, 215, 465], "getmaxsentencelength": [208, 215, 465], "getstoragepath": [208, 218, 468], "storagepath": [208, 218, 468], "savestorag": [208, 218, 468], "enableinmemorystorag": [208, 218, 468], "getenableinmemorystorag": [208, 218, 468], "getincludestorag": [208, 218, 468], "includestorag": [208, 218, 468], "setenableinmemorystorag": [208, 218, 468], "setincludestorag": [208, 218, 468], "getstorageref": [208, 218, 468], "storageref": [208, 218, 468], "javamlwrit": [209, 210, 217, 223, 239], "javamodel": [210, 226], "lazili": [211, 460], "renam": 211, "lazi": 211, "cov_obj": [213, 462], "recal": [215, 465], "loraadapt": [215, 465], "lora": [215, 465], "tokenbia": [215, 465], "tokenidbia": [215, 465], "fo": [219, 469], "output_column": [220, 470], "vbz": [220, 242, 470, 492, 512], "f": [220, 228, 470, 478, 502], "filter_po": [220, 470], "epeu": [220, 470], "output_typ": [220, 470], "udf": [220, 470], "userdefinedfunct": [220, 470], "nnp_token": [220, 470], "lambda": [220, 470], "annotatyon_typ": [220, 470], "structfield": [220, 249], "integertyp": [220, 249], "maptyp": 220, "floattyp": 220, "chunks_df": [220, 470], "pos_chunk": [220, 470], "getdatafram": [221, 224, 474], "new_java_arrai": [221, 224, 474], "new_java_array_integ": [221, 224, 474], "new_java_array_str": [221, 224, 474], "new_java_obj": [221, 224, 474], "spark_vers": [221, 224, 474], "getparamvalu": [221, 225, 476], "getter_attr": [221, 225, 476], "setparamvalu": [221, 225, 476], "transform_recurs": [221, 226, 477], "kwd": 222, "javamlread": [222, 239, 472], "mlreader": [222, 472], "clazz": [222, 472], "rl": [222, 472], "javatransform": [223, 239], "javawrapp": [224, 474], "jdf": [224, 474], "pylist": [224, 474], "java_class": [224, 474], "todo": [224, 474], "paramnam": [225, 476], "log_asset": [227, 228, 478], "log_asset_data": [227, 228, 478], "log_completed_run": [227, 228, 478], "log_metr": [227, 228, 478, 502], "log_paramet": [227, 228, 478], "log_pipeline_paramet": [227, 228, 478, 502], "log_visu": [227, 228, 478, 502], "parti": [227, 251, 479], "workspac": [228, 478], "project_nam": [228, 478, 502], "comet_mod": [228, 478, 502], "experiment_id": [228, 478], "experiment_kwarg": [228, 478], "logger": [228, 478, 502], "practition": [228, 478, 502], "lifecycl": [228, 478, 502, 504], "track": [228, 478, 502, 503], "outputlogpath": [228, 478, 502], "onlin": [228, 478, 502], "reus": [228, 232, 478, 483], "importerror": [228, 478], "output_log_path": [228, 478, 502], "embd": [228, 478, 502], "logdir": [228, 478, 502], "attribut": [228, 337], "comet_ml": [228, 478, 502], "submit": [228, 250, 478, 502], "outstand": [228, 478], "asset_path": [228, 478], "upload": [228, 248, 478, 499], "asset": [228, 478], "attach": [228, 230, 231, 240, 395, 396, 460, 465, 476, 478, 481, 482, 491], "log_file_path": [228, 478], "sklearn": [228, 478, 502], "multilabelbinar": [228, 478, 502], "classification_report": [228, 478, 502], "preds_df": [228, 478, 502], "topanda": [228, 478, 502], "mlb": [228, 478, 502], "y_true": [228, 478, 502], "fit_transform": [228, 478, 502], "y_pred": [228, 478, 502], "output_dict": [228, 478, 502], "html": [228, 230, 231, 232, 237, 240, 478, 481, 482, 483, 491, 502], "viz": [228, 478, 502], "colum": [228, 478, 502], "ner_chunk": [228, 478, 502], "sparknlp_displai": [228, 478, 502], "nervisu": [228, 478, 502], "idx": [228, 478, 502], "enumer": [228, 478, 502], "label_col": [228, 478, 502], "document_col": [228, 478, 502], "return_html": [228, 478, 502], "interv": [228, 478], "refresh": [228, 478], "partition_text": [229, 230, 481], "partition_url": [229, 230, 481], "chunkingstrategi": [229, 231, 482], "combinetextundernchar": [229, 231, 482], "maxcharact": [229, 231, 482], "newafternchar": [229, 231, 482], "overlapal": [229, 231, 482], "setchunkingstrategi": [229, 231, 482], "setcombinetextundernchar": [229, 231, 482], "setmaxcharact": [229, 231, 482], "setnewafternchar": [229, 231, 482], "setoverlap": [229, 231, 482], "setoverlapal": [229, 231, 482], "addattachmentcont": [229, 231, 482], "getaddattachmentcont": [229, 231, 482], "setaddattachmentcont": [229, 231, 482], "appendcel": [229, 231, 482], "cellsepar": [229, 231, 482], "getappendcel": [229, 231, 482], "getcellsepar": [229, 231, 482], "setappendcel": [229, 231, 482], "setcellsepar": [229, 231, 482], "gettimeout": [229, 231, 482], "sethead": [229, 231, 232, 482, 483], "settimeout": [229, 231, 482], "timeout": [229, 230, 231, 481, 482], "getincludeslidenot": [229, 231, 482], "includeslidenot": [229, 231, 482], "setincludeslidenot": [229, 231, 482], "getgroupbrokenparagraph": [229, 231, 482], "getmaxlinecount": [229, 231, 482], "getparagraphsplit": [229, 231, 482], "getshortlinewordthreshold": [229, 231, 482], "getthreshold": [229, 231, 482], "gettitlelengths": [229, 231, 482], "groupbrokenparagraph": [229, 231, 482], "maxlinecount": [229, 231, 482], "paragraphsplit": [229, 231, 482], "setgroupbrokenparagraph": [229, 231, 482], "setmaxlinecount": [229, 231, 482], "setparagraphsplit": [229, 231, 482], "setshortlinewordthreshold": [229, 231, 482], "settitlelengths": [229, 231, 482], "shortlinewordthreshold": [229, 231, 482], "titlelengths": [229, 231, 482], "contentpath": [229, 232, 483], "contenttyp": [229, 232, 483], "getcontentpath": [229, 232, 483], "getcontenttyp": [229, 232, 483], "getincludepagebreak": [229, 232, 483], "getinfertablestructur": [229, 232, 483], "getstorecont": [229, 232, 483], "gettitlefonts": [229, 232, 483], "includepagebreak": [229, 232, 483], "infertablestructur": [229, 232, 483], "setcontentpath": [229, 232, 483], "setcontenttyp": [229, 232, 483], "setincludepagebreak": [229, 232, 483], "setinfertablestructur": [229, 232, 483], "setstorecont": [229, 232, 483], "settitlefonts": [229, 232, 483], "storecont": [229, 232, 483], "titlefonts": [229, 232, 483], "docx": [230, 232, 481, 483], "xlsx": [230, 232, 481, 483], "powerpoint": [230, 232, 240, 481, 483, 491], "ppt": [230, 232, 237, 240, 481, 483, 491], "pptx": [230, 232, 481, 483], "eml": [230, 232, 481, 483], "msg": [230, 232, 481, 483], "content_typ": [230, 481], "store_cont": [230, 481], "fetch": [230, 231, 481], "title_font_s": [230, 481], "titl": [230, 231, 232, 240, 245, 248, 481, 483, 491, 496, 499, 512], "include_page_break": [230, 481], "group_broken_paragraph": [230, 481], "title_length_s": [230, 481], "qualifi": [230, 231, 481], "paragraph_split": [230, 481], "short_line_word_threshold": [230, 481], "ratio": [230, 231, 481], "switch": [230, 481], "max_line_count": [230, 481], "include_slide_not": [230, 481], "infer_table_structur": [230, 481], "append_cel": [230, 481], "cell_separ": [230, 481], "add_attachment_cont": [230, 481], "txt_directori": [230, 481], "txtfile": [230, 481], "partition_df": [230, 481], "ema": [230, 481], "sev": [230, 481], "wikip": [230, 481], "wikipedi": [230, 481], "sparknlp_partition_reader_demo": [230, 481], "ipynb": [230, 481], "raw_text": [230, 481], "fox": [230, 481], "walk": [230, 481], "lane": [230, 481], "met": [230, 481], "text_df": [230, 481], "narrativetext": [230, 240, 481, 491], "elementtyp": [230, 240, 481, 491], "urls_df": [230, 481], "adjac": 231, "narr": [231, 482], "fragment": 231, "heurist": [231, 232], "layout": [231, 232, 239, 490], "smoothli": [232, 483], "workflow": [232, 483, 502], "seamless": [232, 483], "blizzard": [232, 483], "blizz": [232, 483], "juego": [232, 483], "gmail": [232, 483], "im": [232, 483], "mime": 232, "manual": [232, 250, 505], "bold": 232, "center": 232, "from_disk": [233, 234, 485], "clearcach": [233, 235, 486], "downloadmodel": [233, 235, 486], "downloadmodeldirectli": [233, 235, 486], "downloadpipelin": [233, 235, 486], "showavailableannot": [233, 235, 486], "showpublicmodel": [233, 235, 486, 506], "showpublicpipelin": [233, 235, 486, 511], "showuncategorizedresourc": [233, 235, 486], "disk_loc": [234, 485], "light_model": [234, 485], "onto_100": [235, 486], "onto_300": [235, 486], "ner_dl_bert": [235, 486], "similarli": [235, 486], "check_spel": [235, 486, 511], "match_datetim": [235, 486, 511], "clear": [235, 486], "j_dwn": [235, 486], "pythonresourcedownload": [235, 486], "obj": [235, 243, 486, 493], "unzip": [235, 248, 486, 499], "filer": [235, 486], "pdf_layout_text_stripp": [237, 238, 488], "pdf_text_stripp": [237, 238, 488], "onlypagenum": [237, 239, 490], "pagenumcol": [237, 239, 490], "partitionnum": [237, 239, 490], "setonlypagenum": [237, 239, 490], "setpagenumcol": [237, 239, 490], "setpartitionnum": [237, 239, 490], "setsort": [237, 239, 490], "setsplitpag": [237, 239, 490], "setstoresplittedpdf": [237, 239, 490], "settextstripp": [237, 239, 490], "sort": [237, 239, 490], "splitpag": [237, 239, 490], "storesplittedpdf": [237, 239, 490], "textstripp": [237, 239, 490], "stripper": [238, 239, 488], "pdflayouttextstripp": [238, 488], "pdftextstripp": [238, 488], "hasinputcol": 239, "hasoutputcol": 239, "pdf_path": [239, 490], "data_fram": [239, 490], "binaryfil": [239, 490], "pdf_df": [239, 240, 490, 491], "modificationtim": [239, 490], "paula": [239, 490], "2025": [239, 490], "height_dimens": [239, 490], "width_dimens": [239, 490], "pagenum": [239, 490], "html_df": [240, 491], "Or": [240, 491], "shorthand": [240, 491], "email_df": [240, 491], "docpath": [240, 491], "doc_df": [240, 491], "filepath": [240, 491], "simplifi": [240, 491], "sent_to": [240, 491], "danilo": [240, 491], "htmlpath": [240, 491], "pagenumb": [240, 491], "illustr": [240, 491], "literatur": [240, 491], "permiss": [240, 491], "pdfpath": [240, 491], "pptdf": [240, 491], "txtdf": [240, 491], "analyt": [240, 491], "xlsdf": [240, 491], "financi": [240, 491], "sheetnam": [240, 491], "xml_df": [240, 491], "smith": [240, 491], "elementid": [240, 491], "readjsonfil": [241, 246, 497], "documentcol": [242, 243, 492, 493], "sentencecol": [242, 243, 492, 493], "tokencol": [242, 492], "conlllabelindex": [242, 492], "conllposindex": [242, 492], "conlldocidcol": [242, 492], "doc_id": [242, 245, 492, 496], "labelcol": [242, 492], "includedocid": [242, 492], "docstart": [242, 492, 512], "eu": [242, 492, 512], "np": [242, 492, 512], "vp": [242, 492, 512], "misc": [242, 492, 512], "boycott": [242, 492, 512], "british": [242, 492, 512], "lamb": [242, 492, 512], "blackburn": [242, 492], "brussel": [242, 492], "1996": [242, 492], "08": [242, 492], "storage_level": [242, 492], "storagelevel": [242, 492], "lift": [242, 492], "disk_onli": [242, 492], "uposcol": [243, 493], "upo": [243, 493], "xposcol": [243, 493], "xpo": [243, 493], "sent_id": [243, 493], "sell": [243, 493], "pron": [243, 493], "nom": [243, 493], "plur": [243, 493], "_": [243, 493], "tens": [243, 493], "conj": [243, 493], "cc": [243, 493], "spaceaft": [243, 493], "punct": [243, 493], "conllufil": [243, 493, 512], "conlldataset": [243, 493, 512], "morph": [243, 493], "Into": [243, 493], "googleo": [243, 493], "sconj": [243, 493], "propn": [243, 493], "adp": [243, 493], "wp": [243, 493], "vbd": [243, 244, 493, 495, 512], "ago": [244, 495, 512], "posdf": [244, 495], "61": [244, 495], "67": [244, 245, 495, 496, 512], "nonexecut": [244, 495], "76": [244, 495], "director": [244, 495], "84": [244, 495], "outputposcol": [244, 495], "outputdocumentcol": [244, 495], "outputtextcol": [244, 495], "medic": [245, 496, 512], "medment": [245, 496, 512], "25763772": [245, 496, 512], "dctn4": [245, 496, 512], "t116": [245, 496, 512], "t123": [245, 496, 512], "c4308010": [245, 496, 512], "63": [245, 496, 512], "chronic": [245, 496, 512], "pseudomona": [245, 496, 512], "aeruginosa": [245, 496, 512], "infect": [245, 496, 512], "t047": [245, 496, 512], "c0854135": [245, 496, 512], "82": [245, 496, 512], "cystic": [245, 496, 512], "fibrosi": [245, 496, 512], "c0010674": [245, 496, 512], "120": [245, 496, 512], "pa": [245, 496, 512], "124": [245, 496, 512], "139": [245, 496, 512], "pubtatorfil": [245, 496], "corpus_pubtator_sampl": [245, 496], "pubtatordataset": [245, 496], "finished_token": [245, 496, 507], "finished_po": [245, 496], "finished_n": [245, 496], "finished_token_metadata": [245, 496], "finished_pos_metadata": [245, 496], "finished_label_metadata": [245, 496], "mo": [245, 496], "ispaddedtoken": [245, 496], "token_spac": [246, 497], "sentence_end": [246, 497], "spaci": [246, 497], "multi_doc_token": [246, 497], "went": [246, 497], "night": [246, 497], "bought": [246, 497], "bread": [246, 497], "54": [246, 497], "jsonfilepath": [246, 497], "model_data": [248, 499], "dictionary_for_upload": [248, 499], "model_zip_path": [248, 499], "pythoncod": [248, 499], "git_token": [248, 499], "predictedent": [248, 499], "sparknlpvers": [248, 499], "howtous": [248, 499], "livedemo": [248, 499], "runincolab": [248, 499], "scalacod": [248, 499], "nlucod": [248, 499], "datasourc": [248, 499], "includedmodel": [248, 499], "info": [248, 499], "zip_path": [248, 499], "zip": [248, 499], "folder_path": [248, 499], "binarytyp": 249, "quick": [250, 502, 507], "pypi": 250, "pip": 250, "anaconda": 250, "shell": 250, "compil": 250, "sbt": 250, "assembli": 250, "oracl": 250, "openjdk": 250, "0_292": 250, "sparknlp": [250, 502, 505, 506, 507, 508, 510, 511, 512], "python3": 250, "bin": 250, "cheat": 251, "guid": [251, 503], "py": [309, 425, 458, 459, 467, 473, 477], "subclass": [309, 337, 425, 459, 473, 477], "ins": [309, 425, 459, 477], "uid": [309, 425, 459, 477], "documenttokensplittertestspec": 337, "methodnam": 337, "runtest": 337, "fixtur": 337, "testcas": 337, "constructor": 337, "author": 337, "deconstruct": 337, "setup": 337, "teardown": 337, "__init__": 337, "signatur": 337, "failureexcept": 337, "assert": 337, "deem": 337, "longmessag": 337, "repr": 337, "failur": 337, "maxdiff": 337, "diff": 337, "difflib": 337, "hook": 337, "exercis": 337, "test_run": 337, "sbd": 371, "dictionary_path": [429, 430], "py4j": [448, 449, 477], "java_gatewai": [448, 449, 477], "mixin": 472, "javaparam": 472, "_java_obj": 473, "sc": 474, "tf_graph": 498, "tf_graph_1x": 498, "overview": [501, 509], "dedic": 502, "account": 502, "inspect": 502, "init": 502, "sparknlp_experi": 502, "offline_directori": 502, "later": 502, "record": 503, "registri": 503, "central": 503, "send": 504, "mlflow": 504, "clearli": 505, "explain_document_ml": [505, 510, 511], "approx": [505, 510, 511], "mb": [505, 510, 511], "ok": [505, 510, 511], "spearhead": 506, "declar": 506, "accordingli": 506, "extra_loc": 506, "classifierdl_use_trec50": 506, "classifierdl_use_spam": 506, "column_nam": 506, "interchang": 507, "road": 507, "proce": 507, "constantli": 511, "train_po": 512, "training_conl": 512, "train_corpu": 512, "withcolumnrenam": 512, "trainingpubtatordf": 512, "corpus_pubt": 512}, "objects": {"": [[471, 0, 0, "-", "sparknlp"]], "sparknlp": [[252, 0, 0, "-", "annotation"], [253, 0, 0, "-", "annotation_audio"], [254, 0, 0, "-", "annotation_image"], [371, 0, 0, "-", "annotator"], [471, 4, 1, "", "annotators"], [451, 0, 0, "-", "base"], [463, 0, 0, "-", "common"], [471, 4, 1, "", "embeddings"], [470, 0, 0, "-", "functions"], [475, 0, 0, "-", "internal"], [479, 0, 0, "-", "logging"], [480, 0, 0, "-", "partition"], [484, 0, 0, "-", "pretrained"], [471, 5, 1, "", "read"], [489, 0, 0, "-", "reader"], [471, 5, 1, "", "start"], [494, 0, 0, "-", "training"], [499, 0, 0, "-", "upload_to_hub"], [500, 0, 0, "-", "util"], [471, 5, 1, "", "version"]], "sparknlp.annotation": [[252, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[252, 2, 1, "", "annotatorType"], [252, 3, 1, "", "arrayType"], [252, 2, 1, "", "begin"], [252, 3, 1, "", "copy"], [252, 3, 1, "", "dataType"], [252, 2, 1, "", "embeddings"], [252, 2, 1, "", "end"], [252, 3, 1, "", "fromRow"], [252, 2, 1, "", "metadata"], [252, 2, 1, "", "result"], [252, 3, 1, "", "toRow"]], "sparknlp.annotation_audio": [[253, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[253, 2, 1, "", "annotatorType"], [253, 3, 1, "", "copy"], [253, 2, 1, "", "metadata"], [253, 2, 1, "", "result"]], "sparknlp.annotation_image": [[254, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[254, 2, 1, "", "annotatorType"], [254, 3, 1, "", "copy"], [254, 2, 1, "", "height"], [254, 2, 1, "", "metadata"], [254, 2, 1, "", "mode"], [254, 2, 1, "", "nChannels"], [254, 2, 1, "", "origin"], [254, 2, 1, "", "result"], [254, 2, 1, "", "width"]], "sparknlp.annotator": [[371, 4, 1, "", "annotators"], [371, 4, 1, "", "audio"], [256, 0, 0, "-", "audio"], [259, 0, 0, "-", "chunk2_doc"], [260, 0, 0, "-", "chunker"], [371, 4, 1, "", "classifier"], [286, 0, 0, "-", "classifier_dl"], [310, 0, 0, "-", "cleaners"], [371, 4, 1, "", "coref"], [311, 0, 0, "-", "coref"], [371, 4, 1, "", "cv"], [318, 0, 0, "-", "cv"], [330, 0, 0, "-", "date2_chunk"], [332, 0, 0, "-", "dependency"], [334, 0, 0, "-", "document_character_text_splitter"], [335, 0, 0, "-", "document_normalizer"], [336, 0, 0, "-", "document_token_splitter"], [337, 0, 0, "-", "document_token_splitter_test"], [371, 4, 1, "", "embeddings"], [351, 0, 0, "-", "embeddings"], [371, 4, 1, "", "er"], [369, 0, 0, "-", "er"], [370, 0, 0, "-", "graph_extraction"], [371, 4, 1, "", "keyword"], [372, 0, 0, "-", "keyword_extraction"], [371, 4, 1, "", "ld"], [374, 0, 0, "-", "ld_dl"], [376, 0, 0, "-", "lemmatizer"], [379, 0, 0, "-", "matcher"], [383, 0, 0, "-", "n_gram_generator"], [384, 0, 0, "-", "ner"], [391, 0, 0, "-", "normalizer"], [392, 0, 0, "-", "openai"], [397, 0, 0, "-", "param"], [371, 4, 1, "", "parser"], [398, 0, 0, "-", "pos"], [371, 4, 1, "", "regex"], [371, 4, 1, "", "sbd"], [371, 4, 1, "", "sda"], [400, 0, 0, "-", "sentence"], [371, 4, 1, "", "sentence_detector_dl"], [403, 0, 0, "-", "sentiment"], [412, 0, 0, "-", "seq2seq"], [426, 0, 0, "-", "similarity"], [371, 4, 1, "", "spell"], [428, 0, 0, "-", "spell_check"], [431, 0, 0, "-", "stemmer"], [432, 0, 0, "-", "stop_words_cleaner"], [433, 0, 0, "-", "tf_ner_dl_graph_builder"], [435, 0, 0, "-", "token"], [439, 0, 0, "-", "token2_chunk"], [440, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[255, 0, 0, "-", "hubert_for_ctc"], [257, 0, 0, "-", "wav2vec2_for_ctc"], [258, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[255, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[255, 2, 1, "", "configProtoBytes"], [255, 2, 1, "", "inputAnnotatorTypes"], [255, 3, 1, "", "loadSavedModel"], [255, 2, 1, "", "name"], [255, 2, 1, "", "outputAnnotatorType"], [255, 3, 1, "", "pretrained"], [255, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[257, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[257, 2, 1, "", "configProtoBytes"], [257, 2, 1, "", "inputAnnotatorTypes"], [257, 3, 1, "", "loadSavedModel"], [257, 2, 1, "", "name"], [257, 2, 1, "", "outputAnnotatorType"], [257, 3, 1, "", "pretrained"], [257, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[258, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[258, 2, 1, "", "configProtoBytes"], [258, 3, 1, "", "getIsMultilingual"], [258, 3, 1, "", "getLanguage"], [258, 2, 1, "", "inputAnnotatorTypes"], [258, 2, 1, "", "isMultilingual"], [258, 2, 1, "", "language"], [258, 3, 1, "", "loadSavedModel"], [258, 2, 1, "", "name"], [258, 2, 1, "", "outputAnnotatorType"], [258, 3, 1, "", "pretrained"], [258, 3, 1, "", "setConfigProtoBytes"], [258, 3, 1, "", "setLanguage"], [258, 3, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[259, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunk2_doc.Chunk2Doc": [[259, 2, 1, "", "inputAnnotatorTypes"], [259, 2, 1, "", "name"], [259, 2, 1, "", "outputAnnotatorType"], [259, 3, 1, "", "setParams"]], "sparknlp.annotator.chunker": [[260, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[260, 2, 1, "", "inputAnnotatorTypes"], [260, 2, 1, "", "name"], [260, 2, 1, "", "outputAnnotatorType"], [260, 2, 1, "", "regexParsers"], [260, 3, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[261, 0, 0, "-", "albert_for_multiple_choice"], [262, 0, 0, "-", "albert_for_question_answering"], [263, 0, 0, "-", "albert_for_sequence_classification"], [264, 0, 0, "-", "albert_for_token_classification"], [265, 0, 0, "-", "albert_for_zero_shot_classification"], [266, 0, 0, "-", "bart_for_zero_shot_classification"], [267, 0, 0, "-", "bert_for_multiple_choice"], [268, 0, 0, "-", "bert_for_question_answering"], [269, 0, 0, "-", "bert_for_sequence_classification"], [270, 0, 0, "-", "bert_for_token_classification"], [271, 0, 0, "-", "bert_for_zero_shot_classification"], [272, 0, 0, "-", "camembert_for_question_answering"], [273, 0, 0, "-", "camembert_for_sequence_classification"], [274, 0, 0, "-", "camembert_for_token_classification"], [275, 0, 0, "-", "camembert_for_zero_shot_classification"], [276, 0, 0, "-", "classifier_dl"], [277, 0, 0, "-", "deberta_for_question_answering"], [278, 0, 0, "-", "deberta_for_sequence_classification"], [279, 0, 0, "-", "deberta_for_token_classification"], [280, 0, 0, "-", "deberta_for_zero_shot_classification"], [281, 0, 0, "-", "distil_bert_for_question_answering"], [282, 0, 0, "-", "distil_bert_for_sequence_classification"], [283, 0, 0, "-", "distil_bert_for_token_classification"], [284, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [285, 0, 0, "-", "distilbert_for_multiple_choice"], [287, 0, 0, "-", "longformer_for_question_answering"], [288, 0, 0, "-", "longformer_for_sequence_classification"], [289, 0, 0, "-", "longformer_for_token_classification"], [290, 0, 0, "-", "mpnet_for_question_answering"], [291, 0, 0, "-", "mpnet_for_sequence_classification"], [292, 0, 0, "-", "mpnet_for_token_classification"], [293, 0, 0, "-", "multi_classifier_dl"], [294, 0, 0, "-", "roberta_for_multiple_choice"], [295, 0, 0, "-", "roberta_for_question_answering"], [296, 0, 0, "-", "roberta_for_sequence_classification"], [297, 0, 0, "-", "roberta_for_token_classification"], [298, 0, 0, "-", "roberta_for_zero_shot_classification"], [299, 0, 0, "-", "sentiment_dl"], [300, 0, 0, "-", "tapas_for_question_answering"], [301, 0, 0, "-", "xlm_roberta_for_multiple_choice"], [302, 0, 0, "-", "xlm_roberta_for_question_answering"], [303, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [304, 0, 0, "-", "xlm_roberta_for_token_classification"], [305, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [306, 0, 0, "-", "xlnet_for_sequence_classification"], [307, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[261, 1, 1, "", "AlbertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice": [[261, 2, 1, "", "choicesDelimiter"], [261, 2, 1, "", "inputAnnotatorTypes"], [261, 3, 1, "", "loadSavedModel"], [261, 2, 1, "", "name"], [261, 2, 1, "", "outputAnnotatorType"], [261, 3, 1, "", "pretrained"], [261, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[262, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[262, 2, 1, "", "coalesceSentences"], [262, 2, 1, "", "configProtoBytes"], [262, 2, 1, "", "inputAnnotatorTypes"], [262, 3, 1, "", "loadSavedModel"], [262, 2, 1, "", "name"], [262, 2, 1, "", "outputAnnotatorType"], [262, 3, 1, "", "pretrained"], [262, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[263, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[263, 2, 1, "", "coalesceSentences"], [263, 2, 1, "", "configProtoBytes"], [263, 3, 1, "", "getClasses"], [263, 2, 1, "", "inputAnnotatorTypes"], [263, 3, 1, "", "loadSavedModel"], [263, 2, 1, "", "name"], [263, 2, 1, "", "outputAnnotatorType"], [263, 3, 1, "", "pretrained"], [263, 3, 1, "", "setCoalesceSentences"], [263, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[264, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[264, 2, 1, "", "configProtoBytes"], [264, 3, 1, "", "getClasses"], [264, 2, 1, "", "inputAnnotatorTypes"], [264, 3, 1, "", "loadSavedModel"], [264, 2, 1, "", "name"], [264, 2, 1, "", "outputAnnotatorType"], [264, 3, 1, "", "pretrained"], [264, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[265, 1, 1, "", "AlbertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification": [[265, 2, 1, "", "coalesceSentences"], [265, 2, 1, "", "configProtoBytes"], [265, 3, 1, "", "getClasses"], [265, 2, 1, "", "inputAnnotatorTypes"], [265, 3, 1, "", "loadSavedModel"], [265, 2, 1, "", "name"], [265, 2, 1, "", "outputAnnotatorType"], [265, 3, 1, "", "pretrained"], [265, 3, 1, "", "setCoalesceSentences"], [265, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[266, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[266, 2, 1, "", "coalesceSentences"], [266, 2, 1, "", "configProtoBytes"], [266, 3, 1, "", "getClasses"], [266, 2, 1, "", "inputAnnotatorTypes"], [266, 3, 1, "", "loadSavedModel"], [266, 2, 1, "", "maxSentenceLength"], [266, 2, 1, "", "name"], [266, 2, 1, "", "outputAnnotatorType"], [266, 3, 1, "", "pretrained"], [266, 3, 1, "", "setCoalesceSentences"], [266, 3, 1, "", "setConfigProtoBytes"], [266, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[267, 1, 1, "", "BertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice": [[267, 2, 1, "", "choicesDelimiter"], [267, 2, 1, "", "inputAnnotatorTypes"], [267, 3, 1, "", "loadSavedModel"], [267, 2, 1, "", "name"], [267, 2, 1, "", "outputAnnotatorType"], [267, 3, 1, "", "pretrained"], [267, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[268, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[268, 2, 1, "", "coalesceSentences"], [268, 2, 1, "", "configProtoBytes"], [268, 2, 1, "", "inputAnnotatorTypes"], [268, 3, 1, "", "loadSavedModel"], [268, 2, 1, "", "name"], [268, 2, 1, "", "outputAnnotatorType"], [268, 3, 1, "", "pretrained"], [268, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[269, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[269, 2, 1, "", "coalesceSentences"], [269, 2, 1, "", "configProtoBytes"], [269, 3, 1, "", "getClasses"], [269, 2, 1, "", "inputAnnotatorTypes"], [269, 3, 1, "", "loadSavedModel"], [269, 2, 1, "", "name"], [269, 2, 1, "", "outputAnnotatorType"], [269, 3, 1, "", "pretrained"], [269, 3, 1, "", "setCoalesceSentences"], [269, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[270, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[270, 2, 1, "", "configProtoBytes"], [270, 3, 1, "", "getClasses"], [270, 2, 1, "", "inputAnnotatorTypes"], [270, 3, 1, "", "loadSavedModel"], [270, 2, 1, "", "name"], [270, 2, 1, "", "outputAnnotatorType"], [270, 3, 1, "", "pretrained"], [270, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[271, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[271, 2, 1, "", "coalesceSentences"], [271, 2, 1, "", "configProtoBytes"], [271, 3, 1, "", "getClasses"], [271, 2, 1, "", "inputAnnotatorTypes"], [271, 3, 1, "", "loadSavedModel"], [271, 2, 1, "", "name"], [271, 2, 1, "", "outputAnnotatorType"], [271, 3, 1, "", "pretrained"], [271, 3, 1, "", "setCoalesceSentences"], [271, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[272, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[272, 2, 1, "", "coalesceSentences"], [272, 2, 1, "", "configProtoBytes"], [272, 2, 1, "", "inputAnnotatorTypes"], [272, 3, 1, "", "loadSavedModel"], [272, 2, 1, "", "name"], [272, 2, 1, "", "outputAnnotatorType"], [272, 3, 1, "", "pretrained"], [272, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[273, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[273, 2, 1, "", "coalesceSentences"], [273, 2, 1, "", "configProtoBytes"], [273, 3, 1, "", "getClasses"], [273, 2, 1, "", "inputAnnotatorTypes"], [273, 3, 1, "", "loadSavedModel"], [273, 2, 1, "", "name"], [273, 2, 1, "", "outputAnnotatorType"], [273, 3, 1, "", "pretrained"], [273, 3, 1, "", "setCoalesceSentences"], [273, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[274, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[274, 2, 1, "", "configProtoBytes"], [274, 3, 1, "", "getClasses"], [274, 2, 1, "", "inputAnnotatorTypes"], [274, 3, 1, "", "loadSavedModel"], [274, 2, 1, "", "name"], [274, 2, 1, "", "outputAnnotatorType"], [274, 3, 1, "", "pretrained"], [274, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[275, 1, 1, "", "CamemBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification": [[275, 2, 1, "", "coalesceSentences"], [275, 2, 1, "", "configProtoBytes"], [275, 3, 1, "", "getClasses"], [275, 2, 1, "", "inputAnnotatorTypes"], [275, 3, 1, "", "loadSavedModel"], [275, 2, 1, "", "name"], [275, 2, 1, "", "outputAnnotatorType"], [275, 3, 1, "", "pretrained"], [275, 3, 1, "", "setCoalesceSentences"], [275, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[276, 1, 1, "", "ClassifierDLApproach"], [276, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[276, 2, 1, "", "dropout"], [276, 2, 1, "", "inputAnnotatorTypes"], [276, 2, 1, "", "outputAnnotatorType"], [276, 3, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[276, 2, 1, "", "classes"], [276, 2, 1, "", "configProtoBytes"], [276, 2, 1, "", "inputAnnotatorTypes"], [276, 2, 1, "", "name"], [276, 2, 1, "", "outputAnnotatorType"], [276, 3, 1, "", "pretrained"], [276, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[277, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[277, 2, 1, "", "coalesceSentences"], [277, 2, 1, "", "configProtoBytes"], [277, 2, 1, "", "inputAnnotatorTypes"], [277, 3, 1, "", "loadSavedModel"], [277, 2, 1, "", "name"], [277, 2, 1, "", "outputAnnotatorType"], [277, 3, 1, "", "pretrained"], [277, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[278, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[278, 2, 1, "", "coalesceSentences"], [278, 2, 1, "", "configProtoBytes"], [278, 3, 1, "", "getClasses"], [278, 2, 1, "", "inputAnnotatorTypes"], [278, 3, 1, "", "loadSavedModel"], [278, 2, 1, "", "name"], [278, 2, 1, "", "outputAnnotatorType"], [278, 3, 1, "", "pretrained"], [278, 3, 1, "", "setCoalesceSentences"], [278, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[279, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[279, 2, 1, "", "configProtoBytes"], [279, 3, 1, "", "getClasses"], [279, 2, 1, "", "inputAnnotatorTypes"], [279, 3, 1, "", "loadSavedModel"], [279, 2, 1, "", "name"], [279, 2, 1, "", "outputAnnotatorType"], [279, 3, 1, "", "pretrained"], [279, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[280, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[280, 2, 1, "", "coalesceSentences"], [280, 2, 1, "", "configProtoBytes"], [280, 3, 1, "", "getClasses"], [280, 2, 1, "", "inputAnnotatorTypes"], [280, 3, 1, "", "loadSavedModel"], [280, 2, 1, "", "name"], [280, 2, 1, "", "outputAnnotatorType"], [280, 3, 1, "", "pretrained"], [280, 3, 1, "", "setCoalesceSentences"], [280, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[281, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[281, 2, 1, "", "coalesceSentences"], [281, 2, 1, "", "configProtoBytes"], [281, 2, 1, "", "inputAnnotatorTypes"], [281, 3, 1, "", "loadSavedModel"], [281, 2, 1, "", "name"], [281, 2, 1, "", "outputAnnotatorType"], [281, 3, 1, "", "pretrained"], [281, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[282, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[282, 2, 1, "", "coalesceSentences"], [282, 2, 1, "", "configProtoBytes"], [282, 3, 1, "", "getClasses"], [282, 2, 1, "", "inputAnnotatorTypes"], [282, 3, 1, "", "loadSavedModel"], [282, 2, 1, "", "name"], [282, 2, 1, "", "outputAnnotatorType"], [282, 3, 1, "", "pretrained"], [282, 3, 1, "", "setCoalesceSentences"], [282, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[283, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[283, 2, 1, "", "configProtoBytes"], [283, 3, 1, "", "getClasses"], [283, 2, 1, "", "inputAnnotatorTypes"], [283, 3, 1, "", "loadSavedModel"], [283, 2, 1, "", "name"], [283, 2, 1, "", "outputAnnotatorType"], [283, 3, 1, "", "pretrained"], [283, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[284, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[284, 2, 1, "", "coalesceSentences"], [284, 2, 1, "", "configProtoBytes"], [284, 3, 1, "", "getClasses"], [284, 2, 1, "", "inputAnnotatorTypes"], [284, 3, 1, "", "loadSavedModel"], [284, 2, 1, "", "name"], [284, 2, 1, "", "outputAnnotatorType"], [284, 3, 1, "", "pretrained"], [284, 3, 1, "", "setCoalesceSentences"], [284, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[285, 1, 1, "", "DistilBertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice": [[285, 2, 1, "", "choicesDelimiter"], [285, 2, 1, "", "inputAnnotatorTypes"], [285, 3, 1, "", "loadSavedModel"], [285, 2, 1, "", "name"], [285, 2, 1, "", "outputAnnotatorType"], [285, 3, 1, "", "pretrained"], [285, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[287, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[287, 2, 1, "", "coalesceSentences"], [287, 2, 1, "", "configProtoBytes"], [287, 2, 1, "", "inputAnnotatorTypes"], [287, 3, 1, "", "loadSavedModel"], [287, 2, 1, "", "name"], [287, 2, 1, "", "outputAnnotatorType"], [287, 3, 1, "", "pretrained"], [287, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[288, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[288, 2, 1, "", "coalesceSentences"], [288, 2, 1, "", "configProtoBytes"], [288, 3, 1, "", "getClasses"], [288, 2, 1, "", "inputAnnotatorTypes"], [288, 3, 1, "", "loadSavedModel"], [288, 2, 1, "", "name"], [288, 2, 1, "", "outputAnnotatorType"], [288, 3, 1, "", "pretrained"], [288, 3, 1, "", "setCoalesceSentences"], [288, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[289, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[289, 2, 1, "", "configProtoBytes"], [289, 3, 1, "", "getClasses"], [289, 2, 1, "", "inputAnnotatorTypes"], [289, 3, 1, "", "loadSavedModel"], [289, 2, 1, "", "name"], [289, 2, 1, "", "outputAnnotatorType"], [289, 3, 1, "", "pretrained"], [289, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[290, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[290, 2, 1, "", "inputAnnotatorTypes"], [290, 3, 1, "", "loadSavedModel"], [290, 2, 1, "", "name"], [290, 2, 1, "", "outputAnnotatorType"], [290, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[291, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[291, 2, 1, "", "coalesceSentences"], [291, 3, 1, "", "getClasses"], [291, 2, 1, "", "inputAnnotatorTypes"], [291, 3, 1, "", "loadSavedModel"], [291, 2, 1, "", "name"], [291, 2, 1, "", "outputAnnotatorType"], [291, 3, 1, "", "pretrained"], [291, 3, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[292, 1, 1, "", "MPNetForTokenClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification": [[292, 2, 1, "", "configProtoBytes"], [292, 3, 1, "", "getClasses"], [292, 2, 1, "", "inputAnnotatorTypes"], [292, 3, 1, "", "loadSavedModel"], [292, 2, 1, "", "name"], [292, 2, 1, "", "outputAnnotatorType"], [292, 3, 1, "", "pretrained"], [292, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[293, 1, 1, "", "MultiClassifierDLApproach"], [293, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[293, 2, 1, "", "inputAnnotatorTypes"], [293, 2, 1, "", "outputAnnotatorType"], [293, 3, 1, "", "setShufflePerEpoch"], [293, 3, 1, "", "setThreshold"], [293, 3, 1, "", "setVerbose"], [293, 2, 1, "", "shufflePerEpoch"], [293, 2, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[293, 2, 1, "", "classes"], [293, 2, 1, "", "configProtoBytes"], [293, 2, 1, "", "inputAnnotatorTypes"], [293, 2, 1, "", "name"], [293, 2, 1, "", "outputAnnotatorType"], [293, 3, 1, "", "pretrained"], [293, 3, 1, "", "setConfigProtoBytes"], [293, 3, 1, "", "setThreshold"], [293, 2, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[294, 1, 1, "", "RoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice": [[294, 2, 1, "", "choicesDelimiter"], [294, 2, 1, "", "inputAnnotatorTypes"], [294, 3, 1, "", "loadSavedModel"], [294, 2, 1, "", "name"], [294, 2, 1, "", "outputAnnotatorType"], [294, 3, 1, "", "pretrained"], [294, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[295, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[295, 2, 1, "", "coalesceSentences"], [295, 2, 1, "", "configProtoBytes"], [295, 2, 1, "", "inputAnnotatorTypes"], [295, 3, 1, "", "loadSavedModel"], [295, 2, 1, "", "name"], [295, 2, 1, "", "outputAnnotatorType"], [295, 3, 1, "", "pretrained"], [295, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[296, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[296, 2, 1, "", "coalesceSentences"], [296, 2, 1, "", "configProtoBytes"], [296, 3, 1, "", "getClasses"], [296, 2, 1, "", "inputAnnotatorTypes"], [296, 3, 1, "", "loadSavedModel"], [296, 2, 1, "", "name"], [296, 2, 1, "", "outputAnnotatorType"], [296, 3, 1, "", "pretrained"], [296, 3, 1, "", "setCoalesceSentences"], [296, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[297, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[297, 2, 1, "", "configProtoBytes"], [297, 3, 1, "", "getClasses"], [297, 2, 1, "", "inputAnnotatorTypes"], [297, 3, 1, "", "loadSavedModel"], [297, 2, 1, "", "maxSentenceLength"], [297, 2, 1, "", "name"], [297, 2, 1, "", "outputAnnotatorType"], [297, 3, 1, "", "pretrained"], [297, 3, 1, "", "setConfigProtoBytes"], [297, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[298, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[298, 2, 1, "", "coalesceSentences"], [298, 2, 1, "", "configProtoBytes"], [298, 3, 1, "", "getClasses"], [298, 2, 1, "", "inputAnnotatorTypes"], [298, 3, 1, "", "loadSavedModel"], [298, 2, 1, "", "maxSentenceLength"], [298, 2, 1, "", "name"], [298, 2, 1, "", "outputAnnotatorType"], [298, 3, 1, "", "pretrained"], [298, 3, 1, "", "setCoalesceSentences"], [298, 3, 1, "", "setConfigProtoBytes"], [298, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[299, 1, 1, "", "SentimentDLApproach"], [299, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[299, 2, 1, "", "dropout"], [299, 2, 1, "", "inputAnnotatorTypes"], [299, 2, 1, "", "outputAnnotatorType"], [299, 3, 1, "", "setDropout"], [299, 3, 1, "", "setThreshold"], [299, 3, 1, "", "setThresholdLabel"], [299, 2, 1, "", "threshold"], [299, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[299, 2, 1, "", "classes"], [299, 2, 1, "", "configProtoBytes"], [299, 2, 1, "", "inputAnnotatorTypes"], [299, 2, 1, "", "name"], [299, 2, 1, "", "outputAnnotatorType"], [299, 3, 1, "", "pretrained"], [299, 3, 1, "", "setConfigProtoBytes"], [299, 3, 1, "", "setThreshold"], [299, 3, 1, "", "setThresholdLabel"], [299, 2, 1, "", "threshold"], [299, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[300, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[300, 2, 1, "", "inputAnnotatorTypes"], [300, 3, 1, "", "loadSavedModel"], [300, 2, 1, "", "name"], [300, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[301, 1, 1, "", "XlmRoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice": [[301, 2, 1, "", "inputAnnotatorTypes"], [301, 3, 1, "", "loadSavedModel"], [301, 2, 1, "", "name"], [301, 2, 1, "", "outputAnnotatorType"], [301, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[302, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[302, 2, 1, "", "coalesceSentences"], [302, 2, 1, "", "configProtoBytes"], [302, 2, 1, "", "inputAnnotatorTypes"], [302, 3, 1, "", "loadSavedModel"], [302, 2, 1, "", "name"], [302, 2, 1, "", "outputAnnotatorType"], [302, 3, 1, "", "pretrained"], [302, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[303, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[303, 2, 1, "", "coalesceSentences"], [303, 2, 1, "", "configProtoBytes"], [303, 3, 1, "", "getClasses"], [303, 2, 1, "", "inputAnnotatorTypes"], [303, 3, 1, "", "loadSavedModel"], [303, 2, 1, "", "name"], [303, 2, 1, "", "outputAnnotatorType"], [303, 3, 1, "", "pretrained"], [303, 3, 1, "", "setCoalesceSentences"], [303, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[304, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[304, 2, 1, "", "configProtoBytes"], [304, 3, 1, "", "getClasses"], [304, 2, 1, "", "inputAnnotatorTypes"], [304, 3, 1, "", "loadSavedModel"], [304, 2, 1, "", "name"], [304, 2, 1, "", "outputAnnotatorType"], [304, 3, 1, "", "pretrained"], [304, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[305, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[305, 2, 1, "", "coalesceSentences"], [305, 2, 1, "", "configProtoBytes"], [305, 3, 1, "", "getClasses"], [305, 2, 1, "", "inputAnnotatorTypes"], [305, 3, 1, "", "loadSavedModel"], [305, 2, 1, "", "maxSentenceLength"], [305, 2, 1, "", "name"], [305, 2, 1, "", "outputAnnotatorType"], [305, 3, 1, "", "pretrained"], [305, 3, 1, "", "setCoalesceSentences"], [305, 3, 1, "", "setConfigProtoBytes"], [305, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[306, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[306, 2, 1, "", "coalesceSentences"], [306, 2, 1, "", "configProtoBytes"], [306, 3, 1, "", "getClasses"], [306, 2, 1, "", "inputAnnotatorTypes"], [306, 3, 1, "", "loadSavedModel"], [306, 2, 1, "", "name"], [306, 2, 1, "", "outputAnnotatorType"], [306, 3, 1, "", "pretrained"], [306, 3, 1, "", "setCoalesceSentences"], [306, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[307, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[307, 2, 1, "", "configProtoBytes"], [307, 3, 1, "", "getClasses"], [307, 2, 1, "", "inputAnnotatorTypes"], [307, 3, 1, "", "loadSavedModel"], [307, 2, 1, "", "name"], [307, 2, 1, "", "outputAnnotatorType"], [307, 3, 1, "", "pretrained"], [307, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cleaners": [[308, 0, 0, "-", "cleaner"], [309, 0, 0, "-", "extractor"]], "sparknlp.annotator.cleaners.cleaner": [[308, 1, 1, "", "Cleaner"]], "sparknlp.annotator.cleaners.cleaner.Cleaner": [[308, 2, 1, "", "bullets"], [308, 2, 1, "", "cleanPostfixPattern"], [308, 2, 1, "", "cleanPrefixPattern"], [308, 2, 1, "", "cleanerMode"], [308, 2, 1, "", "dashes"], [308, 2, 1, "", "encoding"], [308, 2, 1, "", "extraWhitespace"], [308, 2, 1, "", "ignoreCase"], [308, 2, 1, "", "inputAnnotatorTypes"], [308, 2, 1, "", "lowercase"], [308, 2, 1, "", "name"], [308, 2, 1, "", "outputAnnotatorType"], [308, 3, 1, "", "setBullets"], [308, 3, 1, "", "setCleanPostfixPattern"], [308, 3, 1, "", "setCleanPrefixPattern"], [308, 3, 1, "", "setCleanerMode"], [308, 3, 1, "", "setDashes"], [308, 3, 1, "", "setEncoding"], [308, 3, 1, "", "setExtraWhitespace"], [308, 3, 1, "", "setIgnoreCase"], [308, 3, 1, "", "setLowercase"], [308, 3, 1, "", "setStrip"], [308, 3, 1, "", "setTrailingPunctuation"], [308, 2, 1, "", "strip"], [308, 2, 1, "", "trailingPunctuation"]], "sparknlp.annotator.cleaners.extractor": [[309, 1, 1, "", "Extractor"]], "sparknlp.annotator.cleaners.extractor.Extractor": [[309, 2, 1, "", "emailAddress"], [309, 2, 1, "", "emailDateTimeTzPattern"], [309, 2, 1, "", "extractorMode"], [309, 2, 1, "", "imageUrlPattern"], [309, 2, 1, "", "index"], [309, 2, 1, "", "inputAnnotatorTypes"], [309, 2, 1, "", "ipAddressNamePattern"], [309, 2, 1, "", "ipAddressPattern"], [309, 2, 1, "", "mapiIdPattern"], [309, 2, 1, "", "name"], [309, 2, 1, "", "outputAnnotatorType"], [309, 3, 1, "", "setEmailAddress"], [309, 3, 1, "", "setEmailDateTimeTzPattern"], [309, 3, 1, "", "setExtractorMode"], [309, 3, 1, "", "setImageUrlPattern"], [309, 3, 1, "", "setIndex"], [309, 3, 1, "", "setIpAddressNamePattern"], [309, 3, 1, "", "setIpAddressPattern"], [309, 3, 1, "", "setMapiIdPattern"], [309, 3, 1, "", "setTextPattern"], [309, 3, 1, "", "setUsPhoneNumbersPattern"], [309, 2, 1, "", "textPattern"], [309, 2, 1, "", "usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[312, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[312, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[312, 2, 1, "", "configProtoBytes"], [312, 2, 1, "", "inputAnnotatorTypes"], [312, 3, 1, "", "loadSavedModel"], [312, 2, 1, "", "maxSegmentLength"], [312, 2, 1, "", "name"], [312, 2, 1, "", "outputAnnotatorType"], [312, 3, 1, "", "pretrained"], [312, 3, 1, "", "setConfigProtoBytes"], [312, 3, 1, "", "setMaxSegmentLength"], [312, 3, 1, "", "setTextGenre"], [312, 2, 1, "", "textGenre"]], "sparknlp.annotator.cv": [[313, 0, 0, "-", "blip_for_question_answering"], [314, 0, 0, "-", "clip_for_zero_shot_classification"], [315, 0, 0, "-", "convnext_for_image_classification"], [316, 0, 0, "-", "florence2_transformer"], [317, 0, 0, "-", "gemma3_for_multimodal"], [319, 0, 0, "-", "internvl_for_multimodal"], [320, 0, 0, "-", "janus_for_multimodal"], [321, 0, 0, "-", "llava_for_multimodal"], [322, 0, 0, "-", "mllama_for_multimodal"], [323, 0, 0, "-", "paligemma_for_multimodal"], [324, 0, 0, "-", "phi3_vision_for_multimodal"], [325, 0, 0, "-", "qwen2vl_transformer"], [326, 0, 0, "-", "smolvlm_transformer"], [327, 0, 0, "-", "swin_for_image_classification"], [328, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [329, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.blip_for_question_answering": [[313, 1, 1, "", "BLIPForQuestionAnswering"]], "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering": [[313, 2, 1, "", "configProtoBytes"], [313, 2, 1, "", "inputAnnotatorTypes"], [313, 3, 1, "", "loadSavedModel"], [313, 2, 1, "", "maxSentenceLength"], [313, 2, 1, "", "name"], [313, 2, 1, "", "outputAnnotatorType"], [313, 3, 1, "", "pretrained"], [313, 3, 1, "", "setMaxSentenceSize"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[314, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[314, 2, 1, "", "configProtoBytes"], [314, 3, 1, "", "getCandidateLabels"], [314, 2, 1, "", "inputAnnotatorTypes"], [314, 3, 1, "", "loadSavedModel"], [314, 2, 1, "", "name"], [314, 2, 1, "", "outputAnnotatorType"], [314, 3, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[315, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[315, 2, 1, "", "configProtoBytes"], [315, 2, 1, "", "cropPct"], [315, 2, 1, "", "doRescale"], [315, 3, 1, "", "getClasses"], [315, 2, 1, "", "inputAnnotatorTypes"], [315, 3, 1, "", "loadSavedModel"], [315, 2, 1, "", "name"], [315, 2, 1, "", "outputAnnotatorType"], [315, 3, 1, "", "pretrained"], [315, 2, 1, "", "rescaleFactor"], [315, 3, 1, "", "setConfigProtoBytes"], [315, 3, 1, "", "setCropPct"], [315, 3, 1, "", "setDoRescale"], [315, 3, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.florence2_transformer": [[316, 1, 1, "", "Florence2Transformer"]], "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer": [[316, 2, 1, "", "batchSize"], [316, 2, 1, "", "beamSize"], [316, 2, 1, "", "doSample"], [316, 2, 1, "", "ignoreTokenIds"], [316, 2, 1, "", "inputAnnotatorTypes"], [316, 3, 1, "", "loadSavedModel"], [316, 2, 1, "", "maxOutputLength"], [316, 2, 1, "", "minOutputLength"], [316, 2, 1, "", "name"], [316, 2, 1, "", "noRepeatNgramSize"], [316, 2, 1, "", "outputAnnotatorType"], [316, 3, 1, "", "pretrained"], [316, 2, 1, "", "repetitionPenalty"], [316, 3, 1, "", "setBatchSize"], [316, 3, 1, "", "setBeamSize"], [316, 3, 1, "", "setDoSample"], [316, 3, 1, "", "setIgnoreTokenIds"], [316, 3, 1, "", "setMaxOutputLength"], [316, 3, 1, "", "setMinOutputLength"], [316, 3, 1, "", "setNoRepeatNgramSize"], [316, 3, 1, "", "setRepetitionPenalty"], [316, 3, 1, "", "setTemperature"], [316, 3, 1, "", "setTopK"], [316, 3, 1, "", "setTopP"], [316, 2, 1, "", "temperature"], [316, 2, 1, "", "topK"], [316, 2, 1, "", "topP"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[317, 1, 1, "", "Gemma3ForMultiModal"]], "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal": [[317, 2, 1, "", "beamSize"], [317, 2, 1, "", "configProtoBytes"], [317, 2, 1, "", "doSample"], [317, 2, 1, "", "ignoreTokenIds"], [317, 2, 1, "", "inputAnnotatorTypes"], [317, 3, 1, "", "loadSavedModel"], [317, 2, 1, "", "maxInputLength"], [317, 2, 1, "", "maxOutputLength"], [317, 2, 1, "", "minOutputLength"], [317, 2, 1, "", "name"], [317, 2, 1, "", "noRepeatNgramSize"], [317, 2, 1, "", "outputAnnotatorType"], [317, 3, 1, "", "pretrained"], [317, 2, 1, "", "repetitionPenalty"], [317, 3, 1, "", "setBeamSize"], [317, 3, 1, "", "setConfigProtoBytes"], [317, 3, 1, "", "setDoSample"], [317, 3, 1, "", "setIgnoreTokenIds"], [317, 3, 1, "", "setMaxOutputLength"], [317, 3, 1, "", "setMaxSentenceSize"], [317, 3, 1, "", "setMinOutputLength"], [317, 3, 1, "", "setNoRepeatNgramSize"], [317, 3, 1, "", "setRepetitionPenalty"], [317, 3, 1, "", "setTemperature"], [317, 3, 1, "", "setTopK"], [317, 3, 1, "", "setTopP"], [317, 2, 1, "", "temperature"], [317, 2, 1, "", "topK"], [317, 2, 1, "", "topP"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[319, 1, 1, "", "InternVLForMultiModal"]], "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal": [[319, 2, 1, "", "beamSize"], [319, 2, 1, "", "doSample"], [319, 2, 1, "", "ignoreTokenIds"], [319, 2, 1, "", "inputAnnotatorTypes"], [319, 3, 1, "", "loadSavedModel"], [319, 2, 1, "", "maxOutputLength"], [319, 2, 1, "", "minOutputLength"], [319, 2, 1, "", "name"], [319, 2, 1, "", "noRepeatNgramSize"], [319, 2, 1, "", "outputAnnotatorType"], [319, 3, 1, "", "pretrained"], [319, 2, 1, "", "repetitionPenalty"], [319, 3, 1, "", "setBeamSize"], [319, 3, 1, "", "setDoSample"], [319, 3, 1, "", "setIgnoreTokenIds"], [319, 3, 1, "", "setMaxOutputLength"], [319, 3, 1, "", "setMaxSentenceSize"], [319, 3, 1, "", "setMinOutputLength"], [319, 3, 1, "", "setNoRepeatNgramSize"], [319, 3, 1, "", "setRepetitionPenalty"], [319, 3, 1, "", "setTemperature"], [319, 3, 1, "", "setTopK"], [319, 3, 1, "", "setTopP"], [319, 2, 1, "", "temperature"], [319, 2, 1, "", "topK"], [319, 2, 1, "", "topP"]], "sparknlp.annotator.cv.janus_for_multimodal": [[320, 1, 1, "", "JanusForMultiModal"]], "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal": [[320, 2, 1, "", "beamSize"], [320, 2, 1, "", "configProtoBytes"], [320, 2, 1, "", "doSample"], [320, 2, 1, "", "ignoreTokenIds"], [320, 2, 1, "", "imageGenerateMode"], [320, 2, 1, "", "inputAnnotatorTypes"], [320, 3, 1, "", "loadSavedModel"], [320, 2, 1, "", "maxOutputLength"], [320, 2, 1, "", "minOutputLength"], [320, 2, 1, "", "name"], [320, 2, 1, "", "noRepeatNgramSize"], [320, 2, 1, "", "numOfParallelImages"], [320, 2, 1, "", "outputAnnotatorType"], [320, 3, 1, "", "pretrained"], [320, 2, 1, "", "repetitionPenalty"], [320, 3, 1, "", "setBeamSize"], [320, 3, 1, "", "setConfigProtoBytes"], [320, 3, 1, "", "setDoSample"], [320, 3, 1, "", "setIgnoreTokenIds"], [320, 3, 1, "", "setImageGenerateMode"], [320, 3, 1, "", "setMaxOutputLength"], [320, 3, 1, "", "setMaxSentenceSize"], [320, 3, 1, "", "setMinOutputLength"], [320, 3, 1, "", "setNoRepeatNgramSize"], [320, 3, 1, "", "setNumOfParallelImages"], [320, 3, 1, "", "setRepetitionPenalty"], [320, 3, 1, "", "setTemperature"], [320, 3, 1, "", "setTopK"], [320, 3, 1, "", "setTopP"], [320, 2, 1, "", "temperature"], [320, 2, 1, "", "topK"], [320, 2, 1, "", "topP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[321, 1, 1, "", "LLAVAForMultiModal"]], "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal": [[321, 2, 1, "", "beamSize"], [321, 2, 1, "", "configProtoBytes"], [321, 2, 1, "", "doSample"], [321, 2, 1, "", "ignoreTokenIds"], [321, 2, 1, "", "inputAnnotatorTypes"], [321, 3, 1, "", "loadSavedModel"], [321, 2, 1, "", "maxOutputLength"], [321, 2, 1, "", "minOutputLength"], [321, 2, 1, "", "name"], [321, 2, 1, "", "noRepeatNgramSize"], [321, 2, 1, "", "outputAnnotatorType"], [321, 3, 1, "", "pretrained"], [321, 2, 1, "", "repetitionPenalty"], [321, 3, 1, "", "setBeamSize"], [321, 3, 1, "", "setConfigProtoBytes"], [321, 3, 1, "", "setDoSample"], [321, 3, 1, "", "setIgnoreTokenIds"], [321, 3, 1, "", "setMaxOutputLength"], [321, 3, 1, "", "setMaxSentenceSize"], [321, 3, 1, "", "setMinOutputLength"], [321, 3, 1, "", "setNoRepeatNgramSize"], [321, 3, 1, "", "setRepetitionPenalty"], [321, 3, 1, "", "setTemperature"], [321, 3, 1, "", "setTopK"], [321, 3, 1, "", "setTopP"], [321, 2, 1, "", "temperature"], [321, 2, 1, "", "topK"], [321, 2, 1, "", "topP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[322, 1, 1, "", "MLLamaForMultimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal": [[322, 2, 1, "", "beamSize"], [322, 2, 1, "", "configProtoBytes"], [322, 2, 1, "", "doSample"], [322, 2, 1, "", "ignoreTokenIds"], [322, 2, 1, "", "inputAnnotatorTypes"], [322, 3, 1, "", "loadSavedModel"], [322, 2, 1, "", "maxOutputLength"], [322, 2, 1, "", "minOutputLength"], [322, 2, 1, "", "name"], [322, 2, 1, "", "noRepeatNgramSize"], [322, 2, 1, "", "outputAnnotatorType"], [322, 3, 1, "", "pretrained"], [322, 2, 1, "", "repetitionPenalty"], [322, 3, 1, "", "setBeamSize"], [322, 3, 1, "", "setConfigProtoBytes"], [322, 3, 1, "", "setDoSample"], [322, 3, 1, "", "setIgnoreTokenIds"], [322, 3, 1, "", "setMaxOutputLength"], [322, 3, 1, "", "setMaxSentenceSize"], [322, 3, 1, "", "setMinOutputLength"], [322, 3, 1, "", "setNoRepeatNgramSize"], [322, 3, 1, "", "setRepetitionPenalty"], [322, 3, 1, "", "setTemperature"], [322, 3, 1, "", "setTopK"], [322, 3, 1, "", "setTopP"], [322, 2, 1, "", "temperature"], [322, 2, 1, "", "topK"], [322, 2, 1, "", "topP"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[323, 1, 1, "", "PaliGemmaForMultiModal"]], "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal": [[323, 2, 1, "", "beamSize"], [323, 2, 1, "", "doSample"], [323, 2, 1, "", "ignoreTokenIds"], [323, 2, 1, "", "inputAnnotatorTypes"], [323, 3, 1, "", "loadSavedModel"], [323, 2, 1, "", "maxOutputLength"], [323, 2, 1, "", "minOutputLength"], [323, 2, 1, "", "name"], [323, 2, 1, "", "noRepeatNgramSize"], [323, 2, 1, "", "outputAnnotatorType"], [323, 3, 1, "", "pretrained"], [323, 2, 1, "", "repetitionPenalty"], [323, 3, 1, "", "setBeamSize"], [323, 3, 1, "", "setDoSample"], [323, 3, 1, "", "setIgnoreTokenIds"], [323, 3, 1, "", "setMaxOutputLength"], [323, 3, 1, "", "setMaxSentenceSize"], [323, 3, 1, "", "setMinOutputLength"], [323, 3, 1, "", "setNoRepeatNgramSize"], [323, 3, 1, "", "setRepetitionPenalty"], [323, 3, 1, "", "setTemperature"], [323, 3, 1, "", "setTopK"], [323, 3, 1, "", "setTopP"], [323, 2, 1, "", "temperature"], [323, 2, 1, "", "topK"], [323, 2, 1, "", "topP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[324, 1, 1, "", "Phi3Vision"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision": [[324, 2, 1, "", "beamSize"], [324, 2, 1, "", "configProtoBytes"], [324, 2, 1, "", "doSample"], [324, 2, 1, "", "ignoreTokenIds"], [324, 2, 1, "", "inputAnnotatorTypes"], [324, 3, 1, "", "loadSavedModel"], [324, 2, 1, "", "maxOutputLength"], [324, 2, 1, "", "minOutputLength"], [324, 2, 1, "", "name"], [324, 2, 1, "", "noRepeatNgramSize"], [324, 2, 1, "", "outputAnnotatorType"], [324, 3, 1, "", "pretrained"], [324, 2, 1, "", "repetitionPenalty"], [324, 3, 1, "", "setBeamSize"], [324, 3, 1, "", "setConfigProtoBytes"], [324, 3, 1, "", "setDoSample"], [324, 3, 1, "", "setIgnoreTokenIds"], [324, 3, 1, "", "setMaxOutputLength"], [324, 3, 1, "", "setMaxSentenceSize"], [324, 3, 1, "", "setMinOutputLength"], [324, 3, 1, "", "setNoRepeatNgramSize"], [324, 3, 1, "", "setRepetitionPenalty"], [324, 3, 1, "", "setTemperature"], [324, 3, 1, "", "setTopK"], [324, 3, 1, "", "setTopP"], [324, 2, 1, "", "temperature"], [324, 2, 1, "", "topK"], [324, 2, 1, "", "topP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[325, 1, 1, "", "Qwen2VLTransformer"]], "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer": [[325, 2, 1, "", "beamSize"], [325, 2, 1, "", "configProtoBytes"], [325, 2, 1, "", "doSample"], [325, 2, 1, "", "ignoreTokenIds"], [325, 2, 1, "", "inputAnnotatorTypes"], [325, 3, 1, "", "loadSavedModel"], [325, 2, 1, "", "maxOutputLength"], [325, 2, 1, "", "minOutputLength"], [325, 2, 1, "", "name"], [325, 2, 1, "", "noRepeatNgramSize"], [325, 2, 1, "", "outputAnnotatorType"], [325, 3, 1, "", "pretrained"], [325, 2, 1, "", "repetitionPenalty"], [325, 3, 1, "", "setBeamSize"], [325, 3, 1, "", "setConfigProtoBytes"], [325, 3, 1, "", "setDoSample"], [325, 3, 1, "", "setIgnoreTokenIds"], [325, 3, 1, "", "setMaxOutputLength"], [325, 3, 1, "", "setMaxSentenceSize"], [325, 3, 1, "", "setMinOutputLength"], [325, 3, 1, "", "setNoRepeatNgramSize"], [325, 3, 1, "", "setRepetitionPenalty"], [325, 3, 1, "", "setTemperature"], [325, 3, 1, "", "setTopK"], [325, 3, 1, "", "setTopP"], [325, 2, 1, "", "temperature"], [325, 2, 1, "", "topK"], [325, 2, 1, "", "topP"]], "sparknlp.annotator.cv.smolvlm_transformer": [[326, 1, 1, "", "SmolVLMTransformer"]], "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer": [[326, 2, 1, "", "beamSize"], [326, 2, 1, "", "doImageSplitting"], [326, 2, 1, "", "doSample"], [326, 2, 1, "", "ignoreTokenIds"], [326, 2, 1, "", "imageToken"], [326, 2, 1, "", "inputAnnotatorTypes"], [326, 3, 1, "", "loadSavedModel"], [326, 2, 1, "", "maxImageSize"], [326, 2, 1, "", "maxOutputLength"], [326, 2, 1, "", "minOutputLength"], [326, 2, 1, "", "name"], [326, 2, 1, "", "noRepeatNgramSize"], [326, 2, 1, "", "numVisionTokens"], [326, 2, 1, "", "outputAnnotatorType"], [326, 2, 1, "", "paddingConstant"], [326, 2, 1, "", "patchSize"], [326, 3, 1, "", "pretrained"], [326, 2, 1, "", "repetitionPenalty"], [326, 3, 1, "", "setBeamSize"], [326, 3, 1, "", "setConfigProtoBytes"], [326, 3, 1, "", "setDoImageSplitting"], [326, 3, 1, "", "setDoSample"], [326, 3, 1, "", "setIgnoreTokenIds"], [326, 3, 1, "", "setImageToken"], [326, 3, 1, "", "setMaxImageSize"], [326, 3, 1, "", "setMaxOutputLength"], [326, 3, 1, "", "setMaxSentenceSize"], [326, 3, 1, "", "setMinOutputLength"], [326, 3, 1, "", "setNoRepeatNgramSize"], [326, 3, 1, "", "setNumVisionTokens"], [326, 3, 1, "", "setPaddingConstant"], [326, 3, 1, "", "setPatchSize"], [326, 3, 1, "", "setRepetitionPenalty"], [326, 3, 1, "", "setStopTokenIds"], [326, 3, 1, "", "setTemperature"], [326, 3, 1, "", "setTopK"], [326, 3, 1, "", "setTopP"], [326, 2, 1, "", "stopTokenIds"], [326, 2, 1, "", "temperature"], [326, 2, 1, "", "topK"], [326, 2, 1, "", "topP"]], "sparknlp.annotator.cv.swin_for_image_classification": [[327, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[327, 2, 1, "", "configProtoBytes"], [327, 3, 1, "", "getClasses"], [327, 2, 1, "", "inputAnnotatorTypes"], [327, 3, 1, "", "loadSavedModel"], [327, 2, 1, "", "name"], [327, 2, 1, "", "outputAnnotatorType"], [327, 3, 1, "", "pretrained"], [327, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[328, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[328, 2, 1, "", "configProtoBytes"], [328, 2, 1, "", "inputAnnotatorTypes"], [328, 3, 1, "", "loadSavedModel"], [328, 2, 1, "", "name"], [328, 2, 1, "", "outputAnnotatorType"], [328, 3, 1, "", "pretrained"], [328, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[329, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[329, 2, 1, "", "configProtoBytes"], [329, 3, 1, "", "getClasses"], [329, 2, 1, "", "inputAnnotatorTypes"], [329, 3, 1, "", "loadSavedModel"], [329, 2, 1, "", "name"], [329, 2, 1, "", "outputAnnotatorType"], [329, 3, 1, "", "pretrained"], [329, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[330, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[330, 2, 1, "", "entityName"], [330, 2, 1, "", "inputAnnotatorTypes"], [330, 2, 1, "", "name"], [330, 2, 1, "", "outputAnnotatorType"], [330, 3, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[331, 0, 0, "-", "dependency_parser"], [333, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[331, 1, 1, "", "DependencyParserApproach"], [331, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[331, 2, 1, "", "conllU"], [331, 2, 1, "", "dependencyTreeBank"], [331, 2, 1, "", "inputAnnotatorTypes"], [331, 2, 1, "", "numberOfIterations"], [331, 2, 1, "", "outputAnnotatorType"], [331, 3, 1, "", "setConllU"], [331, 3, 1, "", "setDependencyTreeBank"], [331, 3, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[331, 2, 1, "", "inputAnnotatorTypes"], [331, 2, 1, "", "name"], [331, 2, 1, "", "outputAnnotatorType"], [331, 2, 1, "", "perceptron"], [331, 3, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[333, 1, 1, "", "TypedDependencyParserApproach"], [333, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[333, 2, 1, "", "conll2009"], [333, 2, 1, "", "conllU"], [333, 2, 1, "", "inputAnnotatorTypes"], [333, 2, 1, "", "numberOfIterations"], [333, 2, 1, "", "outputAnnotatorType"], [333, 3, 1, "", "setConll2009"], [333, 3, 1, "", "setConllU"], [333, 3, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[333, 2, 1, "", "conllFormat"], [333, 2, 1, "", "inputAnnotatorTypes"], [333, 2, 1, "", "name"], [333, 2, 1, "", "outputAnnotatorType"], [333, 3, 1, "", "pretrained"], [333, 2, 1, "", "trainDependencyPipe"], [333, 2, 1, "", "trainOptions"], [333, 2, 1, "", "trainParameters"]], "sparknlp.annotator.document_character_text_splitter": [[334, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[334, 2, 1, "", "chunkOverlap"], [334, 2, 1, "", "chunkSize"], [334, 2, 1, "", "explodeSplits"], [334, 2, 1, "", "inputAnnotatorTypes"], [334, 2, 1, "", "keepSeparators"], [334, 2, 1, "", "outputAnnotatorType"], [334, 2, 1, "", "patternsAreRegex"], [334, 3, 1, "", "setChunkOverlap"], [334, 3, 1, "", "setChunkSize"], [334, 3, 1, "", "setExplodeSplits"], [334, 3, 1, "", "setKeepSeparators"], [334, 3, 1, "", "setPatternsAreRegex"], [334, 3, 1, "", "setSplitPatterns"], [334, 3, 1, "", "setTrimWhitespace"], [334, 2, 1, "", "splitPatterns"], [334, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.document_normalizer": [[335, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[335, 2, 1, "", "action"], [335, 2, 1, "", "encoding"], [335, 2, 1, "", "inputAnnotatorTypes"], [335, 2, 1, "", "lowercase"], [335, 2, 1, "", "outputAnnotatorType"], [335, 2, 1, "", "patterns"], [335, 2, 1, "", "policy"], [335, 2, 1, "", "replacement"], [335, 3, 1, "", "setAction"], [335, 3, 1, "", "setEncoding"], [335, 3, 1, "", "setLowercase"], [335, 3, 1, "", "setPatterns"], [335, 3, 1, "", "setPolicy"], [335, 3, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[336, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[336, 2, 1, "", "explodeSplits"], [336, 2, 1, "", "inputAnnotatorTypes"], [336, 2, 1, "", "numTokens"], [336, 2, 1, "", "outputAnnotatorType"], [336, 3, 1, "", "setExplodeSplits"], [336, 3, 1, "", "setNumTokens"], [336, 3, 1, "", "setTokenOverlap"], [336, 3, 1, "", "setTrimWhitespace"], [336, 2, 1, "", "tokenOverlap"], [336, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[337, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[337, 3, 1, "", "setUp"], [337, 3, 1, "", "test_run"]], "sparknlp.annotator.embeddings": [[338, 0, 0, "-", "albert_embeddings"], [339, 0, 0, "-", "auto_gguf_embeddings"], [340, 0, 0, "-", "bert_embeddings"], [341, 0, 0, "-", "bert_sentence_embeddings"], [342, 0, 0, "-", "bge_embeddings"], [343, 0, 0, "-", "camembert_embeddings"], [344, 0, 0, "-", "chunk_embeddings"], [345, 0, 0, "-", "deberta_embeddings"], [346, 0, 0, "-", "distil_bert_embeddings"], [347, 0, 0, "-", "doc2vec"], [348, 0, 0, "-", "e5_embeddings"], [349, 0, 0, "-", "e5v_embeddings"], [350, 0, 0, "-", "elmo_embeddings"], [352, 0, 0, "-", "instructor_embeddings"], [353, 0, 0, "-", "longformer_embeddings"], [354, 0, 0, "-", "mpnet_embeddings"], [355, 0, 0, "-", "mxbai_embeddings"], [356, 0, 0, "-", "nomic_embeddings"], [357, 0, 0, "-", "roberta_embeddings"], [358, 0, 0, "-", "roberta_sentence_embeddings"], [359, 0, 0, "-", "sentence_embeddings"], [360, 0, 0, "-", "snowflake_embeddings"], [361, 0, 0, "-", "uae_embeddings"], [362, 0, 0, "-", "universal_sentence_encoder"], [363, 0, 0, "-", "word2vec"], [364, 0, 0, "-", "word_embeddings"], [365, 0, 0, "-", "xlm_roberta_embeddings"], [366, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [367, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[338, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[338, 2, 1, "", "configProtoBytes"], [338, 2, 1, "", "inputAnnotatorTypes"], [338, 3, 1, "", "loadSavedModel"], [338, 2, 1, "", "name"], [338, 2, 1, "", "outputAnnotatorType"], [338, 3, 1, "", "pretrained"], [338, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[339, 1, 1, "", "AutoGGUFEmbeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings": [[339, 2, 1, "", "defragmentationThreshold"], [339, 2, 1, "", "embedding"], [339, 2, 1, "", "flashAttention"], [339, 3, 1, "", "getMetadata"], [339, 2, 1, "", "gpuSplitMode"], [339, 2, 1, "", "grpAttnN"], [339, 2, 1, "", "grpAttnW"], [339, 2, 1, "", "inputAnnotatorTypes"], [339, 3, 1, "", "loadSavedModel"], [339, 2, 1, "", "mainGpu"], [339, 2, 1, "", "nBatch"], [339, 2, 1, "", "nChunks"], [339, 2, 1, "", "nCtx"], [339, 2, 1, "", "nGpuLayers"], [339, 2, 1, "", "nSequences"], [339, 2, 1, "", "nThreads"], [339, 2, 1, "", "nThreadsBatch"], [339, 2, 1, "", "nUbatch"], [339, 2, 1, "", "name"], [339, 2, 1, "", "noKvOffload"], [339, 2, 1, "", "numaStrategy"], [339, 2, 1, "", "outputAnnotatorType"], [339, 2, 1, "", "poolingType"], [339, 3, 1, "", "pretrained"], [339, 2, 1, "", "ropeFreqBase"], [339, 2, 1, "", "ropeFreqScale"], [339, 2, 1, "", "ropeScalingType"], [339, 3, 1, "", "setDefragmentationThreshold"], [339, 3, 1, "", "setFlashAttention"], [339, 3, 1, "", "setGpuSplitMode"], [339, 3, 1, "", "setGrpAttnN"], [339, 3, 1, "", "setGrpAttnW"], [339, 3, 1, "", "setMainGpu"], [339, 3, 1, "", "setNBatch"], [339, 3, 1, "", "setNChunks"], [339, 3, 1, "", "setNCtx"], [339, 3, 1, "", "setNGpuLayers"], [339, 3, 1, "", "setNParallel"], [339, 3, 1, "", "setNSequences"], [339, 3, 1, "", "setNThreads"], [339, 3, 1, "", "setNThreadsBatch"], [339, 3, 1, "", "setNUbatch"], [339, 3, 1, "", "setNoKvOffload"], [339, 3, 1, "", "setNumaStrategy"], [339, 3, 1, "", "setPoolingType"], [339, 3, 1, "", "setRopeFreqBase"], [339, 3, 1, "", "setRopeFreqScale"], [339, 3, 1, "", "setRopeScalingType"], [339, 3, 1, "", "setTensorSplit"], [339, 3, 1, "", "setUseMlock"], [339, 3, 1, "", "setUseMmap"], [339, 3, 1, "", "setYarnAttnFactor"], [339, 3, 1, "", "setYarnBetaFast"], [339, 3, 1, "", "setYarnBetaSlow"], [339, 3, 1, "", "setYarnExtFactor"], [339, 3, 1, "", "setYarnOrigCtx"], [339, 2, 1, "", "tensorSplit"], [339, 2, 1, "", "useMlock"], [339, 2, 1, "", "useMmap"], [339, 2, 1, "", "yarnAttnFactor"], [339, 2, 1, "", "yarnBetaFast"], [339, 2, 1, "", "yarnBetaSlow"], [339, 2, 1, "", "yarnExtFactor"], [339, 2, 1, "", "yarnOrigCtx"]], "sparknlp.annotator.embeddings.bert_embeddings": [[340, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[340, 2, 1, "", "configProtoBytes"], [340, 2, 1, "", "inputAnnotatorTypes"], [340, 3, 1, "", "loadSavedModel"], [340, 2, 1, "", "name"], [340, 2, 1, "", "outputAnnotatorType"], [340, 3, 1, "", "pretrained"], [340, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[341, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[341, 2, 1, "", "configProtoBytes"], [341, 2, 1, "", "inputAnnotatorTypes"], [341, 2, 1, "", "isLong"], [341, 3, 1, "", "loadSavedModel"], [341, 2, 1, "", "name"], [341, 2, 1, "", "outputAnnotatorType"], [341, 3, 1, "", "pretrained"], [341, 3, 1, "", "setConfigProtoBytes"], [341, 3, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[342, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[342, 2, 1, "", "configProtoBytes"], [342, 2, 1, "", "inputAnnotatorTypes"], [342, 3, 1, "", "loadSavedModel"], [342, 2, 1, "", "name"], [342, 2, 1, "", "outputAnnotatorType"], [342, 3, 1, "", "pretrained"], [342, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[343, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[343, 2, 1, "", "configProtoBytes"], [343, 2, 1, "", "inputAnnotatorTypes"], [343, 3, 1, "", "loadSavedModel"], [343, 2, 1, "", "name"], [343, 2, 1, "", "outputAnnotatorType"], [343, 3, 1, "", "pretrained"], [343, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[344, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[344, 2, 1, "", "inputAnnotatorTypes"], [344, 2, 1, "", "name"], [344, 2, 1, "", "outputAnnotatorType"], [344, 2, 1, "", "poolingStrategy"], [344, 3, 1, "", "setPoolingStrategy"], [344, 3, 1, "", "setSkipOOV"], [344, 2, 1, "", "skipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[345, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[345, 2, 1, "", "configProtoBytes"], [345, 2, 1, "", "inputAnnotatorTypes"], [345, 3, 1, "", "loadSavedModel"], [345, 2, 1, "", "name"], [345, 2, 1, "", "outputAnnotatorType"], [345, 3, 1, "", "pretrained"], [345, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[346, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[346, 2, 1, "", "configProtoBytes"], [346, 2, 1, "", "inputAnnotatorTypes"], [346, 3, 1, "", "loadSavedModel"], [346, 2, 1, "", "name"], [346, 2, 1, "", "outputAnnotatorType"], [346, 3, 1, "", "pretrained"], [346, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[347, 1, 1, "", "Doc2VecApproach"], [347, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[347, 2, 1, "", "inputAnnotatorTypes"], [347, 2, 1, "", "maxIter"], [347, 2, 1, "", "maxSentenceLength"], [347, 2, 1, "", "minCount"], [347, 2, 1, "", "numPartitions"], [347, 2, 1, "", "outputAnnotatorType"], [347, 2, 1, "", "seed"], [347, 3, 1, "", "setMaxIter"], [347, 3, 1, "", "setMaxSentenceLength"], [347, 3, 1, "", "setMinCount"], [347, 3, 1, "", "setNumPartitions"], [347, 3, 1, "", "setSeed"], [347, 3, 1, "", "setStepSize"], [347, 3, 1, "", "setVectorSize"], [347, 3, 1, "", "setWindowSize"], [347, 2, 1, "", "stepSize"], [347, 2, 1, "", "vectorSize"], [347, 2, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[347, 3, 1, "", "getVectors"], [347, 2, 1, "", "inputAnnotatorTypes"], [347, 2, 1, "", "name"], [347, 2, 1, "", "outputAnnotatorType"], [347, 3, 1, "", "pretrained"], [347, 3, 1, "", "setVectorSize"], [347, 2, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[348, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[348, 2, 1, "", "configProtoBytes"], [348, 2, 1, "", "inputAnnotatorTypes"], [348, 3, 1, "", "loadSavedModel"], [348, 2, 1, "", "name"], [348, 2, 1, "", "outputAnnotatorType"], [348, 3, 1, "", "pretrained"], [348, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5v_embeddings": [[349, 1, 1, "", "E5VEmbeddings"]], "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings": [[349, 2, 1, "", "inputAnnotatorTypes"], [349, 3, 1, "", "loadSavedModel"], [349, 2, 1, "", "name"], [349, 2, 1, "", "outputAnnotatorType"], [349, 3, 1, "", "pretrained"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[350, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[350, 2, 1, "", "batchSize"], [350, 2, 1, "", "configProtoBytes"], [350, 2, 1, "", "inputAnnotatorTypes"], [350, 3, 1, "", "loadSavedModel"], [350, 2, 1, "", "name"], [350, 2, 1, "", "outputAnnotatorType"], [350, 2, 1, "", "poolingLayer"], [350, 3, 1, "", "pretrained"], [350, 3, 1, "", "setBatchSize"], [350, 3, 1, "", "setConfigProtoBytes"], [350, 3, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[352, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[352, 2, 1, "", "configProtoBytes"], [352, 2, 1, "", "inputAnnotatorTypes"], [352, 2, 1, "", "instruction"], [352, 3, 1, "", "loadSavedModel"], [352, 2, 1, "", "name"], [352, 2, 1, "", "outputAnnotatorType"], [352, 3, 1, "", "pretrained"], [352, 3, 1, "", "setConfigProtoBytes"], [352, 3, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[353, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[353, 2, 1, "", "configProtoBytes"], [353, 2, 1, "", "inputAnnotatorTypes"], [353, 3, 1, "", "loadSavedModel"], [353, 2, 1, "", "name"], [353, 2, 1, "", "outputAnnotatorType"], [353, 3, 1, "", "pretrained"], [353, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[354, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[354, 2, 1, "", "configProtoBytes"], [354, 2, 1, "", "inputAnnotatorTypes"], [354, 3, 1, "", "loadSavedModel"], [354, 2, 1, "", "name"], [354, 2, 1, "", "outputAnnotatorType"], [354, 3, 1, "", "pretrained"], [354, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[355, 1, 1, "", "MxbaiEmbeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings": [[355, 2, 1, "", "inputAnnotatorTypes"], [355, 3, 1, "", "loadSavedModel"], [355, 2, 1, "", "name"], [355, 2, 1, "", "outputAnnotatorType"], [355, 2, 1, "", "poolingStrategy"], [355, 3, 1, "", "pretrained"], [355, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[356, 1, 1, "", "NomicEmbeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings": [[356, 2, 1, "", "configProtoBytes"], [356, 2, 1, "", "inputAnnotatorTypes"], [356, 3, 1, "", "loadSavedModel"], [356, 2, 1, "", "name"], [356, 2, 1, "", "outputAnnotatorType"], [356, 3, 1, "", "pretrained"], [356, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[357, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[357, 2, 1, "", "configProtoBytes"], [357, 2, 1, "", "inputAnnotatorTypes"], [357, 3, 1, "", "loadSavedModel"], [357, 2, 1, "", "name"], [357, 2, 1, "", "outputAnnotatorType"], [357, 3, 1, "", "pretrained"], [357, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[358, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[358, 2, 1, "", "configProtoBytes"], [358, 2, 1, "", "inputAnnotatorTypes"], [358, 3, 1, "", "loadSavedModel"], [358, 2, 1, "", "name"], [358, 2, 1, "", "outputAnnotatorType"], [358, 3, 1, "", "pretrained"], [358, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[359, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[359, 2, 1, "", "inputAnnotatorTypes"], [359, 2, 1, "", "name"], [359, 2, 1, "", "outputAnnotatorType"], [359, 2, 1, "", "poolingStrategy"], [359, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[360, 1, 1, "", "SnowFlakeEmbeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings": [[360, 2, 1, "", "inputAnnotatorTypes"], [360, 3, 1, "", "loadSavedModel"], [360, 2, 1, "", "name"], [360, 2, 1, "", "outputAnnotatorType"], [360, 2, 1, "", "poolingStrategy"], [360, 3, 1, "", "pretrained"], [360, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[361, 1, 1, "", "UAEEmbeddings"]], "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings": [[361, 2, 1, "", "inputAnnotatorTypes"], [361, 3, 1, "", "loadSavedModel"], [361, 2, 1, "", "name"], [361, 2, 1, "", "outputAnnotatorType"], [361, 2, 1, "", "poolingStrategy"], [361, 3, 1, "", "pretrained"], [361, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[362, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[362, 2, 1, "", "configProtoBytes"], [362, 2, 1, "", "inputAnnotatorTypes"], [362, 2, 1, "", "loadSP"], [362, 3, 1, "", "loadSavedModel"], [362, 2, 1, "", "name"], [362, 2, 1, "", "outputAnnotatorType"], [362, 3, 1, "", "pretrained"], [362, 3, 1, "", "setConfigProtoBytes"], [362, 3, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[363, 1, 1, "", "Word2VecApproach"], [363, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[363, 2, 1, "", "inputAnnotatorTypes"], [363, 2, 1, "", "maxIter"], [363, 2, 1, "", "maxSentenceLength"], [363, 2, 1, "", "minCount"], [363, 2, 1, "", "numPartitions"], [363, 2, 1, "", "outputAnnotatorType"], [363, 2, 1, "", "seed"], [363, 3, 1, "", "setMaxIter"], [363, 3, 1, "", "setMaxSentenceLength"], [363, 3, 1, "", "setMinCount"], [363, 3, 1, "", "setNumPartitions"], [363, 3, 1, "", "setSeed"], [363, 3, 1, "", "setStepSize"], [363, 3, 1, "", "setVectorSize"], [363, 3, 1, "", "setWindowSize"], [363, 2, 1, "", "stepSize"], [363, 2, 1, "", "vectorSize"], [363, 2, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[363, 3, 1, "", "getVectors"], [363, 2, 1, "", "inputAnnotatorTypes"], [363, 2, 1, "", "name"], [363, 2, 1, "", "outputAnnotatorType"], [363, 3, 1, "", "pretrained"], [363, 3, 1, "", "setVectorSize"], [363, 2, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[364, 1, 1, "", "WordEmbeddings"], [364, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[364, 2, 1, "", "inputAnnotatorTypes"], [364, 2, 1, "", "name"], [364, 2, 1, "", "outputAnnotatorType"], [364, 2, 1, "", "readCacheSize"], [364, 3, 1, "", "setReadCacheSize"], [364, 3, 1, "", "setWriteBufferSize"], [364, 2, 1, "", "writeBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[364, 2, 1, "", "databases"], [364, 2, 1, "", "inputAnnotatorTypes"], [364, 3, 1, "", "loadStorage"], [364, 2, 1, "", "name"], [364, 2, 1, "", "outputAnnotatorType"], [364, 3, 1, "", "overallCoverage"], [364, 3, 1, "", "pretrained"], [364, 2, 1, "", "readCacheSize"], [364, 3, 1, "", "setReadCacheSize"], [364, 3, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[365, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[365, 2, 1, "", "configProtoBytes"], [365, 2, 1, "", "inputAnnotatorTypes"], [365, 3, 1, "", "loadSavedModel"], [365, 2, 1, "", "name"], [365, 2, 1, "", "outputAnnotatorType"], [365, 3, 1, "", "pretrained"], [365, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[366, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[366, 2, 1, "", "configProtoBytes"], [366, 2, 1, "", "inputAnnotatorTypes"], [366, 3, 1, "", "loadSavedModel"], [366, 2, 1, "", "name"], [366, 2, 1, "", "outputAnnotatorType"], [366, 3, 1, "", "pretrained"], [366, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[367, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[367, 2, 1, "", "configProtoBytes"], [367, 2, 1, "", "inputAnnotatorTypes"], [367, 3, 1, "", "loadSavedModel"], [367, 2, 1, "", "name"], [367, 2, 1, "", "outputAnnotatorType"], [367, 3, 1, "", "pretrained"], [367, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[368, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[368, 1, 1, "", "EntityRulerApproach"], [368, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[368, 2, 1, "", "alphabet"], [368, 2, 1, "", "inputAnnotatorTypes"], [368, 2, 1, "", "name"], [368, 2, 1, "", "optionalInputAnnotatorTypes"], [368, 2, 1, "", "outputAnnotatorType"], [368, 2, 1, "", "patternsResource"], [368, 2, 1, "", "sentenceMatch"], [368, 3, 1, "", "setAlphabetResource"], [368, 3, 1, "", "setPatternsResource"], [368, 3, 1, "", "setSentenceMatch"], [368, 3, 1, "", "setUseStorage"], [368, 2, 1, "", "useStorage"]], "sparknlp.annotator.er.entity_ruler.EntityRulerModel": [[368, 2, 1, "", "database"], [368, 2, 1, "", "inputAnnotatorTypes"], [368, 3, 1, "", "loadStorage"], [368, 2, 1, "", "name"], [368, 2, 1, "", "optionalInputAnnotatorTypes"], [368, 2, 1, "", "outputAnnotatorType"], [368, 3, 1, "", "pretrained"]], "sparknlp.annotator.graph_extraction": [[370, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[370, 2, 1, "", "delimiter"], [370, 2, 1, "", "dependencyParserModel"], [370, 2, 1, "", "entityTypes"], [370, 2, 1, "", "explodeEntities"], [370, 2, 1, "", "includeEdges"], [370, 2, 1, "", "inputAnnotatorTypes"], [370, 2, 1, "", "maxSentenceSize"], [370, 2, 1, "", "mergeEntities"], [370, 2, 1, "", "mergeEntitiesIOBFormat"], [370, 2, 1, "", "minSentenceSize"], [370, 2, 1, "", "name"], [370, 2, 1, "", "optionalInputAnnotatorTypes"], [370, 2, 1, "", "outputAnnotatorType"], [370, 2, 1, "", "posModel"], [370, 2, 1, "", "relationshipTypes"], [370, 2, 1, "", "rootTokens"], [370, 3, 1, "", "setDelimiter"], [370, 3, 1, "", "setDependencyParserModel"], [370, 3, 1, "", "setEntityTypes"], [370, 3, 1, "", "setExplodeEntities"], [370, 3, 1, "", "setIncludeEdges"], [370, 3, 1, "", "setMaxSentenceSize"], [370, 3, 1, "", "setMergeEntities"], [370, 3, 1, "", "setMergeEntitiesIOBFormat"], [370, 3, 1, "", "setMinSentenceSize"], [370, 3, 1, "", "setPosModel"], [370, 3, 1, "", "setRelationshipTypes"], [370, 3, 1, "", "setRootTokens"], [370, 3, 1, "", "setTypedDependencyParserModel"], [370, 2, 1, "", "typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[373, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[373, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[373, 3, 1, "", "getStopWords"], [373, 2, 1, "", "inputAnnotatorTypes"], [373, 3, 1, "", "loadDefaultStopWords"], [373, 2, 1, "", "maxNGrams"], [373, 2, 1, "", "minNGrams"], [373, 2, 1, "", "nKeywords"], [373, 2, 1, "", "name"], [373, 2, 1, "", "outputAnnotatorType"], [373, 3, 1, "", "setMaxNGrams"], [373, 3, 1, "", "setMinNGrams"], [373, 3, 1, "", "setNKeywords"], [373, 3, 1, "", "setStopWords"], [373, 3, 1, "", "setThreshold"], [373, 3, 1, "", "setWindowSize"], [373, 2, 1, "", "stopWords"], [373, 2, 1, "", "threshold"], [373, 2, 1, "", "windowSize"]], "sparknlp.annotator.ld_dl": [[375, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[375, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[375, 2, 1, "", "coalesceSentences"], [375, 2, 1, "", "configProtoBytes"], [375, 2, 1, "", "inputAnnotatorTypes"], [375, 2, 1, "", "languages"], [375, 2, 1, "", "name"], [375, 2, 1, "", "outputAnnotatorType"], [375, 3, 1, "", "pretrained"], [375, 3, 1, "", "setCoalesceSentences"], [375, 3, 1, "", "setConfigProtoBytes"], [375, 3, 1, "", "setThreshold"], [375, 3, 1, "", "setThresholdLabel"], [375, 2, 1, "", "threshold"], [375, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.lemmatizer": [[376, 1, 1, "", "Lemmatizer"], [376, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[376, 2, 1, "", "dictionary"], [376, 2, 1, "", "formCol"], [376, 2, 1, "", "inputAnnotatorTypes"], [376, 2, 1, "", "lemmaCol"], [376, 2, 1, "", "outputAnnotatorType"], [376, 3, 1, "", "setDictionary"], [376, 3, 1, "", "setFormCol"], [376, 3, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[376, 2, 1, "", "inputAnnotatorTypes"], [376, 2, 1, "", "name"], [376, 2, 1, "", "outputAnnotatorType"], [376, 3, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[377, 0, 0, "-", "big_text_matcher"], [378, 0, 0, "-", "date_matcher"], [380, 0, 0, "-", "multi_date_matcher"], [381, 0, 0, "-", "regex_matcher"], [382, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[377, 1, 1, "", "BigTextMatcher"], [377, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[377, 2, 1, "", "caseSensitive"], [377, 2, 1, "", "entities"], [377, 2, 1, "", "inputAnnotatorTypes"], [377, 2, 1, "", "mergeOverlapping"], [377, 2, 1, "", "outputAnnotatorType"], [377, 3, 1, "", "setCaseSensitive"], [377, 3, 1, "", "setEntities"], [377, 3, 1, "", "setMergeOverlapping"], [377, 3, 1, "", "setTokenizer"], [377, 2, 1, "", "tokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[377, 2, 1, "", "caseSensitive"], [377, 2, 1, "", "databases"], [377, 2, 1, "", "inputAnnotatorTypes"], [377, 3, 1, "", "loadStorage"], [377, 2, 1, "", "mergeOverlapping"], [377, 2, 1, "", "name"], [377, 2, 1, "", "outputAnnotatorType"], [377, 3, 1, "", "pretrained"], [377, 2, 1, "", "searchTrie"], [377, 3, 1, "", "setCaseSensitive"], [377, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[378, 1, 1, "", "DateMatcher"], [378, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcher": [[378, 2, 1, "", "inputAnnotatorTypes"], [378, 2, 1, "", "name"], [378, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[378, 2, 1, "", "aggressiveMatching"], [378, 2, 1, "", "anchorDateDay"], [378, 2, 1, "", "anchorDateMonth"], [378, 2, 1, "", "anchorDateYear"], [378, 2, 1, "", "defaultDayWhenMissing"], [378, 2, 1, "", "inputFormats"], [378, 2, 1, "", "outputFormat"], [378, 2, 1, "", "readMonthFirst"], [378, 2, 1, "", "relaxedFactoryStrategy"], [378, 3, 1, "", "setAggressiveMatching"], [378, 3, 1, "", "setAnchorDateDay"], [378, 3, 1, "", "setAnchorDateMonth"], [378, 3, 1, "", "setAnchorDateYear"], [378, 3, 1, "", "setDefaultDayWhenMissing"], [378, 3, 1, "", "setInputFormats"], [378, 3, 1, "", "setOutputFormat"], [378, 3, 1, "", "setReadMonthFirst"], [378, 3, 1, "", "setRelaxedFactoryStrategy"], [378, 3, 1, "", "setSourceLanguage"], [378, 2, 1, "", "sourceLanguage"]], "sparknlp.annotator.matcher.multi_date_matcher": [[380, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher": [[380, 2, 1, "", "inputAnnotatorTypes"], [380, 2, 1, "", "name"], [380, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.regex_matcher": [[381, 1, 1, "", "RegexMatcher"], [381, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[381, 2, 1, "", "delimiter"], [381, 2, 1, "", "externalRules"], [381, 2, 1, "", "inputAnnotatorTypes"], [381, 2, 1, "", "outputAnnotatorType"], [381, 2, 1, "", "rules"], [381, 3, 1, "", "setDelimiter"], [381, 3, 1, "", "setExternalRules"], [381, 3, 1, "", "setRules"], [381, 3, 1, "", "setStrategy"], [381, 2, 1, "", "strategy"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel": [[381, 2, 1, "", "inputAnnotatorTypes"], [381, 2, 1, "", "name"], [381, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.text_matcher": [[382, 1, 1, "", "TextMatcher"], [382, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[382, 2, 1, "", "buildFromTokens"], [382, 2, 1, "", "caseSensitive"], [382, 2, 1, "", "entities"], [382, 2, 1, "", "entityValue"], [382, 2, 1, "", "inputAnnotatorTypes"], [382, 2, 1, "", "mergeOverlapping"], [382, 2, 1, "", "outputAnnotatorType"], [382, 3, 1, "", "setBuildFromTokens"], [382, 3, 1, "", "setCaseSensitive"], [382, 3, 1, "", "setEntities"], [382, 3, 1, "", "setEntityValue"], [382, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[382, 2, 1, "", "buildFromTokens"], [382, 2, 1, "", "entityValue"], [382, 2, 1, "", "inputAnnotatorTypes"], [382, 2, 1, "", "mergeOverlapping"], [382, 2, 1, "", "name"], [382, 2, 1, "", "outputAnnotatorType"], [382, 3, 1, "", "pretrained"], [382, 2, 1, "", "searchTrie"], [382, 3, 1, "", "setBuildFromTokens"], [382, 3, 1, "", "setEntityValue"], [382, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[383, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[383, 2, 1, "", "delimiter"], [383, 2, 1, "", "enableCumulative"], [383, 2, 1, "", "inputAnnotatorTypes"], [383, 2, 1, "", "n"], [383, 2, 1, "", "name"], [383, 2, 1, "", "outputAnnotatorType"], [383, 3, 1, "", "setDelimiter"], [383, 3, 1, "", "setEnableCumulative"], [383, 3, 1, "", "setN"]], "sparknlp.annotator.ner": [[385, 0, 0, "-", "ner_approach"], [386, 0, 0, "-", "ner_converter"], [387, 0, 0, "-", "ner_crf"], [388, 0, 0, "-", "ner_dl"], [389, 0, 0, "-", "ner_overwriter"], [390, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[385, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[385, 2, 1, "", "entities"], [385, 3, 1, "", "getLabelColumn"], [385, 2, 1, "", "labelColumn"], [385, 2, 1, "", "maxEpochs"], [385, 2, 1, "", "minEpochs"], [385, 2, 1, "", "randomSeed"], [385, 3, 1, "", "setEntities"], [385, 3, 1, "", "setLabelColumn"], [385, 3, 1, "", "setMaxEpochs"], [385, 3, 1, "", "setMinEpochs"], [385, 3, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[386, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[386, 2, 1, "", "inputAnnotatorTypes"], [386, 2, 1, "", "name"], [386, 2, 1, "", "nerHasNoSchema"], [386, 2, 1, "", "outputAnnotatorType"], [386, 2, 1, "", "preservePosition"], [386, 3, 1, "", "setNerHasNoSchema"], [386, 3, 1, "", "setPreservePosition"], [386, 3, 1, "", "setWhiteList"], [386, 2, 1, "", "whiteList"]], "sparknlp.annotator.ner.ner_crf": [[387, 1, 1, "", "NerCrfApproach"], [387, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[387, 2, 1, "", "c0"], [387, 2, 1, "", "externalFeatures"], [387, 2, 1, "", "includeConfidence"], [387, 2, 1, "", "inputAnnotatorTypes"], [387, 2, 1, "", "l2"], [387, 2, 1, "", "lossEps"], [387, 2, 1, "", "minW"], [387, 2, 1, "", "outputAnnotatorType"], [387, 3, 1, "", "setC0"], [387, 3, 1, "", "setExternalFeatures"], [387, 3, 1, "", "setIncludeConfidence"], [387, 3, 1, "", "setL2"], [387, 3, 1, "", "setLossEps"], [387, 3, 1, "", "setMinW"], [387, 3, 1, "", "setVerbose"], [387, 2, 1, "", "verbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[387, 2, 1, "", "includeConfidence"], [387, 2, 1, "", "inputAnnotatorTypes"], [387, 2, 1, "", "name"], [387, 2, 1, "", "outputAnnotatorType"], [387, 3, 1, "", "pretrained"], [387, 3, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[388, 1, 1, "", "NerDLApproach"], [388, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[388, 2, 1, "", "batchSize"], [388, 2, 1, "", "bestModelMetric"], [388, 2, 1, "", "configProtoBytes"], [388, 2, 1, "", "dropout"], [388, 2, 1, "", "enableMemoryOptimizer"], [388, 2, 1, "", "graphFolder"], [388, 2, 1, "", "includeAllConfidenceScores"], [388, 2, 1, "", "includeConfidence"], [388, 2, 1, "", "inputAnnotatorTypes"], [388, 2, 1, "", "lr"], [388, 2, 1, "", "outputAnnotatorType"], [388, 2, 1, "", "po"], [388, 3, 1, "", "setBatchSize"], [388, 3, 1, "", "setBestModelMetric"], [388, 3, 1, "", "setConfigProtoBytes"], [388, 3, 1, "", "setDropout"], [388, 3, 1, "", "setEnableMemoryOptimizer"], [388, 3, 1, "", "setGraphFolder"], [388, 3, 1, "", "setIncludeAllConfidenceScores"], [388, 3, 1, "", "setIncludeConfidence"], [388, 3, 1, "", "setLr"], [388, 3, 1, "", "setPo"], [388, 3, 1, "", "setUseBestModel"], [388, 3, 1, "", "setUseContrib"], [388, 2, 1, "", "useBestModel"], [388, 2, 1, "", "useContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[388, 2, 1, "", "classes"], [388, 2, 1, "", "configProtoBytes"], [388, 2, 1, "", "includeAllConfidenceScores"], [388, 2, 1, "", "includeConfidence"], [388, 2, 1, "", "inputAnnotatorTypes"], [388, 2, 1, "", "name"], [388, 2, 1, "", "outputAnnotatorType"], [388, 3, 1, "", "pretrained"], [388, 3, 1, "", "setConfigProtoBytes"], [388, 3, 1, "", "setIncludeAllConfidenceScores"], [388, 3, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[389, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[389, 2, 1, "", "inputAnnotatorTypes"], [389, 2, 1, "", "name"], [389, 2, 1, "", "nerWords"], [389, 2, 1, "", "newNerEntity"], [389, 2, 1, "", "outputAnnotatorType"], [389, 2, 1, "", "replaceEntities"], [389, 3, 1, "", "setNerWords"], [389, 3, 1, "", "setNewNerEntity"], [389, 3, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[390, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[390, 3, 1, "", "getClasses"], [390, 2, 1, "", "ignoreEntities"], [390, 2, 1, "", "inputAnnotatorTypes"], [390, 3, 1, "", "load"], [390, 2, 1, "", "name"], [390, 2, 1, "", "outputAnnotatorType"], [390, 2, 1, "", "predictionThreshold"], [390, 3, 1, "", "pretrained"], [390, 3, 1, "", "setEntityDefinitions"], [390, 3, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[391, 1, 1, "", "Normalizer"], [391, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[391, 2, 1, "", "cleanupPatterns"], [391, 2, 1, "", "inputAnnotatorTypes"], [391, 2, 1, "", "lowercase"], [391, 2, 1, "", "maxLength"], [391, 2, 1, "", "minLength"], [391, 2, 1, "", "outputAnnotatorType"], [391, 3, 1, "", "setCleanupPatterns"], [391, 3, 1, "", "setLowercase"], [391, 3, 1, "", "setMaxLength"], [391, 3, 1, "", "setMinLength"], [391, 3, 1, "", "setSlangDictionary"], [391, 2, 1, "", "slangDictionary"], [391, 2, 1, "", "slangMatchCase"]], "sparknlp.annotator.normalizer.NormalizerModel": [[391, 2, 1, "", "cleanupPatterns"], [391, 2, 1, "", "inputAnnotatorTypes"], [391, 2, 1, "", "lowercase"], [391, 2, 1, "", "name"], [391, 2, 1, "", "outputAnnotatorType"], [391, 2, 1, "", "slangMatchCase"]], "sparknlp.annotator.openai": [[393, 0, 0, "-", "openai_completion"], [394, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[393, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[393, 2, 1, "", "bestOf"], [393, 2, 1, "", "echo"], [393, 2, 1, "", "frequencyPenalty"], [393, 2, 1, "", "inputAnnotatorTypes"], [393, 2, 1, "", "logitBias"], [393, 2, 1, "", "logprobs"], [393, 2, 1, "", "maxTokens"], [393, 2, 1, "", "model"], [393, 2, 1, "", "name"], [393, 2, 1, "", "numberOfCompletions"], [393, 2, 1, "", "outputAnnotatorType"], [393, 2, 1, "", "presencePenalty"], [393, 3, 1, "", "setBestOf"], [393, 3, 1, "", "setEcho"], [393, 3, 1, "", "setFrequencyPenalty"], [393, 3, 1, "", "setLogitBias"], [393, 3, 1, "", "setLogprobs"], [393, 3, 1, "", "setMaxTokens"], [393, 3, 1, "", "setModel"], [393, 3, 1, "", "setNumberOfCompletions"], [393, 3, 1, "", "setPresencePenalty"], [393, 3, 1, "", "setStop"], [393, 3, 1, "", "setSuffix"], [393, 3, 1, "", "setTemperature"], [393, 3, 1, "", "setTopP"], [393, 3, 1, "", "setUser"], [393, 2, 1, "", "stop"], [393, 2, 1, "", "suffix"], [393, 2, 1, "", "temperature"], [393, 2, 1, "", "topP"], [393, 2, 1, "", "user"]], "sparknlp.annotator.openai.openai_embeddings": [[394, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[394, 2, 1, "", "inputAnnotatorTypes"], [394, 2, 1, "", "model"], [394, 2, 1, "", "name"], [394, 2, 1, "", "outputAnnotatorType"], [394, 3, 1, "", "setModel"], [394, 3, 1, "", "setUser"], [394, 2, 1, "", "user"]], "sparknlp.annotator.param": [[395, 0, 0, "-", "classifier_encoder"], [396, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[395, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[395, 2, 1, "", "batchSize"], [395, 2, 1, "", "configProtoBytes"], [395, 2, 1, "", "labelColumn"], [395, 2, 1, "", "lr"], [395, 2, 1, "", "maxEpochs"], [395, 2, 1, "", "randomSeed"], [395, 3, 1, "", "setBatchSize"], [395, 3, 1, "", "setConfigProtoBytes"], [395, 3, 1, "", "setLabelColumn"], [395, 3, 1, "", "setLr"], [395, 3, 1, "", "setMaxEpochs"], [395, 3, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[396, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[396, 2, 1, "", "enableOutputLogs"], [396, 2, 1, "", "evaluationLogExtended"], [396, 2, 1, "", "outputLogsPath"], [396, 3, 1, "", "setEnableOutputLogs"], [396, 3, 1, "", "setEvaluationLogExtended"], [396, 3, 1, "", "setOutputLogsPath"], [396, 3, 1, "", "setTestDataset"], [396, 3, 1, "", "setValidationSplit"], [396, 3, 1, "", "setVerbose"], [396, 2, 1, "", "testDataset"], [396, 2, 1, "", "validationSplit"], [396, 2, 1, "", "verbose"]], "sparknlp.annotator.pos": [[399, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[399, 1, 1, "", "PerceptronApproach"], [399, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[399, 3, 1, "", "getNIterations"], [399, 2, 1, "", "inputAnnotatorTypes"], [399, 2, 1, "", "nIterations"], [399, 2, 1, "", "outputAnnotatorType"], [399, 2, 1, "", "posCol"], [399, 3, 1, "", "setIterations"], [399, 3, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[399, 2, 1, "", "inputAnnotatorTypes"], [399, 2, 1, "", "name"], [399, 2, 1, "", "outputAnnotatorType"], [399, 3, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[401, 0, 0, "-", "sentence_detector"], [402, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[401, 1, 1, "", "SentenceDetector"], [401, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[401, 2, 1, "", "detectLists"], [401, 2, 1, "", "inputAnnotatorTypes"], [401, 2, 1, "", "name"], [401, 2, 1, "", "outputAnnotatorType"], [401, 3, 1, "", "setCustomBounds"], [401, 3, 1, "", "setCustomBoundsStrategy"], [401, 3, 1, "", "setDetectLists"], [401, 3, 1, "", "setExplodeSentences"], [401, 3, 1, "", "setMaxLength"], [401, 3, 1, "", "setMinLength"], [401, 3, 1, "", "setSplitLength"], [401, 3, 1, "", "setUseAbbreviations"], [401, 3, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams": [[401, 2, 1, "", "customBounds"], [401, 2, 1, "", "customBoundsStrategy"], [401, 2, 1, "", "explodeSentences"], [401, 2, 1, "", "maxLength"], [401, 2, 1, "", "minLength"], [401, 2, 1, "", "splitLength"], [401, 2, 1, "", "useAbbreviations"], [401, 2, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[402, 1, 1, "", "SentenceDetectorDLApproach"], [402, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[402, 2, 1, "", "epochsNumber"], [402, 2, 1, "", "explodeSentences"], [402, 2, 1, "", "impossiblePenultimates"], [402, 2, 1, "", "inputAnnotatorTypes"], [402, 2, 1, "", "modelArchitecture"], [402, 2, 1, "", "name"], [402, 2, 1, "", "outputAnnotatorType"], [402, 2, 1, "", "outputLogsPath"], [402, 3, 1, "", "setEpochsNumber"], [402, 3, 1, "", "setExplodeSentences"], [402, 3, 1, "", "setImpossiblePenultimates"], [402, 3, 1, "", "setModel"], [402, 3, 1, "", "setOutputLogsPath"], [402, 3, 1, "", "setValidationSplit"], [402, 2, 1, "", "validationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[402, 2, 1, "", "customBounds"], [402, 2, 1, "", "explodeSentences"], [402, 2, 1, "", "impossiblePenultimates"], [402, 2, 1, "", "inputAnnotatorTypes"], [402, 2, 1, "", "maxLength"], [402, 2, 1, "", "minLength"], [402, 2, 1, "", "modelArchitecture"], [402, 2, 1, "", "name"], [402, 2, 1, "", "outputAnnotatorType"], [402, 3, 1, "", "pretrained"], [402, 3, 1, "", "setCustomBounds"], [402, 3, 1, "", "setExplodeSentences"], [402, 3, 1, "", "setImpossiblePenultimates"], [402, 3, 1, "", "setMaxLength"], [402, 3, 1, "", "setMinLength"], [402, 3, 1, "", "setModel"], [402, 3, 1, "", "setSplitLength"], [402, 3, 1, "", "setUseCustomBoundsOnly"], [402, 2, 1, "", "splitLength"], [402, 2, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[404, 0, 0, "-", "sentiment_detector"], [405, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[404, 1, 1, "", "SentimentDetector"], [404, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[404, 2, 1, "", "decrementMultiplier"], [404, 2, 1, "", "dictionary"], [404, 2, 1, "", "enableScore"], [404, 2, 1, "", "incrementMultiplier"], [404, 2, 1, "", "inputAnnotatorTypes"], [404, 2, 1, "", "negativeMultiplier"], [404, 2, 1, "", "outputAnnotatorType"], [404, 2, 1, "", "positiveMultiplier"], [404, 2, 1, "", "reverseMultiplier"], [404, 3, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel": [[404, 2, 1, "", "inputAnnotatorTypes"], [404, 2, 1, "", "name"], [404, 2, 1, "", "outputAnnotatorType"], [404, 2, 1, "", "positiveMultiplier"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[405, 1, 1, "", "ViveknSentimentApproach"], [405, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[405, 2, 1, "", "featureLimit"], [405, 2, 1, "", "importantFeatureRatio"], [405, 2, 1, "", "inputAnnotatorTypes"], [405, 2, 1, "", "outputAnnotatorType"], [405, 2, 1, "", "pruneCorpus"], [405, 2, 1, "", "sentimentCol"], [405, 3, 1, "", "setPruneCorpus"], [405, 3, 1, "", "setSentimentCol"], [405, 2, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[405, 2, 1, "", "featureLimit"], [405, 2, 1, "", "importantFeatureRatio"], [405, 2, 1, "", "inputAnnotatorTypes"], [405, 2, 1, "", "name"], [405, 2, 1, "", "outputAnnotatorType"], [405, 3, 1, "", "pretrained"], [405, 2, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[406, 0, 0, "-", "auto_gguf_model"], [407, 0, 0, "-", "auto_gguf_vision_model"], [408, 0, 0, "-", "bart_transformer"], [409, 0, 0, "-", "cohere_transformer"], [410, 0, 0, "-", "cpm_transformer"], [411, 0, 0, "-", "gpt2_transformer"], [413, 0, 0, "-", "llama2_transformer"], [414, 0, 0, "-", "llama3_transformer"], [415, 0, 0, "-", "m2m100_transformer"], [416, 0, 0, "-", "marian_transformer"], [417, 0, 0, "-", "mistral_transformer"], [418, 0, 0, "-", "nllb_transformer"], [419, 0, 0, "-", "olmo_transformer"], [420, 0, 0, "-", "phi2_transformer"], [421, 0, 0, "-", "phi3_transformer"], [422, 0, 0, "-", "qwen_transformer"], [423, 0, 0, "-", "starcoder_transformer"], [424, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[406, 1, 1, "", "AutoGGUFModel"]], "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel": [[406, 2, 1, "", "inputAnnotatorTypes"], [406, 3, 1, "", "loadSavedModel"], [406, 2, 1, "", "name"], [406, 2, 1, "", "outputAnnotatorType"], [406, 3, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[407, 1, 1, "", "AutoGGUFVisionModel"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel": [[407, 2, 1, "", "inputAnnotatorTypes"], [407, 3, 1, "", "loadSavedModel"], [407, 2, 1, "", "name"], [407, 2, 1, "", "outputAnnotatorType"], [407, 3, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.bart_transformer": [[408, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[408, 2, 1, "", "beamSize"], [408, 2, 1, "", "configProtoBytes"], [408, 2, 1, "", "doSample"], [408, 2, 1, "", "ignoreTokenIds"], [408, 2, 1, "", "inputAnnotatorTypes"], [408, 3, 1, "", "loadSavedModel"], [408, 2, 1, "", "maxOutputLength"], [408, 2, 1, "", "minOutputLength"], [408, 2, 1, "", "name"], [408, 2, 1, "", "noRepeatNgramSize"], [408, 2, 1, "", "outputAnnotatorType"], [408, 3, 1, "", "pretrained"], [408, 2, 1, "", "repetitionPenalty"], [408, 3, 1, "", "setBeamSize"], [408, 3, 1, "", "setCache"], [408, 3, 1, "", "setConfigProtoBytes"], [408, 3, 1, "", "setDoSample"], [408, 3, 1, "", "setIgnoreTokenIds"], [408, 3, 1, "", "setMaxOutputLength"], [408, 3, 1, "", "setMinOutputLength"], [408, 3, 1, "", "setNoRepeatNgramSize"], [408, 3, 1, "", "setRepetitionPenalty"], [408, 3, 1, "", "setTask"], [408, 3, 1, "", "setTemperature"], [408, 3, 1, "", "setTopK"], [408, 3, 1, "", "setTopP"], [408, 2, 1, "", "task"], [408, 2, 1, "", "temperature"], [408, 2, 1, "", "topK"], [408, 2, 1, "", "topP"], [408, 2, 1, "", "useCache"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[409, 1, 1, "", "CoHereTransformer"]], "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer": [[409, 2, 1, "", "beamSize"], [409, 2, 1, "", "configProtoBytes"], [409, 2, 1, "", "doSample"], [409, 2, 1, "", "ignoreTokenIds"], [409, 2, 1, "", "inputAnnotatorTypes"], [409, 3, 1, "", "loadSavedModel"], [409, 2, 1, "", "maxOutputLength"], [409, 2, 1, "", "minOutputLength"], [409, 2, 1, "", "name"], [409, 2, 1, "", "noRepeatNgramSize"], [409, 2, 1, "", "outputAnnotatorType"], [409, 3, 1, "", "pretrained"], [409, 2, 1, "", "repetitionPenalty"], [409, 3, 1, "", "setBeamSize"], [409, 3, 1, "", "setConfigProtoBytes"], [409, 3, 1, "", "setDoSample"], [409, 3, 1, "", "setIgnoreTokenIds"], [409, 3, 1, "", "setMaxOutputLength"], [409, 3, 1, "", "setMinOutputLength"], [409, 3, 1, "", "setNoRepeatNgramSize"], [409, 3, 1, "", "setRepetitionPenalty"], [409, 3, 1, "", "setStopTokenIds"], [409, 3, 1, "", "setTemperature"], [409, 3, 1, "", "setTopK"], [409, 3, 1, "", "setTopP"], [409, 2, 1, "", "stopTokenIds"], [409, 2, 1, "", "temperature"], [409, 2, 1, "", "topK"], [409, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[410, 1, 1, "", "CPMTransformer"]], "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer": [[410, 2, 1, "", "configProtoBytes"], [410, 2, 1, "", "doSample"], [410, 2, 1, "", "ignoreTokenIds"], [410, 2, 1, "", "inputAnnotatorTypes"], [410, 3, 1, "", "loadSavedModel"], [410, 2, 1, "", "maxOutputLength"], [410, 2, 1, "", "minOutputLength"], [410, 2, 1, "", "name"], [410, 2, 1, "", "noRepeatNgramSize"], [410, 2, 1, "", "outputAnnotatorType"], [410, 3, 1, "", "pretrained"], [410, 2, 1, "", "repetitionPenalty"], [410, 3, 1, "", "setConfigProtoBytes"], [410, 3, 1, "", "setDoSample"], [410, 3, 1, "", "setIgnoreTokenIds"], [410, 3, 1, "", "setMaxOutputLength"], [410, 3, 1, "", "setMinOutputLength"], [410, 3, 1, "", "setNoRepeatNgramSize"], [410, 3, 1, "", "setRepetitionPenalty"], [410, 3, 1, "", "setTemperature"], [410, 3, 1, "", "setTopK"], [410, 3, 1, "", "setTopP"], [410, 2, 1, "", "temperature"], [410, 2, 1, "", "topK"], [410, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[411, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[411, 2, 1, "", "configProtoBytes"], [411, 2, 1, "", "doSample"], [411, 2, 1, "", "ignoreTokenIds"], [411, 2, 1, "", "inputAnnotatorTypes"], [411, 3, 1, "", "loadSavedModel"], [411, 2, 1, "", "maxOutputLength"], [411, 2, 1, "", "minOutputLength"], [411, 2, 1, "", "name"], [411, 2, 1, "", "noRepeatNgramSize"], [411, 2, 1, "", "outputAnnotatorType"], [411, 3, 1, "", "pretrained"], [411, 2, 1, "", "repetitionPenalty"], [411, 3, 1, "", "setConfigProtoBytes"], [411, 3, 1, "", "setDoSample"], [411, 3, 1, "", "setIgnoreTokenIds"], [411, 3, 1, "", "setMaxOutputLength"], [411, 3, 1, "", "setMinOutputLength"], [411, 3, 1, "", "setNoRepeatNgramSize"], [411, 3, 1, "", "setRepetitionPenalty"], [411, 3, 1, "", "setTask"], [411, 3, 1, "", "setTemperature"], [411, 3, 1, "", "setTopK"], [411, 3, 1, "", "setTopP"], [411, 2, 1, "", "task"], [411, 2, 1, "", "temperature"], [411, 2, 1, "", "topK"], [411, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[413, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[413, 2, 1, "", "configProtoBytes"], [413, 2, 1, "", "doSample"], [413, 2, 1, "", "ignoreTokenIds"], [413, 2, 1, "", "inputAnnotatorTypes"], [413, 3, 1, "", "loadSavedModel"], [413, 2, 1, "", "maxOutputLength"], [413, 2, 1, "", "minOutputLength"], [413, 2, 1, "", "name"], [413, 2, 1, "", "noRepeatNgramSize"], [413, 2, 1, "", "outputAnnotatorType"], [413, 3, 1, "", "pretrained"], [413, 2, 1, "", "repetitionPenalty"], [413, 3, 1, "", "setConfigProtoBytes"], [413, 3, 1, "", "setDoSample"], [413, 3, 1, "", "setIgnoreTokenIds"], [413, 3, 1, "", "setMaxOutputLength"], [413, 3, 1, "", "setMinOutputLength"], [413, 3, 1, "", "setNoRepeatNgramSize"], [413, 3, 1, "", "setRepetitionPenalty"], [413, 3, 1, "", "setTemperature"], [413, 3, 1, "", "setTopK"], [413, 3, 1, "", "setTopP"], [413, 2, 1, "", "temperature"], [413, 2, 1, "", "topK"], [413, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[414, 1, 1, "", "LLAMA3Transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer": [[414, 2, 1, "", "beamSize"], [414, 2, 1, "", "configProtoBytes"], [414, 2, 1, "", "doSample"], [414, 2, 1, "", "ignoreTokenIds"], [414, 2, 1, "", "inputAnnotatorTypes"], [414, 3, 1, "", "loadSavedModel"], [414, 2, 1, "", "maxOutputLength"], [414, 2, 1, "", "minOutputLength"], [414, 2, 1, "", "name"], [414, 2, 1, "", "noRepeatNgramSize"], [414, 2, 1, "", "outputAnnotatorType"], [414, 3, 1, "", "pretrained"], [414, 2, 1, "", "repetitionPenalty"], [414, 3, 1, "", "setBeamSize"], [414, 3, 1, "", "setConfigProtoBytes"], [414, 3, 1, "", "setDoSample"], [414, 3, 1, "", "setIgnoreTokenIds"], [414, 3, 1, "", "setMaxOutputLength"], [414, 3, 1, "", "setMinOutputLength"], [414, 3, 1, "", "setNoRepeatNgramSize"], [414, 3, 1, "", "setRepetitionPenalty"], [414, 3, 1, "", "setStopTokenIds"], [414, 3, 1, "", "setTemperature"], [414, 3, 1, "", "setTopK"], [414, 3, 1, "", "setTopP"], [414, 2, 1, "", "stopTokenIds"], [414, 2, 1, "", "temperature"], [414, 2, 1, "", "topK"], [414, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[415, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[415, 2, 1, "", "beamSize"], [415, 2, 1, "", "configProtoBytes"], [415, 2, 1, "", "doSample"], [415, 2, 1, "", "ignoreTokenIds"], [415, 2, 1, "", "inputAnnotatorTypes"], [415, 3, 1, "", "loadSavedModel"], [415, 2, 1, "", "maxOutputLength"], [415, 2, 1, "", "minOutputLength"], [415, 2, 1, "", "name"], [415, 2, 1, "", "noRepeatNgramSize"], [415, 2, 1, "", "outputAnnotatorType"], [415, 3, 1, "", "pretrained"], [415, 2, 1, "", "repetitionPenalty"], [415, 3, 1, "", "setBeamSize"], [415, 3, 1, "", "setConfigProtoBytes"], [415, 3, 1, "", "setDoSample"], [415, 3, 1, "", "setIgnoreTokenIds"], [415, 3, 1, "", "setMaxOutputLength"], [415, 3, 1, "", "setMinOutputLength"], [415, 3, 1, "", "setNoRepeatNgramSize"], [415, 3, 1, "", "setRepetitionPenalty"], [415, 3, 1, "", "setSrcLang"], [415, 3, 1, "", "setTemperature"], [415, 3, 1, "", "setTgtLang"], [415, 3, 1, "", "setTopK"], [415, 3, 1, "", "setTopP"], [415, 2, 1, "", "srcLang"], [415, 2, 1, "", "temperature"], [415, 2, 1, "", "tgtLang"], [415, 2, 1, "", "topK"], [415, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[416, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[416, 2, 1, "", "configProtoBytes"], [416, 2, 1, "", "doSample"], [416, 2, 1, "", "ignoreTokenIds"], [416, 2, 1, "", "inputAnnotatorTypes"], [416, 2, 1, "", "langId"], [416, 3, 1, "", "loadSavedModel"], [416, 2, 1, "", "maxInputLength"], [416, 2, 1, "", "maxOutputLength"], [416, 2, 1, "", "name"], [416, 2, 1, "", "noRepeatNgramSize"], [416, 2, 1, "", "outputAnnotatorType"], [416, 3, 1, "", "pretrained"], [416, 2, 1, "", "repetitionPenalty"], [416, 3, 1, "", "setConfigProtoBytes"], [416, 3, 1, "", "setDoSample"], [416, 3, 1, "", "setIgnoreTokenIds"], [416, 3, 1, "", "setLangId"], [416, 3, 1, "", "setMaxInputLength"], [416, 3, 1, "", "setMaxOutputLength"], [416, 3, 1, "", "setNoRepeatNgramSize"], [416, 3, 1, "", "setRandomSeed"], [416, 3, 1, "", "setRepetitionPenalty"], [416, 3, 1, "", "setTemperature"], [416, 3, 1, "", "setTopK"], [416, 3, 1, "", "setTopP"], [416, 2, 1, "", "temperature"], [416, 2, 1, "", "topK"], [416, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[417, 1, 1, "", "MistralTransformer"]], "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer": [[417, 2, 1, "", "configProtoBytes"], [417, 2, 1, "", "doSample"], [417, 2, 1, "", "ignoreTokenIds"], [417, 2, 1, "", "inputAnnotatorTypes"], [417, 3, 1, "", "loadSavedModel"], [417, 2, 1, "", "maxOutputLength"], [417, 2, 1, "", "minOutputLength"], [417, 2, 1, "", "name"], [417, 2, 1, "", "noRepeatNgramSize"], [417, 2, 1, "", "outputAnnotatorType"], [417, 3, 1, "", "pretrained"], [417, 2, 1, "", "repetitionPenalty"], [417, 3, 1, "", "setConfigProtoBytes"], [417, 3, 1, "", "setDoSample"], [417, 3, 1, "", "setIgnoreTokenIds"], [417, 3, 1, "", "setMaxOutputLength"], [417, 3, 1, "", "setMinOutputLength"], [417, 3, 1, "", "setNoRepeatNgramSize"], [417, 3, 1, "", "setRepetitionPenalty"], [417, 3, 1, "", "setTemperature"], [417, 3, 1, "", "setTopK"], [417, 3, 1, "", "setTopP"], [417, 2, 1, "", "temperature"], [417, 2, 1, "", "topK"], [417, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[418, 1, 1, "", "NLLBTransformer"]], "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer": [[418, 2, 1, "", "beamSize"], [418, 2, 1, "", "configProtoBytes"], [418, 2, 1, "", "doSample"], [418, 2, 1, "", "ignoreTokenIds"], [418, 2, 1, "", "inputAnnotatorTypes"], [418, 3, 1, "", "loadSavedModel"], [418, 2, 1, "", "maxOutputLength"], [418, 2, 1, "", "minOutputLength"], [418, 2, 1, "", "name"], [418, 2, 1, "", "noRepeatNgramSize"], [418, 2, 1, "", "outputAnnotatorType"], [418, 3, 1, "", "pretrained"], [418, 2, 1, "", "repetitionPenalty"], [418, 3, 1, "", "setBeamSize"], [418, 3, 1, "", "setConfigProtoBytes"], [418, 3, 1, "", "setDoSample"], [418, 3, 1, "", "setIgnoreTokenIds"], [418, 3, 1, "", "setMaxOutputLength"], [418, 3, 1, "", "setMinOutputLength"], [418, 3, 1, "", "setNoRepeatNgramSize"], [418, 3, 1, "", "setRepetitionPenalty"], [418, 3, 1, "", "setSrcLang"], [418, 3, 1, "", "setTemperature"], [418, 3, 1, "", "setTgtLang"], [418, 3, 1, "", "setTopK"], [418, 3, 1, "", "setTopP"], [418, 2, 1, "", "srcLang"], [418, 2, 1, "", "temperature"], [418, 2, 1, "", "tgtLang"], [418, 2, 1, "", "topK"], [418, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[419, 1, 1, "", "OLMoTransformer"]], "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer": [[419, 2, 1, "", "configProtoBytes"], [419, 2, 1, "", "doSample"], [419, 2, 1, "", "ignoreTokenIds"], [419, 2, 1, "", "inputAnnotatorTypes"], [419, 3, 1, "", "loadSavedModel"], [419, 2, 1, "", "maxOutputLength"], [419, 2, 1, "", "minOutputLength"], [419, 2, 1, "", "name"], [419, 2, 1, "", "noRepeatNgramSize"], [419, 2, 1, "", "outputAnnotatorType"], [419, 3, 1, "", "pretrained"], [419, 2, 1, "", "repetitionPenalty"], [419, 3, 1, "", "setConfigProtoBytes"], [419, 3, 1, "", "setDoSample"], [419, 3, 1, "", "setIgnoreTokenIds"], [419, 3, 1, "", "setMaxOutputLength"], [419, 3, 1, "", "setMinOutputLength"], [419, 3, 1, "", "setNoRepeatNgramSize"], [419, 3, 1, "", "setRepetitionPenalty"], [419, 3, 1, "", "setTemperature"], [419, 3, 1, "", "setTopK"], [419, 3, 1, "", "setTopP"], [419, 2, 1, "", "temperature"], [419, 2, 1, "", "topK"], [419, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[420, 1, 1, "", "Phi2Transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer": [[420, 2, 1, "", "configProtoBytes"], [420, 2, 1, "", "doSample"], [420, 2, 1, "", "ignoreTokenIds"], [420, 2, 1, "", "inputAnnotatorTypes"], [420, 3, 1, "", "loadSavedModel"], [420, 2, 1, "", "maxOutputLength"], [420, 2, 1, "", "minOutputLength"], [420, 2, 1, "", "name"], [420, 2, 1, "", "noRepeatNgramSize"], [420, 2, 1, "", "outputAnnotatorType"], [420, 3, 1, "", "pretrained"], [420, 2, 1, "", "repetitionPenalty"], [420, 3, 1, "", "setConfigProtoBytes"], [420, 3, 1, "", "setDoSample"], [420, 3, 1, "", "setIgnoreTokenIds"], [420, 3, 1, "", "setMaxOutputLength"], [420, 3, 1, "", "setMinOutputLength"], [420, 3, 1, "", "setNoRepeatNgramSize"], [420, 3, 1, "", "setRepetitionPenalty"], [420, 3, 1, "", "setTemperature"], [420, 3, 1, "", "setTopK"], [420, 3, 1, "", "setTopP"], [420, 2, 1, "", "temperature"], [420, 2, 1, "", "topK"], [420, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[421, 1, 1, "", "Phi3Transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer": [[421, 2, 1, "", "configProtoBytes"], [421, 2, 1, "", "doSample"], [421, 2, 1, "", "ignoreTokenIds"], [421, 2, 1, "", "inputAnnotatorTypes"], [421, 3, 1, "", "loadSavedModel"], [421, 2, 1, "", "maxOutputLength"], [421, 2, 1, "", "minOutputLength"], [421, 2, 1, "", "name"], [421, 2, 1, "", "noRepeatNgramSize"], [421, 2, 1, "", "outputAnnotatorType"], [421, 3, 1, "", "pretrained"], [421, 2, 1, "", "repetitionPenalty"], [421, 3, 1, "", "setConfigProtoBytes"], [421, 3, 1, "", "setDoSample"], [421, 3, 1, "", "setIgnoreTokenIds"], [421, 3, 1, "", "setMaxOutputLength"], [421, 3, 1, "", "setMinOutputLength"], [421, 3, 1, "", "setNoRepeatNgramSize"], [421, 3, 1, "", "setRepetitionPenalty"], [421, 3, 1, "", "setTemperature"], [421, 3, 1, "", "setTopK"], [421, 3, 1, "", "setTopP"], [421, 2, 1, "", "temperature"], [421, 2, 1, "", "topK"], [421, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[422, 1, 1, "", "QwenTransformer"]], "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer": [[422, 2, 1, "", "configProtoBytes"], [422, 2, 1, "", "doSample"], [422, 2, 1, "", "ignoreTokenIds"], [422, 2, 1, "", "inputAnnotatorTypes"], [422, 3, 1, "", "loadSavedModel"], [422, 2, 1, "", "maxOutputLength"], [422, 2, 1, "", "minOutputLength"], [422, 2, 1, "", "name"], [422, 2, 1, "", "noRepeatNgramSize"], [422, 2, 1, "", "outputAnnotatorType"], [422, 3, 1, "", "pretrained"], [422, 2, 1, "", "repetitionPenalty"], [422, 3, 1, "", "setConfigProtoBytes"], [422, 3, 1, "", "setDoSample"], [422, 3, 1, "", "setIgnoreTokenIds"], [422, 3, 1, "", "setMaxOutputLength"], [422, 3, 1, "", "setMinOutputLength"], [422, 3, 1, "", "setNoRepeatNgramSize"], [422, 3, 1, "", "setRepetitionPenalty"], [422, 3, 1, "", "setTemperature"], [422, 3, 1, "", "setTopK"], [422, 3, 1, "", "setTopP"], [422, 2, 1, "", "temperature"], [422, 2, 1, "", "topK"], [422, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[423, 1, 1, "", "StarCoderTransformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer": [[423, 2, 1, "", "configProtoBytes"], [423, 2, 1, "", "doSample"], [423, 2, 1, "", "ignoreTokenIds"], [423, 2, 1, "", "inputAnnotatorTypes"], [423, 3, 1, "", "loadSavedModel"], [423, 2, 1, "", "maxOutputLength"], [423, 2, 1, "", "minOutputLength"], [423, 2, 1, "", "name"], [423, 2, 1, "", "noRepeatNgramSize"], [423, 2, 1, "", "outputAnnotatorType"], [423, 3, 1, "", "pretrained"], [423, 2, 1, "", "repetitionPenalty"], [423, 3, 1, "", "setConfigProtoBytes"], [423, 3, 1, "", "setDoSample"], [423, 3, 1, "", "setIgnoreTokenIds"], [423, 3, 1, "", "setMaxOutputLength"], [423, 3, 1, "", "setMinOutputLength"], [423, 3, 1, "", "setNoRepeatNgramSize"], [423, 3, 1, "", "setRepetitionPenalty"], [423, 3, 1, "", "setTemperature"], [423, 3, 1, "", "setTopK"], [423, 3, 1, "", "setTopP"], [423, 2, 1, "", "temperature"], [423, 2, 1, "", "topK"], [423, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[424, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[424, 2, 1, "", "configProtoBytes"], [424, 2, 1, "", "doSample"], [424, 2, 1, "", "ignoreTokenIds"], [424, 2, 1, "", "inputAnnotatorTypes"], [424, 3, 1, "", "loadSavedModel"], [424, 2, 1, "", "maxNewTokens"], [424, 2, 1, "", "maxOutputLength"], [424, 2, 1, "", "minOutputLength"], [424, 2, 1, "", "name"], [424, 2, 1, "", "noRepeatNgramSize"], [424, 2, 1, "", "outputAnnotatorType"], [424, 3, 1, "", "pretrained"], [424, 2, 1, "", "repetitionPenalty"], [424, 3, 1, "", "setConfigProtoBytes"], [424, 3, 1, "", "setDoSample"], [424, 3, 1, "", "setIgnoreTokenIds"], [424, 3, 1, "", "setMaxNewTokens"], [424, 3, 1, "", "setMaxOutputLength"], [424, 3, 1, "", "setMinOutputLength"], [424, 3, 1, "", "setNoRepeatNgramSize"], [424, 3, 1, "", "setRepetitionPenalty"], [424, 3, 1, "", "setStopAtEos"], [424, 3, 1, "", "setTask"], [424, 3, 1, "", "setTemperature"], [424, 3, 1, "", "setTopK"], [424, 3, 1, "", "setTopP"], [424, 3, 1, "", "setUseCache"], [424, 2, 1, "", "stopAtEos"], [424, 2, 1, "", "task"], [424, 2, 1, "", "temperature"], [424, 2, 1, "", "topK"], [424, 2, 1, "", "topP"], [424, 2, 1, "", "useCache"]], "sparknlp.annotator.similarity": [[425, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[425, 1, 1, "", "DocumentSimilarityRankerApproach"], [425, 1, 1, "", "DocumentSimilarityRankerFinisher"], [425, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[425, 2, 1, "", "aggregationMethod"], [425, 3, 1, "", "asRetriever"], [425, 2, 1, "", "asRetrieverQuery"], [425, 2, 1, "", "bucketLength"], [425, 2, 1, "", "identityRanking"], [425, 2, 1, "", "inputAnnotatorTypes"], [425, 2, 1, "", "numHashTables"], [425, 2, 1, "", "numberOfNeighbours"], [425, 2, 1, "", "outputAnnotatorType"], [425, 3, 1, "", "setAggregationMethod"], [425, 3, 1, "", "setBucketLength"], [425, 3, 1, "", "setIdentityRanking"], [425, 3, 1, "", "setNumHashTables"], [425, 3, 1, "", "setNumberOfNeighbours"], [425, 3, 1, "", "setSimilarityMethod"], [425, 3, 1, "", "setVisibleDistances"], [425, 2, 1, "", "similarityMethod"], [425, 2, 1, "", "visibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[425, 2, 1, "", "extractNearestNeighbor"], [425, 3, 1, "", "getInputCols"], [425, 3, 1, "", "getOutputCols"], [425, 2, 1, "", "inputCols"], [425, 2, 1, "", "name"], [425, 2, 1, "", "outputCols"], [425, 3, 1, "", "setExtractNearestNeighbor"], [425, 3, 1, "", "setInputCols"], [425, 3, 1, "", "setOutputCols"], [425, 3, 1, "", "setParams"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel": [[425, 2, 1, "", "inputAnnotatorTypes"], [425, 2, 1, "", "name"], [425, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.spell_check": [[427, 0, 0, "-", "context_spell_checker"], [429, 0, 0, "-", "norvig_sweeting"], [430, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[427, 1, 1, "", "ContextSpellCheckerApproach"], [427, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[427, 3, 1, "", "addRegexClass"], [427, 3, 1, "", "addVocabClass"], [427, 2, 1, "", "batchSize"], [427, 2, 1, "", "caseStrategy"], [427, 2, 1, "", "classCount"], [427, 2, 1, "", "compoundCount"], [427, 2, 1, "", "configProtoBytes"], [427, 2, 1, "", "epochs"], [427, 2, 1, "", "errorThreshold"], [427, 2, 1, "", "finalRate"], [427, 2, 1, "", "graphFolder"], [427, 2, 1, "", "initialRate"], [427, 2, 1, "", "inputAnnotatorTypes"], [427, 2, 1, "", "languageModelClasses"], [427, 2, 1, "", "maxCandidates"], [427, 2, 1, "", "maxSentLen"], [427, 2, 1, "", "maxWindowLen"], [427, 2, 1, "", "minCount"], [427, 2, 1, "", "name"], [427, 2, 1, "", "outputAnnotatorType"], [427, 3, 1, "", "setBatchSize"], [427, 3, 1, "", "setCaseStrategy"], [427, 3, 1, "", "setClassCount"], [427, 3, 1, "", "setCompoundCount"], [427, 3, 1, "", "setConfigProtoBytes"], [427, 3, 1, "", "setEpochs"], [427, 3, 1, "", "setErrorThreshold"], [427, 3, 1, "", "setFinalRate"], [427, 3, 1, "", "setGraphFolder"], [427, 3, 1, "", "setInitialRate"], [427, 3, 1, "", "setLanguageModelClasses"], [427, 3, 1, "", "setMaxCandidates"], [427, 3, 1, "", "setMaxSentLen"], [427, 3, 1, "", "setMaxWindowLen"], [427, 3, 1, "", "setMinCount"], [427, 3, 1, "", "setTradeoff"], [427, 3, 1, "", "setValidationFraction"], [427, 3, 1, "", "setWeightedDistPath"], [427, 3, 1, "", "setWordMaxDistance"], [427, 2, 1, "", "tradeoff"], [427, 2, 1, "", "validationFraction"], [427, 2, 1, "", "weightedDistPath"], [427, 2, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[427, 2, 1, "", "caseStrategy"], [427, 2, 1, "", "classes"], [427, 2, 1, "", "compareLowcase"], [427, 2, 1, "", "configProtoBytes"], [427, 2, 1, "", "correctSymbols"], [427, 2, 1, "", "errorThreshold"], [427, 2, 1, "", "gamma"], [427, 3, 1, "", "getWordClasses"], [427, 2, 1, "", "idsVocab"], [427, 2, 1, "", "inputAnnotatorTypes"], [427, 2, 1, "", "maxCandidates"], [427, 2, 1, "", "maxWindowLen"], [427, 2, 1, "", "name"], [427, 2, 1, "", "outputAnnotatorType"], [427, 3, 1, "", "pretrained"], [427, 3, 1, "", "setCaseStrategy"], [427, 3, 1, "", "setClasses"], [427, 3, 1, "", "setCompareLowcase"], [427, 3, 1, "", "setConfigProtoBytes"], [427, 3, 1, "", "setCorrectSymbols"], [427, 3, 1, "", "setErrorThreshold"], [427, 3, 1, "", "setGamma"], [427, 3, 1, "", "setIdsVocab"], [427, 3, 1, "", "setMaxCandidates"], [427, 3, 1, "", "setMaxWindowLen"], [427, 3, 1, "", "setTradeoff"], [427, 3, 1, "", "setVocabFreq"], [427, 3, 1, "", "setVocabIds"], [427, 3, 1, "", "setWeights"], [427, 3, 1, "", "setWordMaxDistance"], [427, 2, 1, "", "tradeoff"], [427, 3, 1, "", "updateRegexClass"], [427, 3, 1, "", "updateVocabClass"], [427, 2, 1, "", "vocabFreq"], [427, 2, 1, "", "vocabIds"], [427, 2, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[429, 1, 1, "", "NorvigSweetingApproach"], [429, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[429, 2, 1, "", "caseSensitive"], [429, 2, 1, "", "dictionary"], [429, 2, 1, "", "dictionary_path"], [429, 2, 1, "", "doubleVariants"], [429, 2, 1, "", "dupsLimit"], [429, 2, 1, "", "frequencyPriority"], [429, 2, 1, "", "inputAnnotatorTypes"], [429, 2, 1, "", "intersections"], [429, 2, 1, "", "outputAnnotatorType"], [429, 2, 1, "", "reductLimit"], [429, 3, 1, "", "setCaseSensitive"], [429, 3, 1, "", "setDictionary"], [429, 3, 1, "", "setDoubleVariants"], [429, 3, 1, "", "setFrequencyPriority"], [429, 3, 1, "", "setShortCircuit"], [429, 2, 1, "", "shortCircuit"], [429, 2, 1, "", "vowelSwapLimit"], [429, 2, 1, "", "wordSizeIgnore"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[429, 2, 1, "", "inputAnnotatorTypes"], [429, 2, 1, "", "name"], [429, 2, 1, "", "outputAnnotatorType"], [429, 3, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[430, 1, 1, "", "SymmetricDeleteApproach"], [430, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[430, 2, 1, "", "corpus"], [430, 2, 1, "", "deletesThreshold"], [430, 2, 1, "", "dictionary"], [430, 2, 1, "", "dictionary_path"], [430, 2, 1, "", "dupsLimit"], [430, 2, 1, "", "frequencyThreshold"], [430, 2, 1, "", "inputAnnotatorTypes"], [430, 2, 1, "", "maxEditDistance"], [430, 2, 1, "", "outputAnnotatorType"], [430, 3, 1, "", "setDeletesThreshold"], [430, 3, 1, "", "setDictionary"], [430, 3, 1, "", "setFrequencyThreshold"], [430, 3, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[430, 2, 1, "", "inputAnnotatorTypes"], [430, 2, 1, "", "name"], [430, 2, 1, "", "outputAnnotatorType"], [430, 3, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[431, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stemmer.Stemmer": [[431, 2, 1, "", "inputAnnotatorTypes"], [431, 2, 1, "", "language"], [431, 2, 1, "", "name"], [431, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.stop_words_cleaner": [[432, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[432, 2, 1, "", "caseSensitive"], [432, 2, 1, "", "inputAnnotatorTypes"], [432, 3, 1, "", "loadDefaultStopWords"], [432, 2, 1, "", "locale"], [432, 2, 1, "", "name"], [432, 2, 1, "", "outputAnnotatorType"], [432, 3, 1, "", "pretrained"], [432, 3, 1, "", "setCaseSensitive"], [432, 3, 1, "", "setLocale"], [432, 3, 1, "", "setStopWords"], [432, 2, 1, "", "stopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[433, 1, 1, "", "TFNerDLGraphBuilder"], [433, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[433, 3, 1, "", "getGraphFile"], [433, 3, 1, "", "getGraphFolder"], [433, 3, 1, "", "getHiddenUnitsNumber"], [433, 3, 1, "", "getInputCols"], [433, 3, 1, "", "getLabelColumn"], [433, 2, 1, "", "graphFile"], [433, 2, 1, "", "graphFolder"], [433, 2, 1, "", "hiddenUnitsNumber"], [433, 2, 1, "", "inputAnnotatorTypes"], [433, 2, 1, "", "inputCols"], [433, 3, 1, "", "inputColsValidation"], [433, 2, 1, "", "labelColumn"], [433, 3, 1, "", "setGraphFile"], [433, 3, 1, "", "setGraphFolder"], [433, 3, 1, "", "setHiddenUnitsNumber"], [433, 3, 1, "", "setInputCols"], [433, 3, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[434, 0, 0, "-", "chunk_tokenizer"], [436, 0, 0, "-", "recursive_tokenizer"], [437, 0, 0, "-", "regex_tokenizer"], [438, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[434, 1, 1, "", "ChunkTokenizer"], [434, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer": [[434, 2, 1, "", "inputAnnotatorTypes"], [434, 2, 1, "", "name"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel": [[434, 2, 1, "", "inputAnnotatorTypes"], [434, 2, 1, "", "name"]], "sparknlp.annotator.token.recursive_tokenizer": [[436, 1, 1, "", "RecursiveTokenizer"], [436, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[436, 2, 1, "", "infixes"], [436, 2, 1, "", "inputAnnotatorTypes"], [436, 2, 1, "", "name"], [436, 2, 1, "", "outputAnnotatorType"], [436, 2, 1, "", "prefixes"], [436, 3, 1, "", "setInfixes"], [436, 3, 1, "", "setPrefixes"], [436, 3, 1, "", "setSuffixes"], [436, 3, 1, "", "setWhitelist"], [436, 2, 1, "", "suffixes"], [436, 2, 1, "", "whitelist"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel": [[436, 2, 1, "", "inputAnnotatorTypes"], [436, 2, 1, "", "name"], [436, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.token.regex_tokenizer": [[437, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[437, 2, 1, "", "inputAnnotatorTypes"], [437, 2, 1, "", "maxLength"], [437, 2, 1, "", "minLength"], [437, 2, 1, "", "name"], [437, 2, 1, "", "outputAnnotatorType"], [437, 2, 1, "", "pattern"], [437, 2, 1, "", "positionalMask"], [437, 2, 1, "", "preservePosition"], [437, 3, 1, "", "setMaxLength"], [437, 3, 1, "", "setMinLength"], [437, 3, 1, "", "setPattern"], [437, 3, 1, "", "setPositionalMask"], [437, 3, 1, "", "setPreservePosition"], [437, 3, 1, "", "setToLowercase"], [437, 3, 1, "", "setTrimWhitespace"], [437, 2, 1, "", "toLowercase"], [437, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[438, 1, 1, "", "Tokenizer"], [438, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[438, 3, 1, "", "addContextChars"], [438, 3, 1, "", "addException"], [438, 3, 1, "", "addInfixPattern"], [438, 3, 1, "", "addSplitChars"], [438, 2, 1, "", "caseSensitiveExceptions"], [438, 2, 1, "", "contextChars"], [438, 2, 1, "", "exceptions"], [438, 2, 1, "", "exceptionsPath"], [438, 3, 1, "", "getCaseSensitiveExceptions"], [438, 3, 1, "", "getContextChars"], [438, 3, 1, "", "getExceptions"], [438, 3, 1, "", "getInfixPatterns"], [438, 3, 1, "", "getPrefixPattern"], [438, 3, 1, "", "getSplitChars"], [438, 3, 1, "", "getSuffixPattern"], [438, 2, 1, "", "infixPatterns"], [438, 2, 1, "", "inputAnnotatorTypes"], [438, 2, 1, "", "maxLength"], [438, 2, 1, "", "minLength"], [438, 2, 1, "", "name"], [438, 2, 1, "", "outputAnnotatorType"], [438, 2, 1, "", "prefixPattern"], [438, 3, 1, "", "setCaseSensitiveExceptions"], [438, 3, 1, "", "setContextChars"], [438, 3, 1, "", "setExceptions"], [438, 3, 1, "", "setExceptionsPath"], [438, 3, 1, "", "setInfixPatterns"], [438, 3, 1, "", "setMaxLength"], [438, 3, 1, "", "setMinLength"], [438, 3, 1, "", "setPrefixPattern"], [438, 3, 1, "", "setSplitChars"], [438, 3, 1, "", "setSplitPattern"], [438, 3, 1, "", "setSuffixPattern"], [438, 3, 1, "", "setTargetPattern"], [438, 2, 1, "", "splitChars"], [438, 2, 1, "", "splitPattern"], [438, 2, 1, "", "suffixPattern"], [438, 2, 1, "", "targetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[438, 3, 1, "", "addSplitChars"], [438, 2, 1, "", "caseSensitiveExceptions"], [438, 2, 1, "", "exceptions"], [438, 2, 1, "", "inputAnnotatorTypes"], [438, 2, 1, "", "name"], [438, 2, 1, "", "outputAnnotatorType"], [438, 3, 1, "", "pretrained"], [438, 2, 1, "", "rules"], [438, 3, 1, "", "setSplitChars"], [438, 3, 1, "", "setSplitPattern"], [438, 2, 1, "", "splitChars"], [438, 2, 1, "", "splitPattern"], [438, 2, 1, "", "targetPattern"]], "sparknlp.annotator.token2_chunk": [[439, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.token2_chunk.Token2Chunk": [[439, 2, 1, "", "inputAnnotatorTypes"], [439, 2, 1, "", "name"], [439, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.ws": [[441, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[441, 1, 1, "", "WordSegmenterApproach"], [441, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[441, 2, 1, "", "ambiguityThreshold"], [441, 2, 1, "", "enableRegexTokenizer"], [441, 2, 1, "", "frequencyThreshold"], [441, 3, 1, "", "getAmbiguityThreshold"], [441, 3, 1, "", "getFrequencyThreshold"], [441, 3, 1, "", "getNIterations"], [441, 2, 1, "", "inputAnnotatorTypes"], [441, 2, 1, "", "nIterations"], [441, 2, 1, "", "name"], [441, 2, 1, "", "outputAnnotatorType"], [441, 2, 1, "", "pattern"], [441, 2, 1, "", "posCol"], [441, 3, 1, "", "setAmbiguityThreshold"], [441, 3, 1, "", "setEnableRegexTokenizer"], [441, 3, 1, "", "setFrequencyThreshold"], [441, 3, 1, "", "setNIterations"], [441, 3, 1, "", "setPattern"], [441, 3, 1, "", "setPosColumn"], [441, 3, 1, "", "setToLowercase"], [441, 2, 1, "", "toLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[441, 2, 1, "", "enableRegexTokenizer"], [441, 2, 1, "", "inputAnnotatorTypes"], [441, 2, 1, "", "name"], [441, 2, 1, "", "outputAnnotatorType"], [441, 2, 1, "", "pattern"], [441, 3, 1, "", "pretrained"], [441, 3, 1, "", "setEnableRegexTokenizer"], [441, 3, 1, "", "setPattern"], [441, 3, 1, "", "setToLowercase"], [441, 2, 1, "", "toLowercase"]], "sparknlp.base": [[442, 0, 0, "-", "audio_assembler"], [443, 0, 0, "-", "doc2_chunk"], [444, 0, 0, "-", "document_assembler"], [445, 0, 0, "-", "embeddings_finisher"], [446, 0, 0, "-", "finisher"], [447, 0, 0, "-", "graph_finisher"], [448, 0, 0, "-", "has_recursive_fit"], [449, 0, 0, "-", "has_recursive_transform"], [450, 0, 0, "-", "image_assembler"], [452, 0, 0, "-", "light_pipeline"], [453, 0, 0, "-", "multi_document_assembler"], [454, 0, 0, "-", "prompt_assembler"], [455, 0, 0, "-", "recursive_pipeline"], [456, 0, 0, "-", "table_assembler"], [457, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[442, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[442, 3, 1, "", "getOutputCol"], [442, 2, 1, "", "inputCol"], [442, 2, 1, "", "name"], [442, 2, 1, "", "outputAnnotatorType"], [442, 2, 1, "", "outputCol"], [442, 3, 1, "", "setInputCol"], [442, 3, 1, "", "setOutputCol"], [442, 3, 1, "", "setParams"]], "sparknlp.base.doc2_chunk": [[443, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[443, 2, 1, "", "chunkCol"], [443, 2, 1, "", "failOnMissing"], [443, 2, 1, "", "inputAnnotatorTypes"], [443, 2, 1, "", "isArray"], [443, 2, 1, "", "lowerCase"], [443, 2, 1, "", "name"], [443, 2, 1, "", "outputAnnotatorType"], [443, 3, 1, "", "setChunkCol"], [443, 3, 1, "", "setFailOnMissing"], [443, 3, 1, "", "setIsArray"], [443, 3, 1, "", "setLowerCase"], [443, 3, 1, "", "setParams"], [443, 3, 1, "", "setStartCol"], [443, 3, 1, "", "setStartColByTokenIndex"], [443, 2, 1, "", "startCol"], [443, 2, 1, "", "startColByTokenIndex"]], "sparknlp.base.document_assembler": [[444, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[444, 2, 1, "", "cleanupMode"], [444, 3, 1, "", "getOutputCol"], [444, 2, 1, "", "idCol"], [444, 2, 1, "", "inputCol"], [444, 2, 1, "", "metadataCol"], [444, 2, 1, "", "name"], [444, 2, 1, "", "outputAnnotatorType"], [444, 2, 1, "", "outputCol"], [444, 3, 1, "", "setCleanupMode"], [444, 3, 1, "", "setIdCol"], [444, 3, 1, "", "setInputCol"], [444, 3, 1, "", "setMetadataCol"], [444, 3, 1, "", "setOutputCol"], [444, 3, 1, "", "setParams"]], "sparknlp.base.embeddings_finisher": [[445, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[445, 2, 1, "", "cleanAnnotations"], [445, 3, 1, "", "getInputCols"], [445, 3, 1, "", "getOutputCols"], [445, 2, 1, "", "inputCols"], [445, 2, 1, "", "name"], [445, 2, 1, "", "outputAsVector"], [445, 2, 1, "", "outputCols"], [445, 3, 1, "", "setCleanAnnotations"], [445, 3, 1, "", "setInputCols"], [445, 3, 1, "", "setOutputAsVector"], [445, 3, 1, "", "setOutputCols"], [445, 3, 1, "", "setParams"]], "sparknlp.base.finisher": [[446, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[446, 2, 1, "", "annotationSplitSymbol"], [446, 2, 1, "", "cleanAnnotations"], [446, 3, 1, "", "getInputCols"], [446, 3, 1, "", "getOutputCols"], [446, 2, 1, "", "includeMetadata"], [446, 2, 1, "", "inputCols"], [446, 2, 1, "", "name"], [446, 2, 1, "", "outputAsArray"], [446, 2, 1, "", "outputCols"], [446, 2, 1, "", "parseEmbeddingsVectors"], [446, 3, 1, "", "setAnnotationSplitSymbol"], [446, 3, 1, "", "setCleanAnnotations"], [446, 3, 1, "", "setIncludeMetadata"], [446, 3, 1, "", "setInputCols"], [446, 3, 1, "", "setOutputAsArray"], [446, 3, 1, "", "setOutputCols"], [446, 3, 1, "", "setParams"], [446, 3, 1, "", "setParseEmbeddingsVectors"], [446, 3, 1, "", "setValueSplitSymbol"], [446, 2, 1, "", "valueSplitSymbol"]], "sparknlp.base.graph_finisher": [[447, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[447, 2, 1, "", "cleanAnnotations"], [447, 2, 1, "", "inputCol"], [447, 2, 1, "", "name"], [447, 2, 1, "", "outputAsArray"], [447, 2, 1, "", "outputCol"], [447, 3, 1, "", "setCleanAnnotations"], [447, 3, 1, "", "setInputCol"], [447, 3, 1, "", "setOutputAsArray"], [447, 3, 1, "", "setOutputCol"], [447, 3, 1, "", "setParams"]], "sparknlp.base.has_recursive_fit": [[448, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[449, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[450, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[450, 3, 1, "", "getOutputCol"], [450, 2, 1, "", "inputCol"], [450, 3, 1, "", "loadImagesAsBytes"], [450, 2, 1, "", "name"], [450, 2, 1, "", "outputAnnotatorType"], [450, 2, 1, "", "outputCol"], [450, 3, 1, "", "setInputCol"], [450, 3, 1, "", "setOutputCol"], [450, 3, 1, "", "setParams"], [450, 3, 1, "", "setTextCol"], [450, 2, 1, "", "textCol"]], "sparknlp.base.light_pipeline": [[452, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[452, 3, 1, "", "annotate"], [452, 3, 1, "", "fullAnnotate"], [452, 3, 1, "", "fullAnnotateImage"], [452, 3, 1, "", "getIgnoreUnsupported"], [452, 2, 1, "", "parse_embeddings"], [452, 2, 1, "", "pipeline_model"], [452, 3, 1, "", "setIgnoreUnsupported"], [452, 3, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[453, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[453, 2, 1, "", "cleanupMode"], [453, 3, 1, "", "getOutputCols"], [453, 2, 1, "", "idCol"], [453, 2, 1, "", "inputCols"], [453, 2, 1, "", "metadataCol"], [453, 2, 1, "", "name"], [453, 2, 1, "", "outputAnnotatorType"], [453, 2, 1, "", "outputCols"], [453, 3, 1, "", "setCleanupMode"], [453, 3, 1, "", "setIdCol"], [453, 3, 1, "", "setInputCols"], [453, 3, 1, "", "setMetadataCol"], [453, 3, 1, "", "setOutputCols"], [453, 3, 1, "", "setParams"]], "sparknlp.base.prompt_assembler": [[454, 1, 1, "", "PromptAssembler"]], "sparknlp.base.prompt_assembler.PromptAssembler": [[454, 2, 1, "", "addAssistant"], [454, 2, 1, "", "chatTemplate"], [454, 2, 1, "", "inputCol"], [454, 2, 1, "", "name"], [454, 2, 1, "", "outputAnnotatorType"], [454, 2, 1, "", "outputCol"], [454, 3, 1, "", "setAddAssistant"], [454, 3, 1, "", "setChatTemplate"], [454, 3, 1, "", "setInputCol"], [454, 3, 1, "", "setOutputCol"], [454, 3, 1, "", "setParams"]], "sparknlp.base.recursive_pipeline": [[455, 1, 1, "", "RecursivePipeline"], [455, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline.RecursivePipelineModel": [[455, 2, 1, "", "stages"]], "sparknlp.base.table_assembler": [[456, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[456, 2, 1, "", "csvDelimiter"], [456, 2, 1, "", "escapeCsvDelimiter"], [456, 2, 1, "", "inputAnnotatorTypes"], [456, 2, 1, "", "inputFormat"], [456, 2, 1, "", "name"], [456, 2, 1, "", "outputAnnotatorType"], [456, 3, 1, "", "setCsvDelimiter"], [456, 3, 1, "", "setEscapeCsvDelimiter"], [456, 3, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[457, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[457, 2, 1, "", "inputAnnotatorTypes"], [457, 2, 1, "", "name"], [457, 2, 1, "", "outputAnnotatorType"], [457, 2, 1, "", "preservePosition"], [457, 3, 1, "", "setParams"], [457, 3, 1, "", "setPreservePosition"]], "sparknlp.common": [[458, 0, 0, "-", "annotator_approach"], [459, 0, 0, "-", "annotator_model"], [460, 0, 0, "-", "annotator_properties"], [461, 0, 0, "-", "annotator_type"], [462, 0, 0, "-", "coverage_result"], [464, 0, 0, "-", "match_strategy"], [465, 0, 0, "-", "properties"], [466, 0, 0, "-", "read_as"], [467, 0, 0, "-", "recursive_annotator_approach"], [468, 0, 0, "-", "storage"], [469, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[458, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[459, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_model.AnnotatorModel": [[459, 3, 1, "", "setParams"]], "sparknlp.common.annotator_properties": [[460, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[460, 3, 1, "", "getInputCols"], [460, 3, 1, "", "getLazyAnnotator"], [460, 3, 1, "", "getOutputCol"], [460, 2, 1, "", "inputAnnotatorTypes"], [460, 2, 1, "", "inputCols"], [460, 3, 1, "", "inputColsValidation"], [460, 2, 1, "", "lazyAnnotator"], [460, 2, 1, "", "optionalInputAnnotatorTypes"], [460, 2, 1, "", "outputAnnotatorType"], [460, 2, 1, "", "outputCol"], [460, 3, 1, "", "setInputCols"], [460, 3, 1, "", "setLazyAnnotator"], [460, 3, 1, "", "setOutputCol"]], "sparknlp.common.annotator_type": [[461, 1, 1, "", "AnnotatorType"]], "sparknlp.common.annotator_type.AnnotatorType": [[461, 2, 1, "", "AUDIO"], [461, 2, 1, "", "CATEGORY"], [461, 2, 1, "", "CHUNK"], [461, 2, 1, "", "DATE"], [461, 2, 1, "", "DEPENDENCY"], [461, 2, 1, "", "DOCUMENT"], [461, 2, 1, "", "DOC_SIMILARITY_RANKINGS"], [461, 2, 1, "", "DUMMY"], [461, 2, 1, "", "ENTITY"], [461, 2, 1, "", "IMAGE"], [461, 2, 1, "", "LABELED_DEPENDENCY"], [461, 2, 1, "", "LANGUAGE"], [461, 2, 1, "", "NAMED_ENTITY"], [461, 2, 1, "", "NEGEX"], [461, 2, 1, "", "NODE"], [461, 2, 1, "", "POS"], [461, 2, 1, "", "SENTENCE_EMBEDDINGS"], [461, 2, 1, "", "SENTIMENT"], [461, 2, 1, "", "TABLE"], [461, 2, 1, "", "TOKEN"], [461, 2, 1, "", "WORDPIECE"], [461, 2, 1, "", "WORD_EMBEDDINGS"]], "sparknlp.common.coverage_result": [[462, 1, 1, "", "CoverageResult"]], "sparknlp.common.coverage_result.CoverageResult": [[462, 2, 1, "", "covered"], [462, 2, 1, "", "percentage"], [462, 2, 1, "", "total"]], "sparknlp.common.match_strategy": [[464, 1, 1, "", "MatchStrategy"]], "sparknlp.common.match_strategy.MatchStrategy": [[464, 2, 1, "", "MATCH_ALL"], [464, 2, 1, "", "MATCH_COMPLETE"], [464, 2, 1, "", "MATCH_FIRST"]], "sparknlp.common.properties": [[465, 1, 1, "", "HasAudioFeatureProperties"], [465, 1, 1, "", "HasBatchedAnnotate"], [465, 1, 1, "", "HasBatchedAnnotateAudio"], [465, 1, 1, "", "HasBatchedAnnotateImage"], [465, 1, 1, "", "HasCandidateLabelsProperties"], [465, 1, 1, "", "HasCaseSensitiveProperties"], [465, 1, 1, "", "HasClassifierActivationProperties"], [465, 1, 1, "", "HasClsTokenProperties"], [465, 1, 1, "", "HasEmbeddingsProperties"], [465, 1, 1, "", "HasEnableCachingProperties"], [465, 1, 1, "", "HasEngine"], [465, 1, 1, "", "HasGeneratorProperties"], [465, 1, 1, "", "HasImageFeatureProperties"], [465, 1, 1, "", "HasLlamaCppProperties"], [465, 1, 1, "", "HasLongMaxSentenceLengthLimit"], [465, 1, 1, "", "HasMaxSentenceLengthLimit"], [465, 1, 1, "", "HasRescaleFactor"]], "sparknlp.common.properties.HasAudioFeatureProperties": [[465, 2, 1, "", "doNormalize"], [465, 2, 1, "", "featureSize"], [465, 2, 1, "", "paddingSide"], [465, 2, 1, "", "paddingValue"], [465, 2, 1, "", "returnAttentionMask"], [465, 2, 1, "", "samplingRate"], [465, 3, 1, "", "setDoNormalize"], [465, 3, 1, "", "setFeatureSize"], [465, 3, 1, "", "setPaddingSide"], [465, 3, 1, "", "setPaddingValue"], [465, 3, 1, "", "setReturnAttentionMask"], [465, 3, 1, "", "setSamplingRate"]], "sparknlp.common.properties.HasBatchedAnnotate": [[465, 2, 1, "", "batchSize"], [465, 3, 1, "", "getBatchSize"], [465, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateAudio": [[465, 2, 1, "", "batchSize"], [465, 3, 1, "", "getBatchSize"], [465, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateImage": [[465, 2, 1, "", "batchSize"], [465, 3, 1, "", "getBatchSize"], [465, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasCandidateLabelsProperties": [[465, 2, 1, "", "candidateLabels"], [465, 2, 1, "", "contradictionIdParam"], [465, 2, 1, "", "entailmentIdParam"], [465, 3, 1, "", "setCandidateLabels"], [465, 3, 1, "", "setContradictionIdParam"], [465, 3, 1, "", "setEntailmentIdParam"]], "sparknlp.common.properties.HasCaseSensitiveProperties": [[465, 2, 1, "", "caseSensitive"], [465, 3, 1, "", "getCaseSensitive"], [465, 3, 1, "", "setCaseSensitive"]], "sparknlp.common.properties.HasClassifierActivationProperties": [[465, 2, 1, "", "activation"], [465, 3, 1, "", "getActivation"], [465, 3, 1, "", "getMultilabel"], [465, 2, 1, "", "multilabel"], [465, 3, 1, "", "setActivation"], [465, 3, 1, "", "setMultilabel"], [465, 3, 1, "", "setThreshold"], [465, 2, 1, "", "threshold"]], "sparknlp.common.properties.HasClsTokenProperties": [[465, 3, 1, "", "getUseCLSToken"], [465, 3, 1, "", "setUseCLSToken"], [465, 2, 1, "", "useCLSToken"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[465, 2, 1, "", "dimension"], [465, 3, 1, "", "getDimension"], [465, 3, 1, "", "setDimension"]], "sparknlp.common.properties.HasEnableCachingProperties": [[465, 2, 1, "", "enableCaching"], [465, 3, 1, "", "getEnableCaching"], [465, 3, 1, "", "setEnableCaching"]], "sparknlp.common.properties.HasEngine": [[465, 2, 1, "", "engine"], [465, 3, 1, "", "getEngine"]], "sparknlp.common.properties.HasGeneratorProperties": [[465, 2, 1, "", "beamSize"], [465, 2, 1, "", "doSample"], [465, 2, 1, "", "maxOutputLength"], [465, 2, 1, "", "minOutputLength"], [465, 2, 1, "", "nReturnSequences"], [465, 2, 1, "", "noRepeatNgramSize"], [465, 2, 1, "", "repetitionPenalty"], [465, 3, 1, "", "setBeamSize"], [465, 3, 1, "", "setDoSample"], [465, 3, 1, "", "setMaxOutputLength"], [465, 3, 1, "", "setMinOutputLength"], [465, 3, 1, "", "setNReturnSequences"], [465, 3, 1, "", "setNoRepeatNgramSize"], [465, 3, 1, "", "setRepetitionPenalty"], [465, 3, 1, "", "setTask"], [465, 3, 1, "", "setTemperature"], [465, 3, 1, "", "setTopK"], [465, 3, 1, "", "setTopP"], [465, 2, 1, "", "task"], [465, 2, 1, "", "temperature"], [465, 2, 1, "", "topK"], [465, 2, 1, "", "topP"]], "sparknlp.common.properties.HasImageFeatureProperties": [[465, 2, 1, "", "doNormalize"], [465, 2, 1, "", "doResize"], [465, 2, 1, "", "featureExtractorType"], [465, 2, 1, "", "imageMean"], [465, 2, 1, "", "imageStd"], [465, 2, 1, "", "resample"], [465, 3, 1, "", "setDoNormalize"], [465, 3, 1, "", "setDoResize"], [465, 3, 1, "", "setFeatureExtractorType"], [465, 3, 1, "", "setImageMean"], [465, 3, 1, "", "setImageStd"], [465, 3, 1, "", "setResample"], [465, 3, 1, "", "setSize"], [465, 2, 1, "", "size"]], "sparknlp.common.properties.HasLlamaCppProperties": [[465, 2, 1, "", "cachePrompt"], [465, 2, 1, "", "chatTemplate"], [465, 2, 1, "", "defragmentationThreshold"], [465, 2, 1, "", "disableTokenIds"], [465, 2, 1, "", "dynamicTemperatureExponent"], [465, 2, 1, "", "dynamicTemperatureRange"], [465, 2, 1, "", "embedding"], [465, 2, 1, "", "flashAttention"], [465, 2, 1, "", "frequencyPenalty"], [465, 3, 1, "", "getMetadata"], [465, 2, 1, "", "gpuSplitMode"], [465, 2, 1, "", "grammar"], [465, 2, 1, "", "grpAttnN"], [465, 2, 1, "", "grpAttnW"], [465, 2, 1, "", "ignoreEos"], [465, 2, 1, "", "inputPrefix"], [465, 2, 1, "", "inputPrefixBos"], [465, 2, 1, "", "inputSuffix"], [465, 2, 1, "", "lookupCacheDynamicFilePath"], [465, 2, 1, "", "lookupCacheStaticFilePath"], [465, 2, 1, "", "mainGpu"], [465, 2, 1, "", "minKeep"], [465, 2, 1, "", "minP"], [465, 2, 1, "", "miroStat"], [465, 2, 1, "", "miroStatEta"], [465, 2, 1, "", "miroStatTau"], [465, 2, 1, "", "modelAlias"], [465, 2, 1, "", "modelDraft"], [465, 2, 1, "", "nBatch"], [465, 2, 1, "", "nChunks"], [465, 2, 1, "", "nCtx"], [465, 2, 1, "", "nDraft"], [465, 2, 1, "", "nGpuLayers"], [465, 2, 1, "", "nGpuLayersDraft"], [465, 2, 1, "", "nKeep"], [465, 2, 1, "", "nPredict"], [465, 2, 1, "", "nProbs"], [465, 2, 1, "", "nSequences"], [465, 2, 1, "", "nThreads"], [465, 2, 1, "", "nThreadsBatch"], [465, 2, 1, "", "nThreadsBatchDraft"], [465, 2, 1, "", "nThreadsDraft"], [465, 2, 1, "", "nUbatch"], [465, 2, 1, "", "noKvOffload"], [465, 2, 1, "", "numaStrategy"], [465, 2, 1, "", "pSplit"], [465, 2, 1, "", "penalizeNl"], [465, 2, 1, "", "penaltyPrompt"], [465, 2, 1, "", "poolingType"], [465, 2, 1, "", "presencePenalty"], [465, 2, 1, "", "repeatLastN"], [465, 2, 1, "", "repeatPenalty"], [465, 2, 1, "", "ropeFreqBase"], [465, 2, 1, "", "ropeFreqScale"], [465, 2, 1, "", "ropeScalingType"], [465, 2, 1, "", "samplers"], [465, 2, 1, "", "seed"], [465, 3, 1, "", "setCachePrompt"], [465, 3, 1, "", "setChatTemplate"], [465, 3, 1, "", "setDefragmentationThreshold"], [465, 3, 1, "", "setDisableTokenIds"], [465, 3, 1, "", "setDynamicTemperatureExponent"], [465, 3, 1, "", "setDynamicTemperatureRange"], [465, 3, 1, "", "setEmbedding"], [465, 3, 1, "", "setFlashAttention"], [465, 3, 1, "", "setFrequencyPenalty"], [465, 3, 1, "", "setGpuSplitMode"], [465, 3, 1, "", "setGrammar"], [465, 3, 1, "", "setGrpAttnN"], [465, 3, 1, "", "setGrpAttnW"], [465, 3, 1, "", "setIgnoreEos"], [465, 3, 1, "", "setInputPrefix"], [465, 3, 1, "", "setInputPrefixBos"], [465, 3, 1, "", "setInputSuffix"], [465, 3, 1, "", "setLookupCacheDynamicFilePath"], [465, 3, 1, "", "setLookupCacheStaticFilePath"], [465, 3, 1, "", "setLoraAdapters"], [465, 3, 1, "", "setMainGpu"], [465, 3, 1, "", "setMinKeep"], [465, 3, 1, "", "setMinP"], [465, 3, 1, "", "setMiroStat"], [465, 3, 1, "", "setMiroStatEta"], [465, 3, 1, "", "setMiroStatTau"], [465, 3, 1, "", "setModelAlias"], [465, 3, 1, "", "setModelDraft"], [465, 3, 1, "", "setNBatch"], [465, 3, 1, "", "setNChunks"], [465, 3, 1, "", "setNCtx"], [465, 3, 1, "", "setNDraft"], [465, 3, 1, "", "setNGpuLayers"], [465, 3, 1, "", "setNGpuLayersDraft"], [465, 3, 1, "", "setNKeep"], [465, 3, 1, "", "setNParallel"], [465, 3, 1, "", "setNPredict"], [465, 3, 1, "", "setNProbs"], [465, 3, 1, "", "setNSequences"], [465, 3, 1, "", "setNThreads"], [465, 3, 1, "", "setNThreadsBatch"], [465, 3, 1, "", "setNThreadsBatchDraft"], [465, 3, 1, "", "setNThreadsDraft"], [465, 3, 1, "", "setNUbatch"], [465, 3, 1, "", "setNoKvOffload"], [465, 3, 1, "", "setNumaStrategy"], [465, 3, 1, "", "setPSplit"], [465, 3, 1, "", "setPenalizeNl"], [465, 3, 1, "", "setPenaltyPrompt"], [465, 3, 1, "", "setPoolingType"], [465, 3, 1, "", "setPresencePenalty"], [465, 3, 1, "", "setRepeatLastN"], [465, 3, 1, "", "setRepeatPenalty"], [465, 3, 1, "", "setRopeFreqBase"], [465, 3, 1, "", "setRopeFreqScale"], [465, 3, 1, "", "setRopeScalingType"], [465, 3, 1, "", "setSamplers"], [465, 3, 1, "", "setSeed"], [465, 3, 1, "", "setStopStrings"], [465, 3, 1, "", "setSystemPrompt"], [465, 3, 1, "", "setTemperature"], [465, 3, 1, "", "setTensorSplit"], [465, 3, 1, "", "setTfsZ"], [465, 3, 1, "", "setTokenBias"], [465, 3, 1, "", "setTokenIdBias"], [465, 3, 1, "", "setTopK"], [465, 3, 1, "", "setTopP"], [465, 3, 1, "", "setTypicalP"], [465, 3, 1, "", "setUseChatTemplate"], [465, 3, 1, "", "setUseMlock"], [465, 3, 1, "", "setUseMmap"], [465, 3, 1, "", "setYarnAttnFactor"], [465, 3, 1, "", "setYarnBetaFast"], [465, 3, 1, "", "setYarnBetaSlow"], [465, 3, 1, "", "setYarnExtFactor"], [465, 3, 1, "", "setYarnOrigCtx"], [465, 2, 1, "", "stopStrings"], [465, 2, 1, "", "systemPrompt"], [465, 2, 1, "", "temperature"], [465, 2, 1, "", "tensorSplit"], [465, 2, 1, "", "tfsZ"], [465, 2, 1, "", "topK"], [465, 2, 1, "", "topP"], [465, 2, 1, "", "typicalP"], [465, 2, 1, "", "useChatTemplate"], [465, 2, 1, "", "useMlock"], [465, 2, 1, "", "useMmap"], [465, 2, 1, "", "yarnAttnFactor"], [465, 2, 1, "", "yarnBetaFast"], [465, 2, 1, "", "yarnBetaSlow"], [465, 2, 1, "", "yarnExtFactor"], [465, 2, 1, "", "yarnOrigCtx"]], "sparknlp.common.properties.HasLongMaxSentenceLengthLimit": [[465, 2, 1, "", "max_length_limit"]], "sparknlp.common.properties.HasMaxSentenceLengthLimit": [[465, 3, 1, "", "getMaxSentenceLength"], [465, 2, 1, "", "maxSentenceLength"], [465, 2, 1, "", "max_length_limit"], [465, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.common.properties.HasRescaleFactor": [[465, 2, 1, "", "doRescale"], [465, 2, 1, "", "rescaleFactor"], [465, 3, 1, "", "setDoRescale"], [465, 3, 1, "", "setRescaleFactor"]], "sparknlp.common.read_as": [[466, 1, 1, "", "ReadAs"]], "sparknlp.common.read_as.ReadAs": [[466, 2, 1, "", "BINARY"], [466, 2, 1, "", "SPARK"], [466, 2, 1, "", "TEXT"]], "sparknlp.common.recursive_annotator_approach": [[467, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.storage": [[468, 1, 1, "", "HasStorage"], [468, 1, 1, "", "HasStorageModel"], [468, 1, 1, "", "HasStorageOptions"], [468, 1, 1, "", "HasStorageRef"]], "sparknlp.common.storage.HasStorage": [[468, 3, 1, "", "getStoragePath"], [468, 3, 1, "", "setStoragePath"], [468, 2, 1, "", "storagePath"]], "sparknlp.common.storage.HasStorageModel": [[468, 3, 1, "", "loadStorage"], [468, 3, 1, "", "loadStorages"], [468, 3, 1, "", "saveStorage"]], "sparknlp.common.storage.HasStorageOptions": [[468, 2, 1, "", "enableInMemoryStorage"], [468, 3, 1, "", "getEnableInMemoryStorage"], [468, 3, 1, "", "getIncludeStorage"], [468, 2, 1, "", "includeStorage"], [468, 3, 1, "", "setEnableInMemoryStorage"], [468, 3, 1, "", "setIncludeStorage"]], "sparknlp.common.storage.HasStorageRef": [[468, 3, 1, "", "getStorageRef"], [468, 3, 1, "", "setStorageRef"], [468, 2, 1, "", "storageRef"]], "sparknlp.common.utils": [[469, 5, 1, "", "ExternalResource"], [469, 5, 1, "", "RegexRule"]], "sparknlp.functions": [[470, 5, 1, "", "explode_annotations_col"], [470, 5, 1, "", "filter_by_annotations_col"], [470, 5, 1, "", "map_annotations"], [470, 5, 1, "", "map_annotations_array"], [470, 5, 1, "", "map_annotations_col"], [470, 5, 1, "", "map_annotations_cols"], [470, 5, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[472, 0, 0, "-", "annotator_java_ml"], [473, 0, 0, "-", "annotator_transformer"], [474, 0, 0, "-", "extended_java_wrapper"], [476, 0, 0, "-", "params_getters_setters"], [477, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[472, 1, 1, "", "AnnotatorJavaMLReadable"], [472, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[472, 3, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[473, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer.AnnotatorTransformer": [[473, 2, 1, "", "outputAnnotatorType"]], "sparknlp.internal.extended_java_wrapper": [[474, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[474, 3, 1, "", "apply"], [474, 3, 1, "", "getDataFrame"], [474, 2, 1, "", "java_obj"], [474, 3, 1, "", "new_java_array"], [474, 3, 1, "", "new_java_array_integer"], [474, 3, 1, "", "new_java_array_string"], [474, 3, 1, "", "new_java_obj"], [474, 2, 1, "", "sc"], [474, 3, 1, "", "spark_version"]], "sparknlp.internal.params_getters_setters": [[476, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[476, 3, 1, "", "getParamValue"], [476, 2, 1, "", "getter_attrs"], [476, 3, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[477, 1, 1, "", "RecursiveEstimator"], [477, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[477, 3, 1, "", "fit"]], "sparknlp.internal.recursive.RecursiveTransformer": [[477, 3, 1, "", "transform_recursive"]], "sparknlp.logging": [[478, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[478, 1, 1, "", "CometLogger"], [478, 4, 1, "", "comet_ml"]], "sparknlp.logging.comet.CometLogger": [[478, 2, 1, "", "comet_mode"], [478, 3, 1, "", "end"], [478, 2, 1, "", "experiment"], [478, 2, 1, "", "experiment_id"], [478, 2, 1, "", "experiment_kwargs"], [478, 3, 1, "", "log_asset"], [478, 3, 1, "", "log_asset_data"], [478, 3, 1, "", "log_completed_run"], [478, 3, 1, "", "log_metrics"], [478, 3, 1, "", "log_parameters"], [478, 3, 1, "", "log_pipeline_parameters"], [478, 3, 1, "", "log_visualization"], [478, 3, 1, "", "monitor"], [478, 2, 1, "", "project_name"], [478, 2, 1, "", "thread"], [478, 2, 1, "", "workspace"]], "sparknlp.partition": [[481, 0, 0, "-", "partition"], [482, 0, 0, "-", "partition_properties"], [483, 0, 0, "-", "partition_transformer"]], "sparknlp.partition.partition": [[481, 1, 1, "", "Partition"]], "sparknlp.partition.partition.Partition": [[481, 3, 1, "", "partition"], [481, 3, 1, "", "partition_text"], [481, 3, 1, "", "partition_urls"], [481, 2, 1, "", "spark"]], "sparknlp.partition.partition_properties": [[482, 1, 1, "", "HasChunkerProperties"], [482, 1, 1, "", "HasEmailReaderProperties"], [482, 1, 1, "", "HasExcelReaderProperties"], [482, 1, 1, "", "HasHTMLReaderProperties"], [482, 1, 1, "", "HasPowerPointProperties"], [482, 1, 1, "", "HasTextReaderProperties"]], "sparknlp.partition.partition_properties.HasChunkerProperties": [[482, 2, 1, "", "chunkingStrategy"], [482, 2, 1, "", "combineTextUnderNChars"], [482, 2, 1, "", "maxCharacters"], [482, 2, 1, "", "newAfterNChars"], [482, 2, 1, "", "overlap"], [482, 2, 1, "", "overlapAll"], [482, 3, 1, "", "setChunkingStrategy"], [482, 3, 1, "", "setCombineTextUnderNChars"], [482, 3, 1, "", "setMaxCharacters"], [482, 3, 1, "", "setNewAfterNChars"], [482, 3, 1, "", "setOverlap"], [482, 3, 1, "", "setOverlapAll"]], "sparknlp.partition.partition_properties.HasEmailReaderProperties": [[482, 2, 1, "", "addAttachmentContent"], [482, 3, 1, "", "getAddAttachmentContent"], [482, 3, 1, "", "setAddAttachmentContent"]], "sparknlp.partition.partition_properties.HasExcelReaderProperties": [[482, 2, 1, "", "appendCells"], [482, 2, 1, "", "cellSeparator"], [482, 3, 1, "", "getAppendCells"], [482, 3, 1, "", "getCellSeparator"], [482, 3, 1, "", "setAppendCells"], [482, 3, 1, "", "setCellSeparator"]], "sparknlp.partition.partition_properties.HasHTMLReaderProperties": [[482, 3, 1, "", "getTimeout"], [482, 3, 1, "", "setHeaders"], [482, 3, 1, "", "setTimeout"], [482, 2, 1, "", "timeout"]], "sparknlp.partition.partition_properties.HasPowerPointProperties": [[482, 3, 1, "", "getIncludeSlideNotes"], [482, 2, 1, "", "includeSlideNotes"], [482, 3, 1, "", "setIncludeSlideNotes"]], "sparknlp.partition.partition_properties.HasTextReaderProperties": [[482, 3, 1, "", "getGroupBrokenParagraphs"], [482, 3, 1, "", "getMaxLineCount"], [482, 3, 1, "", "getParagraphSplit"], [482, 3, 1, "", "getShortLineWordThreshold"], [482, 3, 1, "", "getThreshold"], [482, 3, 1, "", "getTitleLengthSize"], [482, 2, 1, "", "groupBrokenParagraphs"], [482, 2, 1, "", "maxLineCount"], [482, 2, 1, "", "paragraphSplit"], [482, 3, 1, "", "setGroupBrokenParagraphs"], [482, 3, 1, "", "setMaxLineCount"], [482, 3, 1, "", "setParagraphSplit"], [482, 3, 1, "", "setShortLineWordThreshold"], [482, 3, 1, "", "setThreshold"], [482, 3, 1, "", "setTitleLengthSize"], [482, 2, 1, "", "shortLineWordThreshold"], [482, 2, 1, "", "threshold"], [482, 2, 1, "", "titleLengthSize"]], "sparknlp.partition.partition_transformer": [[483, 1, 1, "", "PartitionTransformer"]], "sparknlp.partition.partition_transformer.PartitionTransformer": [[483, 2, 1, "", "contentPath"], [483, 2, 1, "", "contentType"], [483, 3, 1, "", "getContentPath"], [483, 3, 1, "", "getContentType"], [483, 3, 1, "", "getIncludePageBreaks"], [483, 3, 1, "", "getInferTableStructure"], [483, 3, 1, "", "getStoreContent"], [483, 3, 1, "", "getTitleFontSize"], [483, 2, 1, "", "includePageBreaks"], [483, 2, 1, "", "inferTableStructure"], [483, 2, 1, "", "inputAnnotatorTypes"], [483, 2, 1, "", "name"], [483, 2, 1, "", "outputAnnotatorType"], [483, 3, 1, "", "setContentPath"], [483, 3, 1, "", "setContentType"], [483, 3, 1, "", "setIncludePageBreaks"], [483, 3, 1, "", "setInferTableStructure"], [483, 3, 1, "", "setStoreContent"], [483, 3, 1, "", "setTitleFontSize"], [483, 2, 1, "", "storeContent"], [483, 2, 1, "", "titleFontSize"]], "sparknlp.pretrained": [[485, 0, 0, "-", "pretrained_pipeline"], [486, 0, 0, "-", "resource_downloader"], [487, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[485, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[485, 3, 1, "", "annotate"], [485, 3, 1, "", "from_disk"], [485, 3, 1, "", "fullAnnotate"], [485, 3, 1, "", "fullAnnotateImage"], [485, 2, 1, "", "light_model"], [485, 3, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[486, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[486, 3, 1, "", "clearCache"], [486, 3, 1, "", "downloadModel"], [486, 3, 1, "", "downloadModelDirectly"], [486, 3, 1, "", "downloadPipeline"], [486, 3, 1, "", "showAvailableAnnotators"], [486, 3, 1, "", "showPublicModels"], [486, 3, 1, "", "showPublicPipelines"], [486, 3, 1, "", "showUnCategorizedResources"]], "sparknlp.pretrained.utils": [[487, 5, 1, "", "printProgress"]], "sparknlp.reader": [[488, 0, 0, "-", "enums"], [490, 0, 0, "-", "pdf_to_text"], [491, 0, 0, "-", "sparknlp_reader"]], "sparknlp.reader.enums": [[488, 1, 1, "", "TextStripperType"]], "sparknlp.reader.enums.TextStripperType": [[488, 2, 1, "", "PDF_LAYOUT_TEXT_STRIPPER"], [488, 2, 1, "", "PDF_TEXT_STRIPPER"]], "sparknlp.reader.pdf_to_text": [[490, 1, 1, "", "PdfToText"]], "sparknlp.reader.pdf_to_text.PdfToText": [[490, 2, 1, "", "onlyPageNum"], [490, 2, 1, "", "pageNumCol"], [490, 2, 1, "", "partitionNum"], [490, 3, 1, "", "setInputCol"], [490, 3, 1, "", "setOnlyPageNum"], [490, 3, 1, "", "setOutputCol"], [490, 3, 1, "", "setPageNumCol"], [490, 3, 1, "", "setPartitionNum"], [490, 3, 1, "", "setSort"], [490, 3, 1, "", "setSplitPage"], [490, 3, 1, "", "setStoreSplittedPdf"], [490, 3, 1, "", "setTextStripper"], [490, 2, 1, "", "sort"], [490, 2, 1, "", "splitPage"], [490, 2, 1, "", "storeSplittedPdf"], [490, 2, 1, "", "textStripper"]], "sparknlp.reader.sparknlp_reader": [[491, 1, 1, "", "SparkNLPReader"]], "sparknlp.reader.sparknlp_reader.SparkNLPReader": [[491, 3, 1, "", "doc"], [491, 3, 1, "", "email"], [491, 3, 1, "", "html"], [491, 3, 1, "", "pdf"], [491, 3, 1, "", "ppt"], [491, 2, 1, "", "spark"], [491, 3, 1, "", "txt"], [491, 3, 1, "", "xls"], [491, 3, 1, "", "xml"]], "sparknlp.training": [[492, 0, 0, "-", "conll"], [493, 0, 0, "-", "conllu"], [495, 0, 0, "-", "pos"], [496, 0, 0, "-", "pub_tator"], [497, 0, 0, "-", "spacy_to_annotation"], [498, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[492, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[492, 3, 1, "", "readDataset"]], "sparknlp.training.conllu": [[493, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[493, 3, 1, "", "readDataset"]], "sparknlp.training.pos": [[495, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[495, 3, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[496, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[496, 3, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[497, 1, 1, "", "SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation.SpacyToAnnotation": [[497, 3, 1, "", "readJsonFile"]], "sparknlp.training.tfgraphs": [[498, 4, 1, "", "tf_graph"], [498, 4, 1, "", "tf_graph_1x"]], "sparknlp.upload_to_hub": [[499, 1, 1, "", "PushToHub"]], "sparknlp.upload_to_hub.PushToHub": [[499, 3, 1, "", "check_for_required_info"], [499, 3, 1, "", "create_docs"], [499, 2, 1, "", "list_of_tasks"], [499, 3, 1, "", "push_to_hub"], [499, 3, 1, "", "unzip_directory"], [499, 3, 1, "", "zip_directory"]], "sparknlp.util": [[500, 1, 1, "", "CoNLLGenerator"], [500, 1, 1, "", "EmbeddingsDataFrameUtils"], [500, 5, 1, "", "get_config_path"]], "sparknlp.util.CoNLLGenerator": [[500, 3, 1, "", "exportConllFiles"]], "sparknlp.util.EmbeddingsDataFrameUtils": [[500, 2, 1, "", "emptyImageRow"], [500, 2, 1, "", "imageSchema"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:data", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "data", "Python data"], "5": ["py", "function", "Python function"]}, "titleterms": {"sparknlp": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "packag": [1, 5, 6, 12, 59, 62, 64, 82, 89, 119, 122, 124, 127, 134, 142, 145, 148, 150, 153, 156, 175, 177, 184, 190, 192, 208, 221, 227, 229, 233, 237, 241, 371, 471], "subpackag": [1, 5, 371, 471], "submodul": [1, 5, 6, 12, 59, 62, 64, 82, 89, 119, 122, 124, 127, 134, 142, 145, 148, 150, 153, 156, 175, 177, 184, 190, 192, 208, 221, 227, 229, 233, 237, 241, 256, 286, 310, 311, 318, 332, 351, 369, 371, 372, 374, 379, 384, 392, 397, 398, 400, 403, 412, 426, 428, 435, 440, 451, 463, 471, 475, 479, 480, 484, 489, 494], "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501], "content": [1, 5, 6, 12, 59, 62, 64, 82, 89, 119, 122, 124, 127, 134, 142, 145, 148, 150, 153, 156, 175, 177, 184, 190, 192, 208, 221, 227, 229, 233, 237, 241, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 505, 506, 507], "annotation_audio": [3, 253], "annotation_imag": [4, 254], "audio": [6, 7, 8, 9, 255, 256, 257, 258], "hubert_for_ctc": [7, 255], "wav2vec2_for_ctc": [8, 257], "whisper_for_ctc": [9, 258], "chunk2_doc": [10, 259], "chunker": [11, 260], "classifier_dl": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307], "albert_for_multiple_choic": [13, 261], "albert_for_question_answ": [14, 262], "albert_for_sequence_classif": [15, 263], "albert_for_token_classif": [16, 264], "albert_for_zero_shot_classif": [17, 265], "bart_for_zero_shot_classif": [18, 266], "bert_for_multiple_choic": [19, 267], "bert_for_question_answ": [20, 268], "bert_for_sequence_classif": [21, 269], "bert_for_token_classif": [22, 270], "bert_for_zero_shot_classif": [23, 271], "camembert_for_question_answ": [24, 272], "camembert_for_sequence_classif": [25, 273], "camembert_for_token_classif": [26, 274], "camembert_for_zero_shot_classif": [27, 275], "exampl": [27, 32, 275, 280], "deberta_for_question_answ": [29, 277], "deberta_for_sequence_classif": [30, 278], "deberta_for_token_classif": [31, 279], "deberta_for_zero_shot_classif": [32, 280], "return": [32, 70, 71, 77, 280, 319, 320, 326], "distil_bert_for_question_answ": [33, 281], "distil_bert_for_sequence_classif": [34, 282], "distil_bert_for_token_classif": [35, 283], "distil_bert_for_zero_shot_classif": [36, 284], "distilbert_for_multiple_choic": [37, 285], "longformer_for_question_answ": [38, 287], "longformer_for_sequence_classif": [39, 288], "longformer_for_token_classif": [40, 289], "mpnet_for_question_answ": [41, 290], "mpnet_for_sequence_classif": [42, 291], "mpnet_for_token_classif": [43, 292], "multi_classifier_dl": [44, 293], "roberta_for_multiple_choic": [45, 294], "roberta_for_question_answ": [46, 295], "roberta_for_sequence_classif": [47, 296], "roberta_for_token_classif": [48, 297], "roberta_for_zero_shot_classif": [49, 298], "sentiment_dl": [50, 299], "tapas_for_question_answ": [51, 300], "xlm_roberta_for_multiple_choic": [52, 301], "xlm_roberta_for_question_answ": [53, 302], "xlm_roberta_for_sequence_classif": [54, 303], "xlm_roberta_for_token_classif": [55, 304], "xlm_roberta_for_zero_shot_classif": [56, 305], "xlnet_for_sequence_classif": [57, 306], "xlnet_for_token_classif": [58, 307], "cleaner": [59, 60, 61, 308, 309, 310], "extractor": [61, 309], "coref": [62, 63, 311, 312], "spanbert_coref": [63, 312], "cv": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "blip_for_question_answ": [65, 313], "clip_for_zero_shot_classif": [66, 314], "convnext_for_image_classif": [67, 315], "florence2_transform": [68, 316], "gemma3_for_multimod": [69, 317], "internvl_for_multimod": [70, 319], "refer": [70, 71, 77, 319, 320, 326, 501], "janus_for_multimod": [71, 320], "llava_for_multimod": [72, 321], "mllama_for_multimod": [73, 322], "paligemma_for_multimod": [74, 323], "phi3_vision_for_multimod": [75, 324], "qwen2vl_transform": [76, 325], "smolvlm_transform": [77, 326], "swin_for_image_classif": [78, 327], "vision_encoder_decoder_for_image_capt": [79, 328], "vit_for_image_classif": [80, 329], "date2_chunk": [81, 330], "depend": [82, 83, 84, 331, 332, 333], "dependency_pars": [83, 331], "typed_dependency_pars": [84, 333], "document_character_text_splitt": [85, 334], "document_norm": [86, 335], "document_token_splitt": [87, 336], "document_token_splitter_test": [88, 337], "embed": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367], "albert_embed": [90, 338], "auto_gguf_embed": [91, 339], "bert_embed": [92, 340], "bert_sentence_embed": [93, 341], "bge_embed": [94, 342], "camembert_embed": [95, 343], "chunk_embed": [96, 344], "deberta_embed": [97, 345], "distil_bert_embed": [98, 346], "doc2vec": [99, 347], "e5_embed": [100, 348], "e5v_embed": [101, 349], "elmo_embed": [102, 350], "instructor_embed": [103, 352], "longformer_embed": [104, 353], "mpnet_embed": [105, 354], "mxbai_embed": [106, 355], "nomic_embed": [107, 356], "roberta_embed": [108, 357], "roberta_sentence_embed": [109, 358], "sentence_embed": [110, 359], "snowflake_embed": [111, 360], "uae_embed": [112, 361], "universal_sentence_encod": [113, 362], "word2vec": [114, 363], "word_embed": [115, 364], "xlm_roberta_embed": [116, 365], "xlm_roberta_sentence_embed": [117, 366], "xlnet_embed": [118, 367], "er": [119, 120, 368, 369], "entity_rul": [120, 368], "graph_extract": [121, 370], "keyword_extract": [122, 123, 372, 373], "yake_keyword_extract": [123, 373], "ld_dl": [124, 125, 374, 375], "language_detector_dl": [125, 375], "lemmat": [126, 376], "matcher": [127, 128, 129, 130, 131, 132, 377, 378, 379, 380, 381, 382], "big_text_match": [128, 377], "date_match": [129, 378], "multi_date_match": [130, 380], "regex_match": [131, 381], "text_match": [132, 382], "n_gram_gener": [133, 383], "ner": [134, 135, 136, 137, 138, 139, 140, 384, 385, 386, 387, 388, 389, 390], "ner_approach": [135, 385], "ner_convert": [136, 386], "ner_crf": [137, 387], "ner_dl": [138, 388], "ner_overwrit": [139, 389], "zero_shot_ner_model": [140, 390], "normal": [141, 391], "openai": [142, 143, 144, 392, 393, 394], "openai_complet": [143, 393], "openai_embed": [144, 394], "param": [145, 146, 147, 395, 396, 397], "classifier_encod": [146, 395], "evaluation_dl_param": [147, 396], "po": [148, 149, 244, 398, 399, 495, 512], "perceptron": [149, 399], "sentenc": [150, 151, 152, 400, 401, 402, 507], "sentence_detector": [151, 401], "sentence_detector_dl": [152, 402], "sentiment": [153, 154, 155, 403, 404, 405], "sentiment_detector": [154, 404], "vivekn_senti": [155, 405], "seq2seq": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "auto_gguf_model": [157, 406], "auto_gguf_vision_model": [158, 407], "bart_transform": [159, 408], "cohere_transform": [160, 409], "cpm_transform": [161, 410], "gpt2_transform": [162, 411], "llama2_transform": [163, 413], "llama3_transform": [164, 414], "m2m100_transform": [165, 415], "marian_transform": [166, 416], "mistral_transform": [167, 417], "nllb_transform": [168, 418], "olmo_transform": [169, 419], "phi2_transform": [170, 420], "phi3_transform": [171, 421], "qwen_transform": [172, 422], "starcoder_transform": [173, 423], "t5_transform": [174, 424], "similar": [175, 176, 425, 426], "document_similarity_rank": [176, 425], "spell_check": [177, 178, 179, 180, 427, 428, 429, 430], "context_spell_check": [178, 427], "norvig_sweet": [179, 429], "symmetric_delet": [180, 430], "stemmer": [181, 431], "stop_words_clean": [182, 432], "tf_ner_dl_graph_build": [183, 433], "token": [184, 185, 186, 187, 188, 434, 435, 436, 437, 438, 507], "chunk_token": [185, 434], "recursive_token": [186, 436], "regex_token": [187, 437], "token2_chunk": [189, 439], "w": [190, 191, 440, 441], "word_segment": [191, 441], "base": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], "audio_assembl": [193, 442], "doc2_chunk": [194, 443], "document_assembl": [195, 444], "embeddings_finish": [196, 445], "finish": [197, 446, 507], "graph_finish": [198, 447], "has_recursive_fit": [199, 448], "has_recursive_transform": [200, 449], "image_assembl": [201, 450], "light_pipelin": [202, 452], "multi_document_assembl": [203, 453], "prompt_assembl": [204, 454], "recursive_pipelin": [205, 455], "table_assembl": [206, 456], "token_assembl": [207, 457], "common": [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 506], "annotator_approach": [209, 458], "annotator_model": [210, 459], "annotator_properti": [211, 460], "annotator_typ": [212, 461], "coverage_result": [213, 462], "match_strategi": [214, 464], "properti": [215, 465], "read_a": [216, 466], "recursive_annotator_approach": [217, 467], "storag": [218, 468], "util": [219, 236, 249, 469, 487, 500], "function": [220, 469, 470, 471, 487, 500, 506, 508], "intern": [221, 222, 223, 224, 225, 226, 472, 473, 474, 475, 476, 477], "annotator_java_ml": [222, 472], "annotator_transform": [223, 473], "extended_java_wrapp": [224, 474], "params_getters_sett": [225, 476], "recurs": [226, 477], "log": [227, 228, 478, 479, 502, 504], "comet": [228, 478, 502], "partit": [229, 230, 231, 232, 480, 481, 482, 483], "partition_properti": [231, 482], "partition_transform": [232, 483], "pretrain": [233, 234, 235, 236, 484, 485, 486, 487, 506, 510, 511], "pretrained_pipelin": [234, 485], "resource_download": [235, 486], "reader": [237, 238, 239, 240, 488, 489, 490, 491], "enum": [238, 488], "pdf_to_text": [239, 490], "sparknlp_read": [240, 491], "train": [241, 242, 243, 244, 245, 246, 247, 492, 493, 494, 495, 496, 497, 498, 512], "conll": [242, 492, 512], "conllu": [243, 493, 512], "pub_tat": [245, 496], "spacy_to_annot": [246, 497], "tfgraph": [247, 498], "upload_to_hub": [248, 499], "get": [250, 507], "start": 250, "spark": [250, 251, 502, 507, 511], "nlp": [250, 251, 502, 511], "cheat": 250, "sheet": 250, "requir": 250, "instal": [250, 502], "us": [250, 502, 511], "conda": 250, "virtualenv": 250, "session": 250, "from": 250, "python": 250, "document": 251, "class": [252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 472, 473, 474, 476, 477, 478, 481, 482, 483, 485, 486, 488, 490, 491, 492, 493, 495, 496, 497, 499, 500], "attribut": [471, 478], "api": 501, "A": 502, "meta": 502, "machin": [502, 503], "learn": [502, 503], "platform": [502, 503], "pipelin": [502, 507, 510, 511], "paramet": 502, "evalu": 502, "metric": 502, "visual": 502, "run": 502, "an": 502, "offlin": 502, "experi": 502, "mlflow": 503, "lifecycl": 503, "third": 504, "parti": 504, "project": 504, "approach": 506, "model": 506, "note": 506, "avail": [506, 511], "set": 507, "up": 507, "your": 507, "own": 507, "type": 507, "necessari": 507, "import": 507, "construct": 507, "documentassembl": 507, "data": 507, "detect": 507, "out": 507, "put": 507, "all": 507, "togeth": 507, "ml": [507, 511], "helper": 508, "user": 509, "guid": 509, "light": 510, "convert": 510, "pipelinemodel": 510, "download": 511, "As": 511, "lightpipelin": 511, "load": 512, "dataset": 512, "spell": 512, "checker": 512, "pubtat": 512}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"sparknlp": [[0, "sparknlp"], [471, "module-sparknlp"]], "sparknlp package": [[1, "sparknlp-package"]], "Subpackages": [[1, "subpackages"], [5, "subpackages"], [371, "subpackages"], [471, "subpackages"]], "Submodules": [[1, "submodules"], [5, "submodules"], [6, "submodules"], [12, "submodules"], [59, "submodules"], [62, "submodules"], [64, "submodules"], [82, "submodules"], [89, "submodules"], [119, "submodules"], [122, "submodules"], [124, "submodules"], [127, "submodules"], [134, "submodules"], [142, "submodules"], [145, "submodules"], [148, "submodules"], [150, "submodules"], [153, "submodules"], [156, "submodules"], [175, "submodules"], [177, "submodules"], [184, "submodules"], [190, "submodules"], [192, "submodules"], [208, "submodules"], [221, "submodules"], [227, "submodules"], [229, "submodules"], [233, "submodules"], [237, "submodules"], [241, "submodules"], [256, "submodules"], [286, "submodules"], [310, "submodules"], [311, "submodules"], [318, "submodules"], [332, "submodules"], [351, "submodules"], [369, "submodules"], [371, "submodules"], [372, "submodules"], [374, "submodules"], [379, "submodules"], [384, "submodules"], [392, "submodules"], [397, "submodules"], [398, "submodules"], [400, "submodules"], [403, "submodules"], [412, "submodules"], [426, "submodules"], [428, "submodules"], [435, "submodules"], [440, "submodules"], [451, "submodules"], [463, "submodules"], [471, "submodules"], [475, "submodules"], [479, "submodules"], [480, "submodules"], [484, "submodules"], [489, "submodules"], [494, "submodules"]], "Module contents": [[1, "module-sparknlp"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [12, "module-sparknlp.annotator.classifier_dl"], [59, "module-sparknlp.annotator.cleaners"], [62, "module-sparknlp.annotator.coref"], [64, "module-sparknlp.annotator.cv"], [82, "module-sparknlp.annotator.dependency"], [89, "module-sparknlp.annotator.embeddings"], [119, "module-sparknlp.annotator.er"], [122, "module-sparknlp.annotator.keyword_extraction"], [124, "module-sparknlp.annotator.ld_dl"], [127, "module-sparknlp.annotator.matcher"], [134, "module-sparknlp.annotator.ner"], [142, "module-sparknlp.annotator.openai"], [145, "module-sparknlp.annotator.param"], [148, "module-sparknlp.annotator.pos"], [150, "module-sparknlp.annotator.sentence"], [153, "module-sparknlp.annotator.sentiment"], [156, "module-sparknlp.annotator.seq2seq"], [175, "module-sparknlp.annotator.similarity"], [177, "module-sparknlp.annotator.spell_check"], [184, "module-sparknlp.annotator.token"], [190, "module-sparknlp.annotator.ws"], [192, "module-sparknlp.base"], [208, "module-sparknlp.common"], [221, "module-sparknlp.internal"], [227, "module-sparknlp.logging"], [229, "module-sparknlp.partition"], [233, "module-sparknlp.pretrained"], [237, "module-sparknlp.reader"], [241, "module-sparknlp.training"]], "sparknlp.annotation module": [[2, "module-sparknlp.annotation"]], "sparknlp.annotation_audio module": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image module": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator package": [[5, "sparknlp-annotator-package"]], "sparknlp.annotator.audio package": [[6, "sparknlp-annotator-audio-package"]], "sparknlp.annotator.audio.hubert_for_ctc module": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio.wav2vec2_for_ctc module": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc module": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc module": [[10, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker module": [[11, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl package": [[12, "sparknlp-annotator-classifier-dl-package"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering module": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification module": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering module": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification module": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering module": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification module": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "Examples": [[27, "examples"], [32, "examples"], [275, "examples"], [280, "examples"]], "sparknlp.annotator.classifier_dl.classifier_dl module": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering module": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification module": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Returns": [[32, "returns"], [32, "id1"], [70, "returns"], [70, "id1"], [71, "returns"], [71, "id1"], [77, "returns"], [77, "id1"], [280, "returns"], [280, "id1"], [319, "returns"], [319, "id1"], [320, "returns"], [320, "id1"], [326, "returns"], [326, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering module": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification module": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl module": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering module": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification module": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl module": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering module": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners package": [[59, "sparknlp-annotator-cleaners-package"]], "sparknlp.annotator.cleaners.cleaner module": [[60, "module-sparknlp.annotator.cleaners.cleaner"]], "sparknlp.annotator.cleaners.extractor module": [[61, "module-sparknlp.annotator.cleaners.extractor"]], "sparknlp.annotator.coref package": [[62, "sparknlp-annotator-coref-package"]], "sparknlp.annotator.coref.spanbert_coref module": [[63, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv package": [[64, "sparknlp-annotator-cv-package"]], "sparknlp.annotator.cv.blip_for_question_answering module": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification module": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification module": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv.florence2_transformer module": [[68, "module-sparknlp.annotator.cv.florence2_transformer"]], "sparknlp.annotator.cv.gemma3_for_multimodal module": [[69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "sparknlp.annotator.cv.internvl_for_multimodal module": [[70, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "References": [[70, "references"], [71, "references"], [77, "references"], [319, "references"], [320, "references"], [326, "references"]], "sparknlp.annotator.cv.janus_for_multimodal module": [[71, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "sparknlp.annotator.cv.llava_for_multimodal module": [[72, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal module": [[73, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "sparknlp.annotator.cv.paligemma_for_multimodal module": [[74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal module": [[75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "sparknlp.annotator.cv.qwen2vl_transformer module": [[76, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "sparknlp.annotator.cv.smolvlm_transformer module": [[77, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "sparknlp.annotator.cv.swin_for_image_classification module": [[78, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module": [[79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification module": [[80, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk module": [[81, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency package": [[82, "sparknlp-annotator-dependency-package"]], "sparknlp.annotator.dependency.dependency_parser module": [[83, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency.typed_dependency_parser module": [[84, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter module": [[85, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer module": [[86, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter module": [[87, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test module": [[88, "sparknlp-annotator-document-token-splitter-test-module"]], "sparknlp.annotator.embeddings package": [[89, "sparknlp-annotator-embeddings-package"]], "sparknlp.annotator.embeddings.albert_embeddings module": [[90, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings module": [[91, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings module": [[92, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings module": [[93, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings module": [[94, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings module": [[95, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings module": [[96, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings module": [[97, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings module": [[98, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec module": [[99, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings module": [[100, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.e5v_embeddings module": [[101, "module-sparknlp.annotator.embeddings.e5v_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings module": [[102, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings module": [[103, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings module": [[104, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings module": [[105, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings module": [[106, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings module": [[107, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings module": [[108, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings module": [[109, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings module": [[110, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings module": [[111, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings module": [[112, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder module": [[113, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec module": [[114, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings module": [[115, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings module": [[116, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module": [[117, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings module": [[118, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er package": [[119, "sparknlp-annotator-er-package"]], "sparknlp.annotator.er.entity_ruler module": [[120, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.graph_extraction module": [[121, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator.keyword_extraction package": [[122, "sparknlp-annotator-keyword-extraction-package"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module": [[123, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl package": [[124, "sparknlp-annotator-ld-dl-package"]], "sparknlp.annotator.ld_dl.language_detector_dl module": [[125, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer module": [[126, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher package": [[127, "sparknlp-annotator-matcher-package"]], "sparknlp.annotator.matcher.big_text_matcher module": [[128, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher module": [[129, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher.multi_date_matcher module": [[130, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher module": [[131, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher module": [[132, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator module": [[133, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner package": [[134, "sparknlp-annotator-ner-package"]], "sparknlp.annotator.ner.ner_approach module": [[135, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter module": [[136, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf module": [[137, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl module": [[138, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter module": [[139, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model module": [[140, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer module": [[141, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai package": [[142, "sparknlp-annotator-openai-package"]], "sparknlp.annotator.openai.openai_completion module": [[143, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings module": [[144, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param package": [[145, "sparknlp-annotator-param-package"]], "sparknlp.annotator.param.classifier_encoder module": [[146, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params module": [[147, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.pos package": [[148, "sparknlp-annotator-pos-package"]], "sparknlp.annotator.pos.perceptron module": [[149, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence package": [[150, "sparknlp-annotator-sentence-package"]], "sparknlp.annotator.sentence.sentence_detector module": [[151, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl module": [[152, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment package": [[153, "sparknlp-annotator-sentiment-package"]], "sparknlp.annotator.sentiment.sentiment_detector module": [[154, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment module": [[155, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq package": [[156, "sparknlp-annotator-seq2seq-package"]], "sparknlp.annotator.seq2seq.auto_gguf_model module": [[157, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model module": [[158, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "sparknlp.annotator.seq2seq.bart_transformer module": [[159, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cohere_transformer module": [[160, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer module": [[161, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer module": [[162, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer module": [[163, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer module": [[164, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer module": [[165, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer module": [[166, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer module": [[167, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer module": [[168, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.olmo_transformer module": [[169, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer module": [[170, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer module": [[171, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer module": [[172, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer module": [[173, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer module": [[174, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity package": [[175, "sparknlp-annotator-similarity-package"]], "sparknlp.annotator.similarity.document_similarity_ranker module": [[176, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.spell_check package": [[177, "sparknlp-annotator-spell-check-package"]], "sparknlp.annotator.spell_check.context_spell_checker module": [[178, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check.norvig_sweeting module": [[179, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete module": [[180, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer module": [[181, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner module": [[182, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder module": [[183, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token package": [[184, "sparknlp-annotator-token-package"]], "sparknlp.annotator.token.chunk_tokenizer module": [[185, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token.recursive_tokenizer module": [[186, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer module": [[187, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer module": [[188, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk module": [[189, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws package": [[190, "sparknlp-annotator-ws-package"]], "sparknlp.annotator.ws.word_segmenter module": [[191, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base package": [[192, "sparknlp-base-package"]], "sparknlp.base.audio_assembler module": [[193, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk module": [[194, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler module": [[195, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher module": [[196, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher module": [[197, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher module": [[198, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit module": [[199, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform module": [[200, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler module": [[201, "module-sparknlp.base.image_assembler"]], "sparknlp.base.light_pipeline module": [[202, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler module": [[203, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler module": [[204, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline module": [[205, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler module": [[206, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler module": [[207, "module-sparknlp.base.token_assembler"]], "sparknlp.common package": [[208, "sparknlp-common-package"]], "sparknlp.common.annotator_approach module": [[209, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model module": [[210, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties module": [[211, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type module": [[212, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result module": [[213, "module-sparknlp.common.coverage_result"]], "sparknlp.common.match_strategy module": [[214, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties module": [[215, "module-sparknlp.common.properties"]], "sparknlp.common.read_as module": [[216, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach module": [[217, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage module": [[218, "module-sparknlp.common.storage"]], "sparknlp.common.utils module": [[219, "module-sparknlp.common.utils"]], "sparknlp.functions module": [[220, "module-sparknlp.functions"]], "sparknlp.internal package": [[221, "sparknlp-internal-package"]], "sparknlp.internal.annotator_java_ml module": [[222, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer module": [[223, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper module": [[224, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal.params_getters_setters module": [[225, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive module": [[226, "module-sparknlp.internal.recursive"]], "sparknlp.logging package": [[227, "sparknlp-logging-package"]], "sparknlp.logging.comet module": [[228, "module-sparknlp.logging.comet"]], "sparknlp.partition package": [[229, "sparknlp-partition-package"]], "sparknlp.partition.partition module": [[230, "module-sparknlp.partition.partition"]], "sparknlp.partition.partition_properties module": [[231, "module-sparknlp.partition.partition_properties"]], "sparknlp.partition.partition_transformer module": [[232, "module-sparknlp.partition.partition_transformer"]], "sparknlp.pretrained package": [[233, "sparknlp-pretrained-package"]], "sparknlp.pretrained.pretrained_pipeline module": [[234, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader module": [[235, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils module": [[236, "module-sparknlp.pretrained.utils"]], "sparknlp.reader package": [[237, "sparknlp-reader-package"]], "sparknlp.reader.enums module": [[238, "module-sparknlp.reader.enums"]], "sparknlp.reader.pdf_to_text module": [[239, "module-sparknlp.reader.pdf_to_text"]], "sparknlp.reader.sparknlp_reader module": [[240, "module-sparknlp.reader.sparknlp_reader"]], "sparknlp.training package": [[241, "sparknlp-training-package"]], "sparknlp.training.conll module": [[242, "module-sparknlp.training.conll"]], "sparknlp.training.conllu module": [[243, "module-sparknlp.training.conllu"]], "sparknlp.training.pos module": [[244, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator module": [[245, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation module": [[246, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs module": [[247, "sparknlp-training-tfgraphs-module"]], "sparknlp.upload_to_hub module": [[248, "module-sparknlp.upload_to_hub"]], "sparknlp.util module": [[249, "module-sparknlp.util"]], "Getting Started": [[250, "getting-started"]], "Spark NLP Cheat Sheet": [[250, "spark-nlp-cheat-sheet"]], "Requirements": [[250, "requirements"]], "Installation": [[250, "installation"], [502, "installation"]], "Using Conda": [[250, "using-conda"]], "Using Virtualenv": [[250, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[250, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[251, "spark-nlp-documentation"]], "Content": [[251, "content"]], "sparknlp.annotation": [[252, "module-sparknlp.annotation"]], "Module Contents": [[252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [370, "module-contents"], [373, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [399, "module-contents"], [401, "module-contents"], [402, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [427, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"]], "Classes": [[252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [370, "classes"], [373, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [399, "classes"], [401, "classes"], [402, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [427, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [441, "classes"], [442, "classes"], [443, "classes"], [444, "classes"], [445, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [449, "classes"], [450, "classes"], [452, "classes"], [453, "classes"], [454, "classes"], [455, "classes"], [456, "classes"], [457, "classes"], [458, "classes"], [459, "classes"], [460, "classes"], [461, "classes"], [462, "classes"], [464, "classes"], [465, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [472, "classes"], [473, "classes"], [474, "classes"], [476, "classes"], [477, "classes"], [478, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [485, "classes"], [486, "classes"], [488, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [495, "classes"], [496, "classes"], [497, "classes"], [499, "classes"], [500, "classes"]], "sparknlp.annotation_audio": [[253, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[254, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[255, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[256, "module-sparknlp.annotator.audio"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[257, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[258, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[259, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[260, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[261, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[262, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[263, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[264, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[265, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[266, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[267, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[268, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[269, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[270, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[271, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[272, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[273, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[274, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[275, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[276, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[277, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[278, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[279, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[280, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[281, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[282, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[283, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[284, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[285, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl": [[286, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[287, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[288, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[289, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[290, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[291, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[292, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[293, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[294, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[295, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[296, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[297, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[298, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[299, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[300, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[301, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[302, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[303, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[304, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[305, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[306, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[307, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners.cleaner": [[308, "module-sparknlp.annotator.cleaners.cleaner"]], "sparknlp.annotator.cleaners.extractor": [[309, "module-sparknlp.annotator.cleaners.extractor"]], "sparknlp.annotator.cleaners": [[310, "module-sparknlp.annotator.cleaners"]], "sparknlp.annotator.coref": [[311, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[312, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.blip_for_question_answering": [[313, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[314, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[315, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv.florence2_transformer": [[316, "module-sparknlp.annotator.cv.florence2_transformer"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[317, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "sparknlp.annotator.cv": [[318, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[319, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "sparknlp.annotator.cv.janus_for_multimodal": [[320, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "sparknlp.annotator.cv.llava_for_multimodal": [[321, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[322, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[323, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[324, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[325, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "sparknlp.annotator.cv.smolvlm_transformer": [[326, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "sparknlp.annotator.cv.swin_for_image_classification": [[327, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[328, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[329, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[330, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[331, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[332, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[333, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[334, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[335, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[336, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[337, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[338, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[339, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[340, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[341, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings": [[342, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[343, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[344, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[345, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[346, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[347, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[348, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.e5v_embeddings": [[349, "module-sparknlp.annotator.embeddings.e5v_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[350, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[351, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[352, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[353, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[354, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[355, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[356, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[357, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[358, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[359, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[360, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings": [[361, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[362, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[363, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[364, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[365, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[366, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[367, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[368, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[369, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[370, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[371, "module-sparknlp.annotator"]], "Package Contents": [[371, "package-contents"], [471, "package-contents"]], "sparknlp.annotator.keyword_extraction": [[372, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[373, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[374, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[375, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[376, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[377, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[378, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[379, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[380, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[381, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[382, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[383, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[384, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[385, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[386, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[387, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[388, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[389, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[390, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[391, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[392, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[393, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[394, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[395, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[396, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[397, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[398, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[399, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[400, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[401, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[402, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[403, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[404, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[405, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[406, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[407, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "sparknlp.annotator.seq2seq.bart_transformer": [[408, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[409, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[410, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[411, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[412, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[413, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[414, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[415, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer": [[416, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[417, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[418, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[419, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[420, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[421, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[422, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[423, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[424, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[425, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[426, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[427, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[428, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[429, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[430, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[431, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[432, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[433, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[434, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[435, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[436, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[437, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[438, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[439, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[440, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[441, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[442, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[443, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[444, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[445, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[446, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[447, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[448, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[449, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[450, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[451, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[452, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[453, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler": [[454, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline": [[455, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[456, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[457, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[458, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[459, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[460, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[461, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[462, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[463, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[464, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[465, "module-sparknlp.common.properties"]], "sparknlp.common.read_as": [[466, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[467, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[468, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[469, "module-sparknlp.common.utils"]], "Functions": [[469, "functions"], [470, "functions"], [471, "functions"], [487, "functions"], [500, "functions"]], "sparknlp.functions": [[470, "module-sparknlp.functions"]], "Attributes": [[471, "attributes"], [478, "attributes"]], "sparknlp.internal.annotator_java_ml": [[472, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[473, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[474, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[475, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[476, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[477, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[478, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[479, "module-sparknlp.logging"]], "sparknlp.partition": [[480, "module-sparknlp.partition"]], "sparknlp.partition.partition": [[481, "module-sparknlp.partition.partition"]], "sparknlp.partition.partition_properties": [[482, "module-sparknlp.partition.partition_properties"]], "sparknlp.partition.partition_transformer": [[483, "module-sparknlp.partition.partition_transformer"]], "sparknlp.pretrained": [[484, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[485, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[486, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[487, "module-sparknlp.pretrained.utils"]], "sparknlp.reader.enums": [[488, "module-sparknlp.reader.enums"]], "sparknlp.reader": [[489, "module-sparknlp.reader"]], "sparknlp.reader.pdf_to_text": [[490, "module-sparknlp.reader.pdf_to_text"]], "sparknlp.reader.sparknlp_reader": [[491, "module-sparknlp.reader.sparknlp_reader"]], "sparknlp.training.conll": [[492, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[493, "module-sparknlp.training.conllu"]], "sparknlp.training": [[494, "module-sparknlp.training"]], "sparknlp.training.pos": [[495, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[496, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[497, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[498, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[499, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[500, "module-sparknlp.util"]], "API Reference": [[501, "api-reference"]], "Modules": [[501, "modules"]], "Comet - A meta machine learning platform": [[502, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[502, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[502, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[502, "logging-evaluation-metrics"]], "Logging Visualizations": [[502, "logging-visualizations"]], "Running An Offline Experiment": [[502, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[503, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[504, "third-party-projects"]], "Logging": [[504, "logging"]], "Annotation": [[505, "annotation"]], "Annotators": [[506, "annotators"]], "Annotator Approaches": [[506, "annotator-approaches"]], "Annotator Models": [[506, "annotator-models"]], "Note": [[506, "note"]], "Pretrained Models": [[506, "pretrained-models"]], "Common Functions": [[506, "common-functions"]], "Available Annotators": [[506, "available-annotators"]], "Setting up your own pipeline": [[507, "setting-up-your-own-pipeline"]], "Annotator types": [[507, "annotator-types"]], "Necessary imports": [[507, "necessary-imports"]], "Constructing the Pipeline": [[507, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[507, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[507, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[507, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[507, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[508, "helper-functions"]], "User Guide": [[509, "user-guide"]], "Light Pipelines": [[510, "light-pipelines"]], "Converting PipelineModels": [[510, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[510, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[511, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[511, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[511, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[511, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[511, "available-pipelines"]], "Loading datasets for training": [[512, "loading-datasets-for-training"]], "POS Dataset": [[512, "pos-dataset"]], "CoNLL Dataset": [[512, "conll-dataset"]], "CoNLLU Dataset": [[512, "conllu-dataset"]], "Spell Checkers Dataset": [[512, "spell-checkers-dataset"]], "PubTator Dataset": [[512, "pubtator-dataset"]]}, "indexentries": {"module": [[1, "module-sparknlp"], [2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.hubert_for_ctc"], [8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [9, "module-sparknlp.annotator.audio.whisper_for_ctc"], [10, "module-sparknlp.annotator.chunk2_doc"], [11, "module-sparknlp.annotator.chunker"], [12, "module-sparknlp.annotator.classifier_dl"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [28, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [59, "module-sparknlp.annotator.cleaners"], [60, "module-sparknlp.annotator.cleaners.cleaner"], [61, "module-sparknlp.annotator.cleaners.extractor"], [62, "module-sparknlp.annotator.coref"], [63, "module-sparknlp.annotator.coref.spanbert_coref"], [64, "module-sparknlp.annotator.cv"], [65, "module-sparknlp.annotator.cv.blip_for_question_answering"], [66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [67, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [68, "module-sparknlp.annotator.cv.florence2_transformer"], [69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [70, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [71, "module-sparknlp.annotator.cv.janus_for_multimodal"], [72, "module-sparknlp.annotator.cv.llava_for_multimodal"], [73, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [76, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [77, "module-sparknlp.annotator.cv.smolvlm_transformer"], [78, "module-sparknlp.annotator.cv.swin_for_image_classification"], [79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [80, "module-sparknlp.annotator.cv.vit_for_image_classification"], [81, "module-sparknlp.annotator.date2_chunk"], [82, "module-sparknlp.annotator.dependency"], [83, "module-sparknlp.annotator.dependency.dependency_parser"], [84, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [85, "module-sparknlp.annotator.document_character_text_splitter"], [86, "module-sparknlp.annotator.document_normalizer"], [87, "module-sparknlp.annotator.document_token_splitter"], [89, "module-sparknlp.annotator.embeddings"], [90, "module-sparknlp.annotator.embeddings.albert_embeddings"], [91, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [92, "module-sparknlp.annotator.embeddings.bert_embeddings"], [93, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [94, "module-sparknlp.annotator.embeddings.bge_embeddings"], [95, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [96, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [97, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [98, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [99, "module-sparknlp.annotator.embeddings.doc2vec"], [100, "module-sparknlp.annotator.embeddings.e5_embeddings"], [101, "module-sparknlp.annotator.embeddings.e5v_embeddings"], [102, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [103, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [104, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [105, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [106, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [107, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [108, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [109, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [110, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [111, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [112, "module-sparknlp.annotator.embeddings.uae_embeddings"], [113, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [114, "module-sparknlp.annotator.embeddings.word2vec"], [115, "module-sparknlp.annotator.embeddings.word_embeddings"], [116, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [117, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [118, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [119, "module-sparknlp.annotator.er"], [120, "module-sparknlp.annotator.er.entity_ruler"], [121, "module-sparknlp.annotator.graph_extraction"], [122, "module-sparknlp.annotator.keyword_extraction"], [123, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [124, "module-sparknlp.annotator.ld_dl"], [125, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [126, "module-sparknlp.annotator.lemmatizer"], [127, "module-sparknlp.annotator.matcher"], [128, "module-sparknlp.annotator.matcher.big_text_matcher"], [129, "module-sparknlp.annotator.matcher.date_matcher"], [130, "module-sparknlp.annotator.matcher.multi_date_matcher"], [131, "module-sparknlp.annotator.matcher.regex_matcher"], [132, "module-sparknlp.annotator.matcher.text_matcher"], [133, "module-sparknlp.annotator.n_gram_generator"], [134, "module-sparknlp.annotator.ner"], [135, "module-sparknlp.annotator.ner.ner_approach"], [136, "module-sparknlp.annotator.ner.ner_converter"], [137, "module-sparknlp.annotator.ner.ner_crf"], [138, "module-sparknlp.annotator.ner.ner_dl"], [139, "module-sparknlp.annotator.ner.ner_overwriter"], [140, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [141, "module-sparknlp.annotator.normalizer"], [142, "module-sparknlp.annotator.openai"], [143, "module-sparknlp.annotator.openai.openai_completion"], [144, "module-sparknlp.annotator.openai.openai_embeddings"], [145, "module-sparknlp.annotator.param"], [146, "module-sparknlp.annotator.param.classifier_encoder"], [147, "module-sparknlp.annotator.param.evaluation_dl_params"], [148, "module-sparknlp.annotator.pos"], [149, "module-sparknlp.annotator.pos.perceptron"], [150, "module-sparknlp.annotator.sentence"], [151, "module-sparknlp.annotator.sentence.sentence_detector"], [152, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [153, "module-sparknlp.annotator.sentiment"], [154, "module-sparknlp.annotator.sentiment.sentiment_detector"], [155, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [156, "module-sparknlp.annotator.seq2seq"], [157, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [158, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [159, "module-sparknlp.annotator.seq2seq.bart_transformer"], [160, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [161, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [162, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [163, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [164, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [165, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [166, "module-sparknlp.annotator.seq2seq.marian_transformer"], [167, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [168, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [169, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [170, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [171, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [172, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [173, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [174, "module-sparknlp.annotator.seq2seq.t5_transformer"], [175, "module-sparknlp.annotator.similarity"], [176, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [177, "module-sparknlp.annotator.spell_check"], [178, "module-sparknlp.annotator.spell_check.context_spell_checker"], [179, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [180, "module-sparknlp.annotator.spell_check.symmetric_delete"], [181, "module-sparknlp.annotator.stemmer"], [182, "module-sparknlp.annotator.stop_words_cleaner"], [183, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [184, "module-sparknlp.annotator.token"], [185, "module-sparknlp.annotator.token.chunk_tokenizer"], [186, "module-sparknlp.annotator.token.recursive_tokenizer"], [187, "module-sparknlp.annotator.token.regex_tokenizer"], [188, "module-sparknlp.annotator.token.tokenizer"], [189, "module-sparknlp.annotator.token2_chunk"], [190, "module-sparknlp.annotator.ws"], [191, "module-sparknlp.annotator.ws.word_segmenter"], [192, "module-sparknlp.base"], [193, "module-sparknlp.base.audio_assembler"], [194, "module-sparknlp.base.doc2_chunk"], [195, "module-sparknlp.base.document_assembler"], [196, "module-sparknlp.base.embeddings_finisher"], [197, "module-sparknlp.base.finisher"], [198, "module-sparknlp.base.graph_finisher"], [199, "module-sparknlp.base.has_recursive_fit"], [200, "module-sparknlp.base.has_recursive_transform"], [201, "module-sparknlp.base.image_assembler"], [202, "module-sparknlp.base.light_pipeline"], [203, "module-sparknlp.base.multi_document_assembler"], [204, "module-sparknlp.base.prompt_assembler"], [205, "module-sparknlp.base.recursive_pipeline"], [206, "module-sparknlp.base.table_assembler"], [207, "module-sparknlp.base.token_assembler"], [208, "module-sparknlp.common"], [209, "module-sparknlp.common.annotator_approach"], [210, "module-sparknlp.common.annotator_model"], [211, "module-sparknlp.common.annotator_properties"], [212, "module-sparknlp.common.annotator_type"], [213, "module-sparknlp.common.coverage_result"], [214, "module-sparknlp.common.match_strategy"], [215, "module-sparknlp.common.properties"], [216, "module-sparknlp.common.read_as"], [217, "module-sparknlp.common.recursive_annotator_approach"], [218, "module-sparknlp.common.storage"], [219, "module-sparknlp.common.utils"], [220, "module-sparknlp.functions"], [221, "module-sparknlp.internal"], [222, "module-sparknlp.internal.annotator_java_ml"], [223, "module-sparknlp.internal.annotator_transformer"], [224, "module-sparknlp.internal.extended_java_wrapper"], [225, "module-sparknlp.internal.params_getters_setters"], [226, "module-sparknlp.internal.recursive"], [227, "module-sparknlp.logging"], [228, "module-sparknlp.logging.comet"], [229, "module-sparknlp.partition"], [230, "module-sparknlp.partition.partition"], [231, "module-sparknlp.partition.partition_properties"], [232, "module-sparknlp.partition.partition_transformer"], [233, "module-sparknlp.pretrained"], [234, "module-sparknlp.pretrained.pretrained_pipeline"], [235, "module-sparknlp.pretrained.resource_downloader"], [236, "module-sparknlp.pretrained.utils"], [237, "module-sparknlp.reader"], [238, "module-sparknlp.reader.enums"], [239, "module-sparknlp.reader.pdf_to_text"], [240, "module-sparknlp.reader.sparknlp_reader"], [241, "module-sparknlp.training"], [242, "module-sparknlp.training.conll"], [243, "module-sparknlp.training.conllu"], [244, "module-sparknlp.training.pos"], [245, "module-sparknlp.training.pub_tator"], [246, "module-sparknlp.training.spacy_to_annotation"], [248, "module-sparknlp.upload_to_hub"], [249, "module-sparknlp.util"], [252, "module-sparknlp.annotation"], [253, "module-sparknlp.annotation_audio"], [254, "module-sparknlp.annotation_image"], [255, "module-sparknlp.annotator.audio.hubert_for_ctc"], [256, "module-sparknlp.annotator.audio"], [257, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [258, "module-sparknlp.annotator.audio.whisper_for_ctc"], [259, "module-sparknlp.annotator.chunk2_doc"], [260, "module-sparknlp.annotator.chunker"], [261, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [262, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [263, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [264, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [265, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [266, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [267, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [268, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [269, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [270, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [271, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [272, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [273, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [274, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [275, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [276, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [277, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [278, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [279, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [280, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [281, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [282, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [283, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [284, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [285, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [286, "module-sparknlp.annotator.classifier_dl"], [287, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [288, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [289, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [290, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [291, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [292, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [293, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [294, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [295, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [296, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [297, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [298, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [299, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [300, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [301, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [302, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [303, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [304, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [305, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [306, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [307, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [308, "module-sparknlp.annotator.cleaners.cleaner"], [309, "module-sparknlp.annotator.cleaners.extractor"], [310, "module-sparknlp.annotator.cleaners"], [311, "module-sparknlp.annotator.coref"], [312, "module-sparknlp.annotator.coref.spanbert_coref"], [313, "module-sparknlp.annotator.cv.blip_for_question_answering"], [314, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [315, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [316, "module-sparknlp.annotator.cv.florence2_transformer"], [317, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [318, "module-sparknlp.annotator.cv"], [319, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [320, "module-sparknlp.annotator.cv.janus_for_multimodal"], [321, "module-sparknlp.annotator.cv.llava_for_multimodal"], [322, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [323, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [324, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [325, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [326, "module-sparknlp.annotator.cv.smolvlm_transformer"], [327, "module-sparknlp.annotator.cv.swin_for_image_classification"], [328, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [329, "module-sparknlp.annotator.cv.vit_for_image_classification"], [330, "module-sparknlp.annotator.date2_chunk"], [331, "module-sparknlp.annotator.dependency.dependency_parser"], [332, "module-sparknlp.annotator.dependency"], [333, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [334, "module-sparknlp.annotator.document_character_text_splitter"], [335, "module-sparknlp.annotator.document_normalizer"], [336, "module-sparknlp.annotator.document_token_splitter"], [337, "module-sparknlp.annotator.document_token_splitter_test"], [338, "module-sparknlp.annotator.embeddings.albert_embeddings"], [339, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [340, "module-sparknlp.annotator.embeddings.bert_embeddings"], [341, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [342, "module-sparknlp.annotator.embeddings.bge_embeddings"], [343, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [344, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [345, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [346, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [347, "module-sparknlp.annotator.embeddings.doc2vec"], [348, "module-sparknlp.annotator.embeddings.e5_embeddings"], [349, "module-sparknlp.annotator.embeddings.e5v_embeddings"], [350, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [351, "module-sparknlp.annotator.embeddings"], [352, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [353, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [354, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [355, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [356, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [357, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [358, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [359, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [360, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [361, "module-sparknlp.annotator.embeddings.uae_embeddings"], [362, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [363, "module-sparknlp.annotator.embeddings.word2vec"], [364, "module-sparknlp.annotator.embeddings.word_embeddings"], [365, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [366, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [367, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [368, "module-sparknlp.annotator.er.entity_ruler"], [369, "module-sparknlp.annotator.er"], [370, "module-sparknlp.annotator.graph_extraction"], [371, "module-sparknlp.annotator"], [372, "module-sparknlp.annotator.keyword_extraction"], [373, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [374, "module-sparknlp.annotator.ld_dl"], [375, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [376, "module-sparknlp.annotator.lemmatizer"], [377, "module-sparknlp.annotator.matcher.big_text_matcher"], [378, "module-sparknlp.annotator.matcher.date_matcher"], [379, "module-sparknlp.annotator.matcher"], [380, "module-sparknlp.annotator.matcher.multi_date_matcher"], [381, "module-sparknlp.annotator.matcher.regex_matcher"], [382, "module-sparknlp.annotator.matcher.text_matcher"], [383, "module-sparknlp.annotator.n_gram_generator"], [384, "module-sparknlp.annotator.ner"], [385, "module-sparknlp.annotator.ner.ner_approach"], [386, "module-sparknlp.annotator.ner.ner_converter"], [387, "module-sparknlp.annotator.ner.ner_crf"], [388, "module-sparknlp.annotator.ner.ner_dl"], [389, "module-sparknlp.annotator.ner.ner_overwriter"], [390, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [391, "module-sparknlp.annotator.normalizer"], [392, "module-sparknlp.annotator.openai"], [393, "module-sparknlp.annotator.openai.openai_completion"], [394, "module-sparknlp.annotator.openai.openai_embeddings"], [395, "module-sparknlp.annotator.param.classifier_encoder"], [396, "module-sparknlp.annotator.param.evaluation_dl_params"], [397, "module-sparknlp.annotator.param"], [398, "module-sparknlp.annotator.pos"], [399, "module-sparknlp.annotator.pos.perceptron"], [400, "module-sparknlp.annotator.sentence"], [401, "module-sparknlp.annotator.sentence.sentence_detector"], [402, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [403, "module-sparknlp.annotator.sentiment"], [404, "module-sparknlp.annotator.sentiment.sentiment_detector"], [405, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [406, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [407, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [408, "module-sparknlp.annotator.seq2seq.bart_transformer"], [409, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [410, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [411, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [412, "module-sparknlp.annotator.seq2seq"], [413, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [414, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [415, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [416, "module-sparknlp.annotator.seq2seq.marian_transformer"], [417, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [418, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [419, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [420, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [421, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [422, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [423, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [424, "module-sparknlp.annotator.seq2seq.t5_transformer"], [425, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [426, "module-sparknlp.annotator.similarity"], [427, "module-sparknlp.annotator.spell_check.context_spell_checker"], [428, "module-sparknlp.annotator.spell_check"], [429, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [430, "module-sparknlp.annotator.spell_check.symmetric_delete"], [431, "module-sparknlp.annotator.stemmer"], [432, "module-sparknlp.annotator.stop_words_cleaner"], [433, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [434, "module-sparknlp.annotator.token.chunk_tokenizer"], [435, "module-sparknlp.annotator.token"], [436, "module-sparknlp.annotator.token.recursive_tokenizer"], [437, "module-sparknlp.annotator.token.regex_tokenizer"], [438, "module-sparknlp.annotator.token.tokenizer"], [439, "module-sparknlp.annotator.token2_chunk"], [440, "module-sparknlp.annotator.ws"], [441, "module-sparknlp.annotator.ws.word_segmenter"], [442, "module-sparknlp.base.audio_assembler"], [443, "module-sparknlp.base.doc2_chunk"], [444, "module-sparknlp.base.document_assembler"], [445, "module-sparknlp.base.embeddings_finisher"], [446, "module-sparknlp.base.finisher"], [447, "module-sparknlp.base.graph_finisher"], [448, "module-sparknlp.base.has_recursive_fit"], [449, "module-sparknlp.base.has_recursive_transform"], [450, "module-sparknlp.base.image_assembler"], [451, "module-sparknlp.base"], [452, "module-sparknlp.base.light_pipeline"], [453, "module-sparknlp.base.multi_document_assembler"], [454, "module-sparknlp.base.prompt_assembler"], [455, "module-sparknlp.base.recursive_pipeline"], [456, "module-sparknlp.base.table_assembler"], [457, "module-sparknlp.base.token_assembler"], [458, "module-sparknlp.common.annotator_approach"], [459, "module-sparknlp.common.annotator_model"], [460, "module-sparknlp.common.annotator_properties"], [461, "module-sparknlp.common.annotator_type"], [462, "module-sparknlp.common.coverage_result"], [463, "module-sparknlp.common"], [464, "module-sparknlp.common.match_strategy"], [465, "module-sparknlp.common.properties"], [466, "module-sparknlp.common.read_as"], [467, "module-sparknlp.common.recursive_annotator_approach"], [468, "module-sparknlp.common.storage"], [469, "module-sparknlp.common.utils"], [470, "module-sparknlp.functions"], [471, "module-sparknlp"], [472, "module-sparknlp.internal.annotator_java_ml"], [473, "module-sparknlp.internal.annotator_transformer"], [474, "module-sparknlp.internal.extended_java_wrapper"], [475, "module-sparknlp.internal"], [476, "module-sparknlp.internal.params_getters_setters"], [477, "module-sparknlp.internal.recursive"], [478, "module-sparknlp.logging.comet"], [479, "module-sparknlp.logging"], [480, "module-sparknlp.partition"], [481, "module-sparknlp.partition.partition"], [482, "module-sparknlp.partition.partition_properties"], [483, "module-sparknlp.partition.partition_transformer"], [484, "module-sparknlp.pretrained"], [485, "module-sparknlp.pretrained.pretrained_pipeline"], [486, "module-sparknlp.pretrained.resource_downloader"], [487, "module-sparknlp.pretrained.utils"], [488, "module-sparknlp.reader.enums"], [489, "module-sparknlp.reader"], [490, "module-sparknlp.reader.pdf_to_text"], [491, "module-sparknlp.reader.sparknlp_reader"], [492, "module-sparknlp.training.conll"], [493, "module-sparknlp.training.conllu"], [494, "module-sparknlp.training"], [495, "module-sparknlp.training.pos"], [496, "module-sparknlp.training.pub_tator"], [497, "module-sparknlp.training.spacy_to_annotation"], [498, "module-sparknlp.training.tfgraphs"], [499, "module-sparknlp.upload_to_hub"], [500, "module-sparknlp.util"]], "read() (in module sparknlp)": [[1, "sparknlp.read"], [471, "sparknlp.read"]], "sparknlp": [[1, "module-sparknlp"], [471, "module-sparknlp"]], "start() (in module sparknlp)": [[1, "sparknlp.start"], [471, "sparknlp.start"]], "version() (in module sparknlp)": [[1, "sparknlp.version"], [471, "sparknlp.version"]], "annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"], [252, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"], [252, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"], [252, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"], [252, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"], [252, "sparknlp.annotation.Annotation.fromRow"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"], [252, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"], [252, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"], [253, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"], [253, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"], [253, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"], [254, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"], [254, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"], [254, "module-sparknlp.annotation_image"]], "sparknlp.annotator": [[5, "module-sparknlp.annotator"], [371, "module-sparknlp.annotator"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"], [256, "module-sparknlp.annotator.audio"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"], [255, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "configprotobytes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.configProtoBytes"], [255, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.configProtoBytes"]], "inputannotatortypes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.inputAnnotatorTypes"], [255, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"], [255, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "name (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.name"], [255, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.name"]], "outputannotatortype (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.outputAnnotatorType"], [255, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.outputAnnotatorType"]], "pretrained() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"], [255, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"], [255, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"], [255, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"], [257, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "configprotobytes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.configProtoBytes"], [257, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.configProtoBytes"]], "inputannotatortypes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.inputAnnotatorTypes"], [257, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"], [257, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "name (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.name"], [257, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.name"]], "outputannotatortype (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.outputAnnotatorType"], [257, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.outputAnnotatorType"]], "pretrained() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"], [257, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"], [257, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [257, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "configprotobytes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.configProtoBytes"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.configProtoBytes"]], "getismultilingual() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "inputannotatortypes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.inputAnnotatorTypes"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.inputAnnotatorTypes"]], "ismultilingual (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.isMultilingual"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.isMultilingual"]], "language (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.language"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.language"]], "loadsavedmodel() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "name (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.name"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.name"]], "outputannotatortype (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.outputAnnotatorType"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.outputAnnotatorType"]], "pretrained() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"], [258, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"], [258, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc"], [259, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "inputannotatortypes (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.inputAnnotatorTypes"], [259, "sparknlp.annotator.chunk2_doc.Chunk2Doc.inputAnnotatorTypes"]], "name (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.name"], [259, "sparknlp.annotator.chunk2_doc.Chunk2Doc.name"]], "outputannotatortype (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.outputAnnotatorType"], [259, "sparknlp.annotator.chunk2_doc.Chunk2Doc.outputAnnotatorType"]], "setparams() (chunk2doc method)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.setParams"], [259, "sparknlp.annotator.chunk2_doc.Chunk2Doc.setParams"]], "sparknlp.annotator.chunk2_doc": [[10, "module-sparknlp.annotator.chunk2_doc"], [259, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[11, "sparknlp.annotator.chunker.Chunker"], [260, "sparknlp.annotator.chunker.Chunker"]], "inputannotatortypes (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.inputAnnotatorTypes"], [260, "sparknlp.annotator.chunker.Chunker.inputAnnotatorTypes"]], "name (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.name"], [260, "sparknlp.annotator.chunker.Chunker.name"]], "outputannotatortype (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.outputAnnotatorType"], [260, "sparknlp.annotator.chunker.Chunker.outputAnnotatorType"]], "regexparsers (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.regexParsers"], [260, "sparknlp.annotator.chunker.Chunker.regexParsers"]], "setregexparsers() (chunker method)": [[11, "sparknlp.annotator.chunker.Chunker.setRegexParsers"], [260, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[11, "module-sparknlp.annotator.chunker"], [260, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl": [[12, "module-sparknlp.annotator.classifier_dl"], [286, "module-sparknlp.annotator.classifier_dl"]], "albertformultiplechoice (class in sparknlp.annotator.classifier_dl.albert_for_multiple_choice)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice"], [261, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice"]], "choicesdelimiter (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.choicesDelimiter"], [261, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.inputAnnotatorTypes"], [261, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.loadSavedModel"], [261, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.loadSavedModel"]], "name (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.name"], [261, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.name"]], "outputannotatortype (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.outputAnnotatorType"], [261, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.outputAnnotatorType"]], "pretrained() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.pretrained"], [261, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (albertformultiplechoice method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.setChoicesDelimiter"], [261, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [261, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"], [262, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "coalescesentences (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.coalesceSentences"], [262, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.coalesceSentences"]], "configprotobytes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.configProtoBytes"], [262, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.inputAnnotatorTypes"], [262, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"], [262, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "name (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.name"], [262, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.name"]], "outputannotatortype (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.outputAnnotatorType"], [262, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"], [262, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"], [262, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [262, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"], [263, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "coalescesentences (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.coalesceSentences"], [263, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.coalesceSentences"]], "configprotobytes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.configProtoBytes"], [263, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.configProtoBytes"]], "getclasses() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"], [263, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "inputannotatortypes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.inputAnnotatorTypes"], [263, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"], [263, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "name (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.name"], [263, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.name"]], "outputannotatortype (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.outputAnnotatorType"], [263, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.outputAnnotatorType"]], "pretrained() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"], [263, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"], [263, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"], [263, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [263, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"], [264, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "configprotobytes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.configProtoBytes"], [264, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.configProtoBytes"]], "getclasses() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"], [264, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "inputannotatortypes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.inputAnnotatorTypes"], [264, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"], [264, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "name (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.name"], [264, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.name"]], "outputannotatortype (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.outputAnnotatorType"], [264, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.outputAnnotatorType"]], "pretrained() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"], [264, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"], [264, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [264, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "albertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"], [265, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"]], "coalescesentences (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.coalesceSentences"], [265, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.coalesceSentences"]], "configprotobytes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.configProtoBytes"], [265, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.configProtoBytes"]], "getclasses() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"], [265, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"]], "inputannotatortypes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.inputAnnotatorTypes"], [265, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"], [265, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"]], "name (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.name"], [265, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.name"]], "outputannotatortype (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.outputAnnotatorType"], [265, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"], [265, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"]], "setcoalescesentences() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"], [265, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"], [265, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [265, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "coalescesentences (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.coalesceSentences"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.coalesceSentences"]], "configprotobytes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.configProtoBytes"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.configProtoBytes"]], "getclasses() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "inputannotatortypes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.inputAnnotatorTypes"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "maxsentencelength (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.maxSentenceLength"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.maxSentenceLength"]], "name (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.name"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.name"]], "outputannotatortype (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.outputAnnotatorType"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"], [266, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [266, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertformultiplechoice (class in sparknlp.annotator.classifier_dl.bert_for_multiple_choice)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"], [267, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"]], "choicesdelimiter (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.choicesDelimiter"], [267, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.inputAnnotatorTypes"], [267, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"], [267, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"]], "name (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.name"], [267, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.name"]], "outputannotatortype (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.outputAnnotatorType"], [267, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.outputAnnotatorType"]], "pretrained() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"], [267, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (bertformultiplechoice method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"], [267, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [267, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"], [268, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "coalescesentences (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.coalesceSentences"], [268, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.coalesceSentences"]], "configprotobytes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.configProtoBytes"], [268, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.inputAnnotatorTypes"], [268, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"], [268, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "name (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.name"], [268, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.name"]], "outputannotatortype (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.outputAnnotatorType"], [268, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"], [268, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"], [268, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [268, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"], [269, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "coalescesentences (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.coalesceSentences"], [269, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.coalesceSentences"]], "configprotobytes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.configProtoBytes"], [269, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.configProtoBytes"]], "getclasses() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"], [269, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "inputannotatortypes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.inputAnnotatorTypes"], [269, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"], [269, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "name (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.name"], [269, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.name"]], "outputannotatortype (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.outputAnnotatorType"], [269, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.outputAnnotatorType"]], "pretrained() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"], [269, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"], [269, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"], [269, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [269, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"], [270, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "configprotobytes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.configProtoBytes"], [270, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.configProtoBytes"]], "getclasses() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"], [270, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "inputannotatortypes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.inputAnnotatorTypes"], [270, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"], [270, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "name (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.name"], [270, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.name"]], "outputannotatortype (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.outputAnnotatorType"], [270, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.outputAnnotatorType"]], "pretrained() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"], [270, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"], [270, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [270, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"], [271, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "coalescesentences (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.coalesceSentences"], [271, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.coalesceSentences"]], "configprotobytes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.configProtoBytes"], [271, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.configProtoBytes"]], "getclasses() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"], [271, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "inputannotatortypes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.inputAnnotatorTypes"], [271, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"], [271, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "name (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.name"], [271, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.name"]], "outputannotatortype (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.outputAnnotatorType"], [271, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"], [271, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"], [271, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"], [271, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [271, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"], [272, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "coalescesentences (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.coalesceSentences"], [272, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.configProtoBytes"], [272, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.inputAnnotatorTypes"], [272, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"], [272, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "name (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.name"], [272, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.name"]], "outputannotatortype (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.outputAnnotatorType"], [272, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"], [272, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"], [272, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [272, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"], [273, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "coalescesentences (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.coalesceSentences"], [273, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.coalesceSentences"]], "configprotobytes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.configProtoBytes"], [273, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.configProtoBytes"]], "getclasses() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"], [273, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "inputannotatortypes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.inputAnnotatorTypes"], [273, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"], [273, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "name (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.name"], [273, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.name"]], "outputannotatortype (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.outputAnnotatorType"], [273, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"], [273, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"], [273, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"], [273, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [273, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"], [274, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "configprotobytes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.configProtoBytes"], [274, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.configProtoBytes"]], "getclasses() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"], [274, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "inputannotatortypes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.inputAnnotatorTypes"], [274, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"], [274, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "name (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.name"], [274, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.name"]], "outputannotatortype (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.outputAnnotatorType"], [274, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.outputAnnotatorType"]], "pretrained() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"], [274, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"], [274, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [274, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "camembertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"], [275, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"]], "coalescesentences (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.coalesceSentences"], [275, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.configProtoBytes"], [275, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.configProtoBytes"]], "getclasses() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"], [275, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"]], "inputannotatortypes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.inputAnnotatorTypes"], [275, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"], [275, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"]], "name (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.name"], [275, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.name"]], "outputannotatortype (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.outputAnnotatorType"], [275, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"], [275, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"], [275, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"], [275, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [275, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "classes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.classes"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.classes"]], "configprotobytes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.configProtoBytes"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.configProtoBytes"]], "dropout (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.dropout"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.dropout"]], "inputannotatortypes (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.inputAnnotatorTypes"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.inputAnnotatorTypes"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.inputAnnotatorTypes"]], "name (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.name"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.name"]], "outputannotatortype (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.outputAnnotatorType"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.outputAnnotatorType"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.outputAnnotatorType"]], "pretrained() (classifierdlmodel static method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"], [276, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [276, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"], [277, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "coalescesentences (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.coalesceSentences"], [277, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.configProtoBytes"], [277, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.inputAnnotatorTypes"], [277, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"], [277, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "name (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.name"], [277, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.name"]], "outputannotatortype (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.outputAnnotatorType"], [277, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"], [277, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"], [277, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [277, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"], [278, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "coalescesentences (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.coalesceSentences"], [278, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.configProtoBytes"], [278, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.configProtoBytes"]], "getclasses() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"], [278, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "inputannotatortypes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.inputAnnotatorTypes"], [278, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"], [278, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "name (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.name"], [278, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.name"]], "outputannotatortype (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.outputAnnotatorType"], [278, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"], [278, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"], [278, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"], [278, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [278, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"], [279, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "configprotobytes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.configProtoBytes"], [279, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.configProtoBytes"]], "getclasses() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"], [279, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "inputannotatortypes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.inputAnnotatorTypes"], [279, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"], [279, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "name (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.name"], [279, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.name"]], "outputannotatortype (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.outputAnnotatorType"], [279, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"], [279, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"], [279, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [279, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"], [280, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "coalescesentences (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.coalesceSentences"], [280, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.configProtoBytes"], [280, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"], [280, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.inputAnnotatorTypes"], [280, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"], [280, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "name (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.name"], [280, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.name"]], "outputannotatortype (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.outputAnnotatorType"], [280, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"], [280, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"], [280, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"], [280, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [280, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "coalescesentences (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.coalesceSentences"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.configProtoBytes"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.inputAnnotatorTypes"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "name (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.name"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.name"]], "outputannotatortype (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.outputAnnotatorType"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"], [281, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [281, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "coalescesentences (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.coalesceSentences"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.configProtoBytes"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.inputAnnotatorTypes"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "name (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.name"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.name"]], "outputannotatortype (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.outputAnnotatorType"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"], [282, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [282, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "configprotobytes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.configProtoBytes"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.configProtoBytes"]], "getclasses() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "inputannotatortypes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.inputAnnotatorTypes"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "name (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.name"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.name"]], "outputannotatortype (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.outputAnnotatorType"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.outputAnnotatorType"]], "pretrained() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"], [283, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [283, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"], [284, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "coalescesentences (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.coalesceSentences"], [284, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.configProtoBytes"], [284, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.configProtoBytes"]], "getclasses() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"], [284, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "inputannotatortypes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.inputAnnotatorTypes"], [284, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"], [284, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "name (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.name"], [284, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.name"]], "outputannotatortype (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.outputAnnotatorType"], [284, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"], [284, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"], [284, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"], [284, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [284, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "distilbertformultiplechoice (class in sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice"], [285, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice"]], "choicesdelimiter (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.choicesDelimiter"], [285, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.inputAnnotatorTypes"], [285, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.loadSavedModel"], [285, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.loadSavedModel"]], "name (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.name"], [285, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.name"]], "outputannotatortype (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.outputAnnotatorType"], [285, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.outputAnnotatorType"]], "pretrained() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.pretrained"], [285, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (distilbertformultiplechoice method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.setChoicesDelimiter"], [285, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [285, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"], [287, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "coalescesentences (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.coalesceSentences"], [287, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.coalesceSentences"]], "configprotobytes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.configProtoBytes"], [287, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.inputAnnotatorTypes"], [287, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"], [287, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "name (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.name"], [287, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.name"]], "outputannotatortype (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.outputAnnotatorType"], [287, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.outputAnnotatorType"]], "pretrained() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"], [287, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"], [287, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [287, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"], [288, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "coalescesentences (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.coalesceSentences"], [288, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.coalesceSentences"]], "configprotobytes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.configProtoBytes"], [288, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.configProtoBytes"]], "getclasses() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"], [288, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "inputannotatortypes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.inputAnnotatorTypes"], [288, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"], [288, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "name (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.name"], [288, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.name"]], "outputannotatortype (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.outputAnnotatorType"], [288, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.outputAnnotatorType"]], "pretrained() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"], [288, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"], [288, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"], [288, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [288, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"], [289, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "configprotobytes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.configProtoBytes"], [289, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.configProtoBytes"]], "getclasses() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"], [289, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "inputannotatortypes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.inputAnnotatorTypes"], [289, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"], [289, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "name (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.name"], [289, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.name"]], "outputannotatortype (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.outputAnnotatorType"], [289, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.outputAnnotatorType"]], "pretrained() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"], [289, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"], [289, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [289, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "inputannotatortypes (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.inputAnnotatorTypes"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "name (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.name"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.name"]], "outputannotatortype (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.outputAnnotatorType"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.outputAnnotatorType"]], "pretrained() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"], [290, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [290, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "coalescesentences (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.coalesceSentences"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.coalesceSentences"]], "getclasses() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "inputannotatortypes (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.inputAnnotatorTypes"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "name (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.name"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.name"]], "outputannotatortype (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.outputAnnotatorType"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.outputAnnotatorType"]], "pretrained() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"], [291, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [291, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "mpnetfortokenclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"], [292, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"]], "configprotobytes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.configProtoBytes"], [292, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.configProtoBytes"]], "getclasses() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"], [292, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"]], "inputannotatortypes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.inputAnnotatorTypes"], [292, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"], [292, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"]], "name (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.name"], [292, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.name"]], "outputannotatortype (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.outputAnnotatorType"], [292, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.outputAnnotatorType"]], "pretrained() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"], [292, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"]], "setconfigprotobytes() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"], [292, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [292, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "classes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.classes"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.classes"]], "configprotobytes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.configProtoBytes"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.configProtoBytes"]], "inputannotatortypes (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.inputAnnotatorTypes"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.inputAnnotatorTypes"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.inputAnnotatorTypes"]], "name (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.name"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.name"]], "outputannotatortype (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.outputAnnotatorType"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.outputAnnotatorType"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.outputAnnotatorType"]], "pretrained() (multiclassifierdlmodel static method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setshuffleperepoch() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setShufflePerEpoch"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setShufflePerEpoch"]], "setthreshold() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "shuffleperepoch (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.shufflePerEpoch"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.shufflePerEpoch"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [293, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "threshold (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.threshold"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.threshold"]], "threshold (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.threshold"], [293, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.threshold"]], "robertaformultiplechoice (class in sparknlp.annotator.classifier_dl.roberta_for_multiple_choice)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice"], [294, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice"]], "choicesdelimiter (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.choicesDelimiter"], [294, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.inputAnnotatorTypes"], [294, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.loadSavedModel"], [294, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.loadSavedModel"]], "name (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.name"], [294, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.name"]], "outputannotatortype (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.outputAnnotatorType"], [294, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.pretrained"], [294, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.pretrained"]], "setchoicesdelimiter() (robertaformultiplechoice method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.setChoicesDelimiter"], [294, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [294, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"], [295, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "coalescesentences (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.coalesceSentences"], [295, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.configProtoBytes"], [295, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.inputAnnotatorTypes"], [295, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"], [295, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "name (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.name"], [295, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.name"]], "outputannotatortype (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.outputAnnotatorType"], [295, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"], [295, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"], [295, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [295, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"], [296, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "coalescesentences (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.coalesceSentences"], [296, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.configProtoBytes"], [296, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"], [296, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.inputAnnotatorTypes"], [296, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"], [296, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "name (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.name"], [296, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.name"]], "outputannotatortype (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.outputAnnotatorType"], [296, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"], [296, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"], [296, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"], [296, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [296, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"], [297, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "configprotobytes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.configProtoBytes"], [297, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.configProtoBytes"]], "getclasses() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"], [297, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "inputannotatortypes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.inputAnnotatorTypes"], [297, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"], [297, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "maxsentencelength (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.maxSentenceLength"], [297, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.maxSentenceLength"]], "name (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.name"], [297, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.name"]], "outputannotatortype (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.outputAnnotatorType"], [297, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"], [297, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"], [297, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"], [297, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [297, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "coalescesentences (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.coalesceSentences"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.configProtoBytes"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.inputAnnotatorTypes"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.maxSentenceLength"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.maxSentenceLength"]], "name (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.name"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.name"]], "outputannotatortype (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.outputAnnotatorType"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"], [298, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [298, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "classes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.classes"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.classes"]], "configprotobytes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.configProtoBytes"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.configProtoBytes"]], "dropout (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.dropout"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.dropout"]], "inputannotatortypes (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.inputAnnotatorTypes"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.inputAnnotatorTypes"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.inputAnnotatorTypes"]], "name (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.name"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.name"]], "outputannotatortype (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.outputAnnotatorType"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.outputAnnotatorType"]], "outputannotatortype (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.outputAnnotatorType"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.outputAnnotatorType"]], "pretrained() (sentimentdlmodel static method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [299, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "threshold (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.threshold"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.threshold"]], "threshold (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.threshold"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.threshold"]], "thresholdlabel (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.thresholdLabel"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.thresholdLabel"]], "thresholdlabel (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.thresholdLabel"], [299, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.thresholdLabel"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"], [300, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "inputannotatortypes (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.inputAnnotatorTypes"], [300, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"], [300, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "name (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.name"], [300, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.name"]], "pretrained() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"], [300, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [300, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaformultiplechoice (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice"]], "inputannotatortypes (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.inputAnnotatorTypes"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.loadSavedModel"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.loadSavedModel"]], "name (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.name"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.name"]], "outputannotatortype (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.outputAnnotatorType"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.pretrained"], [301, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [301, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "coalescesentences (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.coalesceSentences"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.configProtoBytes"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.inputAnnotatorTypes"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "name (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.name"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.name"]], "outputannotatortype (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.outputAnnotatorType"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"], [302, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [302, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "coalescesentences (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.coalesceSentences"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.configProtoBytes"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.inputAnnotatorTypes"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "name (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.name"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.name"]], "outputannotatortype (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.outputAnnotatorType"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"], [303, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [303, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "configprotobytes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.configProtoBytes"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.configProtoBytes"]], "getclasses() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "inputannotatortypes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.inputAnnotatorTypes"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "name (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.name"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.name"]], "outputannotatortype (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.outputAnnotatorType"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"], [304, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [304, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "coalescesentences (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.coalesceSentences"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.configProtoBytes"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.inputAnnotatorTypes"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.maxSentenceLength"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.maxSentenceLength"]], "name (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.name"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.name"]], "outputannotatortype (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.outputAnnotatorType"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"], [305, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [305, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "coalescesentences (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.coalesceSentences"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.coalesceSentences"]], "configprotobytes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.configProtoBytes"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.configProtoBytes"]], "getclasses() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "inputannotatortypes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.inputAnnotatorTypes"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "name (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.name"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.name"]], "outputannotatortype (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.outputAnnotatorType"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"], [306, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [306, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"], [307, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "configprotobytes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.configProtoBytes"], [307, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.configProtoBytes"]], "getclasses() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"], [307, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "inputannotatortypes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.inputAnnotatorTypes"], [307, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"], [307, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "name (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.name"], [307, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.name"]], "outputannotatortype (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.outputAnnotatorType"], [307, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.outputAnnotatorType"]], "pretrained() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"], [307, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"], [307, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [307, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners": [[59, "module-sparknlp.annotator.cleaners"], [310, "module-sparknlp.annotator.cleaners"]], "cleaner (class in sparknlp.annotator.cleaners.cleaner)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner"]], "bullets (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.bullets"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.bullets"]], "cleanpostfixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPostfixPattern"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPostfixPattern"]], "cleanprefixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPrefixPattern"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPrefixPattern"]], "cleanermode (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanerMode"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanerMode"]], "dashes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.dashes"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.dashes"]], "encoding (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.encoding"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.encoding"]], "extrawhitespace (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.extraWhitespace"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.extraWhitespace"]], "ignorecase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.ignoreCase"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.ignoreCase"]], "inputannotatortypes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.inputAnnotatorTypes"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.inputAnnotatorTypes"]], "lowercase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.lowercase"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.lowercase"]], "name (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.name"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.name"]], "outputannotatortype (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.outputAnnotatorType"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.outputAnnotatorType"]], "setbullets() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setBullets"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.setBullets"]], "setcleanpostfixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPostfixPattern"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPostfixPattern"]], "setcleanprefixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPrefixPattern"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPrefixPattern"]], "setcleanermode() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanerMode"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanerMode"]], "setdashes() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setDashes"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.setDashes"]], "setencoding() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setEncoding"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.setEncoding"]], "setextrawhitespace() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setExtraWhitespace"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.setExtraWhitespace"]], "setignorecase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setIgnoreCase"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.setIgnoreCase"]], "setlowercase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setLowercase"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.setLowercase"]], "setstrip() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setStrip"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.setStrip"]], "settrailingpunctuation() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setTrailingPunctuation"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.setTrailingPunctuation"]], "sparknlp.annotator.cleaners.cleaner": [[60, "module-sparknlp.annotator.cleaners.cleaner"], [308, "module-sparknlp.annotator.cleaners.cleaner"]], "strip (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.strip"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.strip"]], "trailingpunctuation (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.trailingPunctuation"], [308, "sparknlp.annotator.cleaners.cleaner.Cleaner.trailingPunctuation"]], "extractor (class in sparknlp.annotator.cleaners.extractor)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor"], [309, "sparknlp.annotator.cleaners.extractor.Extractor"]], "emailaddress (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailAddress"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.emailAddress"]], "emaildatetimetzpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailDateTimeTzPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.emailDateTimeTzPattern"]], "extractormode (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.extractorMode"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.extractorMode"]], "imageurlpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.imageUrlPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.imageUrlPattern"]], "index (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.index"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.index"]], "inputannotatortypes (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.inputAnnotatorTypes"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.inputAnnotatorTypes"]], "ipaddressnamepattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressNamePattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressNamePattern"]], "ipaddresspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressPattern"]], "mapiidpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.mapiIdPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.mapiIdPattern"]], "name (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.name"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.name"]], "outputannotatortype (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.outputAnnotatorType"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.outputAnnotatorType"]], "setemailaddress() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailAddress"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailAddress"]], "setemaildatetimetzpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailDateTimeTzPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailDateTimeTzPattern"]], "setextractormode() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setExtractorMode"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.setExtractorMode"]], "setimageurlpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setImageUrlPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.setImageUrlPattern"]], "setindex() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIndex"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.setIndex"]], "setipaddressnamepattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressNamePattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressNamePattern"]], "setipaddresspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressPattern"]], "setmapiidpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setMapiIdPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.setMapiIdPattern"]], "settextpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setTextPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.setTextPattern"]], "setusphonenumberspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setUsPhoneNumbersPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.setUsPhoneNumbersPattern"]], "sparknlp.annotator.cleaners.extractor": [[61, "module-sparknlp.annotator.cleaners.extractor"], [309, "module-sparknlp.annotator.cleaners.extractor"]], "textpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.textPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.textPattern"]], "usphonenumberspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.usPhoneNumbersPattern"], [309, "sparknlp.annotator.cleaners.extractor.Extractor.usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[62, "module-sparknlp.annotator.coref"], [311, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "configprotobytes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.configProtoBytes"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.configProtoBytes"]], "inputannotatortypes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.inputAnnotatorTypes"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.inputAnnotatorTypes"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "maxsegmentlength (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.maxSegmentLength"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.maxSegmentLength"]], "name (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.name"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.name"]], "outputannotatortype (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.outputAnnotatorType"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.outputAnnotatorType"]], "pretrained() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[63, "module-sparknlp.annotator.coref.spanbert_coref"], [312, "module-sparknlp.annotator.coref.spanbert_coref"]], "textgenre (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.textGenre"], [312, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.textGenre"]], "sparknlp.annotator.cv": [[64, "module-sparknlp.annotator.cv"], [318, "module-sparknlp.annotator.cv"]], "blipforquestionanswering (class in sparknlp.annotator.cv.blip_for_question_answering)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering"], [313, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering"]], "configprotobytes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.configProtoBytes"], [313, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.inputAnnotatorTypes"], [313, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.loadSavedModel"], [313, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.loadSavedModel"]], "maxsentencelength (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.maxSentenceLength"], [313, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.maxSentenceLength"]], "name (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.name"], [313, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.name"]], "outputannotatortype (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.outputAnnotatorType"], [313, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.outputAnnotatorType"]], "pretrained() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.pretrained"], [313, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.pretrained"]], "setmaxsentencesize() (blipforquestionanswering method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.setMaxSentenceSize"], [313, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.setMaxSentenceSize"]], "sparknlp.annotator.cv.blip_for_question_answering": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"], [313, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"], [314, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "configprotobytes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.configProtoBytes"], [314, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.configProtoBytes"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"], [314, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "inputannotatortypes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.inputAnnotatorTypes"], [314, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"], [314, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "name (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.name"], [314, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.name"]], "outputannotatortype (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.outputAnnotatorType"], [314, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.outputAnnotatorType"]], "pretrained() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"], [314, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [314, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "configprotobytes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.configProtoBytes"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.configProtoBytes"]], "croppct (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.cropPct"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.cropPct"]], "dorescale (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.doRescale"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.doRescale"]], "getclasses() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "inputannotatortypes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.inputAnnotatorTypes"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "name (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.name"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.name"]], "outputannotatortype (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.outputAnnotatorType"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.outputAnnotatorType"]], "pretrained() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "rescalefactor (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.rescaleFactor"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.rescaleFactor"]], "setconfigprotobytes() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"], [315, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [315, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "florence2transformer (class in sparknlp.annotator.cv.florence2_transformer)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer"]], "batchsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.batchSize"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.batchSize"]], "beamsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.beamSize"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.beamSize"]], "dosample (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.doSample"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.doSample"]], "ignoretokenids (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.ignoreTokenIds"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.ignoreTokenIds"]], "inputannotatortypes (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.inputAnnotatorTypes"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (florence2transformer static method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.loadSavedModel"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.loadSavedModel"]], "maxoutputlength (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.maxOutputLength"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.maxOutputLength"]], "minoutputlength (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.minOutputLength"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.minOutputLength"]], "name (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.name"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.name"]], "norepeatngramsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.noRepeatNgramSize"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.noRepeatNgramSize"]], "outputannotatortype (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.outputAnnotatorType"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.outputAnnotatorType"]], "pretrained() (florence2transformer static method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.pretrained"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.pretrained"]], "repetitionpenalty (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.repetitionPenalty"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.repetitionPenalty"]], "setbatchsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBatchSize"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBatchSize"]], "setbeamsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBeamSize"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBeamSize"]], "setdosample() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setDoSample"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setDoSample"]], "setignoretokenids() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setIgnoreTokenIds"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMaxOutputLength"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMaxOutputLength"]], "setminoutputlength() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMinOutputLength"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setNoRepeatNgramSize"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setRepetitionPenalty"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setRepetitionPenalty"]], "settemperature() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTemperature"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTemperature"]], "settopk() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopK"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopK"]], "settopp() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopP"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopP"]], "sparknlp.annotator.cv.florence2_transformer": [[68, "module-sparknlp.annotator.cv.florence2_transformer"], [316, "module-sparknlp.annotator.cv.florence2_transformer"]], "temperature (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.temperature"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.temperature"]], "topk (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topK"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topK"]], "topp (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topP"], [316, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topP"]], "gemma3formultimodal (class in sparknlp.annotator.cv.gemma3_for_multimodal)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal"]], "beamsize (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.beamSize"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.beamSize"]], "configprotobytes (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.configProtoBytes"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.configProtoBytes"]], "dosample (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.doSample"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.doSample"]], "ignoretokenids (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.ignoreTokenIds"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.ignoreTokenIds"]], "inputannotatortypes (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.inputAnnotatorTypes"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (gemma3formultimodal static method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.loadSavedModel"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.loadSavedModel"]], "maxinputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxInputLength"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxInputLength"]], "maxoutputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxOutputLength"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxOutputLength"]], "minoutputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.minOutputLength"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.minOutputLength"]], "name (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.name"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.name"]], "norepeatngramsize (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.noRepeatNgramSize"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.noRepeatNgramSize"]], "outputannotatortype (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.outputAnnotatorType"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.outputAnnotatorType"]], "pretrained() (gemma3formultimodal static method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.pretrained"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.pretrained"]], "repetitionpenalty (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.repetitionPenalty"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.repetitionPenalty"]], "setbeamsize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setBeamSize"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setBeamSize"]], "setconfigprotobytes() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setConfigProtoBytes"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setConfigProtoBytes"]], "setdosample() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setDoSample"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setDoSample"]], "setignoretokenids() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setIgnoreTokenIds"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxOutputLength"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxSentenceSize"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMinOutputLength"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setNoRepeatNgramSize"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setRepetitionPenalty"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setRepetitionPenalty"]], "settemperature() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTemperature"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTemperature"]], "settopk() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopK"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopK"]], "settopp() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopP"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopP"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [317, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "temperature (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.temperature"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.temperature"]], "topk (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topK"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topK"]], "topp (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topP"], [317, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topP"]], "internvlformultimodal (class in sparknlp.annotator.cv.internvl_for_multimodal)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal"]], "beamsize (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.beamSize"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.beamSize"]], "dosample (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.doSample"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.doSample"]], "ignoretokenids (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.ignoreTokenIds"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.ignoreTokenIds"]], "inputannotatortypes (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.inputAnnotatorTypes"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (internvlformultimodal static method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.loadSavedModel"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.loadSavedModel"]], "maxoutputlength (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.maxOutputLength"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.maxOutputLength"]], "minoutputlength (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.minOutputLength"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.minOutputLength"]], "name (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.name"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.name"]], "norepeatngramsize (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.noRepeatNgramSize"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.noRepeatNgramSize"]], "outputannotatortype (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.outputAnnotatorType"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.outputAnnotatorType"]], "pretrained() (internvlformultimodal static method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.pretrained"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.pretrained"]], "repetitionpenalty (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.repetitionPenalty"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.repetitionPenalty"]], "setbeamsize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setBeamSize"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setBeamSize"]], "setdosample() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setDoSample"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setDoSample"]], "setignoretokenids() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setIgnoreTokenIds"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxOutputLength"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxSentenceSize"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMinOutputLength"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setNoRepeatNgramSize"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setRepetitionPenalty"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setRepetitionPenalty"]], "settemperature() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTemperature"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTemperature"]], "settopk() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopK"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopK"]], "settopp() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopP"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopP"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[70, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [319, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "temperature (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.temperature"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.temperature"]], "topk (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topK"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topK"]], "topp (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topP"], [319, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topP"]], "janusformultimodal (class in sparknlp.annotator.cv.janus_for_multimodal)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal"]], "beamsize (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.beamSize"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.beamSize"]], "configprotobytes (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.configProtoBytes"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.configProtoBytes"]], "dosample (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.doSample"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.doSample"]], "ignoretokenids (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.ignoreTokenIds"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.ignoreTokenIds"]], "imagegeneratemode (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.imageGenerateMode"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.imageGenerateMode"]], "inputannotatortypes (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.inputAnnotatorTypes"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (janusformultimodal static method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.loadSavedModel"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.loadSavedModel"]], "maxoutputlength (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.maxOutputLength"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.maxOutputLength"]], "minoutputlength (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.minOutputLength"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.minOutputLength"]], "name (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.name"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.name"]], "norepeatngramsize (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.noRepeatNgramSize"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.noRepeatNgramSize"]], "numofparallelimages (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.numOfParallelImages"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.numOfParallelImages"]], "outputannotatortype (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.outputAnnotatorType"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.outputAnnotatorType"]], "pretrained() (janusformultimodal static method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.pretrained"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.pretrained"]], "repetitionpenalty (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.repetitionPenalty"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.repetitionPenalty"]], "setbeamsize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setBeamSize"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setBeamSize"]], "setconfigprotobytes() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setConfigProtoBytes"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setConfigProtoBytes"]], "setdosample() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setDoSample"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setDoSample"]], "setignoretokenids() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setIgnoreTokenIds"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setIgnoreTokenIds"]], "setimagegeneratemode() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setImageGenerateMode"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setImageGenerateMode"]], "setmaxoutputlength() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxOutputLength"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxSentenceSize"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMinOutputLength"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNoRepeatNgramSize"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNoRepeatNgramSize"]], "setnumofparallelimages() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNumOfParallelImages"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNumOfParallelImages"]], "setrepetitionpenalty() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setRepetitionPenalty"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setRepetitionPenalty"]], "settemperature() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTemperature"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTemperature"]], "settopk() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopK"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopK"]], "settopp() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopP"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopP"]], "sparknlp.annotator.cv.janus_for_multimodal": [[71, "module-sparknlp.annotator.cv.janus_for_multimodal"], [320, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "temperature (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.temperature"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.temperature"]], "topk (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topK"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topK"]], "topp (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topP"], [320, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topP"]], "llavaformultimodal (class in sparknlp.annotator.cv.llava_for_multimodal)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal"]], "beamsize (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.beamSize"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.beamSize"]], "configprotobytes (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.configProtoBytes"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.configProtoBytes"]], "dosample (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.doSample"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.doSample"]], "ignoretokenids (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.ignoreTokenIds"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.ignoreTokenIds"]], "inputannotatortypes (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.inputAnnotatorTypes"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (llavaformultimodal static method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.loadSavedModel"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.loadSavedModel"]], "maxoutputlength (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.maxOutputLength"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.maxOutputLength"]], "minoutputlength (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.minOutputLength"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.minOutputLength"]], "name (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.name"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.name"]], "norepeatngramsize (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.noRepeatNgramSize"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.noRepeatNgramSize"]], "outputannotatortype (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.outputAnnotatorType"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.outputAnnotatorType"]], "pretrained() (llavaformultimodal static method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.pretrained"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.pretrained"]], "repetitionpenalty (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.repetitionPenalty"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.repetitionPenalty"]], "setbeamsize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setBeamSize"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setBeamSize"]], "setconfigprotobytes() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setConfigProtoBytes"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setConfigProtoBytes"]], "setdosample() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setDoSample"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setDoSample"]], "setignoretokenids() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setIgnoreTokenIds"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxOutputLength"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxSentenceSize"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMinOutputLength"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setNoRepeatNgramSize"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setRepetitionPenalty"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setRepetitionPenalty"]], "settemperature() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTemperature"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTemperature"]], "settopk() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopK"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopK"]], "settopp() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopP"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[72, "module-sparknlp.annotator.cv.llava_for_multimodal"], [321, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "temperature (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.temperature"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.temperature"]], "topk (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topK"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topK"]], "topp (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topP"], [321, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topP"]], "mllamaformultimodal (class in sparknlp.annotator.cv.mllama_for_multimodal)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal"]], "beamsize (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.beamSize"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.beamSize"]], "configprotobytes (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.configProtoBytes"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.configProtoBytes"]], "dosample (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.doSample"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.doSample"]], "ignoretokenids (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.ignoreTokenIds"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.ignoreTokenIds"]], "inputannotatortypes (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.inputAnnotatorTypes"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.inputAnnotatorTypes"]], "loadsavedmodel() (mllamaformultimodal static method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.loadSavedModel"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.loadSavedModel"]], "maxoutputlength (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.maxOutputLength"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.maxOutputLength"]], "minoutputlength (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.minOutputLength"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.minOutputLength"]], "name (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.name"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.name"]], "norepeatngramsize (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.noRepeatNgramSize"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.noRepeatNgramSize"]], "outputannotatortype (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.outputAnnotatorType"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.outputAnnotatorType"]], "pretrained() (mllamaformultimodal static method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.pretrained"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.pretrained"]], "repetitionpenalty (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.repetitionPenalty"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.repetitionPenalty"]], "setbeamsize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setBeamSize"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setBeamSize"]], "setconfigprotobytes() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setConfigProtoBytes"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setConfigProtoBytes"]], "setdosample() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setDoSample"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setDoSample"]], "setignoretokenids() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setIgnoreTokenIds"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setIgnoreTokenIds"]], "setmaxoutputlength() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxOutputLength"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxOutputLength"]], "setmaxsentencesize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxSentenceSize"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxSentenceSize"]], "setminoutputlength() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMinOutputLength"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMinOutputLength"]], "setnorepeatngramsize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setNoRepeatNgramSize"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setRepetitionPenalty"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setRepetitionPenalty"]], "settemperature() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTemperature"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTemperature"]], "settopk() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopK"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopK"]], "settopp() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopP"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[73, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [322, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "temperature (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.temperature"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.temperature"]], "topk (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topK"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topK"]], "topp (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topP"], [322, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topP"]], "paligemmaformultimodal (class in sparknlp.annotator.cv.paligemma_for_multimodal)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal"]], "beamsize (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.beamSize"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.beamSize"]], "dosample (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.doSample"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.doSample"]], "ignoretokenids (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.ignoreTokenIds"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.ignoreTokenIds"]], "inputannotatortypes (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.inputAnnotatorTypes"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (paligemmaformultimodal static method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.loadSavedModel"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.loadSavedModel"]], "maxoutputlength (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.maxOutputLength"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.maxOutputLength"]], "minoutputlength (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.minOutputLength"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.minOutputLength"]], "name (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.name"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.name"]], "norepeatngramsize (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.noRepeatNgramSize"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.noRepeatNgramSize"]], "outputannotatortype (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.outputAnnotatorType"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.outputAnnotatorType"]], "pretrained() (paligemmaformultimodal static method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.pretrained"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.pretrained"]], "repetitionpenalty (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.repetitionPenalty"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.repetitionPenalty"]], "setbeamsize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setBeamSize"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setBeamSize"]], "setdosample() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setDoSample"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setDoSample"]], "setignoretokenids() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setIgnoreTokenIds"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxOutputLength"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxSentenceSize"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMinOutputLength"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setNoRepeatNgramSize"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setRepetitionPenalty"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setRepetitionPenalty"]], "settemperature() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTemperature"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTemperature"]], "settopk() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopK"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopK"]], "settopp() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopP"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopP"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [323, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "temperature (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.temperature"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.temperature"]], "topk (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topK"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topK"]], "topp (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topP"], [323, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topP"]], "phi3vision (class in sparknlp.annotator.cv.phi3_vision_for_multimodal)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision"]], "beamsize (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.beamSize"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.beamSize"]], "configprotobytes (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.configProtoBytes"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.configProtoBytes"]], "dosample (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.doSample"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.doSample"]], "ignoretokenids (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.ignoreTokenIds"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.ignoreTokenIds"]], "inputannotatortypes (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.inputAnnotatorTypes"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.inputAnnotatorTypes"]], "loadsavedmodel() (phi3vision static method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.loadSavedModel"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.loadSavedModel"]], "maxoutputlength (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.maxOutputLength"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.maxOutputLength"]], "minoutputlength (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.minOutputLength"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.minOutputLength"]], "name (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.name"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.name"]], "norepeatngramsize (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.noRepeatNgramSize"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.noRepeatNgramSize"]], "outputannotatortype (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.outputAnnotatorType"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.outputAnnotatorType"]], "pretrained() (phi3vision static method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.pretrained"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.pretrained"]], "repetitionpenalty (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.repetitionPenalty"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.repetitionPenalty"]], "setbeamsize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setBeamSize"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setBeamSize"]], "setconfigprotobytes() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setConfigProtoBytes"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setConfigProtoBytes"]], "setdosample() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setDoSample"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setDoSample"]], "setignoretokenids() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setIgnoreTokenIds"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxOutputLength"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxOutputLength"]], "setmaxsentencesize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxSentenceSize"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxSentenceSize"]], "setminoutputlength() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMinOutputLength"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMinOutputLength"]], "setnorepeatngramsize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setNoRepeatNgramSize"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setRepetitionPenalty"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setRepetitionPenalty"]], "settemperature() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTemperature"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTemperature"]], "settopk() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopK"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopK"]], "settopp() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopP"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [324, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "temperature (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.temperature"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.temperature"]], "topk (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topK"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topK"]], "topp (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topP"], [324, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topP"]], "qwen2vltransformer (class in sparknlp.annotator.cv.qwen2vl_transformer)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer"]], "beamsize (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.beamSize"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.beamSize"]], "configprotobytes (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.configProtoBytes"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.configProtoBytes"]], "dosample (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.doSample"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.doSample"]], "ignoretokenids (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.ignoreTokenIds"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.ignoreTokenIds"]], "inputannotatortypes (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.inputAnnotatorTypes"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwen2vltransformer static method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.loadSavedModel"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.loadSavedModel"]], "maxoutputlength (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.maxOutputLength"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.maxOutputLength"]], "minoutputlength (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.minOutputLength"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.minOutputLength"]], "name (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.name"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.name"]], "norepeatngramsize (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.noRepeatNgramSize"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.noRepeatNgramSize"]], "outputannotatortype (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.outputAnnotatorType"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.outputAnnotatorType"]], "pretrained() (qwen2vltransformer static method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.pretrained"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.pretrained"]], "repetitionpenalty (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.repetitionPenalty"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.repetitionPenalty"]], "setbeamsize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setBeamSize"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setBeamSize"]], "setconfigprotobytes() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setConfigProtoBytes"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setConfigProtoBytes"]], "setdosample() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setDoSample"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setDoSample"]], "setignoretokenids() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setIgnoreTokenIds"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxOutputLength"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxOutputLength"]], "setmaxsentencesize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxSentenceSize"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxSentenceSize"]], "setminoutputlength() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMinOutputLength"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setNoRepeatNgramSize"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setRepetitionPenalty"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setRepetitionPenalty"]], "settemperature() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTemperature"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTemperature"]], "settopk() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopK"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopK"]], "settopp() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopP"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[76, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [325, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "temperature (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.temperature"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.temperature"]], "topk (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topK"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topK"]], "topp (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topP"], [325, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topP"]], "smolvlmtransformer (class in sparknlp.annotator.cv.smolvlm_transformer)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer"]], "beamsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.beamSize"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.beamSize"]], "doimagesplitting (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doImageSplitting"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doImageSplitting"]], "dosample (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doSample"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doSample"]], "ignoretokenids (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.ignoreTokenIds"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.ignoreTokenIds"]], "imagetoken (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.imageToken"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.imageToken"]], "inputannotatortypes (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.inputAnnotatorTypes"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (smolvlmtransformer static method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.loadSavedModel"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.loadSavedModel"]], "maximagesize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxImageSize"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxImageSize"]], "maxoutputlength (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxOutputLength"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxOutputLength"]], "minoutputlength (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.minOutputLength"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.minOutputLength"]], "name (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.name"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.name"]], "norepeatngramsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.noRepeatNgramSize"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.noRepeatNgramSize"]], "numvisiontokens (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.numVisionTokens"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.numVisionTokens"]], "outputannotatortype (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.outputAnnotatorType"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.outputAnnotatorType"]], "paddingconstant (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.paddingConstant"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.paddingConstant"]], "patchsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.patchSize"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.patchSize"]], "pretrained() (smolvlmtransformer static method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.pretrained"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.pretrained"]], "repetitionpenalty (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.repetitionPenalty"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.repetitionPenalty"]], "setbeamsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setBeamSize"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setBeamSize"]], "setconfigprotobytes() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setConfigProtoBytes"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setConfigProtoBytes"]], "setdoimagesplitting() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoImageSplitting"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoImageSplitting"]], "setdosample() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoSample"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoSample"]], "setignoretokenids() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setIgnoreTokenIds"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setIgnoreTokenIds"]], "setimagetoken() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setImageToken"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setImageToken"]], "setmaximagesize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxImageSize"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxImageSize"]], "setmaxoutputlength() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxOutputLength"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxOutputLength"]], "setmaxsentencesize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxSentenceSize"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxSentenceSize"]], "setminoutputlength() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMinOutputLength"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNoRepeatNgramSize"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNoRepeatNgramSize"]], "setnumvisiontokens() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNumVisionTokens"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNumVisionTokens"]], "setpaddingconstant() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPaddingConstant"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPaddingConstant"]], "setpatchsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPatchSize"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPatchSize"]], "setrepetitionpenalty() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setRepetitionPenalty"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setRepetitionPenalty"]], "setstoptokenids() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setStopTokenIds"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setStopTokenIds"]], "settemperature() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTemperature"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTemperature"]], "settopk() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopK"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopK"]], "settopp() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopP"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopP"]], "sparknlp.annotator.cv.smolvlm_transformer": [[77, "module-sparknlp.annotator.cv.smolvlm_transformer"], [326, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "stoptokenids (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.stopTokenIds"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.stopTokenIds"]], "temperature (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.temperature"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.temperature"]], "topk (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topK"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topK"]], "topp (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topP"], [326, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topP"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"], [327, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "configprotobytes (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.configProtoBytes"], [327, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.configProtoBytes"]], "getclasses() (swinforimageclassification method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"], [327, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "inputannotatortypes (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.inputAnnotatorTypes"], [327, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (swinforimageclassification static method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"], [327, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "name (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.name"], [327, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.name"]], "outputannotatortype (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.outputAnnotatorType"], [327, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.outputAnnotatorType"]], "pretrained() (swinforimageclassification static method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"], [327, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"], [327, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[78, "module-sparknlp.annotator.cv.swin_for_image_classification"], [327, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"], [328, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "configprotobytes (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.configProtoBytes"], [328, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.configProtoBytes"]], "inputannotatortypes (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.inputAnnotatorTypes"], [328, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.inputAnnotatorTypes"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"], [328, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "name (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.name"], [328, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.name"]], "outputannotatortype (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.outputAnnotatorType"], [328, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.outputAnnotatorType"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"], [328, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"], [328, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [328, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"], [329, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "configprotobytes (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.configProtoBytes"], [329, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.configProtoBytes"]], "getclasses() (vitforimageclassification method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"], [329, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "inputannotatortypes (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.inputAnnotatorTypes"], [329, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (vitforimageclassification static method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"], [329, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "name (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.name"], [329, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.name"]], "outputannotatortype (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.outputAnnotatorType"], [329, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.outputAnnotatorType"]], "pretrained() (vitforimageclassification static method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"], [329, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"], [329, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[80, "module-sparknlp.annotator.cv.vit_for_image_classification"], [329, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk"], [330, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "entityname (date2chunk attribute)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk.entityName"], [330, "sparknlp.annotator.date2_chunk.Date2Chunk.entityName"]], "inputannotatortypes (date2chunk attribute)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk.inputAnnotatorTypes"], [330, "sparknlp.annotator.date2_chunk.Date2Chunk.inputAnnotatorTypes"]], "name (date2chunk attribute)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk.name"], [330, "sparknlp.annotator.date2_chunk.Date2Chunk.name"]], "outputannotatortype (date2chunk attribute)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk.outputAnnotatorType"], [330, "sparknlp.annotator.date2_chunk.Date2Chunk.outputAnnotatorType"]], "setentityname() (date2chunk method)": [[81, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"], [330, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[81, "module-sparknlp.annotator.date2_chunk"], [330, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency": [[82, "module-sparknlp.annotator.dependency"], [332, "module-sparknlp.annotator.dependency"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "conllu (dependencyparserapproach attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.conllU"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.conllU"]], "dependencytreebank (dependencyparserapproach attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.dependencyTreeBank"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.dependencyTreeBank"]], "inputannotatortypes (dependencyparserapproach attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.inputAnnotatorTypes"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (dependencyparsermodel attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.inputAnnotatorTypes"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.inputAnnotatorTypes"]], "name (dependencyparsermodel attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.name"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.name"]], "numberofiterations (dependencyparserapproach attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.numberOfIterations"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.numberOfIterations"]], "outputannotatortype (dependencyparserapproach attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.outputAnnotatorType"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (dependencyparsermodel attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.outputAnnotatorType"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.outputAnnotatorType"]], "perceptron (dependencyparsermodel attribute)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.perceptron"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.perceptron"]], "pretrained() (dependencyparsermodel static method)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[83, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"], [331, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[83, "module-sparknlp.annotator.dependency.dependency_parser"], [331, "module-sparknlp.annotator.dependency.dependency_parser"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "conll2009 (typeddependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conll2009"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conll2009"]], "conllformat (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.conllFormat"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.conllFormat"]], "conllu (typeddependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conllU"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conllU"]], "inputannotatortypes (typeddependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.inputAnnotatorTypes"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.inputAnnotatorTypes"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.inputAnnotatorTypes"]], "name (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.name"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.name"]], "numberofiterations (typeddependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.numberOfIterations"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.numberOfIterations"]], "outputannotatortype (typeddependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.outputAnnotatorType"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.outputAnnotatorType"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.outputAnnotatorType"]], "pretrained() (typeddependencyparsermodel static method)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[84, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [333, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "traindependencypipe (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainDependencyPipe"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainDependencyPipe"]], "trainoptions (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainOptions"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainOptions"]], "trainparameters (typeddependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainParameters"], [333, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainParameters"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "chunkoverlap (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkOverlap"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkOverlap"]], "chunksize (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkSize"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkSize"]], "explodesplits (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.explodeSplits"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.explodeSplits"]], "inputannotatortypes (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.inputAnnotatorTypes"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.inputAnnotatorTypes"]], "keepseparators (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.keepSeparators"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.keepSeparators"]], "outputannotatortype (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.outputAnnotatorType"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.outputAnnotatorType"]], "patternsareregex (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.patternsAreRegex"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.patternsAreRegex"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[85, "module-sparknlp.annotator.document_character_text_splitter"], [334, "module-sparknlp.annotator.document_character_text_splitter"]], "splitpatterns (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.splitPatterns"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.splitPatterns"]], "trimwhitespace (documentcharactertextsplitter attribute)": [[85, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.trimWhitespace"], [334, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.trimWhitespace"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "action (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.action"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.action"]], "encoding (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.encoding"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.encoding"]], "inputannotatortypes (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.inputAnnotatorTypes"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.inputAnnotatorTypes"]], "lowercase (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.lowercase"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.lowercase"]], "outputannotatortype (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.outputAnnotatorType"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.outputAnnotatorType"]], "patterns (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.patterns"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.patterns"]], "policy (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.policy"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.policy"]], "replacement (documentnormalizer attribute)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.replacement"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.replacement"]], "setaction() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[86, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"], [335, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[86, "module-sparknlp.annotator.document_normalizer"], [335, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"], [336, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "explodesplits (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.explodeSplits"], [336, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.explodeSplits"]], "inputannotatortypes (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.inputAnnotatorTypes"], [336, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.inputAnnotatorTypes"]], "numtokens (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.numTokens"], [336, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.numTokens"]], "outputannotatortype (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.outputAnnotatorType"], [336, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.outputAnnotatorType"]], "setexplodesplits() (documenttokensplitter method)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"], [336, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"], [336, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"], [336, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"], [336, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[87, "module-sparknlp.annotator.document_token_splitter"], [336, "module-sparknlp.annotator.document_token_splitter"]], "tokenoverlap (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.tokenOverlap"], [336, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.tokenOverlap"]], "trimwhitespace (documenttokensplitter attribute)": [[87, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.trimWhitespace"], [336, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.trimWhitespace"]], "sparknlp.annotator.embeddings": [[89, "module-sparknlp.annotator.embeddings"], [351, "module-sparknlp.annotator.embeddings"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"], [338, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "configprotobytes (albertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.configProtoBytes"], [338, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.configProtoBytes"]], "inputannotatortypes (albertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.inputAnnotatorTypes"], [338, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (albertembeddings static method)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"], [338, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "name (albertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.name"], [338, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.name"]], "outputannotatortype (albertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.outputAnnotatorType"], [338, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.outputAnnotatorType"]], "pretrained() (albertembeddings static method)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"], [338, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[90, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"], [338, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[90, "module-sparknlp.annotator.embeddings.albert_embeddings"], [338, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "autoggufembeddings (class in sparknlp.annotator.embeddings.auto_gguf_embeddings)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings"]], "defragmentationthreshold (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.defragmentationThreshold"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.defragmentationThreshold"]], "embedding (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.embedding"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.embedding"]], "flashattention (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.flashAttention"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.flashAttention"]], "getmetadata() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.getMetadata"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.getMetadata"]], "gpusplitmode (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.gpuSplitMode"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.gpuSplitMode"]], "grpattnn (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnN"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnN"]], "grpattnw (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnW"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnW"]], "inputannotatortypes (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.inputAnnotatorTypes"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufembeddings static method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.loadSavedModel"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.loadSavedModel"]], "maingpu (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.mainGpu"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.mainGpu"]], "nbatch (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nBatch"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nBatch"]], "nchunks (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nChunks"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nChunks"]], "nctx (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nCtx"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nCtx"]], "ngpulayers (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nGpuLayers"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nGpuLayers"]], "nsequences (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nSequences"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nSequences"]], "nthreads (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreads"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreads"]], "nthreadsbatch (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreadsBatch"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreadsBatch"]], "nubatch (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nUbatch"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nUbatch"]], "name (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.name"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.name"]], "nokvoffload (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.noKvOffload"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.noKvOffload"]], "numastrategy (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.numaStrategy"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.numaStrategy"]], "outputannotatortype (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.outputAnnotatorType"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.outputAnnotatorType"]], "poolingtype (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.poolingType"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.poolingType"]], "pretrained() (autoggufembeddings static method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.pretrained"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.pretrained"]], "ropefreqbase (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqBase"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqBase"]], "ropefreqscale (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqScale"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqScale"]], "ropescalingtype (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeScalingType"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeScalingType"]], "setdefragmentationthreshold() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setDefragmentationThreshold"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setDefragmentationThreshold"]], "setflashattention() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setFlashAttention"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setFlashAttention"]], "setgpusplitmode() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGpuSplitMode"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGpuSplitMode"]], "setgrpattnn() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnN"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnN"]], "setgrpattnw() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnW"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnW"]], "setmaingpu() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setMainGpu"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setMainGpu"]], "setnbatch() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNBatch"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNBatch"]], "setnchunks() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNChunks"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNChunks"]], "setnctx() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNCtx"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNCtx"]], "setngpulayers() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNGpuLayers"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNGpuLayers"]], "setnparallel() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNParallel"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNParallel"]], "setnsequences() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNSequences"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNSequences"]], "setnthreads() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreads"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreads"]], "setnthreadsbatch() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreadsBatch"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreadsBatch"]], "setnubatch() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNUbatch"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNUbatch"]], "setnokvoffload() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNoKvOffload"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNoKvOffload"]], "setnumastrategy() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNumaStrategy"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNumaStrategy"]], "setpoolingtype() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setPoolingType"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setPoolingType"]], "setropefreqbase() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqBase"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqBase"]], "setropefreqscale() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqScale"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqScale"]], "setropescalingtype() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeScalingType"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeScalingType"]], "settensorsplit() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setTensorSplit"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setTensorSplit"]], "setusemlock() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMlock"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMlock"]], "setusemmap() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMmap"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMmap"]], "setyarnattnfactor() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnAttnFactor"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnAttnFactor"]], "setyarnbetafast() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaFast"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaFast"]], "setyarnbetaslow() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaSlow"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaSlow"]], "setyarnextfactor() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnExtFactor"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnExtFactor"]], "setyarnorigctx() (autoggufembeddings method)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnOrigCtx"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnOrigCtx"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[91, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [339, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "tensorsplit (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.tensorSplit"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.tensorSplit"]], "usemlock (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMlock"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMlock"]], "usemmap (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMmap"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMmap"]], "yarnattnfactor (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnAttnFactor"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnAttnFactor"]], "yarnbetafast (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaFast"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaFast"]], "yarnbetaslow (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaSlow"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaSlow"]], "yarnextfactor (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnExtFactor"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnExtFactor"]], "yarnorigctx (autoggufembeddings attribute)": [[91, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnOrigCtx"], [339, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnOrigCtx"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"], [340, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "configprotobytes (bertembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.configProtoBytes"], [340, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.configProtoBytes"]], "inputannotatortypes (bertembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.inputAnnotatorTypes"], [340, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bertembeddings static method)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"], [340, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "name (bertembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.name"], [340, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.name"]], "outputannotatortype (bertembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.outputAnnotatorType"], [340, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.outputAnnotatorType"]], "pretrained() (bertembeddings static method)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"], [340, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[92, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"], [340, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[92, "module-sparknlp.annotator.embeddings.bert_embeddings"], [340, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"], [341, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "configprotobytes (bertsentenceembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.configProtoBytes"], [341, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (bertsentenceembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.inputAnnotatorTypes"], [341, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.inputAnnotatorTypes"]], "islong (bertsentenceembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.isLong"], [341, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.isLong"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"], [341, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "name (bertsentenceembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.name"], [341, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.name"]], "outputannotatortype (bertsentenceembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.outputAnnotatorType"], [341, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentenceembeddings static method)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"], [341, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"], [341, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[93, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"], [341, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[93, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [341, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"], [342, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "configprotobytes (bgeembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.configProtoBytes"], [342, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.configProtoBytes"]], "inputannotatortypes (bgeembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.inputAnnotatorTypes"], [342, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bgeembeddings static method)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"], [342, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "name (bgeembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.name"], [342, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.name"]], "outputannotatortype (bgeembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.outputAnnotatorType"], [342, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.outputAnnotatorType"]], "pretrained() (bgeembeddings static method)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"], [342, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[94, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"], [342, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[94, "module-sparknlp.annotator.embeddings.bge_embeddings"], [342, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"], [343, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "configprotobytes (camembertembeddings attribute)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.configProtoBytes"], [343, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.configProtoBytes"]], "inputannotatortypes (camembertembeddings attribute)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.inputAnnotatorTypes"], [343, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (camembertembeddings static method)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"], [343, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "name (camembertembeddings attribute)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.name"], [343, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.name"]], "outputannotatortype (camembertembeddings attribute)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.outputAnnotatorType"], [343, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.outputAnnotatorType"]], "pretrained() (camembertembeddings static method)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"], [343, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[95, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"], [343, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[95, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [343, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"], [344, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "inputannotatortypes (chunkembeddings attribute)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.inputAnnotatorTypes"], [344, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.inputAnnotatorTypes"]], "name (chunkembeddings attribute)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.name"], [344, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.name"]], "outputannotatortype (chunkembeddings attribute)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.outputAnnotatorType"], [344, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.outputAnnotatorType"]], "poolingstrategy (chunkembeddings attribute)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.poolingStrategy"], [344, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.poolingStrategy"]], "setpoolingstrategy() (chunkembeddings method)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"], [344, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"], [344, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "skipoov (chunkembeddings attribute)": [[96, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.skipOOV"], [344, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.skipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[96, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [344, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"], [345, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "configprotobytes (debertaembeddings attribute)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.configProtoBytes"], [345, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (debertaembeddings attribute)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.inputAnnotatorTypes"], [345, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (debertaembeddings static method)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"], [345, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "name (debertaembeddings attribute)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.name"], [345, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.name"]], "outputannotatortype (debertaembeddings attribute)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.outputAnnotatorType"], [345, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.outputAnnotatorType"]], "pretrained() (debertaembeddings static method)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"], [345, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[97, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"], [345, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[97, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [345, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"], [346, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "configprotobytes (distilbertembeddings attribute)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.configProtoBytes"], [346, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.configProtoBytes"]], "inputannotatortypes (distilbertembeddings attribute)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.inputAnnotatorTypes"], [346, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertembeddings static method)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"], [346, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "name (distilbertembeddings attribute)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.name"], [346, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.name"]], "outputannotatortype (distilbertembeddings attribute)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.outputAnnotatorType"], [346, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.outputAnnotatorType"]], "pretrained() (distilbertembeddings static method)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"], [346, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[98, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"], [346, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[98, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [346, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "inputannotatortypes (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.inputAnnotatorTypes"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (doc2vecmodel attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.inputAnnotatorTypes"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.inputAnnotatorTypes"]], "maxiter (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxIter"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxIter"]], "maxsentencelength (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxSentenceLength"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxSentenceLength"]], "mincount (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.minCount"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.minCount"]], "name (doc2vecmodel attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.name"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.name"]], "numpartitions (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.numPartitions"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.numPartitions"]], "outputannotatortype (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.outputAnnotatorType"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.outputAnnotatorType"]], "outputannotatortype (doc2vecmodel attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.outputAnnotatorType"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.outputAnnotatorType"]], "pretrained() (doc2vecmodel static method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "seed (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.seed"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.seed"]], "setmaxiter() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[99, "module-sparknlp.annotator.embeddings.doc2vec"], [347, "module-sparknlp.annotator.embeddings.doc2vec"]], "stepsize (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.stepSize"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.stepSize"]], "vectorsize (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.vectorSize"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.vectorSize"]], "vectorsize (doc2vecmodel attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.vectorSize"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.vectorSize"]], "windowsize (doc2vecapproach attribute)": [[99, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.windowSize"], [347, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.windowSize"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"], [348, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "configprotobytes (e5embeddings attribute)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.configProtoBytes"], [348, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.configProtoBytes"]], "inputannotatortypes (e5embeddings attribute)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.inputAnnotatorTypes"], [348, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.inputAnnotatorTypes"]], "loadsavedmodel() (e5embeddings static method)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"], [348, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "name (e5embeddings attribute)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.name"], [348, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.name"]], "outputannotatortype (e5embeddings attribute)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.outputAnnotatorType"], [348, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.outputAnnotatorType"]], "pretrained() (e5embeddings static method)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"], [348, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[100, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"], [348, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[100, "module-sparknlp.annotator.embeddings.e5_embeddings"], [348, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "e5vembeddings (class in sparknlp.annotator.embeddings.e5v_embeddings)": [[101, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings"], [349, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings"]], "inputannotatortypes (e5vembeddings attribute)": [[101, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.inputAnnotatorTypes"], [349, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (e5vembeddings static method)": [[101, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.loadSavedModel"], [349, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.loadSavedModel"]], "name (e5vembeddings attribute)": [[101, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.name"], [349, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.name"]], "outputannotatortype (e5vembeddings attribute)": [[101, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.outputAnnotatorType"], [349, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.outputAnnotatorType"]], "pretrained() (e5vembeddings static method)": [[101, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.pretrained"], [349, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.pretrained"]], "sparknlp.annotator.embeddings.e5v_embeddings": [[101, "module-sparknlp.annotator.embeddings.e5v_embeddings"], [349, "module-sparknlp.annotator.embeddings.e5v_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "batchsize (elmoembeddings attribute)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.batchSize"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.batchSize"]], "configprotobytes (elmoembeddings attribute)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.configProtoBytes"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.configProtoBytes"]], "inputannotatortypes (elmoembeddings attribute)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.inputAnnotatorTypes"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (elmoembeddings static method)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "name (elmoembeddings attribute)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.name"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.name"]], "outputannotatortype (elmoembeddings attribute)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.outputAnnotatorType"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.outputAnnotatorType"]], "poolinglayer (elmoembeddings attribute)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.poolingLayer"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.poolingLayer"]], "pretrained() (elmoembeddings static method)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[102, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"], [350, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[102, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [350, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[103, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"], [352, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "configprotobytes (instructorembeddings attribute)": [[103, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.configProtoBytes"], [352, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.configProtoBytes"]], "inputannotatortypes (instructorembeddings attribute)": [[103, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.inputAnnotatorTypes"], [352, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.inputAnnotatorTypes"]], "instruction (instructorembeddings attribute)": [[103, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.instruction"], [352, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.instruction"]], "loadsavedmodel() (instructorembeddings static method)": [[103, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"], [352, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "name (instructorembeddings attribute)": [[103, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.name"], [352, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.name"]], "outputannotatortype (instructorembeddings attribute)": [[103, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.outputAnnotatorType"], [352, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.outputAnnotatorType"]], "pretrained() (instructorembeddings static method)": [[103, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"], [352, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[103, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"], [352, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[103, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"], [352, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[103, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [352, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[104, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"], [353, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "configprotobytes (longformerembeddings attribute)": [[104, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.configProtoBytes"], [353, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.configProtoBytes"]], "inputannotatortypes (longformerembeddings attribute)": [[104, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.inputAnnotatorTypes"], [353, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (longformerembeddings static method)": [[104, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"], [353, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "name (longformerembeddings attribute)": [[104, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.name"], [353, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.name"]], "outputannotatortype (longformerembeddings attribute)": [[104, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.outputAnnotatorType"], [353, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.outputAnnotatorType"]], "pretrained() (longformerembeddings static method)": [[104, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"], [353, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[104, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"], [353, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[104, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [353, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[105, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"], [354, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "configprotobytes (mpnetembeddings attribute)": [[105, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.configProtoBytes"], [354, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.configProtoBytes"]], "inputannotatortypes (mpnetembeddings attribute)": [[105, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.inputAnnotatorTypes"], [354, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetembeddings static method)": [[105, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"], [354, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "name (mpnetembeddings attribute)": [[105, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.name"], [354, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.name"]], "outputannotatortype (mpnetembeddings attribute)": [[105, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.outputAnnotatorType"], [354, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.outputAnnotatorType"]], "pretrained() (mpnetembeddings static method)": [[105, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"], [354, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[105, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"], [354, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[105, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [354, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "mxbaiembeddings (class in sparknlp.annotator.embeddings.mxbai_embeddings)": [[106, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"], [355, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"]], "inputannotatortypes (mxbaiembeddings attribute)": [[106, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.inputAnnotatorTypes"], [355, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mxbaiembeddings static method)": [[106, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"], [355, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"]], "name (mxbaiembeddings attribute)": [[106, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.name"], [355, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.name"]], "outputannotatortype (mxbaiembeddings attribute)": [[106, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.outputAnnotatorType"], [355, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.outputAnnotatorType"]], "poolingstrategy (mxbaiembeddings attribute)": [[106, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.poolingStrategy"], [355, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.poolingStrategy"]], "pretrained() (mxbaiembeddings static method)": [[106, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"], [355, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"]], "setpoolingstrategy() (mxbaiembeddings method)": [[106, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"], [355, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[106, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [355, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "nomicembeddings (class in sparknlp.annotator.embeddings.nomic_embeddings)": [[107, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"], [356, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"]], "configprotobytes (nomicembeddings attribute)": [[107, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.configProtoBytes"], [356, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.configProtoBytes"]], "inputannotatortypes (nomicembeddings attribute)": [[107, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.inputAnnotatorTypes"], [356, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (nomicembeddings static method)": [[107, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"], [356, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"]], "name (nomicembeddings attribute)": [[107, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.name"], [356, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.name"]], "outputannotatortype (nomicembeddings attribute)": [[107, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.outputAnnotatorType"], [356, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.outputAnnotatorType"]], "pretrained() (nomicembeddings static method)": [[107, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"], [356, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"]], "setconfigprotobytes() (nomicembeddings method)": [[107, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"], [356, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[107, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [356, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[108, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"], [357, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "configprotobytes (robertaembeddings attribute)": [[108, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.configProtoBytes"], [357, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (robertaembeddings attribute)": [[108, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.inputAnnotatorTypes"], [357, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertaembeddings static method)": [[108, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"], [357, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "name (robertaembeddings attribute)": [[108, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.name"], [357, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.name"]], "outputannotatortype (robertaembeddings attribute)": [[108, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.outputAnnotatorType"], [357, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (robertaembeddings static method)": [[108, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"], [357, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[108, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"], [357, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[108, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [357, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[109, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"], [358, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "configprotobytes (robertasentenceembeddings attribute)": [[109, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.configProtoBytes"], [358, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (robertasentenceembeddings attribute)": [[109, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.inputAnnotatorTypes"], [358, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[109, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"], [358, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "name (robertasentenceembeddings attribute)": [[109, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.name"], [358, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.name"]], "outputannotatortype (robertasentenceembeddings attribute)": [[109, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.outputAnnotatorType"], [358, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (robertasentenceembeddings static method)": [[109, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"], [358, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[109, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"], [358, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[109, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [358, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[110, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"], [359, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "inputannotatortypes (sentenceembeddings attribute)": [[110, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.inputAnnotatorTypes"], [359, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.inputAnnotatorTypes"]], "name (sentenceembeddings attribute)": [[110, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.name"], [359, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.name"]], "outputannotatortype (sentenceembeddings attribute)": [[110, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.outputAnnotatorType"], [359, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.outputAnnotatorType"]], "poolingstrategy (sentenceembeddings attribute)": [[110, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.poolingStrategy"], [359, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.poolingStrategy"]], "setpoolingstrategy() (sentenceembeddings method)": [[110, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"], [359, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[110, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [359, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "snowflakeembeddings (class in sparknlp.annotator.embeddings.snowflake_embeddings)": [[111, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"], [360, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"]], "inputannotatortypes (snowflakeembeddings attribute)": [[111, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.inputAnnotatorTypes"], [360, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (snowflakeembeddings static method)": [[111, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"], [360, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"]], "name (snowflakeembeddings attribute)": [[111, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.name"], [360, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.name"]], "outputannotatortype (snowflakeembeddings attribute)": [[111, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.outputAnnotatorType"], [360, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.outputAnnotatorType"]], "poolingstrategy (snowflakeembeddings attribute)": [[111, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.poolingStrategy"], [360, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.poolingStrategy"]], "pretrained() (snowflakeembeddings static method)": [[111, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"], [360, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"]], "setpoolingstrategy() (snowflakeembeddings method)": [[111, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"], [360, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[111, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [360, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "uaeembeddings (class in sparknlp.annotator.embeddings.uae_embeddings)": [[112, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"], [361, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"]], "inputannotatortypes (uaeembeddings attribute)": [[112, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.inputAnnotatorTypes"], [361, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (uaeembeddings static method)": [[112, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"], [361, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"]], "name (uaeembeddings attribute)": [[112, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.name"], [361, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.name"]], "outputannotatortype (uaeembeddings attribute)": [[112, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.outputAnnotatorType"], [361, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.outputAnnotatorType"]], "poolingstrategy (uaeembeddings attribute)": [[112, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.poolingStrategy"], [361, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.poolingStrategy"]], "pretrained() (uaeembeddings static method)": [[112, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"], [361, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"]], "setpoolingstrategy() (uaeembeddings method)": [[112, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"], [361, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[112, "module-sparknlp.annotator.embeddings.uae_embeddings"], [361, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[113, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"], [362, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "configprotobytes (universalsentenceencoder attribute)": [[113, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.configProtoBytes"], [362, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.configProtoBytes"]], "inputannotatortypes (universalsentenceencoder attribute)": [[113, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.inputAnnotatorTypes"], [362, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.inputAnnotatorTypes"]], "loadsp (universalsentenceencoder attribute)": [[113, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSP"], [362, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSP"]], "loadsavedmodel() (universalsentenceencoder static method)": [[113, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"], [362, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "name (universalsentenceencoder attribute)": [[113, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.name"], [362, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.name"]], "outputannotatortype (universalsentenceencoder attribute)": [[113, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.outputAnnotatorType"], [362, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.outputAnnotatorType"]], "pretrained() (universalsentenceencoder static method)": [[113, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"], [362, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[113, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"], [362, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[113, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"], [362, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[113, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [362, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "inputannotatortypes (word2vecapproach attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.inputAnnotatorTypes"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (word2vecmodel attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.inputAnnotatorTypes"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.inputAnnotatorTypes"]], "maxiter (word2vecapproach attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxIter"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxIter"]], "maxsentencelength (word2vecapproach attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxSentenceLength"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxSentenceLength"]], "mincount (word2vecapproach attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.minCount"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.minCount"]], "name (word2vecmodel attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.name"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.name"]], "numpartitions (word2vecapproach attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.numPartitions"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.numPartitions"]], "outputannotatortype (word2vecapproach attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.outputAnnotatorType"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.outputAnnotatorType"]], "outputannotatortype (word2vecmodel attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.outputAnnotatorType"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.outputAnnotatorType"]], "pretrained() (word2vecmodel static method)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "seed (word2vecapproach attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.seed"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.seed"]], "setmaxiter() (word2vecapproach method)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[114, "module-sparknlp.annotator.embeddings.word2vec"], [363, "module-sparknlp.annotator.embeddings.word2vec"]], "stepsize (word2vecapproach attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.stepSize"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.stepSize"]], "vectorsize (word2vecapproach attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.vectorSize"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.vectorSize"]], "vectorsize (word2vecmodel attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.vectorSize"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.vectorSize"]], "windowsize (word2vecapproach attribute)": [[114, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.windowSize"], [363, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.windowSize"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "databases (wordembeddingsmodel attribute)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.databases"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.databases"]], "inputannotatortypes (wordembeddings attribute)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.inputAnnotatorTypes"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.inputAnnotatorTypes"]], "inputannotatortypes (wordembeddingsmodel attribute)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.inputAnnotatorTypes"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.inputAnnotatorTypes"]], "loadstorage() (wordembeddingsmodel static method)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "name (wordembeddings attribute)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.name"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.name"]], "name (wordembeddingsmodel attribute)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.name"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.name"]], "outputannotatortype (wordembeddings attribute)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.outputAnnotatorType"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.outputAnnotatorType"]], "outputannotatortype (wordembeddingsmodel attribute)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.outputAnnotatorType"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.outputAnnotatorType"]], "overallcoverage() (wordembeddingsmodel static method)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "readcachesize (wordembeddings attribute)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.readCacheSize"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.readCacheSize"]], "readcachesize (wordembeddingsmodel attribute)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.readCacheSize"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.readCacheSize"]], "setreadcachesize() (wordembeddings method)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[115, "module-sparknlp.annotator.embeddings.word_embeddings"], [364, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "writebuffersize (wordembeddings attribute)": [[115, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.writeBufferSize"], [364, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.writeBufferSize"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"], [365, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "configprotobytes (xlmrobertaembeddings attribute)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.configProtoBytes"], [365, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertaembeddings attribute)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.inputAnnotatorTypes"], [365, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"], [365, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "name (xlmrobertaembeddings attribute)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.name"], [365, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.name"]], "outputannotatortype (xlmrobertaembeddings attribute)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.outputAnnotatorType"], [365, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertaembeddings static method)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"], [365, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[116, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"], [365, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[116, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [365, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[117, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"], [366, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "configprotobytes (xlmrobertasentenceembeddings attribute)": [[117, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.configProtoBytes"], [366, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertasentenceembeddings attribute)": [[117, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.inputAnnotatorTypes"], [366, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[117, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"], [366, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "name (xlmrobertasentenceembeddings attribute)": [[117, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.name"], [366, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.name"]], "outputannotatortype (xlmrobertasentenceembeddings attribute)": [[117, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.outputAnnotatorType"], [366, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[117, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"], [366, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[117, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"], [366, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[117, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [366, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[118, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"], [367, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "configprotobytes (xlnetembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.configProtoBytes"], [367, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.configProtoBytes"]], "inputannotatortypes (xlnetembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.inputAnnotatorTypes"], [367, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetembeddings static method)": [[118, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"], [367, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "name (xlnetembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.name"], [367, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.name"]], "outputannotatortype (xlnetembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.outputAnnotatorType"], [367, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.outputAnnotatorType"]], "pretrained() (xlnetembeddings static method)": [[118, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"], [367, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[118, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"], [367, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[118, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [367, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er": [[119, "module-sparknlp.annotator.er"], [369, "module-sparknlp.annotator.er"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "alphabet (entityrulerapproach attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.alphabet"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.alphabet"]], "database (entityrulermodel attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.database"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.database"]], "inputannotatortypes (entityrulerapproach attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.inputAnnotatorTypes"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.inputAnnotatorTypes"]], "inputannotatortypes (entityrulermodel attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.inputAnnotatorTypes"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.inputAnnotatorTypes"]], "loadstorage() (entityrulermodel static method)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.loadStorage"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.loadStorage"]], "name (entityrulerapproach attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.name"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.name"]], "name (entityrulermodel attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.name"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.name"]], "optionalinputannotatortypes (entityrulerapproach attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.optionalInputAnnotatorTypes"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (entityrulermodel attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.optionalInputAnnotatorTypes"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (entityrulerapproach attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.outputAnnotatorType"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.outputAnnotatorType"]], "outputannotatortype (entityrulermodel attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.outputAnnotatorType"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.outputAnnotatorType"]], "patternsresource (entityrulerapproach attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.patternsResource"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.patternsResource"]], "pretrained() (entityrulermodel static method)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.pretrained"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.pretrained"]], "sentencematch (entityrulerapproach attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.sentenceMatch"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.sentenceMatch"]], "setalphabetresource() (entityrulerapproach method)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[120, "module-sparknlp.annotator.er.entity_ruler"], [368, "module-sparknlp.annotator.er.entity_ruler"]], "usestorage (entityrulerapproach attribute)": [[120, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.useStorage"], [368, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.useStorage"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "delimiter (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.delimiter"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.delimiter"]], "dependencyparsermodel (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.dependencyParserModel"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.dependencyParserModel"]], "entitytypes (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.entityTypes"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.entityTypes"]], "explodeentities (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.explodeEntities"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.explodeEntities"]], "includeedges (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.includeEdges"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.includeEdges"]], "inputannotatortypes (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.inputAnnotatorTypes"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.inputAnnotatorTypes"]], "maxsentencesize (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.maxSentenceSize"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.maxSentenceSize"]], "mergeentities (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntities"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntities"]], "mergeentitiesiobformat (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntitiesIOBFormat"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntitiesIOBFormat"]], "minsentencesize (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.minSentenceSize"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.minSentenceSize"]], "name (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.name"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.name"]], "optionalinputannotatortypes (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.optionalInputAnnotatorTypes"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.optionalInputAnnotatorTypes"]], "outputannotatortype (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.outputAnnotatorType"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.outputAnnotatorType"]], "posmodel (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.posModel"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.posModel"]], "relationshiptypes (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.relationshipTypes"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.relationshipTypes"]], "roottokens (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.rootTokens"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.rootTokens"]], "setdelimiter() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[121, "module-sparknlp.annotator.graph_extraction"], [370, "module-sparknlp.annotator.graph_extraction"]], "typeddependencyparsermodel (graphextraction attribute)": [[121, "sparknlp.annotator.graph_extraction.GraphExtraction.typedDependencyParserModel"], [370, "sparknlp.annotator.graph_extraction.GraphExtraction.typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[122, "module-sparknlp.annotator.keyword_extraction"], [372, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "inputannotatortypes (yakekeywordextraction attribute)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.inputAnnotatorTypes"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.inputAnnotatorTypes"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "maxngrams (yakekeywordextraction attribute)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.maxNGrams"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.maxNGrams"]], "minngrams (yakekeywordextraction attribute)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.minNGrams"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.minNGrams"]], "nkeywords (yakekeywordextraction attribute)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.nKeywords"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.nKeywords"]], "name (yakekeywordextraction attribute)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.name"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.name"]], "outputannotatortype (yakekeywordextraction attribute)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.outputAnnotatorType"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.outputAnnotatorType"]], "setmaxngrams() (yakekeywordextraction method)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[123, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [373, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "stopwords (yakekeywordextraction attribute)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.stopWords"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.stopWords"]], "threshold (yakekeywordextraction attribute)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.threshold"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.threshold"]], "windowsize (yakekeywordextraction attribute)": [[123, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.windowSize"], [373, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.windowSize"]], "sparknlp.annotator.ld_dl": [[124, "module-sparknlp.annotator.ld_dl"], [374, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "coalescesentences (languagedetectordl attribute)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.coalesceSentences"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.coalesceSentences"]], "configprotobytes (languagedetectordl attribute)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.configProtoBytes"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.configProtoBytes"]], "inputannotatortypes (languagedetectordl attribute)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.inputAnnotatorTypes"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.inputAnnotatorTypes"]], "languages (languagedetectordl attribute)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.languages"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.languages"]], "name (languagedetectordl attribute)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.name"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.name"]], "outputannotatortype (languagedetectordl attribute)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.outputAnnotatorType"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.outputAnnotatorType"]], "pretrained() (languagedetectordl static method)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[125, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [375, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "threshold (languagedetectordl attribute)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.threshold"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.threshold"]], "thresholdlabel (languagedetectordl attribute)": [[125, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.thresholdLabel"], [375, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.thresholdLabel"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[126, "sparknlp.annotator.lemmatizer.Lemmatizer"], [376, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[126, "sparknlp.annotator.lemmatizer.LemmatizerModel"], [376, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "dictionary (lemmatizer attribute)": [[126, "sparknlp.annotator.lemmatizer.Lemmatizer.dictionary"], [376, "sparknlp.annotator.lemmatizer.Lemmatizer.dictionary"]], "formcol (lemmatizer attribute)": [[126, "sparknlp.annotator.lemmatizer.Lemmatizer.formCol"], [376, "sparknlp.annotator.lemmatizer.Lemmatizer.formCol"]], "inputannotatortypes (lemmatizer attribute)": [[126, "sparknlp.annotator.lemmatizer.Lemmatizer.inputAnnotatorTypes"], [376, "sparknlp.annotator.lemmatizer.Lemmatizer.inputAnnotatorTypes"]], "inputannotatortypes (lemmatizermodel attribute)": [[126, "sparknlp.annotator.lemmatizer.LemmatizerModel.inputAnnotatorTypes"], [376, "sparknlp.annotator.lemmatizer.LemmatizerModel.inputAnnotatorTypes"]], "lemmacol (lemmatizer attribute)": [[126, "sparknlp.annotator.lemmatizer.Lemmatizer.lemmaCol"], [376, "sparknlp.annotator.lemmatizer.Lemmatizer.lemmaCol"]], "name (lemmatizermodel attribute)": [[126, "sparknlp.annotator.lemmatizer.LemmatizerModel.name"], [376, "sparknlp.annotator.lemmatizer.LemmatizerModel.name"]], "outputannotatortype (lemmatizer attribute)": [[126, "sparknlp.annotator.lemmatizer.Lemmatizer.outputAnnotatorType"], [376, "sparknlp.annotator.lemmatizer.Lemmatizer.outputAnnotatorType"]], "outputannotatortype (lemmatizermodel attribute)": [[126, "sparknlp.annotator.lemmatizer.LemmatizerModel.outputAnnotatorType"], [376, "sparknlp.annotator.lemmatizer.LemmatizerModel.outputAnnotatorType"]], "pretrained() (lemmatizermodel static method)": [[126, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"], [376, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[126, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"], [376, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[126, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"], [376, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[126, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"], [376, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[126, "module-sparknlp.annotator.lemmatizer"], [376, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher": [[127, "module-sparknlp.annotator.matcher"], [379, "module-sparknlp.annotator.matcher"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "casesensitive (bigtextmatcher attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.caseSensitive"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.caseSensitive"]], "casesensitive (bigtextmatchermodel attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.caseSensitive"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.caseSensitive"]], "databases (bigtextmatchermodel attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.databases"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.databases"]], "entities (bigtextmatcher attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.entities"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.entities"]], "inputannotatortypes (bigtextmatcher attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.inputAnnotatorTypes"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (bigtextmatchermodel attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.inputAnnotatorTypes"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.inputAnnotatorTypes"]], "loadstorage() (bigtextmatchermodel static method)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "mergeoverlapping (bigtextmatcher attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.mergeOverlapping"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.mergeOverlapping"]], "mergeoverlapping (bigtextmatchermodel attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.mergeOverlapping"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.mergeOverlapping"]], "name (bigtextmatchermodel attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.name"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.name"]], "outputannotatortype (bigtextmatcher attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.outputAnnotatorType"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.outputAnnotatorType"]], "outputannotatortype (bigtextmatchermodel attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.outputAnnotatorType"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.outputAnnotatorType"]], "pretrained() (bigtextmatchermodel static method)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "searchtrie (bigtextmatchermodel attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.searchTrie"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.searchTrie"]], "setcasesensitive() (bigtextmatcher method)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[128, "module-sparknlp.annotator.matcher.big_text_matcher"], [377, "module-sparknlp.annotator.matcher.big_text_matcher"]], "tokenizer (bigtextmatcher attribute)": [[128, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.tokenizer"], [377, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.tokenizer"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcher"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "aggressivematching (datematcherutils attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.aggressiveMatching"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.aggressiveMatching"]], "anchordateday (datematcherutils attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateDay"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateDay"]], "anchordatemonth (datematcherutils attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateMonth"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateMonth"]], "anchordateyear (datematcherutils attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateYear"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateYear"]], "defaultdaywhenmissing (datematcherutils attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.defaultDayWhenMissing"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.defaultDayWhenMissing"]], "inputannotatortypes (datematcher attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcher.inputAnnotatorTypes"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcher.inputAnnotatorTypes"]], "inputformats (datematcherutils attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.inputFormats"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.inputFormats"]], "name (datematcher attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcher.name"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcher.name"]], "outputannotatortype (datematcher attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcher.outputAnnotatorType"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcher.outputAnnotatorType"]], "outputformat (datematcherutils attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.outputFormat"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.outputFormat"]], "readmonthfirst (datematcherutils attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.readMonthFirst"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.readMonthFirst"]], "relaxedfactorystrategy (datematcherutils attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.relaxedFactoryStrategy"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.relaxedFactoryStrategy"]], "setaggressivematching() (datematcherutils method)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"]], "setanchordateday() (datematcherutils method)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "setsourcelanguage() (datematcherutils method)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setSourceLanguage"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setSourceLanguage"]], "sourcelanguage (datematcherutils attribute)": [[129, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.sourceLanguage"], [378, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.sourceLanguage"]], "sparknlp.annotator.matcher.date_matcher": [[129, "module-sparknlp.annotator.matcher.date_matcher"], [378, "module-sparknlp.annotator.matcher.date_matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[130, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"], [380, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "inputannotatortypes (multidatematcher attribute)": [[130, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.inputAnnotatorTypes"], [380, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.inputAnnotatorTypes"]], "name (multidatematcher attribute)": [[130, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.name"], [380, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.name"]], "outputannotatortype (multidatematcher attribute)": [[130, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.outputAnnotatorType"], [380, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.outputAnnotatorType"]], "sparknlp.annotator.matcher.multi_date_matcher": [[130, "module-sparknlp.annotator.matcher.multi_date_matcher"], [380, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "delimiter (regexmatcher attribute)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.delimiter"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.delimiter"]], "externalrules (regexmatcher attribute)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.externalRules"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.externalRules"]], "inputannotatortypes (regexmatcher attribute)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.inputAnnotatorTypes"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.inputAnnotatorTypes"]], "inputannotatortypes (regexmatchermodel attribute)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.inputAnnotatorTypes"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.inputAnnotatorTypes"]], "name (regexmatchermodel attribute)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.name"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.name"]], "outputannotatortype (regexmatcher attribute)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.outputAnnotatorType"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.outputAnnotatorType"]], "outputannotatortype (regexmatchermodel attribute)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.outputAnnotatorType"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.outputAnnotatorType"]], "rules (regexmatcher attribute)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.rules"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.rules"]], "setdelimiter() (regexmatcher method)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[131, "module-sparknlp.annotator.matcher.regex_matcher"], [381, "module-sparknlp.annotator.matcher.regex_matcher"]], "strategy (regexmatcher attribute)": [[131, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.strategy"], [381, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.strategy"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "buildfromtokens (textmatcher attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.buildFromTokens"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.buildFromTokens"]], "buildfromtokens (textmatchermodel attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.buildFromTokens"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.buildFromTokens"]], "casesensitive (textmatcher attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.caseSensitive"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.caseSensitive"]], "entities (textmatcher attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entities"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entities"]], "entityvalue (textmatcher attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entityValue"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entityValue"]], "entityvalue (textmatchermodel attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.entityValue"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.entityValue"]], "inputannotatortypes (textmatcher attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.inputAnnotatorTypes"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (textmatchermodel attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.inputAnnotatorTypes"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.inputAnnotatorTypes"]], "mergeoverlapping (textmatcher attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.mergeOverlapping"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.mergeOverlapping"]], "mergeoverlapping (textmatchermodel attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.mergeOverlapping"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.mergeOverlapping"]], "name (textmatchermodel attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.name"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.name"]], "outputannotatortype (textmatcher attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.outputAnnotatorType"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.outputAnnotatorType"]], "outputannotatortype (textmatchermodel attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.outputAnnotatorType"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.outputAnnotatorType"]], "pretrained() (textmatchermodel static method)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "searchtrie (textmatchermodel attribute)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.searchTrie"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.searchTrie"]], "setbuildfromtokens() (textmatcher method)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[132, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"], [382, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[132, "module-sparknlp.annotator.matcher.text_matcher"], [382, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[133, "sparknlp.annotator.n_gram_generator.NGramGenerator"], [383, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "delimiter (ngramgenerator attribute)": [[133, "sparknlp.annotator.n_gram_generator.NGramGenerator.delimiter"], [383, "sparknlp.annotator.n_gram_generator.NGramGenerator.delimiter"]], "enablecumulative (ngramgenerator attribute)": [[133, "sparknlp.annotator.n_gram_generator.NGramGenerator.enableCumulative"], [383, "sparknlp.annotator.n_gram_generator.NGramGenerator.enableCumulative"]], "inputannotatortypes (ngramgenerator attribute)": [[133, "sparknlp.annotator.n_gram_generator.NGramGenerator.inputAnnotatorTypes"], [383, "sparknlp.annotator.n_gram_generator.NGramGenerator.inputAnnotatorTypes"]], "n (ngramgenerator attribute)": [[133, "sparknlp.annotator.n_gram_generator.NGramGenerator.n"], [383, "sparknlp.annotator.n_gram_generator.NGramGenerator.n"]], "name (ngramgenerator attribute)": [[133, "sparknlp.annotator.n_gram_generator.NGramGenerator.name"], [383, "sparknlp.annotator.n_gram_generator.NGramGenerator.name"]], "outputannotatortype (ngramgenerator attribute)": [[133, "sparknlp.annotator.n_gram_generator.NGramGenerator.outputAnnotatorType"], [383, "sparknlp.annotator.n_gram_generator.NGramGenerator.outputAnnotatorType"]], "setdelimiter() (ngramgenerator method)": [[133, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"], [383, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[133, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"], [383, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[133, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"], [383, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[133, "module-sparknlp.annotator.n_gram_generator"], [383, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[134, "module-sparknlp.annotator.ner"], [384, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "entities (nerapproach attribute)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach.entities"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach.entities"]], "getlabelcolumn() (nerapproach method)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "labelcolumn (nerapproach attribute)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach.labelColumn"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach.labelColumn"]], "maxepochs (nerapproach attribute)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach.maxEpochs"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach.maxEpochs"]], "minepochs (nerapproach attribute)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach.minEpochs"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach.minEpochs"]], "randomseed (nerapproach attribute)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach.randomSeed"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach.randomSeed"]], "setentities() (nerapproach method)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[135, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"], [385, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[135, "module-sparknlp.annotator.ner.ner_approach"], [385, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[136, "sparknlp.annotator.ner.ner_converter.NerConverter"], [386, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "inputannotatortypes (nerconverter attribute)": [[136, "sparknlp.annotator.ner.ner_converter.NerConverter.inputAnnotatorTypes"], [386, "sparknlp.annotator.ner.ner_converter.NerConverter.inputAnnotatorTypes"]], "name (nerconverter attribute)": [[136, "sparknlp.annotator.ner.ner_converter.NerConverter.name"], [386, "sparknlp.annotator.ner.ner_converter.NerConverter.name"]], "nerhasnoschema (nerconverter attribute)": [[136, "sparknlp.annotator.ner.ner_converter.NerConverter.nerHasNoSchema"], [386, "sparknlp.annotator.ner.ner_converter.NerConverter.nerHasNoSchema"]], "outputannotatortype (nerconverter attribute)": [[136, "sparknlp.annotator.ner.ner_converter.NerConverter.outputAnnotatorType"], [386, "sparknlp.annotator.ner.ner_converter.NerConverter.outputAnnotatorType"]], "preserveposition (nerconverter attribute)": [[136, "sparknlp.annotator.ner.ner_converter.NerConverter.preservePosition"], [386, "sparknlp.annotator.ner.ner_converter.NerConverter.preservePosition"]], "setnerhasnoschema() (nerconverter method)": [[136, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"], [386, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[136, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"], [386, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[136, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"], [386, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[136, "module-sparknlp.annotator.ner.ner_converter"], [386, "module-sparknlp.annotator.ner.ner_converter"]], "whitelist (nerconverter attribute)": [[136, "sparknlp.annotator.ner.ner_converter.NerConverter.whiteList"], [386, "sparknlp.annotator.ner.ner_converter.NerConverter.whiteList"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfModel"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "c0 (nercrfapproach attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.c0"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.c0"]], "externalfeatures (nercrfapproach attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.externalFeatures"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.externalFeatures"]], "includeconfidence (nercrfapproach attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.includeConfidence"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.includeConfidence"]], "includeconfidence (nercrfmodel attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfModel.includeConfidence"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfModel.includeConfidence"]], "inputannotatortypes (nercrfapproach attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.inputAnnotatorTypes"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.inputAnnotatorTypes"]], "inputannotatortypes (nercrfmodel attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfModel.inputAnnotatorTypes"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfModel.inputAnnotatorTypes"]], "l2 (nercrfapproach attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.l2"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.l2"]], "losseps (nercrfapproach attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.lossEps"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.lossEps"]], "minw (nercrfapproach attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.minW"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.minW"]], "name (nercrfmodel attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfModel.name"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfModel.name"]], "outputannotatortype (nercrfapproach attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.outputAnnotatorType"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.outputAnnotatorType"]], "outputannotatortype (nercrfmodel attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfModel.outputAnnotatorType"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfModel.outputAnnotatorType"]], "pretrained() (nercrfmodel static method)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[137, "module-sparknlp.annotator.ner.ner_crf"], [387, "module-sparknlp.annotator.ner.ner_crf"]], "verbose (nercrfapproach attribute)": [[137, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.verbose"], [387, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.verbose"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "batchsize (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.batchSize"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.batchSize"]], "bestmodelmetric (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.bestModelMetric"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.bestModelMetric"]], "classes (nerdlmodel attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel.classes"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel.classes"]], "configprotobytes (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.configProtoBytes"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.configProtoBytes"]], "configprotobytes (nerdlmodel attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel.configProtoBytes"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel.configProtoBytes"]], "dropout (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.dropout"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.dropout"]], "enablememoryoptimizer (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.enableMemoryOptimizer"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.enableMemoryOptimizer"]], "graphfolder (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.graphFolder"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.graphFolder"]], "includeallconfidencescores (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeAllConfidenceScores"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeAllConfidenceScores"]], "includeallconfidencescores (nerdlmodel attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeAllConfidenceScores"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeAllConfidenceScores"]], "includeconfidence (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeConfidence"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeConfidence"]], "includeconfidence (nerdlmodel attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeConfidence"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeConfidence"]], "inputannotatortypes (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.inputAnnotatorTypes"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (nerdlmodel attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel.inputAnnotatorTypes"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel.inputAnnotatorTypes"]], "lr (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.lr"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.lr"]], "name (nerdlmodel attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel.name"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel.name"]], "outputannotatortype (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.outputAnnotatorType"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.outputAnnotatorType"]], "outputannotatortype (nerdlmodel attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel.outputAnnotatorType"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel.outputAnnotatorType"]], "po (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.po"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.po"]], "pretrained() (nerdlmodel static method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"], [388, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[138, "module-sparknlp.annotator.ner.ner_dl"], [388, "module-sparknlp.annotator.ner.ner_dl"]], "usebestmodel (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useBestModel"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useBestModel"]], "usecontrib (nerdlapproach attribute)": [[138, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useContrib"], [388, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useContrib"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[139, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"], [389, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "inputannotatortypes (neroverwriter attribute)": [[139, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.inputAnnotatorTypes"], [389, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.inputAnnotatorTypes"]], "name (neroverwriter attribute)": [[139, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.name"], [389, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.name"]], "nerwords (neroverwriter attribute)": [[139, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.nerWords"], [389, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.nerWords"]], "newnerentity (neroverwriter attribute)": [[139, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.newNerEntity"], [389, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.newNerEntity"]], "outputannotatortype (neroverwriter attribute)": [[139, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.outputAnnotatorType"], [389, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.outputAnnotatorType"]], "replaceentities (neroverwriter attribute)": [[139, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.replaceEntities"], [389, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.replaceEntities"]], "setnerwords() (neroverwriter method)": [[139, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"], [389, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[139, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"], [389, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[139, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"], [389, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[139, "module-sparknlp.annotator.ner.ner_overwriter"], [389, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[140, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"], [390, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[140, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"], [390, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[140, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.ignoreEntities"], [390, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[140, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.inputAnnotatorTypes"], [390, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[140, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"], [390, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[140, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.name"], [390, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[140, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.outputAnnotatorType"], [390, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[140, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.predictionThreshold"], [390, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[140, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"], [390, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[140, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"], [390, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[140, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"], [390, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[140, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [390, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[141, "sparknlp.annotator.normalizer.Normalizer"], [391, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[141, "sparknlp.annotator.normalizer.NormalizerModel"], [391, "sparknlp.annotator.normalizer.NormalizerModel"]], "cleanuppatterns (normalizer attribute)": [[141, "sparknlp.annotator.normalizer.Normalizer.cleanupPatterns"], [391, "sparknlp.annotator.normalizer.Normalizer.cleanupPatterns"]], "cleanuppatterns (normalizermodel attribute)": [[141, "sparknlp.annotator.normalizer.NormalizerModel.cleanupPatterns"], [391, "sparknlp.annotator.normalizer.NormalizerModel.cleanupPatterns"]], "inputannotatortypes (normalizer attribute)": [[141, "sparknlp.annotator.normalizer.Normalizer.inputAnnotatorTypes"], [391, "sparknlp.annotator.normalizer.Normalizer.inputAnnotatorTypes"]], "inputannotatortypes (normalizermodel attribute)": [[141, "sparknlp.annotator.normalizer.NormalizerModel.inputAnnotatorTypes"], [391, "sparknlp.annotator.normalizer.NormalizerModel.inputAnnotatorTypes"]], "lowercase (normalizer attribute)": [[141, "sparknlp.annotator.normalizer.Normalizer.lowercase"], [391, "sparknlp.annotator.normalizer.Normalizer.lowercase"]], "lowercase (normalizermodel attribute)": [[141, "sparknlp.annotator.normalizer.NormalizerModel.lowercase"], [391, "sparknlp.annotator.normalizer.NormalizerModel.lowercase"]], "maxlength (normalizer attribute)": [[141, "sparknlp.annotator.normalizer.Normalizer.maxLength"], [391, "sparknlp.annotator.normalizer.Normalizer.maxLength"]], "minlength (normalizer attribute)": [[141, "sparknlp.annotator.normalizer.Normalizer.minLength"], [391, "sparknlp.annotator.normalizer.Normalizer.minLength"]], "name (normalizermodel attribute)": [[141, "sparknlp.annotator.normalizer.NormalizerModel.name"], [391, "sparknlp.annotator.normalizer.NormalizerModel.name"]], "outputannotatortype (normalizer attribute)": [[141, "sparknlp.annotator.normalizer.Normalizer.outputAnnotatorType"], [391, "sparknlp.annotator.normalizer.Normalizer.outputAnnotatorType"]], "outputannotatortype (normalizermodel attribute)": [[141, "sparknlp.annotator.normalizer.NormalizerModel.outputAnnotatorType"], [391, "sparknlp.annotator.normalizer.NormalizerModel.outputAnnotatorType"]], "setcleanuppatterns() (normalizer method)": [[141, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"], [391, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[141, "sparknlp.annotator.normalizer.Normalizer.setLowercase"], [391, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[141, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"], [391, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[141, "sparknlp.annotator.normalizer.Normalizer.setMinLength"], [391, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[141, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"], [391, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "slangdictionary (normalizer attribute)": [[141, "sparknlp.annotator.normalizer.Normalizer.slangDictionary"], [391, "sparknlp.annotator.normalizer.Normalizer.slangDictionary"]], "slangmatchcase (normalizer attribute)": [[141, "sparknlp.annotator.normalizer.Normalizer.slangMatchCase"], [391, "sparknlp.annotator.normalizer.Normalizer.slangMatchCase"]], "slangmatchcase (normalizermodel attribute)": [[141, "sparknlp.annotator.normalizer.NormalizerModel.slangMatchCase"], [391, "sparknlp.annotator.normalizer.NormalizerModel.slangMatchCase"]], "sparknlp.annotator.normalizer": [[141, "module-sparknlp.annotator.normalizer"], [391, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[142, "module-sparknlp.annotator.openai"], [392, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "bestof (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.bestOf"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.bestOf"]], "echo (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.echo"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.echo"]], "frequencypenalty (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.frequencyPenalty"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.frequencyPenalty"]], "inputannotatortypes (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.inputAnnotatorTypes"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.inputAnnotatorTypes"]], "logitbias (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logitBias"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logitBias"]], "logprobs (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logprobs"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logprobs"]], "maxtokens (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.maxTokens"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.maxTokens"]], "model (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.model"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.model"]], "name (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.name"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.name"]], "numberofcompletions (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.numberOfCompletions"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.numberOfCompletions"]], "outputannotatortype (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.outputAnnotatorType"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.outputAnnotatorType"]], "presencepenalty (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.presencePenalty"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.presencePenalty"]], "setbestof() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[143, "module-sparknlp.annotator.openai.openai_completion"], [393, "module-sparknlp.annotator.openai.openai_completion"]], "stop (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.stop"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.stop"]], "suffix (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.suffix"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.suffix"]], "temperature (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.temperature"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.temperature"]], "topp (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.topP"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.topP"]], "user (openaicompletion attribute)": [[143, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.user"], [393, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.user"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[144, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"], [394, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "inputannotatortypes (openaiembeddings attribute)": [[144, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.inputAnnotatorTypes"], [394, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.inputAnnotatorTypes"]], "model (openaiembeddings attribute)": [[144, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.model"], [394, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.model"]], "name (openaiembeddings attribute)": [[144, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.name"], [394, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.name"]], "outputannotatortype (openaiembeddings attribute)": [[144, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.outputAnnotatorType"], [394, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.outputAnnotatorType"]], "setmodel() (openaiembeddings method)": [[144, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"], [394, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[144, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"], [394, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[144, "module-sparknlp.annotator.openai.openai_embeddings"], [394, "module-sparknlp.annotator.openai.openai_embeddings"]], "user (openaiembeddings attribute)": [[144, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.user"], [394, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.user"]], "sparknlp.annotator.param": [[145, "module-sparknlp.annotator.param"], [397, "module-sparknlp.annotator.param"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "batchsize (classifierencoder attribute)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.batchSize"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.batchSize"]], "configprotobytes (classifierencoder attribute)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.configProtoBytes"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.configProtoBytes"]], "labelcolumn (classifierencoder attribute)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.labelColumn"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.labelColumn"]], "lr (classifierencoder attribute)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.lr"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.lr"]], "maxepochs (classifierencoder attribute)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.maxEpochs"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.maxEpochs"]], "randomseed (classifierencoder attribute)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.randomSeed"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.randomSeed"]], "setbatchsize() (classifierencoder method)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[146, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"], [395, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[146, "module-sparknlp.annotator.param.classifier_encoder"], [395, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "enableoutputlogs (evaluationdlparams attribute)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.enableOutputLogs"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.enableOutputLogs"]], "evaluationlogextended (evaluationdlparams attribute)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.evaluationLogExtended"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.evaluationLogExtended"]], "outputlogspath (evaluationdlparams attribute)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.outputLogsPath"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.outputLogsPath"]], "setenableoutputlogs() (evaluationdlparams method)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[147, "module-sparknlp.annotator.param.evaluation_dl_params"], [396, "module-sparknlp.annotator.param.evaluation_dl_params"]], "testdataset (evaluationdlparams attribute)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.testDataset"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.testDataset"]], "validationsplit (evaluationdlparams attribute)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.validationSplit"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.validationSplit"]], "verbose (evaluationdlparams attribute)": [[147, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.verbose"], [396, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.verbose"]], "sparknlp.annotator.pos": [[148, "module-sparknlp.annotator.pos"], [398, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronApproach"], [399, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronModel"], [399, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"], [399, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "inputannotatortypes (perceptronapproach attribute)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronApproach.inputAnnotatorTypes"], [399, "sparknlp.annotator.pos.perceptron.PerceptronApproach.inputAnnotatorTypes"]], "inputannotatortypes (perceptronmodel attribute)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronModel.inputAnnotatorTypes"], [399, "sparknlp.annotator.pos.perceptron.PerceptronModel.inputAnnotatorTypes"]], "niterations (perceptronapproach attribute)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronApproach.nIterations"], [399, "sparknlp.annotator.pos.perceptron.PerceptronApproach.nIterations"]], "name (perceptronmodel attribute)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronModel.name"], [399, "sparknlp.annotator.pos.perceptron.PerceptronModel.name"]], "outputannotatortype (perceptronapproach attribute)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronApproach.outputAnnotatorType"], [399, "sparknlp.annotator.pos.perceptron.PerceptronApproach.outputAnnotatorType"]], "outputannotatortype (perceptronmodel attribute)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronModel.outputAnnotatorType"], [399, "sparknlp.annotator.pos.perceptron.PerceptronModel.outputAnnotatorType"]], "poscol (perceptronapproach attribute)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronApproach.posCol"], [399, "sparknlp.annotator.pos.perceptron.PerceptronApproach.posCol"]], "pretrained() (perceptronmodel static method)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"], [399, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"], [399, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[149, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"], [399, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[149, "module-sparknlp.annotator.pos.perceptron"], [399, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[150, "module-sparknlp.annotator.sentence"], [400, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "custombounds (sentencedetectorparams attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBounds"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBounds"]], "customboundsstrategy (sentencedetectorparams attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBoundsStrategy"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBoundsStrategy"]], "detectlists (sentencedetector attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.detectLists"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.detectLists"]], "explodesentences (sentencedetectorparams attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.explodeSentences"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.explodeSentences"]], "inputannotatortypes (sentencedetector attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.inputAnnotatorTypes"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.inputAnnotatorTypes"]], "maxlength (sentencedetectorparams attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.maxLength"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.maxLength"]], "minlength (sentencedetectorparams attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.minLength"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.minLength"]], "name (sentencedetector attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.name"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.name"]], "outputannotatortype (sentencedetector attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.outputAnnotatorType"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.outputAnnotatorType"]], "setcustombounds() (sentencedetector method)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[151, "module-sparknlp.annotator.sentence.sentence_detector"], [401, "module-sparknlp.annotator.sentence.sentence_detector"]], "splitlength (sentencedetectorparams attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.splitLength"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.splitLength"]], "useabbreviations (sentencedetectorparams attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useAbbreviations"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useAbbreviations"]], "usecustomboundsonly (sentencedetectorparams attribute)": [[151, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useCustomBoundsOnly"], [401, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useCustomBoundsOnly"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "custombounds (sentencedetectordlmodel attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.customBounds"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.customBounds"]], "epochsnumber (sentencedetectordlapproach attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.epochsNumber"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.epochsNumber"]], "explodesentences (sentencedetectordlapproach attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.explodeSentences"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.explodeSentences"]], "explodesentences (sentencedetectordlmodel attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.explodeSentences"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.explodeSentences"]], "impossiblepenultimates (sentencedetectordlapproach attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.impossiblePenultimates"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.impossiblePenultimates"]], "impossiblepenultimates (sentencedetectordlmodel attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.impossiblePenultimates"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.impossiblePenultimates"]], "inputannotatortypes (sentencedetectordlapproach attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.inputAnnotatorTypes"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentencedetectordlmodel attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.inputAnnotatorTypes"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.inputAnnotatorTypes"]], "maxlength (sentencedetectordlmodel attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.maxLength"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.maxLength"]], "minlength (sentencedetectordlmodel attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.minLength"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.minLength"]], "modelarchitecture (sentencedetectordlapproach attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.modelArchitecture"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.modelArchitecture"]], "modelarchitecture (sentencedetectordlmodel attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.modelArchitecture"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.modelArchitecture"]], "name (sentencedetectordlapproach attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.name"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.name"]], "name (sentencedetectordlmodel attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.name"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.name"]], "outputannotatortype (sentencedetectordlapproach attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputAnnotatorType"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputAnnotatorType"]], "outputannotatortype (sentencedetectordlmodel attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.outputAnnotatorType"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.outputAnnotatorType"]], "outputlogspath (sentencedetectordlapproach attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputLogsPath"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputLogsPath"]], "pretrained() (sentencedetectordlmodel static method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[152, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [402, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "splitlength (sentencedetectordlmodel attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.splitLength"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.splitLength"]], "usecustomboundsonly (sentencedetectordlmodel attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.useCustomBoundsOnly"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.useCustomBoundsOnly"]], "validationsplit (sentencedetectordlapproach attribute)": [[152, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.validationSplit"], [402, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.validationSplit"]], "sparknlp.annotator.sentiment": [[153, "module-sparknlp.annotator.sentiment"], [403, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "decrementmultiplier (sentimentdetector attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.decrementMultiplier"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.decrementMultiplier"]], "dictionary (sentimentdetector attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.dictionary"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.dictionary"]], "enablescore (sentimentdetector attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.enableScore"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.enableScore"]], "incrementmultiplier (sentimentdetector attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.incrementMultiplier"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.incrementMultiplier"]], "inputannotatortypes (sentimentdetector attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.inputAnnotatorTypes"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdetectormodel attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.inputAnnotatorTypes"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.inputAnnotatorTypes"]], "name (sentimentdetectormodel attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.name"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.name"]], "negativemultiplier (sentimentdetector attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.negativeMultiplier"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.negativeMultiplier"]], "outputannotatortype (sentimentdetector attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.outputAnnotatorType"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.outputAnnotatorType"]], "outputannotatortype (sentimentdetectormodel attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.outputAnnotatorType"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.outputAnnotatorType"]], "positivemultiplier (sentimentdetector attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.positiveMultiplier"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.positiveMultiplier"]], "positivemultiplier (sentimentdetectormodel attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.positiveMultiplier"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.positiveMultiplier"]], "reversemultiplier (sentimentdetector attribute)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.reverseMultiplier"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.reverseMultiplier"]], "setdictionary() (sentimentdetector method)": [[154, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"], [404, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[154, "module-sparknlp.annotator.sentiment.sentiment_detector"], [404, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "featurelimit (viveknsentimentapproach attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.featureLimit"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.featureLimit"]], "featurelimit (viveknsentimentmodel attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.featureLimit"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.featureLimit"]], "importantfeatureratio (viveknsentimentapproach attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.importantFeatureRatio"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.importantFeatureRatio"]], "importantfeatureratio (viveknsentimentmodel attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.importantFeatureRatio"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.importantFeatureRatio"]], "inputannotatortypes (viveknsentimentapproach attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.inputAnnotatorTypes"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.inputAnnotatorTypes"]], "inputannotatortypes (viveknsentimentmodel attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.inputAnnotatorTypes"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.inputAnnotatorTypes"]], "name (viveknsentimentmodel attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.name"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.name"]], "outputannotatortype (viveknsentimentapproach attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.outputAnnotatorType"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.outputAnnotatorType"]], "outputannotatortype (viveknsentimentmodel attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.outputAnnotatorType"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.outputAnnotatorType"]], "pretrained() (viveknsentimentmodel static method)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "prunecorpus (viveknsentimentapproach attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.pruneCorpus"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.pruneCorpus"]], "sentimentcol (viveknsentimentapproach attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.sentimentCol"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.sentimentCol"]], "setprunecorpus() (viveknsentimentapproach method)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[155, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [405, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "unimportantfeaturestep (viveknsentimentapproach attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.unimportantFeatureStep"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.unimportantFeatureStep"]], "unimportantfeaturestep (viveknsentimentmodel attribute)": [[155, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.unimportantFeatureStep"], [405, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[156, "module-sparknlp.annotator.seq2seq"], [412, "module-sparknlp.annotator.seq2seq"]], "autoggufmodel (class in sparknlp.annotator.seq2seq.auto_gguf_model)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"], [406, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"]], "inputannotatortypes (autoggufmodel attribute)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.inputAnnotatorTypes"], [406, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufmodel static method)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"], [406, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"]], "name (autoggufmodel attribute)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.name"], [406, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.name"]], "outputannotatortype (autoggufmodel attribute)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.outputAnnotatorType"], [406, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.outputAnnotatorType"]], "pretrained() (autoggufmodel static method)": [[157, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"], [406, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[157, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [406, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "autoggufvisionmodel (class in sparknlp.annotator.seq2seq.auto_gguf_vision_model)": [[158, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel"], [407, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel"]], "inputannotatortypes (autoggufvisionmodel attribute)": [[158, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.inputAnnotatorTypes"], [407, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufvisionmodel static method)": [[158, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.loadSavedModel"], [407, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.loadSavedModel"]], "name (autoggufvisionmodel attribute)": [[158, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.name"], [407, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.name"]], "outputannotatortype (autoggufvisionmodel attribute)": [[158, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.outputAnnotatorType"], [407, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.outputAnnotatorType"]], "pretrained() (autoggufvisionmodel static method)": [[158, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.pretrained"], [407, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[158, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [407, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "beamsize (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.beamSize"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.beamSize"]], "configprotobytes (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.configProtoBytes"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.configProtoBytes"]], "dosample (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.doSample"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.doSample"]], "ignoretokenids (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.ignoreTokenIds"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.ignoreTokenIds"]], "inputannotatortypes (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.inputAnnotatorTypes"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (barttransformer static method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "maxoutputlength (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.maxOutputLength"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.maxOutputLength"]], "minoutputlength (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.minOutputLength"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.minOutputLength"]], "name (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.name"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.name"]], "norepeatngramsize (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.noRepeatNgramSize"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.noRepeatNgramSize"]], "outputannotatortype (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.outputAnnotatorType"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.outputAnnotatorType"]], "pretrained() (barttransformer static method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "repetitionpenalty (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.repetitionPenalty"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.repetitionPenalty"]], "setbeamsize() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[159, "module-sparknlp.annotator.seq2seq.bart_transformer"], [408, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "task (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.task"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.task"]], "temperature (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.temperature"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.temperature"]], "topk (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topK"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topK"]], "topp (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topP"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topP"]], "usecache (barttransformer attribute)": [[159, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.useCache"], [408, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.useCache"]], "coheretransformer (class in sparknlp.annotator.seq2seq.cohere_transformer)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer"]], "beamsize (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.beamSize"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.beamSize"]], "configprotobytes (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.configProtoBytes"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.configProtoBytes"]], "dosample (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.doSample"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.doSample"]], "ignoretokenids (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.ignoreTokenIds"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.ignoreTokenIds"]], "inputannotatortypes (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.inputAnnotatorTypes"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (coheretransformer static method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.loadSavedModel"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.loadSavedModel"]], "maxoutputlength (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.maxOutputLength"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.maxOutputLength"]], "minoutputlength (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.minOutputLength"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.minOutputLength"]], "name (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.name"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.name"]], "norepeatngramsize (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.noRepeatNgramSize"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.noRepeatNgramSize"]], "outputannotatortype (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.outputAnnotatorType"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.outputAnnotatorType"]], "pretrained() (coheretransformer static method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.pretrained"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.pretrained"]], "repetitionpenalty (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.repetitionPenalty"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.repetitionPenalty"]], "setbeamsize() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setBeamSize"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setBeamSize"]], "setconfigprotobytes() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setConfigProtoBytes"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setConfigProtoBytes"]], "setdosample() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setDoSample"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setDoSample"]], "setignoretokenids() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setIgnoreTokenIds"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMaxOutputLength"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMaxOutputLength"]], "setminoutputlength() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMinOutputLength"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMinOutputLength"]], "setnorepeatngramsize() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setNoRepeatNgramSize"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setRepetitionPenalty"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setRepetitionPenalty"]], "setstoptokenids() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setStopTokenIds"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setStopTokenIds"]], "settemperature() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTemperature"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTemperature"]], "settopk() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopK"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopK"]], "settopp() (coheretransformer method)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopP"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[160, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [409, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "stoptokenids (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.stopTokenIds"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.stopTokenIds"]], "temperature (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.temperature"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.temperature"]], "topk (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topK"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topK"]], "topp (coheretransformer attribute)": [[160, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topP"], [409, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topP"]], "cpmtransformer (class in sparknlp.annotator.seq2seq.cpm_transformer)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"]], "configprotobytes (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.configProtoBytes"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.configProtoBytes"]], "dosample (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.doSample"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.doSample"]], "ignoretokenids (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.ignoreTokenIds"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.ignoreTokenIds"]], "inputannotatortypes (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.inputAnnotatorTypes"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (cpmtransformer static method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"]], "maxoutputlength (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.maxOutputLength"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.maxOutputLength"]], "minoutputlength (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.minOutputLength"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.minOutputLength"]], "name (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.name"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.name"]], "norepeatngramsize (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.noRepeatNgramSize"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.noRepeatNgramSize"]], "outputannotatortype (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.outputAnnotatorType"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.outputAnnotatorType"]], "pretrained() (cpmtransformer static method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"]], "repetitionpenalty (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.repetitionPenalty"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.repetitionPenalty"]], "setconfigprotobytes() (cpmtransformer method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"]], "setdosample() (cpmtransformer method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"]], "setignoretokenids() (cpmtransformer method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (cpmtransformer method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"]], "setminoutputlength() (cpmtransformer method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (cpmtransformer method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (cpmtransformer method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"]], "settemperature() (cpmtransformer method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"]], "settopk() (cpmtransformer method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"]], "settopp() (cpmtransformer method)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[161, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [410, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "temperature (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.temperature"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.temperature"]], "topk (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topK"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topK"]], "topp (cpmtransformer attribute)": [[161, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topP"], [410, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topP"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "configprotobytes (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.configProtoBytes"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.configProtoBytes"]], "dosample (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.doSample"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.doSample"]], "ignoretokenids (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.ignoreTokenIds"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.ignoreTokenIds"]], "inputannotatortypes (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.inputAnnotatorTypes"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (gpt2transformer static method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "maxoutputlength (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.maxOutputLength"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.maxOutputLength"]], "minoutputlength (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.minOutputLength"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.minOutputLength"]], "name (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.name"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.name"]], "norepeatngramsize (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.noRepeatNgramSize"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.noRepeatNgramSize"]], "outputannotatortype (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.outputAnnotatorType"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.outputAnnotatorType"]], "pretrained() (gpt2transformer static method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "repetitionpenalty (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.repetitionPenalty"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.repetitionPenalty"]], "setconfigprotobytes() (gpt2transformer method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[162, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [411, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "task (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.task"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.task"]], "temperature (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.temperature"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.temperature"]], "topk (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topK"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topK"]], "topp (gpt2transformer attribute)": [[162, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topP"], [411, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topP"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "configprotobytes (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.configProtoBytes"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.configProtoBytes"]], "dosample (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.doSample"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.doSample"]], "ignoretokenids (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.ignoreTokenIds"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.ignoreTokenIds"]], "inputannotatortypes (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.inputAnnotatorTypes"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama2transformer static method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "maxoutputlength (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.maxOutputLength"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.maxOutputLength"]], "minoutputlength (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.minOutputLength"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.minOutputLength"]], "name (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.name"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.name"]], "norepeatngramsize (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.noRepeatNgramSize"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.noRepeatNgramSize"]], "outputannotatortype (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.outputAnnotatorType"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.outputAnnotatorType"]], "pretrained() (llama2transformer static method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "repetitionpenalty (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.repetitionPenalty"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.repetitionPenalty"]], "setconfigprotobytes() (llama2transformer method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[163, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [413, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "temperature (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.temperature"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.temperature"]], "topk (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topK"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topK"]], "topp (llama2transformer attribute)": [[163, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topP"], [413, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topP"]], "llama3transformer (class in sparknlp.annotator.seq2seq.llama3_transformer)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"]], "beamsize (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.beamSize"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.beamSize"]], "configprotobytes (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.configProtoBytes"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.configProtoBytes"]], "dosample (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.doSample"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.doSample"]], "ignoretokenids (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.ignoreTokenIds"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.ignoreTokenIds"]], "inputannotatortypes (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.inputAnnotatorTypes"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama3transformer static method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"]], "maxoutputlength (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.maxOutputLength"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.maxOutputLength"]], "minoutputlength (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.minOutputLength"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.minOutputLength"]], "name (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.name"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.name"]], "norepeatngramsize (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.noRepeatNgramSize"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.noRepeatNgramSize"]], "outputannotatortype (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.outputAnnotatorType"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.outputAnnotatorType"]], "pretrained() (llama3transformer static method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"]], "repetitionpenalty (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.repetitionPenalty"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.repetitionPenalty"]], "setbeamsize() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"]], "setconfigprotobytes() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"]], "setdosample() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"]], "setignoretokenids() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"]], "setminoutputlength() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"]], "setstoptokenids() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"]], "settemperature() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"]], "settopk() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"]], "settopp() (llama3transformer method)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[164, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [414, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "stoptokenids (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.stopTokenIds"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.stopTokenIds"]], "temperature (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.temperature"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.temperature"]], "topk (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topK"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topK"]], "topp (llama3transformer attribute)": [[164, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topP"], [414, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topP"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "beamsize (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.beamSize"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.beamSize"]], "configprotobytes (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.configProtoBytes"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.configProtoBytes"]], "dosample (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.doSample"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.doSample"]], "ignoretokenids (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.ignoreTokenIds"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.ignoreTokenIds"]], "inputannotatortypes (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.inputAnnotatorTypes"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (m2m100transformer static method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "maxoutputlength (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.maxOutputLength"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.maxOutputLength"]], "minoutputlength (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.minOutputLength"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.minOutputLength"]], "name (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.name"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.name"]], "norepeatngramsize (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.noRepeatNgramSize"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.noRepeatNgramSize"]], "outputannotatortype (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.outputAnnotatorType"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.outputAnnotatorType"]], "pretrained() (m2m100transformer static method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "repetitionpenalty (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.repetitionPenalty"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.repetitionPenalty"]], "setbeamsize() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[165, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [415, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "srclang (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.srcLang"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.srcLang"]], "temperature (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.temperature"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.temperature"]], "tgtlang (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.tgtLang"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.tgtLang"]], "topk (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topK"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topK"]], "topp (m2m100transformer attribute)": [[165, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topP"], [415, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topP"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "configprotobytes (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.configProtoBytes"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.configProtoBytes"]], "dosample (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.doSample"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.doSample"]], "ignoretokenids (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.ignoreTokenIds"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.ignoreTokenIds"]], "inputannotatortypes (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.inputAnnotatorTypes"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.inputAnnotatorTypes"]], "langid (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.langId"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.langId"]], "loadsavedmodel() (mariantransformer static method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "maxinputlength (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxInputLength"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxInputLength"]], "maxoutputlength (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxOutputLength"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxOutputLength"]], "name (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.name"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.name"]], "norepeatngramsize (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.noRepeatNgramSize"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.noRepeatNgramSize"]], "outputannotatortype (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.outputAnnotatorType"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.outputAnnotatorType"]], "pretrained() (mariantransformer static method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "repetitionpenalty (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.repetitionPenalty"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.repetitionPenalty"]], "setconfigprotobytes() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[166, "module-sparknlp.annotator.seq2seq.marian_transformer"], [416, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "temperature (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.temperature"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.temperature"]], "topk (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topK"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topK"]], "topp (mariantransformer attribute)": [[166, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topP"], [416, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topP"]], "mistraltransformer (class in sparknlp.annotator.seq2seq.mistral_transformer)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"]], "configprotobytes (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.configProtoBytes"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.configProtoBytes"]], "dosample (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.doSample"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.doSample"]], "ignoretokenids (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.ignoreTokenIds"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.ignoreTokenIds"]], "inputannotatortypes (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.inputAnnotatorTypes"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (mistraltransformer static method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"]], "maxoutputlength (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.maxOutputLength"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.maxOutputLength"]], "minoutputlength (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.minOutputLength"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.minOutputLength"]], "name (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.name"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.name"]], "norepeatngramsize (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.noRepeatNgramSize"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.noRepeatNgramSize"]], "outputannotatortype (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.outputAnnotatorType"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.outputAnnotatorType"]], "pretrained() (mistraltransformer static method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"]], "repetitionpenalty (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.repetitionPenalty"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.repetitionPenalty"]], "setconfigprotobytes() (mistraltransformer method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"]], "setdosample() (mistraltransformer method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"]], "setignoretokenids() (mistraltransformer method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (mistraltransformer method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"]], "setminoutputlength() (mistraltransformer method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"]], "setnorepeatngramsize() (mistraltransformer method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mistraltransformer method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"]], "settemperature() (mistraltransformer method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"]], "settopk() (mistraltransformer method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"]], "settopp() (mistraltransformer method)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[167, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [417, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "temperature (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.temperature"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.temperature"]], "topk (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topK"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topK"]], "topp (mistraltransformer attribute)": [[167, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topP"], [417, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topP"]], "nllbtransformer (class in sparknlp.annotator.seq2seq.nllb_transformer)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"]], "beamsize (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.beamSize"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.beamSize"]], "configprotobytes (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.configProtoBytes"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.configProtoBytes"]], "dosample (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.doSample"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.doSample"]], "ignoretokenids (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.ignoreTokenIds"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.ignoreTokenIds"]], "inputannotatortypes (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.inputAnnotatorTypes"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (nllbtransformer static method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"]], "maxoutputlength (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.maxOutputLength"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.maxOutputLength"]], "minoutputlength (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.minOutputLength"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.minOutputLength"]], "name (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.name"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.name"]], "norepeatngramsize (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.noRepeatNgramSize"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.noRepeatNgramSize"]], "outputannotatortype (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.outputAnnotatorType"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.outputAnnotatorType"]], "pretrained() (nllbtransformer static method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"]], "repetitionpenalty (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.repetitionPenalty"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.repetitionPenalty"]], "setbeamsize() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"]], "setconfigprotobytes() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"]], "setdosample() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"]], "setignoretokenids() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"]], "setminoutputlength() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"]], "setnorepeatngramsize() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"]], "setsrclang() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"]], "settemperature() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"]], "settgtlang() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"]], "settopk() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"]], "settopp() (nllbtransformer method)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[168, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [418, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "srclang (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.srcLang"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.srcLang"]], "temperature (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.temperature"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.temperature"]], "tgtlang (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.tgtLang"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.tgtLang"]], "topk (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topK"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topK"]], "topp (nllbtransformer attribute)": [[168, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topP"], [418, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topP"]], "olmotransformer (class in sparknlp.annotator.seq2seq.olmo_transformer)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer"]], "configprotobytes (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.configProtoBytes"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.configProtoBytes"]], "dosample (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.doSample"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.doSample"]], "ignoretokenids (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.ignoreTokenIds"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.ignoreTokenIds"]], "inputannotatortypes (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.inputAnnotatorTypes"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (olmotransformer static method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.loadSavedModel"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.loadSavedModel"]], "maxoutputlength (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.maxOutputLength"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.maxOutputLength"]], "minoutputlength (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.minOutputLength"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.minOutputLength"]], "name (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.name"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.name"]], "norepeatngramsize (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.noRepeatNgramSize"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.noRepeatNgramSize"]], "outputannotatortype (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.outputAnnotatorType"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.outputAnnotatorType"]], "pretrained() (olmotransformer static method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.pretrained"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.pretrained"]], "repetitionpenalty (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.repetitionPenalty"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.repetitionPenalty"]], "setconfigprotobytes() (olmotransformer method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setConfigProtoBytes"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setConfigProtoBytes"]], "setdosample() (olmotransformer method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setDoSample"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setDoSample"]], "setignoretokenids() (olmotransformer method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setIgnoreTokenIds"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (olmotransformer method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMaxOutputLength"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMaxOutputLength"]], "setminoutputlength() (olmotransformer method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMinOutputLength"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMinOutputLength"]], "setnorepeatngramsize() (olmotransformer method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setNoRepeatNgramSize"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (olmotransformer method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setRepetitionPenalty"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setRepetitionPenalty"]], "settemperature() (olmotransformer method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTemperature"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTemperature"]], "settopk() (olmotransformer method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopK"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopK"]], "settopp() (olmotransformer method)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopP"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[169, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [419, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "temperature (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.temperature"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.temperature"]], "topk (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topK"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topK"]], "topp (olmotransformer attribute)": [[169, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topP"], [419, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topP"]], "phi2transformer (class in sparknlp.annotator.seq2seq.phi2_transformer)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"]], "configprotobytes (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.configProtoBytes"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.configProtoBytes"]], "dosample (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.doSample"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.doSample"]], "ignoretokenids (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.ignoreTokenIds"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.ignoreTokenIds"]], "inputannotatortypes (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.inputAnnotatorTypes"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi2transformer static method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"]], "maxoutputlength (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.maxOutputLength"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.maxOutputLength"]], "minoutputlength (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.minOutputLength"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.minOutputLength"]], "name (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.name"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.name"]], "norepeatngramsize (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.noRepeatNgramSize"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.noRepeatNgramSize"]], "outputannotatortype (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.outputAnnotatorType"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.outputAnnotatorType"]], "pretrained() (phi2transformer static method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"]], "repetitionpenalty (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.repetitionPenalty"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi2transformer method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"]], "setdosample() (phi2transformer method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"]], "setignoretokenids() (phi2transformer method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi2transformer method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"]], "setminoutputlength() (phi2transformer method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi2transformer method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi2transformer method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"]], "settemperature() (phi2transformer method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"]], "settopk() (phi2transformer method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"]], "settopp() (phi2transformer method)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[170, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [420, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "temperature (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.temperature"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.temperature"]], "topk (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topK"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topK"]], "topp (phi2transformer attribute)": [[170, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topP"], [420, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topP"]], "phi3transformer (class in sparknlp.annotator.seq2seq.phi3_transformer)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"]], "configprotobytes (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.configProtoBytes"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.configProtoBytes"]], "dosample (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.doSample"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.doSample"]], "ignoretokenids (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.ignoreTokenIds"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.ignoreTokenIds"]], "inputannotatortypes (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.inputAnnotatorTypes"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi3transformer static method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"]], "maxoutputlength (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.maxOutputLength"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.maxOutputLength"]], "minoutputlength (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.minOutputLength"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.minOutputLength"]], "name (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.name"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.name"]], "norepeatngramsize (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.noRepeatNgramSize"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.noRepeatNgramSize"]], "outputannotatortype (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.outputAnnotatorType"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.outputAnnotatorType"]], "pretrained() (phi3transformer static method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"]], "repetitionpenalty (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.repetitionPenalty"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi3transformer method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"]], "setdosample() (phi3transformer method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"]], "setignoretokenids() (phi3transformer method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3transformer method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"]], "setminoutputlength() (phi3transformer method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi3transformer method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3transformer method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"]], "settemperature() (phi3transformer method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"]], "settopk() (phi3transformer method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"]], "settopp() (phi3transformer method)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[171, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [421, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "temperature (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.temperature"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.temperature"]], "topk (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topK"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topK"]], "topp (phi3transformer attribute)": [[171, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topP"], [421, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topP"]], "qwentransformer (class in sparknlp.annotator.seq2seq.qwen_transformer)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"]], "configprotobytes (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.configProtoBytes"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.configProtoBytes"]], "dosample (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.doSample"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.doSample"]], "ignoretokenids (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.ignoreTokenIds"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.ignoreTokenIds"]], "inputannotatortypes (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.inputAnnotatorTypes"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwentransformer static method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"]], "maxoutputlength (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.maxOutputLength"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.maxOutputLength"]], "minoutputlength (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.minOutputLength"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.minOutputLength"]], "name (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.name"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.name"]], "norepeatngramsize (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.noRepeatNgramSize"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.noRepeatNgramSize"]], "outputannotatortype (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.outputAnnotatorType"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.outputAnnotatorType"]], "pretrained() (qwentransformer static method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"]], "repetitionpenalty (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.repetitionPenalty"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.repetitionPenalty"]], "setconfigprotobytes() (qwentransformer method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"]], "setdosample() (qwentransformer method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"]], "setignoretokenids() (qwentransformer method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwentransformer method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"]], "setminoutputlength() (qwentransformer method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwentransformer method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwentransformer method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"]], "settemperature() (qwentransformer method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"]], "settopk() (qwentransformer method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"]], "settopp() (qwentransformer method)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[172, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [422, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "temperature (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.temperature"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.temperature"]], "topk (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topK"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topK"]], "topp (qwentransformer attribute)": [[172, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topP"], [422, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topP"]], "starcodertransformer (class in sparknlp.annotator.seq2seq.starcoder_transformer)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"]], "configprotobytes (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.configProtoBytes"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.configProtoBytes"]], "dosample (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.doSample"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.doSample"]], "ignoretokenids (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.ignoreTokenIds"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.ignoreTokenIds"]], "inputannotatortypes (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.inputAnnotatorTypes"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (starcodertransformer static method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"]], "maxoutputlength (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.maxOutputLength"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.maxOutputLength"]], "minoutputlength (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.minOutputLength"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.minOutputLength"]], "name (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.name"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.name"]], "norepeatngramsize (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.noRepeatNgramSize"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.noRepeatNgramSize"]], "outputannotatortype (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.outputAnnotatorType"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.outputAnnotatorType"]], "pretrained() (starcodertransformer static method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"]], "repetitionpenalty (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.repetitionPenalty"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.repetitionPenalty"]], "setconfigprotobytes() (starcodertransformer method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"]], "setdosample() (starcodertransformer method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"]], "setignoretokenids() (starcodertransformer method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (starcodertransformer method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"]], "setminoutputlength() (starcodertransformer method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"]], "setnorepeatngramsize() (starcodertransformer method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (starcodertransformer method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"]], "settemperature() (starcodertransformer method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"]], "settopk() (starcodertransformer method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"]], "settopp() (starcodertransformer method)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[173, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [423, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "temperature (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.temperature"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.temperature"]], "topk (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topK"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topK"]], "topp (starcodertransformer attribute)": [[173, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topP"], [423, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topP"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "configprotobytes (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.configProtoBytes"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.configProtoBytes"]], "dosample (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.doSample"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.doSample"]], "ignoretokenids (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.ignoreTokenIds"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.ignoreTokenIds"]], "inputannotatortypes (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.inputAnnotatorTypes"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (t5transformer static method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "maxnewtokens (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxNewTokens"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxNewTokens"]], "maxoutputlength (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxOutputLength"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxOutputLength"]], "minoutputlength (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.minOutputLength"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.minOutputLength"]], "name (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.name"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.name"]], "norepeatngramsize (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.noRepeatNgramSize"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.noRepeatNgramSize"]], "outputannotatortype (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.outputAnnotatorType"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.outputAnnotatorType"]], "pretrained() (t5transformer static method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "repetitionpenalty (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.repetitionPenalty"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.repetitionPenalty"]], "setconfigprotobytes() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[174, "module-sparknlp.annotator.seq2seq.t5_transformer"], [424, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "stopateos (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.stopAtEos"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.stopAtEos"]], "task (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.task"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.task"]], "temperature (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.temperature"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.temperature"]], "topk (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topK"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topK"]], "topp (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topP"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topP"]], "usecache (t5transformer attribute)": [[174, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.useCache"], [424, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.useCache"]], "sparknlp.annotator.similarity": [[175, "module-sparknlp.annotator.similarity"], [426, "module-sparknlp.annotator.similarity"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "aggregationmethod (documentsimilarityrankerapproach attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.aggregationMethod"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.aggregationMethod"]], "asretriever() (documentsimilarityrankerapproach method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "asretrieverquery (documentsimilarityrankerapproach attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetrieverQuery"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetrieverQuery"]], "bucketlength (documentsimilarityrankerapproach attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.bucketLength"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.bucketLength"]], "extractnearestneighbor (documentsimilarityrankerfinisher attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.extractNearestNeighbor"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.extractNearestNeighbor"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "identityranking (documentsimilarityrankerapproach attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.identityRanking"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.identityRanking"]], "inputannotatortypes (documentsimilarityrankerapproach attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.inputAnnotatorTypes"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentsimilarityrankermodel attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.inputAnnotatorTypes"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.inputAnnotatorTypes"]], "inputcols (documentsimilarityrankerfinisher attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.inputCols"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.inputCols"]], "name (documentsimilarityrankerfinisher attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.name"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.name"]], "name (documentsimilarityrankermodel attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.name"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.name"]], "numhashtables (documentsimilarityrankerapproach attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numHashTables"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numHashTables"]], "numberofneighbours (documentsimilarityrankerapproach attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numberOfNeighbours"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numberOfNeighbours"]], "outputannotatortype (documentsimilarityrankerapproach attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.outputAnnotatorType"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.outputAnnotatorType"]], "outputannotatortype (documentsimilarityrankermodel attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.outputAnnotatorType"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.outputAnnotatorType"]], "outputcols (documentsimilarityrankerfinisher attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.outputCols"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.outputCols"]], "setaggregationmethod() (documentsimilarityrankerapproach method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setparams() (documentsimilarityrankerfinisher method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setParams"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setParams"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "similaritymethod (documentsimilarityrankerapproach attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.similarityMethod"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.similarityMethod"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[176, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [425, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "visibledistances (documentsimilarityrankerapproach attribute)": [[176, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.visibleDistances"], [425, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.visibleDistances"]], "sparknlp.annotator.spell_check": [[177, "module-sparknlp.annotator.spell_check"], [428, "module-sparknlp.annotator.spell_check"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "batchsize (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.batchSize"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.batchSize"]], "casestrategy (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.caseStrategy"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.caseStrategy"]], "casestrategy (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.caseStrategy"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.caseStrategy"]], "classcount (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.classCount"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.classCount"]], "classes (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.classes"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.classes"]], "comparelowcase (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.compareLowcase"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.compareLowcase"]], "compoundcount (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.compoundCount"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.compoundCount"]], "configprotobytes (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.configProtoBytes"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.configProtoBytes"]], "configprotobytes (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.configProtoBytes"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.configProtoBytes"]], "correctsymbols (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.correctSymbols"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.correctSymbols"]], "epochs (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.epochs"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.epochs"]], "errorthreshold (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.errorThreshold"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.errorThreshold"]], "errorthreshold (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.errorThreshold"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.errorThreshold"]], "finalrate (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.finalRate"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.finalRate"]], "gamma (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.gamma"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.gamma"]], "getwordclasses() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "graphfolder (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.graphFolder"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.graphFolder"]], "idsvocab (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.idsVocab"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.idsVocab"]], "initialrate (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.initialRate"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.initialRate"]], "inputannotatortypes (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.inputAnnotatorTypes"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.inputAnnotatorTypes"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.inputAnnotatorTypes"]], "languagemodelclasses (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.languageModelClasses"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.languageModelClasses"]], "maxcandidates (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxCandidates"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxCandidates"]], "maxcandidates (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxCandidates"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxCandidates"]], "maxsentlen (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxSentLen"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxSentLen"]], "maxwindowlen (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxWindowLen"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxWindowLen"]], "maxwindowlen (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxWindowLen"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxWindowLen"]], "mincount (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.minCount"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.minCount"]], "name (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.name"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.name"]], "name (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.name"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.name"]], "outputannotatortype (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.outputAnnotatorType"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.outputAnnotatorType"]], "outputannotatortype (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.outputAnnotatorType"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.outputAnnotatorType"]], "pretrained() (contextspellcheckermodel static method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[178, "module-sparknlp.annotator.spell_check.context_spell_checker"], [427, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "tradeoff (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.tradeoff"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.tradeoff"]], "tradeoff (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.tradeoff"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.tradeoff"]], "updateregexclass() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "validationfraction (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.validationFraction"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.validationFraction"]], "vocabfreq (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabFreq"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabFreq"]], "vocabids (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabIds"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabIds"]], "weighteddistpath (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.weightedDistPath"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.weightedDistPath"]], "wordmaxdistance (contextspellcheckerapproach attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.wordMaxDistance"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.wordMaxDistance"]], "wordmaxdistance (contextspellcheckermodel attribute)": [[178, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.wordMaxDistance"], [427, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.wordMaxDistance"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "casesensitive (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.caseSensitive"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.caseSensitive"]], "dictionary (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary"]], "doublevariants (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.doubleVariants"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.doubleVariants"]], "dupslimit (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dupsLimit"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dupsLimit"]], "frequencypriority (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.frequencyPriority"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.frequencyPriority"]], "inputannotatortypes (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.inputAnnotatorTypes"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.inputAnnotatorTypes"]], "inputannotatortypes (norvigsweetingmodel attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.inputAnnotatorTypes"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.inputAnnotatorTypes"]], "intersections (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.intersections"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.intersections"]], "name (norvigsweetingmodel attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.name"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.name"]], "outputannotatortype (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.outputAnnotatorType"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.outputAnnotatorType"]], "outputannotatortype (norvigsweetingmodel attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.outputAnnotatorType"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.outputAnnotatorType"]], "pretrained() (norvigsweetingmodel static method)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "reductlimit (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.reductLimit"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.reductLimit"]], "setcasesensitive() (norvigsweetingapproach method)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "shortcircuit (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.shortCircuit"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.shortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[179, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [429, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "vowelswaplimit (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.vowelSwapLimit"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.vowelSwapLimit"]], "wordsizeignore (norvigsweetingapproach attribute)": [[179, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.wordSizeIgnore"], [429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.wordSizeIgnore"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "corpus (symmetricdeleteapproach attribute)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.corpus"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.corpus"]], "deletesthreshold (symmetricdeleteapproach attribute)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.deletesThreshold"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.deletesThreshold"]], "dictionary (symmetricdeleteapproach attribute)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary"]], "dupslimit (symmetricdeleteapproach attribute)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dupsLimit"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dupsLimit"]], "frequencythreshold (symmetricdeleteapproach attribute)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.frequencyThreshold"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.frequencyThreshold"]], "inputannotatortypes (symmetricdeleteapproach attribute)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.inputAnnotatorTypes"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.inputAnnotatorTypes"]], "inputannotatortypes (symmetricdeletemodel attribute)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.inputAnnotatorTypes"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.inputAnnotatorTypes"]], "maxeditdistance (symmetricdeleteapproach attribute)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.maxEditDistance"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.maxEditDistance"]], "name (symmetricdeletemodel attribute)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.name"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.name"]], "outputannotatortype (symmetricdeleteapproach attribute)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.outputAnnotatorType"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.outputAnnotatorType"]], "outputannotatortype (symmetricdeletemodel attribute)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.outputAnnotatorType"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.outputAnnotatorType"]], "pretrained() (symmetricdeletemodel static method)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[180, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"], [430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[180, "module-sparknlp.annotator.spell_check.symmetric_delete"], [430, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[181, "sparknlp.annotator.stemmer.Stemmer"], [431, "sparknlp.annotator.stemmer.Stemmer"]], "inputannotatortypes (stemmer attribute)": [[181, "sparknlp.annotator.stemmer.Stemmer.inputAnnotatorTypes"], [431, "sparknlp.annotator.stemmer.Stemmer.inputAnnotatorTypes"]], "language (stemmer attribute)": [[181, "sparknlp.annotator.stemmer.Stemmer.language"], [431, "sparknlp.annotator.stemmer.Stemmer.language"]], "name (stemmer attribute)": [[181, "sparknlp.annotator.stemmer.Stemmer.name"], [431, "sparknlp.annotator.stemmer.Stemmer.name"]], "outputannotatortype (stemmer attribute)": [[181, "sparknlp.annotator.stemmer.Stemmer.outputAnnotatorType"], [431, "sparknlp.annotator.stemmer.Stemmer.outputAnnotatorType"]], "sparknlp.annotator.stemmer": [[181, "module-sparknlp.annotator.stemmer"], [431, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "casesensitive (stopwordscleaner attribute)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.caseSensitive"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.caseSensitive"]], "inputannotatortypes (stopwordscleaner attribute)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.inputAnnotatorTypes"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.inputAnnotatorTypes"]], "loaddefaultstopwords() (stopwordscleaner method)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "locale (stopwordscleaner attribute)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.locale"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.locale"]], "name (stopwordscleaner attribute)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.name"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.name"]], "outputannotatortype (stopwordscleaner attribute)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.outputAnnotatorType"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.outputAnnotatorType"]], "pretrained() (stopwordscleaner static method)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[182, "module-sparknlp.annotator.stop_words_cleaner"], [432, "module-sparknlp.annotator.stop_words_cleaner"]], "stopwords (stopwordscleaner attribute)": [[182, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.stopWords"], [432, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.stopWords"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "graphfile (tfnerdlgraphbuilder attribute)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFile"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFile"]], "graphfolder (tfnerdlgraphbuilder attribute)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFolder"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFolder"]], "hiddenunitsnumber (tfnerdlgraphbuilder attribute)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.hiddenUnitsNumber"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.hiddenUnitsNumber"]], "inputannotatortypes (tfnerdlgraphbuilder attribute)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputAnnotatorTypes"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputAnnotatorTypes"]], "inputcols (tfnerdlgraphbuilder attribute)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputCols"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputCols"]], "inputcolsvalidation() (tfnerdlgraphbuilder method)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputColsValidation"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputColsValidation"]], "labelcolumn (tfnerdlgraphbuilder attribute)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.labelColumn"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.labelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[183, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"], [433, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[183, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [433, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token": [[184, "module-sparknlp.annotator.token"], [435, "module-sparknlp.annotator.token"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[185, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"], [434, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[185, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"], [434, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "inputannotatortypes (chunktokenizer attribute)": [[185, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.inputAnnotatorTypes"], [434, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (chunktokenizermodel attribute)": [[185, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.inputAnnotatorTypes"], [434, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.inputAnnotatorTypes"]], "name (chunktokenizer attribute)": [[185, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.name"], [434, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.name"]], "name (chunktokenizermodel attribute)": [[185, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.name"], [434, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.name"]], "sparknlp.annotator.token.chunk_tokenizer": [[185, "module-sparknlp.annotator.token.chunk_tokenizer"], [434, "module-sparknlp.annotator.token.chunk_tokenizer"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "infixes (recursivetokenizer attribute)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.infixes"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.infixes"]], "inputannotatortypes (recursivetokenizer attribute)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.inputAnnotatorTypes"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (recursivetokenizermodel attribute)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.inputAnnotatorTypes"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.inputAnnotatorTypes"]], "name (recursivetokenizer attribute)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.name"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.name"]], "name (recursivetokenizermodel attribute)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.name"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.name"]], "outputannotatortype (recursivetokenizer attribute)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.outputAnnotatorType"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.outputAnnotatorType"]], "outputannotatortype (recursivetokenizermodel attribute)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.outputAnnotatorType"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.outputAnnotatorType"]], "prefixes (recursivetokenizer attribute)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.prefixes"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.prefixes"]], "setinfixes() (recursivetokenizer method)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[186, "module-sparknlp.annotator.token.recursive_tokenizer"], [436, "module-sparknlp.annotator.token.recursive_tokenizer"]], "suffixes (recursivetokenizer attribute)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.suffixes"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.suffixes"]], "whitelist (recursivetokenizer attribute)": [[186, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.whitelist"], [436, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.whitelist"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "inputannotatortypes (regextokenizer attribute)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.inputAnnotatorTypes"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.inputAnnotatorTypes"]], "maxlength (regextokenizer attribute)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.maxLength"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.maxLength"]], "minlength (regextokenizer attribute)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.minLength"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.minLength"]], "name (regextokenizer attribute)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.name"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.name"]], "outputannotatortype (regextokenizer attribute)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.outputAnnotatorType"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.outputAnnotatorType"]], "pattern (regextokenizer attribute)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.pattern"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.pattern"]], "positionalmask (regextokenizer attribute)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.positionalMask"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.positionalMask"]], "preserveposition (regextokenizer attribute)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.preservePosition"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.preservePosition"]], "setmaxlength() (regextokenizer method)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[187, "module-sparknlp.annotator.token.regex_tokenizer"], [437, "module-sparknlp.annotator.token.regex_tokenizer"]], "tolowercase (regextokenizer attribute)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.toLowercase"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.toLowercase"]], "trimwhitespace (regextokenizer attribute)": [[187, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.trimWhitespace"], [437, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.trimWhitespace"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "casesensitiveexceptions (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.caseSensitiveExceptions"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.caseSensitiveExceptions"]], "casesensitiveexceptions (tokenizermodel attribute)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.caseSensitiveExceptions"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.caseSensitiveExceptions"]], "contextchars (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.contextChars"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.contextChars"]], "exceptions (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptions"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptions"]], "exceptions (tokenizermodel attribute)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.exceptions"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.exceptions"]], "exceptionspath (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptionsPath"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptionsPath"]], "getcasesensitiveexceptions() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "infixpatterns (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.infixPatterns"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.infixPatterns"]], "inputannotatortypes (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.inputAnnotatorTypes"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.inputAnnotatorTypes"]], "inputannotatortypes (tokenizermodel attribute)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.inputAnnotatorTypes"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.inputAnnotatorTypes"]], "maxlength (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.maxLength"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.maxLength"]], "minlength (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.minLength"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.minLength"]], "name (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.name"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.name"]], "name (tokenizermodel attribute)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.name"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.name"]], "outputannotatortype (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.outputAnnotatorType"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.outputAnnotatorType"]], "outputannotatortype (tokenizermodel attribute)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.outputAnnotatorType"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.outputAnnotatorType"]], "prefixpattern (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.prefixPattern"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.prefixPattern"]], "pretrained() (tokenizermodel static method)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "rules (tokenizermodel attribute)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.rules"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.rules"]], "setcasesensitiveexceptions() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[188, "module-sparknlp.annotator.token.tokenizer"], [438, "module-sparknlp.annotator.token.tokenizer"]], "splitchars (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.splitChars"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.splitChars"]], "splitchars (tokenizermodel attribute)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitChars"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitChars"]], "splitpattern (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.splitPattern"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.splitPattern"]], "splitpattern (tokenizermodel attribute)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitPattern"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitPattern"]], "suffixpattern (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.suffixPattern"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.suffixPattern"]], "targetpattern (tokenizer attribute)": [[188, "sparknlp.annotator.token.tokenizer.Tokenizer.targetPattern"], [438, "sparknlp.annotator.token.tokenizer.Tokenizer.targetPattern"]], "targetpattern (tokenizermodel attribute)": [[188, "sparknlp.annotator.token.tokenizer.TokenizerModel.targetPattern"], [438, "sparknlp.annotator.token.tokenizer.TokenizerModel.targetPattern"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[189, "sparknlp.annotator.token2_chunk.Token2Chunk"], [439, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "inputannotatortypes (token2chunk attribute)": [[189, "sparknlp.annotator.token2_chunk.Token2Chunk.inputAnnotatorTypes"], [439, "sparknlp.annotator.token2_chunk.Token2Chunk.inputAnnotatorTypes"]], "name (token2chunk attribute)": [[189, "sparknlp.annotator.token2_chunk.Token2Chunk.name"], [439, "sparknlp.annotator.token2_chunk.Token2Chunk.name"]], "outputannotatortype (token2chunk attribute)": [[189, "sparknlp.annotator.token2_chunk.Token2Chunk.outputAnnotatorType"], [439, "sparknlp.annotator.token2_chunk.Token2Chunk.outputAnnotatorType"]], "sparknlp.annotator.token2_chunk": [[189, "module-sparknlp.annotator.token2_chunk"], [439, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[190, "module-sparknlp.annotator.ws"], [440, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "ambiguitythreshold (wordsegmenterapproach attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.ambiguityThreshold"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.ambiguityThreshold"]], "enableregextokenizer (wordsegmenterapproach attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.enableRegexTokenizer"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.enableRegexTokenizer"]], "enableregextokenizer (wordsegmentermodel attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.enableRegexTokenizer"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.enableRegexTokenizer"]], "frequencythreshold (wordsegmenterapproach attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.frequencyThreshold"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.frequencyThreshold"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "inputannotatortypes (wordsegmenterapproach attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.inputAnnotatorTypes"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.inputAnnotatorTypes"]], "inputannotatortypes (wordsegmentermodel attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.inputAnnotatorTypes"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.inputAnnotatorTypes"]], "niterations (wordsegmenterapproach attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.nIterations"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.nIterations"]], "name (wordsegmenterapproach attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.name"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.name"]], "name (wordsegmentermodel attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.name"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.name"]], "outputannotatortype (wordsegmenterapproach attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.outputAnnotatorType"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.outputAnnotatorType"]], "outputannotatortype (wordsegmentermodel attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.outputAnnotatorType"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.outputAnnotatorType"]], "pattern (wordsegmenterapproach attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.pattern"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.pattern"]], "pattern (wordsegmentermodel attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pattern"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pattern"]], "poscol (wordsegmenterapproach attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.posCol"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.posCol"]], "pretrained() (wordsegmentermodel static method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[191, "module-sparknlp.annotator.ws.word_segmenter"], [441, "module-sparknlp.annotator.ws.word_segmenter"]], "tolowercase (wordsegmenterapproach attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.toLowercase"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.toLowercase"]], "tolowercase (wordsegmentermodel attribute)": [[191, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.toLowercase"], [441, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.toLowercase"]], "sparknlp.base": [[192, "module-sparknlp.base"], [451, "module-sparknlp.base"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[193, "sparknlp.base.audio_assembler.AudioAssembler"], [442, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[193, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"], [442, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "inputcol (audioassembler attribute)": [[193, "sparknlp.base.audio_assembler.AudioAssembler.inputCol"], [442, "sparknlp.base.audio_assembler.AudioAssembler.inputCol"]], "name (audioassembler attribute)": [[193, "sparknlp.base.audio_assembler.AudioAssembler.name"], [442, "sparknlp.base.audio_assembler.AudioAssembler.name"]], "outputannotatortype (audioassembler attribute)": [[193, "sparknlp.base.audio_assembler.AudioAssembler.outputAnnotatorType"], [442, "sparknlp.base.audio_assembler.AudioAssembler.outputAnnotatorType"]], "outputcol (audioassembler attribute)": [[193, "sparknlp.base.audio_assembler.AudioAssembler.outputCol"], [442, "sparknlp.base.audio_assembler.AudioAssembler.outputCol"]], "setinputcol() (audioassembler method)": [[193, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"], [442, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[193, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"], [442, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "setparams() (audioassembler method)": [[193, "sparknlp.base.audio_assembler.AudioAssembler.setParams"], [442, "sparknlp.base.audio_assembler.AudioAssembler.setParams"]], "sparknlp.base.audio_assembler": [[193, "module-sparknlp.base.audio_assembler"], [442, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "chunkcol (doc2chunk attribute)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.chunkCol"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.chunkCol"]], "failonmissing (doc2chunk attribute)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.failOnMissing"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.failOnMissing"]], "inputannotatortypes (doc2chunk attribute)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.inputAnnotatorTypes"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.inputAnnotatorTypes"]], "isarray (doc2chunk attribute)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.isArray"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.isArray"]], "lowercase (doc2chunk attribute)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.lowerCase"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.lowerCase"]], "name (doc2chunk attribute)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.name"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.name"]], "outputannotatortype (doc2chunk attribute)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.outputAnnotatorType"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.outputAnnotatorType"]], "setchunkcol() (doc2chunk method)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setparams() (doc2chunk method)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.setParams"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.setParams"]], "setstartcol() (doc2chunk method)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[194, "module-sparknlp.base.doc2_chunk"], [443, "module-sparknlp.base.doc2_chunk"]], "startcol (doc2chunk attribute)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.startCol"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.startCol"]], "startcolbytokenindex (doc2chunk attribute)": [[194, "sparknlp.base.doc2_chunk.Doc2Chunk.startColByTokenIndex"], [443, "sparknlp.base.doc2_chunk.Doc2Chunk.startColByTokenIndex"]], "documentassembler (class in sparknlp.base.document_assembler)": [[195, "sparknlp.base.document_assembler.DocumentAssembler"], [444, "sparknlp.base.document_assembler.DocumentAssembler"]], "cleanupmode (documentassembler attribute)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.cleanupMode"], [444, "sparknlp.base.document_assembler.DocumentAssembler.cleanupMode"]], "getoutputcol() (documentassembler method)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"], [444, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "idcol (documentassembler attribute)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.idCol"], [444, "sparknlp.base.document_assembler.DocumentAssembler.idCol"]], "inputcol (documentassembler attribute)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.inputCol"], [444, "sparknlp.base.document_assembler.DocumentAssembler.inputCol"]], "metadatacol (documentassembler attribute)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.metadataCol"], [444, "sparknlp.base.document_assembler.DocumentAssembler.metadataCol"]], "name (documentassembler attribute)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.name"], [444, "sparknlp.base.document_assembler.DocumentAssembler.name"]], "outputannotatortype (documentassembler attribute)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.outputAnnotatorType"], [444, "sparknlp.base.document_assembler.DocumentAssembler.outputAnnotatorType"]], "outputcol (documentassembler attribute)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.outputCol"], [444, "sparknlp.base.document_assembler.DocumentAssembler.outputCol"]], "setcleanupmode() (documentassembler method)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"], [444, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"], [444, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"], [444, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"], [444, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"], [444, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "setparams() (documentassembler method)": [[195, "sparknlp.base.document_assembler.DocumentAssembler.setParams"], [444, "sparknlp.base.document_assembler.DocumentAssembler.setParams"]], "sparknlp.base.document_assembler": [[195, "module-sparknlp.base.document_assembler"], [444, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "cleanannotations (embeddingsfinisher attribute)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.cleanAnnotations"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.cleanAnnotations"]], "getinputcols() (embeddingsfinisher method)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "inputcols (embeddingsfinisher attribute)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.inputCols"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.inputCols"]], "name (embeddingsfinisher attribute)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.name"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.name"]], "outputasvector (embeddingsfinisher attribute)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputAsVector"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputAsVector"]], "outputcols (embeddingsfinisher attribute)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputCols"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "setparams() (embeddingsfinisher method)": [[196, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setParams"], [445, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setParams"]], "sparknlp.base.embeddings_finisher": [[196, "module-sparknlp.base.embeddings_finisher"], [445, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[197, "sparknlp.base.finisher.Finisher"], [446, "sparknlp.base.finisher.Finisher"]], "annotationsplitsymbol (finisher attribute)": [[197, "sparknlp.base.finisher.Finisher.annotationSplitSymbol"], [446, "sparknlp.base.finisher.Finisher.annotationSplitSymbol"]], "cleanannotations (finisher attribute)": [[197, "sparknlp.base.finisher.Finisher.cleanAnnotations"], [446, "sparknlp.base.finisher.Finisher.cleanAnnotations"]], "getinputcols() (finisher method)": [[197, "sparknlp.base.finisher.Finisher.getInputCols"], [446, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[197, "sparknlp.base.finisher.Finisher.getOutputCols"], [446, "sparknlp.base.finisher.Finisher.getOutputCols"]], "includemetadata (finisher attribute)": [[197, "sparknlp.base.finisher.Finisher.includeMetadata"], [446, "sparknlp.base.finisher.Finisher.includeMetadata"]], "inputcols (finisher attribute)": [[197, "sparknlp.base.finisher.Finisher.inputCols"], [446, "sparknlp.base.finisher.Finisher.inputCols"]], "name (finisher attribute)": [[197, "sparknlp.base.finisher.Finisher.name"], [446, "sparknlp.base.finisher.Finisher.name"]], "outputasarray (finisher attribute)": [[197, "sparknlp.base.finisher.Finisher.outputAsArray"], [446, "sparknlp.base.finisher.Finisher.outputAsArray"]], "outputcols (finisher attribute)": [[197, "sparknlp.base.finisher.Finisher.outputCols"], [446, "sparknlp.base.finisher.Finisher.outputCols"]], "parseembeddingsvectors (finisher attribute)": [[197, "sparknlp.base.finisher.Finisher.parseEmbeddingsVectors"], [446, "sparknlp.base.finisher.Finisher.parseEmbeddingsVectors"]], "setannotationsplitsymbol() (finisher method)": [[197, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"], [446, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[197, "sparknlp.base.finisher.Finisher.setCleanAnnotations"], [446, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[197, "sparknlp.base.finisher.Finisher.setIncludeMetadata"], [446, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[197, "sparknlp.base.finisher.Finisher.setInputCols"], [446, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[197, "sparknlp.base.finisher.Finisher.setOutputAsArray"], [446, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[197, "sparknlp.base.finisher.Finisher.setOutputCols"], [446, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparams() (finisher method)": [[197, "sparknlp.base.finisher.Finisher.setParams"], [446, "sparknlp.base.finisher.Finisher.setParams"]], "setparseembeddingsvectors() (finisher method)": [[197, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"], [446, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[197, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"], [446, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[197, "module-sparknlp.base.finisher"], [446, "module-sparknlp.base.finisher"]], "valuesplitsymbol (finisher attribute)": [[197, "sparknlp.base.finisher.Finisher.valueSplitSymbol"], [446, "sparknlp.base.finisher.Finisher.valueSplitSymbol"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[198, "sparknlp.base.graph_finisher.GraphFinisher"], [447, "sparknlp.base.graph_finisher.GraphFinisher"]], "cleanannotations (graphfinisher attribute)": [[198, "sparknlp.base.graph_finisher.GraphFinisher.cleanAnnotations"], [447, "sparknlp.base.graph_finisher.GraphFinisher.cleanAnnotations"]], "inputcol (graphfinisher attribute)": [[198, "sparknlp.base.graph_finisher.GraphFinisher.inputCol"], [447, "sparknlp.base.graph_finisher.GraphFinisher.inputCol"]], "name (graphfinisher attribute)": [[198, "sparknlp.base.graph_finisher.GraphFinisher.name"], [447, "sparknlp.base.graph_finisher.GraphFinisher.name"]], "outputasarray (graphfinisher attribute)": [[198, "sparknlp.base.graph_finisher.GraphFinisher.outputAsArray"], [447, "sparknlp.base.graph_finisher.GraphFinisher.outputAsArray"]], "outputcol (graphfinisher attribute)": [[198, "sparknlp.base.graph_finisher.GraphFinisher.outputCol"], [447, "sparknlp.base.graph_finisher.GraphFinisher.outputCol"]], "setcleanannotations() (graphfinisher method)": [[198, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"], [447, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[198, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"], [447, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[198, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"], [447, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[198, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"], [447, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "setparams() (graphfinisher method)": [[198, "sparknlp.base.graph_finisher.GraphFinisher.setParams"], [447, "sparknlp.base.graph_finisher.GraphFinisher.setParams"]], "sparknlp.base.graph_finisher": [[198, "module-sparknlp.base.graph_finisher"], [447, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[199, "sparknlp.base.has_recursive_fit.HasRecursiveFit"], [448, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[199, "module-sparknlp.base.has_recursive_fit"], [448, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[200, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"], [449, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[200, "module-sparknlp.base.has_recursive_transform"], [449, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[201, "sparknlp.base.image_assembler.ImageAssembler"], [450, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[201, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"], [450, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "inputcol (imageassembler attribute)": [[201, "sparknlp.base.image_assembler.ImageAssembler.inputCol"], [450, "sparknlp.base.image_assembler.ImageAssembler.inputCol"]], "loadimagesasbytes() (imageassembler class method)": [[201, "sparknlp.base.image_assembler.ImageAssembler.loadImagesAsBytes"], [450, "sparknlp.base.image_assembler.ImageAssembler.loadImagesAsBytes"]], "name (imageassembler attribute)": [[201, "sparknlp.base.image_assembler.ImageAssembler.name"], [450, "sparknlp.base.image_assembler.ImageAssembler.name"]], "outputannotatortype (imageassembler attribute)": [[201, "sparknlp.base.image_assembler.ImageAssembler.outputAnnotatorType"], [450, "sparknlp.base.image_assembler.ImageAssembler.outputAnnotatorType"]], "outputcol (imageassembler attribute)": [[201, "sparknlp.base.image_assembler.ImageAssembler.outputCol"], [450, "sparknlp.base.image_assembler.ImageAssembler.outputCol"]], "setinputcol() (imageassembler method)": [[201, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"], [450, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[201, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"], [450, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "setparams() (imageassembler method)": [[201, "sparknlp.base.image_assembler.ImageAssembler.setParams"], [450, "sparknlp.base.image_assembler.ImageAssembler.setParams"]], "settextcol() (imageassembler method)": [[201, "sparknlp.base.image_assembler.ImageAssembler.setTextCol"], [450, "sparknlp.base.image_assembler.ImageAssembler.setTextCol"]], "sparknlp.base.image_assembler": [[201, "module-sparknlp.base.image_assembler"], [450, "module-sparknlp.base.image_assembler"]], "textcol (imageassembler attribute)": [[201, "sparknlp.base.image_assembler.ImageAssembler.textCol"], [450, "sparknlp.base.image_assembler.ImageAssembler.textCol"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[202, "sparknlp.base.light_pipeline.LightPipeline"], [452, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[202, "sparknlp.base.light_pipeline.LightPipeline.annotate"], [452, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[202, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"], [452, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[202, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"], [452, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[202, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"], [452, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[202, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"], [452, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[202, "module-sparknlp.base.light_pipeline"], [452, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[202, "sparknlp.base.light_pipeline.LightPipeline.transform"], [452, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "cleanupmode (multidocumentassembler attribute)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.cleanupMode"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.cleanupMode"]], "getoutputcols() (multidocumentassembler method)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "idcol (multidocumentassembler attribute)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.idCol"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.idCol"]], "inputcols (multidocumentassembler attribute)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.inputCols"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.inputCols"]], "metadatacol (multidocumentassembler attribute)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.metadataCol"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.metadataCol"]], "name (multidocumentassembler attribute)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.name"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.name"]], "outputannotatortype (multidocumentassembler attribute)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputAnnotatorType"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputAnnotatorType"]], "outputcols (multidocumentassembler attribute)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputCols"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputCols"]], "setcleanupmode() (multidocumentassembler method)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "setparams() (multidocumentassembler method)": [[203, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setParams"], [453, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setParams"]], "sparknlp.base.multi_document_assembler": [[203, "module-sparknlp.base.multi_document_assembler"], [453, "module-sparknlp.base.multi_document_assembler"]], "promptassembler (class in sparknlp.base.prompt_assembler)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler"], [454, "sparknlp.base.prompt_assembler.PromptAssembler"]], "addassistant (promptassembler attribute)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler.addAssistant"], [454, "sparknlp.base.prompt_assembler.PromptAssembler.addAssistant"]], "chattemplate (promptassembler attribute)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler.chatTemplate"], [454, "sparknlp.base.prompt_assembler.PromptAssembler.chatTemplate"]], "inputcol (promptassembler attribute)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler.inputCol"], [454, "sparknlp.base.prompt_assembler.PromptAssembler.inputCol"]], "name (promptassembler attribute)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler.name"], [454, "sparknlp.base.prompt_assembler.PromptAssembler.name"]], "outputannotatortype (promptassembler attribute)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler.outputAnnotatorType"], [454, "sparknlp.base.prompt_assembler.PromptAssembler.outputAnnotatorType"]], "outputcol (promptassembler attribute)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler.outputCol"], [454, "sparknlp.base.prompt_assembler.PromptAssembler.outputCol"]], "setaddassistant() (promptassembler method)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"], [454, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"]], "setchattemplate() (promptassembler method)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"], [454, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"]], "setinputcol() (promptassembler method)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"], [454, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"]], "setoutputcol() (promptassembler method)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"], [454, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"]], "setparams() (promptassembler method)": [[204, "sparknlp.base.prompt_assembler.PromptAssembler.setParams"], [454, "sparknlp.base.prompt_assembler.PromptAssembler.setParams"]], "sparknlp.base.prompt_assembler": [[204, "module-sparknlp.base.prompt_assembler"], [454, "module-sparknlp.base.prompt_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[205, "sparknlp.base.recursive_pipeline.RecursivePipeline"], [455, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[205, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"], [455, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[205, "module-sparknlp.base.recursive_pipeline"], [455, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[206, "sparknlp.base.table_assembler.TableAssembler"], [456, "sparknlp.base.table_assembler.TableAssembler"]], "csvdelimiter (tableassembler attribute)": [[206, "sparknlp.base.table_assembler.TableAssembler.csvDelimiter"], [456, "sparknlp.base.table_assembler.TableAssembler.csvDelimiter"]], "escapecsvdelimiter (tableassembler attribute)": [[206, "sparknlp.base.table_assembler.TableAssembler.escapeCsvDelimiter"], [456, "sparknlp.base.table_assembler.TableAssembler.escapeCsvDelimiter"]], "inputannotatortypes (tableassembler attribute)": [[206, "sparknlp.base.table_assembler.TableAssembler.inputAnnotatorTypes"], [456, "sparknlp.base.table_assembler.TableAssembler.inputAnnotatorTypes"]], "inputformat (tableassembler attribute)": [[206, "sparknlp.base.table_assembler.TableAssembler.inputFormat"], [456, "sparknlp.base.table_assembler.TableAssembler.inputFormat"]], "name (tableassembler attribute)": [[206, "sparknlp.base.table_assembler.TableAssembler.name"], [456, "sparknlp.base.table_assembler.TableAssembler.name"]], "outputannotatortype (tableassembler attribute)": [[206, "sparknlp.base.table_assembler.TableAssembler.outputAnnotatorType"], [456, "sparknlp.base.table_assembler.TableAssembler.outputAnnotatorType"]], "setcsvdelimiter() (tableassembler method)": [[206, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"], [456, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[206, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"], [456, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[206, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"], [456, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[206, "module-sparknlp.base.table_assembler"], [456, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[207, "sparknlp.base.token_assembler.TokenAssembler"], [457, "sparknlp.base.token_assembler.TokenAssembler"]], "inputannotatortypes (tokenassembler attribute)": [[207, "sparknlp.base.token_assembler.TokenAssembler.inputAnnotatorTypes"], [457, "sparknlp.base.token_assembler.TokenAssembler.inputAnnotatorTypes"]], "name (tokenassembler attribute)": [[207, "sparknlp.base.token_assembler.TokenAssembler.name"], [457, "sparknlp.base.token_assembler.TokenAssembler.name"]], "outputannotatortype (tokenassembler attribute)": [[207, "sparknlp.base.token_assembler.TokenAssembler.outputAnnotatorType"], [457, "sparknlp.base.token_assembler.TokenAssembler.outputAnnotatorType"]], "preserveposition (tokenassembler attribute)": [[207, "sparknlp.base.token_assembler.TokenAssembler.preservePosition"], [457, "sparknlp.base.token_assembler.TokenAssembler.preservePosition"]], "setparams() (tokenassembler method)": [[207, "sparknlp.base.token_assembler.TokenAssembler.setParams"], [457, "sparknlp.base.token_assembler.TokenAssembler.setParams"]], "setpreserveposition() (tokenassembler method)": [[207, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"], [457, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[207, "module-sparknlp.base.token_assembler"], [457, "module-sparknlp.base.token_assembler"]], "sparknlp.common": [[208, "module-sparknlp.common"], [463, "module-sparknlp.common"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[209, "sparknlp.common.annotator_approach.AnnotatorApproach"], [458, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[209, "module-sparknlp.common.annotator_approach"], [458, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[210, "sparknlp.common.annotator_model.AnnotatorModel"], [459, "sparknlp.common.annotator_model.AnnotatorModel"]], "setparams() (annotatormodel method)": [[210, "sparknlp.common.annotator_model.AnnotatorModel.setParams"], [459, "sparknlp.common.annotator_model.AnnotatorModel.setParams"]], "sparknlp.common.annotator_model": [[210, "module-sparknlp.common.annotator_model"], [459, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "inputannotatortypes (annotatorproperties attribute)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.inputAnnotatorTypes"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.inputAnnotatorTypes"]], "inputcols (annotatorproperties attribute)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.inputCols"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.inputCols"]], "inputcolsvalidation() (annotatorproperties method)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.inputColsValidation"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.inputColsValidation"]], "lazyannotator (annotatorproperties attribute)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.lazyAnnotator"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.lazyAnnotator"]], "optionalinputannotatortypes (annotatorproperties attribute)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.optionalInputAnnotatorTypes"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorproperties attribute)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.outputAnnotatorType"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.outputAnnotatorType"]], "outputcol (annotatorproperties attribute)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.outputCol"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.outputCol"]], "setinputcols() (annotatorproperties method)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[211, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"], [460, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[211, "module-sparknlp.common.annotator_properties"], [460, "module-sparknlp.common.annotator_properties"]], "audio (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.AUDIO"], [461, "sparknlp.common.annotator_type.AnnotatorType.AUDIO"]], "annotatortype (class in sparknlp.common.annotator_type)": [[212, "sparknlp.common.annotator_type.AnnotatorType"], [461, "sparknlp.common.annotator_type.AnnotatorType"]], "category (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.CATEGORY"], [461, "sparknlp.common.annotator_type.AnnotatorType.CATEGORY"]], "chunk (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.CHUNK"], [461, "sparknlp.common.annotator_type.AnnotatorType.CHUNK"]], "date (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.DATE"], [461, "sparknlp.common.annotator_type.AnnotatorType.DATE"]], "dependency (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.DEPENDENCY"], [461, "sparknlp.common.annotator_type.AnnotatorType.DEPENDENCY"]], "document (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.DOCUMENT"], [461, "sparknlp.common.annotator_type.AnnotatorType.DOCUMENT"]], "doc_similarity_rankings (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.DOC_SIMILARITY_RANKINGS"], [461, "sparknlp.common.annotator_type.AnnotatorType.DOC_SIMILARITY_RANKINGS"]], "dummy (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.DUMMY"], [461, "sparknlp.common.annotator_type.AnnotatorType.DUMMY"]], "entity (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.ENTITY"], [461, "sparknlp.common.annotator_type.AnnotatorType.ENTITY"]], "image (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.IMAGE"], [461, "sparknlp.common.annotator_type.AnnotatorType.IMAGE"]], "labeled_dependency (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.LABELED_DEPENDENCY"], [461, "sparknlp.common.annotator_type.AnnotatorType.LABELED_DEPENDENCY"]], "language (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.LANGUAGE"], [461, "sparknlp.common.annotator_type.AnnotatorType.LANGUAGE"]], "named_entity (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.NAMED_ENTITY"], [461, "sparknlp.common.annotator_type.AnnotatorType.NAMED_ENTITY"]], "negex (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.NEGEX"], [461, "sparknlp.common.annotator_type.AnnotatorType.NEGEX"]], "node (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.NODE"], [461, "sparknlp.common.annotator_type.AnnotatorType.NODE"]], "pos (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.POS"], [461, "sparknlp.common.annotator_type.AnnotatorType.POS"]], "sentence_embeddings (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.SENTENCE_EMBEDDINGS"], [461, "sparknlp.common.annotator_type.AnnotatorType.SENTENCE_EMBEDDINGS"]], "sentiment (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.SENTIMENT"], [461, "sparknlp.common.annotator_type.AnnotatorType.SENTIMENT"]], "table (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.TABLE"], [461, "sparknlp.common.annotator_type.AnnotatorType.TABLE"]], "token (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.TOKEN"], [461, "sparknlp.common.annotator_type.AnnotatorType.TOKEN"]], "wordpiece (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.WORDPIECE"], [461, "sparknlp.common.annotator_type.AnnotatorType.WORDPIECE"]], "word_embeddings (annotatortype attribute)": [[212, "sparknlp.common.annotator_type.AnnotatorType.WORD_EMBEDDINGS"], [461, "sparknlp.common.annotator_type.AnnotatorType.WORD_EMBEDDINGS"]], "sparknlp.common.annotator_type": [[212, "module-sparknlp.common.annotator_type"], [461, "module-sparknlp.common.annotator_type"]], "coverageresult (class in sparknlp.common.coverage_result)": [[213, "sparknlp.common.coverage_result.CoverageResult"], [462, "sparknlp.common.coverage_result.CoverageResult"]], "sparknlp.common.coverage_result": [[213, "module-sparknlp.common.coverage_result"], [462, "module-sparknlp.common.coverage_result"]], "match_all (matchstrategy attribute)": [[214, "sparknlp.common.match_strategy.MatchStrategy.MATCH_ALL"], [464, "sparknlp.common.match_strategy.MatchStrategy.MATCH_ALL"]], "match_complete (matchstrategy attribute)": [[214, "sparknlp.common.match_strategy.MatchStrategy.MATCH_COMPLETE"], [464, "sparknlp.common.match_strategy.MatchStrategy.MATCH_COMPLETE"]], "match_first (matchstrategy attribute)": [[214, "sparknlp.common.match_strategy.MatchStrategy.MATCH_FIRST"], [464, "sparknlp.common.match_strategy.MatchStrategy.MATCH_FIRST"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[214, "sparknlp.common.match_strategy.MatchStrategy"], [464, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[214, "module-sparknlp.common.match_strategy"], [464, "module-sparknlp.common.match_strategy"]], "hasaudiofeatureproperties (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties"], [465, "sparknlp.common.properties.HasAudioFeatureProperties"]], "hasbatchedannotate (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasBatchedAnnotate"], [465, "sparknlp.common.properties.HasBatchedAnnotate"]], "hasbatchedannotateaudio (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasBatchedAnnotateAudio"], [465, "sparknlp.common.properties.HasBatchedAnnotateAudio"]], "hasbatchedannotateimage (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasBatchedAnnotateImage"], [465, "sparknlp.common.properties.HasBatchedAnnotateImage"]], "hascandidatelabelsproperties (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasCandidateLabelsProperties"], [465, "sparknlp.common.properties.HasCandidateLabelsProperties"]], "hascasesensitiveproperties (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasCaseSensitiveProperties"], [465, "sparknlp.common.properties.HasCaseSensitiveProperties"]], "hasclassifieractivationproperties (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasClassifierActivationProperties"], [465, "sparknlp.common.properties.HasClassifierActivationProperties"]], "hasclstokenproperties (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasClsTokenProperties"], [465, "sparknlp.common.properties.HasClsTokenProperties"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasEmbeddingsProperties"], [465, "sparknlp.common.properties.HasEmbeddingsProperties"]], "hasenablecachingproperties (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasEnableCachingProperties"], [465, "sparknlp.common.properties.HasEnableCachingProperties"]], "hasengine (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasEngine"], [465, "sparknlp.common.properties.HasEngine"]], "hasgeneratorproperties (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasGeneratorProperties"], [465, "sparknlp.common.properties.HasGeneratorProperties"]], "hasimagefeatureproperties (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasImageFeatureProperties"], [465, "sparknlp.common.properties.HasImageFeatureProperties"]], "hasllamacppproperties (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasLlamaCppProperties"], [465, "sparknlp.common.properties.HasLlamaCppProperties"]], "haslongmaxsentencelengthlimit (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit"], [465, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit"]], "hasmaxsentencelengthlimit (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasMaxSentenceLengthLimit"], [465, "sparknlp.common.properties.HasMaxSentenceLengthLimit"]], "hasrescalefactor (class in sparknlp.common.properties)": [[215, "sparknlp.common.properties.HasRescaleFactor"], [465, "sparknlp.common.properties.HasRescaleFactor"]], "activation (hasclassifieractivationproperties attribute)": [[215, "sparknlp.common.properties.HasClassifierActivationProperties.activation"], [465, "sparknlp.common.properties.HasClassifierActivationProperties.activation"]], "batchsize (hasbatchedannotate attribute)": [[215, "sparknlp.common.properties.HasBatchedAnnotate.batchSize"], [465, "sparknlp.common.properties.HasBatchedAnnotate.batchSize"]], "batchsize (hasbatchedannotateaudio attribute)": [[215, "sparknlp.common.properties.HasBatchedAnnotateAudio.batchSize"], [465, "sparknlp.common.properties.HasBatchedAnnotateAudio.batchSize"]], "batchsize (hasbatchedannotateimage attribute)": [[215, "sparknlp.common.properties.HasBatchedAnnotateImage.batchSize"], [465, "sparknlp.common.properties.HasBatchedAnnotateImage.batchSize"]], "beamsize (hasgeneratorproperties attribute)": [[215, "sparknlp.common.properties.HasGeneratorProperties.beamSize"], [465, "sparknlp.common.properties.HasGeneratorProperties.beamSize"]], "cacheprompt (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.cachePrompt"], [465, "sparknlp.common.properties.HasLlamaCppProperties.cachePrompt"]], "candidatelabels (hascandidatelabelsproperties attribute)": [[215, "sparknlp.common.properties.HasCandidateLabelsProperties.candidateLabels"], [465, "sparknlp.common.properties.HasCandidateLabelsProperties.candidateLabels"]], "casesensitive (hascasesensitiveproperties attribute)": [[215, "sparknlp.common.properties.HasCaseSensitiveProperties.caseSensitive"], [465, "sparknlp.common.properties.HasCaseSensitiveProperties.caseSensitive"]], "chattemplate (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.chatTemplate"], [465, "sparknlp.common.properties.HasLlamaCppProperties.chatTemplate"]], "contradictionidparam (hascandidatelabelsproperties attribute)": [[215, "sparknlp.common.properties.HasCandidateLabelsProperties.contradictionIdParam"], [465, "sparknlp.common.properties.HasCandidateLabelsProperties.contradictionIdParam"]], "defragmentationthreshold (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.defragmentationThreshold"], [465, "sparknlp.common.properties.HasLlamaCppProperties.defragmentationThreshold"]], "dimension (hasembeddingsproperties attribute)": [[215, "sparknlp.common.properties.HasEmbeddingsProperties.dimension"], [465, "sparknlp.common.properties.HasEmbeddingsProperties.dimension"]], "disabletokenids (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.disableTokenIds"], [465, "sparknlp.common.properties.HasLlamaCppProperties.disableTokenIds"]], "donormalize (hasaudiofeatureproperties attribute)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.doNormalize"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.doNormalize"]], "donormalize (hasimagefeatureproperties attribute)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.doNormalize"], [465, "sparknlp.common.properties.HasImageFeatureProperties.doNormalize"]], "dorescale (hasrescalefactor attribute)": [[215, "sparknlp.common.properties.HasRescaleFactor.doRescale"], [465, "sparknlp.common.properties.HasRescaleFactor.doRescale"]], "doresize (hasimagefeatureproperties attribute)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.doResize"], [465, "sparknlp.common.properties.HasImageFeatureProperties.doResize"]], "dosample (hasgeneratorproperties attribute)": [[215, "sparknlp.common.properties.HasGeneratorProperties.doSample"], [465, "sparknlp.common.properties.HasGeneratorProperties.doSample"]], "dynamictemperatureexponent (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureExponent"], [465, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureExponent"]], "dynamictemperaturerange (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureRange"], [465, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureRange"]], "embedding (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.embedding"], [465, "sparknlp.common.properties.HasLlamaCppProperties.embedding"]], "enablecaching (hasenablecachingproperties attribute)": [[215, "sparknlp.common.properties.HasEnableCachingProperties.enableCaching"], [465, "sparknlp.common.properties.HasEnableCachingProperties.enableCaching"]], "engine (hasengine attribute)": [[215, "sparknlp.common.properties.HasEngine.engine"], [465, "sparknlp.common.properties.HasEngine.engine"]], "entailmentidparam (hascandidatelabelsproperties attribute)": [[215, "sparknlp.common.properties.HasCandidateLabelsProperties.entailmentIdParam"], [465, "sparknlp.common.properties.HasCandidateLabelsProperties.entailmentIdParam"]], "featureextractortype (hasimagefeatureproperties attribute)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.featureExtractorType"], [465, "sparknlp.common.properties.HasImageFeatureProperties.featureExtractorType"]], "featuresize (hasaudiofeatureproperties attribute)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.featureSize"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.featureSize"]], "flashattention (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.flashAttention"], [465, "sparknlp.common.properties.HasLlamaCppProperties.flashAttention"]], "frequencypenalty (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.frequencyPenalty"], [465, "sparknlp.common.properties.HasLlamaCppProperties.frequencyPenalty"]], "getactivation() (hasclassifieractivationproperties method)": [[215, "sparknlp.common.properties.HasClassifierActivationProperties.getActivation"], [465, "sparknlp.common.properties.HasClassifierActivationProperties.getActivation"]], "getbatchsize() (hasbatchedannotate method)": [[215, "sparknlp.common.properties.HasBatchedAnnotate.getBatchSize"], [465, "sparknlp.common.properties.HasBatchedAnnotate.getBatchSize"]], "getbatchsize() (hasbatchedannotateaudio method)": [[215, "sparknlp.common.properties.HasBatchedAnnotateAudio.getBatchSize"], [465, "sparknlp.common.properties.HasBatchedAnnotateAudio.getBatchSize"]], "getbatchsize() (hasbatchedannotateimage method)": [[215, "sparknlp.common.properties.HasBatchedAnnotateImage.getBatchSize"], [465, "sparknlp.common.properties.HasBatchedAnnotateImage.getBatchSize"]], "getcasesensitive() (hascasesensitiveproperties method)": [[215, "sparknlp.common.properties.HasCaseSensitiveProperties.getCaseSensitive"], [465, "sparknlp.common.properties.HasCaseSensitiveProperties.getCaseSensitive"]], "getdimension() (hasembeddingsproperties method)": [[215, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"], [465, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "getenablecaching() (hasenablecachingproperties method)": [[215, "sparknlp.common.properties.HasEnableCachingProperties.getEnableCaching"], [465, "sparknlp.common.properties.HasEnableCachingProperties.getEnableCaching"]], "getengine() (hasengine method)": [[215, "sparknlp.common.properties.HasEngine.getEngine"], [465, "sparknlp.common.properties.HasEngine.getEngine"]], "getmaxsentencelength() (hasmaxsentencelengthlimit method)": [[215, "sparknlp.common.properties.HasMaxSentenceLengthLimit.getMaxSentenceLength"], [465, "sparknlp.common.properties.HasMaxSentenceLengthLimit.getMaxSentenceLength"]], "getmetadata() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.getMetadata"], [465, "sparknlp.common.properties.HasLlamaCppProperties.getMetadata"]], "getmultilabel() (hasclassifieractivationproperties method)": [[215, "sparknlp.common.properties.HasClassifierActivationProperties.getMultilabel"], [465, "sparknlp.common.properties.HasClassifierActivationProperties.getMultilabel"]], "getuseclstoken() (hasclstokenproperties method)": [[215, "sparknlp.common.properties.HasClsTokenProperties.getUseCLSToken"], [465, "sparknlp.common.properties.HasClsTokenProperties.getUseCLSToken"]], "gpusplitmode (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.gpuSplitMode"], [465, "sparknlp.common.properties.HasLlamaCppProperties.gpuSplitMode"]], "grammar (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.grammar"], [465, "sparknlp.common.properties.HasLlamaCppProperties.grammar"]], "grpattnn (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnN"], [465, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnN"]], "grpattnw (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnW"], [465, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnW"]], "ignoreeos (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.ignoreEos"], [465, "sparknlp.common.properties.HasLlamaCppProperties.ignoreEos"]], "imagemean (hasimagefeatureproperties attribute)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.imageMean"], [465, "sparknlp.common.properties.HasImageFeatureProperties.imageMean"]], "imagestd (hasimagefeatureproperties attribute)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.imageStd"], [465, "sparknlp.common.properties.HasImageFeatureProperties.imageStd"]], "inputprefix (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefix"], [465, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefix"]], "inputprefixbos (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefixBos"], [465, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefixBos"]], "inputsuffix (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.inputSuffix"], [465, "sparknlp.common.properties.HasLlamaCppProperties.inputSuffix"]], "lookupcachedynamicfilepath (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheDynamicFilePath"], [465, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheDynamicFilePath"]], "lookupcachestaticfilepath (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheStaticFilePath"], [465, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheStaticFilePath"]], "maingpu (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.mainGpu"], [465, "sparknlp.common.properties.HasLlamaCppProperties.mainGpu"]], "maxoutputlength (hasgeneratorproperties attribute)": [[215, "sparknlp.common.properties.HasGeneratorProperties.maxOutputLength"], [465, "sparknlp.common.properties.HasGeneratorProperties.maxOutputLength"]], "maxsentencelength (hasmaxsentencelengthlimit attribute)": [[215, "sparknlp.common.properties.HasMaxSentenceLengthLimit.maxSentenceLength"], [465, "sparknlp.common.properties.HasMaxSentenceLengthLimit.maxSentenceLength"]], "max_length_limit (haslongmaxsentencelengthlimit attribute)": [[215, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit.max_length_limit"], [465, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit.max_length_limit"]], "max_length_limit (hasmaxsentencelengthlimit attribute)": [[215, "sparknlp.common.properties.HasMaxSentenceLengthLimit.max_length_limit"], [465, "sparknlp.common.properties.HasMaxSentenceLengthLimit.max_length_limit"]], "minkeep (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.minKeep"], [465, "sparknlp.common.properties.HasLlamaCppProperties.minKeep"]], "minoutputlength (hasgeneratorproperties attribute)": [[215, "sparknlp.common.properties.HasGeneratorProperties.minOutputLength"], [465, "sparknlp.common.properties.HasGeneratorProperties.minOutputLength"]], "minp (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.minP"], [465, "sparknlp.common.properties.HasLlamaCppProperties.minP"]], "mirostat (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.miroStat"], [465, "sparknlp.common.properties.HasLlamaCppProperties.miroStat"]], "mirostateta (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.miroStatEta"], [465, "sparknlp.common.properties.HasLlamaCppProperties.miroStatEta"]], "mirostattau (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.miroStatTau"], [465, "sparknlp.common.properties.HasLlamaCppProperties.miroStatTau"]], "modelalias (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.modelAlias"], [465, "sparknlp.common.properties.HasLlamaCppProperties.modelAlias"]], "modeldraft (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.modelDraft"], [465, "sparknlp.common.properties.HasLlamaCppProperties.modelDraft"]], "multilabel (hasclassifieractivationproperties attribute)": [[215, "sparknlp.common.properties.HasClassifierActivationProperties.multilabel"], [465, "sparknlp.common.properties.HasClassifierActivationProperties.multilabel"]], "nbatch (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nBatch"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nBatch"]], "nchunks (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nChunks"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nChunks"]], "nctx (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nCtx"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nCtx"]], "ndraft (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nDraft"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nDraft"]], "ngpulayers (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayers"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayers"]], "ngpulayersdraft (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayersDraft"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayersDraft"]], "nkeep (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nKeep"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nKeep"]], "npredict (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nPredict"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nPredict"]], "nprobs (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nProbs"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nProbs"]], "nreturnsequences (hasgeneratorproperties attribute)": [[215, "sparknlp.common.properties.HasGeneratorProperties.nReturnSequences"], [465, "sparknlp.common.properties.HasGeneratorProperties.nReturnSequences"]], "nsequences (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nSequences"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nSequences"]], "nthreads (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nThreads"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nThreads"]], "nthreadsbatch (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatch"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatch"]], "nthreadsbatchdraft (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatchDraft"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatchDraft"]], "nthreadsdraft (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsDraft"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsDraft"]], "nubatch (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.nUbatch"], [465, "sparknlp.common.properties.HasLlamaCppProperties.nUbatch"]], "nokvoffload (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.noKvOffload"], [465, "sparknlp.common.properties.HasLlamaCppProperties.noKvOffload"]], "norepeatngramsize (hasgeneratorproperties attribute)": [[215, "sparknlp.common.properties.HasGeneratorProperties.noRepeatNgramSize"], [465, "sparknlp.common.properties.HasGeneratorProperties.noRepeatNgramSize"]], "numastrategy (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.numaStrategy"], [465, "sparknlp.common.properties.HasLlamaCppProperties.numaStrategy"]], "psplit (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.pSplit"], [465, "sparknlp.common.properties.HasLlamaCppProperties.pSplit"]], "paddingside (hasaudiofeatureproperties attribute)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.paddingSide"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.paddingSide"]], "paddingvalue (hasaudiofeatureproperties attribute)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.paddingValue"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.paddingValue"]], "penalizenl (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.penalizeNl"], [465, "sparknlp.common.properties.HasLlamaCppProperties.penalizeNl"]], "penaltyprompt (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.penaltyPrompt"], [465, "sparknlp.common.properties.HasLlamaCppProperties.penaltyPrompt"]], "poolingtype (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.poolingType"], [465, "sparknlp.common.properties.HasLlamaCppProperties.poolingType"]], "presencepenalty (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.presencePenalty"], [465, "sparknlp.common.properties.HasLlamaCppProperties.presencePenalty"]], "repeatlastn (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.repeatLastN"], [465, "sparknlp.common.properties.HasLlamaCppProperties.repeatLastN"]], "repeatpenalty (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.repeatPenalty"], [465, "sparknlp.common.properties.HasLlamaCppProperties.repeatPenalty"]], "repetitionpenalty (hasgeneratorproperties attribute)": [[215, "sparknlp.common.properties.HasGeneratorProperties.repetitionPenalty"], [465, "sparknlp.common.properties.HasGeneratorProperties.repetitionPenalty"]], "resample (hasimagefeatureproperties attribute)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.resample"], [465, "sparknlp.common.properties.HasImageFeatureProperties.resample"]], "rescalefactor (hasrescalefactor attribute)": [[215, "sparknlp.common.properties.HasRescaleFactor.rescaleFactor"], [465, "sparknlp.common.properties.HasRescaleFactor.rescaleFactor"]], "returnattentionmask (hasaudiofeatureproperties attribute)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.returnAttentionMask"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.returnAttentionMask"]], "ropefreqbase (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqBase"], [465, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqBase"]], "ropefreqscale (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqScale"], [465, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqScale"]], "ropescalingtype (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.ropeScalingType"], [465, "sparknlp.common.properties.HasLlamaCppProperties.ropeScalingType"]], "samplers (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.samplers"], [465, "sparknlp.common.properties.HasLlamaCppProperties.samplers"]], "samplingrate (hasaudiofeatureproperties attribute)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.samplingRate"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.samplingRate"]], "seed (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.seed"], [465, "sparknlp.common.properties.HasLlamaCppProperties.seed"]], "setactivation() (hasclassifieractivationproperties method)": [[215, "sparknlp.common.properties.HasClassifierActivationProperties.setActivation"], [465, "sparknlp.common.properties.HasClassifierActivationProperties.setActivation"]], "setbatchsize() (hasbatchedannotate method)": [[215, "sparknlp.common.properties.HasBatchedAnnotate.setBatchSize"], [465, "sparknlp.common.properties.HasBatchedAnnotate.setBatchSize"]], "setbatchsize() (hasbatchedannotateaudio method)": [[215, "sparknlp.common.properties.HasBatchedAnnotateAudio.setBatchSize"], [465, "sparknlp.common.properties.HasBatchedAnnotateAudio.setBatchSize"]], "setbatchsize() (hasbatchedannotateimage method)": [[215, "sparknlp.common.properties.HasBatchedAnnotateImage.setBatchSize"], [465, "sparknlp.common.properties.HasBatchedAnnotateImage.setBatchSize"]], "setbeamsize() (hasgeneratorproperties method)": [[215, "sparknlp.common.properties.HasGeneratorProperties.setBeamSize"], [465, "sparknlp.common.properties.HasGeneratorProperties.setBeamSize"]], "setcacheprompt() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setCachePrompt"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setCachePrompt"]], "setcandidatelabels() (hascandidatelabelsproperties method)": [[215, "sparknlp.common.properties.HasCandidateLabelsProperties.setCandidateLabels"], [465, "sparknlp.common.properties.HasCandidateLabelsProperties.setCandidateLabels"]], "setcasesensitive() (hascasesensitiveproperties method)": [[215, "sparknlp.common.properties.HasCaseSensitiveProperties.setCaseSensitive"], [465, "sparknlp.common.properties.HasCaseSensitiveProperties.setCaseSensitive"]], "setchattemplate() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setChatTemplate"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setChatTemplate"]], "setcontradictionidparam() (hascandidatelabelsproperties method)": [[215, "sparknlp.common.properties.HasCandidateLabelsProperties.setContradictionIdParam"], [465, "sparknlp.common.properties.HasCandidateLabelsProperties.setContradictionIdParam"]], "setdefragmentationthreshold() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setDefragmentationThreshold"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setDefragmentationThreshold"]], "setdimension() (hasembeddingsproperties method)": [[215, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"], [465, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdisabletokenids() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setDisableTokenIds"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setDisableTokenIds"]], "setdonormalize() (hasaudiofeatureproperties method)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.setDoNormalize"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.setDoNormalize"]], "setdonormalize() (hasimagefeatureproperties method)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.setDoNormalize"], [465, "sparknlp.common.properties.HasImageFeatureProperties.setDoNormalize"]], "setdorescale() (hasrescalefactor method)": [[215, "sparknlp.common.properties.HasRescaleFactor.setDoRescale"], [465, "sparknlp.common.properties.HasRescaleFactor.setDoRescale"]], "setdoresize() (hasimagefeatureproperties method)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.setDoResize"], [465, "sparknlp.common.properties.HasImageFeatureProperties.setDoResize"]], "setdosample() (hasgeneratorproperties method)": [[215, "sparknlp.common.properties.HasGeneratorProperties.setDoSample"], [465, "sparknlp.common.properties.HasGeneratorProperties.setDoSample"]], "setdynamictemperatureexponent() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureExponent"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureRange"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureRange"]], "setembedding() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setEmbedding"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setEmbedding"]], "setenablecaching() (hasenablecachingproperties method)": [[215, "sparknlp.common.properties.HasEnableCachingProperties.setEnableCaching"], [465, "sparknlp.common.properties.HasEnableCachingProperties.setEnableCaching"]], "setentailmentidparam() (hascandidatelabelsproperties method)": [[215, "sparknlp.common.properties.HasCandidateLabelsProperties.setEntailmentIdParam"], [465, "sparknlp.common.properties.HasCandidateLabelsProperties.setEntailmentIdParam"]], "setfeatureextractortype() (hasimagefeatureproperties method)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.setFeatureExtractorType"], [465, "sparknlp.common.properties.HasImageFeatureProperties.setFeatureExtractorType"]], "setfeaturesize() (hasaudiofeatureproperties method)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.setFeatureSize"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.setFeatureSize"]], "setflashattention() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setFlashAttention"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setFlashAttention"]], "setfrequencypenalty() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setFrequencyPenalty"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setFrequencyPenalty"]], "setgpusplitmode() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setGpuSplitMode"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setGpuSplitMode"]], "setgrammar() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setGrammar"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setGrammar"]], "setgrpattnn() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnN"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnN"]], "setgrpattnw() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnW"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnW"]], "setignoreeos() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setIgnoreEos"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setIgnoreEos"]], "setimagemean() (hasimagefeatureproperties method)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.setImageMean"], [465, "sparknlp.common.properties.HasImageFeatureProperties.setImageMean"]], "setimagestd() (hasimagefeatureproperties method)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.setImageStd"], [465, "sparknlp.common.properties.HasImageFeatureProperties.setImageStd"]], "setinputprefix() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefix"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefix"]], "setinputprefixbos() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefixBos"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefixBos"]], "setinputsuffix() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setInputSuffix"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setInputSuffix"]], "setlookupcachedynamicfilepath() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheDynamicFilePath"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheDynamicFilePath"]], "setlookupcachestaticfilepath() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheStaticFilePath"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheStaticFilePath"]], "setloraadapters() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setLoraAdapters"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setLoraAdapters"]], "setmaingpu() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setMainGpu"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setMainGpu"]], "setmaxoutputlength() (hasgeneratorproperties method)": [[215, "sparknlp.common.properties.HasGeneratorProperties.setMaxOutputLength"], [465, "sparknlp.common.properties.HasGeneratorProperties.setMaxOutputLength"]], "setmaxsentencelength() (hasmaxsentencelengthlimit method)": [[215, "sparknlp.common.properties.HasMaxSentenceLengthLimit.setMaxSentenceLength"], [465, "sparknlp.common.properties.HasMaxSentenceLengthLimit.setMaxSentenceLength"]], "setminkeep() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setMinKeep"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setMinKeep"]], "setminoutputlength() (hasgeneratorproperties method)": [[215, "sparknlp.common.properties.HasGeneratorProperties.setMinOutputLength"], [465, "sparknlp.common.properties.HasGeneratorProperties.setMinOutputLength"]], "setminp() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setMinP"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setMinP"]], "setmirostat() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStat"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStat"]], "setmirostateta() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatEta"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatEta"]], "setmirostattau() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatTau"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatTau"]], "setmodelalias() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setModelAlias"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setModelAlias"]], "setmodeldraft() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setModelDraft"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setModelDraft"]], "setmultilabel() (hasclassifieractivationproperties method)": [[215, "sparknlp.common.properties.HasClassifierActivationProperties.setMultilabel"], [465, "sparknlp.common.properties.HasClassifierActivationProperties.setMultilabel"]], "setnbatch() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNBatch"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNBatch"]], "setnchunks() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNChunks"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNChunks"]], "setnctx() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNCtx"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNCtx"]], "setndraft() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNDraft"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNDraft"]], "setngpulayers() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayers"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayers"]], "setngpulayersdraft() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayersDraft"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayersDraft"]], "setnkeep() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNKeep"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNKeep"]], "setnparallel() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNParallel"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNParallel"]], "setnpredict() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNPredict"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNPredict"]], "setnprobs() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNProbs"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNProbs"]], "setnreturnsequences() (hasgeneratorproperties method)": [[215, "sparknlp.common.properties.HasGeneratorProperties.setNReturnSequences"], [465, "sparknlp.common.properties.HasGeneratorProperties.setNReturnSequences"]], "setnsequences() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNSequences"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNSequences"]], "setnthreads() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNThreads"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNThreads"]], "setnthreadsbatch() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatch"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatch"]], "setnthreadsbatchdraft() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatchDraft"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatchDraft"]], "setnthreadsdraft() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsDraft"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsDraft"]], "setnubatch() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNUbatch"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNUbatch"]], "setnokvoffload() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNoKvOffload"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNoKvOffload"]], "setnorepeatngramsize() (hasgeneratorproperties method)": [[215, "sparknlp.common.properties.HasGeneratorProperties.setNoRepeatNgramSize"], [465, "sparknlp.common.properties.HasGeneratorProperties.setNoRepeatNgramSize"]], "setnumastrategy() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setNumaStrategy"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setNumaStrategy"]], "setpsplit() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setPSplit"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setPSplit"]], "setpaddingside() (hasaudiofeatureproperties method)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingSide"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingSide"]], "setpaddingvalue() (hasaudiofeatureproperties method)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingValue"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingValue"]], "setpenalizenl() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setPenalizeNl"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setPenalizeNl"]], "setpenaltyprompt() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setPenaltyPrompt"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setPenaltyPrompt"]], "setpoolingtype() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setPoolingType"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setPoolingType"]], "setpresencepenalty() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setPresencePenalty"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setPresencePenalty"]], "setrepeatlastn() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatLastN"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatLastN"]], "setrepeatpenalty() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatPenalty"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatPenalty"]], "setrepetitionpenalty() (hasgeneratorproperties method)": [[215, "sparknlp.common.properties.HasGeneratorProperties.setRepetitionPenalty"], [465, "sparknlp.common.properties.HasGeneratorProperties.setRepetitionPenalty"]], "setresample() (hasimagefeatureproperties method)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.setResample"], [465, "sparknlp.common.properties.HasImageFeatureProperties.setResample"]], "setrescalefactor() (hasrescalefactor method)": [[215, "sparknlp.common.properties.HasRescaleFactor.setRescaleFactor"], [465, "sparknlp.common.properties.HasRescaleFactor.setRescaleFactor"]], "setreturnattentionmask() (hasaudiofeatureproperties method)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.setReturnAttentionMask"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.setReturnAttentionMask"]], "setropefreqbase() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqBase"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqBase"]], "setropefreqscale() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqScale"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqScale"]], "setropescalingtype() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setRopeScalingType"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setRopeScalingType"]], "setsamplers() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setSamplers"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setSamplers"]], "setsamplingrate() (hasaudiofeatureproperties method)": [[215, "sparknlp.common.properties.HasAudioFeatureProperties.setSamplingRate"], [465, "sparknlp.common.properties.HasAudioFeatureProperties.setSamplingRate"]], "setseed() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setSeed"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setSeed"]], "setsize() (hasimagefeatureproperties method)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.setSize"], [465, "sparknlp.common.properties.HasImageFeatureProperties.setSize"]], "setstopstrings() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setStopStrings"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setStopStrings"]], "setsystemprompt() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setSystemPrompt"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setSystemPrompt"]], "settask() (hasgeneratorproperties method)": [[215, "sparknlp.common.properties.HasGeneratorProperties.setTask"], [465, "sparknlp.common.properties.HasGeneratorProperties.setTask"]], "settemperature() (hasgeneratorproperties method)": [[215, "sparknlp.common.properties.HasGeneratorProperties.setTemperature"], [465, "sparknlp.common.properties.HasGeneratorProperties.setTemperature"]], "settemperature() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setTemperature"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setTemperature"]], "settensorsplit() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setTensorSplit"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setTensorSplit"]], "settfsz() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setTfsZ"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setTfsZ"]], "setthreshold() (hasclassifieractivationproperties method)": [[215, "sparknlp.common.properties.HasClassifierActivationProperties.setThreshold"], [465, "sparknlp.common.properties.HasClassifierActivationProperties.setThreshold"]], "settokenbias() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setTokenBias"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setTokenBias"]], "settokenidbias() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setTokenIdBias"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setTokenIdBias"]], "settopk() (hasgeneratorproperties method)": [[215, "sparknlp.common.properties.HasGeneratorProperties.setTopK"], [465, "sparknlp.common.properties.HasGeneratorProperties.setTopK"]], "settopk() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setTopK"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setTopK"]], "settopp() (hasgeneratorproperties method)": [[215, "sparknlp.common.properties.HasGeneratorProperties.setTopP"], [465, "sparknlp.common.properties.HasGeneratorProperties.setTopP"]], "settopp() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setTopP"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setTopP"]], "settypicalp() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setTypicalP"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setTypicalP"]], "setuseclstoken() (hasclstokenproperties method)": [[215, "sparknlp.common.properties.HasClsTokenProperties.setUseCLSToken"], [465, "sparknlp.common.properties.HasClsTokenProperties.setUseCLSToken"]], "setusechattemplate() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setUseChatTemplate"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setUseChatTemplate"]], "setusemlock() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setUseMlock"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setUseMlock"]], "setusemmap() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setUseMmap"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setUseMmap"]], "setyarnattnfactor() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setYarnAttnFactor"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setYarnAttnFactor"]], "setyarnbetafast() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaFast"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaFast"]], "setyarnbetaslow() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaSlow"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaSlow"]], "setyarnextfactor() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setYarnExtFactor"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setYarnExtFactor"]], "setyarnorigctx() (hasllamacppproperties method)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.setYarnOrigCtx"], [465, "sparknlp.common.properties.HasLlamaCppProperties.setYarnOrigCtx"]], "size (hasimagefeatureproperties attribute)": [[215, "sparknlp.common.properties.HasImageFeatureProperties.size"], [465, "sparknlp.common.properties.HasImageFeatureProperties.size"]], "sparknlp.common.properties": [[215, "module-sparknlp.common.properties"], [465, "module-sparknlp.common.properties"]], "stopstrings (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.stopStrings"], [465, "sparknlp.common.properties.HasLlamaCppProperties.stopStrings"]], "systemprompt (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.systemPrompt"], [465, "sparknlp.common.properties.HasLlamaCppProperties.systemPrompt"]], "task (hasgeneratorproperties attribute)": [[215, "sparknlp.common.properties.HasGeneratorProperties.task"], [465, "sparknlp.common.properties.HasGeneratorProperties.task"]], "temperature (hasgeneratorproperties attribute)": [[215, "sparknlp.common.properties.HasGeneratorProperties.temperature"], [465, "sparknlp.common.properties.HasGeneratorProperties.temperature"]], "temperature (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.temperature"], [465, "sparknlp.common.properties.HasLlamaCppProperties.temperature"]], "tensorsplit (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.tensorSplit"], [465, "sparknlp.common.properties.HasLlamaCppProperties.tensorSplit"]], "tfsz (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.tfsZ"], [465, "sparknlp.common.properties.HasLlamaCppProperties.tfsZ"]], "threshold (hasclassifieractivationproperties attribute)": [[215, "sparknlp.common.properties.HasClassifierActivationProperties.threshold"], [465, "sparknlp.common.properties.HasClassifierActivationProperties.threshold"]], "topk (hasgeneratorproperties attribute)": [[215, "sparknlp.common.properties.HasGeneratorProperties.topK"], [465, "sparknlp.common.properties.HasGeneratorProperties.topK"]], "topk (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.topK"], [465, "sparknlp.common.properties.HasLlamaCppProperties.topK"]], "topp (hasgeneratorproperties attribute)": [[215, "sparknlp.common.properties.HasGeneratorProperties.topP"], [465, "sparknlp.common.properties.HasGeneratorProperties.topP"]], "topp (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.topP"], [465, "sparknlp.common.properties.HasLlamaCppProperties.topP"]], "typicalp (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.typicalP"], [465, "sparknlp.common.properties.HasLlamaCppProperties.typicalP"]], "useclstoken (hasclstokenproperties attribute)": [[215, "sparknlp.common.properties.HasClsTokenProperties.useCLSToken"], [465, "sparknlp.common.properties.HasClsTokenProperties.useCLSToken"]], "usechattemplate (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.useChatTemplate"], [465, "sparknlp.common.properties.HasLlamaCppProperties.useChatTemplate"]], "usemlock (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.useMlock"], [465, "sparknlp.common.properties.HasLlamaCppProperties.useMlock"]], "usemmap (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.useMmap"], [465, "sparknlp.common.properties.HasLlamaCppProperties.useMmap"]], "yarnattnfactor (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.yarnAttnFactor"], [465, "sparknlp.common.properties.HasLlamaCppProperties.yarnAttnFactor"]], "yarnbetafast (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaFast"], [465, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaFast"]], "yarnbetaslow (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaSlow"], [465, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaSlow"]], "yarnextfactor (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.yarnExtFactor"], [465, "sparknlp.common.properties.HasLlamaCppProperties.yarnExtFactor"]], "yarnorigctx (hasllamacppproperties attribute)": [[215, "sparknlp.common.properties.HasLlamaCppProperties.yarnOrigCtx"], [465, "sparknlp.common.properties.HasLlamaCppProperties.yarnOrigCtx"]], "binary (readas attribute)": [[216, "sparknlp.common.read_as.ReadAs.BINARY"], [466, "sparknlp.common.read_as.ReadAs.BINARY"]], "readas (class in sparknlp.common.read_as)": [[216, "sparknlp.common.read_as.ReadAs"], [466, "sparknlp.common.read_as.ReadAs"]], "spark (readas attribute)": [[216, "sparknlp.common.read_as.ReadAs.SPARK"], [466, "sparknlp.common.read_as.ReadAs.SPARK"]], "text (readas attribute)": [[216, "sparknlp.common.read_as.ReadAs.TEXT"], [466, "sparknlp.common.read_as.ReadAs.TEXT"]], "sparknlp.common.read_as": [[216, "module-sparknlp.common.read_as"], [466, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[217, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"], [467, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[217, "module-sparknlp.common.recursive_annotator_approach"], [467, "module-sparknlp.common.recursive_annotator_approach"]], "hasstorage (class in sparknlp.common.storage)": [[218, "sparknlp.common.storage.HasStorage"], [468, "sparknlp.common.storage.HasStorage"]], "hasstoragemodel (class in sparknlp.common.storage)": [[218, "sparknlp.common.storage.HasStorageModel"], [468, "sparknlp.common.storage.HasStorageModel"]], "hasstorageoptions (class in sparknlp.common.storage)": [[218, "sparknlp.common.storage.HasStorageOptions"], [468, "sparknlp.common.storage.HasStorageOptions"]], "hasstorageref (class in sparknlp.common.storage)": [[218, "sparknlp.common.storage.HasStorageRef"], [468, "sparknlp.common.storage.HasStorageRef"]], "enableinmemorystorage (hasstorageoptions attribute)": [[218, "sparknlp.common.storage.HasStorageOptions.enableInMemoryStorage"], [468, "sparknlp.common.storage.HasStorageOptions.enableInMemoryStorage"]], "getenableinmemorystorage() (hasstorageoptions method)": [[218, "sparknlp.common.storage.HasStorageOptions.getEnableInMemoryStorage"], [468, "sparknlp.common.storage.HasStorageOptions.getEnableInMemoryStorage"]], "getincludestorage() (hasstorageoptions method)": [[218, "sparknlp.common.storage.HasStorageOptions.getIncludeStorage"], [468, "sparknlp.common.storage.HasStorageOptions.getIncludeStorage"]], "getstoragepath() (hasstorage method)": [[218, "sparknlp.common.storage.HasStorage.getStoragePath"], [468, "sparknlp.common.storage.HasStorage.getStoragePath"]], "getstorageref() (hasstorageref method)": [[218, "sparknlp.common.storage.HasStorageRef.getStorageRef"], [468, "sparknlp.common.storage.HasStorageRef.getStorageRef"]], "includestorage (hasstorageoptions attribute)": [[218, "sparknlp.common.storage.HasStorageOptions.includeStorage"], [468, "sparknlp.common.storage.HasStorageOptions.includeStorage"]], "loadstorage() (hasstoragemodel static method)": [[218, "sparknlp.common.storage.HasStorageModel.loadStorage"], [468, "sparknlp.common.storage.HasStorageModel.loadStorage"]], "loadstorages() (hasstoragemodel static method)": [[218, "sparknlp.common.storage.HasStorageModel.loadStorages"], [468, "sparknlp.common.storage.HasStorageModel.loadStorages"]], "savestorage() (hasstoragemodel method)": [[218, "sparknlp.common.storage.HasStorageModel.saveStorage"], [468, "sparknlp.common.storage.HasStorageModel.saveStorage"]], "setenableinmemorystorage() (hasstorageoptions method)": [[218, "sparknlp.common.storage.HasStorageOptions.setEnableInMemoryStorage"], [468, "sparknlp.common.storage.HasStorageOptions.setEnableInMemoryStorage"]], "setincludestorage() (hasstorageoptions method)": [[218, "sparknlp.common.storage.HasStorageOptions.setIncludeStorage"], [468, "sparknlp.common.storage.HasStorageOptions.setIncludeStorage"]], "setstoragepath() (hasstorage method)": [[218, "sparknlp.common.storage.HasStorage.setStoragePath"], [468, "sparknlp.common.storage.HasStorage.setStoragePath"]], "setstorageref() (hasstorageref method)": [[218, "sparknlp.common.storage.HasStorageRef.setStorageRef"], [468, "sparknlp.common.storage.HasStorageRef.setStorageRef"]], "sparknlp.common.storage": [[218, "module-sparknlp.common.storage"], [468, "module-sparknlp.common.storage"]], "storagepath (hasstorage attribute)": [[218, "sparknlp.common.storage.HasStorage.storagePath"], [468, "sparknlp.common.storage.HasStorage.storagePath"]], "storageref (hasstorageref attribute)": [[218, "sparknlp.common.storage.HasStorageRef.storageRef"], [468, "sparknlp.common.storage.HasStorageRef.storageRef"]], "externalresource() (in module sparknlp.common.utils)": [[219, "sparknlp.common.utils.ExternalResource"], [469, "sparknlp.common.utils.ExternalResource"]], "regexrule() (in module sparknlp.common.utils)": [[219, "sparknlp.common.utils.RegexRule"], [469, "sparknlp.common.utils.RegexRule"]], "sparknlp.common.utils": [[219, "module-sparknlp.common.utils"], [469, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[220, "sparknlp.functions.explode_annotations_col"], [470, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[220, "sparknlp.functions.filter_by_annotations_col"], [470, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[220, "sparknlp.functions.map_annotations"], [470, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[220, "sparknlp.functions.map_annotations_array"], [470, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[220, "sparknlp.functions.map_annotations_col"], [470, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[220, "sparknlp.functions.map_annotations_cols"], [470, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[220, "sparknlp.functions.map_annotations_strict"], [470, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[220, "module-sparknlp.functions"], [470, "module-sparknlp.functions"]], "sparknlp.internal": [[221, "module-sparknlp.internal"], [475, "module-sparknlp.internal"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[222, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"], [472, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[222, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"], [472, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[222, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"], [472, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[222, "module-sparknlp.internal.annotator_java_ml"], [472, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[223, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"], [473, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "outputannotatortype (annotatortransformer attribute)": [[223, "sparknlp.internal.annotator_transformer.AnnotatorTransformer.outputAnnotatorType"], [473, "sparknlp.internal.annotator_transformer.AnnotatorTransformer.outputAnnotatorType"]], "sparknlp.internal.annotator_transformer": [[223, "module-sparknlp.internal.annotator_transformer"], [473, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[224, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"], [474, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "apply() (extendedjavawrapper method)": [[224, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.apply"], [474, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.apply"]], "getdataframe() (extendedjavawrapper method)": [[224, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.getDataFrame"], [474, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.getDataFrame"]], "new_java_array() (extendedjavawrapper method)": [[224, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"], [474, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "new_java_array_integer() (extendedjavawrapper method)": [[224, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_integer"], [474, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_integer"]], "new_java_array_string() (extendedjavawrapper method)": [[224, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_string"], [474, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_string"]], "new_java_obj() (extendedjavawrapper method)": [[224, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_obj"], [474, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_obj"]], "spark_version() (extendedjavawrapper method)": [[224, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.spark_version"], [474, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.spark_version"]], "sparknlp.internal.extended_java_wrapper": [[224, "module-sparknlp.internal.extended_java_wrapper"], [474, "module-sparknlp.internal.extended_java_wrapper"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[225, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"], [476, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[225, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"], [476, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "getter_attrs (paramsgetterssetters attribute)": [[225, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getter_attrs"], [476, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getter_attrs"]], "setparamvalue() (paramsgetterssetters method)": [[225, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"], [476, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[225, "module-sparknlp.internal.params_getters_setters"], [476, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[226, "sparknlp.internal.recursive.RecursiveEstimator"], [477, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[226, "sparknlp.internal.recursive.RecursiveTransformer"], [477, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[226, "sparknlp.internal.recursive.RecursiveEstimator.fit"], [477, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[226, "module-sparknlp.internal.recursive"], [477, "module-sparknlp.internal.recursive"]], "transform_recursive() (recursivetransformer method)": [[226, "sparknlp.internal.recursive.RecursiveTransformer.transform_recursive"], [477, "sparknlp.internal.recursive.RecursiveTransformer.transform_recursive"]], "sparknlp.logging": [[227, "module-sparknlp.logging"], [479, "module-sparknlp.logging"]], "cometlogger (class in sparknlp.logging.comet)": [[228, "sparknlp.logging.comet.CometLogger"], [478, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[228, "sparknlp.logging.comet.CometLogger.end"], [478, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[228, "sparknlp.logging.comet.CometLogger.log_asset"], [478, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[228, "sparknlp.logging.comet.CometLogger.log_asset_data"], [478, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[228, "sparknlp.logging.comet.CometLogger.log_completed_run"], [478, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[228, "sparknlp.logging.comet.CometLogger.log_metrics"], [478, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[228, "sparknlp.logging.comet.CometLogger.log_parameters"], [478, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[228, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"], [478, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[228, "sparknlp.logging.comet.CometLogger.log_visualization"], [478, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[228, "sparknlp.logging.comet.CometLogger.monitor"], [478, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[228, "module-sparknlp.logging.comet"], [478, "module-sparknlp.logging.comet"]], "sparknlp.partition": [[229, "module-sparknlp.partition"], [480, "module-sparknlp.partition"]], "partition (class in sparknlp.partition.partition)": [[230, "sparknlp.partition.partition.Partition"], [481, "sparknlp.partition.partition.Partition"]], "partition() (partition method)": [[230, "sparknlp.partition.partition.Partition.partition"], [481, "sparknlp.partition.partition.Partition.partition"]], "partition_text() (partition method)": [[230, "sparknlp.partition.partition.Partition.partition_text"], [481, "sparknlp.partition.partition.Partition.partition_text"]], "partition_urls() (partition method)": [[230, "sparknlp.partition.partition.Partition.partition_urls"], [481, "sparknlp.partition.partition.Partition.partition_urls"]], "sparknlp.partition.partition": [[230, "module-sparknlp.partition.partition"], [481, "module-sparknlp.partition.partition"]], "haschunkerproperties (class in sparknlp.partition.partition_properties)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties"]], "hasemailreaderproperties (class in sparknlp.partition.partition_properties)": [[231, "sparknlp.partition.partition_properties.HasEmailReaderProperties"], [482, "sparknlp.partition.partition_properties.HasEmailReaderProperties"]], "hasexcelreaderproperties (class in sparknlp.partition.partition_properties)": [[231, "sparknlp.partition.partition_properties.HasExcelReaderProperties"], [482, "sparknlp.partition.partition_properties.HasExcelReaderProperties"]], "hashtmlreaderproperties (class in sparknlp.partition.partition_properties)": [[231, "sparknlp.partition.partition_properties.HasHTMLReaderProperties"], [482, "sparknlp.partition.partition_properties.HasHTMLReaderProperties"]], "haspowerpointproperties (class in sparknlp.partition.partition_properties)": [[231, "sparknlp.partition.partition_properties.HasPowerPointProperties"], [482, "sparknlp.partition.partition_properties.HasPowerPointProperties"]], "hastextreaderproperties (class in sparknlp.partition.partition_properties)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties"]], "addattachmentcontent (hasemailreaderproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasEmailReaderProperties.addAttachmentContent"], [482, "sparknlp.partition.partition_properties.HasEmailReaderProperties.addAttachmentContent"]], "appendcells (hasexcelreaderproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasExcelReaderProperties.appendCells"], [482, "sparknlp.partition.partition_properties.HasExcelReaderProperties.appendCells"]], "cellseparator (hasexcelreaderproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasExcelReaderProperties.cellSeparator"], [482, "sparknlp.partition.partition_properties.HasExcelReaderProperties.cellSeparator"]], "chunkingstrategy (haschunkerproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.chunkingStrategy"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.chunkingStrategy"]], "combinetextundernchars (haschunkerproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.combineTextUnderNChars"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.combineTextUnderNChars"]], "getaddattachmentcontent() (hasemailreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasEmailReaderProperties.getAddAttachmentContent"], [482, "sparknlp.partition.partition_properties.HasEmailReaderProperties.getAddAttachmentContent"]], "getappendcells() (hasexcelreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getAppendCells"], [482, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getAppendCells"]], "getcellseparator() (hasexcelreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getCellSeparator"], [482, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getCellSeparator"]], "getgroupbrokenparagraphs() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.getGroupBrokenParagraphs"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.getGroupBrokenParagraphs"]], "getincludeslidenotes() (haspowerpointproperties method)": [[231, "sparknlp.partition.partition_properties.HasPowerPointProperties.getIncludeSlideNotes"], [482, "sparknlp.partition.partition_properties.HasPowerPointProperties.getIncludeSlideNotes"]], "getmaxlinecount() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.getMaxLineCount"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.getMaxLineCount"]], "getparagraphsplit() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.getParagraphSplit"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.getParagraphSplit"]], "getshortlinewordthreshold() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.getShortLineWordThreshold"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.getShortLineWordThreshold"]], "getthreshold() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.getThreshold"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.getThreshold"]], "gettimeout() (hashtmlreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.getTimeout"], [482, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.getTimeout"]], "gettitlelengthsize() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.getTitleLengthSize"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.getTitleLengthSize"]], "groupbrokenparagraphs (hastextreaderproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.groupBrokenParagraphs"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.groupBrokenParagraphs"]], "includeslidenotes (haspowerpointproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasPowerPointProperties.includeSlideNotes"], [482, "sparknlp.partition.partition_properties.HasPowerPointProperties.includeSlideNotes"]], "maxcharacters (haschunkerproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.maxCharacters"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.maxCharacters"]], "maxlinecount (hastextreaderproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.maxLineCount"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.maxLineCount"]], "newafternchars (haschunkerproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.newAfterNChars"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.newAfterNChars"]], "overlap (haschunkerproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.overlap"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.overlap"]], "overlapall (haschunkerproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.overlapAll"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.overlapAll"]], "paragraphsplit (hastextreaderproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.paragraphSplit"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.paragraphSplit"]], "setaddattachmentcontent() (hasemailreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasEmailReaderProperties.setAddAttachmentContent"], [482, "sparknlp.partition.partition_properties.HasEmailReaderProperties.setAddAttachmentContent"]], "setappendcells() (hasexcelreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setAppendCells"], [482, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setAppendCells"]], "setcellseparator() (hasexcelreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setCellSeparator"], [482, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setCellSeparator"]], "setchunkingstrategy() (haschunkerproperties method)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.setChunkingStrategy"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.setChunkingStrategy"]], "setcombinetextundernchars() (haschunkerproperties method)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.setCombineTextUnderNChars"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.setCombineTextUnderNChars"]], "setgroupbrokenparagraphs() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.setGroupBrokenParagraphs"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.setGroupBrokenParagraphs"]], "setheaders() (hashtmlreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setHeaders"], [482, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setHeaders"]], "setincludeslidenotes() (haspowerpointproperties method)": [[231, "sparknlp.partition.partition_properties.HasPowerPointProperties.setIncludeSlideNotes"], [482, "sparknlp.partition.partition_properties.HasPowerPointProperties.setIncludeSlideNotes"]], "setmaxcharacters() (haschunkerproperties method)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.setMaxCharacters"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.setMaxCharacters"]], "setmaxlinecount() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.setMaxLineCount"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.setMaxLineCount"]], "setnewafternchars() (haschunkerproperties method)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.setNewAfterNChars"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.setNewAfterNChars"]], "setoverlap() (haschunkerproperties method)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlap"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlap"]], "setoverlapall() (haschunkerproperties method)": [[231, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlapAll"], [482, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlapAll"]], "setparagraphsplit() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.setParagraphSplit"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.setParagraphSplit"]], "setshortlinewordthreshold() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.setShortLineWordThreshold"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.setShortLineWordThreshold"]], "setthreshold() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.setThreshold"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.setThreshold"]], "settimeout() (hashtmlreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setTimeout"], [482, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setTimeout"]], "settitlelengthsize() (hastextreaderproperties method)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.setTitleLengthSize"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.setTitleLengthSize"]], "shortlinewordthreshold (hastextreaderproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.shortLineWordThreshold"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.shortLineWordThreshold"]], "sparknlp.partition.partition_properties": [[231, "module-sparknlp.partition.partition_properties"], [482, "module-sparknlp.partition.partition_properties"]], "threshold (hastextreaderproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.threshold"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.threshold"]], "timeout (hashtmlreaderproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.timeout"], [482, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.timeout"]], "titlelengthsize (hastextreaderproperties attribute)": [[231, "sparknlp.partition.partition_properties.HasTextReaderProperties.titleLengthSize"], [482, "sparknlp.partition.partition_properties.HasTextReaderProperties.titleLengthSize"]], "partitiontransformer (class in sparknlp.partition.partition_transformer)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer"]], "contentpath (partitiontransformer attribute)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.contentPath"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.contentPath"]], "contenttype (partitiontransformer attribute)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.contentType"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.contentType"]], "getcontentpath() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentPath"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentPath"]], "getcontenttype() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentType"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentType"]], "getincludepagebreaks() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.getIncludePageBreaks"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.getIncludePageBreaks"]], "getinfertablestructure() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.getInferTableStructure"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.getInferTableStructure"]], "getstorecontent() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.getStoreContent"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.getStoreContent"]], "gettitlefontsize() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.getTitleFontSize"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.getTitleFontSize"]], "includepagebreaks (partitiontransformer attribute)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.includePageBreaks"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.includePageBreaks"]], "infertablestructure (partitiontransformer attribute)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.inferTableStructure"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.inferTableStructure"]], "inputannotatortypes (partitiontransformer attribute)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.inputAnnotatorTypes"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.inputAnnotatorTypes"]], "name (partitiontransformer attribute)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.name"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.name"]], "outputannotatortype (partitiontransformer attribute)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.outputAnnotatorType"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.outputAnnotatorType"]], "setcontentpath() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentPath"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentPath"]], "setcontenttype() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentType"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentType"]], "setincludepagebreaks() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.setIncludePageBreaks"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.setIncludePageBreaks"]], "setinfertablestructure() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.setInferTableStructure"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.setInferTableStructure"]], "setstorecontent() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.setStoreContent"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.setStoreContent"]], "settitlefontsize() (partitiontransformer method)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.setTitleFontSize"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.setTitleFontSize"]], "sparknlp.partition.partition_transformer": [[232, "module-sparknlp.partition.partition_transformer"], [483, "module-sparknlp.partition.partition_transformer"]], "storecontent (partitiontransformer attribute)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.storeContent"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.storeContent"]], "titlefontsize (partitiontransformer attribute)": [[232, "sparknlp.partition.partition_transformer.PartitionTransformer.titleFontSize"], [483, "sparknlp.partition.partition_transformer.PartitionTransformer.titleFontSize"]], "sparknlp.pretrained": [[233, "module-sparknlp.pretrained"], [484, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[234, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"], [485, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[234, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"], [485, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "from_disk() (pretrainedpipeline static method)": [[234, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.from_disk"], [485, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.from_disk"]], "fullannotate() (pretrainedpipeline method)": [[234, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"], [485, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[234, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"], [485, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[234, "module-sparknlp.pretrained.pretrained_pipeline"], [485, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[234, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"], [485, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[235, "sparknlp.pretrained.resource_downloader.ResourceDownloader"], [486, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[235, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"], [486, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[235, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"], [486, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[235, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"], [486, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[235, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"], [486, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[235, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"], [486, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[235, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"], [486, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[235, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"], [486, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[235, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"], [486, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[235, "module-sparknlp.pretrained.resource_downloader"], [486, "module-sparknlp.pretrained.resource_downloader"]], "printprogress() (in module sparknlp.pretrained.utils)": [[236, "sparknlp.pretrained.utils.printProgress"], [487, "sparknlp.pretrained.utils.printProgress"]], "sparknlp.pretrained.utils": [[236, "module-sparknlp.pretrained.utils"], [487, "module-sparknlp.pretrained.utils"]], "sparknlp.reader": [[237, "module-sparknlp.reader"], [489, "module-sparknlp.reader"]], "pdf_layout_text_stripper (textstrippertype attribute)": [[238, "sparknlp.reader.enums.TextStripperType.PDF_LAYOUT_TEXT_STRIPPER"], [488, "sparknlp.reader.enums.TextStripperType.PDF_LAYOUT_TEXT_STRIPPER"]], "pdf_text_stripper (textstrippertype attribute)": [[238, "sparknlp.reader.enums.TextStripperType.PDF_TEXT_STRIPPER"], [488, "sparknlp.reader.enums.TextStripperType.PDF_TEXT_STRIPPER"]], "textstrippertype (class in sparknlp.reader.enums)": [[238, "sparknlp.reader.enums.TextStripperType"], [488, "sparknlp.reader.enums.TextStripperType"]], "sparknlp.reader.enums": [[238, "module-sparknlp.reader.enums"], [488, "module-sparknlp.reader.enums"]], "pdftotext (class in sparknlp.reader.pdf_to_text)": [[239, "sparknlp.reader.pdf_to_text.PdfToText"], [490, "sparknlp.reader.pdf_to_text.PdfToText"]], "onlypagenum (pdftotext attribute)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.onlyPageNum"], [490, "sparknlp.reader.pdf_to_text.PdfToText.onlyPageNum"]], "pagenumcol (pdftotext attribute)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.pageNumCol"], [490, "sparknlp.reader.pdf_to_text.PdfToText.pageNumCol"]], "partitionnum (pdftotext attribute)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.partitionNum"], [490, "sparknlp.reader.pdf_to_text.PdfToText.partitionNum"]], "setinputcol() (pdftotext method)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.setInputCol"], [490, "sparknlp.reader.pdf_to_text.PdfToText.setInputCol"]], "setonlypagenum() (pdftotext method)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.setOnlyPageNum"], [490, "sparknlp.reader.pdf_to_text.PdfToText.setOnlyPageNum"]], "setoutputcol() (pdftotext method)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.setOutputCol"], [490, "sparknlp.reader.pdf_to_text.PdfToText.setOutputCol"]], "setpagenumcol() (pdftotext method)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.setPageNumCol"], [490, "sparknlp.reader.pdf_to_text.PdfToText.setPageNumCol"]], "setpartitionnum() (pdftotext method)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.setPartitionNum"], [490, "sparknlp.reader.pdf_to_text.PdfToText.setPartitionNum"]], "setsort() (pdftotext method)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.setSort"], [490, "sparknlp.reader.pdf_to_text.PdfToText.setSort"]], "setsplitpage() (pdftotext method)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.setSplitPage"], [490, "sparknlp.reader.pdf_to_text.PdfToText.setSplitPage"]], "setstoresplittedpdf() (pdftotext method)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.setStoreSplittedPdf"], [490, "sparknlp.reader.pdf_to_text.PdfToText.setStoreSplittedPdf"]], "settextstripper() (pdftotext method)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.setTextStripper"], [490, "sparknlp.reader.pdf_to_text.PdfToText.setTextStripper"]], "sort (pdftotext attribute)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.sort"], [490, "sparknlp.reader.pdf_to_text.PdfToText.sort"]], "sparknlp.reader.pdf_to_text": [[239, "module-sparknlp.reader.pdf_to_text"], [490, "module-sparknlp.reader.pdf_to_text"]], "splitpage (pdftotext attribute)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.splitPage"], [490, "sparknlp.reader.pdf_to_text.PdfToText.splitPage"]], "storesplittedpdf (pdftotext attribute)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.storeSplittedPdf"], [490, "sparknlp.reader.pdf_to_text.PdfToText.storeSplittedPdf"]], "textstripper (pdftotext attribute)": [[239, "sparknlp.reader.pdf_to_text.PdfToText.textStripper"], [490, "sparknlp.reader.pdf_to_text.PdfToText.textStripper"]], "sparknlpreader (class in sparknlp.reader.sparknlp_reader)": [[240, "sparknlp.reader.sparknlp_reader.SparkNLPReader"], [491, "sparknlp.reader.sparknlp_reader.SparkNLPReader"]], "doc() (sparknlpreader method)": [[240, "sparknlp.reader.sparknlp_reader.SparkNLPReader.doc"], [491, "sparknlp.reader.sparknlp_reader.SparkNLPReader.doc"]], "email() (sparknlpreader method)": [[240, "sparknlp.reader.sparknlp_reader.SparkNLPReader.email"], [491, "sparknlp.reader.sparknlp_reader.SparkNLPReader.email"]], "html() (sparknlpreader method)": [[240, "sparknlp.reader.sparknlp_reader.SparkNLPReader.html"], [491, "sparknlp.reader.sparknlp_reader.SparkNLPReader.html"]], "pdf() (sparknlpreader method)": [[240, "sparknlp.reader.sparknlp_reader.SparkNLPReader.pdf"], [491, "sparknlp.reader.sparknlp_reader.SparkNLPReader.pdf"]], "ppt() (sparknlpreader method)": [[240, "sparknlp.reader.sparknlp_reader.SparkNLPReader.ppt"], [491, "sparknlp.reader.sparknlp_reader.SparkNLPReader.ppt"]], "sparknlp.reader.sparknlp_reader": [[240, "module-sparknlp.reader.sparknlp_reader"], [491, "module-sparknlp.reader.sparknlp_reader"]], "txt() (sparknlpreader method)": [[240, "sparknlp.reader.sparknlp_reader.SparkNLPReader.txt"], [491, "sparknlp.reader.sparknlp_reader.SparkNLPReader.txt"]], "xls() (sparknlpreader method)": [[240, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xls"], [491, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xls"]], "xml() (sparknlpreader method)": [[240, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xml"], [491, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xml"]], "sparknlp.training": [[241, "module-sparknlp.training"], [494, "module-sparknlp.training"]], "conll (class in sparknlp.training.conll)": [[242, "sparknlp.training.conll.CoNLL"], [492, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[242, "sparknlp.training.conll.CoNLL.readDataset"], [492, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[242, "module-sparknlp.training.conll"], [492, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[243, "sparknlp.training.conllu.CoNLLU"], [493, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[243, "sparknlp.training.conllu.CoNLLU.readDataset"], [493, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[243, "module-sparknlp.training.conllu"], [493, "module-sparknlp.training.conllu"]], "pos (class in sparknlp.training.pos)": [[244, "sparknlp.training.pos.POS"], [495, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[244, "sparknlp.training.pos.POS.readDataset"], [495, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[244, "module-sparknlp.training.pos"], [495, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[245, "sparknlp.training.pub_tator.PubTator"], [496, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[245, "sparknlp.training.pub_tator.PubTator.readDataset"], [496, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[245, "module-sparknlp.training.pub_tator"], [496, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[246, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"], [497, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "readjsonfile() (spacytoannotation method)": [[246, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation.readJsonFile"], [497, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation.readJsonFile"]], "sparknlp.training.spacy_to_annotation": [[246, "module-sparknlp.training.spacy_to_annotation"], [497, "module-sparknlp.training.spacy_to_annotation"]], "pushtohub (class in sparknlp.upload_to_hub)": [[248, "sparknlp.upload_to_hub.PushToHub"], [499, "sparknlp.upload_to_hub.PushToHub"]], "check_for_required_info() (pushtohub method)": [[248, "sparknlp.upload_to_hub.PushToHub.check_for_required_info"], [499, "sparknlp.upload_to_hub.PushToHub.check_for_required_info"]], "create_docs() (pushtohub method)": [[248, "sparknlp.upload_to_hub.PushToHub.create_docs"], [499, "sparknlp.upload_to_hub.PushToHub.create_docs"]], "list_of_tasks (pushtohub attribute)": [[248, "sparknlp.upload_to_hub.PushToHub.list_of_tasks"], [499, "sparknlp.upload_to_hub.PushToHub.list_of_tasks"]], "push_to_hub() (pushtohub method)": [[248, "sparknlp.upload_to_hub.PushToHub.push_to_hub"], [499, "sparknlp.upload_to_hub.PushToHub.push_to_hub"]], "sparknlp.upload_to_hub": [[248, "module-sparknlp.upload_to_hub"], [499, "module-sparknlp.upload_to_hub"]], "unzip_directory() (pushtohub method)": [[248, "sparknlp.upload_to_hub.PushToHub.unzip_directory"], [499, "sparknlp.upload_to_hub.PushToHub.unzip_directory"]], "zip_directory() (pushtohub method)": [[248, "sparknlp.upload_to_hub.PushToHub.zip_directory"], [499, "sparknlp.upload_to_hub.PushToHub.zip_directory"]], "conllgenerator (class in sparknlp.util)": [[249, "sparknlp.util.CoNLLGenerator"], [500, "sparknlp.util.CoNLLGenerator"]], "embeddingsdataframeutils (class in sparknlp.util)": [[249, "sparknlp.util.EmbeddingsDataFrameUtils"], [500, "sparknlp.util.EmbeddingsDataFrameUtils"]], "emptyimagerow (embeddingsdataframeutils attribute)": [[249, "sparknlp.util.EmbeddingsDataFrameUtils.emptyImageRow"], [500, "sparknlp.util.EmbeddingsDataFrameUtils.emptyImageRow"]], "exportconllfiles() (conllgenerator static method)": [[249, "sparknlp.util.CoNLLGenerator.exportConllFiles"], [500, "sparknlp.util.CoNLLGenerator.exportConllFiles"]], "get_config_path() (in module sparknlp.util)": [[249, "sparknlp.util.get_config_path"], [500, "sparknlp.util.get_config_path"]], "imageschema (embeddingsdataframeutils attribute)": [[249, "sparknlp.util.EmbeddingsDataFrameUtils.imageSchema"], [500, "sparknlp.util.EmbeddingsDataFrameUtils.imageSchema"]], "sparknlp.util": [[249, "module-sparknlp.util"], [500, "module-sparknlp.util"]], "annotatortype (annotation attribute)": [[252, "sparknlp.annotation.Annotation.annotatorType"]], "begin (annotation attribute)": [[252, "sparknlp.annotation.Annotation.begin"]], "embeddings (annotation attribute)": [[252, "sparknlp.annotation.Annotation.embeddings"]], "end (annotation attribute)": [[252, "sparknlp.annotation.Annotation.end"]], "metadata (annotation attribute)": [[252, "sparknlp.annotation.Annotation.metadata"]], "result (annotation attribute)": [[252, "sparknlp.annotation.Annotation.result"]], "annotatortype (annotationaudio attribute)": [[253, "sparknlp.annotation_audio.AnnotationAudio.annotatorType"]], "metadata (annotationaudio attribute)": [[253, "sparknlp.annotation_audio.AnnotationAudio.metadata"]], "result (annotationaudio attribute)": [[253, "sparknlp.annotation_audio.AnnotationAudio.result"]], "annotatortype (annotationimage attribute)": [[254, "sparknlp.annotation_image.AnnotationImage.annotatorType"]], "height (annotationimage attribute)": [[254, "sparknlp.annotation_image.AnnotationImage.height"]], "metadata (annotationimage attribute)": [[254, "sparknlp.annotation_image.AnnotationImage.metadata"]], "mode (annotationimage attribute)": [[254, "sparknlp.annotation_image.AnnotationImage.mode"]], "nchannels (annotationimage attribute)": [[254, "sparknlp.annotation_image.AnnotationImage.nChannels"]], "origin (annotationimage attribute)": [[254, "sparknlp.annotation_image.AnnotationImage.origin"]], "result (annotationimage attribute)": [[254, "sparknlp.annotation_image.AnnotationImage.result"]], "width (annotationimage attribute)": [[254, "sparknlp.annotation_image.AnnotationImage.width"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[337, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[337, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[337, "module-sparknlp.annotator.document_token_splitter_test"]], "test_run() (documenttokensplittertestspec method)": [[337, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.test_run"]], "annotators (in module sparknlp.annotator)": [[371, "sparknlp.annotator.annotators"]], "audio (in module sparknlp.annotator)": [[371, "sparknlp.annotator.audio"]], "classifier (in module sparknlp.annotator)": [[371, "sparknlp.annotator.classifier"]], "coref (in module sparknlp.annotator)": [[371, "sparknlp.annotator.coref"]], "cv (in module sparknlp.annotator)": [[371, "sparknlp.annotator.cv"]], "embeddings (in module sparknlp.annotator)": [[371, "sparknlp.annotator.embeddings"]], "er (in module sparknlp.annotator)": [[371, "sparknlp.annotator.er"]], "keyword (in module sparknlp.annotator)": [[371, "sparknlp.annotator.keyword"]], "ld (in module sparknlp.annotator)": [[371, "sparknlp.annotator.ld"]], "ner (in module sparknlp.annotator)": [[371, "sparknlp.annotator.ner"]], "parser (in module sparknlp.annotator)": [[371, "sparknlp.annotator.parser"]], "pos (in module sparknlp.annotator)": [[371, "sparknlp.annotator.pos"]], "regex (in module sparknlp.annotator)": [[371, "sparknlp.annotator.regex"]], "sbd (in module sparknlp.annotator)": [[371, "sparknlp.annotator.sbd"]], "sda (in module sparknlp.annotator)": [[371, "sparknlp.annotator.sda"]], "sentence_detector_dl (in module sparknlp.annotator)": [[371, "sparknlp.annotator.sentence_detector_dl"]], "seq2seq (in module sparknlp.annotator)": [[371, "sparknlp.annotator.seq2seq"]], "spell (in module sparknlp.annotator)": [[371, "sparknlp.annotator.spell"]], "ws (in module sparknlp.annotator)": [[371, "sparknlp.annotator.ws"]], "dictionary_path (norvigsweetingapproach attribute)": [[429, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary_path"]], "dictionary_path (symmetricdeleteapproach attribute)": [[430, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary_path"]], "parse_embeddings (lightpipeline attribute)": [[452, "sparknlp.base.light_pipeline.LightPipeline.parse_embeddings"]], "pipeline_model (lightpipeline attribute)": [[452, "sparknlp.base.light_pipeline.LightPipeline.pipeline_model"]], "stages (recursivepipelinemodel attribute)": [[455, "sparknlp.base.recursive_pipeline.RecursivePipelineModel.stages"]], "covered (coverageresult attribute)": [[462, "sparknlp.common.coverage_result.CoverageResult.covered"]], "percentage (coverageresult attribute)": [[462, "sparknlp.common.coverage_result.CoverageResult.percentage"]], "total (coverageresult attribute)": [[462, "sparknlp.common.coverage_result.CoverageResult.total"]], "annotators (in module sparknlp)": [[471, "sparknlp.annotators"]], "embeddings (in module sparknlp)": [[471, "sparknlp.embeddings"]], "java_obj (extendedjavawrapper attribute)": [[474, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.java_obj"]], "sc (extendedjavawrapper attribute)": [[474, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.sc"]], "comet_ml (in module sparknlp.logging.comet)": [[478, "sparknlp.logging.comet.comet_ml"]], "comet_mode (cometlogger attribute)": [[478, "sparknlp.logging.comet.CometLogger.comet_mode"]], "experiment (cometlogger attribute)": [[478, "sparknlp.logging.comet.CometLogger.experiment"]], "experiment_id (cometlogger attribute)": [[478, "sparknlp.logging.comet.CometLogger.experiment_id"]], "experiment_kwargs (cometlogger attribute)": [[478, "sparknlp.logging.comet.CometLogger.experiment_kwargs"]], "project_name (cometlogger attribute)": [[478, "sparknlp.logging.comet.CometLogger.project_name"]], "thread (cometlogger attribute)": [[478, "sparknlp.logging.comet.CometLogger.thread"]], "workspace (cometlogger attribute)": [[478, "sparknlp.logging.comet.CometLogger.workspace"]], "spark (partition attribute)": [[481, "sparknlp.partition.partition.Partition.spark"]], "light_model (pretrainedpipeline attribute)": [[485, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.light_model"]], "spark (sparknlpreader attribute)": [[491, "sparknlp.reader.sparknlp_reader.SparkNLPReader.spark"]], "sparknlp.training.tfgraphs": [[498, "module-sparknlp.training.tfgraphs"]], "tf_graph (in module sparknlp.training.tfgraphs)": [[498, "sparknlp.training.tfgraphs.tf_graph"]], "tf_graph_1x (in module sparknlp.training.tfgraphs)": [[498, "sparknlp.training.tfgraphs.tf_graph_1x"]]}})