Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 94, 95, 96, 99, 100, 101, 104, 105, 106, 107, 109, 111, 112, 113, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 138, 140, 141, 142, 143, 145, 146, 148, 149, 151, 154, 156, 157, 158, 159, 160, 162, 163, 167, 168, 174, 175, 179, 180, 181, 184, 185, 190, 192, 196, 197, 200, 201, 202, 204, 205, 206], "can": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 99, 104, 105, 106, 107, 108, 111, 112, 117, 119, 120, 122, 124, 125, 127, 128, 131, 133, 134, 136, 143, 145, 148, 149, 157, 158, 159, 168, 172, 181, 184, 185, 187, 188, 190, 197, 199, 201, 202, 204, 205, 206, 207], "quick": [0, 197, 202], "refer": [0, 1, 5, 8, 48, 50, 52, 54, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 91, 108, 111, 119, 120, 123, 124, 125, 127, 128, 131, 133, 134, 145, 147, 148, 157, 168, 201, 203, 204], "how": [0, 1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 56, 58, 59, 61, 63, 64, 66, 67, 68, 69, 71, 72, 75, 77, 79, 83, 85, 86, 88, 93, 94, 95, 99, 100, 104, 105, 106, 109, 111, 114, 119, 122, 133, 134, 141, 142, 145, 148, 151, 157, 167, 169, 172, 174, 187, 188, 192, 197, 201, 206], "set": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 137, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 160, 162, 163, 168, 172, 174, 179, 180, 181, 185, 187, 197, 201, 204, 205], "up": [0, 1, 5, 8, 22, 34, 53, 62, 70, 75, 79, 81, 91, 111, 124, 125, 127, 128, 168, 174, 197, 201, 204, 205], "your": [0, 1, 22, 34, 39, 56, 61, 69, 70, 77, 79, 81, 94, 95, 99, 100, 104, 105, 106, 109, 111, 112, 117, 122, 123, 131, 133, 138, 140, 145, 149, 199, 201, 204, 205, 207], "environ": [0, 62, 198], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 66, 70, 81, 91, 127, 145], "johnsnowlab": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 60, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 93, 94, 95, 99, 100, 105, 106, 108, 109, 111, 112, 117, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 138, 140, 142, 145, 149, 150, 159, 174], "load": [0, 1, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 91, 93, 94, 95, 100, 105, 106, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145, 154, 184, 185, 192, 201, 204], "shell": 0, "packag": [0, 63, 68, 181, 198, 199], "com": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 93, 94, 95, 99, 100, 105, 106, 108, 109, 111, 112, 117, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 138, 140, 142, 145, 159, 174], "nlp_2": [0, 174], "12": [0, 63, 83, 84, 85, 91, 96, 98, 104, 117, 131, 143, 156, 173, 174, 184, 190, 192, 200], "pyspark": [0, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 105, 106, 107, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 154, 156, 157, 159, 160, 173, 174, 177, 180, 181, 184, 187, 188, 190, 191, 201, 202], "submit": [0, 181, 197], "extern": [0, 91, 94, 99, 100, 106, 131, 137, 158, 172, 187, 188, 190, 191], "jar": [0, 174], "after": [0, 55, 56, 58, 70, 77, 78, 81, 96, 98, 104, 111, 140, 160, 181, 200, 201], "compil": 0, "build": [0, 68, 69, 77, 78, 88, 91, 95, 125, 181, 197], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 138, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 160, 172, 173, 174, 180, 181, 185, 187, 190, 191, 192, 197, 198, 200, 201, 202, 204, 205, 206, 207], "built": [0, 22, 34, 157], "top": [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 50, 52, 53, 63, 91, 111, 124, 125, 127, 128, 129, 157, 168], "apach": [0, 157, 174], "x": [0, 34, 173, 187, 207], "For": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 105, 106, 108, 109, 111, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 142, 145, 148, 149, 150, 157, 160, 168, 181, 184, 185, 191, 197, 198, 200, 201, 202, 203, 204, 205], "you": [0, 14, 18, 29, 38, 44, 56, 58, 59, 61, 62, 67, 69, 71, 77, 79, 88, 96, 107, 111, 127, 149, 151, 156, 174, 181, 185, 190, 192, 197, 199, 201, 202, 205, 206, 207], "need": [0, 5, 7, 8, 10, 56, 58, 62, 69, 71, 77, 82, 86, 88, 91, 96, 99, 105, 106, 109, 114, 117, 120, 123, 125, 131, 133, 134, 141, 142, 146, 154, 156, 181, 185, 187, 188, 190, 197, 199, 201, 202, 205, 207], "java": [0, 93, 112, 129, 161, 162, 170, 176, 177, 180, 185], "8": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 50, 56, 58, 60, 63, 64, 65, 66, 68, 69, 71, 74, 75, 76, 77, 78, 83, 84, 85, 96, 101, 106, 107, 111, 114, 125, 131, 143, 145, 187, 192], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 56, 58, 59, 62, 63, 64, 66, 68, 69, 72, 74, 75, 77, 80, 82, 83, 84, 85, 86, 88, 91, 93, 94, 96, 99, 101, 104, 106, 107, 108, 109, 111, 117, 119, 120, 123, 124, 125, 127, 128, 131, 135, 137, 145, 149, 156, 158, 159, 167, 168, 169, 173, 174, 181, 185, 191, 192, 197, 198, 199, 200, 201, 202, 205, 206, 207], "note": [0, 5, 7, 8, 14, 18, 22, 29, 34, 38, 39, 44, 53, 61, 63, 69, 72, 77, 79, 82, 83, 85, 91, 106, 111, 124, 125, 127, 128, 156, 174, 206], "sinc": [0, 60, 62, 76, 91, 125, 174, 201, 202, 206], "version": [0, 8, 60, 69, 113, 114, 137, 163, 168, 174, 179, 180, 184, 185, 201, 206], "6": [0, 22, 39, 52, 64, 65, 68, 72, 91, 95, 100, 101, 107, 117, 124, 133, 143, 174, 188, 192, 201], "deprec": [0, 174], "If": [0, 8, 12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 50, 52, 53, 54, 62, 79, 82, 86, 93, 96, 98, 104, 105, 106, 109, 114, 119, 120, 124, 125, 127, 128, 131, 137, 168, 174, 180, 181, 185, 197, 199, 201], "consid": [0, 59, 82, 88, 91, 111, 127, 131, 133, 134, 136, 140, 174, 185], "stick": [0, 174], "lower": [0, 60, 63, 91, 111, 129, 131, 147, 174], "7": [0, 9, 39, 52, 64, 65, 68, 96, 98, 117, 125, 150, 190, 192, 200], "we": [0, 5, 7, 8, 22, 34, 50, 52, 54, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 91, 105, 106, 109, 111, 120, 124, 125, 127, 128, 131, 133, 142, 156, 173, 197, 200, 201, 202, 205, 206, 207], "recommend": [0, 53, 72, 85, 111, 122, 123, 124, 125, 127, 128], "4": [0, 5, 8, 64, 65, 68, 71, 72, 74, 75, 82, 99, 105, 107, 111, 117, 124, 125, 137, 143, 188, 192], "It": [0, 8, 12, 14, 16, 18, 22, 24, 27, 29, 32, 34, 36, 38, 39, 40, 42, 44, 45, 49, 50, 52, 53, 59, 60, 62, 64, 65, 66, 68, 69, 70, 75, 77, 78, 81, 83, 84, 86, 91, 101, 123, 124, 127, 129, 131, 133, 134, 140, 150, 156, 185, 200, 205], "have": [0, 5, 14, 18, 22, 29, 34, 38, 39, 44, 61, 62, 63, 66, 69, 74, 77, 78, 82, 91, 99, 101, 104, 105, 106, 107, 111, 117, 119, 120, 125, 134, 143, 160, 176, 201, 202, 205], "basic": [0, 52, 91, 119, 200], "knowledg": [0, 69, 91, 151], "framework": [0, 7, 62, 124, 127, 128], "work": [0, 8, 50, 69, 74, 75, 93, 111, 124, 127, 128, 138, 200, 202, 206], "befor": [0, 60, 62, 82, 96, 98, 112, 124, 128, 129, 133, 141, 145, 162, 180, 197], "pleas": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 93, 94, 95, 96, 99, 100, 105, 106, 109, 117, 120, 122, 123, 124, 125, 127, 128, 131, 133, 134, 136, 138, 140, 145, 148, 157, 158, 185, 198, 199, 203, 206], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 151, 156, 157, 159, 160, 181, 184, 187, 188, 190, 192, 197, 201, 202, 204, 205, 206], "first": [0, 2, 68, 70, 71, 72, 74, 81, 83, 84, 91, 99, 105, 106, 107, 119, 124, 127, 128, 131, 136, 141, 149, 160, 167, 197, 201, 202, 206], "let": [0, 69, 111, 140, 201], "": [0, 1, 11, 14, 15, 18, 19, 23, 26, 29, 31, 35, 38, 41, 44, 50, 52, 53, 54, 60, 62, 63, 66, 68, 69, 70, 71, 75, 77, 78, 81, 83, 84, 86, 91, 99, 106, 109, 111, 112, 123, 124, 125, 127, 128, 129, 131, 133, 134, 140, 141, 142, 145, 146, 150, 156, 161, 162, 168, 170, 173, 176, 180, 181, 197, 200, 201, 202, 205], "make": [0, 49, 50, 52, 60, 66, 75, 76, 83, 84, 91, 111, 120, 123, 124, 133, 203, 207], "sure": [0, 123], "oracl": 0, "openjdk": 0, "1": [0, 5, 8, 9, 10, 12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 48, 50, 52, 53, 55, 56, 58, 61, 63, 64, 65, 68, 70, 72, 74, 78, 81, 82, 83, 84, 85, 91, 95, 96, 98, 99, 100, 101, 104, 105, 106, 108, 111, 113, 114, 119, 120, 123, 124, 125, 127, 128, 129, 131, 137, 141, 145, 149, 150, 163, 168, 174, 179, 180, 181, 184, 185, 187, 188, 191, 192, 197, 200, 201, 205, 206], "0_292": 0, "creat": [0, 2, 3, 4, 22, 34, 39, 61, 62, 64, 65, 70, 77, 81, 82, 88, 106, 111, 114, 117, 138, 145, 156, 158, 173, 187, 188, 190, 191, 201, 202, 205, 207], "new": [0, 2, 3, 4, 9, 39, 48, 52, 55, 63, 64, 65, 68, 72, 74, 75, 82, 85, 107, 108, 111, 113, 114, 124, 125, 128, 131, 137, 150, 163, 168, 179, 180, 200, 201], "manag": [0, 91, 185, 198], "all": [0, 2, 3, 4, 8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 52, 53, 59, 60, 63, 64, 65, 66, 79, 82, 85, 86, 89, 93, 96, 106, 109, 111, 124, 125, 127, 128, 131, 136, 141, 145, 149, 151, 167, 168, 181, 185, 196, 201, 206], "depend": [0, 2, 48, 66, 76, 79, 85, 86, 88, 89, 91, 93, 106, 127, 131, 145, 174], "Then": [0, 22, 34, 105, 106, 160, 181, 201], "sparknlp": [0, 197, 200, 201, 202, 203, 205, 206, 207], "n": [0, 84, 91, 101, 104, 105, 106, 111, 119, 120, 124, 125, 127, 128, 140, 156, 159, 168, 173, 184], "y": [0, 34, 61], "activ": [0, 12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 91], "jupyt": [0, 129, 181, 197], "now": [0, 66, 120, 156, 202], "should": [0, 2, 3, 4, 10, 22, 34, 39, 50, 52, 53, 54, 59, 62, 70, 71, 81, 83, 91, 93, 100, 101, 105, 106, 111, 112, 114, 119, 120, 127, 129, 131, 141, 156, 162, 163, 176, 180, 184, 187, 188], "readi": [0, 22, 184, 201], "notebook": [0, 129, 181, 197], "run": [0, 62, 69, 91, 129, 181, 185, 198, 206], "also": [0, 22, 34, 39, 49, 50, 52, 53, 54, 60, 63, 72, 75, 82, 83, 84, 86, 88, 91, 96, 99, 104, 105, 106, 113, 114, 120, 123, 124, 136, 156, 159, 163, 168, 179, 197, 201, 202, 203, 204, 206], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 184, 185, 187, 188, 190, 191, 192, 198], "bin": 0, "A": [0, 5, 7, 39, 48, 50, 62, 63, 77, 78, 82, 86, 91, 94, 95, 99, 100, 101, 108, 109, 111, 112, 122, 124, 125, 127, 128, 129, 133, 134, 141, 142, 168, 181, 190, 199, 201, 207], "retriev": [0, 71, 74, 82, 94, 133, 134, 135, 181, 184, 197, 201, 202], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 105, 106, 107, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 154, 156, 157, 158, 159, 160, 173, 181, 184, 187, 188, 190, 191, 192, 197, 200, 201, 204, 205, 206, 207], "manual": [0, 200], "sparksess": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 95, 124, 125, 127, 128, 174, 187, 188, 190, 191], "becaus": [0, 111, 112, 122, 129, 162, 180], "other": [0, 5, 9, 34, 50, 53, 61, 66, 79, 80, 88, 91, 109, 122, 124, 125, 128, 131, 138, 140, 149, 150, 201], "configur": [0, 50, 62, 79, 142, 174], "includ": [0, 52, 60, 62, 64, 65, 70, 72, 81, 83, 84, 85, 88, 91, 96, 104, 105, 106, 111, 124, 125, 128, 129, 131, 150, 181, 191, 198, 200, 201, 202, 207], "them": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 63, 64, 66, 68, 69, 75, 77, 83, 85, 86, 88, 91, 96, 99, 120, 127, 131, 136, 145, 158, 160, 201, 202], "builder": [0, 137, 174], "appnam": [0, 174], "master": [0, 174], "local": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 91, 124, 125, 127, 128, 136, 156, 174, 184, 205], "config": [0, 174, 198], "driver": [0, 174], "memori": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 63, 72, 82, 174], "16g": [0, 174], "maxresults": [0, 174], "kryoseri": [0, 174], "buffer": [0, 65, 82, 174], "max": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 63, 64, 65, 66, 68, 69, 71, 74, 75, 76, 77, 78, 83, 84, 85, 91, 134, 174], "2000m": [0, 174], "getorcr": [0, 174], "main": [1, 86, 129, 142, 200, 204, 207], "page": [1, 60, 125, 184, 196, 204, 206], "github": [1, 68, 74, 77, 127, 184], "issu": [1, 145], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 173, 181, 184, 185, 187, 188, 190, 191, 192, 197, 200, 201, 202, 204, 205, 206, 207], "model": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 93, 94, 95, 99, 100, 104, 105, 106, 108, 109, 111, 112, 114, 117, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 137, 138, 140, 142, 145, 162, 168, 174, 180, 181, 184, 185, 197, 198, 200, 204, 206, 207], "hub": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 93, 94, 105, 106, 117, 120, 124, 125, 127, 128, 131, 133, 134, 136, 145, 185], "welcom": [1, 5, 7, 8], "python": [1, 93, 174], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 111, 112, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 195, 197, 200, 201], "inform": [1, 56, 58, 74, 76, 82, 83, 91, 96, 104, 124, 131, 148, 157, 191, 197, 198, 199, 200, 201, 207], "us": [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 108, 111, 112, 114, 117, 119, 120, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 137, 141, 142, 143, 145, 147, 148, 149, 150, 156, 157, 158, 159, 160, 167, 168, 173, 174, 181, 184, 185, 187, 188, 190, 191, 198, 199, 200, 201, 202, 204], "librari": [1, 49, 50, 52, 53, 54, 93, 147, 148, 149, 157, 160, 206], "get": [1, 8, 22, 34, 91, 103, 117, 129, 131, 137, 142, 145, 146, 148, 149, 150, 154, 156, 157, 163, 168, 179, 197, 201, 206, 207], "start": [1, 5, 11, 15, 19, 23, 26, 31, 35, 41, 75, 88, 91, 105, 106, 120, 147, 174, 181, 197, 200, 202, 205, 206], "cheat": 1, "sheet": [1, 60], "requir": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 56, 58, 62, 63, 65, 68, 71, 72, 80, 83, 84, 91, 106, 109, 123, 131, 143, 145, 147, 149, 160, 200, 201, 202], "instal": [1, 181, 199], "session": [1, 174, 187, 188, 190, 191], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 112, 113, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 162, 168, 173, 174, 177, 180, 181, 184, 185, 187, 188, 190, 191, 192, 197, 200, 201, 202, 205, 206, 207], "user": [1, 104, 105, 111, 112, 142, 158, 174, 181, 197], "guid": [1, 198], "annot": [1, 3, 4, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 168, 172, 173, 174, 175, 176, 178, 180, 181, 184, 185, 186, 190, 192, 197, 198, 203, 204, 205, 206, 207], "own": [1, 22, 34, 39, 56, 62, 70, 81, 94, 95, 99, 100, 105, 106, 109, 117, 122, 123, 131, 133, 138, 140, 145, 204, 205, 207], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 105, 106, 107, 108, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 154, 156, 157, 158, 159, 160, 174, 180, 181, 183, 184, 185, 186, 198, 200, 201, 204], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 93, 94, 95, 96, 99, 100, 105, 106, 107, 108, 117, 120, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 142, 145, 149, 150, 156, 173, 174, 181, 197, 200, 204], "dataset": [1, 22, 34, 39, 56, 58, 66, 70, 71, 74, 75, 76, 77, 78, 81, 82, 91, 93, 105, 106, 114, 120, 125, 131, 145, 180, 184, 187, 188, 190, 191, 204], "train": [1, 5, 8, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 50, 52, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 76, 77, 78, 80, 81, 83, 84, 85, 91, 93, 94, 95, 99, 100, 103, 105, 106, 109, 113, 114, 117, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 138, 140, 145, 147, 156, 174, 181, 184, 197, 201, 202, 204, 205], "light": [1, 5, 69, 85, 91, 156, 204, 206], "helper": [1, 117, 145, 151, 173, 190, 191, 192, 204, 207], "function": [1, 72, 82, 124, 128, 149, 185, 196, 204], "third": [1, 119, 136, 182, 187], "parti": [1, 182], "project": [1, 91, 127, 129, 181, 198], "log": [1, 22, 34, 39, 106, 111, 114, 120, 125, 174], "api": [1, 111, 197, 201, 204], "modul": [1, 30, 57, 73, 87, 89, 90, 92, 97, 102, 110, 115, 116, 118, 121, 126, 132, 139, 144, 155, 166, 178, 183, 189], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 113, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 154, 156, 157, 158, 159, 160, 173, 181, 184, 187, 188, 189, 190, 191, 198, 200, 201, 205, 206, 207], "format": [2, 3, 4, 8, 49, 50, 52, 53, 54, 56, 58, 86, 88, 94, 95, 96, 98, 99, 100, 105, 106, 109, 114, 122, 124, 128, 133, 134, 142, 145, 146, 148, 150, 151, 154, 157, 159, 187, 188, 190, 191, 192, 198, 207], "annotatortyp": [2, 3, 4, 67, 101, 147, 148, 154, 157, 200], "begin": [2, 48, 104, 125, 140, 142, 147, 148, 157, 173, 200], "end": [2, 11, 15, 19, 23, 26, 31, 35, 41, 48, 106, 111, 112, 120, 124, 128, 140, 142, 145, 148, 157, 173, 181, 187, 197, 200, 202], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 160, 173, 174, 181, 184, 187, 188, 192, 197, 198, 200, 201, 202, 205, 206], "metadata": [2, 3, 4, 40, 48, 55, 91, 100, 105, 106, 108, 117, 148, 150, 154, 156, 157, 173, 181, 185, 200, 202], "embed": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 88, 89, 105, 106, 107, 129, 148, 149, 150, 156, 157, 168, 173, 174, 180, 184, 200], "repres": [2, 3, 4, 56, 58, 63, 68, 74, 85, 86, 88, 95, 100, 101, 111, 112, 142, 181, 184, 201], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 160, 163, 168, 173, 174, 181, 190, 197, 200, 201, 202], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 101, 105, 106, 107, 108, 109, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 166, 169, 173, 174, 176, 177, 178, 181, 184, 185, 187, 188, 190, 191, 192, 196, 198, 199, 200, 201, 203, 204, 205, 207], "nlp": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 60, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 93, 94, 95, 99, 100, 105, 106, 107, 108, 109, 117, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 138, 140, 142, 145, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 166, 174, 178, 181, 184, 185, 187, 188, 190, 191, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207], "detail": [2, 3, 4, 8, 53, 83, 84, 91, 108, 124, 125, 127, 128, 168], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 160, 163, 168, 172, 173, 174, 179, 180, 181, 184, 185, 187, 188, 190, 191], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 137, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 160, 163, 168, 172, 173, 174, 179, 181, 184, 185, 187, 188, 190, 191], "The": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 104, 105, 106, 107, 108, 109, 111, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 138, 141, 142, 145, 148, 150, 156, 157, 159, 168, 173, 174, 181, 184, 185, 187, 188, 190, 191, 192, 197, 200, 201, 202, 204, 205, 207], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 160, 173, 175, 184, 190, 200, 201, 204], "possibl": [2, 3, 4, 67, 69, 83, 84, 86, 119, 131, 134, 148, 157, 167, 169, 181, 197], "valu": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 65, 67, 72, 74, 80, 83, 86, 88, 91, 93, 94, 96, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 123, 124, 125, 127, 128, 129, 131, 133, 136, 137, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 160, 163, 167, 168, 169, 179, 181, 197, 207], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 91, 94, 95, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 114, 117, 122, 123, 124, 125, 127, 128, 131, 133, 134, 135, 136, 143, 145, 147, 149, 156, 158, 160, 168, 174, 184, 187, 191, 192, 201, 205, 206], "wordpiec": 2, "word_embed": [2, 63, 64, 66, 67, 68, 69, 72, 73, 75, 77, 79, 81, 83, 85, 89, 105, 106, 114], "sentence_embed": [2, 22, 34, 39, 65, 70, 71, 73, 74, 76, 78, 80, 84, 89, 129, 181, 197, 201], "categori": [2, 12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 49, 50, 52, 54, 181, 197, 201], "date": [2, 55, 96, 98, 99], "entiti": [2, 9, 13, 17, 21, 25, 28, 33, 37, 43, 46, 48, 52, 55, 66, 86, 87, 88, 95, 100, 102, 103, 104, 105, 106, 107, 108, 138, 143, 150, 156, 184], "sentiment": [2, 22, 34, 39, 72, 85, 89, 128, 174, 201, 202], "po": [2, 10, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 56, 58, 88, 89, 105, 106, 140, 145, 156, 173, 174, 184, 187, 189, 200, 204, 205, 206], "chunk": [2, 9, 10, 11, 15, 19, 23, 26, 31, 35, 40, 41, 55, 59, 61, 67, 70, 81, 86, 91, 95, 99, 100, 101, 104, 138, 143, 147, 150, 173, 181, 191, 197, 207], "named_ent": [2, 13, 17, 21, 25, 28, 33, 37, 43, 46, 88, 104, 105, 106, 107, 108, 114, 156, 184], "negex": 2, "labeled_depend": [2, 58], "languag": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 100, 105, 106, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145, 147, 157, 160, 168, 185, 201], "keyword": [2, 90, 91, 122], "dummi": [2, 60], "int": [2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 56, 58, 59, 61, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 88, 91, 93, 96, 101, 103, 105, 106, 109, 111, 113, 114, 117, 119, 120, 123, 124, 125, 127, 128, 129, 131, 134, 137, 141, 142, 145, 168, 174, 181, 187], "index": [2, 91, 95, 141, 174, 187], "charact": [2, 60, 72, 75, 86, 93, 99, 101, 109, 119, 120, 131, 133, 134, 141, 142, 145, 150], "under": [2, 69, 76, 85, 91, 174], "last": [2, 96, 98, 138, 192, 205], "string": [2, 8, 22, 34, 39, 48, 56, 60, 86, 99, 101, 107, 109, 120, 128, 134, 136, 140, 147, 148, 150, 154, 156, 157, 205], "dict": [2, 3, 4, 56, 58, 86, 94, 95, 99, 100, 105, 107, 108, 109, 111, 114, 122, 131, 133, 134, 142, 156, 172, 174, 180, 181, 184], "associ": [2, 3, 4, 34, 80, 86, 99, 104, 111, 181], "list": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 59, 60, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 88, 91, 93, 96, 99, 103, 104, 106, 107, 108, 109, 111, 113, 119, 120, 124, 125, 127, 128, 129, 131, 136, 140, 142, 149, 150, 156, 157, 163, 173, 180, 181, 184, 185, 192, 196, 201], "vector": [2, 34, 64, 65, 67, 68, 70, 71, 72, 80, 81, 82, 129, 149, 150, 200], "where": [2, 34, 68, 72, 86, 91, 94, 95, 99, 100, 101, 111, 117, 120, 122, 124, 125, 128, 129, 133, 134, 145, 147, 190], "applic": [2, 54, 91, 124, 167, 181, 182, 197, 199], "copi": [2, 3, 4, 185], "differ": [2, 3, 4, 50, 52, 56, 58, 72, 74, 77, 78, 83, 85, 91, 96, 119, 120, 131, 142, 145, 156, 181, 205], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 91, 93, 94, 95, 100, 101, 103, 105, 106, 108, 111, 117, 119, 120, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 140, 142, 145, 147, 156, 168, 172, 173, 174, 175, 180, 184, 185, 187, 188, 190, 191], "newli": [2, 3, 4], "static": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 93, 94, 95, 100, 105, 106, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145, 185, 201], "datatyp": [2, 173], "structtyp": 2, "schema": [2, 104, 181, 197], "look": [2, 62, 106, 133, 200], "like": [2, 5, 11, 15, 19, 22, 23, 26, 31, 35, 41, 48, 53, 60, 63, 67, 69, 75, 79, 85, 88, 91, 99, 104, 111, 120, 123, 125, 131, 142, 145, 181, 197, 199, 200], "struct": [2, 148, 154, 157], "containsnul": [2, 34, 146, 148, 154, 157], "true": [2, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 93, 95, 96, 98, 100, 104, 106, 109, 119, 120, 129, 131, 133, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 157, 159, 181, 185, 187, 188, 191, 192, 197, 201, 202], "nullabl": [2, 34, 146, 148, 154, 157], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 151, 156, 157, 159, 160, 173, 174, 181, 184, 187, 188, 190, 192, 197, 200, 201, 202, 207], "integ": [2, 50, 52, 53, 54, 148, 154, 157], "map": [2, 10, 34, 82, 86, 111, 113, 114, 117, 131, 148, 154, 157, 163, 168, 173, 179, 180, 200], "kei": [2, 5, 50, 56, 58, 77, 78, 83, 84, 94, 108, 148, 154, 156, 157, 181, 184, 197], "valuecontainsnul": [2, 148, 154, 157], "arrai": [2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 93, 94, 101, 106, 113, 117, 119, 120, 124, 125, 127, 128, 131, 138, 140, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 173, 202, 205], "element": [2, 34, 101, 111, 146, 148, 154, 157], "float": [2, 3, 5, 7, 8, 22, 34, 39, 50, 53, 55, 93, 105, 106, 108, 111, 113, 114, 120, 124, 125, 127, 128, 129, 131, 145, 146, 148, 149, 156, 157, 168], "sql": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 95, 124, 125, 127, 128, 156, 173, 180, 184, 187, 188, 190, 191], "arraytyp": [2, 147, 173], "fromrow": 2, "row": [2, 40, 59, 61, 82, 119, 120, 123, 148, 157, 159, 173, 187], "column": [2, 9, 22, 34, 39, 60, 82, 94, 103, 105, 106, 113, 114, 117, 123, 129, 137, 142, 145, 146, 147, 148, 149, 150, 151, 154, 157, 160, 163, 173, 184, 187, 190, 201], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 114, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 159, 160, 168, 173, 176, 180, 181, 184, 197, 200, 201, 202, 205, 206, 207], "an": [2, 5, 7, 8, 10, 22, 34, 39, 40, 49, 50, 52, 53, 54, 56, 59, 60, 62, 66, 68, 72, 74, 75, 76, 85, 86, 91, 93, 95, 96, 98, 99, 100, 101, 105, 106, 108, 111, 113, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 131, 133, 134, 138, 142, 145, 147, 148, 149, 150, 151, 156, 157, 160, 163, 168, 172, 173, 175, 179, 180, 181, 187, 188, 190, 191, 196, 198, 200, 201, 202, 204, 205], "annotationaudio": 3, "audio": [3, 146, 181], "alreadi": [3, 88, 91, 105, 106, 107, 142, 143, 156, 184, 205], "process": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 54, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 81, 83, 84, 85, 88, 91, 93, 104, 105, 106, 114, 120, 124, 125, 128, 145, 146, 147, 148, 149, 150, 154, 157, 158, 160, 181, 197, 200, 201, 202, 203], "file": [3, 5, 7, 22, 34, 39, 56, 58, 60, 80, 82, 86, 94, 95, 99, 100, 105, 106, 109, 114, 120, 122, 131, 133, 134, 137, 142, 146, 159, 169, 174, 181, 187, 188, 190, 191, 197, 207], "byte": [3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 93, 106, 113, 124, 125, 127, 128, 131, 181], "annotationimag": [4, 156, 184], "origin": [4, 49, 50, 52, 53, 54, 63, 70, 75, 77, 81, 104, 120, 124, 154], "height": [4, 50, 52, 53, 54, 154], "width": [4, 50, 52, 53, 54, 154], "nchannel": [4, 154], "mode": [4, 22, 34, 39, 106, 114, 133, 148, 154, 157, 181], "imag": [4, 49, 50, 52, 53, 54, 154, 156, 184], "uri": [4, 185], "pixel": [4, 52], "number": [4, 8, 14, 18, 22, 29, 34, 38, 39, 44, 53, 56, 58, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 101, 103, 105, 106, 111, 113, 117, 119, 120, 124, 125, 127, 128, 129, 131, 137, 145, 168, 187, 188], "color": 4, "channel": [4, 50, 52, 53, 54, 131], "opencv": 4, "concern": [5, 7, 8, 12, 49, 50, 52, 53, 54, 55, 63], "hubertforctc": 5, "classnam": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 93, 94, 95, 99, 100, 105, 106, 108, 109, 111, 112, 117, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 138, 140, 142, 145, 159, 161, 162, 170, 176], "java_model": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 93, 94, 95, 99, 100, 105, 106, 108, 109, 111, 112, 117, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 138, 140, 142, 145, 153, 159, 162, 180], "none": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 93, 94, 95, 99, 100, 105, 106, 108, 109, 111, 112, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 157, 159, 162, 174, 180, 181, 184, 185, 202], "hubert": 5, "head": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 48, 59, 63, 85, 104, 105, 106, 156, 173, 184, 201], "connectionist": [5, 7, 8], "tempor": [5, 7, 8], "classif": [5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 49, 50, 52, 54, 63, 71, 74, 80, 123, 124, 128, 201], "ctc": [5, 7, 8], "wa": [5, 7, 12, 13, 14, 16, 17, 18, 22, 24, 25, 27, 28, 29, 32, 33, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 50, 52, 59, 60, 61, 66, 68, 69, 75, 77, 78, 82, 83, 84, 91, 111, 123, 124, 125, 131, 184, 201, 202], "propos": [5, 7, 50, 52, 63, 66, 68, 69, 76, 77, 78, 83, 84, 85], "self": [5, 7, 52, 63, 75, 127, 168], "supervis": [5, 7, 8, 63, 71, 72, 80, 91, 124, 125], "speech": [5, 7, 8, 10, 66, 116, 117, 145, 190, 207], "represent": [5, 7, 52, 63, 64, 65, 69, 70, 71, 72, 81, 82, 83, 84, 85, 104, 128, 159, 172], "learn": [5, 7, 22, 34, 39, 55, 63, 69, 70, 72, 77, 78, 80, 81, 83, 84, 85, 91, 105, 106, 113, 120, 124, 125, 128, 131, 181, 199], "mask": [5, 52, 68, 76, 83, 84, 85, 124, 141], "predict": [5, 8, 49, 52, 68, 76, 106, 125, 128, 181, 197], "hidden": [5, 11, 13, 15, 17, 19, 21, 23, 25, 26, 28, 31, 33, 35, 37, 41, 43, 46, 63, 72, 85, 137], "unit": [5, 125, 137], "wei": [5, 52], "ning": 5, "hsu": 5, "benjamin": [5, 66], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 14, 18, 29, 38, 40, 44, 59, 61, 66, 76, 88, 100, 113, 114, 133, 136, 142, 158, 163, 168, 179, 187, 200, 201, 205, 206], "transcrib": [5, 7, 8], "text": [5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 107, 108, 109, 111, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 150, 151, 157, 159, 160, 167, 168, 169, 172, 173, 181, 187, 188, 190, 191, 197, 200, 201, 202, 206, 207], "provid": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 93, 94, 95, 96, 98, 99, 100, 105, 106, 109, 113, 114, 117, 120, 122, 124, 125, 127, 128, 131, 133, 134, 145, 156, 163, 168, 173, 175, 179, 184, 202], "pre": [5, 7, 8, 22, 34, 39, 49, 54, 64, 65, 68, 69, 71, 72, 76, 80, 106, 114, 124, 128, 148, 150, 157, 160, 188, 201], "current": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 61, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 91, 95, 96, 98, 120, 124, 125, 127, 128, 137, 156, 159, 163, 174, 200, 201, 202], "support": [5, 7, 8, 22, 34, 61, 63, 75, 91, 106, 109, 120, 127, 136, 159, 174, 198], "appl": [5, 7, 65, 78, 84, 174], "silicon": [5, 7, 174], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 63, 75, 124], "instruct": [5, 7, 74], "xla": [5, 7], "companion": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 93, 94, 105, 106, 108, 117, 120, 124, 125, 127, 128, 131, 133, 134, 136, 145, 177], "object": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 93, 94, 105, 106, 108, 111, 117, 120, 124, 125, 127, 128, 131, 133, 134, 135, 136, 145, 167, 169, 176, 177, 181, 200, 201], "speechtotext": [5, 7, 8], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 157, 159, 160, 163, 181, 197, 201, 202], "audio_assembl": [5, 7, 8, 155, 174], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 157, 159, 160, 163, 181, 197, 201, 202], "default": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 113, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 137, 140, 141, 142, 145, 147, 148, 149, 150, 151, 156, 157, 159, 172, 173, 174, 181, 184, 185, 187, 188, 190, 191, 201], "asr_hubert_large_ls960": [5, 8], "name": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 100, 102, 103, 105, 106, 108, 113, 117, 120, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 137, 138, 142, 145, 146, 147, 148, 149, 150, 151, 154, 157, 159, 160, 163, 173, 179, 181, 184, 185, 187, 190, 197, 201], "avail": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 89, 91, 93, 94, 96, 99, 105, 106, 117, 120, 124, 125, 127, 128, 131, 133, 134, 136, 145, 176, 184, 185, 197, 204], "see": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 108, 109, 111, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 142, 145, 148, 149, 150, 151, 157, 160, 168, 181, 184, 185, 191, 197, 198, 199, 204, 206, 207], "To": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 63, 64, 66, 68, 69, 75, 77, 83, 85, 91, 96, 99, 117, 119, 124, 125, 128, 145, 151, 156, 158, 181, 197, 205], "which": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 77, 79, 80, 81, 83, 85, 88, 91, 96, 98, 99, 106, 108, 109, 111, 112, 119, 120, 122, 124, 125, 127, 128, 133, 141, 145, 149, 156, 173, 185, 187, 188, 201, 202], "compat": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 63, 64, 66, 68, 69, 75, 77, 83, 85, 106, 149, 185], "5669": [5, 7, 8, 49, 50, 52, 53, 54, 66], "more": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 60, 66, 69, 71, 72, 74, 79, 83, 84, 88, 91, 96, 101, 104, 108, 111, 120, 124, 125, 127, 128, 133, 141, 142, 148, 149, 150, 157, 160, 168, 181, 184, 191, 197, 198, 199, 201, 204, 207], "extend": [5, 7, 8, 10, 22, 34, 39, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 72, 77, 79, 80, 82, 83, 85, 91, 93, 94, 96, 98, 99, 100, 101, 105, 106, 108, 109, 114, 117, 119, 120, 122, 123, 124, 127, 128, 129, 131, 133, 135, 136, 140, 142, 145, 148, 149, 150, 157, 160, 184], "hubertforctctestspec": 5, "paper": [5, 8, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 91, 120, 123, 124, 125, 127, 128, 145, 191, 207], "abstract": [5, 8, 50, 52, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 91, 124, 125, 127, 128, 137, 191, 207], "approach": [5, 8, 50, 52, 77, 78, 85, 91, 103, 105, 106, 108, 120, 122, 124, 125, 128, 131, 133, 134, 161, 204], "challeng": [5, 34, 52, 69, 72, 74, 77, 78, 91], "three": [5, 131, 143], "uniqu": [5, 111, 112, 124], "problem": [5, 34, 63, 72, 76, 124, 128, 131, 145], "multipl": [5, 8, 34, 54, 66, 86, 91, 96, 119, 124, 142, 173, 181, 187], "sound": [5, 59], "each": [5, 7, 14, 18, 22, 29, 34, 38, 39, 44, 50, 52, 53, 54, 59, 68, 70, 71, 76, 79, 81, 82, 86, 88, 91, 94, 95, 96, 99, 100, 101, 103, 105, 106, 108, 109, 111, 114, 117, 119, 120, 122, 124, 129, 131, 133, 134, 141, 142, 145, 148, 157, 167, 173, 180, 190, 202], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 160, 163, 173, 180, 184, 187, 188, 190, 191, 201, 202, 205, 207], "utter": 5, "lexicon": 5, "dure": [5, 22, 34, 39, 49, 69, 74, 105, 106, 114, 119, 129, 131, 174, 181, 197], "phase": [5, 69, 124], "variabl": [5, 70, 81], "length": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 53, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 74, 75, 76, 77, 78, 81, 83, 84, 85, 101, 109, 111, 119, 120, 124, 125, 127, 128, 129, 131, 141, 142, 168], "explicit": [5, 62, 119, 125], "segment": [5, 48, 50, 52, 69, 77, 144, 145], "deal": [5, 156, 205], "bert": [5, 12, 15, 16, 17, 18, 20, 24, 27, 28, 32, 36, 40, 42, 45, 53, 63, 64, 65, 68, 69, 75, 76, 77, 78, 83, 84, 85, 106, 107, 108, 124, 128], "util": [5, 67, 105, 108, 119, 120, 134, 158, 165, 166, 169, 171, 174, 175, 179, 183], "offlin": [5, 181], "cluster": [5, 71, 74, 80, 174], "step": [5, 22, 34, 39, 70, 81, 106, 114, 181, 197, 201], "align": 5, "target": [5, 80, 124, 127, 142, 147, 156, 184], "label": [5, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 49, 50, 52, 54, 56, 58, 71, 86, 93, 103, 104, 105, 106, 108, 113, 114, 122, 123, 128, 131, 137, 145, 181, 187, 197, 201], "loss": [5, 63, 69, 74, 106, 128, 197], "ingredi": 5, "our": [5, 63, 66, 69, 70, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 91, 120, 124, 125, 128, 173, 184, 206], "appli": [5, 9, 22, 34, 39, 50, 54, 59, 60, 86, 88, 106, 107, 114, 119, 128, 131, 133, 150, 173, 187], "over": [5, 59, 69, 76, 83, 84, 85, 124, 133, 142, 173, 181, 197], "region": 5, "onli": [5, 8, 50, 52, 53, 54, 56, 58, 59, 60, 72, 80, 85, 96, 99, 109, 111, 119, 120, 124, 125, 127, 128, 140, 145, 158, 167, 168, 187], "forc": 5, "combin": [5, 14, 18, 29, 38, 44, 53, 69, 75, 82, 91, 124, 128, 131, 133, 145], "acoust": 5, "continu": [5, 104, 125, 129, 151, 197], "reli": [5, 56, 58, 85, 91], "primarili": 5, "consist": [5, 63, 68, 75, 99, 117, 123, 145, 159, 190], "unsupervis": [5, 83, 84, 85, 91, 124, 125], "rather": [5, 50, 62], "than": [5, 34, 39, 50, 62, 69, 70, 74, 81, 83, 84, 85, 91, 93, 101, 105, 111, 125, 127, 133, 134, 201], "intrins": [5, 50], "qualiti": [5, 52, 125], "assign": [5, 34, 86, 107, 122], "simpl": [5, 64, 65, 86, 125, 202], "k": [5, 8, 53, 124, 125, 127, 128, 149, 168], "mean": [5, 8, 10, 14, 18, 29, 34, 38, 44, 50, 52, 53, 54, 83, 91, 93, 96, 98, 111, 124, 125, 127, 128, 129, 141, 149, 156, 168, 201, 202, 205], "teacher": 5, "100": [5, 22, 34, 40, 54, 70, 81, 83, 91, 111, 120, 159], "two": [5, 34, 52, 56, 58, 63, 68, 70, 80, 81, 82, 83, 84, 88, 143, 187, 201], "iter": [5, 56, 58, 63, 70, 81, 117, 145, 181, 197], "either": [5, 8, 22, 39, 54, 58, 66, 67, 79, 86, 91, 93, 99, 122, 123, 128, 145, 147, 156, 157, 159, 184, 202], "match": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 50, 60, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 81, 83, 84, 85, 86, 95, 96, 97, 98, 99, 100, 109, 117, 119, 124, 125, 142, 145, 147, 167, 200], "improv": [5, 63, 64, 65, 66, 68, 72, 74, 77, 78, 83, 84, 105, 106, 125, 128, 129, 206], "upon": [5, 61, 91], "state": [5, 11, 13, 15, 17, 19, 21, 22, 23, 25, 26, 28, 31, 33, 34, 35, 37, 39, 41, 43, 46, 50, 52, 54, 63, 64, 65, 66, 71, 72, 74, 75, 76, 77, 78, 85, 91, 106, 124, 125, 128, 157, 198, 201], "art": [5, 22, 34, 50, 52, 54, 63, 64, 65, 66, 71, 72, 74, 75, 76, 77, 78, 85, 91, 106, 124, 125, 128, 157], "wav2vec": [5, 7], "perform": [5, 50, 52, 54, 60, 63, 66, 68, 69, 71, 72, 74, 77, 78, 80, 82, 83, 84, 85, 106, 123, 124, 125, 128, 129, 133], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 69, 119], "000h": 5, "benchmark": [5, 8, 54, 63, 68, 69, 71, 72, 83, 84, 124, 128], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 8, 48, 64, 65, 69, 71, 76, 108, 124, 128, 192], "tune": [5, 8, 48, 64, 65, 69, 71, 76, 108, 124, 128], "subset": 5, "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 157, 159, 160, 173, 185, 187, 188, 190, 191, 192, 197, 200, 201, 202, 206], "19": [5, 55, 71, 101, 190, 192], "13": [5, 9, 10, 48, 83, 84, 88, 117, 150, 192], "rel": [5, 66, 68, 83, 96, 98, 105, 131, 200], "wer": 5, "reduct": [5, 63, 133], "dev": [5, 52, 63, 72, 80], "test": [5, 22, 34, 39, 49, 50, 52, 53, 54, 56, 58, 62, 64, 65, 80, 82, 94, 95, 99, 100, 105, 106, 114, 117, 125, 133, 134, 138, 145, 187, 188, 190, 191, 192, 201, 207], "evalu": [5, 22, 34, 39, 66, 71, 74, 75, 83, 84, 114, 124, 163, 181], "batchsiz": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 83, 84, 85, 106, 124, 127, 131], "size": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 59, 60, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 88, 91, 106, 113, 124, 125, 127, 128, 129, 131, 133, 168, 200, 205, 206], "batch": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 53, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 83, 84, 85, 106, 113, 124, 127, 131], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 111, 112, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 161, 162, 163, 166, 170, 174, 176, 180, 181, 197, 201, 202, 205], "ml": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 105, 106, 107, 108, 109, 111, 112, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 154, 156, 157, 158, 159, 160, 181, 197, 201, 205], "audioassembl": [5, 7, 8, 146], "audio_cont": [5, 7, 8, 146], "setstag": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 105, 106, 107, 108, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 149, 159, 160, 201, 202], "processedaudiofloat": [5, 7, 8], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 105, 106, 107, 108, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 157, 159, 160, 173, 181, 197, 200, 201, 202, 206], "rawfloat": [5, 7, 8], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 105, 106, 107, 108, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 150, 154, 157, 159, 160, 173, 200, 201, 202, 206], "fit": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 105, 106, 107, 108, 109, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 147, 149, 156, 158, 159, 160, 180, 181, 197, 201, 202, 205], "select": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 55, 67, 69, 82, 88, 91, 93, 105, 106, 108, 111, 123, 124, 125, 128, 129, 131, 133, 134, 140, 145, 146, 148, 150, 151, 154, 157, 159, 160, 173, 181, 197, 202], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 60, 82, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 150, 151, 157, 159, 160, 173, 190, 200, 201, 202], "mister": [5, 7], "quilter": [5, 7, 8], "THE": [5, 7, 60], "apostl": [5, 7, 8], "OF": [5, 7, 63], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7, 8], "TO": [5, 7, 187, 207], "hi": [5, 7, 8, 61, 108, 120], "gospel": [5, 7, 8], "setconfigprotobyt": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 93, 106, 113, 124, 125, 127, 128, 131], "b": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 93, 95, 100, 104, 105, 106, 107, 108, 113, 119, 124, 125, 127, 128, 131, 145, 156, 173, 184, 187, 191, 207], "configproto": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 93, 106, 113, 124, 125, 127, 128, 131], "tensorflow": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 91, 93, 106, 113, 124, 125, 127, 128, 131], "serial": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 93, 106, 113, 124, 125, 127, 128, 131, 174], "loadsavedmodel": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 124, 125, 127, 128], "folder": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 106, 114, 120, 124, 125, 127, 128, 131, 134, 137, 185, 187], "spark_sess": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 124, 125, 127, 128], "save": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 106, 114, 120, 124, 125, 127, 128, 174, 181, 197, 201], "restor": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 93, 94, 95, 100, 105, 106, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145], "lang": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 88, 93, 94, 95, 100, 105, 106, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145, 184, 185, 201, 206], "en": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 85, 88, 93, 94, 95, 100, 105, 106, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145, 184, 185, 188, 201, 206, 207], "remote_loc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 93, 94, 95, 100, 105, 106, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145, 184, 185], "download": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 88, 93, 94, 95, 100, 105, 106, 107, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145, 174, 184, 185, 200, 201, 204, 205], "option": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 91, 93, 94, 95, 99, 100, 105, 106, 108, 109, 114, 117, 120, 122, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145, 146, 148, 152, 153, 156, 157, 172, 173, 174, 180, 181, 184, 185, 187, 188, 190, 191, 201], "remot": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 93, 94, 95, 100, 105, 106, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145, 184, 185], "address": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 93, 94, 95, 100, 105, 106, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145], "resourc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 93, 94, 95, 99, 100, 105, 106, 108, 109, 114, 117, 120, 122, 123, 124, 125, 127, 128, 131, 133, 134, 136, 138, 142, 145, 158, 169, 172, 183, 185, 187, 188, 190, 191, 192, 201, 207], "Will": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 93, 94, 95, 100, 105, 106, 108, 117, 119, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145], "repositori": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 93, 94, 95, 100, 105, 106, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145, 184, 198], "otherwis": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 58, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 93, 94, 95, 100, 105, 106, 108, 117, 120, 123, 124, 125, 127, 128, 131, 133, 134, 136, 142, 145, 147, 168, 181], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "whisper_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 138], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "whisperforctc": 8, "whisper": 8, "automat": [8, 62, 88, 91, 108, 127, 133, 200, 201], "recognit": [8, 13, 17, 21, 25, 28, 33, 37, 43, 46, 50, 54, 66, 102, 105, 106, 108], "asr": 8, "system": [8, 91, 124, 125], "680": 8, "000": [8, 40, 91, 125, 145, 159], "hour": [8, 61, 96, 98], "multilingu": [8, 83, 84, 145], "multitask": [8, 74, 125], "collect": [8, 91, 181, 197], "web": [8, 48, 60, 66, 125, 181, 197], "well": [8, 54, 56, 58, 59, 71, 80, 83, 84, 91, 111, 124, 159], "translat": [8, 124, 125, 127, 128, 145], "those": [8, 66, 88, 107, 201, 202], "english": [8, 39, 66, 91, 133, 136, 145, 185], "moment": 8, "greedi": [8, 53, 124, 125, 127, 128, 168], "search": [8, 53, 96, 124, 129, 133, 168], "task": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 50, 52, 54, 63, 64, 65, 66, 68, 69, 71, 74, 75, 76, 80, 83, 84, 85, 91, 108, 124, 125, 127, 128, 158, 168], "setlanguag": 8, "settask": [8, 124, 125, 128, 168], "asr_whisper_tiny_opt": 8, "whisperforctctestspec": 8, "robust": [8, 74], "via": [8, 12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 80, 154, 174], "larg": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 50, 52, 53, 54, 59, 61, 63, 68, 69, 71, 72, 76, 83, 84, 85, 91, 93, 95, 100, 106, 124, 125], "scale": [8, 50, 52, 53, 54, 63, 69, 71, 75, 76, 83, 84, 124, 125, 128], "weak": [8, 71], "studi": [8, 69, 77, 78, 124, 128], "capabl": [8, 49, 52, 69, 85, 125], "simpli": [8, 60, 74, 202], "amount": [8, 54, 80, 91, 100, 125, 145, 156, 205], "transcript": 8, "internet": 8, "when": [8, 9, 10, 12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45, 50, 52, 53, 54, 59, 60, 62, 63, 71, 88, 96, 98, 101, 106, 111, 124, 125, 128, 131, 133, 136, 140, 145, 156, 187, 201, 202, 205], "gener": [8, 22, 34, 50, 52, 53, 63, 67, 69, 71, 74, 75, 79, 85, 88, 91, 105, 106, 108, 111, 120, 124, 125, 127, 128, 131, 133, 134, 150, 151, 168, 181, 197, 200, 201, 202], "standard": [8, 50, 52, 53, 54, 60, 75, 96, 98, 124, 133, 134, 142], "often": [8, 63, 77, 78, 85], "competit": [8, 83, 84, 91], "prior": [8, 50, 69, 74, 75, 111, 131], "fulli": [8, 184], "zero": [8, 49, 71, 82, 108, 125], "shot": [8, 49, 71, 108, 125], "transfer": [8, 54, 69, 71, 80, 83, 84, 124, 125, 128], "without": [8, 49, 64, 65, 71, 74, 83, 84, 91, 125, 145], "ani": [8, 14, 18, 29, 38, 44, 49, 62, 70, 71, 74, 80, 81, 86, 91, 106, 125, 128, 131, 149, 150, 185, 198, 201, 202, 207], "compar": [8, 52, 54, 63, 68, 69, 72, 74, 76, 85, 91, 120, 124, 128, 131, 181, 197], "human": [8, 68, 91], "accuraci": [8, 50, 52, 56, 58, 64, 65, 70, 80, 81, 83, 84, 105, 106, 117, 133, 145, 197], "releas": [8, 60, 63, 66, 68, 77, 78, 83, 84, 124, 128, 174], "infer": [8, 14, 18, 29, 38, 44, 49, 64, 65, 66, 69, 85], "code": [8, 48, 49, 62, 68, 70, 74, 75, 77, 78, 81, 83, 84, 91, 93, 124, 128, 198, 206], "serv": [8, 52, 198], "foundat": 8, "further": [8, 9, 63, 74, 91, 105, 106, 111, 160], "e": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 27, 28, 32, 33, 36, 37, 42, 43, 45, 46, 50, 58, 60, 71, 72, 74, 75, 76, 86, 88, 105, 106, 124, 125, 127, 128, 129, 131, 136, 159, 168, 181, 197], "g": [8, 10, 12, 13, 16, 17, 20, 21, 24, 25, 27, 28, 32, 33, 36, 37, 42, 43, 45, 46, 50, 58, 60, 71, 72, 74, 76, 88, 105, 106, 124, 125, 127, 128, 131, 136, 159, 168, 181, 197], "check": [8, 71, 106, 119, 131, 132, 133, 134, 156, 160, 184, 201, 206], "descript": [8, 58, 74, 79, 91, 96, 133, 140, 167, 169], "ismultilingu": 8, "whether": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 88, 95, 96, 98, 100, 101, 104, 105, 106, 109, 111, 114, 119, 120, 124, 125, 127, 128, 129, 131, 133, 136, 141, 142, 145, 147, 149, 150, 151, 156, 159, 160, 163, 168, 174, 184, 187, 191, 202], "minoutputlength": [8, 53, 124, 125, 128], "minimum": [8, 34, 39, 53, 70, 81, 88, 91, 93, 103, 105, 106, 109, 119, 120, 124, 125, 128, 133, 134, 141, 142, 168, 187], "sequenc": [8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 50, 52, 53, 54, 75, 111, 124, 125, 126, 127, 128, 131, 136, 168], "maxoutputlength": [8, 53, 124, 125, 127, 128], "maximum": [8, 22, 34, 39, 48, 53, 62, 70, 81, 88, 91, 103, 105, 106, 109, 111, 113, 119, 120, 124, 125, 127, 128, 131, 133, 141, 142, 168], "dosampl": [8, 53, 124, 125, 128], "sampl": [8, 53, 111, 124, 125, 127, 128, 168], "decod": [8, 53, 68, 75, 124, 125, 127, 128, 168], "temperatur": [8, 53, 111, 124, 125, 128], "next": [8, 53, 77, 78, 91, 96, 98, 124, 125, 127, 128, 168], "probabl": [8, 12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 53, 91, 111, 124, 125, 127, 128, 129, 133, 168], "topk": [8, 53, 124, 125, 128], "highest": [8, 53, 111, 124, 125, 127, 128, 133, 168], "vocabulari": [8, 53, 70, 81, 124, 125, 127, 128, 131, 168], "keep": [8, 53, 54, 59, 91, 109, 124, 125, 127, 128, 168], "filter": [8, 50, 52, 53, 54, 83, 84, 91, 104, 105, 124, 125, 127, 128, 136, 168, 173, 185], "topp": [8, 53, 111, 124, 125, 127, 128, 168], "most": [8, 53, 59, 61, 66, 69, 75, 76, 91, 106, 111, 124, 125, 127, 128, 168], "add": [8, 53, 82, 96, 98, 119, 124, 125, 127, 128, 131, 142, 168, 201], "top_p": [8, 53, 111], "higher": [8, 53, 82, 91, 111, 123, 124, 125, 127, 128, 168], "kept": [8, 53, 124, 125, 127, 128, 168], "repetitionpenalti": [8, 53, 124, 125, 128], "repetit": [8, 53, 124, 125, 127, 128, 168], "penalti": [8, 53, 124, 125, 127, 128, 168], "norepeatngrams": [8, 53, 124, 125, 128], "ngram": [8, 53, 67, 101, 124, 125, 127, 128, 168], "occur": [8, 53, 124, 125, 127, 128, 168], "onc": [8, 53, 124, 125, 127, 128, 168], "beamsiz": [8, 53, 124], "beam": [8, 53, 124, 168], "mr": 8, "middl": [8, 140, 145], "getlanguag": 8, "langaug": [8, 184], "getismultilingu": 8, "do": [8, 9, 61, 80, 91, 104, 136, 142, 156, 197, 201, 205], "xx": [8, 44, 83, 84, 93, 127], "chunk2doc": [9, 147], "convert": [9, 53, 55, 60, 67, 76, 79, 82, 96, 98, 101, 104, 109, 111, 124, 128, 141, 143, 145, 147, 150, 151, 181, 197, 204], "back": [9, 61, 111, 124], "try": [9, 131, 187], "re": [9, 71, 201], "analysi": [9, 22, 34, 39, 72, 74, 85, 121, 122, 128, 165, 202], "doc2chunk": [9, 147], "pretrainedpipelin": [9, 150, 156, 173, 184, 200, 205, 206], "locat": [9, 86, 119, 174, 184, 201], "extract": [9, 10, 11, 15, 19, 23, 26, 31, 35, 41, 50, 52, 53, 54, 56, 59, 61, 67, 82, 86, 87, 88, 90, 91, 95, 96, 98, 100, 104, 105, 106, 107, 119, 120, 122, 129, 131, 134, 138, 143, 149, 150, 151, 156, 174, 181, 184, 197], "york": [9, 108, 150], "jersei": [9, 150], "aren": [9, 150], "t": [9, 14, 18, 29, 38, 44, 61, 69, 77, 94, 109, 120, 122, 142, 150], "far": [9, 111, 125, 150], "apart": [9, 56, 58, 150], "actual": [9, 101, 150, 160], "id": [9, 34, 60, 83, 86, 111, 112, 124, 125, 127, 128, 131, 147, 148, 150, 157, 160, 181, 187], "defin": [9, 10, 104, 105, 106, 131, 136, 140, 150, 173, 181, 184, 197, 201, 205], "amongst": [9, 150], "thing": [9, 131, 150], "explain_document_dl": [9, 150, 156, 173, 184], "chunktodoc": 9, "chunkconvert": 9, "explainresult": [9, 150], "selectexpr": [9, 10, 22, 40, 48, 49, 50, 52, 53, 54, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 96, 98, 99, 100, 101, 104, 107, 108, 109, 117, 119, 120, 122, 127, 135, 136, 138, 141, 142, 143, 147, 149, 150, 173, 187, 188, 190, 200, 201, 206], "explod": [9, 10, 22, 40, 48, 56, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 95, 98, 99, 100, 101, 104, 107, 108, 117, 119, 120, 127, 143, 149, 150, 173, 187, 190, 200, 201, 206], "col": [9, 56, 58, 86, 95, 104, 107, 150, 173, 200], "loc": [9, 13, 17, 21, 25, 28, 33, 37, 43, 46, 88, 104, 105, 106, 150, 156, 173, 184, 187], "sentenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 117, 123, 124, 127, 128, 129, 131, 136, 138, 141, 143, 145, 148, 150, 156, 157, 159, 160, 174, 184, 187, 188, 190, 191, 192, 201, 205, 206], "22": [9, 150, 187, 200], "pattern": [10, 59, 60, 86, 96, 99, 109, 133, 134, 141, 142, 145], "part": [10, 62, 66, 91, 94, 116, 117, 135, 145, 147, 190, 207], "tag": [10, 22, 34, 39, 60, 66, 103, 104, 105, 106, 107, 116, 117, 145, 173, 181, 187, 190, 191, 207], "order": [10, 59, 62, 74, 85, 86, 91, 96, 124, 133, 134, 156, 160, 173, 201, 202, 205, 207], "meaning": [10, 135], "phrase": [10, 66, 70, 81, 95, 100], "onto": [10, 173, 202], "pars": [10, 56, 57, 58, 66, 86, 94, 96, 98, 131, 133, 134, 156, 159, 184, 187, 190], "regular": [10, 59, 99, 105, 119], "express": [10, 39, 48, 59, 96, 99, 119], "wrap": [10, 112, 129, 161, 162, 170, 176, 180], "angl": 10, "bracket": 10, "easili": [10, 72, 117, 149, 197], "distinguish": 10, "itself": [10, 62, 91, 128, 145, 158, 202], "form": [10, 22, 34, 39, 82, 86, 94, 95, 96, 99, 100, 120, 122, 133, 134, 145, 149, 181, 187, 188, 201], "peter": [10, 75, 94, 109, 117, 120, 133, 135, 187], "piper": [10, 94, 117, 135], "employe": [10, 94, 117, 135], "pick": [10, 94, 117, 135], "peck": [10, 94, 117, 135], "pickl": [10, 94, 117, 135], "pepper": [10, 94, 117, 135], "nnp": [10, 117, 156, 173, 187, 188, 190, 191, 200, 205, 206, 207], "nn": [10, 117, 187, 188, 190, 191, 207], "vbp": [10, 117, 156, 188, 200, 205, 206], "vbg": [10, 117], "IN": [10, 117, 156, 173, 188, 190, 191, 200, 205, 206], "jj": [10, 117, 156, 173, 187, 190, 200, 205, 206, 207], "regexpars": 10, "setregexpars": 10, "enclos": 10, "treat": [10, 131, 145], "group": [10, 142], "so": [10, 14, 18, 22, 29, 38, 39, 44, 61, 62, 91, 104, 111, 120, 158, 181, 197], "here": [10, 94, 173, 201], "specif": [10, 40, 56, 58, 60, 64, 65, 69, 80, 88, 91, 106, 124, 125, 137, 156, 158, 181, 205], "noun": [10, 188], "success": [10, 66, 76, 125], "grammar": 10, "parser": [10, 56, 58, 88], "perceptronmodel": [10, 56, 58, 88, 105, 117, 187], "Of": [10, 63, 145], "documentassembl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 105, 106, 107, 108, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 148, 149, 157, 158, 159, 160, 181, 187, 197, 201], "sentencedetector": [10, 22, 40, 48, 56, 58, 65, 67, 78, 80, 84, 88, 91, 94, 99, 101, 105, 106, 107, 108, 117, 119, 120, 136, 138, 158, 160, 187, 201, 202], "postag": 10, "11": [10, 55, 83, 84, 96, 98, 101, 117, 192], "21": [10, 96, 98, 107, 117, 192], "35": [10, 117, 192], "39": [10, 107, 117, 190, 192], "52": [10, 107, 117, 190], "58": [10, 52, 117], "albertforquestionansw": 11, "classifi": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 91, 149, 201], "dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 93, 106, 108, 133, 134], "albert": [11, 12, 13, 63], "span": [11, 15, 19, 23, 26, 31, 35, 41, 124, 128], "question": [11, 15, 19, 23, 26, 31, 35, 40, 41, 56, 58, 64, 65, 72, 77, 78, 85, 108, 117, 124, 125, 128, 156], "answer": [11, 15, 19, 23, 26, 31, 35, 40, 41, 56, 58, 59, 64, 65, 72, 85, 108, 124, 125, 128, 156], "squad": [11, 15, 19, 23, 26, 31, 35, 41, 63, 64, 65, 68, 76, 77, 78, 124], "linear": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 52, 125], "layer": [11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 63, 64, 65, 68, 72, 85], "comput": [11, 15, 19, 23, 26, 31, 35, 41, 50, 52, 54, 63, 68, 69, 74, 80, 125, 127, 134, 145, 156, 205], "logit": [11, 12, 14, 15, 16, 18, 19, 20, 23, 26, 27, 29, 31, 32, 35, 36, 38, 41, 42, 44, 45, 111], "spanclassifi": [11, 15, 19, 23, 26, 31, 35, 41], "document_quest": [11, 15, 19, 23, 26, 31, 35, 40, 41], "document_context": [11, 15, 19, 23, 26, 31, 35, 41], "albert_base_qa_squad2": 11, "allow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 52, 53, 72, 80, 105, 106, 109, 119, 120, 124, 141, 142, 158, 167], "faster": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 69, 72, 133, 134], "casesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 83, 84, 85, 95, 100, 133, 136], "ignor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 83, 84, 85, 95, 101, 104, 124, 125, 127, 128, 133, 136, 156], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 58, 59, 60, 62, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 83, 84, 85, 86, 93, 95, 100, 131, 133, 136, 142, 147, 187, 188, 201], "configprotobyt": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 52, 53, 54, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 85, 93, 106, 124, 125, 127, 128, 131], "maxsentencelength": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 63, 64, 65, 66, 68, 69, 70, 71, 74, 75, 76, 77, 78, 81, 83, 84, 85], "128": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 63, 64, 65, 66, 68, 69, 74, 77, 78, 83, 84, 85, 181, 197], "multidocumentassembl": [11, 15, 19, 23, 26, 31, 35, 40, 41, 157], "context": [11, 15, 19, 23, 26, 31, 35, 41, 64, 65, 70, 72, 81, 85, 111, 123, 131, 142], "setcasesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 67, 69, 75, 77, 83, 95, 100, 105, 133, 136, 149, 160], "what": [11, 15, 19, 23, 26, 31, 35, 39, 41, 50, 56, 58, 91, 93, 108, 111, 127, 131, 140, 188, 198], "my": [11, 13, 15, 17, 19, 22, 23, 25, 26, 28, 31, 33, 35, 37, 39, 41, 43, 46, 59, 60, 61, 99, 101, 108, 111, 119, 125, 136, 138, 141, 201], "clara": [11, 15, 19, 23, 26, 31, 35, 41, 108], "live": [11, 13, 15, 17, 19, 23, 25, 26, 28, 31, 33, 35, 37, 41, 43, 46, 108, 125, 181, 197], "berkelei": [11, 15, 19, 23, 26, 31, 35, 41], "albertforsequenceclassif": [12, 24], "regress": [12, 16, 20, 24, 27, 32, 36, 42, 45, 124, 128], "pool": [12, 16, 20, 24, 27, 32, 36, 42, 45, 67, 72, 79], "multi": [12, 16, 20, 22, 24, 27, 32, 34, 36, 39, 42, 45, 63, 80, 83, 84, 91, 93, 127], "sequenceclassifi": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "albert_base_sequence_classifier_imdb": 12, "coalescesent": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 93], "instead": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 65, 91, 93, 96, 98, 128, 149, 150, 156, 205], "per": [12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 45, 46, 71, 83, 84, 93, 96, 101, 103, 104, 105, 106, 111, 145, 156, 173, 184, 187], "inputcol": [12, 14, 16, 18, 20, 22, 24, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 79, 93, 146, 148, 149, 150, 151, 154, 157], "averag": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 67, 71, 74, 79, 83, 84, 93, 106, 117, 129], "calcul": [12, 14, 16, 18, 20, 22, 27, 29, 32, 34, 36, 38, 39, 42, 44, 45, 82, 101, 106, 114, 122, 129], "softmax": [12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45, 68, 70, 81, 131], "sigmoid": [12, 14, 16, 18, 20, 27, 29, 32, 36, 38, 42, 44, 45], "love": [12, 14, 16, 18, 22, 24, 27, 29, 32, 36, 38, 42, 44, 45, 65, 78, 84, 120, 123, 201], "movi": [12, 14, 16, 18, 22, 24, 27, 29, 32, 36, 38, 39, 42, 44, 45, 123, 201], "child": [12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45], "pretti": [12, 14, 16, 18, 24, 27, 29, 32, 34, 36, 38, 42, 44, 45, 91], "bore": [12, 14, 16, 18, 24, 27, 29, 32, 36, 38, 42, 44, 45], "neg": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 39, 42, 44, 45, 122, 123, 129, 181, 197], "getclass": [12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 27, 28, 29, 32, 33, 36, 37, 38, 42, 43, 44, 45, 46, 50, 52, 54, 108], "setcoalescesent": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 93], "limit": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 50, 52, 54, 61, 63, 66, 75, 76, 82, 85, 91, 128, 133], "almost": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "512": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 40, 42, 44, 45, 61, 71, 72, 76, 127], "help": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 56, 58, 59, 63, 111, 112, 127, 142, 181, 197, 202, 206], "feed": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45], "entir": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 50, 127], "bool": [12, 14, 16, 18, 20, 24, 27, 29, 32, 36, 38, 42, 44, 45, 59, 60, 61, 65, 67, 80, 86, 88, 93, 95, 96, 100, 101, 104, 105, 106, 109, 114, 119, 120, 124, 125, 127, 128, 129, 131, 133, 136, 141, 142, 145, 147, 149, 150, 151, 156, 159, 163, 168, 174, 181, 184, 185, 187], "one": [12, 14, 16, 18, 20, 24, 27, 29, 32, 34, 36, 38, 42, 44, 45, 48, 50, 52, 53, 54, 56, 58, 60, 64, 65, 76, 79, 83, 84, 85, 91, 93, 96, 99, 104, 111, 120, 133, 138, 160, 197, 201], "albertfortokenclassif": [13, 63], "ner": [13, 17, 21, 25, 28, 33, 37, 43, 46, 83, 84, 88, 89, 138, 156, 173, 174, 181, 184, 197], "token_classifi": [13, 21, 33, 37, 43, 46], "albert_base_token_classifier_conll03": 13, "albertembed": [13, 63], "level": [13, 22, 34, 39, 64, 65, 75, 77, 78, 80, 82, 84, 86, 105, 106, 114, 131, 174, 187], "tokenclassifi": [13, 17, 21, 25, 28, 33, 37, 43, 46], "john": [13, 17, 25, 28, 33, 37, 43, 46, 48, 65, 78, 84, 86, 88, 107, 109, 120, 151, 192], "lenon": [13, 17, 25, 28, 33, 37, 43, 46], "born": [13, 17, 25, 28, 33, 37, 43, 46, 125], "london": [13, 17, 25, 28, 33, 37, 43, 46], "pari": [13, 17, 25, 28, 33, 37, 43, 46, 108], "sarah": [13, 17, 25, 28, 33, 37, 43, 46], "o": [13, 17, 21, 25, 28, 33, 37, 43, 46, 104, 105, 106, 107, 156, 173, 184, 187, 191, 207], "bartforzeroshotclassif": 14, "modelforsequenceclassif": [14, 18, 29, 38, 44], "nli": [14, 18, 29, 38, 44], "natur": [14, 18, 29, 38, 39, 44, 54, 63, 64, 65, 66, 68, 69, 70, 76, 80, 81, 85, 93, 124, 125, 128, 147, 157, 160], "equival": [14, 18, 29, 38, 44, 156, 174, 205], "bartforsequenceclassif": 14, "don": [14, 18, 29, 38, 44, 69, 77, 109], "hardcod": [14, 18, 29, 38, 44], "potenti": [14, 18, 29, 38, 44, 52, 131], "thei": [14, 18, 29, 38, 40, 44, 56, 58, 59, 106, 109, 111, 125, 158, 176, 188, 201], "chosen": [14, 18, 29, 38, 44, 56, 58, 106, 111], "runtim": [14, 18, 29, 38, 44], "usual": [14, 18, 29, 38, 44, 54, 160, 185], "slower": [14, 18, 29, 38, 44], "much": [14, 18, 22, 29, 38, 40, 44, 63, 71, 77, 78, 109, 145, 174, 201], "flexibl": [14, 18, 29, 38, 44, 49, 52], "loop": [14, 18, 29, 38, 44], "through": [14, 18, 29, 38, 44, 63, 76, 88, 91, 151, 202], "longer": [14, 18, 29, 38, 44, 63, 70, 75, 81, 93, 127, 206], "pass": [14, 18, 29, 38, 44, 62, 111], "pose": [14, 18, 29, 38, 44], "premis": [14, 18, 29, 38, 44], "hypothesi": [14, 18, 29, 38, 44], "pair": [14, 18, 29, 38, 44, 49, 71, 88, 181], "bart_large_zero_shot_classifier_mnli": 14, "setmaxsentencelength": [14, 37, 38, 44, 70, 81], "bart": [14, 124], "bertforquestionansw": [15, 40], "bert_base_cased_qa_squad2": 15, "questionansw": 15, "bertforsequenceclassif": [16, 18], "bert_base_sequence_classifier_imdb": 16, "bertfortokenclassif": 17, "bert_base_token_classifier_conll03": 17, "bertforzeroshotclassif": 18, "bert_base_cased_zero_shot_classifier_xnli": 18, "camembertforquestionansw": 19, "camembert": [19, 20, 21, 66], "camembert_base_qa_fquad": 19, "fr": [19, 20, 66, 93], "camembertforsequenceclassif": 20, "sequence_classifi": 20, "camembert_base_sequence_classifier_allocin": 20, "j": [20, 86], "ai": [20, 111, 112, 124, 181, 197], "ador\u00e9": 20, "ce": 20, "film": 20, "lorsqu": 20, "\u00e9tai": 20, "enfant": 20, "je": 20, "d\u00e9test": 20, "\u00e7a": 20, "camembertfortokenclassif": 21, "camembert_base_token_classifier_wikin": 21, "georg": 21, "washington": 21, "est": [21, 66, 93, 127], "all\u00e9": 21, "\u00e0": 21, "classifierdl": [22, 201], "classifierdlapproach": [22, 34, 201], "univers": [22, 56, 58, 80, 127], "encod": [22, 53, 60, 64, 65, 68, 74, 75, 80, 108, 124, 127, 181], "deep": [22, 64, 65, 72, 91, 105, 120, 131], "dnn": 22, "insid": [22, 34, 104, 117, 142, 187], "instanti": [22, 34, 39, 56, 58, 62, 70, 81, 82, 86, 94, 95, 99, 100, 105, 106, 109, 117, 120, 122, 123, 129, 131, 133, 134, 138, 140, 145, 187, 188], "classifierdlmodel": [22, 34, 201], "monitor": [22, 34, 39, 106, 111, 112, 181, 197], "metric": [22, 34, 39, 106, 134, 181], "done": [22, 34, 39, 77, 78, 105, 106, 202], "settestdataset": [22, 34, 39, 106, 114], "method": [22, 34, 39, 62, 63, 69, 70, 74, 76, 81, 85, 91, 106, 129, 185, 196], "expect": [22, 34, 39, 71, 85, 106, 142, 173], "path": [22, 34, 39, 56, 58, 70, 81, 82, 86, 88, 94, 95, 99, 100, 105, 106, 108, 109, 114, 120, 122, 125, 131, 133, 134, 137, 142, 154, 156, 172, 181, 184, 187, 188, 190, 191, 197], "parquet": [22, 34, 39, 106, 114, 146], "datafram": [22, 34, 39, 70, 81, 82, 106, 114, 117, 129, 145, 156, 169, 173, 180, 181, 184, 187, 188, 190, 191, 197, 201, 205, 207], "ha": [22, 34, 39, 40, 49, 50, 52, 53, 54, 59, 60, 61, 63, 68, 69, 72, 77, 78, 82, 91, 94, 99, 106, 114, 120, 122, 124, 128, 133, 134, 145, 146, 147, 154, 156, 181, 185, 190, 197, 201, 202], "same": [22, 34, 39, 48, 63, 76, 77, 82, 83, 86, 88, 106, 111, 114, 128, 129, 158, 181, 202], "follow": [22, 34, 39, 48, 55, 60, 72, 75, 82, 91, 96, 98, 99, 104, 106, 109, 119, 143, 159, 197, 199, 202], "universalsentenceencod": [22, 34, 39, 80, 181, 197, 201], "preprocessingpipelin": [22, 34, 39, 106, 114], "randomsplit": [22, 34, 39, 106, 114], "write": [22, 34, 39, 82, 106, 114, 133, 134, 202], "overwrit": [22, 34, 39, 106, 107, 114, 181], "test_data": [22, 34, 39, 106, 114], "setlabelcolumn": [22, 34, 39, 103, 105, 106, 113, 137, 181, 197, 201], "usag": [22, 34, 39, 48, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 72, 77, 80, 82, 83, 85, 86, 91, 93, 94, 96, 98, 99, 100, 105, 106, 109, 117, 119, 120, 122, 123, 124, 127, 128, 129, 131, 133, 135, 136, 140, 142, 145], "64": [22, 34, 39, 63, 106, 113, 201], "dropout": [22, 39, 106], "coeffici": [22, 39, 105, 106], "enableoutputlog": [22, 34, 39, 106], "stdout": [22, 34, 39, 106, 114], "addit": [22, 34, 39, 56, 58, 62, 64, 65, 86, 105, 106, 111, 114, 119, 125, 142, 181, 200, 201], "evaluationlogextend": [22, 34, 39, 106], "valid": [22, 34, 39, 96, 106, 114, 120, 131, 197], "displai": [22, 34, 39, 114, 125, 181, 197], "time": [22, 34, 39, 63, 70, 81, 83, 84, 91, 96, 114, 123, 131, 145, 174, 200, 201, 205, 206], "labelcolumn": [22, 34, 39, 105, 106], "lr": [22, 34, 39, 106, 145], "rate": [22, 34, 39, 55, 70, 77, 78, 81, 82, 106, 113, 129, 131], "005": [22, 39, 106, 113], "maxepoch": [22, 34, 39, 105, 106], "epoch": [22, 34, 39, 103, 105, 106, 113, 114, 120, 131, 181], "30": [22, 39, 91, 96, 98, 104, 113, 127, 156, 173, 184, 192, 200], "outputlogspath": [22, 34, 39, 106, 120], "randomse": [22, 34, 39, 105, 106], "random": [22, 34, 39, 70, 81, 103, 105, 106, 111, 113, 127, 129, 149], "seed": [22, 34, 39, 70, 81, 103, 105, 106, 113, 127], "shuffl": [22, 34, 103, 113, 124], "testdataset": [22, 34, 39, 106, 181, 197], "statist": [22, 34, 39, 82, 91, 106, 114], "validationsplit": [22, 34, 39, 106, 120], "choos": [22, 34, 39, 67, 79, 106, 111, 120, 133], "proport": [22, 34, 39, 106, 114, 120], "against": [22, 34, 39, 86, 91, 95, 100, 106, 114, 120, 158], "between": [22, 34, 39, 52, 56, 58, 59, 61, 76, 77, 78, 80, 83, 84, 85, 88, 106, 111, 114, 119, 120, 131], "off": [22, 34, 39, 80, 83, 84, 106, 114, 120], "verbos": [22, 34, 39, 105, 106, 114], "multiclassifierdlapproach": [22, 34, 181, 197], "sentimentdlapproach": [22, 34, 39], "accept": [22, 34, 39, 111], "singl": [22, 34, 39, 62, 71, 74, 82, 88, 91, 124, 138, 140, 142, 187], "item": [22, 39, 82, 111, 181, 187, 197], "doubl": [22, 39, 146, 159], "sentenceembed": [22, 34, 39, 79, 82, 149], "In": [22, 34, 39, 50, 54, 61, 66, 68, 69, 75, 76, 82, 85, 86, 91, 93, 94, 95, 99, 100, 119, 120, 122, 124, 125, 128, 133, 134, 145, 181, 190, 197, 201, 202, 206, 207], "csv": [22, 39, 86, 114, 159, 201], "best": [22, 39, 63, 66, 71, 74, 77, 78, 91, 93, 106, 111, 124, 201], "wach": [22, 201], "ever": [22, 39, 60, 201], "opinion": [22, 39, 201], "win": [22, 39, 201], "award": [22, 39, 201], "terribl": [22, 39, 201], "act": [22, 39, 201], "bad": [22, 39, 122, 181, 197, 201], "realli": [22, 39, 111, 123, 201], "trane": 22, "smallcorpu": [22, 39, 201], "read": [22, 39, 49, 50, 52, 53, 54, 56, 58, 70, 81, 91, 94, 95, 96, 98, 99, 100, 105, 108, 109, 114, 120, 122, 125, 131, 133, 134, 142, 145, 146, 148, 154, 157, 169, 172, 174, 175, 181, 185, 187, 188, 190, 191, 197, 201, 207], "header": [22, 39, 40, 159, 201], "src": [22, 39, 49, 50, 52, 53, 54, 56, 58, 82, 94, 95, 99, 100, 105, 106, 117, 133, 134, 138, 145, 187, 188, 190, 191, 192, 201, 207], "useembed": [22, 34, 39, 80, 201], "docclassifi": [22, 34, 39, 201], "setbatchs": [22, 34, 39, 72, 106, 113, 131, 181, 197, 201], "setmaxepoch": [22, 34, 39, 103, 105, 106, 113, 181, 197, 201], "20": [22, 40, 50, 59, 85, 104, 124, 125, 156, 159, 173, 184, 201], "setlr": [22, 34, 39, 106, 113, 181, 197, 201], "5e": [22, 39, 201], "setdropout": [22, 39, 106, 201], "pipelinemodel": [22, 34, 39, 56, 58, 60, 70, 81, 105, 106, 123, 131, 133, 134, 145, 156, 158, 181, 185, 201, 204], "v": [22, 34, 39, 55, 68, 76, 82, 91, 93, 95, 106, 113, 114, 134, 173], "classifierdl_use_trec6": [22, 201], "trec": 22, "multiclassifierdlmodel": [22, 34], "sentimentdlmodel": [22, 34, 39], "sarcasmdl": [22, 201], "classifierdl_use_sarcasm": [22, 201], "sarcasm": [22, 201], "m": [22, 61, 96, 98, 192, 201], "could": [22, 69, 91, 99, 114, 131, 200, 201, 202], "put": [22, 173, 201], "word": [22, 52, 54, 56, 58, 63, 67, 68, 70, 72, 77, 79, 80, 81, 82, 85, 86, 88, 91, 94, 101, 104, 107, 108, 109, 117, 122, 124, 125, 127, 128, 131, 133, 134, 135, 136, 140, 142, 144, 145, 156, 173, 184, 190, 191, 200, 201], "wake": [22, 201], "am": [22, 59, 96, 98, 125, 138, 201], "mondai": [22, 201], "would": [22, 48, 59, 67, 79, 96, 120, 174, 201], "arrays_zip": [22, 56, 58, 91, 201], "out": [22, 71, 91, 94, 109, 124, 125, 127, 128, 135, 136, 201], "normal": [22, 50, 52, 53, 54, 60, 89, 95, 120, 123, 136, 149, 158, 160, 174, 201, 202], "debertaforquestionansw": 23, "deberta": [23, 24, 25, 68], "deberta_v3_xsmall_qa_squad2": 23, "debertaforsequenceclassif": 24, "v2": [24, 25, 64, 65, 68], "v3": [24, 25], "deberta_v3_xsmall_sequence_classifier_imdb": 24, "deberta_base_sequence_classifier_imdb": 24, "debertafortokenclassif": 25, "deberta_v3_xsmall_token_classifier_conll03": 25, "distilbertforquestionansw": 26, "distilbert": [26, 27, 29, 69], "distilbert_base_cased_qa_squad2": 26, "distilbertforsequenceclassif": [27, 29], "distilbert_base_sequence_classifier_imdb": 27, "distilbertfortokenclassif": 28, "distilbert_base_token_classifier_conll03": 28, "distilbertforzeroshotclassif": 29, "distilbert_base_zero_shot_classifier_uncased_mnli": 29, "albert_for_sequence_classif": [30, 89], "albert_for_token_classif": [30, 89], "bart_for_zero_shot_classif": [30, 89], "bert_for_sequence_classif": [30, 89], "bert_for_token_classif": [30, 89], "bert_for_zero_shot_classif": [30, 89], "camembert_for_sequence_classif": [30, 89], "camembert_for_token_classif": [30, 89], "deberta_for_sequence_classif": [30, 89], "deberta_for_token_classif": [30, 89], "distil_bert_for_sequence_classif": [30, 89], "distil_bert_for_token_classif": [30, 89], "distil_bert_for_zero_shot_classif": [30, 89], "longformer_for_sequence_classif": [30, 89], "longformer_for_token_classif": [30, 89], "multi_classifier_dl": [30, 89], "roberta_for_sequence_classif": [30, 89], "roberta_for_token_classif": [30, 89], "roberta_for_zero_shot_classif": [30, 89], "sentiment_dl": [30, 89], "xlm_roberta_for_sequence_classif": [30, 89], "xlm_roberta_for_token_classif": [30, 89], "xlm_roberta_for_zero_shot_classif": [30, 89], "xlnet_for_sequence_classif": [30, 89], "xlnet_for_token_classif": [30, 89], "longformerforquestionansw": 31, "longform": [31, 32, 33, 75], "longformer_base_base_qa_squad2": 31, "longformerforsequenceclassif": 32, "longformer_base_sequence_classifier_imdb": 32, "4096": [32, 63, 75], "longformerfortokenclassif": 33, "xlnet_base_token_classifier_conll03": [33, 46], "longformer_base_token_classifier_conll03": 33, "multiclassifierdl": 34, "bidirect": [34, 64, 65, 72, 85, 124], "gru": 34, "convolut": [34, 50, 54], "machin": [34, 50, 59, 61, 70, 81, 91, 105, 124, 125, 127, 128, 181, 199], "strongli": 34, "relat": [34, 56, 58, 88, 206], "variant": [34, 55, 75, 80], "mai": [34, 61, 62, 111, 147, 200, 201, 202, 205, 206], "instanc": [34, 62, 108, 113, 114, 163, 168, 174, 175, 179], "multiclass": 34, "categor": [34, 185], "precis": [34, 56, 58, 61], "constraint": 34, "mani": [34, 62, 68, 77, 78, 91, 111, 124, 125, 127, 128, 145], "formal": 34, "find": [34, 56, 58, 77, 78, 80, 86, 88, 94, 96, 124, 125], "binari": [34, 154, 169, 181], "bertsentenceembed": [34, 39, 65, 78, 84], "multiclassifi": [34, 181, 197], "001": [34, 55, 105, 106], "10": [34, 48, 56, 91, 96, 98, 107, 111, 129, 133, 181, 192, 200], "44": [34, 70, 81, 117], "shuffleperepoch": 34, "threshold": [34, 39, 70, 81, 91, 93, 105, 108, 131, 145], "ed58abb40640f983": 34, "pn": 34, "newsyou": 34, "toxic": 34, "a1237f726b5f5d89": 34, "dude": 34, "place": [34, 54, 62], "obscen": 34, "insult": 34, "24b0d6c8733c2abe": 34, "thank": [34, 85, 91, 192], "8c4478fb239bcfc0": 34, "gee": 34, "minut": 34, "traindataset": [34, 181, 197], "printschema": [34, 146, 148, 154, 157], "root": [34, 48, 56, 58, 88, 146, 148, 154, 157, 188], "setcleanupmod": [34, 148, 157], "shrink": [34, 148, 157], "1e": [34, 181, 197], "setthreshold": [34, 39, 91, 93, 181, 197], "setvalidationsplit": [34, 114, 120], "setverbos": [34, 105, 106, 114], "multiclassifierdl_use_tox": 34, "comment": [34, 91], "jigsaw": 34, "good": [34, 66, 69, 80, 123], "stuff": 34, "wtf": 34, "kind": [34, 91, 96, 98], "crap": 34, "robertaforquestionansw": [35, 108], "roberta": [35, 36, 37, 38, 41, 42, 43, 53, 66, 68, 75, 76, 77, 78, 83, 84, 108, 124], "roberta_base_qa_squad2": [35, 108], "robertaforsequenceclassif": [36, 38], "roberta_base_sequence_classifier_imdb": 36, "robertafortokenclassif": 37, "roberta_base_token_classifier_conll03": 37, "robertaforzeroshotclassif": 38, "roberta_base_zero_shot_classifier_nli": 38, "sentimentdl": 39, "affect": [39, 142], "subject": [39, 56, 58], "view": 39, "common": [39, 86, 138, 147, 174, 204], "product": 39, "review": [39, 111, 177], "tweet": 39, "interpret": [39, 59, 86], "posit": [39, 68, 69, 76, 83, 84, 85, 91, 104, 111, 122, 123, 129, 141, 145, 160, 181, 197], "final": [39, 59, 75, 77, 78, 83, 84, 93, 106, 131, 201], "otheriws": [39, 93], "neutral": [39, 93], "thresholdlabel": [39, 93], "score": [39, 64, 65, 83, 84, 91, 93, 105, 106, 108, 122, 123, 125], "less": [39, 69, 93, 96, 101, 105, 127, 133], "watch": [39, 123], "32": [39, 63, 72, 192, 200, 206], "setthresholdlabel": [39, 93], "p": [39, 60, 70, 81, 93, 106, 114, 140], "sentimentdl_use_imdb": 39, "imdb": 39, "sentimentdl_use_twitt": 39, "wow": 39, "video": [39, 91], "awesom": 39, "bruh": 39, "damn": 39, "wast": [39, 123], "tapasforquestionansw": 40, "implement": [40, 62, 70, 81, 83, 108, 112, 120, 129, 131, 152, 153, 161, 162, 170, 176, 180], "tapa": 40, "design": [40, 50, 52, 55, 64, 65, 77, 78, 95, 124, 127, 181, 197], "about": [40, 56, 58, 77, 78, 82, 91, 108, 111, 119, 134, 156, 158, 200, 202, 205, 206], "tabular": [40, 159], "tabl": [40, 129, 159], "tri": 40, "share": [40, 91, 202], "its": [40, 54, 68, 69, 75, 85, 91, 117, 122, 124, 127, 136, 181, 190], "table_qa_tapas_base_finetuned_wtq": 40, "document_assembl": [40, 108, 129, 155, 159, 174], "table_json": 40, "document_t": [40, 159], "sentence_detector": [40, 89, 108, 118], "table_assembl": [40, 155, 174], "tableassembl": [40, 159], "stage": [40, 129, 156, 158, 181, 197, 201, 202, 205], "json_data": 40, "monei": [40, 159], "ag": [40, 71, 159], "donald": [40, 159], "trump": [40, 159], "75": [40, 91, 159], "elon": [40, 159], "musk": [40, 159], "55": [40, 107, 159, 192], "AS": [40, 48, 108], "who": [40, 59, 61, 140, 201], "earn": 40, "count": [40, 111, 131], "old": [40, 48, 190], "xlmrobertaforquestionansw": 41, "xlm": [41, 42, 43, 83, 84], "xlm_roberta_base_qa_squad2": 41, "xlmrobertaforsequenceclassif": [42, 44], "xlm_roberta_base_sequence_classifier_imdb": 42, "xlmrobertafortokenclassif": 43, "xlm_roberta_base_token_classifier_conll03": 43, "xlmrobertaforzeroshotclassif": 44, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 44, "xlmroberta": 44, "xlnetforsequenceclassif": 45, "xlnet": [45, 46, 76, 85], "xlnet_base_sequence_classifier_imdb": 45, "xlnetfortokenclassif": 46, "spanbert_coref": 47, "spanbertcorefmodel": 48, "corefer": 48, "resolut": [48, 52], "spanbert": 48, "identifi": [48, 82, 91, 95, 99, 111, 112, 141, 142, 181, 202], "given": [48, 50, 52, 53, 54, 59, 61, 74, 86, 91, 108, 124, 125, 128, 131, 133, 134, 136, 167, 180, 181], "told": [48, 98], "mari": [48, 65, 78, 84, 120], "he": [48, 59, 61, 68, 98, 140, 192], "borrow": 48, "book": [48, 60, 125, 131, 188], "her": [48, 108], "link": [48, 184], "ontonot": 48, "corefresolut": 48, "spanbert_base_coref": 48, "maxsegmentlength": 48, "textgenr": 48, "genr": 48, "One": [48, 74, 91, 140, 143], "bc": 48, "broadcast": 48, "convers": 48, "bn": 48, "nw": 48, "wire": 48, "pt": 48, "pivot": 48, "testament": 48, "tc": 48, "telephon": 48, "wb": 48, "setmaxsegmentlength": 48, "settextgenr": 48, "clipforzeroshotclassif": 49, "clip": 49, "contrast": [49, 71, 74, 75, 95, 128], "neural": [49, 54, 64, 65, 68, 106, 120, 124, 127], "network": [49, 54, 64, 65, 72, 106, 120], "abil": [49, 91, 124, 125], "hard": [49, 135], "veri": [49, 53, 54, 59, 66, 72, 83, 84, 85, 124, 125, 127, 128, 156, 200, 202, 205, 206], "similar": [49, 63, 74, 80, 91, 93], "gpt": [49, 77, 111, 124, 125], "imageclassifi": [49, 50, 52, 53, 54], "image_assembl": [49, 50, 52, 53, 54, 155, 174], "zero_shot_classifier_clip_vit_base_patch32": 49, "huggingfac": [49, 50, 52, 53, 54, 66], "clipforzeroshotclassificationtestspec": 49, "candidatelabel": 49, "imagedf": [49, 50, 52, 53, 54], "dropinvalid": [49, 50, 52, 53, 54], "imageassembl": [49, 50, 52, 53, 54, 154], "photo": 49, "bird": [49, 53], "cat": [49, 50, 52, 53, 54], "dog": [49, 53], "hen": [49, 50, 52, 53, 54], "hippo": [49, 50, 52, 54], "room": [49, 53], "tractor": [49, 50, 52, 53, 54], "ostrich": [49, 50, 52, 53, 54], "ox": [49, 50, 52, 53, 54], "setcandidatelabel": 49, "pipelinedf": [49, 50, 52, 53, 54], "revers": [49, 50, 52, 53, 54], "split": [49, 50, 52, 53, 54, 59, 61, 119, 120, 127, 138, 140, 141, 145], "image_nam": [49, 50, 52, 53, 54], "palac": [49, 50, 52, 53, 54], "jpeg": [49, 50, 52, 53, 54], "egyptian_cat": [49, 50, 52, 53, 54], "hippopotamu": [49, 50, 52, 53, 54], "junco": [49, 50, 52, 53, 54], "bluetick": [49, 50, 52, 53, 54], "jpg": [49, 50, 52, 53, 54], "chihuahua": [49, 50, 52, 53, 54], "getcandidatelabel": 49, "image_classifier_vit_base_patch16_224": [49, 54], "convnextforimageclassif": 50, "convnet": 50, "convnext": 50, "2020": [50, 91, 96, 98, 120], "zhuang": 50, "liu": [50, 52, 68, 77, 78], "hanzi": 50, "mao": 50, "chao": 50, "yuan": 50, "wu": 50, "christoph": 50, "feichtenhof": 50, "trevor": 50, "darrel": 50, "sain": 50, "xie": 50, "pure": [50, 54, 127], "inspir": [50, 123, 133, 134, 177], "vision": [50, 52, 53, 54], "claim": 50, "outperform": [50, 71, 75, 76, 80, 83, 84, 85, 91, 125], "convnextforimageclassificationtestspec": 50, "roar": 50, "visual": [50, 52, 181], "began": 50, "introduct": 50, "vit": [50, 53, 54], "quickli": [50, 111], "supersed": 50, "vanilla": 50, "hand": [50, 140], "face": 50, "difficulti": 50, "detect": [50, 52, 80, 92, 93, 111, 112, 118, 119, 120], "semant": [50, 52, 72, 74, 80, 129, 145], "hierarch": [50, 52, 70, 81], "swin": [50, 52], "reintroduc": 50, "sever": [50, 207], "practic": [50, 66, 124, 128], "viabl": 50, "backbon": [50, 52, 85], "demonstr": [50, 52, 69, 75, 91, 125, 127], "remark": 50, "wide": [50, 60, 64, 65, 68, 69, 71, 83, 84, 124], "varieti": [50, 75, 76, 83, 84, 206], "howev": [50, 63, 76, 79, 85, 91, 109, 185, 200], "effect": [50, 52, 53, 54, 75, 111, 119, 124, 128], "hybrid": 50, "still": [50, 125, 181], "credit": 50, "superior": 50, "inher": 50, "induct": [50, 69], "bias": [50, 69], "reexamin": 50, "space": [50, 70, 81, 82, 101, 129, 160], "achiev": [50, 68, 71, 74, 75, 76, 77, 78, 83, 84, 85, 106, 124, 125, 127, 128, 156, 205], "gradual": 50, "modern": 50, "resnet": 50, "toward": [50, 125], "discov": [50, 198], "compon": [50, 54, 113, 114, 146, 154, 163, 168, 179, 205], "contribut": 50, "along": [50, 88], "wai": [50, 56, 58, 86, 88, 158, 184], "outcom": 50, "explor": [50, 124, 128], "famili": [50, 60, 71], "dub": [50, 83, 84], "construct": [50, 62, 70, 81, 142, 184, 204], "compet": 50, "favor": 50, "term": [50, 91], "scalabl": 50, "87": [50, 52], "imagenet": [50, 52, 54], "coco": [50, 52], "ade20k": [50, 52], "while": [50, 52, 54, 63, 69, 74, 82, 91, 111, 114, 125, 181, 197, 202], "maintain": 50, "simplic": [50, 124], "effici": [50, 52, 68, 70, 80, 81, 127, 200], "dores": [50, 52, 53, 54], "resiz": [50, 52, 53, 54], "certain": [50, 52, 53, 54, 131], "donorm": [50, 52, 53, 54], "deviat": [50, 52, 53, 54], "featureextractortyp": [50, 52, 53, 54], "architectur": [50, 52, 53, 54, 63, 64, 65, 68, 77, 93, 106, 120, 124, 128], "featur": [50, 52, 53, 54, 56, 70, 81, 91, 101, 105, 114, 129, 181, 204], "imagemean": [50, 52, 53, 54], "imagestd": [50, 52, 53, 54], "resampl": [50, 52, 53, 54], "pil": [50, 52, 53, 54], "nearest": [50, 52, 53, 54, 129], "bilinear": [50, 52, 53, 54], "bicub": [50, 52, 53, 54], "do_res": [50, 52, 53, 54], "tupl": [50, 52, 53, 54, 180], "dorescal": [50, 52, 53], "rescal": [50, 52, 53], "rescalefactor": [50, 52, 53], "factor": [50, 52, 53, 83, 84, 85, 124, 128, 131], "croppct": 50, "percentag": [50, 82, 131, 145], "crop": 50, "tabbi": [50, 52], "river": [50, 52, 54], "hors": [50, 52, 54], "amphibiu": [50, 52, 54], "snowbird": [50, 52, 54], "struthio": [50, 52, 54], "camelu": [50, 52, 54], "thresher": 50, "thrasher": 50, "thresh": 50, "setdorescal": 50, "boolean": 50, "setrescalefactor": 50, "255": 50, "setcroppct": 50, "determin": [50, 62, 83], "smaller": [50, 61, 69, 70, 81], "224": 50, "256": 50, "specifi": [50, 62, 107, 108, 111, 120, 187, 188], "edg": [50, 69, 88], "afterward": 50, "image_classifier_convnext_tiny_224_loc": 50, "clip_for_zero_shot_classif": 51, "convnext_for_image_classif": 51, "swin_for_image_classif": 51, "vision_encoder_decoder_for_image_capt": 51, "vit_for_image_classif": 51, "swinforimageclassif": 52, "swinimageclassif": 52, "shift": 52, "window": [52, 53, 70, 75, 81, 91, 106, 131], "ze": 52, "yutong": 52, "lin": 52, "yue": 52, "cao": 52, "han": 52, "hu": 52, "yixuan": 52, "zheng": 52, "zhang": 52, "stephen": 52, "bain": 52, "guo": 52, "whose": [52, 62], "scheme": [52, 77, 124], "bring": [52, 201], "greater": [52, 91, 111], "attent": [52, 54, 68, 75, 111], "non": [52, 142, 145], "overlap": [52, 59, 61, 95, 100], "cross": [52, 83, 84, 107], "connect": 52, "image_classifier_swin_base_patch4_window7_224": 52, "swinforimageclassificationtest": 52, "present": [52, 63, 71, 72, 75, 77, 78, 80, 83, 84, 88, 111, 114, 120, 124, 127, 129], "call": [52, 62, 64, 65, 69, 71, 91, 111, 125, 180, 185, 187, 201, 207], "purpos": [52, 69, 71, 120], "adapt": 52, "aris": 52, "domain": [52, 74, 91, 125], "variat": 52, "high": [52, 80, 83, 84, 124, 127], "variou": [52, 85, 195], "complex": [52, 72, 80, 91, 133, 134], "respect": [52, 62, 68, 82, 105, 106, 190], "These": [52, 63, 77, 78, 85, 91, 105, 125, 184, 199], "broad": [52, 59, 125], "rang": [52, 64, 65, 68, 69, 71, 74, 83, 84, 124], "1k": 52, "dens": [52, 64, 65, 129], "box": 52, "ap": 52, "51": [52, 148, 157, 190], "53": [52, 95, 100], "miou": 52, "val": 52, "Its": [52, 58, 108, 124], "surpass": [52, 68], "previou": [52, 74, 76, 83, 84, 125, 201], "margin": [52, 76, 85], "prove": 52, "benefici": [52, 91], "mlp": 52, "visionencoderdecoderforimagecapt": 53, "visionencoderdecod": 53, "caption": 53, "auto": [53, 124, 137], "beit": 53, "deit": 53, "gpt2": [53, 125], "image_captioning_vit_gpt2": 53, "visionencoderdecodertestspec": 53, "nreturnsequ": 53, "computation": [53, 72, 77, 78, 85, 124, 125, 127, 128], "expens": [53, 72, 77, 78, 85, 122, 124, 125, 127, 128, 133], "especi": [53, 124, 125, 127, 128], "larger": [53, 66, 69, 77, 78, 124, 125, 127, 128, 129], "acceler": [53, 72, 85, 124, 125, 127, 128, 174], "gpu": [53, 63, 124, 125, 127, 128, 174], "imagecapt": 53, "setbeams": [53, 124, 168], "setdosampl": [53, 124, 125, 127, 128, 168], "fill": [53, 124], "furnitur": 53, "lai": 53, "couch": 53, "anoth": [53, 202], "brown": 53, "bear": 53, "bodi": 53, "water": 53, "flock": 53, "chicken": 53, "stand": [53, 64, 65], "lush": 53, "green": 53, "field": [53, 70, 81, 82, 86, 100], "small": [53, 54, 60, 63, 66, 69, 70, 81, 94, 117, 156, 190, 205], "wet": 53, "ground": 53, "wooden": 53, "floor": 53, "wear": 53, "blue": 53, "sweater": 53, "man": [53, 125], "cow": 53, "vitforimageclassif": 54, "altern": [54, 91, 111, 122, 131, 133, 134, 156, 159, 201, 206], "vitimageclassificationtestspec": 54, "becom": [54, 63, 69, 91], "de": [54, 66, 91, 93, 127], "facto": [54, 91], "remain": [54, 60, 63, 69, 91], "conjunct": 54, "replac": [54, 60, 68, 75, 93, 94, 107, 120, 124, 133, 134, 167, 201], "overal": [54, 82, 85], "structur": [54, 108, 160, 200], "relianc": 54, "cnn": [54, 93, 106, 120], "necessari": [54, 62, 69, 197, 204], "directli": [54, 156, 181, 185, 197], "patch": 54, "mid": 54, "cifar": 54, "vtab": 54, "etc": [54, 67, 71, 74, 76, 149, 160, 197], "attain": 54, "excel": [54, 85], "substanti": [54, 64, 65], "fewer": [54, 63, 74, 129], "worth": 54, "16x16": 54, "egyptian": 54, "date2chunk": 55, "datematch": [55, 96], "multidatematch": [55, 96, 98], "entitynam": 55, "date_chunk": 55, "omicron": 55, "covid": 55, "world": [55, 59, 60, 61, 138, 181, 192, 197], "health": 55, "organ": [55, 91, 127], "nov": [55, 96, 98, 190], "26": [55, 104, 156, 173, 184, 192], "2021": [55, 96, 98], "118": [55, 159], "121": 55, "01": [55, 96, 98, 99], "setentitynam": 55, "dependencypars": [56, 58, 88], "dependencyparserapproach": [56, 188, 207], "unlabel": [56, 64, 65, 124, 125, 128], "grammat": [56, 58], "dependencyparsermodel": [56, 58, 88], "relationship": [56, 58, 80, 88], "tell": [56, 58, 91, 173], "verb": [56, 58, 188], "modifi": [56, 58, 77, 78, 104, 111, 120], "describ": [56, 58, 88, 91, 127], "particular": [56, 58, 91, 185, 201], "treebank": 56, "penn": 56, "setdependencytreebank": 56, "conll": [56, 58, 105, 106, 174, 188, 189, 204], "u": [56, 58, 68, 69, 91, 98, 104, 105, 106, 156, 173, 184, 188, 199, 202, 207], "setconllu": [56, 58], "dependencytreebank": 56, "conllu": [56, 58, 94, 174, 189, 204], "numberofiter": [56, 58], "converg": [56, 58, 117, 145], "better": [56, 58, 63, 68, 76, 85, 91, 105, 117, 119, 120, 123, 124, 145], "typeddependencyparserapproach": [56, 58], "postagg": [56, 58, 88, 105, 117], "dependency_treebank": 56, "emptydataset": [56, 58], "tree": [56, 88], "bank": 56, "setnumberofiter": [56, 58], "read_a": [56, 58, 86, 94, 95, 99, 100, 105, 109, 114, 122, 133, 134, 142, 166, 172, 174, 187, 188], "reada": [56, 58, 82, 86, 94, 95, 99, 100, 105, 109, 114, 122, 133, 134, 138, 142, 169, 172, 187, 188], "dep": 56, "dependency_conllu": [56, 88], "perceptron": [56, 89, 116], "typeddependencyparsermdoel": 56, "union": [56, 58], "worker": [56, 58], "turner": [56, 58], "newal": [56, 58], "sai": [56, 58, 91, 142], "disappoint": [56, 58], "talk": [56, 58, 111], "stricken": [56, 58], "parent": [56, 58], "firm": [56, 58], "feder": [56, 58], "mogul": [56, 58], "dependency_pars": [57, 89, 185, 206], "typed_dependency_pars": [57, 89], "typeddependencypars": [58, 88], "conll2009": 58, "typeddependencyparsermodel": [58, 88], "beforehand": 58, "2009": 58, "setconll2009": 58, "dependency_typ": [58, 88], "train_smal": 58, "txt": [58, 70, 81, 82, 94, 95, 99, 100, 117, 120, 122, 131, 133, 134, 138, 142, 190, 191, 207], "typdep": 58, "dependency_typed_conllu": [58, 88], "amod": 58, "flat": [58, 88, 151], "nsubj": [58, 88, 151, 188], "parataxi": 58, "documentnorm": [59, 60, 61], "documentcharactertextsplitt": 59, "roughli": 59, "separ": [59, 61, 69, 77, 99, 101, 119, 120, 133, 142, 145, 150, 173, 187, 199], "subtext": 59, "perfect": [59, 61], "reason": [59, 61, 111], "observ": [59, 61, 80], "seen": [59, 61, 124], "addition": [59, 61, 85, 106, 117, 148, 157, 184], "custom": [59, 82, 105, 106, 119, 120, 142, 174, 181], "setsplitpattern": [59, 142], "regex": [59, 60, 86, 96, 99, 109, 131, 133, 134, 141, 142, 145], "setpatternsareregex": 59, "setkeepsepar": 59, "trim": [59, 61], "whitespac": [59, 61, 141, 145, 147], "settrimwhitespac": [59, 61, 141], "individu": [59, 61, 62, 91, 131], "setexplodesplit": [59, 61], "documentcharactertextsplittertest": 59, "chunksiz": 59, "chunkoverlap": 59, "splitpattern": [59, 142], "decreas": [59, 111, 129], "prioriti": [59, 133, 142], "patternsareregex": 59, "keepsepar": 59, "explodesplit": [59, 61], "trimwhitespac": [59, 61, 141], "brioni": 59, "lodg": 59, "serpentin": 59, "aven": 59, "19798": 59, "39395": 59, "19597": 59, "did": [59, 91], "woman": 59, "think": 59, "39371": 59, "59242": 59, "19871": 59, "But": [59, 61, 71], "said": [59, 61], "million": [59, 91, 107, 125], "red": 59, "men": 59, "59166": 59, "77833": 59, "18667": 59, "friend": 59, "enthusiast": 59, "musician": 59, "being": [59, 69, 106, 111, 114, 124, 127, 128, 129], "himself": 59, "capab": 59, "77835": 59, "97769": 59, "19934": 59, "And": 59, "yet": [59, 185], "convinc": 59, "come": [59, 91, 104, 111], "li": 59, "97771": 59, "117248": 59, "19477": 59, "she": [59, 140], "had": [59, 91, 111], "slate": 59, "colour": 59, "brim": 59, "straw": 59, "hat": 59, "feather": 59, "117250": 59, "137242": 59, "19992": 59, "That": [59, 91, 140, 181, 197, 202], "littl": [59, 120, 206], "paradox": 59, "profoundli": 59, "singulari": 59, "137244": 59, "157171": 59, "19927": 59, "setchunks": 59, "setchunkoverlap": 59, "raw": [60, 125, 140, 142, 145, 200, 202], "scrape": 60, "xml": 60, "remov": [60, 77, 78, 109, 123, 141, 149, 150, 151], "dirti": [60, 109], "want": [60, 61, 86, 107, 185, 202], "polici": 60, "__": [60, 124, 149, 150], "action": 60, "clean": [60, 109, 124, 128, 160, 202], "lowercas": [60, 109, 141, 145, 147], "pretty_al": 60, "utf": 60, "cleanuppattern": [60, 109], "normalizeddocu": 60, "setact": 60, "setpattern": [60, 141, 145], "setreplac": 60, "setpolici": 60, "setlowercas": [60, 109, 147, 160], "div": 60, "theworldsgreatest": 60, "right": [60, 64, 65, 124, 145], "hide": 60, "toptext": 60, "style": [60, 93, 128], "font": 60, "sego": 60, "ui": 60, "arial": 60, "san": [60, 91], "serif": 60, "largest": [60, 91, 125], "develop": [60, 91, 127, 178], "site": [60, 91], "h1": 60, "300": 60, "160": 60, "lorem": [60, 95, 100], "ipsum": [60, 95, 100], "print": [60, 62, 174, 185], "typeset": 60, "industri": 60, "been": [60, 66, 125, 143, 160, 185], "1500": 60, "unknown": [60, 61, 93], "printer": 60, "took": 60, "gallei": 60, "scrambl": 60, "specimen": 60, "surviv": 60, "five": [60, 107], "centuri": [60, 145], "leap": 60, "electron": 60, "essenti": [60, 125], "unchang": 60, "popularis": 60, "1960": 60, "letraset": 60, "passag": [60, 71], "recent": [60, 64, 65, 68, 77, 78, 91, 111, 124], "desktop": 60, "publish": [60, 77, 78], "softwar": 60, "aldu": 60, "pagemak": 60, "setencod": 60, "documenttokensplitt": 61, "measur": [61, 69, 77, 78, 124, 181], "futur": [61, 120, 124, 128], "techniqu": [61, 63, 68, 124, 125, 128, 129], "documenttokensplittertest": 61, "numtoken": 61, "tokenoverlap": 61, "immens": 61, "faculti": 61, "extraordinari": 61, "power": [61, 64, 65, 124, 128], "2950": 61, "5707": 61, "2757": 61, "chang": [61, 62, 74, 177], "cloth": 61, "imagin": 61, "deduc": 61, "As": [61, 63, 64, 65, 69, 71, 91, 111], "5659": 61, "8483": 61, "2824": 61, "quarter": 61, "receiv": [61, 190, 207], "Be": 61, "chamber": 61, "8427": 61, "11241": 61, "2814": 61, "piti": 61, "miss": [61, 96, 98, 147], "client": 61, "never": [61, 123, 201], "mind": 61, "him": [61, 98], "11188": 61, "13970": 61, "2782": 61, "person": [61, 86, 188], "emploi": [61, 85], "me": [61, 98], "wish": 61, "agent": 61, "conf": 61, "13918": 61, "16898": 61, "2980": 61, "letter": [61, 109, 125, 131, 190, 207], "secret": 61, "marriag": 61, "16836": 61, "19744": 61, "2908": 61, "seven": 61, "hundr": [61, 83, 84], "holm": [61, 131], "scribbl": 61, "receipt": 61, "shee": 61, "19683": 61, "22551": 61, "2868": 61, "setnumtoken": 61, "settokenoverlap": 61, "documenttokensplittertestspec": 62, "methodnam": 62, "runtest": 62, "By": [62, 122, 124, 128, 136, 141, 149, 174, 181, 197], "fixtur": 62, "testcas": 62, "subclass": [62, 112, 129, 162, 176, 180], "constructor": 62, "argument": [62, 185], "execut": [62, 129, 156, 201, 205], "author": 62, "deconstruct": 62, "overrid": [62, 180], "setup": 62, "teardown": 62, "__init__": 62, "must": [62, 70, 81, 94, 95, 99, 100, 111, 114, 122, 123, 133, 134, 147, 173, 174, 181, 187], "alwai": [62, 91, 111, 128], "signatur": 62, "attribut": [62, 181], "failureexcept": 62, "except": [62, 66, 101, 106, 142], "rais": [62, 77, 78, 91, 101, 106, 181], "assert": 62, "fail": [62, 147], "deem": 62, "error": [62, 131], "longmessag": 62, "long": [62, 65, 75, 85], "messag": [62, 199], "repr": 62, "failur": 62, "maxdiff": 62, "diff": 62, "difflib": 62, "hook": 62, "exercis": 62, "lite": 63, "googl": [63, 64, 65, 68, 70, 72, 77, 78, 80, 81, 91, 128, 188], "research": [63, 64, 65, 68, 70, 81, 127, 128], "toyota": 63, "technolog": 63, "institut": 63, "chicago": 63, "offici": [63, 91, 104, 105, 106, 156, 173, 184, 198], "tf": [63, 80], "wrapper": [63, 177], "port": 63, "properti": [63, 152, 153, 163, 166, 174], "albert_base_uncas": 63, "albert_bas": 63, "768": [63, 64, 65, 66, 68, 69, 71, 74, 75, 76, 77, 78, 83, 84, 85], "emb": 63, "dim": 63, "12m": 63, "albert_large_uncas": 63, "albert_larg": 63, "1024": [63, 72, 75, 85], "24": [63, 85, 95, 100, 104, 131, 156, 173, 184, 200], "16": [63, 85, 107, 190, 200], "18m": 63, "albert_xlarge_uncas": 63, "albert_xlarg": 63, "2048": 63, "60m": 63, "albert_xxlarge_uncas": 63, "albert_xxlarg": 63, "235m": 63, "sentencepiec": [63, 68, 80], "everi": [63, 64, 65, 66, 68, 69, 71, 74, 75, 76, 77, 78, 83, 84, 85, 106, 123, 127, 131, 148, 157, 158, 202], "dimens": [63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 168], "repeat": [63, 111], "footprint": 63, "cost": [63, 131, 133], "FOR": 63, "http": [63, 66, 68, 70, 72, 74, 80, 81, 111, 124, 145, 198], "tfhub": [63, 72, 80], "q": 63, "increas": [63, 71, 82, 91, 111, 124, 125, 129, 133], "downstream": [63, 66, 68, 72, 74, 75, 85, 124, 125, 128], "some": [63, 65, 83, 91, 106, 120, 125, 158, 181, 192, 200, 201, 205, 206], "point": [63, 64, 65, 119, 120, 148, 157, 187], "harder": 63, "tpu": 63, "consumpt": [63, 80, 82], "speed": [63, 105, 127], "devlin": [63, 77, 78], "et": [63, 77, 78, 93], "al": [63, 77, 78], "2019": [63, 66, 68, 77, 78, 83, 84, 124], "comprehens": [63, 124, 125], "empir": [63, 64, 65, 83, 84, 85], "evid": 63, "lead": [63, 66, 83, 84], "focus": [63, 91, 111], "inter": 63, "coher": [63, 125], "establish": 63, "glue": [63, 64, 65, 69, 76, 77, 78, 83, 84, 124], "race": [63, 68, 77, 78], "embeddingsfinish": [63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 149], "finished_embed": [63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "setoutputasvector": [63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 149], "setcleanannot": [63, 68, 69, 72, 75, 77, 79, 80, 82, 83, 85, 149, 150, 151], "80": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 99, 149, 160], "1342473030090332": [63, 68], "3855540752410889": [63, 68], "9818322062492371": [63, 68], "784737348556518": [63, 68], "847029983997345": [63, 68], "047153353691101": [63, 68], "1520637571811676": [63, 68], "6245765686035156": [63, 68], "009860038757324219": [63, 68], "13450059294700623": [63, 68], "707749128341675": [63, 68], "2916892766952": [63, 68], "04192575812339783": [63, 68], "5764210224151611": [63, 68], "3196685314178467": [63, 68], "527840495109": [63, 68], "15583214163780212": [63, 68], "1614152491092682": [63, 68], "28423872590065": [63, 68], "135491415858268": [63, 68], "bertembed": [64, 67, 74, 79, 106, 149], "small_bert_l2_768": 64, "understand": [64, 65, 69, 76, 83, 85, 91, 124, 128, 145, 200], "introduc": [64, 65, 69, 72, 74, 75, 76, 124, 128], "unlik": [64, 65, 74, 83, 91, 140], "jointli": [64, 65], "condit": [64, 65, 124, 125, 127, 128, 168], "both": [64, 65, 71, 72, 80, 88, 111, 124, 201, 202], "left": [64, 65, 124, 145], "just": [64, 65, 69, 77, 101, 106], "modif": [64, 65], "conceptu": [64, 65], "obtain": [64, 65, 66, 71, 80], "eleven": [64, 65], "push": [64, 65], "absolut": [64, 65], "multinli": [64, 65], "86": [64, 65, 68], "v1": [64, 65], "f1": [64, 65, 83, 84, 106, 125], "93": [64, 65], "83": [64, 65, 68, 190, 191, 207], "small_bert_l2_128": 64, "3497989177703857": [64, 74], "480538547039032": [64, 74], "3238905668258667": [64, 74], "612930893898010": [64, 74], "1357314586639404": 64, "32984697818756104": 64, "6032363176345825": 64, "6791689395904": 64, "8244884014129639": 64, "27088963985443115": 64, "059438943862915": 64, "9817547798156": 64, "1648050546646118": 64, "4725411534309387": 64, "5938255786895752": 64, "5780693292617": 64, "9125322699546814": 64, "4563939869403839": 64, "3975459933280945": 64, "81611204147338": 64, "sentence_bert_embed": 65, "sent_small_bert_l2_768": 65, "islong": 65, "sent_small_bert_l2_128": 65, "orang": [65, 78, 84], "8951074481010437": [65, 78, 84], "13753940165042877": [65, 78, 84], "3108254075050354": [65, 78, 84], "65693199634552": [65, 78, 84], "6180210709571838": [65, 78, 84], "12179657071828842": [65, 78, 84], "191165953874588": [65, 78, 84], "4497021436691": [65, 78, 84], "822715163230896": [65, 78, 84], "7568016648292542": [65, 78, 84], "1165061742067337": [65, 78, 84], "59048593044281": [65, 78, 84], "setislong": 65, "camembertembed": 66, "tasti": 66, "french": [66, 91, 127, 136], "loui": 66, "martin": 66, "muller": 66, "pedro": 66, "javier": 66, "ortiz": 66, "su\u00e1rez": 66, "yoann": 66, "dupont": 66, "laurent": 66, "romari": 66, "\u00e9ric": 66, "villemont": 66, "la": [66, 111, 127], "clergeri": 66, "djam\u00e9": 66, "seddah": 66, "beno\u00eet": 66, "sagot": 66, "facebook": [66, 68, 83, 84, 124], "138gb": 66, "camembert_bas": 66, "camembertembeddingstestspec": 66, "co": [66, 91], "ubiquit": 66, "despit": [66, 124], "concaten": [66, 145], "investig": [66, 69, 80], "feasibl": 66, "monolingu": [66, 83, 84], "crawl": [66, 124, 128], "prefer": [66, 88, 151], "wikipedia": [66, 93, 125], "surprisingli": [66, 80], "4gb": 66, "130": 66, "gb": 66, "reach": [66, 91, 125, 145], "four": [66, 120, 143, 145], "un": [66, 93], "08442357927560806": 66, "12863239645957947": 66, "03835778683423996": 66, "200479581952": 66, "048462312668561935": 66, "12637358903884888": 66, "27429091930389404": 66, "07516729831": 66, "02690504491329193": 66, "12104076147079468": 66, "012526623904705048": 66, "031543646007": 66, "05877285450696945": 66, "08773420006036758": 66, "06381352990865707": 66, "122621834278": 66, "chunkembed": [67, 149], "wordembed": [67, 79, 82, 106, 149, 174], "chunker": [67, 89, 174], "ngramgener": [67, 101], "nerconvert": [67, 104, 105, 106, 181, 197], "poolingstrategi": [67, 79], "aggreg": [67, 79], "sum": [67, 72, 79], "skipoov": 67, "discard": [67, 108], "oov": 67, "setn": [67, 101], "wordembeddingsmodel": [67, 79, 82, 88, 105, 106, 107, 149], "setpoolingstrategi": [67, 79], "55661": 67, "42829502": 67, "86661": 67, "409785": 67, "06316501": 67, "120775": 67, "0732005": 67, "40674996": 67, "22938299": 67, "50597": 67, "288195": 67, "555655": 67, "465145": 67, "140118": 67, "17417": 67, "095253006": 67, "0530925": 67, "218465": 67, "714395": 67, "79860497": 67, "0129999": 67, "139705": 67, "177955": 67, "1887775": 67, "45545": 67, "20030999": 67, "461557": 67, "07891501": 67, "strategi": [67, 79, 96, 99, 119, 131, 167], "setskipoov": 67, "debertaembed": 68, "enhanc": [68, 123, 124], "disentangl": 68, "pengcheng": 68, "xiaodong": 68, "jianfeng": 68, "gao": 68, "weizhu": 68, "chen": [68, 77, 78], "2018": [68, 77, 78], "half": [68, 91], "deberta_v3_bas": 68, "microsoft": [68, 71, 76, 127], "www": 68, "blog": 68, "superglu": 68, "progress": [68, 120, 141], "significantli": [68, 72, 77, 78, 83, 84, 91], "novel": [68, 76, 85, 91, 124], "mechan": [68, 75], "weight": [68, 72, 91, 105, 107, 131], "among": [68, 76], "matric": 68, "second": [68, 72, 99, 119, 136, 141, 201], "mnli": 68, "9": [68, 83, 84, 101, 200, 205, 206], "90": 68, "91": 68, "88": 68, "made": [68, 80, 197], "publicli": [68, 83, 84], "distilbertembed": 69, "fast": [69, 123, 127, 156, 205], "cheap": 69, "distil": 69, "40": [69, 71, 107, 127], "uncas": 69, "preserv": [69, 104, 141, 160], "95": 69, "distilbert_base_cas": 69, "doesn": [69, 77], "token_type_id": [69, 77], "indic": [69, 77, 141, 145], "belong": [69, 77], "sep_token": [69, 77], "sep": 69, "position_id": 69, "ad": [69, 72, 111, 131], "though": [69, 91], "know": [69, 127, 158], "cheaper": 69, "lighter": 69, "preval": 69, "oper": [69, 75, 131, 140, 200], "constrain": 69, "budget": 69, "counterpart": 69, "leverag": [69, 76, 181, 197], "reduc": [69, 76, 133, 134, 160], "retain": 69, "97": [69, 96, 98, 145], "tripl": [69, 88], "cosin": 69, "distanc": [69, 129, 131, 133, 134], "devic": 69, "proof": 69, "concept": [69, 202], "experi": [69, 85, 111, 124, 181, 198], "1127224713563919": 69, "1982710212469101": 69, "5360898375511169": 69, "272536993026733": 69, "35534414649009705": 69, "13215228915214539": 69, "40981462597846985": 69, "14036104083061": 69, "328085333108902": 69, "06269335001707077": 69, "017595693469047546": 69, "024373905733": 69, "15617232024669647": 69, "2967822253704071": 69, "22324979305267334": 69, "04568954557180": 69, "45411425828933716": 69, "01173491682857275": 69, "190129816532135": 69, "1178255230188369": 69, "doc2vecapproach": 70, "word2vec": [70, 73, 89], "corpu": [70, 72, 81, 91, 94, 117, 124, 128, 131, 190, 207], "algorithm": [70, 81, 91, 105, 123, 131, 133, 134], "skip": [70, 81, 88, 131], "gram": [70, 71, 81, 91, 101, 124, 125, 127, 128, 168], "doc2vecmodel": 70, "vectors": [70, 81], "windows": [70, 81, 91], "numpartit": [70, 81], "partit": [70, 81, 187], "mincount": [70, 81, 131], "appear": [70, 81, 111, 131], "divid": [70, 81], "1000": [70, 81, 88, 105], "stepsiz": [70, 81], "optim": [70, 77, 78, 81, 106, 108, 120], "025": [70, 81], "maxit": [70, 81], "estim": [70, 81, 137, 152, 161, 170, 180, 201], "distribut": [70, 81], "composition": [70, 81], "sherlockholm": [70, 81, 131, 207], "setvectors": [70, 81], "setwindows": [70, 81, 91], "setsteps": [70, 81], "initi": [70, 81, 131, 141, 158, 174, 187, 188, 190, 191, 197], "setnumpartit": [70, 81], "setmaxit": [70, 81], "numiter": [70, 81], "equal": [70, 81], "setse": [70, 81], "setmincount": [70, 81, 131], "doc2vec_gigaword_300": 70, "06222493574023247": [70, 81], "011579325422644615": [70, 81], "009919632226228714": [70, 81], "109361454844": [70, 81], "doc2vec_wiki": 70, "getvector": [70, 81], "e5embed": [71, 76, 129], "e5": 71, "weakli": 71, "tailor": [71, 74], "e5_smal": 71, "unilm": 71, "manner": [71, 91], "signal": [71, 72], "curat": 71, "ccpair": 71, "readili": 71, "strong": [71, 83, 84], "conduct": 71, "extens": [71, 177], "56": [71, 190], "beir": 71, "mteb": 71, "bm25": 71, "baselin": [71, 80, 125], "beat": 71, "exist": [71, 72, 111, 131, 149, 151, 181], "queri": [71, 198], "protein": 71, "femal": 71, "eat": 71, "guidelin": 71, "cdc": 71, "women": 71, "70": [71, 74], "46": [71, 192], "dai": [71, 96, 98, 131], "chart": [71, 181, 197], "ll": [71, 145], "marathon": 71, "below": [71, 88, 206], "0190285e": 71, "005974853": 71, "072875895": 71, "007944068": 71, "026059335": 71, "0080": 71, "050514214": 71, "010061974": 71, "04340176": 71, "020937217": 71, "05170225": 71, "01157857": 71, "elmoembed": 72, "elmo": 72, "billion": [72, 125], "lookup": [72, 82, 85, 95, 133, 134], "setpoolinglay": 72, "word_emb": 72, "shape": 72, "batch_siz": 72, "max_length": 72, "lstm_outputs1": 72, "lstm": [72, 106], "lstm_outputs2": 72, "trainabl": 72, "tensor": 72, "poolinglay": 72, "contextu": [72, 124, 131], "characterist": 72, "syntax": 72, "vari": [72, 111], "across": [72, 125], "linguist": [72, 145], "polysemi": 72, "intern": [72, 113, 114, 128, 131, 142, 145, 159, 163, 168, 174], "bilm": 72, "six": [72, 133, 134], "textual": [72, 74], "entail": 72, "expos": 72, "crucial": 72, "mix": [72, 112, 129, 162, 180], "semi": 72, "662458181381226e": 72, "2541114091873169": 72, "6275503039360046": 72, "5787073969841": 72, "19154725968837738": 72, "22998669743537903": 72, "2894386649131775": 72, "21524395048618": 72, "10400570929050446": 72, "12288510054349899": 72, "07056470215320587": 72, "246389418840": 72, "49932169914245605": 72, "12706467509269714": 72, "30969417095184326": 72, "2643227577209": 72, "8871506452560425": 72, "20039963722229004": 72, "0601330995559692": 72, "0348707810044": 72, "albert_embed": [73, 89], "bert_embed": [73, 89], "bert_sentence_embed": [73, 89], "camembert_embed": [73, 89], "chunk_embed": [73, 89], "deberta_embed": [73, 89], "distil_bert_embed": [73, 89], "doc2vec": [73, 89], "e5_embed": [73, 89], "elmo_embed": [73, 89], "instructor_embed": [73, 89], "longformer_embed": [73, 89], "mpnet_embed": [73, 89], "roberta_embed": [73, 89], "roberta_sentence_embed": [73, 89], "universal_sentence_encod": [73, 89], "xlm_roberta_embed": [73, 89], "xlm_roberta_sentence_embed": [73, 89], "xlnet_embed": [73, 89], "instructorembed": 74, "instructor": 74, "finetun": [74, 75, 85], "scienc": [74, 91, 198], "financ": 74, "sota": [74, 85], "divers": [74, 80, 124, 125, 128, 198], "setinstruct": 74, "medicin": 74, "instructor_bas": 74, "summar": [74, 75, 91, 124, 125, 127, 128, 168], "embedd": 74, "hkunlp": 74, "togeth": 74, "explain": [74, 181, 197, 204, 206], "special": [74, 131, 145, 175, 202], "330": 74, "mixtur": 74, "66": [74, 107], "unseen": 74, "magnitud": [74, 133, 134], "suggest": [74, 125], "mitig": 74, "url": 74, "io": 74, "dynam": [74, 127], "scalar": 74, "degre": 74, "freedom": 74, "horava": 74, "lifshitz": 74, "graviti": 74, "longformerembed": 75, "iz": 75, "beltagi": 75, "matthew": 75, "arman": 75, "cohan": 75, "checkpoint": 75, "mlm": [75, 76], "096": 75, "longformer_base_4096": 75, "unabl": 75, "quadrat": 75, "linearli": 75, "easi": 75, "thousand": 75, "drop": [75, 136], "motiv": 75, "global": 75, "text8": 75, "enwik8": 75, "wikihop": 75, "triviaqa": 75, "led": [75, 77, 78, 91], "arxiv": [75, 124], "found": [75, 82, 91, 133, 140, 147, 187, 204], "18792399764060974": [75, 77], "14591649174690247": [75, 77], "20547787845134735": [75, 77], "1468472778797": [75, 77], "22845706343650818": [75, 77], "18073144555091858": [75, 77], "09725798666477203": [75, 77], "0417917296290": [75, 77], "07037967443466187": [75, 77], "14801117777824402": [75, 77], "03603338822722435": [75, 77], "17893412709": [75, 77], "08734266459941864": [75, 77], "2486150562763214": [75, 77], "009067727252840996": [75, 77], "24408400058": [75, 77], "22409197688102722": [75, 77], "4312366545200348": [75, 77], "1401449590921402": [75, 77], "356410235166549": [75, 77], "mpnetembed": 76, "mpnet": 76, "adopt": 76, "permut": [76, 85], "inherit": [76, 112, 129, 162, 180], "advantag": [76, 158], "all_mpnet_base_v2": 76, "neglect": [76, 85], "plm": 76, "doe": [76, 83, 91, 104, 127, 156, 158, 185, 202, 205, 206], "full": [76, 85, 201], "thu": [76, 91], "suffer": [76, 85], "discrep": [76, 85], "avoid": [76, 122], "auxiliari": 76, "160gb": 76, "corpora": [76, 91, 95], "down": [76, 106, 201, 202], "stream": [76, 111], "experiment": [76, 91], "022502584": 76, "078291744": 76, "023030775": 76, "0051000593": 76, "080340415": 76, "039": 76, "041702367": 76, "0010974605": 76, "015534201": 76, "07092203": 76, "0017729357": 76, "04661": 76, "robertaembed": [77, 83], "robustli": [77, 78, 108], "yinhan": [77, 78], "myle": [77, 78, 83, 84], "ott": [77, 78, 83, 84], "naman": [77, 78, 83, 84], "goyal": [77, 78, 83, 84], "jingfei": [77, 78], "du": [77, 78, 93], "mandar": [77, 78], "joshi": [77, 78], "danqi": [77, 78], "omer": [77, 78], "levi": [77, 78], "mike": [77, 78], "lewi": [77, 78], "luke": [77, 78, 83, 84], "zettlemoy": [77, 78, 83, 84], "veselin": [77, 78, 83, 84], "stoyanov": [77, 78, 83, 84], "hyperparamet": [77, 78], "mini": [77, 78], "roberta_bas": 77, "bpe": 77, "signific": [77, 78, 83, 84, 91, 94], "gain": [77, 78, 83, 84, 124], "care": [77, 78, 142], "comparison": [77, 78, 80, 136], "privat": [77, 78, 175], "choic": [77, 78, 99], "impact": [77, 78], "replic": [77, 78, 124], "carefulli": [77, 78, 111], "undertrain": [77, 78], "exce": [77, 78, 111], "highlight": [77, 78], "previous": [77, 78, 91], "overlook": [77, 78], "report": [77, 78, 80, 124, 181, 197], "robertasentenceembed": 78, "sent_roberta_bas": 78, "embeddingssent": 79, "22093398869037628": 79, "25130119919776917": 79, "41810303926467896": 79, "380883991718": 79, "dimension": 80, "tfhub_us": 80, "loadsp": 80, "op": 80, "lingual": [80, 83, 84, 91, 93, 127], "accur": [80, 123, 124, 133], "trade": [80, 83, 84], "tend": 80, "With": [80, 85, 91], "minim": [80, 108, 127], "encourag": 80, "weat": 80, "bia": [80, 111], "freeli": 80, "04616805538535118": 80, "022307956591248512": 80, "044395286589860916": 80, "0016493503": 80, "setloadsp": 80, "word2vecapproach": 81, "word2vecmodel": 81, "word2vec_gigaword_300": 81, "word2vec_wiki": 81, "dictionari": [82, 91, 94, 99, 105, 107, 108, 109, 122, 133, 134, 181], "setstoragepath": [82, 95], "line": [82, 86, 95, 100, 111, 120, 122, 131, 184, 187, 190], "delimit": [82, 86, 88, 94, 99, 101, 105, 109, 122, 141, 159, 187, 190], "39658191506190343": 82, "630968081620067": 82, "5393722253731201": 82, "8428180123359783": 82, "were": [82, 106, 181, 197], "7535235923631415": 82, "9699218875629833": 82, "10397182122983872": 82, "11833962569383116": 82, "stress": 82, "0492683418305907": 82, "9415954572751959": 82, "47624463167525755": 82, "16790967216778263": 82, "induc": 82, "1535748762292387": 82, "33498936903209897": 82, "9235178224122094": 82, "1158772920395934": 82, "withcoveragecolumn": 82, "overallcoverag": 82, "writebuffers": 82, "dump": 82, "disk": [82, 201, 202], "storag": [82, 86, 95, 166, 174], "10000": 82, "readcaches": 82, "cach": [82, 124, 128, 129, 185], "random_embeddings_dim4": 82, "abov": [82, 88, 190], "setstorageref": 82, "glove_4d": 82, "setdimens": [82, 168], "patient": 82, "diagnos": 82, "diabet": 82, "9439099431037903": 82, "4707513153553009": 82, "806300163269043": 82, "16176554560661316": 82, "7966810464859009": 82, "5551124811172485": 82, "8861005902290344": 82, "28284206986427307": 82, "025029370561242104": 82, "35177749395370483": 82, "052506182342767715": 82, "1887107789516449": 82, "08617766946554184": 82, "8399239182472229": 82, "5395117998123169": 82, "7864698767662048": 82, "6599600911140442": 82, "16109347343444824": 82, "6041093468666077": 82, "8913561105728149": 82, "5955275893211365": 82, "01899011991918087": 82, "4397728443145752": 82, "8911281824111938": 82, "9840458631515503": 82, "7599489092826843": 82, "9417727589607239": 82, "8624503016471863": 82, "setwritebuffers": 82, "setreadcaches": 82, "glove_100d": [82, 106], "There": [82, 86, 88, 140, 199, 201, 202, 207], "conveni": 82, "coverag": [82, 165], "stat": 82, "whole": [82, 184], "570580005645752": 82, "44183000922203064": 82, "7010200023651123": 82, "417129993438720": 82, "542639970779419": 82, "4147599935531616": 82, "0321999788284302": 82, "4024400115013122": 82, "2708599865436554": 82, "04400600120425224": 82, "020260000601410866": 82, "17395000159": 82, "6191999912261963": 82, "14650000631809235": 82, "08592499792575836": 82, "2629800140857": 82, "3397899866104126": 82, "20940999686717987": 82, "46347999572753906": 82, "6479200124740": 82, "embeddings_col": 82, "coverageresult": 82, "coverateresult": 82, "wordsoverallcoverag": 82, "resultdf": 82, "output_col": 82, "wordscoverag": 82, "cov_embed": 82, "loadstorag": [82, 95], "storage_ref": [82, 95], "xlmrobertaembed": 83, "alexi": [83, 84], "conneau": [83, 84], "kartikai": [83, 84], "khandelw": [83, 84], "vishrav": [83, 84], "chaudhari": [83, 84], "guillaum": [83, 84], "wenzek": [83, 84], "francisco": [83, 84, 91], "guzman": 83, "edouard": [83, 84], "grave": [83, 84], "5tb": [83, 84], "commoncrawl": [83, 84], "xlm_roberta_bas": 83, "abl": [83, 128, 181, 200], "correct": [83, 131, 133, 134, 145], "terabyt": [83, 84], "r": [83, 84, 91], "mbert": [83, 84], "xnli": [83, 84], "mlqa": [83, 84], "particularli": [83, 84, 124], "low": [83, 84, 131], "swahili": [83, 84], "urdu": [83, 84], "capac": [83, 84, 125], "dilut": [83, 84], "sacrif": [83, 84], "ri": [83, 84], "05969233065843582": 83, "030789051204919815": 83, "04443822056055069": 83, "09564960747": 83, "038839809596538544": 83, "011712731793522835": 83, "019954433664679527": 83, "0667808502": 83, "03952755779027939": 83, "03455188870429993": 83, "019103847444057465": 83, "04311436787": 83, "09579929709434509": 83, "02494969218969345": 83, "014753809198737144": 83, "10259044915": 83, "004710011184215546": 83, "022148698568344116": 83, "011723337695002556": 83, "013356896": 83, "xlmrobertasentenceembed": 84, "guzm\u00e3": 84, "sent_xlm_roberta_bas": 84, "xlnetembed": 85, "autoregress": 85, "xl": 85, "exhibit": 85, "involv": [85, 120], "rank": [85, 129, 131], "xlnet_large_cas": 85, "xlnet_base_cas": 85, "zihangdai": 85, "denois": [85, 124], "autoencod": [85, 124], "corrupt": [85, 124], "pro": 85, "con": 85, "enabl": [85, 106, 129, 133, 174], "maxim": [85, 131], "likelihood": [85, 111], "overcom": 85, "formul": 85, "furthermor": 85, "integr": [85, 91, 110, 127, 181, 197, 199], "idea": 85, "6287205219268799": 85, "4865287244319916": 85, "186111718416214": 85, "234187275171279": 85, "1967450380325317": 85, "2746637463569641": 85, "9481253027915955": 85, "3431355059146881": 85, "0777631998062134": 85, "092679977416992": 85, "5331977605819702": 85, "11190271377563": 85, "8349916934967041": 85, "45627787709236145": 85, "7890847325325012": 85, "028069257736": 85, "134845569729805": 85, "11672890186309814": 85, "4945235550403595": 85, "66587203741073": 85, "entityrul": 86, "entityrulerapproach": 86, "exact": [86, 95, 100, 111], "definit": [86, 108, 187], "json": [86, 111, 159, 181, 192], "jsonl": 86, "setpatternsresourc": 86, "might": [86, 106, 145, 206], "rule": [86, 96, 99, 122, 140, 142, 167], "w": [86, 89, 99, 105, 109, 140, 142, 174], "winterfel": 86, "jon": 86, "snow": [86, 107, 131], "stark": 86, "eddard": 86, "patternsresourc": 86, "usestorag": 86, "rocksdb": 86, "lord": 86, "29": [86, 107, 145, 190, 192], "38": [86, 192], "setusestorag": 86, "setsentencematch": 86, "setalphabetresourc": 86, "alphabet": [86, 109], "plain": [86, 207], "entityrulermodel": 86, "entity_rul": [87, 89], "graphextract": [88, 151], "graph": [88, 106, 127, 131, 137, 151], "nerdlmodel": [88, 104, 105, 106, 107, 181, 185, 197], "store": [88, 113, 114, 159, 163, 168, 179, 184, 192, 198], "node": 88, "relev": [88, 91, 111], "taken": 88, "implicitli": 88, "setmergeent": 88, "setdependencyparsermodel": 88, "settypeddependencyparsermodel": 88, "setrelationshiptyp": 88, "public": [88, 185, 201], "relationshiptyp": 88, "entitytyp": 88, "explodeent": 88, "roottoken": 88, "travers": 88, "maxsentences": 88, "minsentences": 88, "mergeent": 88, "merg": [88, 95, 100], "neighbor": [88, 129], "includeedg": 88, "symbol": [88, 131, 145], "posmodel": 88, "coordin": [88, 119], "remoteloc": 88, "graphfinish": [88, 151], "rdf": [88, 151], "nertagg": [88, 105, 106, 107], "morn": [88, 151], "flight": [88, 151], "denver": [88, 151], "18": [88, 96, 98, 101, 104, 107, 156, 173, 184, 200], "path1": 88, "setentitytyp": 88, "setexplodeent": 88, "setroottoken": 88, "setmaxsentences": 88, "setminsentences": 88, "setmergeentitiesiobformat": 88, "iob": [88, 104, 105, 106], "iob2": [88, 104], "setincludeedg": 88, "setdelimit": [88, 99, 101], "setposmodel": 88, "class": [89, 166, 171, 178, 189, 196, 197, 205, 207], "classifier_dl": [89, 174], "er": [89, 174], "keyword_extract": [89, 174], "yake_keyword_extract": [89, 90], "ld_dl": [89, 174], "language_detector_dl": [89, 92], "matcher": [89, 174], "big_text_match": [89, 97], "date_match": [89, 97], "multi_date_match": [89, 97], "regex_match": [89, 97], "text_match": [89, 97], "ner_approach": [89, 102], "ner_convert": [89, 102], "ner_crf": [89, 102], "ner_dl": [89, 102], "ner_overwrit": [89, 102], "openai": [89, 125, 174], "openai_complet": [89, 110], "openai_embed": [89, 110], "param": [89, 105, 112, 129, 162, 163, 168, 174, 179, 180], "sentence_detector_dl": [89, 118, 127], "sentiment_detector": [89, 121], "vivekn_senti": [89, 121], "seq2seq": [89, 174], "bart_transform": [89, 126], "gpt2_transform": [89, 126], "marian_transform": [89, 126], "t5_transform": [89, 126], "spell_check": [89, 174], "context_spell_check": [89, 132], "norvig_sweet": [89, 132], "symmetric_delet": [89, 132], "chunk_token": [89, 139], "recursive_token": [89, 139], "regex_token": [89, 139], "word_segment": [89, 144], "chunk2_doc": [89, 174], "date2_chunk": [89, 174], "document_character_text_splitt": [89, 174], "document_norm": [89, 174], "document_token_splitt": [89, 174], "graph_extract": [89, 174], "lemmat": [89, 122, 136, 158, 160, 174], "n_gram_gener": [89, 174], "stemmer": [89, 136, 174], "stop_words_clean": [89, 174], "token2_chunk": [89, 174], "yakekeywordextract": 91, "yake": 91, "independ": [91, 133, 134, 140], "grow": 91, "autom": 91, "adequ": 91, "emerg": [91, 124, 128], "tool": [91, 111, 124], "nor": 91, "thesauri": 91, "neither": 91, "written": [91, 127], "plethora": 91, "situat": [91, 120], "access": 91, "restrict": 91, "therefor": [91, 205], "sent": 91, "boundari": [91, 119, 120, 123, 142, 145], "detector": [91, 96, 122], "section": [91, 148, 157, 197, 199, 205], "tweakabl": 91, "upper": 91, "bound": [91, 119, 120, 123], "minngram": 91, "maxngram": 91, "occurr": [91, 167], "nkeyword": 91, "stopword": [91, 107, 136], "stop": [91, 105, 111, 128, 136], "campo": 91, "mangaravit": 91, "pasquali": 91, "jatowt": 91, "jorg": 91, "nune": 91, "journal": [91, 145], "elsevi": 91, "vol": 91, "509": 91, "pp": [91, 145], "257": 91, "289": 91, "turn": [91, 160, 201], "fly": 91, "demand": 91, "within": [91, 117, 123, 124, 125, 142, 147], "resort": 91, "solut": 91, "articl": [91, 131], "rest": [91, 104], "merit": 91, "ten": 91, "carri": 91, "twenti": 91, "setcontextchar": [91, 142], "setminngram": 91, "setnkeyword": 91, "acquir": 91, "kaggl": 91, "platform": [91, 111, 181, 199], "host": 91, "transact": 91, "somewhat": 91, "vagu": 91, "cloud": 91, "confer": 91, "week": [91, 96, 98, 138], "announc": [91, 107], "earli": 91, "tomorrow": [91, 96, 98], "phone": 91, "founder": 91, "ceo": 91, "anthoni": 91, "goldbloom": 91, "declin": 91, "deni": 91, "acquisit": 91, "happen": 91, "rumor": 91, "scientist": 91, "ben": 91, "hamner": 91, "2010": 91, "servic": [91, 111, 127], "got": 91, "even": [91, 128], "few": [91, 142, 190, 207], "competitor": 91, "drivendata": 91, "topcod": 91, "hackerrank": 91, "stai": 91, "ahead": 91, "nich": 91, "home": [91, 174], "bui": [91, 188], "commun": 91, "mindshar": 91, "too": [91, 122, 200], "plenti": 91, "bit": [91, 120, 206], "histori": [91, 120, 131], "earlier": 91, "month": [91, 96, 98, 190, 207], "team": [91, 127, 181, 197], "around": 91, "youtub": 91, "technologi": 91, "interest": 91, "kernel": 91, "On": [91, 125, 127], "analyz": [91, 123], "compani": [91, 127], "script": 91, "centric": 91, "job": [91, 147], "board": [91, 117, 190], "unclear": 91, "accord": [91, 131, 187], "crunchbas": 91, "pitchbook": 91, "launch": 91, "investor": 91, "ventur": 91, "sv": 91, "angel": 91, "levchin": 91, "naravik": 91, "chie": 91, "economist": 91, "hal": 91, "varian": 91, "khosla": 91, "yuri": 91, "milner": 91, "resulttupl": 91, "ascend": 91, "orderbi": 91, "32051516486864573": 91, "37786450577630676": 91, "39922830978423146": 91, "40224744669493756": 91, "41584827825302534": 91, "setmaxngram": 91, "setstopword": [91, 107, 136], "getstopword": 91, "loaddefaultstopword": [91, 136], "danish": [91, 136], "dutch": [91, 136], "finnish": [91, 136], "german": [91, 136, 187, 207], "hungarian": [91, 136], "italian": [91, 111, 131, 136], "norwegian": [91, 136], "portugues": [91, 136], "russian": [91, 136], "spanish": [91, 136], "swedish": [91, 136], "turkish": [91, 136], "languagedetectordl": 93, "ld": 93, "identif": 93, "rnn": 93, "tatoeba": 93, "140": 93, "wiki": 93, "languagedetector": 93, "ld_wiki_tatoeba_cnn_21": 93, "open": [93, 142, 147, 148, 149, 157, 160, 198], "advanc": [93, 147, 160], "scala": [93, 112, 129, 161, 162, 170, 176, 180], "program": 93, "biblioth\u00e8qu": 93, "traitement": 93, "pour": 93, "le": [93, 127], "avanc\u00e9": 93, "langag": 93, "naturel": 93, "programm": 93, "ist": 93, "ein": 93, "textverarbeitungsbibliothek": 93, "f\u00fcr": 93, "fortgeschritten": 93, "nat\u00fcrlich": 93, "sprachverarbeitung": 93, "die": 93, "programmiersprachen": 93, "und": 93, "lemma": [94, 122, 156, 184, 188, 202, 205, 206], "predefin": [94, 95, 99, 100, 122], "setdictionari": [94, 122, 133, 134], "lemmatizermodel": 94, "lemmas_smal": [94, 122], "setformcol": 94, "correspend": 94, "formcol": [94, 188], "setlemmacol": 94, "fromlemma": 94, "key_delimit": 94, "value_delimit": 94, "lemma_antbnc": 94, "bigtextmatch": [95, 100], "textmatch": [95, 100, 138], "externalresourc": [95, 100, 172], "mergeoverlap": [95, 100], "tokenizermodel": [95, 142], "trie": 95, "dolor": [95, 100], "magna": [95, 100], "aliqua": [95, 100], "sit": [95, 100], "laborum": [95, 100], "hello": [95, 100, 138, 192], "entityextractor": [95, 100, 138], "extractor": [95, 100, 138], "59": [95, 96, 98, 100], "setent": [95, 100, 103, 138], "setmergeoverlap": [95, 100], "settoken": 95, "tokenizer_model": 95, "bigtextmatchermodel": 95, "btm": 95, "textmatchermodel": [95, 100], "searchtri": 95, "datematcherutil": 96, "setinputformat": [96, 159], "setoutputformat": [96, 98], "desir": [96, 98], "yyyi": [96, 98], "mm": [96, 98, 145], "dd": [96, 98, 99], "Not": [96, 106, 158], "setreadmonthfirst": 96, "juli": 96, "5th": 96, "2015": 96, "07": 96, "05": 96, "setdefaultdaywhenmiss": 96, "setanchordateyear": [96, 98], "anchor": [96, 98], "year": [96, 98, 125, 138, 190], "setanchordatemonth": [96, 98], "januari": [96, 98], "setanchordatedai": [96, 98], "setrelaxedfactorystrategi": 96, "matchstrategi": [96, 167], "match_first": [96, 99, 167], "relax": 96, "exhaust": 96, "1978": [96, 98], "28": [96, 98, 104, 156, 173, 184, 192, 200], "1984": [96, 98], "04": [96, 98], "02": [96, 98], "1980": [96, 98], "79": [96, 98], "31st": [96, 98], "april": [96, 98], "2008": [96, 98], "fri": [96, 98], "1997": [96, 98], "jan": [96, 98], "sun": [96, 98], "1st": [96, 98], "thursdai": [96, 98], "wednesdai": [96, 98], "todai": [96, 98, 192], "yesterdai": [96, 98], "0600h": [96, 98], "06": [96, 98], "00": [96, 98], "6pm": [96, 98], "23": [96, 98, 99, 107, 117, 190, 191, 192, 207], "1988": [96, 98], "31": [96, 98, 99, 107, 117, 190], "dateformat": [96, 98], "readmonthfirst": [96, 98], "defaultdaywhenmiss": [96, 98], "anchordateyear": [96, 98], "anchordatemonth": [96, 98], "anchordatedai": [96, 98], "15": [96, 192], "saw": 98, "visit": [98, 111], "57": [98, 107], "65": [98, 107], "regexmatch": 99, "d": [99, 109, 142, 199], "1970": 99, "setrul": 99, "setexternalrul": 99, "match_al": [99, 167], "match_complet": [99, 167], "externalrul": 99, "ceremoni": 99, "setstrategi": 99, "71": 99, "short_dat": 99, "regexmatchermodel": 99, "regardless": 100, "entityvalu": 100, "buildfromtoken": 100, "27": [100, 117, 119, 190], "48": [100, 145, 192], "setentityvalu": 100, "setbuildfromtoken": 100, "null": 101, "empti": [101, 147], "enablecumul": 101, "join": [101, 117, 159, 190], "setenablecumul": 101, "nerapproach": 103, "recogn": [103, 104, 105, 106, 107, 108, 131], "setminepoch": [103, 105], "setrandomse": [103, 106, 113, 127], "getlabelcolumn": [103, 137], "friendli": [104, 111, 127], "whitelist": [104, 140], "setwhitelist": [104, 140], "outsid": 104, "prefix": [104, 140, 142, 181, 197], "preserveposit": [104, 141, 160], "org": [104, 105, 106, 107, 124, 145, 156, 173, 174, 184, 187, 198, 207], "14": [104, 117, 143, 156, 173, 184, 190], "ekeu": [104, 105, 106, 156, 173, 184], "36": [104, 117, 156, 173, 184, 190, 192], "baghdad": [104, 105, 106, 156, 173, 184], "37": [104, 156, 173, 184], "setpreserveposit": [104, 141, 160], "setnerhasnoschema": 104, "nercrf": 105, "nercrfapproach": [105, 106], "nercrfmodel": [105, 106], "crf": [105, 106], "2003": [105, 106, 145, 187, 207], "exclud": [105, 106], "setexternalfeatur": 105, "minepoch": [105, 106], "l2": 105, "c0": 105, "decai": [105, 106], "gradient": 105, "2250000": 105, "lossep": 105, "ep": 105, "minw": 105, "includeconfid": [105, 106], "confid": [105, 106, 108], "externalfeatur": 105, "nerdlapproach": [105, 106, 187, 207], "trainingdata": [105, 106, 120, 133, 134, 187], "readdataset": [105, 106, 117, 145, 187, 188, 190, 191, 192, 207], "conll2003": [105, 106, 187, 207], "eng": [105, 106, 187, 207], "setl2": 105, "l2valu": 105, "setc0": 105, "c0valu": 105, "setlossep": 105, "setminw": 105, "setincludeconfid": [105, 106], "verbosevalu": 105, "prerequisit": [105, 106, 107, 201], "nerdl": 106, "char": [106, 109, 120], "bilstm": 106, "tagger": [106, 190, 207], "50": [106, 107, 117, 124, 125, 192], "real": [106, 174, 181, 197], "rage": 106, "graphfold": [106, 131], "usecontrib": 106, "contrib": 106, "cell": [106, 159], "slightli": [106, 120], "includeallconfidencescor": 106, "enablememoryoptim": 106, "slow": 106, "usebestmodel": 106, "bestmodelmetr": 106, "micro": 106, "macro": 106, "setgraphfold": [106, 131, 137], "setusecontrib": 106, "setpo": 106, "setincludeallconfidencescor": 106, "setenablememoryoptim": 106, "setusebestmodel": 106, "setbestmodelmetr": 106, "nermodel": 106, "neroverwrit": 107, "setnewresult": 107, "nerword": 107, "overwritten": 107, "newnerent": 107, "lab": 107, "42": [107, 117], "45": [107, 117, 190, 192], "47": [107, 190, 192], "ner_overwritten": 107, "setnerword": 107, "setnewnerent": 107, "cardin": 107, "setreplaceent": 107, "rw": 107, "zeroshotnermodel": 108, "zeroshotn": 108, "zer_shot_n": 108, "entitydefinit": 108, "citi": 108, "town": 108, "predictionthreshold": 108, "01f": 108, "ignoreent": 108, "zero_shot_n": 108, "setentitydefinit": 108, "hellen": 108, "5328949": 108, "9360068": 108, "83294415": 108, "45366877": 108, "setpredictionthreshold": 108, "zero_shot_ner_roberta": 108, "shortcut": 108, "stem": [109, 135, 156, 184, 205, 206], "henc": 109, "pl": 109, "slangdictionari": 109, "slang": 109, "minlength": [109, 119, 120, 141, 142], "maxlength": [109, 119, 120, 141, 142], "setcleanuppattern": 109, "punctuat": [109, 119], "alphanumer": 109, "za": 109, "z": [109, 142], "brother": 109, "dont": [109, 123], "setslangdictionari": 109, "setminlength": [109, 119, 120, 141, 142], "setmaxlength": [109, 119, 120, 141, 142], "normalizermodel": 109, "openaicomplet": 111, "request": 111, "complet": [111, 181, 198, 201], "executor": 111, "doc": [111, 131, 191, 207], "suffix": [111, 140, 142, 201], "insert": [111, 133, 134, 201], "maxtoken": 111, "nucleu": 111, "mass": 111, "numberofcomplet": 111, "prompt": 111, "logprob": 111, "echo": 111, "presencepenalti": 111, "penal": 111, "topic": 111, "frequencypenalti": 111, "frequenc": [111, 123, 131, 133, 134, 145], "verbatim": 111, "bestof": 111, "best_of": 111, "server": [111, 206], "side": [111, 145], "logitbia": 111, "abus": [111, 112], "pleasur": 111, "dine": 111, "fiorita": 111, "truli": 111, "delight": 111, "menu": 111, "boast": 111, "wonder": 111, "classic": 111, "dish": 111, "exquisit": 111, "prepar": [111, 146, 148, 154, 157], "staff": [111, 122], "227": 111, "barbecu": 111, "joe": 111, "dinner": 111, "amaz": 111, "pull": 111, "pork": 111, "smoke": 111, "turkei": 111, "brisket": 111, "rib": 111, "sandwich": 111, "opt": 111, "172": 111, "overallr": 111, "reviewbodi": 111, "enjoi": 111, "meal": 111, "restaur": [111, 122], "food": 111, "flavour": 111, "beautifulli": 111, "setmodel": [111, 112, 120], "setsuffix": [111, 140], "setmaxtoken": 111, "plu": [111, 125], "max_token": 111, "cannot": 111, "settemperatur": [111, 124, 125, 127, 128, 168], "determinist": 111, "alter": 111, "settopp": [111, 124, 125, 127, 128, 168], "compris": 111, "setnumberofcomplet": 111, "consum": 111, "quota": 111, "ensur": [111, 176], "setlogprob": 111, "respons": [111, 120], "setecho": 111, "setstop": 111, "setpresencepenalti": 111, "setfrequencypenalti": 111, "setbestof": 111, "control": [111, 124, 125, 127, 128, 129, 131, 168], "candid": [111, 131, 133, 134, 142], "setlogitbia": 111, "mathemat": 111, "ban": 111, "exclus": 111, "50256": 111, "prevent": 111, "endoftext": 111, "setus": [111, 112], "openaiembed": 112, "py": [112, 129, 161, 162, 170, 176, 180], "ins": [112, 129, 162, 180], "uid": [112, 129, 162, 180], "classifierencod": 113, "attach": [113, 114, 163, 168, 179, 181], "evaluationdlparam": 114, "setevaluationlogextend": 114, "setenableoutputlog": [114, 181, 197], "setoutputlogspath": [114, 120, 181, 197], "assum": 114, "perceptronapproach": [117, 190, 207], "member": [117, 184], "datasetpath": 117, "pierr": [117, 190], "vinken": [117, 190], "34": [117, 190, 192], "md": [117, 190], "vb": [117, 187, 190, 207], "41": [117, 119, 190, 192], "43": [117, 119, 190, 192], "dt": [117, 190, 191, 207], "49": [117, 190], "poscol": [117, 145, 187], "niter": [117, 145], "anc": [117, 190, 207], "trainingperceptrondf": 117, "trainedpo": 117, "setposcolumn": [117, 145], "cd": [117, 187, 190], "setiter": 117, "getniter": [117, 145], "pos_anc": 117, "25": [117, 119, 190, 192], "33": [117, 192], "sentencedetectorparam": 119, "ii": 119, "abbrevi": 119, "period": 119, "geo": 119, "1026": 119, "253": 119, "553": 119, "ellipsi": 119, "quotat": 119, "mark": [119, 120, 145], "exclam": 119, "breaker": 119, "pragmaticcontentformatt": 119, "custombound": [119, 120], "setcustombound": [119, 120], "usecustomboundsonli": [119, 120], "explodesent": [119, 120, 187, 188], "useabbrevi": 119, "explicitli": [119, 120, 136, 173, 201], "customboundsstrategi": 119, "prepend": [119, 147], "break": 119, "append": [119, 131, 201], "parallel": [119, 120, 156, 187, 205], "splitlength": [119, 120], "forcibli": [119, 120], "99999": [119, 120, 142], "detectlist": 119, "nhow": 119, "setcustomboundsstrategi": 119, "setuseabbrevi": 119, "setdetectlist": 119, "setusecustomboundsonli": [119, 120], "setexplodesent": [119, 120], "setsplitlength": [119, 120], "sentencedetectordl": [120, 127], "sentencedetectordlapproach": 120, "sentencedetectordlmodel": [120, 127], "modelarchitectur": 120, "impossiblepenultim": 120, "imposs": [120, 145], "penultim": 120, "epochsnumb": 120, "eo": 120, "stefan": 120, "schweter": 120, "sajawel": 120, "ahm": 120, "cover": [120, 124, 128, 145], "broken": 120, "moder": 120, "lack": 120, "easier": [120, 150, 203, 207], "polit": 120, "successor": 120, "great": 120, "heritag": 120, "bequeath": 120, "nelson": 120, "mandela": 120, "setepochsnumb": 120, "model_architectur": 120, "validation_split": 120, "epochs_numb": 120, "output_logs_path": 120, "setimpossiblepenultim": 120, "impossible_penultim": 120, "sentencedl": 120, "sentencesdl": 120, "helen": 120, "total": [120, 145], "peopl": 120, "sentimentdetector": 122, "els": 122, "viveknsentimentapproach": [122, 123], "cool": 122, "superb": 122, "uninspir": 122, "sentimentscor": 122, "nice": [122, 181, 197], "entri": [122, 148, 157, 185], "sttr": 122, "sentimentdetectormodel": 122, "sda": [122, 123], "pragmat": 122, "viveknsenti": 123, "analys": 123, "vivek": 123, "narayanan": 123, "give": 123, "transit": [123, 131], "sentimentcol": 123, "prunecorpu": 123, "unfrequ": 123, "scenario": 123, "scope": 123, "naiv": 123, "bay": 123, "vivekn": 123, "setsentimentcol": 123, "train_senti": 123, "result_senti": 123, "finish": [123, 129, 149, 151, 155, 158, 174], "final_senti": 123, "cast": [123, 146], "horribl": 123, "go": [123, 201], "again": [123, 140], "anyon": 123, "protagonist": 123, "music": 123, "setprunecorpu": 123, "viveknsentimentmodel": 123, "sentiment_vivekn": 123, "barttransform": 124, "handl": [124, 171, 189], "captur": [124, 129], "past": [124, 127, 185], "incorpor": 124, "versatil": 124, "valuabl": 124, "summari": [124, 125, 128], "distilbart_xsum_12_6": 124, "barttestspec": 124, "cumul": [124, 125, 127, 128, 168], "ignoretokenid": [124, 125, 128], "usecach": 124, "ab": 124, "1910": 124, "13461": 124, "pytorch": 124, "fairseq": 124, "arbitrari": 124, "nois": 124, "reconstruct": [124, 160], "tranform": 124, "randomli": 124, "dialogu": 124, "roug": 124, "bleu": 124, "ablat": 124, "influenc": [124, 131], "setmaxoutputlength": [124, 125, 127, 128, 168], "200": [124, 128], "rich": [124, 128], "rise": [124, 128], "methodologi": [124, 128], "landscap": [124, 128], "unifi": [124, 128], "systemat": [124, 128], "dozen": [124, 128], "insight": [124, 128], "coloss": [124, 128], "facilit": [124, 128], "setignoretokenid": [124, 125, 127, 128], "setminoutputlength": [124, 125, 128, 168], "settopk": [124, 125, 127, 128, 168], "setrepetitionpenalti": [124, 125, 127, 128, 168], "ctrl": [124, 125, 127, 128, 168], "setnorepeatngrams": [124, 125, 127, 128, 168], "setcach": 124, "use_cach": 124, "gpt2transform": 125, "caus": [125, 142], "goal": [125, 145], "direct": 125, "10x": 125, "synthet": 125, "unpreced": 125, "prime": 125, "lengthi": 125, "benefit": 125, "suffici": 125, "learner": 125, "typic": 125, "taskspecif": 125, "webpag": [125, 198], "webtext": 125, "coqa": 125, "exceed": 125, "127": 125, "fashion": 125, "5b": 125, "underfit": 125, "reflect": 125, "paragraph": [125, 131], "promis": 125, "leonardo": 125, "1776": 125, "came": 125, "kingdom": 125, "mariantransform": 127, "marian": 127, "free": 127, "mainli": 127, "academ": 127, "notabl": 127, "edinburgh": 127, "adam": 127, "mickiewicz": 127, "pozna\u0144": 127, "commerci": 127, "contributor": 127, "mariannmt": 127, "engin": [127, 138], "behind": 127, "deploi": [127, 198], "opus_mt_en_fr": 127, "langid": 127, "maxinputlength": 127, "differenti": 127, "toolkit": 127, "setmaxinputlength": 127, "capit": [127, 131], "franc": 127, "quell": 127, "capital": 127, "devrait": 127, "savoir": 127, "fran\u00e7ai": 127, "setlangid": 127, "t5transform": 128, "t5": 128, "reconsid": 128, "hyper": 128, "t5_small": 128, "setstopateo": 128, "encount": 128, "setmaxnewtoken": 128, "setusecach": 128, "documentsimilarityrank": 129, "documentsimilarityrankerapproach": 129, "lsh": 129, "lib": 129, "approxim": 129, "aim": 129, "ranker": 129, "documentsimilarityrankermodel": 129, "doc_similarity_rank": 129, "enablecach": 129, "rdd": 129, "similaritymethod": 129, "neighbour": 129, "brp": 129, "bucket": 129, "euclidean": 129, "numberofneighbour": 129, "bucketlength": 129, "hash": 129, "numhasht": 129, "visibledist": 129, "identityrank": 129, "ident": 129, "debug": 129, "setsimilaritymethod": 129, "setnumberofneighbour": 129, "setbucketlength": 129, "setnumhasht": 129, "setvisibledist": 129, "setidentityrank": 129, "document_similarity_ranker_finish": 129, "documentsimilarityrankerfinish": 129, "finished_doc_similarity_rankings_id": 129, "finished_doc_similarity_rankings_neighbor": 129, "setextractnearestneighbor": 129, "docsimrankerpipelin": 129, "1510101612": 129, "1634839239": 129, "12448559591306324": 129, "612640902": 129, "1274183715": 129, "1220122862046063": 129, "1320876223": 129, "1293373212": 129, "17848855164122393": 129, "1548374770": 129, "1719102856": 129, "23297156732534166": 129, "visibl": 129, "inclus": 129, "extractnearestneighbor": 129, "getinputcol": [129, 137, 149, 150, 163], "getoutputcol": [129, 146, 148, 149, 150, 154, 157, 163], "document_similarity_rank": 130, "contextspellcheck": 131, "contextspellcheckerapproach": [131, 133, 134], "noisi": 131, "spell": [131, 132, 133, 134, 156, 160, 204, 205, 206], "contextspellcheckermodel": [131, 133, 134], "surround": [131, 159], "edit": [131, 133, 134], "subword": 131, "checker": [131, 133, 134, 204], "languagemodelclass": 131, "lm": 131, "wordmaxdist": 131, "maxcandid": 131, "casestrategi": 131, "uppercas": 131, "errorthreshold": 131, "perplex": 131, "nlm": 131, "initialr": 131, "finalr": 131, "validationfract": 131, "datapoint": 131, "min": 131, "vocab": 131, "compoundcount": 131, "compound": 131, "classcount": 131, "tradeoff": 131, "weighteddistpath": 131, "levenshtein": [131, 133, 134], "maxwindowlen": 131, "rememb": 131, "maxsentlen": 131, "norvigsweetingapproach": [131, 133, 134, 207], "symmetricdeleteapproach": [131, 133, 134, 207], "depth": [131, 204], "explan": [131, 204], "awar": 131, "sherlock": 131, "spellcheck": [131, 133, 134], "setwordmaxdist": 131, "setepoch": 131, "setlanguagemodelclass": 131, "1650": 131, "addvocabclass": 131, "_name_": 131, "extra": [131, 133, 201], "dist": 131, "setmaxcandid": 131, "setcasestrategi": 131, "seterrorthreshold": 131, "setinitialr": 131, "setfinalr": 131, "setvalidationfract": 131, "fraction": 131, "setcompoundcount": 131, "setclasscount": 131, "settradeoff": 131, "alpha": 131, "setweighteddistpath": 131, "setmaxwindowlen": 131, "setmaxsentlen": 131, "sentlen": 131, "userdist": 131, "addregexclass": 131, "spellcheck_dl": 131, "gamma": 131, "decis": 131, "correctsymbol": 131, "comparelowcas": 131, "vocabfreq": 131, "idsvocab": 131, "vocabid": 131, "usenewlin": 131, "newlin": 131, "norvigsweetingmodel": [131, 133, 134], "symmetricdeletemodel": [131, 133, 134], "cold": 131, "dreari": 131, "countri": 131, "white": 131, "smow": 131, "setweight": 131, "setgamma": 131, "setvocabfreq": 131, "setidsvocab": 131, "setvocabid": 131, "setclass": 131, "getwordclass": 131, "updateregexclass": 131, "updat": 131, "updatevocabclass": 131, "setcorrectsymbol": 131, "setcomparelowcas": 131, "norvigsweet": 133, "norvig": 133, "bayesian": 133, "tokenpattern": 133, "sensit": [133, 136, 142], "doublevari": 133, "shortcircuit": 133, "frequencyprior": 133, "ham": 133, "intersect": 133, "wordsizeignor": 133, "dupslimit": 133, "duplic": 133, "reductlimit": 133, "attempt": 133, "vowelswaplimit": 133, "vowel": 133, "swap": 133, "corrector": 133, "gummi": [133, 134], "gummic": [133, 134], "gummier": [133, 134], "gummiest": [133, 134], "gummifer": [133, 134], "basi": [133, 134], "token_pattern": [133, 134], "setdoublevari": 133, "setshortcircuit": 133, "setfrequencyprior": 133, "symmetr": [133, 134], "delet": [133, 134, 201], "damerau": [133, 134], "transpos": [133, 134], "spellcheck_norvig": 133, "symspel": [133, 134], "somtim": 133, "wrrite": [133, 134], "wordz": [133, 134], "erong": [133, 134], "sometim": [133, 134, 201], "wrong": [133, 134], "symmetricdelet": 134, "deriv": 134, "teach": 134, "maxeditdist": 134, "frequencythreshold": [134, 145], "deletesthreshold": 134, "patttern": 134, "setmaxeditdist": 134, "setfrequencythreshold": [134, 145], "setdeletesthreshold": 134, "spellcheck_sd": 134, "spmetim": 134, "employ": 135, "stopwordsclean": [136, 149, 160], "mllib": [136, 198], "stopwordsremov": 136, "cleantoken": [136, 149, 160], "stopwords_en": 136, "jvm": [136, 174], "forth": 136, "setlocal": 136, "tfnerdlgraphbuildermodel": 137, "tfnerdlgraphbuild": 137, "sethiddenunitsnumb": 137, "assertiondlapproach": 137, "medicalnerapproach": 137, "gethiddenunitsnumb": 137, "srt": 137, "getgraphfold": 137, "setgraphfil": 137, "greaph": 137, "getgraphfil": 137, "chunktoken": 138, "flatten": 138, "artist": 138, "benezar": 138, "robert": 138, "farendel": 138, "graduat": 138, "luca": 138, "chunktokenizermodel": 138, "recursivetoken": 140, "recurs": [140, 158, 170, 174, 178], "infix": [140, 142], "qam": 140, "setprefix": 140, "setinfix": 140, "recursivetokenizermodel": 140, "regextoken": [141, 145, 202], "tolowercas": [141, 145], "positionalmask": 141, "guarante": 141, "increment": 141, "flag": 141, "eventu": 141, "settolowercas": [141, 145], "nthi": 141, "setpositionalmask": 141, "tokenizedsent": 142, "rulefactori": [142, 167], "targetpattern": 142, "grab": 142, "prefixpattern": 142, "suffixpattern": 142, "infixpattern": 142, "sub": 142, "won": 142, "exceptionspath": 142, "casesensitiveexcept": 142, "contextchar": 142, "splitchar": 142, "didn": 142, "jane": 142, "boyfriend": 142, "getinfixpattern": 142, "getsuffixpattern": 142, "getprefixpattern": 142, "getcontextchar": 142, "getsplitchar": 142, "settargetpattern": 142, "setprefixpattern": 142, "setsuffixpattern": 142, "setinfixpattern": 142, "addinfixpattern": 142, "setexcept": 142, "getexcept": 142, "setexceptionspath": 142, "addexcept": 142, "setcasesensitiveexcept": 142, "getcasesensitiveexcept": 142, "addcontextchar": 142, "setsplitchar": 142, "addsplitchar": 142, "piec": 142, "token_rul": 142, "token2chunk": 143, "17": [143, 190, 192], "wordsegment": 145, "wordsegmenterapproach": 145, "korean": 145, "japanes": 145, "chines": 145, "correspond": [145, 181], "rr": 145, "likewis": 145, "themselv": 145, "\u4e0a\u6d77": 145, "\u8ba1\u5212": 145, "\u5230": 145, "\u672c": 145, "\u4e16\u7eaa": 145, "\u672b": 145, "\u5b9e\u73b0": 145, "\u4eba\u5747": 145, "\u56fd\u5185": 145, "\u751f\u4ea7": 145, "\u603b\u503c": 145, "\u4e94\u5343": 145, "\u7f8e\u5143": 145, "\u4e0a": 145, "\u6d77": 145, "\u8ba1": 145, "\u5212": 145, "\u4e16": 145, "\u7eaa": 145, "\u5b9e": 145, "\u73b0": 145, "\u4eba": 145, "\u5747": 145, "\u56fd": 145, "\u5185": 145, "\u751f": 145, "\u4ea7": 145, "\u603b": 145, "ll\u503c": 145, "\u4e94": 145, "\u5343": 145, "\u7f8e": 145, "\u5143": 145, "shanghai": 145, "plan": 145, "dollar": 145, "capita": 145, "gdp": 145, "wordsegmentermodel": 145, "tip": 145, "frame": 145, "least": 145, "frequent": 145, "ambiguitythreshold": 145, "enableregextoken": 145, "xue": 145, "nianwen": 145, "volum": 145, "februari": 145, "aclweb": 145, "aclanthologi": 145, "o03": 145, "4002": 145, "chinese_train": 145, "utf8": 145, "\u5341": 145, "\u56db": 145, "\u4e0d": 145, "\u662f": 145, "setniter": 145, "trainingdataset": 145, "setambiguitythreshold": 145, "getfrequencythreshold": 145, "getambiguitythreshold": 145, "setenableregextoken": 145, "plit": 145, "words_seg": 145, "wordseg_pku": 145, "zh": 145, "\u7136\u800c": 145, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 145, "\u9019\u6a23": 145, "\u7684": 145, "\u8655\u7406": 145, "\u4e5f": 145, "\u884d\u751f": 145, "\u4e86": 145, "\u4e00\u4e9b": 145, "\u554f\u984c": 145, "outputcol": [146, 148, 149, 150, 151, 154, 157], "inferschema": 146, "tmp": [146, 154, 174, 197], "librispeech_asr_dummy_clean_audio_array_parquet": 146, "float_arrai": 146, "chunkcol": 147, "stringtyp": 147, "setisarrai": 147, "startcol": 147, "startcolbytokenindex": 147, "isarrai": 147, "failonmiss": 147, "chunkassembl": 147, "setchunkcol": 147, "setstartcol": 147, "setstartcolbytokenindex": 147, "setfailonmiss": 147, "disabl": [148, 157], "idcol": [148, 157], "metadatacol": [148, 157], "cleanupmod": [148, 157], "cleanup": [148, 157], "inplac": [148, 157], "inplace_ful": [148, 157], "shrink_ful": [148, 157], "each_ful": [148, 157], "delete_ful": [148, 157], "setidcol": [148, 157], "setmetadatacol": [148, 157], "usabl": 149, "lda": 149, "forest": 149, "featurecol": 149, "cleanannot": [149, 150, 151], "outputasvector": 149, "gloveembed": 149, "finished_sentence_embed": 149, "resultwiths": 149, "1619900017976761": 149, "045552998781204224": 149, "03229299932718277": 149, "685609996318": 149, "42416998744010925": 149, "1378999948501587": 149, "5717899799346924": 149, "5078899860382": 149, "08621499687433243": 149, "15772999823093414": 149, "06067200005054474": 149, "395359992980": 149, "4970499873161316": 149, "7164199948310852": 149, "40119001269340515": 149, "05761000141501": 149, "08170200139284134": 149, "7159299850463867": 149, "20677000284194946": 149, "0295659992843": 149, "valuesplitsymbol": 150, "annotationsplitsymbol": 150, "includemetadata": 150, "outputasarrai": [150, 151], "parseembeddingsvector": 150, "setvaluesplitsymbol": 150, "setannotationsplitsymbol": 150, "setincludemetadata": [150, 202], "setoutputasarrai": [150, 151], "setparseembeddingsvector": 150, "finishedresult": 151, "hasrecursivefit": [152, 153], "java_obj": [152, 177, 180], "py4j": [152, 153, 180], "java_gatewai": [152, 153, 180], "javaobject": [152, 153, 180], "recursivepipelin": [152, 153, 158, 163], "hasrecursivetransform": 153, "doc2_chunk": [155, 174], "embeddings_finish": [155, 174], "graph_finish": [155, 174], "has_recursive_fit": [155, 174], "has_recursive_transform": [155, 174], "light_pipelin": [155, 174], "recursive_pipelin": [155, 174], "token_assembl": [155, 174], "lightpipelin": [156, 184, 205], "parse_embed": [156, 184], "hold": [156, 205], "principl": [156, 205], "everyth": [156, 205, 206], "fullannot": [156, 184], "happi": [156, 200, 202, 205, 206], "prp": [156, 188, 190, 200, 205, 206, 207], "rb": [156, 190, 200, 205, 206, 207], "optional_target": [156, 184], "explain_document_pipelin": [156, 173, 184, 200, 205, 206], "dict_kei": [156, 184], "fullannotateimag": [156, 184], "path_to_imag": [156, 184], "setignoreunsupport": 156, "unsupport": 156, "annotatormodel": [156, 162, 185], "getignoreunsupport": 156, "text2": 157, "document1": 157, "document2": 157, "arg": [158, 177], "kwarg": 158, "decid": 158, "behav": 158, "exactli": 158, "intent": 158, "recursivepipelinemodel": 158, "pipeline_model": [158, 181, 197], "intend": 158, "tab": [159, 181, 197], "escap": 159, "quot": 159, "inputformat": 159, "csvdelimit": 159, "defailt": 159, "comma": 159, "escapecsvdelimit": 159, "table_csv": 159, "csv_data": 159, "input_format": 159, "setcsvdelimit": 159, "setescapecsvdelimit": 159, "tokenassembl": 160, "cleantext": 160, "opensourc": 160, "annotatorapproach": [161, 170, 181], "annotatorproperti": 163, "setlazyannot": 163, "lazili": 163, "getlazyannot": 163, "annotator_approach": [166, 174], "annotator_model": [166, 174], "annotator_properti": [166, 174], "coverage_result": [166, 174], "match_strategi": [166, 174], "recursive_annotator_approach": [166, 174], "regard": 167, "constant": [167, 169], "hasembeddingsproperti": 168, "getdimens": 168, "setnreturnsequ": 168, "recursiveannotatorapproach": 170, "fo": 172, "assist": 173, "map_annot": 173, "f": [173, 181, 197], "output_typ": 173, "udf": 173, "userdefinedfunct": 173, "def": 173, "nnp_token": 173, "lambda": 173, "alia": 173, "epeu": 173, "map_annotations_arrai": 173, "map_annotations_strict": 173, "map_annotations_col": 173, "output_column": 173, "annotatyon_typ": 173, "chunks_df": 173, "pos_chunk": 173, "vbz": [173, 187, 207], "filter_by_annotations_col": 173, "filter_po": 173, "explode_annotations_col": 173, "annotator_java_ml": [174, 178], "annotator_transform": [174, 178], "extended_java_wrapp": [174, 178], "params_getters_sett": [174, 178], "comet": [174, 182, 199], "pretrained_pipelin": [174, 183], "resource_download": [174, 183], "pub_tat": [174, 189], "annotation_audio": 174, "annotation_imag": 174, "apple_silicon": 174, "aarch64": 174, "cache_fold": 174, "log_fold": 174, "cluster_tmp_dir": 174, "real_time_output": 174, "output_level": 174, "correctli": 174, "maco": 174, "linux": 174, "alloc": 174, "directori": [174, 185, 197], "cache_pretrain": 174, "temporarili": 174, "unpack": 174, "hadoop": 174, "dir": 174, "s3": [174, 185], "hdf": 174, "dbf": 174, "annotator_log": 174, "annotatorjavamlread": 175, "mixin": 175, "javamlread": 175, "classmethod": 175, "mlreader": 175, "clazz": 175, "rl": 175, "javaparam": 175, "annotatortransform": 176, "_java_obj": 176, "javawrapp": 177, "extendedjavawrapp": 177, "new_java_arrai": 177, "pylist": 177, "java_class": 177, "todo": 177, "paramsgetterssett": 179, "getparamvalu": 179, "paramnam": 179, "setparamvalu": 179, "recursiveestim": 180, "recursivetransform": 180, "cometlogg": [181, 197], "workspac": 181, "project_nam": [181, 197], "comet_mod": [181, 197], "experiment_id": 181, "experiment_kwarg": 181, "logger": [181, 197], "meta": [181, 199], "practition": [181, 197], "reliabl": [181, 197], "streamlin": [181, 197], "lifecycl": [181, 197, 199], "track": [181, 197, 198], "reproduc": [181, 197, 198], "outputlogpath": [181, 197], "onlin": [181, 197], "reus": 181, "importerror": 181, "output_log_path": [181, 197], "embd": [181, 197], "setshuffleperepoch": [181, 197], "logdir": [181, 197], "interfac": [181, 197, 205], "comet_ml": [181, 197], "log_pipeline_paramet": [181, 197], "log_visu": [181, 197], "html": [181, 197], "viz": [181, 197], "upload": 181, "colum": [181, 197], "ner_chunk": [181, 197], "sparknlp_displai": [181, 197], "nervisu": [181, 197], "idx": [181, 197], "enumer": [181, 197], "label_col": [181, 197], "document_col": [181, 197], "return_html": [181, 197], "log_metr": [181, 197], "sklearn": [181, 197], "preprocess": [181, 197], "multilabelbinar": [181, 197], "classification_report": [181, 197], "preds_df": [181, 197], "topanda": [181, 197], "mlb": [181, 197], "y_true": [181, 197], "fit_transform": [181, 197], "y_pred": [181, 197], "output_dict": [181, 197], "log_paramet": 181, "log_completed_run": 181, "log_file_path": 181, "log_asset": 181, "asset_path": 181, "asset": 181, "log_asset_data": 181, "interv": 181, "refresh": 181, "outstand": 181, "disk_loc": 184, "light_model": 184, "gather": 184, "resourcedownload": [185, 201, 206], "showpublicmodel": [185, 201], "onto_100": 185, "onto_300": 185, "ner_dl_bert": 185, "similarli": 185, "showpublicpipelin": [185, 206], "check_spel": [185, 206], "match_datetim": [185, 206], "downloadmodel": 185, "reader": 185, "j_dwn": 185, "pythonresourcedownload": 185, "downloadmodeldirectli": 185, "unzip": 185, "downloadpipelin": 185, "clearcach": 185, "clear": 185, "filer": 185, "showuncategorizedresourc": 185, "showavailableannot": 185, "documentcol": [187, 188], "sentencecol": [187, 188], "tokencol": 187, "conlllabelindex": 187, "conllposindex": 187, "conlldocidcol": 187, "doc_id": [187, 191], "textcol": [187, 188], "labelcol": 187, "includedocid": 187, "docstart": [187, 207], "eu": [187, 207], "np": [187, 207], "reject": [187, 207], "vp": [187, 207], "misc": [187, 207], "boycott": [187, 207], "british": [187, 207], "lamb": [187, 207], "blackburn": 187, "brussel": 187, "1996": 187, "08": 187, "storage_level": 187, "storagelevel": 187, "disk_onli": 187, "lift": 187, "persist": 187, "uposcol": 188, "upo": 188, "xposcol": 188, "xpo": 188, "lemmacol": 188, "sent_id": 188, "sell": 188, "pron": 188, "nom": 188, "plur": 188, "_": 188, "tens": 188, "conj": 188, "cc": 188, "obj": 188, "spaceaft": 188, "No": [188, 200], "punct": 188, "conllufil": [188, 207], "conlldataset": [188, 207], "morph": 188, "Into": 188, "googleo": 188, "sconj": 188, "propn": 188, "adp": 188, "wp": 188, "vbd": [188, 190, 207], "ago": [190, 207], "posdf": 190, "61": 190, "67": [190, 191, 207], "nonexecut": 190, "69": 190, "76": 190, "director": 190, "78": 190, "81": 190, "84": 190, "outputposcol": 190, "outputdocumentcol": 190, "outputtextcol": 190, "pubtat": [191, 204], "medic": [191, 207], "titl": [191, 207], "medment": [191, 207], "25763772": [191, 207], "dctn4": [191, 207], "t116": [191, 207], "t123": [191, 207], "c4308010": [191, 207], "63": [191, 207], "chronic": [191, 207], "pseudomona": [191, 207], "aeruginosa": [191, 207], "infect": [191, 207], "t047": [191, 207], "c0854135": [191, 207], "82": [191, 207], "cystic": [191, 207], "fibrosi": [191, 207], "c0010674": [191, 207], "120": [191, 207], "pa": [191, 207], "124": [191, 207], "139": [191, 207], "pubtatorfil": 191, "corpus_pubtator_sampl": 191, "pubtatordataset": 191, "finished_token": [191, 202], "finished_po": 191, "finished_n": 191, "finished_token_metadata": 191, "finished_pos_metadata": 191, "finished_label_metadata": 191, "mo": 191, "ispaddedtoken": 191, "pad": 191, "spacytoannot": 192, "token_spac": 192, "sentence_end": 192, "spaci": 192, "multi_doc_token": 192, "went": 192, "night": 192, "bought": 192, "bread": 192, "54": 192, "overview": [196, 204], "workflow": 197, "dedic": 197, "account": 197, "inspect": 197, "init": 197, "sparknlp_experi": 197, "offline_directori": 197, "later": 197, "nativ": 198, "record": 198, "registri": 198, "central": 198, "send": 199, "mlflow": 199, "content": [200, 206], "clearli": 200, "explain_document_ml": [200, 205, 206], "approx": [200, 205, 206], "mb": [200, 205, 206], "ok": [200, 205, 206], "spearhead": 201, "produc": 201, "declar": 201, "accordingli": 201, "extra_loc": 201, "offer": [201, 203, 206], "classifierdl_use_trec50": 201, "classifierdl_use_spam": 201, "column_nam": 201, "preced": 201, "interchang": 202, "road": 202, "proce": 202, "At": 202, "sens": 206, "constantli": 206, "train_po": 207, "training_conl": 207, "train_corpu": 207, "withcolumnrenam": 207, "trainingpubtatordf": 207, "corpus_pubt": 207}, "objects": {"": [[174, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [89, 0, 0, "-", "annotator"], [155, 0, 0, "-", "base"], [166, 0, 0, "-", "common"], [173, 0, 0, "-", "functions"], [178, 0, 0, "-", "internal"], [182, 0, 0, "-", "logging"], [183, 0, 0, "-", "pretrained"], [174, 3, 1, "", "start"], [189, 0, 0, "-", "training"], [194, 0, 0, "-", "upload_to_hub"], [195, 0, 0, "-", "util"], [174, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [9, 0, 0, "-", "chunk2_doc"], [10, 0, 0, "-", "chunker"], [30, 0, 0, "-", "classifier_dl"], [47, 0, 0, "-", "coref"], [51, 0, 0, "-", "cv"], [55, 0, 0, "-", "date2_chunk"], [57, 0, 0, "-", "dependency"], [59, 0, 0, "-", "document_character_text_splitter"], [60, 0, 0, "-", "document_normalizer"], [61, 0, 0, "-", "document_token_splitter"], [62, 0, 0, "-", "document_token_splitter_test"], [73, 0, 0, "-", "embeddings"], [87, 0, 0, "-", "er"], [88, 0, 0, "-", "graph_extraction"], [90, 0, 0, "-", "keyword_extraction"], [92, 0, 0, "-", "ld_dl"], [94, 0, 0, "-", "lemmatizer"], [97, 0, 0, "-", "matcher"], [101, 0, 0, "-", "n_gram_generator"], [102, 0, 0, "-", "ner"], [109, 0, 0, "-", "normalizer"], [110, 0, 0, "-", "openai"], [115, 0, 0, "-", "param"], [116, 0, 0, "-", "pos"], [118, 0, 0, "-", "sentence"], [121, 0, 0, "-", "sentiment"], [126, 0, 0, "-", "seq2seq"], [130, 0, 0, "-", "similarity"], [132, 0, 0, "-", "spell_check"], [135, 0, 0, "-", "stemmer"], [136, 0, 0, "-", "stop_words_cleaner"], [137, 0, 0, "-", "tf_ner_dl_graph_builder"], [139, 0, 0, "-", "token"], [143, 0, 0, "-", "token2_chunk"], [144, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"], [8, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[8, 2, 1, "", "getIsMultilingual"], [8, 2, 1, "", "getLanguage"], [8, 2, 1, "", "loadSavedModel"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"], [8, 2, 1, "", "setLanguage"], [8, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[9, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[10, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[10, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[11, 0, 0, "-", "albert_for_question_answering"], [12, 0, 0, "-", "albert_for_sequence_classification"], [13, 0, 0, "-", "albert_for_token_classification"], [14, 0, 0, "-", "bart_for_zero_shot_classification"], [15, 0, 0, "-", "bert_for_question_answering"], [16, 0, 0, "-", "bert_for_sequence_classification"], [17, 0, 0, "-", "bert_for_token_classification"], [18, 0, 0, "-", "bert_for_zero_shot_classification"], [19, 0, 0, "-", "camembert_for_question_answering"], [20, 0, 0, "-", "camembert_for_sequence_classification"], [21, 0, 0, "-", "camembert_for_token_classification"], [22, 0, 0, "-", "classifier_dl"], [23, 0, 0, "-", "deberta_for_question_answering"], [24, 0, 0, "-", "deberta_for_sequence_classification"], [25, 0, 0, "-", "deberta_for_token_classification"], [26, 0, 0, "-", "distil_bert_for_question_answering"], [27, 0, 0, "-", "distil_bert_for_sequence_classification"], [28, 0, 0, "-", "distil_bert_for_token_classification"], [29, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [31, 0, 0, "-", "longformer_for_question_answering"], [32, 0, 0, "-", "longformer_for_sequence_classification"], [33, 0, 0, "-", "longformer_for_token_classification"], [34, 0, 0, "-", "multi_classifier_dl"], [35, 0, 0, "-", "roberta_for_question_answering"], [36, 0, 0, "-", "roberta_for_sequence_classification"], [37, 0, 0, "-", "roberta_for_token_classification"], [38, 0, 0, "-", "roberta_for_zero_shot_classification"], [39, 0, 0, "-", "sentiment_dl"], [40, 0, 0, "-", "tapas_for_question_answering"], [41, 0, 0, "-", "xlm_roberta_for_question_answering"], [42, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [43, 0, 0, "-", "xlm_roberta_for_token_classification"], [44, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [45, 0, 0, "-", "xlnet_for_sequence_classification"], [46, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setCoalesceSentences"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[13, 2, 1, "", "getClasses"], [13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"], [14, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[16, 2, 1, "", "getClasses"], [16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setCoalesceSentences"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[17, 2, 1, "", "getClasses"], [17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[20, 2, 1, "", "getClasses"], [20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setCoalesceSentences"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[21, 2, 1, "", "getClasses"], [21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, 1, 1, "", "ClassifierDLApproach"], [22, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[22, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[24, 2, 1, "", "getClasses"], [24, 2, 1, "", "loadSavedModel"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setCoalesceSentences"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[25, 2, 1, "", "getClasses"], [25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[29, 2, 1, "", "getClasses"], [29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setCoalesceSentences"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[32, 2, 1, "", "getClasses"], [32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setCoalesceSentences"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[33, 2, 1, "", "getClasses"], [33, 2, 1, "", "loadSavedModel"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, 1, 1, "", "MultiClassifierDLApproach"], [34, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[34, 2, 1, "", "setThreshold"], [34, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"], [34, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"], [36, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[37, 2, 1, "", "getClasses"], [37, 2, 1, "", "loadSavedModel"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setConfigProtoBytes"], [37, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[38, 2, 1, "", "getClasses"], [38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setCoalesceSentences"], [38, 2, 1, "", "setConfigProtoBytes"], [38, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, 1, 1, "", "SentimentDLApproach"], [39, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[39, 2, 1, "", "setDropout"], [39, 2, 1, "", "setThreshold"], [39, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setConfigProtoBytes"], [39, 2, 1, "", "setThreshold"], [39, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[40, 2, 1, "", "loadSavedModel"], [40, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[42, 2, 1, "", "getClasses"], [42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"], [42, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[43, 2, 1, "", "getClasses"], [43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[44, 2, 1, "", "getClasses"], [44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setCoalesceSentences"], [44, 2, 1, "", "setConfigProtoBytes"], [44, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[45, 2, 1, "", "getClasses"], [45, 2, 1, "", "loadSavedModel"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setCoalesceSentences"], [45, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[46, 2, 1, "", "getClasses"], [46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[48, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[48, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"], [48, 2, 1, "", "setMaxSegmentLength"], [48, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[49, 0, 0, "-", "clip_for_zero_shot_classification"], [50, 0, 0, "-", "convnext_for_image_classification"], [52, 0, 0, "-", "swin_for_image_classification"], [53, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [54, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[49, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[49, 2, 1, "", "getCandidateLabels"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[50, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[50, 2, 1, "", "getClasses"], [50, 2, 1, "", "loadSavedModel"], [50, 2, 1, "", "pretrained"], [50, 2, 1, "", "setConfigProtoBytes"], [50, 2, 1, "", "setCropPct"], [50, 2, 1, "", "setDoRescale"], [50, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[52, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[52, 2, 1, "", "getClasses"], [52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"], [52, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[53, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[53, 2, 1, "", "loadSavedModel"], [53, 2, 1, "", "pretrained"], [53, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[54, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[54, 2, 1, "", "getClasses"], [54, 2, 1, "", "loadSavedModel"], [54, 2, 1, "", "pretrained"], [54, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[55, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[55, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[56, 0, 0, "-", "dependency_parser"], [58, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[56, 1, 1, "", "DependencyParserApproach"], [56, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[56, 2, 1, "", "setConllU"], [56, 2, 1, "", "setDependencyTreeBank"], [56, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[56, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[58, 1, 1, "", "TypedDependencyParserApproach"], [58, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[58, 2, 1, "", "setConll2009"], [58, 2, 1, "", "setConllU"], [58, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[58, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_character_text_splitter": [[59, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[59, 2, 1, "", "setChunkOverlap"], [59, 2, 1, "", "setChunkSize"], [59, 2, 1, "", "setExplodeSplits"], [59, 2, 1, "", "setKeepSeparators"], [59, 2, 1, "", "setPatternsAreRegex"], [59, 2, 1, "", "setSplitPatterns"], [59, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_normalizer": [[60, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[60, 2, 1, "", "setAction"], [60, 2, 1, "", "setEncoding"], [60, 2, 1, "", "setLowercase"], [60, 2, 1, "", "setPatterns"], [60, 2, 1, "", "setPolicy"], [60, 2, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[61, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[61, 2, 1, "", "setExplodeSplits"], [61, 2, 1, "", "setNumTokens"], [61, 2, 1, "", "setTokenOverlap"], [61, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[62, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[62, 2, 1, "", "setUp"]], "sparknlp.annotator.embeddings": [[63, 0, 0, "-", "albert_embeddings"], [64, 0, 0, "-", "bert_embeddings"], [65, 0, 0, "-", "bert_sentence_embeddings"], [66, 0, 0, "-", "camembert_embeddings"], [67, 0, 0, "-", "chunk_embeddings"], [68, 0, 0, "-", "deberta_embeddings"], [69, 0, 0, "-", "distil_bert_embeddings"], [70, 0, 0, "-", "doc2vec"], [71, 0, 0, "-", "e5_embeddings"], [72, 0, 0, "-", "elmo_embeddings"], [74, 0, 0, "-", "instructor_embeddings"], [75, 0, 0, "-", "longformer_embeddings"], [76, 0, 0, "-", "mpnet_embeddings"], [77, 0, 0, "-", "roberta_embeddings"], [78, 0, 0, "-", "roberta_sentence_embeddings"], [79, 0, 0, "-", "sentence_embeddings"], [80, 0, 0, "-", "universal_sentence_encoder"], [81, 0, 0, "-", "word2vec"], [82, 0, 0, "-", "word_embeddings"], [83, 0, 0, "-", "xlm_roberta_embeddings"], [84, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [85, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[63, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[64, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[64, 2, 1, "", "loadSavedModel"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[65, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[65, 2, 1, "", "loadSavedModel"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setConfigProtoBytes"], [65, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[66, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[66, 2, 1, "", "loadSavedModel"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[67, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[67, 2, 1, "", "setPoolingStrategy"], [67, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[68, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[68, 2, 1, "", "loadSavedModel"], [68, 2, 1, "", "pretrained"], [68, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[69, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[69, 2, 1, "", "loadSavedModel"], [69, 2, 1, "", "pretrained"], [69, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[70, 1, 1, "", "Doc2VecApproach"], [70, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[70, 2, 1, "", "setMaxIter"], [70, 2, 1, "", "setMaxSentenceLength"], [70, 2, 1, "", "setMinCount"], [70, 2, 1, "", "setNumPartitions"], [70, 2, 1, "", "setSeed"], [70, 2, 1, "", "setStepSize"], [70, 2, 1, "", "setVectorSize"], [70, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[70, 2, 1, "", "getVectors"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[71, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[71, 2, 1, "", "loadSavedModel"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[72, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setBatchSize"], [72, 2, 1, "", "setConfigProtoBytes"], [72, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[74, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[74, 2, 1, "", "loadSavedModel"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setConfigProtoBytes"], [74, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[75, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[75, 2, 1, "", "loadSavedModel"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[76, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[76, 2, 1, "", "loadSavedModel"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[77, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[77, 2, 1, "", "loadSavedModel"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[78, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[78, 2, 1, "", "loadSavedModel"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[79, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[79, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[80, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[80, 2, 1, "", "loadSavedModel"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setConfigProtoBytes"], [80, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[81, 1, 1, "", "Word2VecApproach"], [81, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[81, 2, 1, "", "setMaxIter"], [81, 2, 1, "", "setMaxSentenceLength"], [81, 2, 1, "", "setMinCount"], [81, 2, 1, "", "setNumPartitions"], [81, 2, 1, "", "setSeed"], [81, 2, 1, "", "setStepSize"], [81, 2, 1, "", "setVectorSize"], [81, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[81, 2, 1, "", "getVectors"], [81, 2, 1, "", "pretrained"], [81, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[82, 1, 1, "", "WordEmbeddings"], [82, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[82, 2, 1, "", "setReadCacheSize"], [82, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[82, 2, 1, "", "loadStorage"], [82, 2, 1, "", "overallCoverage"], [82, 2, 1, "", "pretrained"], [82, 2, 1, "", "setReadCacheSize"], [82, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[83, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[83, 2, 1, "", "loadSavedModel"], [83, 2, 1, "", "pretrained"], [83, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[84, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[84, 2, 1, "", "loadSavedModel"], [84, 2, 1, "", "pretrained"], [84, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[85, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[85, 2, 1, "", "loadSavedModel"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[86, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[86, 1, 1, "", "EntityRulerApproach"], [86, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[86, 2, 1, "", "setAlphabetResource"], [86, 2, 1, "", "setPatternsResource"], [86, 2, 1, "", "setSentenceMatch"], [86, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[88, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[88, 2, 1, "", "setDelimiter"], [88, 2, 1, "", "setDependencyParserModel"], [88, 2, 1, "", "setEntityTypes"], [88, 2, 1, "", "setExplodeEntities"], [88, 2, 1, "", "setIncludeEdges"], [88, 2, 1, "", "setMaxSentenceSize"], [88, 2, 1, "", "setMergeEntities"], [88, 2, 1, "", "setMergeEntitiesIOBFormat"], [88, 2, 1, "", "setMinSentenceSize"], [88, 2, 1, "", "setPosModel"], [88, 2, 1, "", "setRelationshipTypes"], [88, 2, 1, "", "setRootTokens"], [88, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[91, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[91, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[91, 2, 1, "", "getStopWords"], [91, 2, 1, "", "loadDefaultStopWords"], [91, 2, 1, "", "setMaxNGrams"], [91, 2, 1, "", "setMinNGrams"], [91, 2, 1, "", "setNKeywords"], [91, 2, 1, "", "setStopWords"], [91, 2, 1, "", "setThreshold"], [91, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[93, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[93, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[93, 2, 1, "", "pretrained"], [93, 2, 1, "", "setCoalesceSentences"], [93, 2, 1, "", "setConfigProtoBytes"], [93, 2, 1, "", "setThreshold"], [93, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[94, 1, 1, "", "Lemmatizer"], [94, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[94, 2, 1, "", "setDictionary"], [94, 2, 1, "", "setFormCol"], [94, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[94, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[95, 0, 0, "-", "big_text_matcher"], [96, 0, 0, "-", "date_matcher"], [98, 0, 0, "-", "multi_date_matcher"], [99, 0, 0, "-", "regex_matcher"], [100, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[95, 1, 1, "", "BigTextMatcher"], [95, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[95, 2, 1, "", "setCaseSensitive"], [95, 2, 1, "", "setEntities"], [95, 2, 1, "", "setMergeOverlapping"], [95, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[95, 2, 1, "", "loadStorage"], [95, 2, 1, "", "pretrained"], [95, 2, 1, "", "setCaseSensitive"], [95, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[96, 1, 1, "", "DateMatcher"], [96, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[96, 2, 1, "", "setAnchorDateDay"], [96, 2, 1, "", "setAnchorDateMonth"], [96, 2, 1, "", "setAnchorDateYear"], [96, 2, 1, "", "setDefaultDayWhenMissing"], [96, 2, 1, "", "setInputFormats"], [96, 2, 1, "", "setOutputFormat"], [96, 2, 1, "", "setReadMonthFirst"], [96, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[98, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[99, 1, 1, "", "RegexMatcher"], [99, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[99, 2, 1, "", "setDelimiter"], [99, 2, 1, "", "setExternalRules"], [99, 2, 1, "", "setRules"], [99, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[100, 1, 1, "", "TextMatcher"], [100, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[100, 2, 1, "", "setBuildFromTokens"], [100, 2, 1, "", "setCaseSensitive"], [100, 2, 1, "", "setEntities"], [100, 2, 1, "", "setEntityValue"], [100, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[100, 2, 1, "", "pretrained"], [100, 2, 1, "", "setBuildFromTokens"], [100, 2, 1, "", "setEntityValue"], [100, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[101, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[101, 2, 1, "", "setDelimiter"], [101, 2, 1, "", "setEnableCumulative"], [101, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[103, 0, 0, "-", "ner_approach"], [104, 0, 0, "-", "ner_converter"], [105, 0, 0, "-", "ner_crf"], [106, 0, 0, "-", "ner_dl"], [107, 0, 0, "-", "ner_overwriter"], [108, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[103, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[103, 2, 1, "", "getLabelColumn"], [103, 2, 1, "", "setEntities"], [103, 2, 1, "", "setLabelColumn"], [103, 2, 1, "", "setMaxEpochs"], [103, 2, 1, "", "setMinEpochs"], [103, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[104, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[104, 2, 1, "", "setNerHasNoSchema"], [104, 2, 1, "", "setPreservePosition"], [104, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[105, 1, 1, "", "NerCrfApproach"], [105, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[105, 2, 1, "", "setC0"], [105, 2, 1, "", "setExternalFeatures"], [105, 2, 1, "", "setIncludeConfidence"], [105, 2, 1, "", "setL2"], [105, 2, 1, "", "setLossEps"], [105, 2, 1, "", "setMinW"], [105, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[105, 2, 1, "", "pretrained"], [105, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[106, 1, 1, "", "NerDLApproach"], [106, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[106, 2, 1, "", "setBatchSize"], [106, 2, 1, "", "setBestModelMetric"], [106, 2, 1, "", "setConfigProtoBytes"], [106, 2, 1, "", "setDropout"], [106, 2, 1, "", "setEnableMemoryOptimizer"], [106, 2, 1, "", "setGraphFolder"], [106, 2, 1, "", "setIncludeAllConfidenceScores"], [106, 2, 1, "", "setIncludeConfidence"], [106, 2, 1, "", "setLr"], [106, 2, 1, "", "setPo"], [106, 2, 1, "", "setUseBestModel"], [106, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[106, 2, 1, "", "pretrained"], [106, 2, 1, "", "setConfigProtoBytes"], [106, 2, 1, "", "setIncludeAllConfidenceScores"], [106, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[107, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[107, 2, 1, "", "setNerWords"], [107, 2, 1, "", "setNewNerEntity"], [107, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[108, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[108, 2, 1, "", "getClasses"], [108, 2, 1, "", "load"], [108, 2, 1, "", "pretrained"], [108, 2, 1, "", "setEntityDefinitions"], [108, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[109, 1, 1, "", "Normalizer"], [109, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[109, 2, 1, "", "setCleanupPatterns"], [109, 2, 1, "", "setLowercase"], [109, 2, 1, "", "setMaxLength"], [109, 2, 1, "", "setMinLength"], [109, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.openai": [[111, 0, 0, "-", "openai_completion"], [112, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[111, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[111, 2, 1, "", "setBestOf"], [111, 2, 1, "", "setEcho"], [111, 2, 1, "", "setFrequencyPenalty"], [111, 2, 1, "", "setLogitBias"], [111, 2, 1, "", "setLogprobs"], [111, 2, 1, "", "setMaxTokens"], [111, 2, 1, "", "setModel"], [111, 2, 1, "", "setNumberOfCompletions"], [111, 2, 1, "", "setPresencePenalty"], [111, 2, 1, "", "setStop"], [111, 2, 1, "", "setSuffix"], [111, 2, 1, "", "setTemperature"], [111, 2, 1, "", "setTopP"], [111, 2, 1, "", "setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[112, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[112, 2, 1, "", "setModel"], [112, 2, 1, "", "setUser"]], "sparknlp.annotator.param": [[113, 0, 0, "-", "classifier_encoder"], [114, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[113, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[113, 2, 1, "", "setBatchSize"], [113, 2, 1, "", "setConfigProtoBytes"], [113, 2, 1, "", "setLabelColumn"], [113, 2, 1, "", "setLr"], [113, 2, 1, "", "setMaxEpochs"], [113, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[114, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[114, 2, 1, "", "setEnableOutputLogs"], [114, 2, 1, "", "setEvaluationLogExtended"], [114, 2, 1, "", "setOutputLogsPath"], [114, 2, 1, "", "setTestDataset"], [114, 2, 1, "", "setValidationSplit"], [114, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[117, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[117, 1, 1, "", "PerceptronApproach"], [117, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[117, 2, 1, "", "getNIterations"], [117, 2, 1, "", "setIterations"], [117, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[117, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[119, 0, 0, "-", "sentence_detector"], [120, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[119, 1, 1, "", "SentenceDetector"], [119, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[119, 2, 1, "", "setCustomBounds"], [119, 2, 1, "", "setCustomBoundsStrategy"], [119, 2, 1, "", "setDetectLists"], [119, 2, 1, "", "setExplodeSentences"], [119, 2, 1, "", "setMaxLength"], [119, 2, 1, "", "setMinLength"], [119, 2, 1, "", "setSplitLength"], [119, 2, 1, "", "setUseAbbreviations"], [119, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[120, 1, 1, "", "SentenceDetectorDLApproach"], [120, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[120, 2, 1, "", "setEpochsNumber"], [120, 2, 1, "", "setExplodeSentences"], [120, 2, 1, "", "setImpossiblePenultimates"], [120, 2, 1, "", "setModel"], [120, 2, 1, "", "setOutputLogsPath"], [120, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[120, 2, 1, "", "pretrained"], [120, 2, 1, "", "setCustomBounds"], [120, 2, 1, "", "setExplodeSentences"], [120, 2, 1, "", "setImpossiblePenultimates"], [120, 2, 1, "", "setMaxLength"], [120, 2, 1, "", "setMinLength"], [120, 2, 1, "", "setModel"], [120, 2, 1, "", "setSplitLength"], [120, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[122, 0, 0, "-", "sentiment_detector"], [123, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[122, 1, 1, "", "SentimentDetector"], [122, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[122, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[123, 1, 1, "", "ViveknSentimentApproach"], [123, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[123, 2, 1, "", "setPruneCorpus"], [123, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[123, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[124, 0, 0, "-", "bart_transformer"], [125, 0, 0, "-", "gpt2_transformer"], [127, 0, 0, "-", "marian_transformer"], [128, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.bart_transformer": [[124, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[124, 2, 1, "", "loadSavedModel"], [124, 2, 1, "", "pretrained"], [124, 2, 1, "", "setBeamSize"], [124, 2, 1, "", "setCache"], [124, 2, 1, "", "setConfigProtoBytes"], [124, 2, 1, "", "setDoSample"], [124, 2, 1, "", "setIgnoreTokenIds"], [124, 2, 1, "", "setMaxOutputLength"], [124, 2, 1, "", "setMinOutputLength"], [124, 2, 1, "", "setNoRepeatNgramSize"], [124, 2, 1, "", "setRepetitionPenalty"], [124, 2, 1, "", "setTask"], [124, 2, 1, "", "setTemperature"], [124, 2, 1, "", "setTopK"], [124, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[125, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[125, 2, 1, "", "loadSavedModel"], [125, 2, 1, "", "pretrained"], [125, 2, 1, "", "setConfigProtoBytes"], [125, 2, 1, "", "setDoSample"], [125, 2, 1, "", "setIgnoreTokenIds"], [125, 2, 1, "", "setMaxOutputLength"], [125, 2, 1, "", "setMinOutputLength"], [125, 2, 1, "", "setNoRepeatNgramSize"], [125, 2, 1, "", "setRepetitionPenalty"], [125, 2, 1, "", "setTask"], [125, 2, 1, "", "setTemperature"], [125, 2, 1, "", "setTopK"], [125, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[127, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[127, 2, 1, "", "loadSavedModel"], [127, 2, 1, "", "pretrained"], [127, 2, 1, "", "setConfigProtoBytes"], [127, 2, 1, "", "setDoSample"], [127, 2, 1, "", "setIgnoreTokenIds"], [127, 2, 1, "", "setLangId"], [127, 2, 1, "", "setMaxInputLength"], [127, 2, 1, "", "setMaxOutputLength"], [127, 2, 1, "", "setNoRepeatNgramSize"], [127, 2, 1, "", "setRandomSeed"], [127, 2, 1, "", "setRepetitionPenalty"], [127, 2, 1, "", "setTemperature"], [127, 2, 1, "", "setTopK"], [127, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[128, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[128, 2, 1, "", "loadSavedModel"], [128, 2, 1, "", "pretrained"], [128, 2, 1, "", "setConfigProtoBytes"], [128, 2, 1, "", "setDoSample"], [128, 2, 1, "", "setIgnoreTokenIds"], [128, 2, 1, "", "setMaxNewTokens"], [128, 2, 1, "", "setMaxOutputLength"], [128, 2, 1, "", "setMinOutputLength"], [128, 2, 1, "", "setNoRepeatNgramSize"], [128, 2, 1, "", "setRepetitionPenalty"], [128, 2, 1, "", "setStopAtEos"], [128, 2, 1, "", "setTask"], [128, 2, 1, "", "setTemperature"], [128, 2, 1, "", "setTopK"], [128, 2, 1, "", "setTopP"], [128, 2, 1, "", "setUseCache"]], "sparknlp.annotator.similarity": [[129, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[129, 1, 1, "", "DocumentSimilarityRankerApproach"], [129, 1, 1, "", "DocumentSimilarityRankerFinisher"], [129, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[129, 2, 1, "", "setBucketLength"], [129, 2, 1, "", "setIdentityRanking"], [129, 2, 1, "", "setNumHashTables"], [129, 2, 1, "", "setNumberOfNeighbours"], [129, 2, 1, "", "setSimilarityMethod"], [129, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[129, 2, 1, "", "getInputCols"], [129, 2, 1, "", "getOutputCols"], [129, 2, 1, "", "setExtractNearestNeighbor"], [129, 2, 1, "", "setInputCols"], [129, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[131, 0, 0, "-", "context_spell_checker"], [133, 0, 0, "-", "norvig_sweeting"], [134, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[131, 1, 1, "", "ContextSpellCheckerApproach"], [131, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[131, 2, 1, "", "addRegexClass"], [131, 2, 1, "", "addVocabClass"], [131, 2, 1, "", "setBatchSize"], [131, 2, 1, "", "setCaseStrategy"], [131, 2, 1, "", "setClassCount"], [131, 2, 1, "", "setCompoundCount"], [131, 2, 1, "", "setConfigProtoBytes"], [131, 2, 1, "", "setEpochs"], [131, 2, 1, "", "setErrorThreshold"], [131, 2, 1, "", "setFinalRate"], [131, 2, 1, "", "setGraphFolder"], [131, 2, 1, "", "setInitialRate"], [131, 2, 1, "", "setLanguageModelClasses"], [131, 2, 1, "", "setMaxCandidates"], [131, 2, 1, "", "setMaxSentLen"], [131, 2, 1, "", "setMaxWindowLen"], [131, 2, 1, "", "setMinCount"], [131, 2, 1, "", "setTradeoff"], [131, 2, 1, "", "setValidationFraction"], [131, 2, 1, "", "setWeightedDistPath"], [131, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[131, 2, 1, "", "getWordClasses"], [131, 2, 1, "", "pretrained"], [131, 2, 1, "", "setCaseStrategy"], [131, 2, 1, "", "setClasses"], [131, 2, 1, "", "setCompareLowcase"], [131, 2, 1, "", "setConfigProtoBytes"], [131, 2, 1, "", "setCorrectSymbols"], [131, 2, 1, "", "setErrorThreshold"], [131, 2, 1, "", "setGamma"], [131, 2, 1, "", "setIdsVocab"], [131, 2, 1, "", "setMaxCandidates"], [131, 2, 1, "", "setMaxWindowLen"], [131, 2, 1, "", "setTradeoff"], [131, 2, 1, "", "setVocabFreq"], [131, 2, 1, "", "setVocabIds"], [131, 2, 1, "", "setWeights"], [131, 2, 1, "", "setWordMaxDistance"], [131, 2, 1, "", "updateRegexClass"], [131, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[133, 1, 1, "", "NorvigSweetingApproach"], [133, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[133, 2, 1, "", "setCaseSensitive"], [133, 2, 1, "", "setDictionary"], [133, 2, 1, "", "setDoubleVariants"], [133, 2, 1, "", "setFrequencyPriority"], [133, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[133, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[134, 1, 1, "", "SymmetricDeleteApproach"], [134, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[134, 2, 1, "", "setDeletesThreshold"], [134, 2, 1, "", "setDictionary"], [134, 2, 1, "", "setFrequencyThreshold"], [134, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[134, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[135, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[136, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[136, 2, 1, "", "loadDefaultStopWords"], [136, 2, 1, "", "pretrained"], [136, 2, 1, "", "setCaseSensitive"], [136, 2, 1, "", "setLocale"], [136, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[137, 1, 1, "", "TFNerDLGraphBuilder"], [137, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[137, 2, 1, "", "getGraphFile"], [137, 2, 1, "", "getGraphFolder"], [137, 2, 1, "", "getHiddenUnitsNumber"], [137, 2, 1, "", "getInputCols"], [137, 2, 1, "", "getLabelColumn"], [137, 2, 1, "", "setGraphFile"], [137, 2, 1, "", "setGraphFolder"], [137, 2, 1, "", "setHiddenUnitsNumber"], [137, 2, 1, "", "setInputCols"], [137, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[138, 0, 0, "-", "chunk_tokenizer"], [140, 0, 0, "-", "recursive_tokenizer"], [141, 0, 0, "-", "regex_tokenizer"], [142, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[138, 1, 1, "", "ChunkTokenizer"], [138, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[140, 1, 1, "", "RecursiveTokenizer"], [140, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[140, 2, 1, "", "setInfixes"], [140, 2, 1, "", "setPrefixes"], [140, 2, 1, "", "setSuffixes"], [140, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[141, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[141, 2, 1, "", "setMaxLength"], [141, 2, 1, "", "setMinLength"], [141, 2, 1, "", "setPattern"], [141, 2, 1, "", "setPositionalMask"], [141, 2, 1, "", "setPreservePosition"], [141, 2, 1, "", "setToLowercase"], [141, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[142, 1, 1, "", "Tokenizer"], [142, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[142, 2, 1, "", "addContextChars"], [142, 2, 1, "", "addException"], [142, 2, 1, "", "addInfixPattern"], [142, 2, 1, "", "addSplitChars"], [142, 2, 1, "", "getCaseSensitiveExceptions"], [142, 2, 1, "", "getContextChars"], [142, 2, 1, "", "getExceptions"], [142, 2, 1, "", "getInfixPatterns"], [142, 2, 1, "", "getPrefixPattern"], [142, 2, 1, "", "getSplitChars"], [142, 2, 1, "", "getSuffixPattern"], [142, 2, 1, "", "setCaseSensitiveExceptions"], [142, 2, 1, "", "setContextChars"], [142, 2, 1, "", "setExceptions"], [142, 2, 1, "", "setExceptionsPath"], [142, 2, 1, "", "setInfixPatterns"], [142, 2, 1, "", "setMaxLength"], [142, 2, 1, "", "setMinLength"], [142, 2, 1, "", "setPrefixPattern"], [142, 2, 1, "", "setSplitChars"], [142, 2, 1, "", "setSplitPattern"], [142, 2, 1, "", "setSuffixPattern"], [142, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[142, 2, 1, "", "addSplitChars"], [142, 2, 1, "", "pretrained"], [142, 2, 1, "", "setSplitChars"], [142, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.token2_chunk": [[143, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.ws": [[145, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[145, 1, 1, "", "WordSegmenterApproach"], [145, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[145, 2, 1, "", "getAmbiguityThreshold"], [145, 2, 1, "", "getFrequencyThreshold"], [145, 2, 1, "", "getNIterations"], [145, 2, 1, "", "setAmbiguityThreshold"], [145, 2, 1, "", "setEnableRegexTokenizer"], [145, 2, 1, "", "setFrequencyThreshold"], [145, 2, 1, "", "setNIterations"], [145, 2, 1, "", "setPattern"], [145, 2, 1, "", "setPosColumn"], [145, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[145, 2, 1, "", "pretrained"], [145, 2, 1, "", "setEnableRegexTokenizer"], [145, 2, 1, "", "setPattern"], [145, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[146, 0, 0, "-", "audio_assembler"], [147, 0, 0, "-", "doc2_chunk"], [148, 0, 0, "-", "document_assembler"], [149, 0, 0, "-", "embeddings_finisher"], [150, 0, 0, "-", "finisher"], [151, 0, 0, "-", "graph_finisher"], [152, 0, 0, "-", "has_recursive_fit"], [153, 0, 0, "-", "has_recursive_transform"], [154, 0, 0, "-", "image_assembler"], [156, 0, 0, "-", "light_pipeline"], [157, 0, 0, "-", "multi_document_assembler"], [158, 0, 0, "-", "recursive_pipeline"], [159, 0, 0, "-", "table_assembler"], [160, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[146, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[146, 2, 1, "", "getOutputCol"], [146, 2, 1, "", "setInputCol"], [146, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[147, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[147, 2, 1, "", "setChunkCol"], [147, 2, 1, "", "setFailOnMissing"], [147, 2, 1, "", "setIsArray"], [147, 2, 1, "", "setLowerCase"], [147, 2, 1, "", "setStartCol"], [147, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[148, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[148, 2, 1, "", "getOutputCol"], [148, 2, 1, "", "setCleanupMode"], [148, 2, 1, "", "setIdCol"], [148, 2, 1, "", "setInputCol"], [148, 2, 1, "", "setMetadataCol"], [148, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[149, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[149, 2, 1, "", "getInputCols"], [149, 2, 1, "", "getOutputCols"], [149, 2, 1, "", "setCleanAnnotations"], [149, 2, 1, "", "setInputCols"], [149, 2, 1, "", "setOutputAsVector"], [149, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[150, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[150, 2, 1, "", "getInputCols"], [150, 2, 1, "", "getOutputCols"], [150, 2, 1, "", "setAnnotationSplitSymbol"], [150, 2, 1, "", "setCleanAnnotations"], [150, 2, 1, "", "setIncludeMetadata"], [150, 2, 1, "", "setInputCols"], [150, 2, 1, "", "setOutputAsArray"], [150, 2, 1, "", "setOutputCols"], [150, 2, 1, "", "setParseEmbeddingsVectors"], [150, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[151, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[151, 2, 1, "", "setCleanAnnotations"], [151, 2, 1, "", "setInputCol"], [151, 2, 1, "", "setOutputAsArray"], [151, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[152, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[153, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[154, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[154, 2, 1, "", "getOutputCol"], [154, 2, 1, "", "setInputCol"], [154, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[156, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[156, 2, 1, "", "annotate"], [156, 2, 1, "", "fullAnnotate"], [156, 2, 1, "", "fullAnnotateImage"], [156, 2, 1, "", "getIgnoreUnsupported"], [156, 2, 1, "", "setIgnoreUnsupported"], [156, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[157, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[157, 2, 1, "", "getOutputCols"], [157, 2, 1, "", "setCleanupMode"], [157, 2, 1, "", "setIdCol"], [157, 2, 1, "", "setInputCols"], [157, 2, 1, "", "setMetadataCol"], [157, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[158, 1, 1, "", "RecursivePipeline"], [158, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[159, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[159, 2, 1, "", "setCsvDelimiter"], [159, 2, 1, "", "setEscapeCsvDelimiter"], [159, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[160, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[160, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[161, 0, 0, "-", "annotator_approach"], [162, 0, 0, "-", "annotator_model"], [163, 0, 0, "-", "annotator_properties"], [164, 0, 0, "-", "annotator_type"], [165, 0, 0, "-", "coverage_result"], [167, 0, 0, "-", "match_strategy"], [168, 0, 0, "-", "properties"], [169, 0, 0, "-", "read_as"], [170, 0, 0, "-", "recursive_annotator_approach"], [171, 0, 0, "-", "storage"], [172, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[161, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[162, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[163, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[163, 2, 1, "", "getInputCols"], [163, 2, 1, "", "getLazyAnnotator"], [163, 2, 1, "", "getOutputCol"], [163, 2, 1, "", "setInputCols"], [163, 2, 1, "", "setLazyAnnotator"], [163, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[167, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[168, 1, 1, "", "HasEmbeddingsProperties"], [168, 3, 1, "", "setBeamSize"], [168, 3, 1, "", "setDoSample"], [168, 3, 1, "", "setMaxOutputLength"], [168, 3, 1, "", "setMinOutputLength"], [168, 3, 1, "", "setNReturnSequences"], [168, 3, 1, "", "setNoRepeatNgramSize"], [168, 3, 1, "", "setRepetitionPenalty"], [168, 3, 1, "", "setTask"], [168, 3, 1, "", "setTemperature"], [168, 3, 1, "", "setTopK"], [168, 3, 1, "", "setTopP"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[168, 2, 1, "", "getDimension"], [168, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[169, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[170, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[172, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[173, 3, 1, "", "explode_annotations_col"], [173, 3, 1, "", "filter_by_annotations_col"], [173, 3, 1, "", "map_annotations"], [173, 3, 1, "", "map_annotations_array"], [173, 3, 1, "", "map_annotations_col"], [173, 3, 1, "", "map_annotations_cols"], [173, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[175, 0, 0, "-", "annotator_java_ml"], [176, 0, 0, "-", "annotator_transformer"], [177, 0, 0, "-", "extended_java_wrapper"], [179, 0, 0, "-", "params_getters_setters"], [180, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[175, 1, 1, "", "AnnotatorJavaMLReadable"], [175, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[175, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[176, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[177, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[177, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[179, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[179, 2, 1, "", "getParamValue"], [179, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[180, 1, 1, "", "RecursiveEstimator"], [180, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[180, 2, 1, "", "fit"]], "sparknlp.logging": [[181, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[181, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[181, 2, 1, "", "end"], [181, 2, 1, "", "log_asset"], [181, 2, 1, "", "log_asset_data"], [181, 2, 1, "", "log_completed_run"], [181, 2, 1, "", "log_metrics"], [181, 2, 1, "", "log_parameters"], [181, 2, 1, "", "log_pipeline_parameters"], [181, 2, 1, "", "log_visualization"], [181, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[184, 0, 0, "-", "pretrained_pipeline"], [185, 0, 0, "-", "resource_downloader"], [186, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[184, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[184, 2, 1, "", "annotate"], [184, 2, 1, "", "fullAnnotate"], [184, 2, 1, "", "fullAnnotateImage"], [184, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[185, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[185, 2, 1, "", "clearCache"], [185, 2, 1, "", "downloadModel"], [185, 2, 1, "", "downloadModelDirectly"], [185, 2, 1, "", "downloadPipeline"], [185, 2, 1, "", "showAvailableAnnotators"], [185, 2, 1, "", "showPublicModels"], [185, 2, 1, "", "showPublicPipelines"], [185, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[187, 0, 0, "-", "conll"], [188, 0, 0, "-", "conllu"], [190, 0, 0, "-", "pos"], [191, 0, 0, "-", "pub_tator"], [192, 0, 0, "-", "spacy_to_annotation"], [193, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[187, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[187, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[188, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[188, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[190, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[190, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[191, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[191, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[192, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 202], "start": 0, "spark": [0, 1, 197, 202, 206], "nlp": [0, 1, 197, 206], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 197], "us": [0, 197, 206], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 184, 185, 187, 188, 190, 191, 192], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 200, 201, 202], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 172, 173, 175, 176, 177, 179, 180, 181, 184, 185, 187, 188, 190, 191, 192, 196], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 175, 176, 177, 179, 180, 181, 184, 185, 187, 188, 190, 191, 192], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7, 8], "hubert_for_ctc": 5, "submodul": [6, 30, 47, 51, 57, 73, 87, 89, 90, 92, 97, 102, 110, 116, 118, 121, 126, 130, 132, 139, 144, 155, 166, 174, 178, 182, 183, 189], "wav2vec2_for_ctc": 7, "whisper_for_ctc": 8, "chunk2_doc": 9, "chunker": 10, "classifier_dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "albert_for_question_answ": 11, "albert_for_sequence_classif": 12, "albert_for_token_classif": 13, "bart_for_zero_shot_classif": 14, "bert_for_question_answ": 15, "bert_for_sequence_classif": 16, "bert_for_token_classif": 17, "bert_for_zero_shot_classif": 18, "camembert_for_question_answ": 19, "camembert_for_sequence_classif": 20, "camembert_for_token_classif": 21, "deberta_for_question_answ": 23, "deberta_for_sequence_classif": 24, "deberta_for_token_classif": 25, "distil_bert_for_question_answ": 26, "distil_bert_for_sequence_classif": 27, "distil_bert_for_token_classif": 28, "distil_bert_for_zero_shot_classif": 29, "longformer_for_question_answ": 31, "longformer_for_sequence_classif": 32, "longformer_for_token_classif": 33, "multi_classifier_dl": 34, "roberta_for_question_answ": 35, "roberta_for_sequence_classif": 36, "roberta_for_token_classif": 37, "roberta_for_zero_shot_classif": 38, "sentiment_dl": 39, "tapas_for_question_answ": 40, "xlm_roberta_for_question_answ": 41, "xlm_roberta_for_sequence_classif": 42, "xlm_roberta_for_token_classif": 43, "xlm_roberta_for_zero_shot_classif": 44, "xlnet_for_sequence_classif": 45, "xlnet_for_token_classif": 46, "coref": [47, 48], "spanbert_coref": 48, "cv": [49, 50, 51, 52, 53, 54], "clip_for_zero_shot_classif": 49, "convnext_for_image_classif": 50, "swin_for_image_classif": 52, "vision_encoder_decoder_for_image_capt": 53, "vit_for_image_classif": 54, "date2_chunk": 55, "depend": [56, 57, 58], "dependency_pars": 56, "typed_dependency_pars": 58, "document_character_text_splitt": 59, "document_norm": 60, "document_token_splitt": 61, "document_token_splitter_test": 62, "embed": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "albert_embed": 63, "bert_embed": 64, "bert_sentence_embed": 65, "camembert_embed": 66, "chunk_embed": 67, "deberta_embed": 68, "distil_bert_embed": 69, "doc2vec": 70, "e5_embed": 71, "elmo_embed": 72, "instructor_embed": 74, "longformer_embed": 75, "mpnet_embed": 76, "roberta_embed": 77, "roberta_sentence_embed": 78, "sentence_embed": 79, "universal_sentence_encod": 80, "word2vec": 81, "word_embed": 82, "xlm_roberta_embed": 83, "xlm_roberta_sentence_embed": 84, "xlnet_embed": 85, "er": [86, 87], "entity_rul": 86, "graph_extract": 88, "subpackag": [89, 174], "keyword_extract": [90, 91], "yake_keyword_extract": 91, "ld_dl": [92, 93], "language_detector_dl": 93, "lemmat": 94, "matcher": [95, 96, 97, 98, 99, 100], "big_text_match": 95, "date_match": 96, "multi_date_match": 98, "regex_match": 99, "text_match": 100, "n_gram_gener": 101, "ner": [102, 103, 104, 105, 106, 107, 108], "ner_approach": 103, "ner_convert": 104, "ner_crf": 105, "ner_dl": 106, "ner_overwrit": 107, "zero_shot_ner_model": 108, "normal": 109, "openai": [110, 111, 112], "openai_complet": 111, "openai_embed": 112, "param": [113, 114, 115], "classifier_encod": 113, "evaluation_dl_param": 114, "po": [116, 117, 190, 207], "perceptron": 117, "sentenc": [118, 119, 120, 202], "sentence_detector": 119, "sentence_detector_dl": 120, "sentiment": [121, 122, 123], "sentiment_detector": 122, "vivekn_senti": 123, "seq2seq": [124, 125, 126, 127, 128], "bart_transform": 124, "gpt2_transform": 125, "marian_transform": 127, "t5_transform": 128, "similar": [129, 130], "document_similarity_rank": 129, "spell_check": [131, 132, 133, 134], "context_spell_check": 131, "norvig_sweet": 133, "symmetric_delet": 134, "stemmer": 135, "stop_words_clean": 136, "tf_ner_dl_graph_build": 137, "token": [138, 139, 140, 141, 142, 202], "chunk_token": 138, "recursive_token": 140, "regex_token": 141, "token2_chunk": 143, "w": [144, 145], "word_segment": 145, "base": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], "audio_assembl": 146, "doc2_chunk": 147, "document_assembl": 148, "embeddings_finish": 149, "finish": [150, 202], "graph_finish": 151, "has_recursive_fit": 152, "has_recursive_transform": 153, "image_assembl": 154, "light_pipelin": 156, "multi_document_assembl": 157, "recursive_pipelin": 158, "table_assembl": 159, "token_assembl": 160, "common": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 201], "annotator_approach": 161, "annotator_model": 162, "annotator_properti": 163, "annotator_typ": 164, "coverage_result": 165, "match_strategi": 167, "properti": 168, "function": [168, 172, 173, 174, 201, 203], "read_a": 169, "recursive_annotator_approach": 170, "storag": 171, "util": [172, 186, 195], "packag": 174, "intern": [175, 176, 177, 178, 179, 180], "annotator_java_ml": 175, "annotator_transform": 176, "extended_java_wrapp": 177, "params_getters_sett": 179, "recurs": 180, "log": [181, 182, 197, 199], "comet": [181, 197], "pretrain": [183, 184, 185, 186, 201, 205, 206], "pretrained_pipelin": 184, "resource_download": 185, "train": [187, 188, 189, 190, 191, 192, 193, 207], "conll": [187, 207], "conllu": [188, 207], "pub_tat": 191, "spacy_to_annot": 192, "tfgraph": 193, "upload_to_hub": 194, "api": 196, "refer": 196, "A": 197, "meta": 197, "machin": [197, 198], "learn": [197, 198], "platform": [197, 198], "pipelin": [197, 202, 205, 206], "paramet": 197, "evalu": 197, "metric": 197, "visual": 197, "run": 197, "an": 197, "offlin": 197, "experi": 197, "mlflow": 198, "lifecycl": 198, "third": 199, "parti": 199, "project": 199, "approach": 201, "model": 201, "note": 201, "avail": [201, 206], "set": 202, "up": 202, "your": 202, "own": 202, "type": 202, "necessari": 202, "import": 202, "construct": 202, "documentassembl": 202, "data": 202, "detect": 202, "out": 202, "put": 202, "all": 202, "togeth": 202, "ml": [202, 206], "helper": 203, "user": 204, "guid": 204, "light": 205, "convert": 205, "pipelinemodel": 205, "download": 206, "As": 206, "lightpipelin": 206, "load": 207, "dataset": 207, "spell": 207, "checker": 207, "pubtat": 207}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [197, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [91, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [117, "module-contents"], [119, "module-contents"], [120, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [184, "module-contents"], [185, "module-contents"], [187, "module-contents"], [188, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [91, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [117, "classes"], [119, "classes"], [120, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [184, "classes"], [185, "classes"], [187, "classes"], [188, "classes"], [190, "classes"], [191, "classes"], [192, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [30, "submodules"], [47, "submodules"], [51, "submodules"], [57, "submodules"], [73, "submodules"], [87, "submodules"], [89, "submodules"], [90, "submodules"], [92, "submodules"], [97, "submodules"], [102, "submodules"], [110, "submodules"], [116, "submodules"], [118, "submodules"], [121, "submodules"], [126, "submodules"], [130, "submodules"], [132, "submodules"], [139, "submodules"], [144, "submodules"], [155, "submodules"], [166, "submodules"], [174, "submodules"], [178, "submodules"], [182, "submodules"], [183, "submodules"], [189, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[30, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[47, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[48, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[49, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[50, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[51, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[52, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[53, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[54, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[55, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[56, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[57, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[58, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[59, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[60, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[61, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[62, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[63, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[64, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[65, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[66, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[67, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[68, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[69, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[70, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[71, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[72, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[73, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[74, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[75, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[76, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[77, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[78, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[79, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[80, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[81, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[82, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[83, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[84, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[85, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[86, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[87, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[88, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[89, "module-sparknlp.annotator"]], "Subpackages": [[89, "subpackages"], [174, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[90, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[91, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[92, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[93, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[94, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[95, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[96, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[97, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[98, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[99, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[100, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[101, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[102, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[103, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[104, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[105, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[106, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[107, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[108, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[109, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[110, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[111, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[112, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[113, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[114, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[115, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[116, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[117, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[118, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[119, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[120, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[121, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[122, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[123, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.bart_transformer": [[124, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[125, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[126, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.marian_transformer": [[127, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[128, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[129, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[130, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[131, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[132, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[133, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[134, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[135, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[136, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[137, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[138, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[139, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[140, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[141, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[142, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[143, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[144, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[145, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[146, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[147, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[148, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[149, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[150, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[151, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[152, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[153, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[154, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[155, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[156, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[157, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[158, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[159, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[160, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[161, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[162, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[163, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[164, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[165, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[166, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[167, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[168, "module-sparknlp.common.properties"]], "Functions": [[168, "functions"], [172, "functions"], [173, "functions"], [174, "functions"]], "sparknlp.common.read_as": [[169, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[170, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[171, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[172, "module-sparknlp.common.utils"]], "sparknlp.functions": [[173, "module-sparknlp.functions"]], "sparknlp": [[174, "module-sparknlp"]], "Package Contents": [[174, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[175, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[176, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[177, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[178, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[179, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[180, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[181, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[182, "module-sparknlp.logging"]], "sparknlp.pretrained": [[183, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[184, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[185, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[186, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[187, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[188, "module-sparknlp.training.conllu"]], "sparknlp.training": [[189, "module-sparknlp.training"]], "sparknlp.training.pos": [[190, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[191, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[192, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[193, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[194, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[195, "module-sparknlp.util"]], "API Reference": [[196, "api-reference"]], "Modules": [[196, "modules"]], "Comet - A meta machine learning platform": [[197, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[197, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[197, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[197, "logging-evaluation-metrics"]], "Logging Visualizations": [[197, "logging-visualizations"]], "Running An Offline Experiment": [[197, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[198, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[199, "third-party-projects"]], "Logging": [[199, "logging"]], "Annotation": [[200, "annotation"]], "Annotators": [[201, "annotators"]], "Annotator Approaches": [[201, "annotator-approaches"]], "Annotator Models": [[201, "annotator-models"]], "Note": [[201, "note"]], "Pretrained Models": [[201, "pretrained-models"]], "Common Functions": [[201, "common-functions"]], "Available Annotators": [[201, "available-annotators"]], "Setting up your own pipeline": [[202, "setting-up-your-own-pipeline"]], "Annotator types": [[202, "annotator-types"]], "Necessary imports": [[202, "necessary-imports"]], "Constructing the Pipeline": [[202, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[202, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[202, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[202, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[202, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[203, "helper-functions"]], "User Guide": [[204, "user-guide"]], "Light Pipelines": [[205, "light-pipelines"]], "Converting PipelineModels": [[205, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[205, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[206, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[206, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[206, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[206, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[206, "available-pipelines"]], "Loading datasets for training": [[207, "loading-datasets-for-training"]], "POS Dataset": [[207, "pos-dataset"]], "CoNLL Dataset": [[207, "conll-dataset"]], "CoNLLU Dataset": [[207, "conllu-dataset"]], "Spell Checkers Dataset": [[207, "spell-checkers-dataset"]], "PubTator Dataset": [[207, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.audio.whisper_for_ctc"], [9, "module-sparknlp.annotator.chunk2_doc"], [10, "module-sparknlp.annotator.chunker"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [22, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [30, "module-sparknlp.annotator.classifier_dl"], [31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [47, "module-sparknlp.annotator.coref"], [48, "module-sparknlp.annotator.coref.spanbert_coref"], [49, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [50, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [51, "module-sparknlp.annotator.cv"], [52, "module-sparknlp.annotator.cv.swin_for_image_classification"], [53, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [54, "module-sparknlp.annotator.cv.vit_for_image_classification"], [55, "module-sparknlp.annotator.date2_chunk"], [56, "module-sparknlp.annotator.dependency.dependency_parser"], [57, "module-sparknlp.annotator.dependency"], [58, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [59, "module-sparknlp.annotator.document_character_text_splitter"], [60, "module-sparknlp.annotator.document_normalizer"], [61, "module-sparknlp.annotator.document_token_splitter"], [62, "module-sparknlp.annotator.document_token_splitter_test"], [63, "module-sparknlp.annotator.embeddings.albert_embeddings"], [64, "module-sparknlp.annotator.embeddings.bert_embeddings"], [65, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [66, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [67, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [68, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [69, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [70, "module-sparknlp.annotator.embeddings.doc2vec"], [71, "module-sparknlp.annotator.embeddings.e5_embeddings"], [72, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [73, "module-sparknlp.annotator.embeddings"], [74, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [75, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [76, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [77, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [78, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [79, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [80, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [81, "module-sparknlp.annotator.embeddings.word2vec"], [82, "module-sparknlp.annotator.embeddings.word_embeddings"], [83, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [84, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [85, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [86, "module-sparknlp.annotator.er.entity_ruler"], [87, "module-sparknlp.annotator.er"], [88, "module-sparknlp.annotator.graph_extraction"], [89, "module-sparknlp.annotator"], [90, "module-sparknlp.annotator.keyword_extraction"], [91, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [92, "module-sparknlp.annotator.ld_dl"], [93, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [94, "module-sparknlp.annotator.lemmatizer"], [95, "module-sparknlp.annotator.matcher.big_text_matcher"], [96, "module-sparknlp.annotator.matcher.date_matcher"], [97, "module-sparknlp.annotator.matcher"], [98, "module-sparknlp.annotator.matcher.multi_date_matcher"], [99, "module-sparknlp.annotator.matcher.regex_matcher"], [100, "module-sparknlp.annotator.matcher.text_matcher"], [101, "module-sparknlp.annotator.n_gram_generator"], [102, "module-sparknlp.annotator.ner"], [103, "module-sparknlp.annotator.ner.ner_approach"], [104, "module-sparknlp.annotator.ner.ner_converter"], [105, "module-sparknlp.annotator.ner.ner_crf"], [106, "module-sparknlp.annotator.ner.ner_dl"], [107, "module-sparknlp.annotator.ner.ner_overwriter"], [108, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [109, "module-sparknlp.annotator.normalizer"], [110, "module-sparknlp.annotator.openai"], [111, "module-sparknlp.annotator.openai.openai_completion"], [112, "module-sparknlp.annotator.openai.openai_embeddings"], [113, "module-sparknlp.annotator.param.classifier_encoder"], [114, "module-sparknlp.annotator.param.evaluation_dl_params"], [115, "module-sparknlp.annotator.param"], [116, "module-sparknlp.annotator.pos"], [117, "module-sparknlp.annotator.pos.perceptron"], [118, "module-sparknlp.annotator.sentence"], [119, "module-sparknlp.annotator.sentence.sentence_detector"], [120, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [121, "module-sparknlp.annotator.sentiment"], [122, "module-sparknlp.annotator.sentiment.sentiment_detector"], [123, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [124, "module-sparknlp.annotator.seq2seq.bart_transformer"], [125, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [126, "module-sparknlp.annotator.seq2seq"], [127, "module-sparknlp.annotator.seq2seq.marian_transformer"], [128, "module-sparknlp.annotator.seq2seq.t5_transformer"], [129, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [130, "module-sparknlp.annotator.similarity"], [131, "module-sparknlp.annotator.spell_check.context_spell_checker"], [132, "module-sparknlp.annotator.spell_check"], [133, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [134, "module-sparknlp.annotator.spell_check.symmetric_delete"], [135, "module-sparknlp.annotator.stemmer"], [136, "module-sparknlp.annotator.stop_words_cleaner"], [137, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [138, "module-sparknlp.annotator.token.chunk_tokenizer"], [139, "module-sparknlp.annotator.token"], [140, "module-sparknlp.annotator.token.recursive_tokenizer"], [141, "module-sparknlp.annotator.token.regex_tokenizer"], [142, "module-sparknlp.annotator.token.tokenizer"], [143, "module-sparknlp.annotator.token2_chunk"], [144, "module-sparknlp.annotator.ws"], [145, "module-sparknlp.annotator.ws.word_segmenter"], [146, "module-sparknlp.base.audio_assembler"], [147, "module-sparknlp.base.doc2_chunk"], [148, "module-sparknlp.base.document_assembler"], [149, "module-sparknlp.base.embeddings_finisher"], [150, "module-sparknlp.base.finisher"], [151, "module-sparknlp.base.graph_finisher"], [152, "module-sparknlp.base.has_recursive_fit"], [153, "module-sparknlp.base.has_recursive_transform"], [154, "module-sparknlp.base.image_assembler"], [155, "module-sparknlp.base"], [156, "module-sparknlp.base.light_pipeline"], [157, "module-sparknlp.base.multi_document_assembler"], [158, "module-sparknlp.base.recursive_pipeline"], [159, "module-sparknlp.base.table_assembler"], [160, "module-sparknlp.base.token_assembler"], [161, "module-sparknlp.common.annotator_approach"], [162, "module-sparknlp.common.annotator_model"], [163, "module-sparknlp.common.annotator_properties"], [164, "module-sparknlp.common.annotator_type"], [165, "module-sparknlp.common.coverage_result"], [166, "module-sparknlp.common"], [167, "module-sparknlp.common.match_strategy"], [168, "module-sparknlp.common.properties"], [169, "module-sparknlp.common.read_as"], [170, "module-sparknlp.common.recursive_annotator_approach"], [171, "module-sparknlp.common.storage"], [172, "module-sparknlp.common.utils"], [173, "module-sparknlp.functions"], [174, "module-sparknlp"], [175, "module-sparknlp.internal.annotator_java_ml"], [176, "module-sparknlp.internal.annotator_transformer"], [177, "module-sparknlp.internal.extended_java_wrapper"], [178, "module-sparknlp.internal"], [179, "module-sparknlp.internal.params_getters_setters"], [180, "module-sparknlp.internal.recursive"], [181, "module-sparknlp.logging.comet"], [182, "module-sparknlp.logging"], [183, "module-sparknlp.pretrained"], [184, "module-sparknlp.pretrained.pretrained_pipeline"], [185, "module-sparknlp.pretrained.resource_downloader"], [186, "module-sparknlp.pretrained.utils"], [187, "module-sparknlp.training.conll"], [188, "module-sparknlp.training.conllu"], [189, "module-sparknlp.training"], [190, "module-sparknlp.training.pos"], [191, "module-sparknlp.training.pub_tator"], [192, "module-sparknlp.training.spacy_to_annotation"], [193, "module-sparknlp.training.tfgraphs"], [194, "module-sparknlp.upload_to_hub"], [195, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "getismultilingual() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "loadsavedmodel() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "pretrained() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[9, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[10, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[10, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "getclasses() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "pretrained() (bartforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[15, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[15, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[19, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[19, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[22, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[22, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[23, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[23, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[24, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[24, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[26, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[26, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[27, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[27, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[28, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[28, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[30, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[31, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[31, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[32, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[32, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[33, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[33, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[34, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[34, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[35, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[35, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[36, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[36, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[37, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[37, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[38, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[38, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[39, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[39, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[40, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[40, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[41, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[45, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[45, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[46, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[46, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[47, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[48, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[48, "module-sparknlp.annotator.coref.spanbert_coref"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[49, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[49, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[49, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "pretrained() (clipforzeroshotclassification static method)": [[49, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[49, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[50, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[50, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[51, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[52, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[52, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[52, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[52, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[52, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[52, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[53, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[53, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[53, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[53, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[53, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[54, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[54, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[54, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[54, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[54, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[54, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[55, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[55, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[55, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[56, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[56, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[57, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[58, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[58, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[59, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[59, "module-sparknlp.annotator.document_character_text_splitter"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[60, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[60, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[61, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "setexplodesplits() (documenttokensplitter method)": [[61, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[61, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[61, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[61, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[61, "module-sparknlp.annotator.document_token_splitter"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[62, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[62, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[62, "module-sparknlp.annotator.document_token_splitter_test"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[63, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[63, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[63, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[63, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[63, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[64, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[64, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[64, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[64, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[64, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[65, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[65, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[65, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[65, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[65, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[65, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[66, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[66, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[66, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[66, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[66, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[67, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[67, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[67, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[67, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[68, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[68, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[68, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[68, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[68, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[69, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[69, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[69, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[69, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[69, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "pretrained() (doc2vecmodel static method)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[70, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[70, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[71, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[71, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[71, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[71, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[71, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[72, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[72, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[72, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[72, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[72, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[72, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[72, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[73, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[74, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[74, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[74, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[74, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[74, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[74, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[75, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[75, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[75, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[75, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[75, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[76, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "loadsavedmodel() (mpnetembeddings static method)": [[76, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "pretrained() (mpnetembeddings static method)": [[76, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[76, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[76, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[77, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[77, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[77, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[77, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[77, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[78, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[78, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[78, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[78, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[78, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[79, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[79, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[79, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[80, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[80, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[80, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[80, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[80, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[80, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "pretrained() (word2vecmodel static method)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[81, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[81, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[82, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[82, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[82, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[82, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[82, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[82, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[82, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[82, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[82, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[82, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[83, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[83, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[83, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[83, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[83, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[84, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[84, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[84, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[84, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[84, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[85, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[85, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[85, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[85, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[85, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[86, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[86, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[86, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[86, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[86, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[86, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[86, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[87, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[88, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[88, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[89, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[90, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[91, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[91, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[91, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[91, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[91, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[91, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[91, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[91, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[91, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[91, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[92, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[93, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[93, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[93, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[93, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[93, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[93, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[93, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[94, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[94, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[94, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[94, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[94, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[94, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[94, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[95, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[95, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[95, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[95, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[95, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[95, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[95, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[95, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[95, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[95, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[95, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[96, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[96, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setanchordateday() (datematcherutils method)": [[96, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[96, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[96, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[96, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[96, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[96, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[96, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[96, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[96, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[97, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[98, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[98, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[99, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[99, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[99, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[99, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[99, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[99, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[99, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[100, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[100, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[100, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[100, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[100, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[100, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[100, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[100, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[100, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[100, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[100, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[100, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[101, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[101, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[101, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[101, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[101, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[102, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[103, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[103, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[103, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[103, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[103, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[103, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[103, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[103, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[104, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[104, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[104, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[104, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[104, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[105, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[105, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[105, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[105, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[105, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[105, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[105, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[105, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[105, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[105, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[105, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[105, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[106, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[106, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[107, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[107, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[107, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[107, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[107, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[108, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[108, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[108, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[108, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[108, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[108, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[108, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[109, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[109, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[109, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[109, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[109, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[109, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[109, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[109, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[110, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "setbestof() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[111, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[111, "module-sparknlp.annotator.openai.openai_completion"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[112, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "setmodel() (openaiembeddings method)": [[112, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[112, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[112, "module-sparknlp.annotator.openai.openai_embeddings"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[113, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[113, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[113, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[113, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[113, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[113, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[113, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[113, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[114, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[114, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[114, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[114, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[114, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[114, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[114, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[114, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[115, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[116, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[117, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[117, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[117, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[117, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[117, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[117, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[117, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[118, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[119, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[119, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[119, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[119, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[119, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[119, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[119, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[119, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[119, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[119, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[119, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[119, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[120, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[120, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[121, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[122, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[122, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[122, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[122, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[123, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[123, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[123, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[123, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[123, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[123, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[124, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[124, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[125, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[125, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[126, "module-sparknlp.annotator.seq2seq"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[127, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[127, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[128, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[128, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[129, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[129, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[130, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[131, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[131, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[132, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[133, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[133, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[133, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[133, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[133, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[133, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[133, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[133, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[133, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[134, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[134, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[134, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[134, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[134, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[134, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[134, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[134, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[135, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[135, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[136, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[136, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[136, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[136, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[136, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[136, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[136, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[137, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[137, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[138, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[138, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[138, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[139, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[140, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[140, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[140, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[140, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[140, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[140, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[140, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[141, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[141, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[141, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[141, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[141, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[141, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[141, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[141, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[141, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[142, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[142, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[142, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[142, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[142, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[142, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[142, "module-sparknlp.annotator.token.tokenizer"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[143, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "sparknlp.annotator.token2_chunk": [[143, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[144, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[145, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[145, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[146, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[146, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[146, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[146, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[146, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[147, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[147, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[147, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[147, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[147, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[147, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[147, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[147, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[148, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[148, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[148, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[148, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[148, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[148, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[148, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[148, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[149, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[149, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[149, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[149, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[149, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[149, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[149, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[149, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[150, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[150, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[150, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[150, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[150, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[150, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[150, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[150, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[150, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[150, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[150, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[150, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[151, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[151, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[151, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[151, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[151, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[151, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[152, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[152, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[153, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[153, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[154, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[154, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[154, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[154, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[154, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[155, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[156, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[156, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[156, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[156, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[156, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[156, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[156, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[156, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[157, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[157, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[157, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[157, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[157, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[157, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[157, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[157, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[158, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[158, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[158, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[159, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[159, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[159, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[159, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[159, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[160, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[160, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[160, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[161, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[161, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[162, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[162, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[163, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[163, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[163, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[163, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[163, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[163, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[163, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[163, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[164, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[165, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[166, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[167, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[167, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[168, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[168, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setbeamsize() (in module sparknlp.common.properties)": [[168, "sparknlp.common.properties.setBeamSize"]], "setdimension() (hasembeddingsproperties method)": [[168, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdosample() (in module sparknlp.common.properties)": [[168, "sparknlp.common.properties.setDoSample"]], "setmaxoutputlength() (in module sparknlp.common.properties)": [[168, "sparknlp.common.properties.setMaxOutputLength"]], "setminoutputlength() (in module sparknlp.common.properties)": [[168, "sparknlp.common.properties.setMinOutputLength"]], "setnreturnsequences() (in module sparknlp.common.properties)": [[168, "sparknlp.common.properties.setNReturnSequences"]], "setnorepeatngramsize() (in module sparknlp.common.properties)": [[168, "sparknlp.common.properties.setNoRepeatNgramSize"]], "setrepetitionpenalty() (in module sparknlp.common.properties)": [[168, "sparknlp.common.properties.setRepetitionPenalty"]], "settask() (in module sparknlp.common.properties)": [[168, "sparknlp.common.properties.setTask"]], "settemperature() (in module sparknlp.common.properties)": [[168, "sparknlp.common.properties.setTemperature"]], "settopk() (in module sparknlp.common.properties)": [[168, "sparknlp.common.properties.setTopK"]], "settopp() (in module sparknlp.common.properties)": [[168, "sparknlp.common.properties.setTopP"]], "sparknlp.common.properties": [[168, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[169, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[169, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[170, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[170, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[171, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[172, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[172, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[173, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[173, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[173, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[173, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[173, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[173, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[173, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[173, "module-sparknlp.functions"]], "sparknlp": [[174, "module-sparknlp"]], "start() (in module sparknlp)": [[174, "sparknlp.start"]], "version() (in module sparknlp)": [[174, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[175, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[175, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[175, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[175, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[176, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[176, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[177, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[177, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[177, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[178, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[179, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[179, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[179, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[179, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[180, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[180, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[180, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[180, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[181, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[181, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[181, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[181, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[181, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[181, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[181, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[181, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[181, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[181, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[181, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[182, "module-sparknlp.logging"]], "sparknlp.pretrained": [[183, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[184, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[184, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[184, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[184, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[184, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[184, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[185, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[185, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[185, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[185, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[185, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[185, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[185, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[185, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[185, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[185, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[186, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[187, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[187, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[187, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[188, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[188, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[188, "module-sparknlp.training.conllu"]], "sparknlp.training": [[189, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[190, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[190, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[190, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[191, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[191, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[191, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[192, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[192, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[193, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[194, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[195, "module-sparknlp.util"]]}})