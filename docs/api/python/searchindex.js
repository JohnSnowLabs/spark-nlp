Search.setIndex({"docnames": ["_api/modules", "_api/sparknlp", "_api/sparknlp.annotation", "_api/sparknlp.annotation_audio", "_api/sparknlp.annotation_image", "_api/sparknlp.annotator", "_api/sparknlp.annotator.audio", "_api/sparknlp.annotator.audio.hubert_for_ctc", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc", "_api/sparknlp.annotator.audio.whisper_for_ctc", "_api/sparknlp.annotator.chunk2_doc", "_api/sparknlp.annotator.chunker", "_api/sparknlp.annotator.classifier_dl", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.classifier_dl", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.sentiment_dl", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification", "_api/sparknlp.annotator.cleaners", "_api/sparknlp.annotator.cleaners.cleaner", "_api/sparknlp.annotator.cleaners.extractor", "_api/sparknlp.annotator.coref", "_api/sparknlp.annotator.coref.spanbert_coref", "_api/sparknlp.annotator.cv", "_api/sparknlp.annotator.cv.blip_for_question_answering", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification", "_api/sparknlp.annotator.cv.convnext_for_image_classification", "_api/sparknlp.annotator.cv.florence2_transformer", "_api/sparknlp.annotator.cv.gemma3_for_multimodal", "_api/sparknlp.annotator.cv.internvl_for_multimodal", "_api/sparknlp.annotator.cv.janus_for_multimodal", "_api/sparknlp.annotator.cv.llava_for_multimodal", "_api/sparknlp.annotator.cv.mllama_for_multimodal", "_api/sparknlp.annotator.cv.paligemma_for_multimodal", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal", "_api/sparknlp.annotator.cv.qwen2vl_transformer", "_api/sparknlp.annotator.cv.smolvlm_transformer", "_api/sparknlp.annotator.cv.swin_for_image_classification", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning", "_api/sparknlp.annotator.cv.vit_for_image_classification", "_api/sparknlp.annotator.dataframe_optimizer", "_api/sparknlp.annotator.date2_chunk", "_api/sparknlp.annotator.dependency", "_api/sparknlp.annotator.dependency.dependency_parser", "_api/sparknlp.annotator.dependency.typed_dependency_parser", "_api/sparknlp.annotator.document_character_text_splitter", "_api/sparknlp.annotator.document_normalizer", "_api/sparknlp.annotator.document_token_splitter", "_api/sparknlp.annotator.document_token_splitter_test", "_api/sparknlp.annotator.embeddings", "_api/sparknlp.annotator.embeddings.albert_embeddings", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings", "_api/sparknlp.annotator.embeddings.bert_embeddings", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings", "_api/sparknlp.annotator.embeddings.bge_embeddings", "_api/sparknlp.annotator.embeddings.camembert_embeddings", "_api/sparknlp.annotator.embeddings.chunk_embeddings", "_api/sparknlp.annotator.embeddings.deberta_embeddings", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings", "_api/sparknlp.annotator.embeddings.doc2vec", "_api/sparknlp.annotator.embeddings.e5_embeddings", "_api/sparknlp.annotator.embeddings.e5v_embeddings", "_api/sparknlp.annotator.embeddings.elmo_embeddings", "_api/sparknlp.annotator.embeddings.instructor_embeddings", "_api/sparknlp.annotator.embeddings.longformer_embeddings", "_api/sparknlp.annotator.embeddings.minilm_embeddings", "_api/sparknlp.annotator.embeddings.mpnet_embeddings", "_api/sparknlp.annotator.embeddings.mxbai_embeddings", "_api/sparknlp.annotator.embeddings.nomic_embeddings", "_api/sparknlp.annotator.embeddings.roberta_embeddings", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.sentence_embeddings", "_api/sparknlp.annotator.embeddings.snowflake_embeddings", "_api/sparknlp.annotator.embeddings.uae_embeddings", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder", "_api/sparknlp.annotator.embeddings.word2vec", "_api/sparknlp.annotator.embeddings.word_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.xlnet_embeddings", "_api/sparknlp.annotator.er", "_api/sparknlp.annotator.er.entity_ruler", "_api/sparknlp.annotator.graph_extraction", "_api/sparknlp.annotator.keyword_extraction", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction", "_api/sparknlp.annotator.ld_dl", "_api/sparknlp.annotator.ld_dl.language_detector_dl", "_api/sparknlp.annotator.lemmatizer", "_api/sparknlp.annotator.matcher", "_api/sparknlp.annotator.matcher.big_text_matcher", "_api/sparknlp.annotator.matcher.date_matcher", "_api/sparknlp.annotator.matcher.multi_date_matcher", "_api/sparknlp.annotator.matcher.regex_matcher", "_api/sparknlp.annotator.matcher.text_matcher", "_api/sparknlp.annotator.n_gram_generator", "_api/sparknlp.annotator.ner", "_api/sparknlp.annotator.ner.ner_approach", "_api/sparknlp.annotator.ner.ner_converter", "_api/sparknlp.annotator.ner.ner_crf", "_api/sparknlp.annotator.ner.ner_dl", "_api/sparknlp.annotator.ner.ner_dl_graph_checker", "_api/sparknlp.annotator.ner.ner_overwriter", "_api/sparknlp.annotator.ner.zero_shot_ner_model", "_api/sparknlp.annotator.normalizer", "_api/sparknlp.annotator.openai", "_api/sparknlp.annotator.openai.openai_completion", "_api/sparknlp.annotator.openai.openai_embeddings", "_api/sparknlp.annotator.param", "_api/sparknlp.annotator.param.classifier_encoder", "_api/sparknlp.annotator.param.evaluation_dl_params", "_api/sparknlp.annotator.pos", "_api/sparknlp.annotator.pos.perceptron", "_api/sparknlp.annotator.sentence", "_api/sparknlp.annotator.sentence.sentence_detector", "_api/sparknlp.annotator.sentence.sentence_detector_dl", "_api/sparknlp.annotator.sentiment", "_api/sparknlp.annotator.sentiment.sentiment_detector", "_api/sparknlp.annotator.sentiment.vivekn_sentiment", "_api/sparknlp.annotator.seq2seq", "_api/sparknlp.annotator.seq2seq.auto_gguf_model", "_api/sparknlp.annotator.seq2seq.auto_gguf_reranker", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model", "_api/sparknlp.annotator.seq2seq.bart_transformer", "_api/sparknlp.annotator.seq2seq.cohere_transformer", "_api/sparknlp.annotator.seq2seq.cpm_transformer", "_api/sparknlp.annotator.seq2seq.gpt2_transformer", "_api/sparknlp.annotator.seq2seq.llama2_transformer", "_api/sparknlp.annotator.seq2seq.llama3_transformer", "_api/sparknlp.annotator.seq2seq.m2m100_transformer", "_api/sparknlp.annotator.seq2seq.marian_transformer", "_api/sparknlp.annotator.seq2seq.mistral_transformer", "_api/sparknlp.annotator.seq2seq.nllb_transformer", "_api/sparknlp.annotator.seq2seq.olmo_transformer", "_api/sparknlp.annotator.seq2seq.phi2_transformer", "_api/sparknlp.annotator.seq2seq.phi3_transformer", "_api/sparknlp.annotator.seq2seq.phi4_transformer", "_api/sparknlp.annotator.seq2seq.qwen_transformer", "_api/sparknlp.annotator.seq2seq.starcoder_transformer", "_api/sparknlp.annotator.seq2seq.t5_transformer", "_api/sparknlp.annotator.similarity", "_api/sparknlp.annotator.similarity.document_similarity_ranker", "_api/sparknlp.annotator.spell_check", "_api/sparknlp.annotator.spell_check.context_spell_checker", "_api/sparknlp.annotator.spell_check.norvig_sweeting", "_api/sparknlp.annotator.spell_check.symmetric_delete", "_api/sparknlp.annotator.stemmer", "_api/sparknlp.annotator.stop_words_cleaner", "_api/sparknlp.annotator.tf_ner_dl_graph_builder", "_api/sparknlp.annotator.token", "_api/sparknlp.annotator.token.chunk_tokenizer", "_api/sparknlp.annotator.token.recursive_tokenizer", "_api/sparknlp.annotator.token.regex_tokenizer", "_api/sparknlp.annotator.token.tokenizer", "_api/sparknlp.annotator.token2_chunk", "_api/sparknlp.annotator.ws", "_api/sparknlp.annotator.ws.word_segmenter", "_api/sparknlp.base", "_api/sparknlp.base.audio_assembler", "_api/sparknlp.base.doc2_chunk", "_api/sparknlp.base.document_assembler", "_api/sparknlp.base.embeddings_finisher", "_api/sparknlp.base.finisher", "_api/sparknlp.base.gguf_ranking_finisher", "_api/sparknlp.base.graph_finisher", "_api/sparknlp.base.has_recursive_fit", "_api/sparknlp.base.has_recursive_transform", "_api/sparknlp.base.image_assembler", "_api/sparknlp.base.light_pipeline", "_api/sparknlp.base.multi_document_assembler", "_api/sparknlp.base.prompt_assembler", "_api/sparknlp.base.recursive_pipeline", "_api/sparknlp.base.table_assembler", "_api/sparknlp.base.token_assembler", "_api/sparknlp.common", "_api/sparknlp.common.annotator_approach", "_api/sparknlp.common.annotator_model", "_api/sparknlp.common.annotator_properties", "_api/sparknlp.common.annotator_type", "_api/sparknlp.common.coverage_result", "_api/sparknlp.common.match_strategy", "_api/sparknlp.common.properties", "_api/sparknlp.common.read_as", "_api/sparknlp.common.recursive_annotator_approach", "_api/sparknlp.common.storage", "_api/sparknlp.common.utils", "_api/sparknlp.functions", "_api/sparknlp.internal", "_api/sparknlp.internal.annotator_java_ml", "_api/sparknlp.internal.annotator_transformer", "_api/sparknlp.internal.extended_java_wrapper", "_api/sparknlp.internal.params_getters_setters", "_api/sparknlp.internal.recursive", "_api/sparknlp.logging", "_api/sparknlp.logging.comet", "_api/sparknlp.partition", "_api/sparknlp.partition.partition", "_api/sparknlp.partition.partition_properties", "_api/sparknlp.partition.partition_transformer", "_api/sparknlp.pretrained", "_api/sparknlp.pretrained.pretrained_pipeline", "_api/sparknlp.pretrained.resource_downloader", "_api/sparknlp.pretrained.utils", "_api/sparknlp.reader", "_api/sparknlp.reader.enums", "_api/sparknlp.reader.pdf_to_text", "_api/sparknlp.reader.reader2doc", "_api/sparknlp.reader.reader2image", "_api/sparknlp.reader.reader2table", "_api/sparknlp.reader.sparknlp_reader", "_api/sparknlp.training", "_api/sparknlp.training.conll", "_api/sparknlp.training.conllu", "_api/sparknlp.training.pos", "_api/sparknlp.training.pub_tator", "_api/sparknlp.training.spacy_to_annotation", "_api/sparknlp.training.tfgraphs", "_api/sparknlp.upload_to_hub", "_api/sparknlp.util", "getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distilbert_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_multiple_choice/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/cleaners/cleaner/index", "reference/autosummary/sparknlp/annotator/cleaners/extractor/index", "reference/autosummary/sparknlp/annotator/cleaners/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/blip_for_question_answering/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/florence2_transformer/index", "reference/autosummary/sparknlp/annotator/cv/gemma3_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/internvl_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/janus_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/llava_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/mllama_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/paligemma_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/phi3_vision_for_multimodal/index", "reference/autosummary/sparknlp/annotator/cv/qwen2vl_transformer/index", "reference/autosummary/sparknlp/annotator/cv/smolvlm_transformer/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/dataframe_optimizer/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/auto_gguf_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/e5v_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/minilm_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl_graph_checker/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_reranker/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_vision_model/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/cohere_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/olmo_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi4_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/gguf_ranking_finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/prompt_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/partition/index", "reference/autosummary/sparknlp/partition/partition/index", "reference/autosummary/sparknlp/partition/partition_properties/index", "reference/autosummary/sparknlp/partition/partition_transformer/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/reader/enums/index", "reference/autosummary/sparknlp/reader/index", "reference/autosummary/sparknlp/reader/pdf_to_text/index", "reference/autosummary/sparknlp/reader/reader2doc/index", "reference/autosummary/sparknlp/reader/reader2image/index", "reference/autosummary/sparknlp/reader/reader2table/index", "reference/autosummary/sparknlp/reader/sparknlp_reader/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["_api/modules.rst", "_api/sparknlp.rst", "_api/sparknlp.annotation.rst", "_api/sparknlp.annotation_audio.rst", "_api/sparknlp.annotation_image.rst", "_api/sparknlp.annotator.rst", "_api/sparknlp.annotator.audio.rst", "_api/sparknlp.annotator.audio.hubert_for_ctc.rst", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc.rst", "_api/sparknlp.annotator.audio.whisper_for_ctc.rst", "_api/sparknlp.annotator.chunk2_doc.rst", "_api/sparknlp.annotator.chunker.rst", "_api/sparknlp.annotator.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.sentiment_dl.rst", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification.rst", "_api/sparknlp.annotator.cleaners.rst", "_api/sparknlp.annotator.cleaners.cleaner.rst", "_api/sparknlp.annotator.cleaners.extractor.rst", "_api/sparknlp.annotator.coref.rst", "_api/sparknlp.annotator.coref.spanbert_coref.rst", "_api/sparknlp.annotator.cv.rst", "_api/sparknlp.annotator.cv.blip_for_question_answering.rst", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification.rst", "_api/sparknlp.annotator.cv.convnext_for_image_classification.rst", "_api/sparknlp.annotator.cv.florence2_transformer.rst", "_api/sparknlp.annotator.cv.gemma3_for_multimodal.rst", "_api/sparknlp.annotator.cv.internvl_for_multimodal.rst", "_api/sparknlp.annotator.cv.janus_for_multimodal.rst", "_api/sparknlp.annotator.cv.llava_for_multimodal.rst", "_api/sparknlp.annotator.cv.mllama_for_multimodal.rst", "_api/sparknlp.annotator.cv.paligemma_for_multimodal.rst", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal.rst", "_api/sparknlp.annotator.cv.qwen2vl_transformer.rst", "_api/sparknlp.annotator.cv.smolvlm_transformer.rst", "_api/sparknlp.annotator.cv.swin_for_image_classification.rst", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.rst", "_api/sparknlp.annotator.cv.vit_for_image_classification.rst", "_api/sparknlp.annotator.dataframe_optimizer.rst", "_api/sparknlp.annotator.date2_chunk.rst", "_api/sparknlp.annotator.dependency.rst", "_api/sparknlp.annotator.dependency.dependency_parser.rst", "_api/sparknlp.annotator.dependency.typed_dependency_parser.rst", "_api/sparknlp.annotator.document_character_text_splitter.rst", "_api/sparknlp.annotator.document_normalizer.rst", "_api/sparknlp.annotator.document_token_splitter.rst", "_api/sparknlp.annotator.document_token_splitter_test.rst", "_api/sparknlp.annotator.embeddings.rst", "_api/sparknlp.annotator.embeddings.albert_embeddings.rst", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.bge_embeddings.rst", "_api/sparknlp.annotator.embeddings.camembert_embeddings.rst", "_api/sparknlp.annotator.embeddings.chunk_embeddings.rst", "_api/sparknlp.annotator.embeddings.deberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.doc2vec.rst", "_api/sparknlp.annotator.embeddings.e5_embeddings.rst", "_api/sparknlp.annotator.embeddings.e5v_embeddings.rst", "_api/sparknlp.annotator.embeddings.elmo_embeddings.rst", "_api/sparknlp.annotator.embeddings.instructor_embeddings.rst", "_api/sparknlp.annotator.embeddings.longformer_embeddings.rst", "_api/sparknlp.annotator.embeddings.minilm_embeddings.rst", "_api/sparknlp.annotator.embeddings.mpnet_embeddings.rst", "_api/sparknlp.annotator.embeddings.mxbai_embeddings.rst", "_api/sparknlp.annotator.embeddings.nomic_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.snowflake_embeddings.rst", "_api/sparknlp.annotator.embeddings.uae_embeddings.rst", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder.rst", "_api/sparknlp.annotator.embeddings.word2vec.rst", "_api/sparknlp.annotator.embeddings.word_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlnet_embeddings.rst", "_api/sparknlp.annotator.er.rst", "_api/sparknlp.annotator.er.entity_ruler.rst", "_api/sparknlp.annotator.graph_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction.rst", "_api/sparknlp.annotator.ld_dl.rst", "_api/sparknlp.annotator.ld_dl.language_detector_dl.rst", "_api/sparknlp.annotator.lemmatizer.rst", "_api/sparknlp.annotator.matcher.rst", "_api/sparknlp.annotator.matcher.big_text_matcher.rst", "_api/sparknlp.annotator.matcher.date_matcher.rst", "_api/sparknlp.annotator.matcher.multi_date_matcher.rst", "_api/sparknlp.annotator.matcher.regex_matcher.rst", "_api/sparknlp.annotator.matcher.text_matcher.rst", "_api/sparknlp.annotator.n_gram_generator.rst", "_api/sparknlp.annotator.ner.rst", "_api/sparknlp.annotator.ner.ner_approach.rst", "_api/sparknlp.annotator.ner.ner_converter.rst", "_api/sparknlp.annotator.ner.ner_crf.rst", "_api/sparknlp.annotator.ner.ner_dl.rst", "_api/sparknlp.annotator.ner.ner_dl_graph_checker.rst", "_api/sparknlp.annotator.ner.ner_overwriter.rst", "_api/sparknlp.annotator.ner.zero_shot_ner_model.rst", "_api/sparknlp.annotator.normalizer.rst", "_api/sparknlp.annotator.openai.rst", "_api/sparknlp.annotator.openai.openai_completion.rst", "_api/sparknlp.annotator.openai.openai_embeddings.rst", "_api/sparknlp.annotator.param.rst", "_api/sparknlp.annotator.param.classifier_encoder.rst", "_api/sparknlp.annotator.param.evaluation_dl_params.rst", "_api/sparknlp.annotator.pos.rst", "_api/sparknlp.annotator.pos.perceptron.rst", "_api/sparknlp.annotator.sentence.rst", "_api/sparknlp.annotator.sentence.sentence_detector.rst", "_api/sparknlp.annotator.sentence.sentence_detector_dl.rst", "_api/sparknlp.annotator.sentiment.rst", "_api/sparknlp.annotator.sentiment.sentiment_detector.rst", "_api/sparknlp.annotator.sentiment.vivekn_sentiment.rst", "_api/sparknlp.annotator.seq2seq.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_model.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_reranker.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model.rst", "_api/sparknlp.annotator.seq2seq.bart_transformer.rst", "_api/sparknlp.annotator.seq2seq.cohere_transformer.rst", "_api/sparknlp.annotator.seq2seq.cpm_transformer.rst", "_api/sparknlp.annotator.seq2seq.gpt2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama3_transformer.rst", "_api/sparknlp.annotator.seq2seq.m2m100_transformer.rst", "_api/sparknlp.annotator.seq2seq.marian_transformer.rst", "_api/sparknlp.annotator.seq2seq.mistral_transformer.rst", "_api/sparknlp.annotator.seq2seq.nllb_transformer.rst", "_api/sparknlp.annotator.seq2seq.olmo_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi2_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi3_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi4_transformer.rst", "_api/sparknlp.annotator.seq2seq.qwen_transformer.rst", "_api/sparknlp.annotator.seq2seq.starcoder_transformer.rst", "_api/sparknlp.annotator.seq2seq.t5_transformer.rst", "_api/sparknlp.annotator.similarity.rst", "_api/sparknlp.annotator.similarity.document_similarity_ranker.rst", "_api/sparknlp.annotator.spell_check.rst", "_api/sparknlp.annotator.spell_check.context_spell_checker.rst", "_api/sparknlp.annotator.spell_check.norvig_sweeting.rst", "_api/sparknlp.annotator.spell_check.symmetric_delete.rst", "_api/sparknlp.annotator.stemmer.rst", "_api/sparknlp.annotator.stop_words_cleaner.rst", "_api/sparknlp.annotator.tf_ner_dl_graph_builder.rst", "_api/sparknlp.annotator.token.rst", "_api/sparknlp.annotator.token.chunk_tokenizer.rst", "_api/sparknlp.annotator.token.recursive_tokenizer.rst", "_api/sparknlp.annotator.token.regex_tokenizer.rst", "_api/sparknlp.annotator.token.tokenizer.rst", "_api/sparknlp.annotator.token2_chunk.rst", "_api/sparknlp.annotator.ws.rst", "_api/sparknlp.annotator.ws.word_segmenter.rst", "_api/sparknlp.base.rst", "_api/sparknlp.base.audio_assembler.rst", "_api/sparknlp.base.doc2_chunk.rst", "_api/sparknlp.base.document_assembler.rst", "_api/sparknlp.base.embeddings_finisher.rst", "_api/sparknlp.base.finisher.rst", "_api/sparknlp.base.gguf_ranking_finisher.rst", "_api/sparknlp.base.graph_finisher.rst", "_api/sparknlp.base.has_recursive_fit.rst", "_api/sparknlp.base.has_recursive_transform.rst", "_api/sparknlp.base.image_assembler.rst", "_api/sparknlp.base.light_pipeline.rst", "_api/sparknlp.base.multi_document_assembler.rst", "_api/sparknlp.base.prompt_assembler.rst", "_api/sparknlp.base.recursive_pipeline.rst", "_api/sparknlp.base.table_assembler.rst", "_api/sparknlp.base.token_assembler.rst", "_api/sparknlp.common.rst", "_api/sparknlp.common.annotator_approach.rst", "_api/sparknlp.common.annotator_model.rst", "_api/sparknlp.common.annotator_properties.rst", "_api/sparknlp.common.annotator_type.rst", "_api/sparknlp.common.coverage_result.rst", "_api/sparknlp.common.match_strategy.rst", "_api/sparknlp.common.properties.rst", "_api/sparknlp.common.read_as.rst", "_api/sparknlp.common.recursive_annotator_approach.rst", "_api/sparknlp.common.storage.rst", "_api/sparknlp.common.utils.rst", "_api/sparknlp.functions.rst", "_api/sparknlp.internal.rst", "_api/sparknlp.internal.annotator_java_ml.rst", "_api/sparknlp.internal.annotator_transformer.rst", "_api/sparknlp.internal.extended_java_wrapper.rst", "_api/sparknlp.internal.params_getters_setters.rst", "_api/sparknlp.internal.recursive.rst", "_api/sparknlp.logging.rst", "_api/sparknlp.logging.comet.rst", "_api/sparknlp.partition.rst", "_api/sparknlp.partition.partition.rst", "_api/sparknlp.partition.partition_properties.rst", "_api/sparknlp.partition.partition_transformer.rst", "_api/sparknlp.pretrained.rst", "_api/sparknlp.pretrained.pretrained_pipeline.rst", "_api/sparknlp.pretrained.resource_downloader.rst", "_api/sparknlp.pretrained.utils.rst", "_api/sparknlp.reader.rst", "_api/sparknlp.reader.enums.rst", "_api/sparknlp.reader.pdf_to_text.rst", "_api/sparknlp.reader.reader2doc.rst", "_api/sparknlp.reader.reader2image.rst", "_api/sparknlp.reader.reader2table.rst", "_api/sparknlp.reader.sparknlp_reader.rst", "_api/sparknlp.training.rst", "_api/sparknlp.training.conll.rst", "_api/sparknlp.training.conllu.rst", "_api/sparknlp.training.pos.rst", "_api/sparknlp.training.pub_tator.rst", "_api/sparknlp.training.spacy_to_annotation.rst", "_api/sparknlp.training.tfgraphs.rst", "_api/sparknlp.upload_to_hub.rst", "_api/sparknlp.util.rst", "getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distilbert_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_multiple_choice/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/cleaner/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/extractor/index.rst", "reference/autosummary/sparknlp/annotator/cleaners/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/blip_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/florence2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/gemma3_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/internvl_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/janus_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/llava_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/mllama_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/paligemma_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/phi3_vision_for_multimodal/index.rst", "reference/autosummary/sparknlp/annotator/cv/qwen2vl_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/smolvlm_transformer/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/dataframe_optimizer/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/auto_gguf_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5v_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/minilm_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl_graph_checker/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_reranker/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_vision_model/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/cohere_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/olmo_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi4_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/gguf_ranking_finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/prompt_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/partition/index.rst", "reference/autosummary/sparknlp/partition/partition/index.rst", "reference/autosummary/sparknlp/partition/partition_properties/index.rst", "reference/autosummary/sparknlp/partition/partition_transformer/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/reader/enums/index.rst", "reference/autosummary/sparknlp/reader/index.rst", "reference/autosummary/sparknlp/reader/pdf_to_text/index.rst", "reference/autosummary/sparknlp/reader/reader2doc/index.rst", "reference/autosummary/sparknlp/reader/reader2image/index.rst", "reference/autosummary/sparknlp/reader/reader2table/index.rst", "reference/autosummary/sparknlp/reader/sparknlp_reader/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["sparknlp", "sparknlp package", "sparknlp.annotation module", "sparknlp.annotation_audio module", "sparknlp.annotation_image module", "sparknlp.annotator package", "sparknlp.annotator.audio package", "sparknlp.annotator.audio.hubert_for_ctc module", "sparknlp.annotator.audio.wav2vec2_for_ctc module", "sparknlp.annotator.audio.whisper_for_ctc module", "sparknlp.annotator.chunk2_doc module", "sparknlp.annotator.chunker module", "sparknlp.annotator.classifier_dl package", "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.albert_for_question_answering module", "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.albert_for_token_classification module", "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.bert_for_question_answering module", "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.bert_for_token_classification module", "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.camembert_for_question_answering module", "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.camembert_for_token_classification module", "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.classifier_dl module", "sparknlp.annotator.classifier_dl.deberta_for_question_answering module", "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.deberta_for_token_classification module", "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module", "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.longformer_for_question_answering module", "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module", "sparknlp.annotator.classifier_dl.longformer_for_token_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module", "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module", "sparknlp.annotator.classifier_dl.multi_classifier_dl module", "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.sentiment_dl module", "sparknlp.annotator.classifier_dl.tapas_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module", "sparknlp.annotator.cleaners package", "sparknlp.annotator.cleaners.cleaner module", "sparknlp.annotator.cleaners.extractor module", "sparknlp.annotator.coref package", "sparknlp.annotator.coref.spanbert_coref module", "sparknlp.annotator.cv package", "sparknlp.annotator.cv.blip_for_question_answering module", "sparknlp.annotator.cv.clip_for_zero_shot_classification module", "sparknlp.annotator.cv.convnext_for_image_classification module", "sparknlp.annotator.cv.florence2_transformer module", "sparknlp.annotator.cv.gemma3_for_multimodal module", "sparknlp.annotator.cv.internvl_for_multimodal module", "sparknlp.annotator.cv.janus_for_multimodal module", "sparknlp.annotator.cv.llava_for_multimodal module", "sparknlp.annotator.cv.mllama_for_multimodal module", "sparknlp.annotator.cv.paligemma_for_multimodal module", "sparknlp.annotator.cv.phi3_vision_for_multimodal module", "sparknlp.annotator.cv.qwen2vl_transformer module", "sparknlp.annotator.cv.smolvlm_transformer module", "sparknlp.annotator.cv.swin_for_image_classification module", "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module", "sparknlp.annotator.cv.vit_for_image_classification module", "sparknlp.annotator.dataframe_optimizer module", "sparknlp.annotator.date2_chunk module", "sparknlp.annotator.dependency package", "sparknlp.annotator.dependency.dependency_parser module", "sparknlp.annotator.dependency.typed_dependency_parser module", "sparknlp.annotator.document_character_text_splitter module", "sparknlp.annotator.document_normalizer module", "sparknlp.annotator.document_token_splitter module", "sparknlp.annotator.document_token_splitter_test module", "sparknlp.annotator.embeddings package", "sparknlp.annotator.embeddings.albert_embeddings module", "sparknlp.annotator.embeddings.auto_gguf_embeddings module", "sparknlp.annotator.embeddings.bert_embeddings module", "sparknlp.annotator.embeddings.bert_sentence_embeddings module", "sparknlp.annotator.embeddings.bge_embeddings module", "sparknlp.annotator.embeddings.camembert_embeddings module", "sparknlp.annotator.embeddings.chunk_embeddings module", "sparknlp.annotator.embeddings.deberta_embeddings module", "sparknlp.annotator.embeddings.distil_bert_embeddings module", "sparknlp.annotator.embeddings.doc2vec module", "sparknlp.annotator.embeddings.e5_embeddings module", "sparknlp.annotator.embeddings.e5v_embeddings module", "sparknlp.annotator.embeddings.elmo_embeddings module", "sparknlp.annotator.embeddings.instructor_embeddings module", "sparknlp.annotator.embeddings.longformer_embeddings module", "sparknlp.annotator.embeddings.minilm_embeddings module", "sparknlp.annotator.embeddings.mpnet_embeddings module", "sparknlp.annotator.embeddings.mxbai_embeddings module", "sparknlp.annotator.embeddings.nomic_embeddings module", "sparknlp.annotator.embeddings.roberta_embeddings module", "sparknlp.annotator.embeddings.roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.sentence_embeddings module", "sparknlp.annotator.embeddings.snowflake_embeddings module", "sparknlp.annotator.embeddings.uae_embeddings module", "sparknlp.annotator.embeddings.universal_sentence_encoder module", "sparknlp.annotator.embeddings.word2vec module", "sparknlp.annotator.embeddings.word_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.xlnet_embeddings module", "sparknlp.annotator.er package", "sparknlp.annotator.er.entity_ruler module", "sparknlp.annotator.graph_extraction module", "sparknlp.annotator.keyword_extraction package", "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module", "sparknlp.annotator.ld_dl package", "sparknlp.annotator.ld_dl.language_detector_dl module", "sparknlp.annotator.lemmatizer module", "sparknlp.annotator.matcher package", "sparknlp.annotator.matcher.big_text_matcher module", "sparknlp.annotator.matcher.date_matcher module", "sparknlp.annotator.matcher.multi_date_matcher module", "sparknlp.annotator.matcher.regex_matcher module", "sparknlp.annotator.matcher.text_matcher module", "sparknlp.annotator.n_gram_generator module", "sparknlp.annotator.ner package", "sparknlp.annotator.ner.ner_approach module", "sparknlp.annotator.ner.ner_converter module", "sparknlp.annotator.ner.ner_crf module", "sparknlp.annotator.ner.ner_dl module", "sparknlp.annotator.ner.ner_dl_graph_checker module", "sparknlp.annotator.ner.ner_overwriter module", "sparknlp.annotator.ner.zero_shot_ner_model module", "sparknlp.annotator.normalizer module", "sparknlp.annotator.openai package", "sparknlp.annotator.openai.openai_completion module", "sparknlp.annotator.openai.openai_embeddings module", "sparknlp.annotator.param package", "sparknlp.annotator.param.classifier_encoder module", "sparknlp.annotator.param.evaluation_dl_params module", "sparknlp.annotator.pos package", "sparknlp.annotator.pos.perceptron module", "sparknlp.annotator.sentence package", "sparknlp.annotator.sentence.sentence_detector module", "sparknlp.annotator.sentence.sentence_detector_dl module", "sparknlp.annotator.sentiment package", "sparknlp.annotator.sentiment.sentiment_detector module", "sparknlp.annotator.sentiment.vivekn_sentiment module", "sparknlp.annotator.seq2seq package", "sparknlp.annotator.seq2seq.auto_gguf_model module", "sparknlp.annotator.seq2seq.auto_gguf_reranker module", "sparknlp.annotator.seq2seq.auto_gguf_vision_model module", "sparknlp.annotator.seq2seq.bart_transformer module", "sparknlp.annotator.seq2seq.cohere_transformer module", "sparknlp.annotator.seq2seq.cpm_transformer module", "sparknlp.annotator.seq2seq.gpt2_transformer module", "sparknlp.annotator.seq2seq.llama2_transformer module", "sparknlp.annotator.seq2seq.llama3_transformer module", "sparknlp.annotator.seq2seq.m2m100_transformer module", "sparknlp.annotator.seq2seq.marian_transformer module", "sparknlp.annotator.seq2seq.mistral_transformer module", "sparknlp.annotator.seq2seq.nllb_transformer module", "sparknlp.annotator.seq2seq.olmo_transformer module", "sparknlp.annotator.seq2seq.phi2_transformer module", "sparknlp.annotator.seq2seq.phi3_transformer module", "sparknlp.annotator.seq2seq.phi4_transformer module", "sparknlp.annotator.seq2seq.qwen_transformer module", "sparknlp.annotator.seq2seq.starcoder_transformer module", "sparknlp.annotator.seq2seq.t5_transformer module", "sparknlp.annotator.similarity package", "sparknlp.annotator.similarity.document_similarity_ranker module", "sparknlp.annotator.spell_check package", "sparknlp.annotator.spell_check.context_spell_checker module", "sparknlp.annotator.spell_check.norvig_sweeting module", "sparknlp.annotator.spell_check.symmetric_delete module", "sparknlp.annotator.stemmer module", "sparknlp.annotator.stop_words_cleaner module", "sparknlp.annotator.tf_ner_dl_graph_builder module", "sparknlp.annotator.token package", "sparknlp.annotator.token.chunk_tokenizer module", "sparknlp.annotator.token.recursive_tokenizer module", "sparknlp.annotator.token.regex_tokenizer module", "sparknlp.annotator.token.tokenizer module", "sparknlp.annotator.token2_chunk module", "sparknlp.annotator.ws package", "sparknlp.annotator.ws.word_segmenter module", "sparknlp.base package", "sparknlp.base.audio_assembler module", "sparknlp.base.doc2_chunk module", "sparknlp.base.document_assembler module", "sparknlp.base.embeddings_finisher module", "sparknlp.base.finisher module", "sparknlp.base.gguf_ranking_finisher module", "sparknlp.base.graph_finisher module", "sparknlp.base.has_recursive_fit module", "sparknlp.base.has_recursive_transform module", "sparknlp.base.image_assembler module", "sparknlp.base.light_pipeline module", "sparknlp.base.multi_document_assembler module", "sparknlp.base.prompt_assembler module", "sparknlp.base.recursive_pipeline module", "sparknlp.base.table_assembler module", "sparknlp.base.token_assembler module", "sparknlp.common package", "sparknlp.common.annotator_approach module", "sparknlp.common.annotator_model module", "sparknlp.common.annotator_properties module", "sparknlp.common.annotator_type module", "sparknlp.common.coverage_result module", "sparknlp.common.match_strategy module", "sparknlp.common.properties module", "sparknlp.common.read_as module", "sparknlp.common.recursive_annotator_approach module", "sparknlp.common.storage module", "sparknlp.common.utils module", "sparknlp.functions module", "sparknlp.internal package", "sparknlp.internal.annotator_java_ml module", "sparknlp.internal.annotator_transformer module", "sparknlp.internal.extended_java_wrapper module", "sparknlp.internal.params_getters_setters module", "sparknlp.internal.recursive module", "sparknlp.logging package", "sparknlp.logging.comet module", "sparknlp.partition package", "sparknlp.partition.partition module", "sparknlp.partition.partition_properties module", "sparknlp.partition.partition_transformer module", "sparknlp.pretrained package", "sparknlp.pretrained.pretrained_pipeline module", "sparknlp.pretrained.resource_downloader module", "sparknlp.pretrained.utils module", "sparknlp.reader package", "sparknlp.reader.enums module", "sparknlp.reader.pdf_to_text module", "sparknlp.reader.reader2doc module", "sparknlp.reader.reader2image module", "sparknlp.reader.reader2table module", "sparknlp.reader.sparknlp_reader module", "sparknlp.training package", "sparknlp.training.conll module", "sparknlp.training.conllu module", "sparknlp.training.pos module", "sparknlp.training.pub_tator module", "sparknlp.training.spacy_to_annotation module", "sparknlp.training.tfgraphs module", "sparknlp.upload_to_hub module", "sparknlp.util module", "Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners.cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners.extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cleaners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.blip_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.florence2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.gemma3_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.internvl_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.janus_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.llava_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.mllama_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.paligemma_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.phi3_vision_for_multimodal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.qwen2vl_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.smolvlm_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dataframe_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.auto_gguf_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bge_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5v_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.minilm_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mxbai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.nomic_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.snowflake_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.uae_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl_graph_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_reranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_vision_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.cohere_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.cpm_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.m2m100_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.mistral_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.nllb_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.olmo_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi4_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.qwen_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.starcoder_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.gguf_ranking_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.prompt_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.partition.partition_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.enums</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.pdf_to_text</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.reader2doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.reader2image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.reader2table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.reader.sparknlp_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"6": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530], "packag": [0, 91, 92, 95, 98, 160, 161, 162, 234, 259, 348, 349, 352, 355, 418, 419, 420, 493, 521, 522], "subpackag": 0, "annot": [0, 1, 3, 4, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 225, 226, 227, 228, 229, 232, 234, 236, 238, 239, 240, 241, 242, 246, 247, 253, 255, 260, 262, 263, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 480, 484, 485, 486, 487, 488, 490, 492, 493, 496, 498, 500, 501, 502, 506, 507, 513, 515, 520, 521, 526, 527, 528, 529, 530], "submodul": 0, "modul": [0, 260, 295, 342, 361, 380, 382, 383, 385, 390, 395, 404, 409, 410, 412, 415, 425, 442, 449, 454, 466, 478, 490, 495, 499, 504, 512], "content": [0, 65, 71, 72, 73, 74, 75, 76, 77, 98, 117, 158, 199, 210, 236, 237, 238, 245, 246, 247, 249, 253, 523, 529], "base": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 232, 234, 236, 237, 238, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 386, 387, 388, 389, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 473, 474, 475, 478, 480, 482, 486, 488, 492, 493, 506, 508, 520, 524, 525, 528], "common": [0, 1, 50, 114, 122, 131, 146, 147, 174, 175, 178, 190, 199, 279, 308, 349, 372, 379, 389, 400, 405, 406, 433, 434, 437, 448, 457, 486, 527], "intern": [0, 1, 103, 175, 179, 183, 193, 196, 212, 360, 407, 408, 434, 438, 441, 452, 455, 471, 475, 480, 486, 497], "log": [0, 1, 28, 44, 50, 140, 146, 150, 155, 166, 173, 221, 260, 285, 302, 308, 399, 405, 408, 414, 424, 432, 480, 486], "partit": [0, 1, 81, 100, 116, 245, 251, 339, 357, 374, 486, 505, 510], "pretrain": [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 133, 134, 136, 139, 140, 141, 142, 143, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 189, 193, 195, 196, 201, 202, 203, 208, 226, 234, 260, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 388, 389, 392, 393, 398, 399, 400, 401, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 452, 455, 459, 460, 461, 467, 485, 486, 493, 520, 523, 527], "reader": [0, 1, 236, 241, 486, 496, 501], "train": [0, 1, 7, 9, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 70, 71, 78, 80, 84, 85, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 113, 115, 116, 118, 119, 120, 125, 127, 128, 130, 133, 134, 137, 139, 140, 141, 144, 149, 150, 152, 155, 157, 158, 163, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 190, 191, 196, 199, 208, 221, 224, 234, 240, 260, 264, 267, 272, 273, 274, 275, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 291, 292, 293, 297, 298, 300, 301, 302, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 323, 324, 328, 329, 336, 338, 341, 343, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 364, 365, 367, 368, 369, 371, 373, 374, 376, 377, 378, 384, 386, 387, 388, 392, 393, 396, 398, 399, 400, 403, 407, 408, 411, 414, 416, 417, 421, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 448, 450, 455, 457, 467, 480, 483, 486, 493, 500, 520, 524, 525, 527, 528], "annotation_audio": [0, 1, 486], "annotationaudio": [0, 1, 3, 262], "annotation_imag": [0, 1, 486], "annotationimag": [0, 1, 4, 162, 208, 240, 263, 420, 467, 500], "function": [0, 1, 69, 70, 71, 73, 77, 103, 114, 117, 162, 163, 179, 201, 210, 241, 260, 326, 328, 329, 331, 335, 360, 372, 375, 420, 421, 438, 459, 469, 501, 519, 527], "explode_annotations_col": [0, 1, 226, 485], "filter_by_annotations_col": [0, 1, 226, 485], "map_annot": [0, 1, 226, 485], "map_annotations_arrai": [0, 1, 226, 485], "map_annotations_col": [0, 1, 226, 485], "map_annotations_strict": [0, 1, 226, 485], "upload_to_hub": [0, 1, 486], "pushtohub": [0, 1, 257, 517], "util": [0, 1, 7, 71, 97, 102, 139, 143, 154, 155, 171, 177, 185, 211, 214, 219, 222, 224, 228, 231, 239, 264, 329, 354, 359, 398, 402, 413, 414, 430, 436, 444, 470, 477, 478, 481, 483, 486, 487, 491, 499], "conllgener": [0, 1, 258, 518], "embeddingsdataframeutil": [0, 1, 102, 258, 359, 518], "get_config_path": [0, 1, 258, 518], "read": [0, 1, 28, 50, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 88, 100, 116, 125, 128, 130, 131, 132, 133, 134, 139, 143, 144, 150, 155, 157, 166, 183, 184, 185, 193, 196, 198, 200, 207, 209, 222, 224, 225, 227, 228, 234, 235, 236, 237, 238, 241, 243, 245, 246, 247, 249, 251, 252, 253, 254, 285, 308, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 346, 357, 374, 384, 387, 388, 389, 391, 392, 393, 398, 402, 403, 408, 414, 416, 424, 441, 443, 444, 452, 455, 456, 458, 465, 468, 481, 483, 484, 486, 487, 493, 495, 496, 497, 498, 501, 504, 505, 506, 507, 509, 510, 511, 513, 514, 520, 524, 530], "start": [0, 1, 7, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 105, 123, 125, 139, 140, 155, 160, 161, 162, 199, 221, 234, 260, 264, 271, 277, 281, 286, 290, 296, 299, 304, 310, 311, 363, 381, 384, 398, 399, 414, 418, 419, 420, 457, 480, 486, 493, 520, 523, 525, 528, 529], "version": [0, 1, 9, 87, 95, 99, 101, 106, 107, 168, 175, 177, 210, 232, 240, 241, 259, 267, 345, 352, 356, 358, 364, 365, 407, 408, 427, 434, 436, 447, 469, 475, 480, 486, 491, 492, 497, 500, 501, 524, 529], "audio": [1, 3, 5, 198, 214, 218, 234, 262, 382, 456, 476, 486, 493], "classifier_dl": [1, 5, 382, 486], "cleaner": [1, 5, 382, 486], "coref": [1, 5, 382, 486], "cv": [1, 5, 382, 486], "depend": [1, 2, 5, 63, 96, 107, 112, 120, 122, 123, 125, 127, 140, 170, 183, 196, 214, 218, 221, 257, 259, 261, 317, 321, 353, 365, 370, 378, 379, 381, 382, 384, 386, 399, 429, 441, 455, 476, 480, 486, 517], "embed": [1, 2, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 70, 74, 77, 123, 139, 140, 141, 142, 147, 160, 161, 165, 181, 200, 201, 202, 208, 209, 214, 221, 226, 232, 240, 257, 258, 261, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 326, 328, 332, 335, 381, 382, 398, 399, 400, 401, 406, 418, 419, 423, 439, 458, 459, 460, 467, 468, 480, 485, 486, 492, 500, 518, 523], "er": [1, 5, 382, 486], "keyword_extract": [1, 5, 382, 486], "ld_dl": [1, 5, 382, 486], "matcher": [1, 5, 382, 486], "ner": [1, 5, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 118, 119, 123, 190, 208, 226, 234, 240, 273, 279, 283, 288, 292, 298, 301, 306, 313, 316, 376, 377, 381, 382, 448, 467, 485, 486, 493, 500, 520], "openai": [1, 5, 109, 166, 367, 382, 424, 486], "param": [1, 5, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 191, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 212, 213, 217, 221, 224, 231, 232, 236, 237, 238, 245, 246, 247, 248, 249, 255, 318, 382, 398, 439, 474, 475, 480, 486, 491, 492, 496, 497, 509, 515], "po": [1, 2, 5, 11, 15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 84, 85, 123, 136, 139, 140, 191, 196, 208, 214, 218, 226, 240, 250, 251, 261, 269, 272, 275, 278, 280, 282, 287, 289, 291, 293, 297, 305, 307, 312, 314, 315, 341, 343, 381, 382, 398, 399, 450, 455, 467, 476, 485, 486, 500, 510, 512, 523, 527, 528, 529], "sentenc": [1, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 84, 85, 87, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 147, 152, 158, 163, 170, 179, 181, 183, 187, 190, 192, 194, 196, 200, 202, 208, 209, 212, 213, 221, 240, 246, 251, 252, 253, 254, 255, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 326, 328, 329, 330, 331, 332, 333, 334, 335, 340, 341, 343, 345, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 406, 411, 417, 421, 429, 438, 439, 441, 446, 448, 451, 453, 455, 458, 460, 467, 468, 471, 472, 480, 486, 500, 506, 510, 511, 513, 514, 515, 524, 528, 529], "sentiment": [1, 2, 5, 28, 44, 50, 103, 120, 179, 214, 218, 257, 261, 285, 302, 308, 360, 378, 382, 438, 476, 486, 517, 524, 525], "seq2seq": [1, 5, 382, 486], "similar": [1, 5, 66, 91, 104, 114, 115, 125, 127, 162, 178, 323, 348, 362, 372, 373, 382, 384, 386, 420, 437, 486], "spell_check": [1, 5, 382, 486], "token": [1, 2, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 84, 85, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 125, 128, 129, 130, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 149, 150, 152, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 188, 194, 196, 199, 201, 208, 211, 213, 214, 218, 221, 240, 251, 254, 255, 257, 261, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 341, 343, 346, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 384, 387, 388, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 408, 411, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 453, 455, 457, 459, 467, 470, 472, 476, 480, 486, 500, 510, 514, 515, 517, 524, 528, 529], "w": [1, 5, 122, 133, 139, 144, 191, 193, 379, 382, 392, 398, 403, 450, 452, 486], "chunk2_doc": [1, 5, 382, 486], "chunk2doc": [1, 5, 10, 199, 268, 457], "chunker": [1, 5, 97, 354, 382, 486], "dataframe_optim": [1, 5, 382, 486], "dataframeoptim": [1, 5, 81, 339], "tostringdict": [1, 5, 81, 339], "date2_chunk": [1, 5, 382, 486], "date2chunk": [1, 5, 82, 340], "document_character_text_splitt": [1, 5, 382, 486], "documentcharactertextsplitt": [1, 5, 86, 344], "document_norm": [1, 5, 382, 486], "documentnorm": [1, 5, 86, 87, 88, 344, 345, 346], "document_token_splitt": [1, 5, 382, 486], "documenttokensplitt": [1, 5, 88, 346], "document_token_splitter_test": [1, 5, 382, 486], "graph_extract": [1, 5, 382, 486], "graphextract": [1, 5, 123, 204, 381, 462], "lemmat": [1, 5, 157, 187, 211, 213, 257, 382, 416, 446, 470, 472, 486], "lemmatizermodel": [1, 5, 128, 387], "n_gram_gener": [1, 5, 382, 486], "ngramgener": [1, 5, 97, 135, 354, 394], "normal": [1, 5, 28, 67, 78, 79, 80, 87, 130, 155, 158, 187, 201, 203, 211, 213, 221, 237, 285, 324, 336, 337, 338, 345, 382, 388, 414, 417, 446, 459, 461, 470, 472, 480, 486, 497, 524, 525], "normalizermodel": [1, 5, 144, 403], "stemmer": [1, 5, 187, 382, 446, 486], "stop_words_clean": [1, 5, 382, 486], "stopwordsclean": [1, 5, 187, 201, 213, 446, 459, 472], "tf_ner_dl_graph_build": [1, 5, 382, 486], "tfnerdlgraphbuild": [1, 5, 188, 447], "tfnerdlgraphbuildermodel": [1, 5, 188, 447], "token2_chunk": [1, 5, 382, 486], "token2chunk": [1, 5, 194, 453], "audio_assembl": [1, 7, 8, 9, 197, 264, 266, 267, 466, 486], "audioassembl": [1, 7, 8, 9, 197, 198, 264, 266, 267, 456], "doc2_chunk": [1, 197, 466, 486], "doc2chunk": [1, 10, 197, 199, 268, 457], "document_assembl": [1, 51, 143, 181, 197, 212, 309, 402, 439, 466, 471, 486], "documentassembl": [1, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 203, 209, 211, 212, 213, 234, 238, 246, 251, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 321, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 457, 458, 459, 461, 468, 470, 471, 472, 493, 498, 506, 510, 520, 524], "embeddings_finish": [1, 197, 466, 486], "embeddingsfinish": [1, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 197, 201, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 459], "finish": [1, 158, 181, 197, 201, 203, 204, 209, 211, 417, 439, 459, 461, 462, 466, 470, 486], "gguf_ranking_finish": [1, 197, 466, 486], "ggufrankingfinish": [1, 197, 203, 461], "graph_finish": [1, 197, 466, 486], "graphfinish": [1, 123, 197, 204, 381, 462], "has_recursive_fit": [1, 197, 466, 486], "hasrecursivefit": [1, 197, 205, 206, 463, 464], "has_recursive_transform": [1, 197, 466, 486], "hasrecursivetransform": [1, 197, 206, 464], "image_assembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 162, 197, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 359, 420, 466, 486], "imageassembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 162, 197, 207, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 359, 420, 465], "light_pipelin": [1, 197, 466, 486], "lightpipelin": [1, 197, 208, 240, 467, 500, 528], "multi_document_assembl": [1, 197, 466, 486], "multidocumentassembl": [1, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 197, 209, 270, 271, 276, 277, 281, 286, 290, 294, 296, 299, 303, 304, 309, 310, 311, 468], "prompt_assembl": [1, 197, 466, 486], "promptassembl": [1, 197, 210, 469], "recursive_pipelin": [1, 197, 232, 466, 486, 492], "recursivepipelin": [1, 197, 205, 206, 211, 217, 463, 464, 470, 475], "recursivepipelinemodel": [1, 197, 211, 470], "table_assembl": [1, 51, 197, 309, 466, 486], "tableassembl": [1, 51, 197, 212, 309, 471], "token_assembl": [1, 197, 466, 486], "tokenassembl": [1, 197, 213, 472], "annotator_approach": [1, 214, 478, 486], "annotatorapproach": [1, 28, 44, 50, 84, 85, 100, 116, 117, 122, 128, 130, 133, 134, 139, 140, 144, 152, 155, 157, 158, 181, 183, 184, 185, 191, 193, 196, 214, 215, 223, 234, 473, 482, 493], "annotator_model": [1, 214, 478, 486], "annotatormodel": [1, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 191, 192, 193, 194, 196, 208, 212, 214, 216, 217, 238, 241, 467, 474, 501], "annotator_properti": [1, 214, 478, 486], "annotatorproperti": [1, 10, 199, 213, 214, 215, 216, 217, 223, 475], "annotator_typ": [1, 2, 3, 4, 214, 261, 262, 263, 478, 486], "annotatortyp": [1, 2, 3, 4, 22, 97, 135, 199, 200, 207, 209, 214, 218, 226, 247, 261, 262, 263, 279, 354, 394, 457, 458, 465, 468, 476, 507, 523], "coverage_result": [1, 214, 478, 486], "coverageresult": [1, 117, 214, 219, 375, 477], "match_strategi": [1, 214, 478, 486], "matchstrategi": [1, 131, 214, 220, 389, 479], "properti": [1, 91, 175, 205, 206, 214, 217, 237, 348, 434, 463, 464, 475, 478, 486, 497], "hasaudiofeatureproperti": [1, 7, 8, 9, 214, 221, 480], "hasbatchedannot": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 91, 92, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 140, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 480], "hasbatchedannotateaudio": [1, 7, 8, 9, 214, 221, 480], "hasbatchedannotateimag": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 214, 221, 480], "hascandidatelabelsproperti": [1, 17, 18, 23, 27, 32, 36, 49, 56, 65, 66, 71, 72, 73, 74, 75, 76, 77, 214, 221, 480], "hascasesensitiveproperti": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 214, 221, 224, 480], "hasclassifieractivationproperti": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 214, 221, 480], "hasclstokenproperti": [1, 95, 214, 221, 480], "hasembeddingsproperti": [1, 63, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 141, 181, 214, 221, 400, 480], "hasenablecachingproperti": [1, 100, 116, 181, 214, 221, 480], "hasengin": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 94, 96, 98, 99, 102, 103, 105, 110, 111, 115, 118, 119, 120, 127, 140, 143, 155, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 214, 221, 480], "hasgeneratorproperti": [1, 9, 69, 70, 79, 214, 221, 480], "hasimagefeatureproperti": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 214, 221, 480], "hasllamacppproperti": [1, 160, 161, 162, 214, 221, 480], "haslongmaxsentencelengthlimit": [1, 38, 39, 40, 105, 214, 221, 480], "hasmaxsentencelengthlimit": [1, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 47, 52, 53, 54, 55, 57, 58, 63, 91, 93, 94, 95, 96, 98, 99, 101, 104, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 214, 221, 480], "hasrescalefactor": [1, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 102, 214, 221, 480], "read_a": [1, 84, 85, 122, 128, 130, 133, 134, 139, 144, 150, 157, 184, 185, 193, 214, 224, 225, 251, 252, 341, 343, 379, 387, 388, 392, 393, 398, 403, 408, 416, 443, 444, 452, 478, 483, 484, 486, 510, 511], "reada": [1, 84, 85, 117, 122, 128, 130, 133, 134, 139, 144, 150, 157, 184, 185, 190, 193, 214, 222, 224, 225, 251, 252, 341, 343, 375, 379, 387, 388, 392, 393, 398, 403, 408, 416, 443, 444, 448, 452, 481, 483, 484, 510, 511], "recursive_annotator_approach": [1, 214, 478, 486], "recursiveannotatorapproach": [1, 214, 223, 482], "storag": [1, 117, 122, 130, 214, 375, 379, 388, 478, 486], "hasstorag": [1, 117, 122, 130, 214, 224, 483], "hasstoragemodel": [1, 117, 122, 130, 214, 224, 483], "hasstorageopt": [1, 214, 224, 483], "hasstorageref": [1, 28, 44, 50, 63, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 127, 140, 214, 224, 483], "externalresourc": [1, 130, 134, 214, 225, 388, 393, 484], "regexrul": [1, 214, 225, 484], "annotator_java_ml": [1, 227, 486, 490], "annotatorjavamlread": [1, 215, 216, 223, 227, 228, 229, 487], "annotator_transform": [1, 227, 486, 490], "annotatortransform": [1, 10, 181, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 213, 227, 229, 246, 247, 248, 488], "extended_java_wrapp": [1, 227, 486, 490], "extendedjavawrapp": [1, 227, 230, 236, 249, 251, 252, 253, 254, 255, 489], "params_getters_sett": [1, 227, 486, 490], "paramsgetterssett": [1, 141, 149, 150, 215, 216, 223, 227, 229, 231, 491], "recurs": [1, 191, 211, 223, 227, 450, 470, 482, 486, 490], "recursiveestim": [1, 205, 223, 227, 232, 492], "recursivetransform": [1, 206, 227, 232, 492], "comet": [1, 233, 486, 494, 522], "cometlogg": [1, 233, 234, 493, 520], "partition_properti": [1, 235, 486, 495], "haschunkerproperti": [1, 235, 237, 238, 497], "hasemailreaderproperti": [1, 235, 237, 238, 246, 248, 497], "hasexcelreaderproperti": [1, 235, 237, 238, 246, 248, 497], "hashtmlreaderproperti": [1, 235, 237, 238, 246, 247, 248, 497], "haspdfproperti": [1, 235, 237, 247, 497], "haspowerpointproperti": [1, 235, 237, 238, 246, 248, 497], "hasreaderproperti": [1, 235, 237, 246, 247, 248, 497], "hastextreaderproperti": [1, 235, 237, 238, 246, 248, 497], "partition_transform": [1, 235, 486, 495], "partitiontransform": [1, 235, 238, 498], "pretrained_pipelin": [1, 239, 486, 499], "pretrainedpipelin": [1, 10, 202, 208, 226, 239, 240, 268, 460, 467, 485, 500, 523, 528, 529], "resource_download": [1, 239, 486, 499], "resourcedownload": [1, 239, 241, 501, 524, 529], "printprogress": [1, 239, 242, 502], "enum": [1, 243, 486, 504], "textstrippertyp": [1, 243, 244, 245, 503, 505], "pdf_to_text": [1, 243, 486, 504], "pdftotext": [1, 243, 245, 505], "reader2doc": [1, 243, 486, 504], "reader2imag": [1, 243, 486, 504], "reader2t": [1, 243, 486, 504], "sparknlp_read": [1, 243, 486, 504], "sparknlpread": [1, 243, 249, 509], "conll": [1, 84, 85, 139, 140, 141, 250, 252, 341, 343, 398, 399, 400, 486, 511, 512, 527], "conllu": [1, 83, 84, 85, 128, 250, 341, 343, 387, 486, 512, 527], "pub_tat": [1, 250, 486, 512], "pubtat": [1, 250, 254, 514, 527], "spacy_to_annot": [1, 250, 486, 512], "spacytoannot": [1, 250, 255, 515], "tfgraph": [1, 250, 486, 512], "arraytyp": [1, 2, 199, 226, 261, 457, 485], "copi": [1, 2, 3, 4, 241, 261, 262, 263, 501], "datatyp": [1, 2, 226, 261, 485], "fromrow": [1, 2, 261], "torow": [1, 2, 261], "check_for_required_info": [1, 257, 517], "create_doc": [1, 257, 517], "list_of_task": [1, 257, 517], "push_to_hub": [1, 257, 517], "unzip_directori": [1, 257, 517], "zip_directori": [1, 257, 517], "exportconllfil": [1, 258, 518], "emptyimagerow": [1, 102, 258, 359, 518], "imageschema": [1, 102, 258, 359, 518], "none": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 141, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 193, 194, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 216, 217, 221, 229, 232, 234, 236, 238, 240, 241, 249, 255, 257, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 388, 392, 393, 398, 399, 400, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 452, 453, 455, 456, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 471, 474, 475, 480, 486, 488, 489, 492, 493, 496, 498, 500, 501, 509, 515, 517, 525], "sourcgpu": [1, 79, 91, 92, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 221, 317, 337, 348, 349, 418, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 480, 486], "fals": [1, 2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 143, 144, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 221, 226, 234, 237, 240, 245, 246, 247, 249, 251, 252, 253, 255, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 467, 468, 469, 471, 472, 480, 485, 486, 493, 497, 500, 505, 506, 507, 509, 510, 511, 513, 515, 520, 523, 524, 525, 530], "apple_silicon": [1, 486], "aarch64": [1, 486], "memori": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 92, 103, 117, 160, 161, 162, 221, 224, 236, 238, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 348, 349, 360, 375, 418, 419, 420, 480, 483, 486, 496, 498], "16g": [1, 259, 486], "cache_fold": [1, 486], "log_fold": [1, 486], "cluster_tmp_dir": [1, 486], "real_time_output": [1, 486], "output_level": [1, 486], "pyspark": [1, 2, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 203, 207, 208, 209, 212, 213, 224, 226, 230, 232, 234, 236, 240, 245, 246, 249, 251, 252, 253, 254, 259, 261, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 400, 401, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 465, 467, 468, 471, 472, 483, 485, 486, 489, 492, 493, 496, 500, 505, 506, 509, 510, 511, 513, 514, 524, 525], "instanc": [1, 44, 143, 161, 228, 302, 347, 402, 407, 408, 419, 475, 480, 486, 487, 491, 497], "default": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 143, 144, 149, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 188, 191, 192, 193, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 212, 217, 221, 225, 226, 234, 237, 240, 241, 245, 246, 251, 252, 253, 254, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 407, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 447, 450, 451, 452, 455, 457, 458, 459, 460, 461, 462, 465, 467, 468, 471, 480, 484, 485, 486, 493, 500, 501, 505, 506, 510, 511, 513, 514, 524], "paramet": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 217, 221, 224, 225, 226, 231, 232, 234, 236, 237, 238, 240, 241, 245, 246, 247, 248, 249, 251, 252, 253, 254, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 469, 471, 472, 475, 480, 483, 484, 485, 486, 491, 492, 493, 496, 497, 498, 500, 501, 505, 506, 507, 508, 509, 510, 511, 513, 514], "spark": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 146, 147, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 222, 224, 226, 227, 229, 230, 234, 236, 238, 240, 241, 245, 246, 247, 249, 251, 252, 253, 254, 255, 258, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 400, 401, 402, 403, 405, 406, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 481, 483, 485, 486, 488, 489, 490, 493, 496, 498, 500, 501, 505, 506, 507, 509, 510, 511, 513, 514, 515, 518, 519, 521, 522, 523, 524, 526, 527, 528, 530], "nlp": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 141, 142, 143, 144, 152, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 190, 191, 193, 196, 197, 199, 200, 201, 202, 207, 208, 209, 211, 212, 213, 214, 227, 234, 236, 238, 240, 241, 246, 247, 251, 252, 253, 254, 261, 262, 263, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 345, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 386, 387, 388, 392, 393, 398, 399, 400, 401, 402, 403, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 448, 450, 452, 455, 457, 458, 459, 460, 465, 466, 467, 468, 470, 471, 472, 478, 486, 490, 493, 496, 498, 500, 501, 506, 507, 510, 511, 513, 514, 519, 521, 522, 523, 524, 525, 526, 527, 528, 530], "The": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 138, 139, 140, 142, 143, 144, 146, 147, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 190, 192, 193, 196, 200, 202, 203, 207, 208, 209, 210, 212, 221, 224, 226, 234, 236, 238, 240, 241, 246, 247, 251, 252, 253, 254, 255, 257, 261, 262, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 397, 398, 399, 401, 402, 403, 405, 406, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 448, 451, 452, 455, 458, 460, 461, 465, 467, 468, 469, 471, 480, 483, 485, 486, 493, 496, 498, 500, 501, 506, 507, 510, 511, 513, 514, 515, 517, 520, 523, 524, 525, 527, 528, 530], "would": [1, 28, 63, 86, 97, 112, 131, 155, 285, 321, 344, 354, 370, 389, 414, 486, 524], "result": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 221, 226, 234, 240, 246, 247, 251, 252, 255, 257, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 405, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 469, 471, 472, 480, 485, 486, 493, 500, 506, 507, 510, 511, 515, 517, 520, 521, 523, 524, 525, 528, 529], "equival": [1, 17, 18, 23, 27, 32, 36, 49, 56, 208, 274, 275, 280, 284, 289, 293, 307, 314, 467, 486, 528], "sparksess": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 130, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 207, 224, 251, 252, 253, 254, 259, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 388, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 465, 483, 486, 510, 511, 513, 514], "builder": [1, 188, 259, 447, 486], "appnam": [1, 259, 486], "master": [1, 259, 486], "local": [1, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 125, 146, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 187, 208, 221, 240, 259, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 384, 405, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 446, 467, 480, 486, 500, 528], "config": [1, 259, 486, 521], "driver": [1, 162, 259, 420, 486], "serial": [1, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 122, 127, 140, 149, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 259, 264, 266, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 379, 386, 399, 407, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 486], "org": [1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 138, 139, 140, 142, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 196, 208, 221, 226, 236, 240, 249, 251, 259, 397, 398, 399, 401, 421, 455, 467, 485, 486, 496, 500, 509, 510, 521, 530], "apach": [1, 109, 171, 209, 259, 367, 430, 468, 486], "kryoseri": [1, 259, 486], "buffer": [1, 94, 117, 259, 351, 375, 486], "max": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 72, 74, 75, 76, 91, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 125, 181, 185, 203, 221, 236, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 330, 332, 333, 334, 348, 350, 351, 352, 353, 355, 356, 358, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 376, 377, 378, 384, 439, 444, 461, 480, 486, 496], "2000m": [1, 259, 486], "maxresults": [1, 259, 486], "0": [1, 7, 8, 9, 10, 11, 28, 44, 50, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 127, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 193, 194, 196, 200, 201, 202, 203, 208, 209, 210, 212, 213, 221, 226, 230, 232, 234, 238, 240, 241, 245, 246, 249, 252, 253, 254, 255, 259, 264, 266, 267, 268, 269, 285, 302, 308, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 386, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 411, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 444, 447, 452, 453, 455, 458, 459, 460, 461, 467, 468, 469, 471, 472, 475, 480, 485, 486, 489, 491, 492, 493, 497, 498, 500, 501, 505, 506, 509, 511, 513, 514, 515, 520, 523, 524, 529, 530], "jar": [1, 259, 486], "com": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 141, 143, 144, 146, 147, 152, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 190, 191, 193, 196, 212, 236, 238, 249, 259, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 388, 392, 393, 398, 399, 400, 402, 403, 405, 406, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 448, 450, 452, 455, 471, 486, 496, 498, 509], "johnsnowlab": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 87, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 141, 143, 144, 146, 147, 152, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 190, 191, 193, 196, 201, 202, 212, 238, 246, 259, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 345, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 388, 392, 393, 398, 399, 400, 402, 403, 405, 406, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 448, 450, 452, 455, 459, 460, 471, 486, 498, 506], "nlp_2": [1, 259, 486], "12": [1, 91, 118, 119, 120, 125, 131, 132, 138, 152, 183, 194, 208, 226, 240, 253, 255, 259, 348, 376, 377, 378, 384, 389, 391, 397, 411, 441, 453, 467, 485, 486, 500, 513, 515, 523], "releas": [1, 9, 87, 91, 95, 96, 98, 109, 110, 111, 118, 119, 163, 164, 167, 168, 171, 173, 174, 177, 178, 179, 267, 345, 348, 352, 353, 355, 367, 368, 369, 376, 377, 421, 422, 426, 427, 430, 432, 433, 436, 437, 438, 486], "getorcr": [1, 259, 486], "bool": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 60, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 86, 87, 88, 92, 93, 94, 97, 101, 102, 106, 110, 115, 118, 122, 123, 127, 130, 131, 134, 135, 138, 139, 140, 144, 150, 154, 155, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 187, 192, 193, 196, 199, 201, 202, 203, 204, 208, 210, 212, 217, 221, 224, 234, 236, 237, 240, 241, 245, 246, 248, 251, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 317, 326, 328, 329, 330, 331, 332, 333, 334, 335, 339, 344, 345, 346, 349, 350, 351, 354, 358, 359, 364, 368, 373, 376, 379, 381, 386, 388, 389, 393, 394, 397, 398, 399, 403, 408, 413, 414, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 446, 451, 452, 455, 457, 459, 460, 461, 462, 467, 469, 471, 475, 480, 483, 486, 493, 496, 497, 500, 501, 505, 506, 508, 510], "option": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 127, 128, 130, 133, 134, 139, 140, 143, 144, 150, 152, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 193, 196, 198, 200, 203, 207, 208, 209, 221, 224, 225, 226, 232, 234, 236, 237, 238, 240, 241, 245, 249, 251, 252, 253, 254, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 386, 387, 388, 392, 393, 398, 399, 402, 403, 408, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 452, 455, 456, 458, 461, 465, 467, 468, 483, 484, 485, 486, 492, 493, 496, 498, 500, 501, 505, 509, 510, 511, 513, 514, 524], "whether": [1, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 122, 123, 130, 131, 132, 134, 135, 138, 139, 140, 141, 144, 146, 150, 154, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 187, 192, 193, 196, 199, 201, 202, 203, 204, 208, 210, 212, 213, 217, 221, 224, 237, 238, 240, 245, 246, 248, 251, 254, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 379, 381, 388, 389, 391, 393, 394, 397, 398, 399, 400, 403, 405, 408, 413, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 446, 451, 452, 455, 457, 459, 460, 461, 462, 467, 469, 471, 472, 475, 480, 483, 486, 497, 500, 505, 506, 508, 510, 514, 525], "enabl": [1, 81, 92, 120, 140, 160, 161, 162, 167, 173, 174, 177, 181, 184, 201, 203, 221, 237, 238, 245, 246, 247, 339, 349, 378, 399, 418, 419, 420, 426, 432, 433, 436, 439, 443, 461, 480, 486, 498, 505, 506, 507], "acceler": [1, 79, 103, 120, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 317, 337, 360, 378, 421, 422, 423, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 486], "must": [1, 81, 92, 100, 116, 128, 130, 133, 134, 146, 150, 157, 158, 160, 161, 162, 184, 185, 199, 221, 226, 234, 251, 339, 347, 349, 357, 374, 387, 388, 392, 393, 405, 408, 416, 417, 418, 419, 420, 443, 444, 457, 480, 485, 486, 493, 510], "set": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 188, 191, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 217, 221, 224, 225, 231, 234, 237, 238, 241, 245, 246, 247, 248, 251, 259, 260, 261, 262, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 447, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 469, 471, 472, 474, 475, 480, 483, 484, 486, 491, 492, 493, 497, 501, 505, 506, 507, 508, 510, 520, 524, 527, 528], "up": [1, 7, 9, 28, 44, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 95, 100, 101, 105, 106, 107, 112, 114, 116, 125, 146, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 259, 260, 264, 267, 285, 302, 317, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 347, 352, 357, 358, 363, 364, 365, 370, 372, 374, 384, 405, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480, 486, 520, 524, 527, 528], "correctli": [1, 486], "appl": [1, 7, 8, 94, 111, 119, 264, 266, 351, 369, 377, 486], "silicon": [1, 7, 8, 264, 266, 486], "support": [1, 7, 8, 9, 28, 44, 68, 69, 70, 71, 88, 91, 95, 101, 102, 105, 106, 107, 125, 140, 144, 155, 162, 169, 170, 172, 175, 177, 178, 187, 207, 210, 212, 221, 236, 238, 246, 247, 264, 266, 267, 285, 302, 317, 325, 326, 328, 329, 346, 348, 352, 358, 359, 363, 364, 365, 384, 399, 403, 414, 420, 428, 429, 431, 434, 436, 437, 446, 465, 469, 471, 486, 496, 498, 506, 507, 521], "maco": [1, 486], "linux": [1, 486], "str": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 188, 191, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 217, 221, 224, 225, 226, 231, 234, 236, 237, 238, 240, 241, 245, 247, 249, 251, 252, 253, 254, 257, 261, 262, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 447, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 469, 471, 472, 475, 480, 483, 484, 485, 486, 491, 493, 496, 497, 498, 500, 501, 505, 507, 509, 510, 511, 513, 514, 517], "how": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 84, 85, 86, 88, 91, 92, 93, 95, 96, 97, 98, 99, 101, 103, 105, 109, 110, 112, 114, 118, 120, 122, 123, 127, 128, 130, 133, 134, 138, 139, 140, 144, 146, 150, 154, 157, 160, 161, 162, 164, 169, 184, 185, 192, 193, 196, 200, 204, 209, 210, 220, 221, 222, 224, 225, 247, 251, 252, 255, 259, 260, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 322, 323, 324, 329, 330, 331, 333, 334, 335, 336, 337, 338, 341, 343, 344, 346, 348, 349, 350, 352, 353, 354, 355, 356, 358, 360, 363, 367, 368, 370, 372, 376, 378, 379, 381, 386, 387, 388, 392, 393, 397, 398, 399, 403, 405, 408, 413, 416, 418, 419, 420, 422, 428, 443, 444, 451, 452, 455, 458, 462, 468, 469, 479, 480, 481, 483, 484, 486, 507, 510, 511, 515, 520, 524, 529], "much": [1, 17, 18, 23, 27, 28, 32, 36, 49, 51, 56, 91, 95, 101, 109, 110, 111, 144, 167, 169, 196, 274, 275, 280, 284, 285, 289, 293, 307, 309, 314, 348, 352, 358, 367, 368, 369, 403, 426, 428, 455, 486, 524], "alloc": [1, 486], "locat": [1, 10, 13, 19, 37, 45, 122, 154, 240, 268, 270, 276, 294, 303, 379, 413, 486, 500, 524], "download": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 123, 127, 128, 130, 134, 139, 140, 142, 143, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 240, 241, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 381, 386, 387, 388, 393, 398, 399, 401, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455, 486, 500, 501, 523, 524, 527, 528], "extract": [1, 10, 11, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 61, 67, 78, 79, 80, 84, 86, 88, 97, 117, 121, 122, 123, 124, 125, 130, 131, 132, 134, 138, 139, 140, 141, 142, 154, 155, 157, 181, 183, 185, 190, 194, 201, 202, 204, 208, 210, 221, 234, 236, 237, 240, 245, 246, 247, 268, 269, 271, 277, 281, 286, 290, 296, 299, 304, 310, 311, 318, 324, 336, 337, 338, 341, 344, 346, 354, 375, 379, 380, 381, 383, 384, 388, 389, 391, 393, 397, 398, 399, 400, 401, 413, 414, 416, 439, 441, 444, 448, 453, 459, 460, 462, 467, 469, 480, 486, 493, 496, 497, 500, 505, 506, 507, 520], "model": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 152, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 188, 190, 191, 193, 196, 210, 216, 221, 224, 232, 234, 240, 241, 247, 257, 258, 260, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 388, 392, 393, 397, 398, 399, 400, 402, 403, 405, 406, 408, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 447, 448, 450, 452, 455, 469, 474, 480, 483, 486, 492, 493, 500, 501, 507, 517, 518, 520, 521, 523, 527, 529, 530], "pipelin": [1, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 207, 208, 209, 211, 212, 213, 232, 234, 238, 239, 240, 241, 242, 245, 246, 247, 257, 260, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 400, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 465, 467, 468, 470, 471, 472, 486, 492, 493, 498, 499, 500, 501, 502, 505, 506, 507, 521, 523, 524, 527], "If": [1, 9, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 112, 117, 122, 127, 131, 132, 138, 139, 140, 141, 144, 150, 154, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 188, 208, 221, 232, 234, 237, 241, 246, 248, 259, 267, 272, 274, 275, 278, 280, 282, 284, 285, 287, 289, 291, 293, 297, 300, 302, 305, 307, 308, 312, 314, 315, 317, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 347, 370, 375, 379, 386, 389, 391, 397, 398, 399, 400, 403, 408, 413, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 447, 467, 480, 486, 492, 493, 497, 501, 506, 508, 520, 522, 524], "user": [1, 69, 71, 72, 73, 74, 75, 76, 77, 102, 138, 139, 145, 146, 147, 160, 161, 162, 165, 168, 171, 176, 193, 210, 211, 234, 245, 247, 249, 260, 326, 329, 330, 331, 332, 333, 334, 335, 359, 397, 398, 405, 406, 418, 419, 420, 423, 427, 430, 435, 452, 469, 470, 486, 493, 505, 507, 509, 520], "home": [1, 125, 249, 384, 486, 509], "directori": [1, 162, 236, 241, 249, 420, 486, 496, 501, 509, 520], "under": [1, 2, 99, 107, 109, 120, 125, 171, 178, 261, 356, 365, 367, 378, 384, 430, 437, 486], "cache_pretrain": [1, 486], "us": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 146, 147, 150, 152, 154, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 188, 192, 193, 194, 196, 199, 200, 201, 202, 208, 209, 210, 211, 212, 213, 220, 221, 226, 234, 236, 237, 238, 240, 241, 245, 246, 247, 249, 251, 252, 253, 254, 260, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 402, 405, 406, 408, 411, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 447, 451, 452, 453, 455, 457, 458, 459, 460, 467, 468, 469, 470, 471, 472, 479, 480, 485, 486, 493, 496, 497, 498, 500, 501, 506, 507, 509, 510, 511, 513, 514, 521, 522, 523, 524, 525, 527], "cluster": [1, 7, 95, 101, 104, 106, 115, 264, 352, 358, 362, 364, 373, 486], "temporarili": [1, 177, 436, 486], "file": [1, 3, 7, 8, 28, 44, 50, 65, 71, 72, 73, 74, 75, 76, 77, 84, 85, 87, 115, 117, 122, 128, 130, 133, 134, 139, 140, 141, 144, 150, 155, 157, 162, 183, 184, 185, 188, 193, 198, 212, 222, 224, 234, 236, 237, 238, 243, 245, 246, 247, 249, 251, 252, 253, 254, 257, 262, 264, 266, 285, 302, 308, 322, 329, 330, 331, 332, 333, 334, 335, 341, 343, 345, 373, 375, 379, 387, 388, 392, 393, 398, 399, 400, 403, 408, 414, 416, 420, 441, 443, 444, 447, 452, 456, 471, 481, 483, 486, 493, 496, 497, 498, 504, 505, 506, 507, 509, 510, 511, 513, 514, 517, 520, 530], "unpack": [1, 486], "index": [1, 2, 59, 61, 108, 113, 114, 125, 130, 192, 224, 251, 261, 318, 366, 371, 372, 384, 388, 451, 483, 486, 510], "wordembed": [1, 5, 90, 97, 112, 117, 140, 201, 354, 370, 375, 399, 459, 486], "By": [1, 114, 157, 163, 179, 187, 192, 201, 234, 347, 372, 416, 421, 438, 446, 451, 459, 486, 493, 520], "thi": [1, 2, 3, 4, 7, 8, 9, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 130, 131, 133, 134, 135, 138, 139, 140, 141, 142, 144, 146, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 190, 191, 192, 193, 194, 196, 198, 200, 201, 203, 204, 207, 208, 209, 210, 211, 212, 213, 217, 220, 221, 228, 232, 234, 236, 237, 238, 240, 241, 246, 247, 249, 253, 255, 259, 260, 261, 262, 263, 264, 266, 267, 269, 272, 273, 274, 275, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 291, 292, 293, 297, 298, 300, 301, 302, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 387, 388, 389, 392, 393, 394, 397, 398, 399, 400, 401, 403, 405, 407, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 448, 450, 451, 452, 453, 455, 456, 458, 459, 461, 462, 465, 467, 468, 469, 470, 471, 472, 474, 475, 479, 480, 486, 487, 491, 492, 493, 496, 497, 500, 501, 506, 507, 509, 513, 515, 519, 520, 523, 524, 525, 527, 528, 529], "i": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 221, 225, 226, 232, 234, 237, 238, 241, 245, 246, 248, 249, 251, 253, 254, 255, 259, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 405, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 469, 471, 472, 480, 484, 485, 486, 492, 493, 498, 501, 505, 506, 508, 509, 510, 513, 514, 515, 520, 521, 523, 524, 525, 527, 528, 529, 530], "hadoop": [1, 486], "tmp": [1, 81, 198, 207, 339, 456, 465, 486, 520], "dir": [1, 486], "via": [1, 9, 15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 81, 115, 161, 207, 221, 267, 272, 274, 275, 278, 280, 282, 284, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 339, 373, 419, 465, 480, 486], "configur": [1, 67, 112, 193, 236, 249, 259, 324, 347, 370, 452, 486, 496, 509], "note": [1, 7, 8, 9, 17, 18, 23, 28, 36, 44, 49, 50, 56, 79, 81, 91, 92, 95, 99, 101, 103, 106, 107, 110, 112, 117, 118, 120, 125, 140, 146, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 208, 221, 224, 236, 237, 249, 259, 264, 266, 267, 274, 275, 280, 285, 293, 302, 307, 308, 314, 317, 337, 339, 348, 349, 352, 356, 358, 360, 364, 365, 368, 370, 375, 376, 378, 384, 399, 405, 418, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 467, 480, 483, 486, 496, 497, 509, 529], "s3": [1, 241, 486, 501], "hdf": [1, 486], "dbf": [1, 486], "dict": [1, 2, 3, 4, 81, 84, 85, 122, 128, 130, 133, 134, 139, 142, 143, 144, 146, 150, 157, 183, 184, 185, 193, 208, 221, 225, 232, 234, 236, 237, 238, 240, 249, 257, 261, 262, 263, 339, 341, 343, 379, 387, 388, 392, 393, 398, 401, 402, 403, 405, 408, 416, 441, 443, 444, 452, 467, 480, 484, 486, 492, 493, 496, 497, 498, 500, 509, 517], "custom": [1, 86, 117, 139, 140, 141, 154, 155, 193, 210, 234, 247, 249, 344, 375, 398, 399, 400, 413, 414, 452, 469, 486, 493, 507, 509], "save": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 140, 150, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 224, 234, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 399, 408, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 483, 486, 493, 520, 524], "fromdure": [1, 7, 28, 44, 50, 66, 92, 99, 104, 139, 140, 141, 150, 154, 160, 161, 162, 181, 183, 221, 234, 237, 264, 285, 302, 308, 323, 349, 356, 362, 398, 399, 400, 408, 413, 418, 419, 420, 439, 441, 480, 486, 493, 497, 520], "annotator_log": [1, 486], "print": [1, 87, 241, 345, 347, 486, 501], "jvm": [1, 187, 446, 486], "output": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 217, 221, 226, 234, 236, 237, 238, 245, 246, 247, 248, 253, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 469, 471, 472, 475, 480, 485, 486, 493, 496, 497, 498, 505, 506, 507, 508, 513, 520, 523, 524, 525], "real": [1, 140, 171, 173, 174, 175, 177, 234, 399, 430, 432, 433, 434, 436, 486, 493, 520], "time": [1, 28, 44, 50, 61, 91, 95, 100, 116, 118, 119, 125, 131, 150, 158, 162, 183, 196, 285, 302, 308, 318, 348, 352, 357, 374, 376, 377, 384, 389, 408, 417, 420, 441, 455, 486, 523, 524, 528, 529], "int": [1, 2, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 123, 125, 127, 131, 135, 137, 139, 140, 141, 144, 146, 149, 150, 152, 154, 155, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 188, 192, 193, 196, 203, 221, 234, 236, 237, 245, 251, 261, 263, 264, 266, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 346, 348, 349, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 381, 384, 386, 389, 394, 396, 398, 399, 400, 403, 405, 407, 408, 411, 413, 414, 417, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 444, 447, 451, 452, 455, 461, 480, 486, 493, 496, 497, 505, 510], "level": [1, 16, 28, 44, 50, 93, 94, 105, 110, 111, 115, 117, 119, 122, 139, 140, 150, 183, 221, 237, 238, 251, 273, 285, 302, 308, 350, 351, 363, 368, 369, 373, 375, 377, 379, 398, 399, 408, 441, 480, 486, 510], "return": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 72, 73, 74, 75, 76, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 128, 130, 134, 135, 137, 139, 140, 143, 146, 152, 154, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 191, 193, 196, 199, 203, 207, 208, 221, 224, 225, 226, 228, 232, 236, 237, 240, 241, 246, 247, 249, 251, 252, 253, 254, 261, 262, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 326, 330, 331, 332, 333, 334, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 384, 386, 387, 388, 393, 394, 396, 398, 399, 402, 405, 411, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 450, 452, 455, 457, 461, 465, 467, 480, 483, 484, 485, 486, 487, 492, 496, 497, 500, 501, 506, 507, 509, 510, 511, 513, 514], "initi": [1, 100, 116, 160, 161, 162, 175, 183, 192, 211, 221, 246, 251, 252, 253, 254, 357, 374, 418, 419, 420, 434, 441, 451, 470, 480, 486, 506, 510, 511, 513, 514, 520], "session": [1, 249, 251, 252, 253, 254, 260, 486, 509, 510, 511, 513, 514], "sinc": [1, 87, 107, 125, 166, 167, 259, 345, 347, 365, 384, 424, 426, 486, 524, 525, 529], "2": [1, 7, 8, 11, 28, 44, 50, 51, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 85, 91, 92, 93, 94, 95, 97, 98, 103, 104, 109, 110, 115, 118, 119, 120, 122, 123, 125, 131, 132, 133, 134, 135, 138, 140, 146, 147, 150, 154, 157, 160, 161, 162, 163, 165, 166, 167, 168, 171, 174, 175, 181, 183, 184, 185, 194, 208, 221, 226, 230, 240, 241, 249, 252, 255, 259, 264, 266, 269, 285, 302, 308, 309, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 343, 348, 349, 350, 351, 352, 354, 355, 360, 362, 367, 368, 373, 376, 377, 378, 379, 381, 384, 389, 391, 392, 393, 394, 397, 399, 405, 406, 408, 413, 418, 419, 420, 421, 423, 424, 426, 427, 430, 433, 434, 439, 441, 443, 453, 467, 480, 485, 486, 489, 500, 501, 509, 511, 515, 523, 524, 529], "python": [1, 127, 236, 260, 386, 486, 496], "deprec": [1, 259, 486], "you": [1, 17, 18, 23, 36, 49, 56, 77, 81, 84, 85, 86, 88, 95, 97, 99, 101, 109, 110, 112, 123, 131, 142, 146, 164, 168, 170, 174, 176, 201, 204, 208, 210, 221, 234, 238, 241, 246, 247, 249, 253, 255, 259, 274, 275, 280, 293, 307, 314, 317, 335, 339, 341, 343, 344, 346, 347, 352, 354, 356, 358, 367, 368, 370, 381, 389, 401, 405, 422, 427, 429, 433, 435, 459, 462, 467, 469, 480, 486, 493, 498, 501, 506, 507, 509, 513, 515, 520, 522, 524, 525, 528, 529, 530], "ar": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 91, 92, 93, 95, 96, 98, 99, 103, 104, 105, 108, 110, 113, 114, 115, 117, 118, 119, 120, 122, 123, 125, 127, 128, 131, 133, 135, 138, 140, 141, 142, 143, 144, 146, 152, 154, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 196, 201, 207, 208, 210, 211, 212, 220, 221, 222, 226, 234, 236, 237, 241, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 352, 353, 355, 356, 360, 362, 363, 366, 368, 371, 372, 373, 375, 376, 377, 378, 379, 381, 384, 386, 387, 389, 392, 394, 397, 399, 400, 401, 402, 403, 405, 411, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 445, 447, 455, 459, 465, 467, 469, 470, 471, 479, 480, 481, 485, 486, 493, 496, 497, 501, 514, 515, 520, 521, 522, 523, 524, 525, 528, 529, 530], "consid": [1, 86, 117, 123, 125, 146, 158, 160, 161, 162, 164, 168, 170, 176, 183, 184, 185, 187, 191, 221, 236, 237, 241, 259, 317, 344, 375, 381, 384, 405, 418, 419, 420, 422, 427, 429, 435, 441, 443, 444, 446, 450, 480, 486, 496, 501], "stick": [1, 259, 486], "lower": [1, 87, 91, 125, 146, 181, 183, 199, 259, 345, 348, 384, 405, 439, 441, 457, 486], "current": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 88, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 125, 130, 131, 132, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 188, 208, 212, 217, 221, 224, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 346, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 384, 388, 389, 391, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 447, 467, 471, 475, 480, 483, 486, 523, 524, 525], "contain": [2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 63, 66, 67, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 249, 251, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 273, 274, 275, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 291, 292, 293, 297, 298, 300, 301, 302, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 321, 323, 324, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 509, 510, 511, 513, 514, 517, 518, 520, 523, 524], "data": [2, 3, 4, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 70, 80, 81, 82, 84, 85, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 149, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 207, 208, 209, 211, 212, 213, 226, 234, 236, 240, 249, 250, 251, 252, 253, 254, 257, 258, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 328, 338, 339, 340, 341, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 407, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 465, 467, 468, 470, 471, 472, 485, 493, 496, 500, 509, 510, 511, 512, 513, 514, 517, 521, 523, 524, 528, 529, 530], "format": [2, 3, 4, 9, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 122, 123, 128, 130, 131, 132, 133, 134, 139, 140, 144, 150, 157, 161, 163, 175, 179, 184, 185, 193, 196, 198, 200, 202, 204, 207, 209, 210, 212, 236, 237, 238, 245, 246, 247, 249, 251, 252, 253, 254, 255, 261, 262, 263, 267, 318, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 379, 381, 387, 388, 389, 391, 392, 393, 398, 399, 403, 408, 416, 419, 421, 434, 438, 443, 444, 452, 455, 456, 458, 460, 462, 465, 468, 469, 471, 496, 497, 498, 505, 506, 507, 509, 510, 511, 513, 514, 515, 521, 530], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 382, 478, 490, 512, 519, 520, 528, 530], "begin": [2, 63, 86, 88, 138, 166, 191, 193, 199, 200, 209, 226, 261, 321, 344, 346, 397, 424, 450, 452, 457, 458, 468, 485, 523], "end": [2, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 63, 75, 86, 88, 140, 146, 147, 155, 160, 161, 162, 163, 165, 173, 179, 191, 193, 196, 200, 209, 210, 221, 226, 233, 234, 236, 251, 261, 271, 277, 281, 286, 290, 296, 299, 304, 310, 311, 321, 333, 344, 346, 399, 405, 406, 414, 418, 419, 420, 421, 423, 432, 438, 450, 452, 455, 458, 468, 469, 480, 485, 493, 496, 510, 520, 523, 525], "metadata": [2, 3, 4, 51, 63, 82, 88, 92, 125, 134, 139, 140, 143, 152, 161, 200, 202, 203, 207, 208, 209, 221, 226, 234, 236, 237, 238, 241, 246, 247, 248, 249, 261, 262, 263, 309, 321, 340, 346, 349, 384, 393, 398, 399, 402, 411, 419, 458, 460, 461, 465, 467, 468, 480, 485, 493, 496, 497, 501, 506, 507, 508, 509, 523, 525], "object": [2, 3, 4, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 139, 140, 143, 146, 152, 154, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 183, 184, 185, 186, 187, 196, 208, 218, 219, 220, 221, 222, 224, 234, 240, 241, 257, 258, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 386, 387, 398, 399, 402, 405, 411, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 441, 443, 444, 445, 446, 455, 479, 481, 488, 489, 493, 508, 523, 524], "repres": [2, 3, 4, 84, 85, 91, 98, 104, 108, 113, 114, 120, 122, 123, 130, 134, 135, 146, 147, 161, 165, 171, 193, 234, 240, 261, 262, 263, 341, 343, 348, 355, 362, 366, 371, 372, 378, 379, 381, 388, 393, 394, 405, 406, 419, 423, 430, 452, 493, 500, 524], "detail": [2, 3, 4, 9, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 113, 118, 119, 125, 143, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 261, 262, 263, 267, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 371, 376, 377, 384, 402, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "type": [2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 221, 226, 228, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 253, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 469, 471, 472, 480, 485, 487, 495, 496, 497, 498, 500, 503, 504, 505, 506, 507, 513, 523, 524, 527], "possibl": [2, 3, 4, 60, 61, 97, 99, 118, 119, 122, 141, 154, 183, 185, 200, 209, 210, 220, 221, 222, 234, 261, 262, 263, 317, 354, 356, 376, 377, 379, 400, 413, 441, 444, 458, 468, 469, 479, 480, 481, 493, 520], "valu": [2, 3, 4, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 94, 97, 103, 104, 108, 113, 114, 115, 118, 122, 123, 125, 127, 128, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 187, 188, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 217, 220, 221, 222, 224, 231, 234, 236, 237, 238, 244, 245, 246, 247, 248, 249, 261, 262, 263, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 351, 354, 360, 362, 366, 371, 372, 373, 376, 379, 381, 384, 386, 387, 389, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 411, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 446, 447, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 469, 471, 472, 475, 479, 480, 481, 483, 491, 493, 496, 497, 498, 505, 506, 507, 508, 509, 520, 530], "documentwordpiec": [2, 214, 218, 261, 476], "word_embed": [2, 5, 90, 91, 93, 96, 97, 98, 99, 103, 105, 110, 112, 116, 118, 120, 139, 140, 150, 188, 214, 218, 261, 348, 350, 353, 354, 355, 356, 360, 361, 363, 368, 370, 374, 376, 378, 382, 398, 399, 408, 476], "sentence_embed": [2, 5, 28, 44, 50, 90, 92, 94, 95, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 119, 147, 181, 214, 218, 234, 261, 285, 302, 308, 349, 351, 352, 357, 358, 359, 361, 362, 364, 365, 366, 367, 369, 371, 372, 373, 377, 382, 406, 439, 476, 493, 520, 524], "categori": [2, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 66, 67, 78, 80, 214, 218, 234, 261, 272, 274, 275, 278, 280, 282, 284, 285, 287, 289, 291, 293, 297, 300, 302, 305, 307, 308, 312, 314, 315, 323, 324, 336, 338, 476, 493, 520, 524], "date": [2, 61, 82, 131, 132, 133, 210, 214, 218, 261, 318, 340, 389, 391, 392, 469, 476], "entiti": [2, 10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 63, 78, 82, 96, 121, 122, 123, 129, 130, 134, 136, 137, 138, 139, 140, 142, 143, 190, 194, 202, 208, 214, 218, 240, 257, 261, 268, 273, 279, 283, 288, 292, 298, 301, 306, 313, 316, 321, 336, 340, 353, 379, 380, 381, 388, 393, 395, 396, 397, 398, 399, 401, 402, 448, 453, 460, 467, 476, 500, 517], "chunk": [2, 10, 11, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 60, 61, 82, 86, 88, 92, 97, 100, 116, 122, 125, 130, 133, 134, 135, 138, 160, 162, 190, 194, 199, 202, 214, 218, 226, 234, 235, 237, 238, 254, 257, 261, 268, 269, 270, 271, 276, 277, 281, 286, 290, 294, 296, 299, 303, 304, 309, 310, 311, 317, 318, 340, 344, 346, 349, 354, 357, 374, 379, 384, 388, 392, 393, 394, 397, 418, 420, 448, 453, 457, 460, 476, 485, 493, 495, 498, 514, 520, 530], "named_ent": [2, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 123, 138, 139, 140, 142, 143, 150, 208, 214, 218, 240, 261, 273, 279, 283, 288, 292, 298, 301, 306, 313, 316, 381, 397, 398, 399, 401, 402, 408, 467, 476, 500], "negex": [2, 214, 218, 261, 476], "labeled_depend": [2, 85, 123, 214, 218, 261, 343, 476], "languag": [2, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 126, 127, 128, 130, 131, 134, 139, 140, 143, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 193, 196, 199, 209, 210, 213, 214, 218, 221, 236, 238, 241, 257, 261, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 393, 398, 399, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 452, 455, 457, 468, 469, 472, 476, 480, 496, 498, 501, 517, 524], "keyword": [2, 124, 125, 157, 257, 261, 382, 383, 384, 416, 517], "dummi": [2, 87, 214, 218, 258, 261, 345, 476, 518], "first": [2, 98, 100, 101, 103, 104, 109, 113, 116, 118, 119, 125, 133, 139, 140, 142, 154, 163, 170, 171, 172, 173, 177, 178, 179, 181, 183, 187, 192, 201, 210, 213, 220, 221, 259, 261, 317, 355, 357, 358, 360, 362, 367, 371, 374, 376, 377, 384, 392, 398, 399, 401, 413, 421, 429, 430, 431, 432, 436, 437, 438, 439, 441, 446, 451, 459, 469, 472, 479, 480, 520, 524, 525, 529], "charact": [2, 13, 19, 37, 45, 87, 103, 105, 122, 127, 133, 135, 144, 154, 155, 183, 184, 185, 192, 193, 196, 202, 236, 237, 261, 270, 276, 294, 303, 345, 360, 363, 379, 386, 392, 394, 403, 413, 414, 441, 443, 444, 451, 452, 455, 460, 496], "last": [2, 92, 106, 108, 113, 114, 131, 132, 160, 161, 162, 190, 210, 221, 255, 261, 349, 364, 366, 371, 372, 389, 391, 418, 419, 420, 448, 469, 480, 515, 528], "string": [2, 9, 13, 19, 28, 37, 44, 45, 50, 60, 63, 84, 87, 122, 133, 135, 142, 144, 155, 157, 160, 161, 162, 179, 181, 185, 187, 191, 199, 200, 202, 207, 208, 209, 210, 221, 236, 237, 238, 245, 247, 249, 261, 267, 270, 276, 285, 294, 302, 303, 308, 317, 321, 341, 345, 379, 392, 394, 401, 403, 414, 418, 419, 420, 438, 444, 446, 450, 457, 458, 460, 465, 467, 468, 469, 480, 496, 497, 498, 505, 507, 509, 528], "associ": [2, 3, 4, 44, 115, 122, 133, 138, 146, 234, 261, 262, 263, 302, 373, 379, 392, 397, 405, 493], "list": [2, 3, 4, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 87, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 122, 123, 125, 127, 131, 133, 137, 138, 140, 141, 142, 143, 144, 146, 149, 154, 155, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 187, 188, 191, 193, 201, 202, 203, 208, 209, 217, 221, 226, 232, 234, 236, 238, 240, 241, 249, 255, 257, 261, 262, 263, 264, 266, 267, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 344, 345, 348, 349, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 367, 368, 369, 373, 376, 377, 378, 379, 381, 384, 386, 389, 392, 396, 397, 399, 400, 401, 402, 403, 405, 407, 413, 414, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 446, 447, 450, 452, 459, 460, 461, 467, 468, 475, 480, 485, 492, 493, 496, 498, 500, 501, 509, 515, 517, 519, 524], "vector": [2, 44, 93, 94, 95, 97, 98, 100, 101, 103, 115, 116, 117, 181, 201, 202, 261, 302, 350, 351, 352, 354, 355, 357, 358, 360, 373, 374, 375, 439, 459, 460, 523], "where": [2, 44, 81, 98, 102, 103, 113, 122, 125, 128, 130, 133, 134, 135, 141, 146, 152, 155, 157, 161, 163, 166, 179, 181, 184, 185, 196, 199, 253, 261, 302, 339, 355, 359, 360, 371, 379, 384, 387, 388, 392, 393, 394, 400, 405, 411, 414, 416, 419, 421, 424, 438, 439, 443, 444, 455, 457, 513], "applic": [2, 77, 80, 114, 125, 163, 167, 168, 171, 173, 174, 175, 177, 220, 233, 234, 246, 261, 335, 338, 372, 384, 421, 426, 427, 430, 432, 433, 434, 436, 479, 493, 494, 506, 520, 522], "static": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 127, 128, 130, 134, 139, 140, 143, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 224, 240, 241, 258, 261, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 386, 387, 388, 393, 398, 399, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455, 483, 500, 501, 518, 524], "sql": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 130, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 208, 224, 226, 232, 236, 240, 249, 251, 252, 253, 254, 261, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 388, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 465, 467, 483, 485, 492, 496, 500, 509, 510, 511, 513, 514], "creat": [2, 3, 4, 28, 44, 50, 69, 77, 88, 93, 94, 100, 110, 113, 116, 117, 123, 140, 146, 147, 150, 152, 160, 169, 172, 177, 190, 196, 208, 211, 226, 237, 251, 252, 253, 254, 257, 258, 259, 261, 262, 263, 285, 302, 308, 326, 335, 346, 347, 350, 351, 357, 368, 371, 374, 375, 381, 399, 405, 406, 408, 411, 418, 428, 431, 436, 448, 455, 467, 470, 485, 510, 511, 513, 514, 517, 518, 524, 525, 528, 530], "new": [2, 3, 4, 10, 50, 63, 78, 82, 91, 93, 94, 98, 103, 104, 105, 117, 120, 142, 143, 146, 160, 163, 166, 168, 173, 174, 179, 183, 202, 232, 237, 259, 261, 262, 263, 268, 308, 321, 336, 340, 348, 350, 351, 355, 360, 362, 363, 375, 378, 401, 402, 405, 407, 408, 418, 421, 424, 427, 432, 433, 438, 441, 447, 460, 475, 480, 491, 492, 497, 523, 524], "differ": [2, 3, 4, 67, 78, 84, 85, 102, 103, 104, 110, 111, 118, 120, 125, 131, 154, 155, 165, 172, 177, 183, 193, 196, 208, 234, 243, 261, 262, 263, 324, 336, 341, 343, 359, 360, 362, 368, 369, 376, 378, 384, 389, 413, 414, 423, 431, 436, 441, 452, 455, 467, 493, 504, 528], "all": [2, 3, 4, 5, 9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 86, 87, 91, 93, 94, 95, 96, 108, 112, 113, 114, 117, 120, 122, 127, 131, 135, 140, 144, 146, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 187, 192, 196, 201, 204, 220, 221, 234, 237, 241, 246, 259, 261, 262, 263, 267, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 309, 312, 314, 315, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 344, 345, 348, 350, 351, 352, 353, 366, 370, 371, 372, 375, 378, 379, 382, 386, 389, 399, 403, 405, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 446, 451, 455, 459, 462, 479, 480, 493, 497, 501, 506, 519, 524, 529], "should": [2, 3, 4, 11, 28, 44, 50, 67, 78, 79, 80, 81, 86, 92, 95, 100, 101, 109, 116, 118, 125, 127, 134, 135, 139, 140, 141, 146, 150, 154, 155, 160, 161, 162, 170, 183, 192, 208, 210, 217, 221, 240, 251, 252, 259, 261, 262, 263, 269, 285, 302, 308, 317, 318, 324, 336, 337, 338, 339, 344, 347, 349, 352, 357, 358, 367, 374, 376, 384, 386, 393, 394, 398, 399, 400, 405, 408, 413, 414, 418, 419, 420, 429, 439, 441, 451, 467, 469, 474, 475, 480, 488, 492, 500, 508, 510, 511], "newli": [2, 3, 4, 114, 261, 262, 263, 372], "structtyp": [2, 226, 258, 261], "schema": [2, 81, 138, 234, 247, 258, 261, 339, 397, 493, 507, 518, 520], "look": [2, 140, 162, 173, 174, 175, 177, 184, 261, 347, 399, 420, 432, 433, 434, 436, 443, 523], "like": [2, 7, 14, 20, 24, 28, 29, 33, 38, 41, 46, 52, 53, 63, 79, 87, 91, 95, 97, 99, 105, 112, 120, 123, 125, 133, 138, 146, 155, 158, 160, 161, 162, 165, 166, 169, 172, 177, 183, 193, 196, 221, 234, 261, 264, 271, 277, 281, 285, 286, 290, 296, 299, 304, 310, 311, 321, 337, 345, 348, 352, 354, 356, 363, 370, 378, 381, 384, 392, 397, 405, 414, 417, 418, 419, 420, 423, 424, 428, 431, 436, 441, 452, 455, 480, 493, 520, 522, 523], "struct": [2, 200, 207, 209, 236, 247, 249, 261, 458, 465, 468, 496, 507, 509], "containsnul": [2, 44, 198, 200, 207, 209, 236, 247, 249, 261, 302, 456, 458, 465, 468, 496, 507, 509], "true": [2, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 66, 67, 77, 78, 79, 80, 81, 86, 87, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 130, 131, 132, 134, 138, 140, 144, 154, 155, 157, 160, 166, 169, 181, 183, 184, 187, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 212, 221, 226, 234, 236, 237, 241, 245, 246, 247, 248, 249, 251, 252, 254, 255, 258, 261, 272, 273, 274, 275, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 291, 292, 293, 297, 298, 300, 301, 302, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 323, 324, 335, 336, 337, 338, 339, 344, 345, 346, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 388, 389, 391, 393, 397, 399, 403, 413, 414, 418, 428, 439, 441, 443, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 465, 468, 469, 471, 480, 493, 496, 497, 501, 505, 506, 507, 508, 509, 510, 511, 514, 515, 520, 524, 525], "nullabl": [2, 44, 198, 200, 207, 209, 236, 245, 247, 249, 261, 302, 456, 458, 465, 468, 496, 505, 507, 509], "integ": [2, 67, 78, 79, 80, 108, 113, 114, 200, 207, 209, 221, 245, 247, 261, 324, 336, 337, 338, 366, 371, 372, 458, 465, 468, 505, 507], "map": [2, 11, 44, 92, 95, 117, 122, 146, 152, 160, 161, 162, 183, 200, 207, 209, 210, 221, 226, 232, 236, 247, 249, 257, 261, 269, 302, 349, 352, 375, 379, 405, 407, 408, 411, 418, 419, 420, 441, 458, 465, 468, 469, 475, 480, 485, 491, 492, 496, 497, 507, 509, 523], "kei": [2, 7, 67, 70, 84, 85, 110, 111, 118, 119, 128, 143, 172, 200, 207, 208, 209, 234, 236, 240, 247, 249, 257, 261, 264, 324, 328, 341, 343, 368, 369, 376, 377, 387, 402, 431, 458, 465, 467, 468, 493, 496, 500, 507, 509, 517, 520], "valuecontainsnul": [2, 200, 207, 209, 236, 247, 249, 261, 458, 465, 468, 496, 507, 509], "arrai": [2, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 127, 128, 135, 140, 149, 152, 154, 155, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 190, 191, 196, 198, 199, 200, 201, 202, 204, 207, 208, 209, 210, 226, 236, 238, 247, 249, 261, 264, 266, 267, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 386, 387, 394, 399, 407, 411, 413, 414, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 448, 450, 455, 456, 457, 458, 459, 460, 462, 465, 467, 468, 469, 485, 496, 498, 507, 509, 525, 528], "element": [2, 44, 135, 146, 181, 198, 200, 207, 209, 210, 236, 237, 238, 247, 249, 261, 302, 394, 405, 439, 456, 458, 465, 468, 469, 496, 497, 507, 509], "float": [2, 3, 7, 8, 9, 28, 44, 50, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 92, 127, 139, 140, 143, 146, 149, 150, 155, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 196, 198, 200, 201, 203, 208, 209, 221, 236, 246, 248, 261, 262, 264, 266, 267, 285, 302, 308, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 340, 349, 386, 398, 399, 402, 405, 407, 408, 414, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 455, 456, 458, 459, 461, 467, 468, 480, 496, 506, 508], "row": [2, 51, 86, 88, 117, 154, 155, 158, 200, 209, 210, 212, 226, 236, 237, 238, 251, 258, 261, 309, 344, 346, 375, 413, 414, 417, 458, 468, 469, 471, 485, 496, 497, 510, 518], "column": [2, 10, 28, 44, 50, 81, 87, 117, 128, 137, 139, 140, 141, 149, 150, 152, 158, 162, 181, 188, 193, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 213, 217, 226, 237, 238, 240, 245, 251, 253, 261, 268, 285, 302, 308, 339, 345, 375, 387, 396, 398, 399, 400, 407, 408, 411, 417, 420, 439, 447, 452, 455, 456, 457, 458, 459, 460, 461, 462, 465, 468, 469, 472, 475, 485, 497, 498, 500, 505, 510, 513, 524], "transform": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 221, 226, 229, 232, 234, 238, 239, 240, 245, 246, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 405, 406, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 471, 472, 480, 485, 488, 492, 493, 498, 500, 505, 506, 508, 520, 523, 524, 525, 528, 529, 530], "an": [2, 7, 8, 9, 11, 28, 44, 50, 51, 66, 67, 70, 78, 79, 80, 84, 86, 87, 92, 96, 98, 103, 104, 105, 107, 108, 109, 113, 114, 120, 122, 125, 127, 130, 131, 132, 133, 134, 135, 139, 140, 141, 143, 146, 150, 152, 154, 155, 157, 158, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 190, 193, 196, 199, 200, 201, 202, 204, 207, 208, 209, 210, 213, 221, 225, 226, 228, 232, 234, 237, 238, 246, 249, 251, 252, 253, 254, 261, 264, 266, 267, 269, 285, 302, 308, 309, 317, 323, 324, 328, 336, 337, 338, 341, 344, 345, 347, 349, 353, 355, 360, 362, 363, 365, 366, 367, 371, 372, 378, 379, 384, 386, 388, 389, 391, 392, 393, 394, 398, 399, 400, 402, 405, 407, 408, 411, 413, 414, 416, 417, 420, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 448, 452, 455, 457, 458, 459, 460, 462, 465, 467, 468, 469, 472, 475, 480, 484, 485, 487, 491, 492, 493, 497, 506, 509, 510, 511, 513, 514, 519, 521, 523, 524, 525, 527, 528], "alreadi": [3, 123, 125, 139, 140, 141, 142, 193, 194, 208, 240, 262, 381, 384, 398, 399, 400, 401, 452, 453, 467, 500, 528], "load": [3, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 128, 130, 134, 136, 139, 140, 143, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 207, 221, 224, 237, 238, 240, 241, 245, 247, 255, 259, 260, 262, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 384, 386, 387, 388, 393, 398, 399, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455, 465, 480, 483, 500, 501, 505, 507, 515, 524, 527], "process": [3, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 120, 123, 125, 127, 138, 139, 140, 141, 150, 155, 160, 161, 162, 163, 166, 171, 175, 177, 179, 181, 193, 196, 198, 199, 200, 201, 202, 203, 207, 209, 211, 213, 221, 234, 236, 237, 247, 249, 262, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 338, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 376, 377, 378, 381, 384, 386, 397, 398, 399, 400, 408, 414, 418, 419, 420, 421, 424, 430, 434, 436, 438, 439, 455, 456, 457, 458, 459, 460, 461, 465, 468, 470, 472, 480, 493, 496, 497, 507, 509, 520, 523, 524, 525, 526], "byte": [3, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 127, 140, 149, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 207, 234, 236, 237, 238, 262, 263, 264, 266, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 386, 399, 407, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 465, 493, 496, 497, 498], "origin": [4, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 100, 105, 110, 116, 138, 155, 160, 161, 162, 163, 207, 221, 237, 247, 258, 263, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 348, 349, 357, 363, 368, 374, 397, 414, 418, 419, 420, 421, 465, 480, 497, 507], "height": [4, 67, 78, 79, 80, 207, 221, 247, 258, 263, 324, 336, 337, 338, 465, 480, 507], "width": [4, 67, 78, 79, 80, 92, 160, 161, 162, 207, 221, 247, 258, 263, 324, 336, 337, 338, 349, 418, 419, 420, 465, 480, 507], "nchannel": [4, 207, 247, 258, 263, 465, 507], "mode": [4, 28, 44, 50, 60, 71, 140, 150, 184, 200, 207, 209, 210, 234, 247, 258, 263, 285, 302, 308, 317, 329, 399, 408, 443, 458, 465, 468, 469, 493, 507], "imag": [4, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 162, 175, 207, 208, 214, 218, 221, 237, 240, 247, 258, 263, 318, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 359, 420, 434, 465, 467, 476, 480, 497, 500, 507, 518], "uri": [4, 241, 263, 501], "pixel": [4, 78, 263, 336], "number": [4, 9, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 84, 85, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 135, 137, 139, 140, 146, 149, 152, 154, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 188, 196, 203, 221, 237, 245, 251, 252, 263, 267, 274, 275, 280, 284, 285, 289, 293, 302, 307, 308, 314, 318, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 341, 343, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 394, 396, 398, 399, 405, 407, 411, 413, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 447, 455, 461, 480, 497, 505, 510, 511], "color": [4, 263], "channel": [4, 67, 78, 79, 80, 183, 221, 263, 324, 336, 337, 338, 441, 480], "opencv": [4, 207, 263, 465], "hubert_for_ctc": [5, 6, 265, 382], "hubertforctc": [5, 6, 7, 264], "wav2vec2_for_ctc": [5, 6, 265, 382], "wav2vec2forctc": [5, 6, 8, 266], "whisper_for_ctc": [5, 6, 265, 382], "whisperforctc": [5, 6, 9, 267], "albert_for_multiple_choic": [5, 12, 295, 382], "albertformultiplechoic": [5, 12, 13, 270], "albert_for_question_answ": [5, 12, 295, 382], "albertforquestionansw": [5, 12, 14, 271], "albert_for_sequence_classif": [5, 12, 295, 382], "albertforsequenceclassif": [5, 12, 15, 30, 272, 287], "albert_for_token_classif": [5, 12, 295, 382], "albertfortokenclassif": [5, 12, 16, 91, 273, 348], "albert_for_zero_shot_classif": [5, 12, 295, 382], "albertforzeroshotclassif": [5, 12, 17, 274], "bart_for_zero_shot_classif": [5, 12, 295, 382], "bartforzeroshotclassif": [5, 12, 17, 18, 274, 275], "bert_for_multiple_choic": [5, 12, 295, 382], "bertformultiplechoic": [5, 12, 19, 276], "bert_for_question_answ": [5, 12, 295, 382], "bertforquestionansw": [5, 12, 13, 20, 51, 270, 277, 309], "bert_for_sequence_classif": [5, 12, 295, 382], "bertforsequenceclassif": [5, 12, 21, 23, 278, 280], "bert_for_token_classif": [5, 12, 295, 382], "bertfortokenclassif": [5, 12, 22, 279], "bert_for_zero_shot_classif": [5, 12, 295, 382], "bertforzeroshotclassif": [5, 12, 23, 280], "camembert_for_question_answ": [5, 12, 295, 382], "camembertforquestionansw": [5, 12, 24, 281], "camembert_for_sequence_classif": [5, 12, 295, 382], "camembertforsequenceclassif": [5, 12, 25, 27, 282, 284], "camembert_for_token_classif": [5, 12, 295, 382], "camembertfortokenclassif": [5, 12, 26, 283], "camembert_for_zero_shot_classif": [5, 12, 295, 382], "camembertforzeroshotclassif": [5, 12, 27, 284], "classifierdlapproach": [5, 12, 28, 44, 285, 302, 524], "classifierdlmodel": [5, 12, 28, 44, 285, 302, 524], "deberta_for_question_answ": [5, 12, 295, 382], "debertaforquestionansw": [5, 12, 29, 286], "deberta_for_sequence_classif": [5, 12, 295, 382], "debertaforsequenceclassif": [5, 12, 27, 30, 32, 284, 287, 289], "deberta_for_token_classif": [5, 12, 295, 382], "debertafortokenclassif": [5, 12, 31, 288], "deberta_for_zero_shot_classif": [5, 12, 295, 382], "debertaforzeroshotclassif": [5, 12, 32, 289], "distil_bert_for_question_answ": [5, 12, 295, 382], "distilbertforquestionansw": [5, 12, 33, 290], "distil_bert_for_sequence_classif": [5, 12, 295, 382], "distilbertforsequenceclassif": [5, 12, 17, 34, 36, 274, 291, 293], "distil_bert_for_token_classif": [5, 12, 295, 382], "distilbertfortokenclassif": [5, 12, 35, 292], "distil_bert_for_zero_shot_classif": [5, 12, 295, 382], "distilbertforzeroshotclassif": [5, 12, 36, 293], "distilbert_for_multiple_choic": [5, 12, 295, 382], "distilbertformultiplechoic": [5, 12, 37, 294], "longformer_for_question_answ": [5, 12, 295, 382], "longformerforquestionansw": [5, 12, 38, 296], "longformer_for_sequence_classif": [5, 12, 295, 382], "longformerforsequenceclassif": [5, 12, 39, 297], "longformer_for_token_classif": [5, 12, 295, 382], "longformerfortokenclassif": [5, 12, 40, 298], "mpnet_for_question_answ": [5, 12, 295, 382], "mpnetforquestionansw": [5, 12, 41, 299], "mpnet_for_sequence_classif": [5, 12, 295, 382], "mpnetforsequenceclassif": [5, 12, 42, 300], "mpnet_for_token_classif": [5, 12, 295, 382], "mpnetfortokenclassif": [5, 12, 43, 301], "multi_classifier_dl": [5, 12, 295, 382], "multiclassifierdlapproach": [5, 12, 28, 44, 234, 285, 302, 493, 520], "multiclassifierdlmodel": [5, 12, 28, 44, 285, 302], "roberta_for_multiple_choic": [5, 12, 295, 382], "robertaformultiplechoic": [5, 12, 45, 303], "roberta_for_question_answ": [5, 12, 295, 382], "robertaforquestionansw": [5, 12, 45, 46, 143, 303, 304, 402], "roberta_for_sequence_classif": [5, 12, 295, 382], "robertaforsequenceclassif": [5, 12, 47, 49, 305, 307], "roberta_for_token_classif": [5, 12, 295, 382], "robertafortokenclassif": [5, 12, 48, 306], "roberta_for_zero_shot_classif": [5, 12, 295, 382], "robertaforzeroshotclassif": [5, 12, 49, 307], "sentiment_dl": [5, 12, 295, 382], "sentimentdlapproach": [5, 12, 28, 44, 50, 285, 302, 308], "sentimentdlmodel": [5, 12, 28, 44, 50, 285, 302, 308], "tapas_for_question_answ": [5, 12, 295, 382], "tapasforquestionansw": [5, 12, 51, 309], "xlm_roberta_for_multiple_choic": [5, 12, 295, 382], "xlmrobertaformultiplechoic": [5, 12, 52, 310], "xlm_roberta_for_question_answ": [5, 12, 295, 382], "xlmrobertaforquestionansw": [5, 12, 53, 311], "xlm_roberta_for_sequence_classif": [5, 12, 295, 382], "xlmrobertaforsequenceclassif": [5, 12, 54, 56, 312, 314], "xlm_roberta_for_token_classif": [5, 12, 295, 382], "xlmrobertafortokenclassif": [5, 12, 43, 55, 301, 313], "xlm_roberta_for_zero_shot_classif": [5, 12, 295, 382], "xlmrobertaforzeroshotclassif": [5, 12, 56, 314], "xlnet_for_sequence_classif": [5, 12, 295, 382], "xlnetforsequenceclassif": [5, 12, 57, 315], "xlnet_for_token_classif": [5, 12, 295, 382], "xlnetfortokenclassif": [5, 12, 58, 316], "extractor": [5, 59, 130, 134, 190, 319, 382, 388, 393, 448], "spanbert_coref": [5, 62, 320, 382], "spanbertcorefmodel": [5, 62, 63, 321], "blip_for_question_answ": [5, 64, 327, 382], "blipforquestionansw": [5, 64, 65, 322], "clip_for_zero_shot_classif": [5, 64, 327, 382], "clipforzeroshotclassif": [5, 64, 65, 66, 71, 72, 73, 75, 76, 322, 323, 329, 330, 331, 333, 334], "convnext_for_image_classif": [5, 64, 327, 382], "convnextforimageclassif": [5, 64, 67, 324], "florence2_transform": [5, 64, 327, 382], "florence2transform": [5, 64, 68, 325], "gemma3_for_multimod": [5, 64, 327, 382], "gemma3formultimod": [5, 64, 69, 326], "internvl_for_multimod": [5, 64, 327, 382], "internvlformultimod": [5, 64, 70, 328], "janus_for_multimod": [5, 64, 327, 382], "janusformultimod": [5, 64, 71, 329], "llava_for_multimod": [5, 64, 327, 382], "llavaformultimod": [5, 64, 72, 330], "mllama_for_multimod": [5, 64, 327, 382], "mllamaformultimod": [5, 64, 73, 331], "paligemma_for_multimod": [5, 64, 327, 382], "paligemmaformultimod": [5, 64, 74, 332], "phi3_vision_for_multimod": [5, 64, 327, 382], "phi3vis": [5, 64, 75, 333], "qwen2vl_transform": [5, 64, 327, 382], "qwen2vltransform": [5, 64, 76, 334], "smolvlm_transform": [5, 64, 327, 382], "smolvlmtransform": [5, 64, 77, 335], "swin_for_image_classif": [5, 64, 327, 382], "swinforimageclassif": [5, 64, 78, 336], "vision_encoder_decoder_for_image_capt": [5, 64, 327, 382], "visionencoderdecoderforimagecapt": [5, 64, 79, 337], "vit_for_image_classif": [5, 64, 327, 382], "vitforimageclassif": [5, 64, 80, 338], "dependency_pars": [5, 83, 241, 342, 382, 501, 529], "dependencyparserapproach": [5, 83, 84, 252, 341, 511, 530], "dependencyparsermodel": [5, 83, 84, 85, 123, 341, 343, 381], "typed_dependency_pars": [5, 83, 342, 382], "typeddependencyparserapproach": [5, 83, 84, 85, 341, 343], "typeddependencyparsermodel": [5, 83, 85, 123, 343, 381], "albert_embed": [5, 90, 361, 382], "albertembed": [5, 16, 90, 91, 273, 348], "auto_gguf_embed": [5, 90, 361, 382], "autoggufembed": [5, 90, 92, 349], "bert_embed": [5, 90, 361, 382], "bertembed": [5, 90, 93, 97, 104, 112, 140, 141, 201, 350, 354, 362, 370, 399, 400, 459], "bert_sentence_embed": [5, 90, 361, 382], "bertsentenceembed": [5, 44, 50, 90, 94, 111, 119, 302, 308, 351, 369, 377], "bge_embed": [5, 90, 361, 382], "bgeembed": [5, 90, 95, 352], "camembert_embed": [5, 90, 361, 382], "camembertembed": [5, 90, 96, 353], "chunk_embed": [5, 90, 361, 382], "chunkembed": [5, 90, 97, 201, 354, 459], "deberta_embed": [5, 90, 361, 382], "debertaembed": [5, 90, 98, 355], "distil_bert_embed": [5, 90, 361, 382], "distilbertembed": [5, 90, 99, 356], "doc2vec": [5, 90, 361, 382], "doc2vecapproach": [5, 90, 100, 357], "doc2vecmodel": [5, 90, 100, 357], "e5_embed": [5, 90, 361, 382], "e5embed": [5, 90, 101, 107, 109, 181, 358, 365, 367, 439], "e5v_embed": [5, 90, 361, 382], "e5vembed": [5, 90, 102, 258, 359, 518], "elmo_embed": [5, 90, 361, 382], "elmoembed": [5, 90, 103, 360], "instructor_embed": [5, 90, 361, 382], "instructorembed": [5, 90, 104, 362], "longformer_embed": [5, 90, 361, 382], "longformerembed": [5, 90, 105, 363], "minilm_embed": [5, 90, 361, 382], "minilmembed": [5, 90, 106, 364], "mpnet_embed": [5, 90, 361, 382], "mpnetembed": [5, 90, 107, 365], "mxbai_embed": [5, 90, 361, 382], "mxbaiembed": [5, 90, 108, 366], "nomic_embed": [5, 90, 361, 382], "nomicembed": [5, 90, 109, 367], "roberta_embed": [5, 90, 361, 382], "robertaembed": [5, 90, 110, 118, 368, 376], "roberta_sentence_embed": [5, 90, 361, 382], "robertasentenceembed": [5, 90, 111, 369], "sentenceembed": [5, 28, 44, 50, 90, 112, 117, 201, 285, 302, 308, 370, 375, 459], "snowflake_embed": [5, 90, 361, 382], "snowflakeembed": [5, 90, 113, 371], "uae_embed": [5, 90, 361, 382], "uaeembed": [5, 90, 114, 372], "universal_sentence_encod": [5, 90, 361, 382], "universalsentenceencod": [5, 28, 44, 50, 90, 115, 234, 285, 302, 308, 373, 493, 520, 524], "word2vec": [5, 90, 100, 357, 361, 382], "word2vecapproach": [5, 90, 116, 374], "word2vecmodel": [5, 90, 116, 374], "wordembeddingsmodel": [5, 90, 97, 112, 117, 123, 139, 140, 142, 201, 354, 370, 375, 381, 398, 399, 401, 459], "xlm_roberta_embed": [5, 90, 361, 382], "xlmrobertaembed": [5, 90, 118, 376], "xlm_roberta_sentence_embed": [5, 90, 361, 382], "xlmrobertasentenceembed": [5, 90, 119, 377], "xlnet_embed": [5, 90, 361, 382], "xlnetembed": [5, 90, 120, 378], "entity_rul": [5, 121, 380, 382], "entityrulerapproach": [5, 121, 122, 379], "entityrulermodel": [5, 121, 122, 379], "yake_keyword_extract": [5, 124, 382, 383], "yakekeywordextract": [5, 124, 125, 384], "language_detector_dl": [5, 126, 382, 385], "languagedetectordl": [5, 126, 127, 386], "big_text_match": [5, 129, 382, 390], "bigtextmatch": [5, 129, 130, 134, 388, 393], "bigtextmatchermodel": [5, 129, 130, 388], "date_match": [5, 129, 382, 390], "datematch": [5, 82, 129, 131, 340, 389], "datematcherutil": [5, 129, 131, 132, 389], "multi_date_match": [5, 129, 382, 390], "multidatematch": [5, 82, 129, 131, 132, 340, 389, 391], "regex_match": [5, 129, 382, 390], "regexmatch": [5, 129, 133, 392], "regexmatchermodel": [5, 129, 133, 392], "text_match": [5, 129, 382, 390], "textmatch": [5, 129, 130, 134, 190, 388, 393, 448], "textmatchermodel": [5, 129, 130, 134, 388, 393], "ner_approach": [5, 136, 382, 395], "nerapproach": [5, 136, 137, 139, 140, 396], "ner_convert": [5, 136, 382, 395], "nerconvert": [5, 97, 136, 138, 139, 140, 234, 354, 397, 398, 399, 493, 520], "ner_crf": [5, 136, 382, 395], "nercrfapproach": [5, 136, 139, 140, 398, 399], "nercrfmodel": [5, 136, 139, 140, 398, 399], "ner_dl": [5, 136, 382, 395], "nerdlapproach": [5, 136, 139, 140, 141, 251, 398, 399, 400, 510, 530], "nerdlmodel": [5, 123, 136, 138, 139, 140, 142, 234, 241, 381, 397, 398, 399, 401, 493, 501, 520], "ner_dl_graph_check": [5, 136, 382, 395], "nerdlgraphcheck": [5, 136, 141, 400], "nerdlgraphcheckermodel": [5, 136, 141, 400], "ner_overwrit": [5, 136, 382, 395], "neroverwrit": [5, 136, 142, 401], "zero_shot_ner_model": [5, 136, 382, 395], "zeroshotnermodel": [5, 136, 143, 402], "openai_complet": [5, 145, 382, 404], "openaicomplet": [5, 145, 146, 405], "openai_embed": [5, 145, 382, 404], "openaiembed": [5, 145, 147, 406], "classifier_encod": [5, 148, 382, 409], "classifierencod": [5, 28, 44, 50, 148, 149, 407], "evaluation_dl_param": [5, 148, 382, 409], "evaluationdlparam": [5, 28, 44, 50, 140, 148, 150, 408], "perceptron": [5, 83, 84, 151, 341, 382, 410], "perceptronapproach": [5, 151, 152, 253, 411, 513, 530], "perceptronmodel": [5, 11, 84, 85, 123, 139, 151, 152, 251, 269, 341, 343, 381, 398, 411, 510], "sentence_detector": [5, 51, 143, 153, 309, 382, 402, 412], "sentencedetector": [5, 11, 28, 51, 63, 84, 85, 94, 97, 111, 115, 119, 123, 125, 128, 133, 135, 139, 140, 142, 143, 152, 153, 154, 155, 187, 190, 211, 213, 221, 251, 269, 285, 309, 321, 341, 343, 351, 354, 369, 373, 377, 381, 384, 387, 392, 394, 398, 399, 401, 402, 411, 413, 414, 446, 448, 470, 472, 480, 510, 524, 525], "sentencedetectorparam": [5, 153, 154, 413], "sentence_detector_dl": [5, 153, 170, 317, 382, 412, 429], "sentencedetectordlapproach": [5, 153, 155, 414], "sentencedetectordlmodel": [5, 153, 155, 170, 317, 414, 429], "sentiment_detector": [5, 156, 382, 415], "sentimentdetector": [5, 156, 157, 416], "sentimentdetectormodel": [5, 156, 157, 416], "vivekn_senti": [5, 156, 382, 415], "viveknsentimentapproach": [5, 156, 157, 158, 416, 417], "viveknsentimentmodel": [5, 156, 158, 417], "auto_gguf_model": [5, 92, 159, 349, 382, 425], "autoggufmodel": [5, 159, 160, 418], "auto_gguf_rerank": [5, 159, 382, 425], "autoggufrerank": [5, 159, 161, 203, 419, 461], "auto_gguf_vision_model": [5, 159, 382, 425], "autoggufvisionmodel": [5, 159, 160, 162, 418, 420], "bart_transform": [5, 159, 382, 425], "barttransform": [5, 159, 163, 421], "cohere_transform": [5, 159, 382, 425], "coheretransform": [5, 159, 164, 422], "cpm_transform": [5, 159, 382, 425], "cpmtransform": [5, 159, 165, 423], "gpt2_transform": [5, 159, 382, 425], "gpt2transform": [5, 159, 166, 424], "llama2_transform": [5, 159, 382, 425], "llama2transform": [5, 159, 167, 426], "llama3_transform": [5, 159, 382, 425], "llama3transform": [5, 159, 168, 427], "m2m100_transform": [5, 159, 382, 425], "m2m100transform": [5, 159, 169, 428], "marian_transform": [5, 159, 382, 425], "mariantransform": [5, 60, 159, 170, 317, 429], "mistral_transform": [5, 159, 382, 425], "mistraltransform": [5, 159, 171, 430], "nllb_transform": [5, 159, 382, 425], "nllbtransform": [5, 159, 172, 431], "olmo_transform": [5, 159, 382, 425], "olmotransform": [5, 159, 173, 432], "phi2_transform": [5, 159, 382, 425], "phi2transform": [5, 159, 174, 433], "phi3_transform": [5, 159, 382, 425], "phi3transform": [5, 159, 175, 434], "phi4_transform": [5, 159, 382, 425], "phi4transform": [5, 159, 176, 435], "qwen_transform": [5, 159, 382, 425], "qwentransform": [5, 159, 177, 436], "starcoder_transform": [5, 159, 382, 425], "starcodertransform": [5, 159, 178, 437], "t5_transform": [5, 159, 382, 425], "t5transform": [5, 159, 179, 438], "document_similarity_rank": [5, 180, 382, 440], "documentsimilarityrankerapproach": [5, 180, 181, 439], "documentsimilarityrankerfinish": [5, 180, 181, 439], "documentsimilarityrankermodel": [5, 180, 181, 439], "context_spell_check": [5, 182, 382, 442], "contextspellcheckerapproach": [5, 182, 183, 184, 185, 441, 443, 444], "contextspellcheckermodel": [5, 182, 183, 184, 185, 441, 443, 444], "norvig_sweet": [5, 182, 382, 442], "norvigsweetingapproach": [5, 182, 183, 184, 185, 441, 443, 444, 530], "norvigsweetingmodel": [5, 182, 183, 184, 185, 441, 443, 444], "symmetric_delet": [5, 182, 382, 442], "symmetricdeleteapproach": [5, 182, 183, 184, 185, 441, 443, 444, 530], "symmetricdeletemodel": [5, 182, 183, 184, 185, 441, 443, 444], "chunk_token": [5, 189, 382, 449], "chunktoken": [5, 189, 190, 448], "chunktokenizermodel": [5, 189, 190, 448], "recursive_token": [5, 189, 382, 449], "recursivetoken": [5, 189, 191, 450], "recursivetokenizermodel": [5, 189, 191, 450], "regex_token": [5, 189, 382, 449], "regextoken": [5, 189, 192, 196, 451, 455, 525], "tokenizermodel": [5, 130, 189, 190, 193, 388, 452], "word_segment": [5, 195, 382, 454], "wordsegmenterapproach": [5, 195, 196, 455], "wordsegmentermodel": [5, 195, 196, 455], "inputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 212, 213, 214, 217, 235, 238, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 457, 471, 472, 475, 498], "name": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 212, 213, 217, 221, 224, 226, 231, 234, 235, 237, 238, 240, 241, 243, 245, 246, 247, 248, 251, 253, 257, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 465, 468, 469, 471, 472, 475, 480, 483, 485, 491, 493, 497, 498, 500, 501, 505, 506, 507, 508, 510, 513, 517, 520, 524], "outputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 207, 209, 210, 212, 213, 214, 217, 227, 229, 235, 238, 243, 246, 247, 248, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 450, 451, 452, 453, 455, 456, 457, 458, 465, 468, 469, 471, 472, 475, 488, 498, 506, 507, 508], "setparam": [5, 10, 81, 180, 181, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 213, 214, 216, 243, 246, 247, 248, 268, 339, 439, 456, 457, 458, 459, 460, 461, 462, 465, 468, 469, 472, 474, 506, 507, 508], "regexpars": [5, 11, 269], "setregexpars": [5, 11, 269], "docach": [5, 81, 339], "executorcor": [5, 81, 339], "numpartit": [5, 81, 90, 100, 116, 339, 357, 374], "numwork": [5, 81, 339], "outputopt": [5, 81, 339], "persistformat": [5, 81, 339], "persistpath": [5, 81, 339], "setdocach": [5, 81, 339], "setexecutorcor": [5, 81, 339], "setnumpartit": [5, 81, 90, 100, 116, 339, 357, 374], "setnumwork": [5, 81, 339], "setoutputopt": [5, 81, 339], "setpersistformat": [5, 81, 339], "setpersistpath": [5, 81, 339], "entitynam": [5, 82, 340], "setentitynam": [5, 82, 340], "chunkoverlap": [5, 86, 344], "chunksiz": [5, 86, 344], "explodesplit": [5, 86, 88, 344, 346], "keepsepar": [5, 86, 344], "patternsareregex": [5, 86, 344], "setchunkoverlap": [5, 86, 344], "setchunks": [5, 86, 344], "setexplodesplit": [5, 86, 88, 344, 346], "setkeepsepar": [5, 86, 344], "setpatternsareregex": [5, 86, 344], "setsplitpattern": [5, 86, 189, 193, 344, 452], "settrimwhitespac": [5, 86, 88, 189, 192, 344, 346, 451], "splitpattern": [5, 86, 189, 193, 344, 452], "trimwhitespac": [5, 86, 88, 189, 192, 344, 346, 451], "action": [5, 87, 345], "encod": [5, 28, 59, 60, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 87, 93, 94, 98, 104, 105, 109, 115, 143, 163, 169, 170, 172, 234, 285, 317, 322, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 345, 350, 351, 355, 362, 363, 367, 373, 402, 421, 428, 429, 431, 493], "lowercas": [5, 59, 60, 87, 144, 192, 196, 197, 199, 317, 345, 403, 451, 455, 457], "pattern": [5, 11, 60, 61, 86, 87, 122, 131, 133, 144, 184, 185, 189, 192, 193, 195, 196, 210, 237, 269, 317, 318, 344, 345, 379, 389, 392, 403, 443, 444, 451, 452, 455, 469], "polici": [5, 87, 345], "replac": [5, 80, 87, 98, 102, 105, 127, 128, 142, 155, 163, 184, 185, 220, 338, 345, 355, 359, 363, 386, 387, 401, 414, 421, 443, 444, 479, 524], "setact": [5, 87, 345], "setencod": [5, 59, 60, 87, 317, 345], "setlowercas": [5, 59, 60, 87, 144, 197, 199, 213, 317, 345, 403, 457, 472], "setpattern": [5, 87, 189, 192, 195, 196, 345, 451, 455], "setpolici": [5, 87, 345], "setreplac": [5, 87, 345], "numtoken": [5, 88, 346], "setnumtoken": [5, 88, 346], "settokenoverlap": [5, 88, 346], "tokenoverlap": [5, 88, 346], "delimit": [5, 13, 19, 37, 45, 117, 122, 123, 128, 129, 133, 135, 139, 144, 157, 192, 212, 237, 251, 253, 270, 276, 294, 303, 375, 379, 381, 387, 392, 394, 398, 403, 416, 451, 471, 497, 510, 513], "entitytyp": [5, 123, 381], "explodeent": [5, 123, 381], "includeedg": [5, 123, 381], "maxsentences": [5, 123, 381], "mergeent": [5, 123, 381], "mergeentitiesiobformat": [5, 123, 381], "minsentences": [5, 123, 381], "optionalinputannotatortyp": [5, 121, 122, 123, 214, 217, 379, 381, 475], "posmodel": [5, 123, 381], "relationshiptyp": [5, 123, 381], "roottoken": [5, 123, 381], "setdelimit": [5, 123, 129, 133, 135, 381, 392, 394], "setdependencyparsermodel": [5, 123, 381], "setentitytyp": [5, 123, 381], "setexplodeent": [5, 123, 381], "setincludeedg": [5, 123, 381], "setmaxsentences": [5, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 123, 322, 326, 328, 329, 330, 331, 332, 333, 334, 335, 381], "setmergeent": [5, 123, 381], "setmergeentitiesiobformat": [5, 123, 381], "setminsentences": [5, 123, 381], "setposmodel": [5, 123, 381], "setrelationshiptyp": [5, 123, 381], "setroottoken": [5, 123, 381], "settypeddependencyparsermodel": [5, 123, 381], "dictionari": [5, 81, 117, 125, 128, 133, 139, 142, 143, 144, 156, 157, 182, 184, 185, 210, 234, 257, 339, 375, 384, 387, 392, 398, 401, 402, 403, 416, 443, 444, 469, 493, 517], "formcol": [5, 128, 252, 387, 511], "lemmacol": [5, 128, 252, 387, 511], "setdictionari": [5, 128, 156, 157, 182, 184, 185, 387, 416, 443, 444], "setformcol": [5, 128, 387], "setlemmacol": [5, 128, 387], "enablecumul": [5, 135, 394], "n": [5, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 92, 119, 125, 135, 138, 139, 140, 146, 154, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 191, 208, 210, 212, 221, 226, 236, 237, 240, 259, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 344, 346, 349, 377, 384, 394, 397, 398, 399, 405, 413, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 450, 467, 469, 471, 480, 485, 496, 500], "setenablecumul": [5, 135, 394], "setn": [5, 97, 135, 354, 394], "cleanuppattern": [5, 87, 144, 345, 403], "maxlength": [5, 144, 153, 154, 155, 189, 192, 193, 403, 413, 414, 451, 452], "minlength": [5, 144, 153, 154, 155, 189, 192, 193, 403, 413, 414, 451, 452], "setcleanuppattern": [5, 144, 403], "setmaxlength": [5, 144, 153, 154, 155, 189, 192, 193, 403, 413, 414, 451, 452], "setminlength": [5, 144, 153, 154, 155, 189, 192, 193, 403, 413, 414, 451, 452], "setslangdictionari": [5, 144, 403], "slangdictionari": [5, 144, 403], "slangmatchcas": [5, 144, 403], "casesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 129, 130, 134, 182, 184, 187, 214, 221, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 376, 377, 378, 388, 393, 443, 446, 480], "loaddefaultstopword": [5, 124, 125, 187, 384, 446], "setcasesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 97, 99, 105, 110, 118, 129, 130, 134, 139, 182, 184, 187, 201, 213, 214, 221, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 354, 356, 363, 368, 376, 388, 393, 398, 443, 446, 459, 472, 480], "setlocal": [5, 187, 446], "setstopword": [5, 124, 125, 142, 187, 384, 401, 446], "stopword": [5, 124, 125, 142, 187, 384, 401, 446], "getgraphfil": [5, 188, 447], "getgraphfold": [5, 188, 447], "gethiddenunitsnumb": [5, 188, 447], "getinputcol": [5, 180, 181, 188, 197, 201, 202, 203, 214, 217, 439, 447, 459, 460, 461, 475], "getlabelcolumn": [5, 136, 137, 188, 396, 447], "graphfil": [5, 188, 447], "graphfold": [5, 136, 140, 141, 182, 183, 188, 399, 400, 441, 447], "hiddenunitsnumb": [5, 188, 447], "inputcol": [5, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 42, 44, 46, 47, 49, 50, 53, 54, 56, 57, 112, 127, 136, 141, 180, 181, 188, 197, 198, 200, 201, 202, 203, 204, 207, 209, 210, 214, 217, 238, 245, 272, 274, 275, 278, 280, 282, 284, 285, 287, 289, 291, 293, 297, 300, 302, 305, 307, 308, 312, 314, 315, 370, 386, 400, 439, 447, 456, 458, 459, 460, 461, 462, 465, 468, 469, 475, 498, 505], "inputcolsvalid": [5, 188, 214, 217, 447, 475], "labelcolumn": [5, 28, 44, 50, 136, 137, 139, 140, 141, 148, 149, 188, 285, 302, 308, 396, 398, 399, 400, 407, 447], "setgraphfil": [5, 188, 447], "setgraphfold": [5, 136, 140, 141, 182, 183, 188, 399, 400, 441, 447], "sethiddenunitsnumb": [5, 188, 447], "setinputcol": [5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 212, 213, 214, 217, 234, 238, 243, 245, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 465, 468, 469, 471, 472, 475, 493, 498, 505, 520, 524, 525], "setlabelcolumn": [5, 28, 44, 50, 136, 137, 139, 140, 141, 148, 149, 188, 234, 285, 302, 308, 396, 398, 399, 400, 407, 447, 493, 520, 524], "avail": [5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 125, 127, 128, 131, 133, 139, 140, 141, 152, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 183, 184, 185, 187, 196, 221, 240, 241, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 382, 384, 386, 387, 389, 392, 398, 399, 400, 411, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 441, 443, 444, 446, 455, 480, 488, 500, 501, 508, 520, 527], "configprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 126, 127, 136, 140, 148, 149, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 264, 266, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 386, 399, 407, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441], "loadsavedmodel": [6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438], "setconfigprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 62, 63, 64, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 90, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 126, 127, 136, 140, 148, 149, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 264, 266, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 321, 324, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 367, 368, 369, 373, 376, 377, 378, 386, 399, 407, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441], "getismultilingu": [6, 9, 267], "getlanguag": [6, 9, 267], "ismultilingu": [6, 9, 267], "setlanguag": [6, 9, 267], "settask": [6, 9, 159, 163, 166, 179, 214, 221, 267, 421, 424, 438, 480], "concern": [7, 8, 9, 15, 66, 67, 78, 79, 80, 82, 91, 264, 266, 267, 272, 323, 324, 336, 337, 338, 340, 348], "classnam": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 141, 143, 144, 146, 147, 152, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 190, 191, 193, 196, 212, 215, 216, 223, 229, 238, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 388, 392, 393, 398, 399, 400, 402, 403, 405, 406, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 448, 450, 452, 455, 471, 473, 474, 482, 488, 498], "java_model": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 133, 134, 139, 140, 141, 143, 144, 146, 147, 152, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 190, 191, 193, 196, 206, 212, 216, 232, 238, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 388, 392, 393, 398, 399, 400, 402, 403, 405, 406, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 446, 448, 450, 452, 455, 464, 471, 474, 492, 498], "hubert": [7, 264], "head": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 63, 86, 91, 120, 138, 139, 140, 162, 208, 226, 240, 264, 266, 267, 270, 271, 272, 273, 276, 277, 278, 279, 281, 282, 283, 286, 287, 288, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 310, 311, 312, 313, 315, 316, 321, 344, 348, 378, 397, 398, 399, 420, 467, 485, 500, 524], "top": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 91, 125, 146, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 203, 209, 221, 259, 264, 266, 267, 270, 271, 272, 273, 276, 277, 278, 279, 281, 282, 283, 286, 287, 288, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 310, 311, 312, 313, 315, 316, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 348, 384, 405, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 461, 468, 480], "connectionist": [7, 8, 9, 264, 266, 267], "tempor": [7, 8, 9, 264, 266, 267], "classif": [7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 66, 67, 78, 80, 91, 95, 101, 104, 106, 115, 158, 163, 179, 221, 257, 264, 266, 267, 270, 271, 272, 273, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 315, 316, 323, 324, 336, 338, 348, 352, 358, 362, 364, 373, 417, 421, 438, 480, 517, 524], "ctc": [7, 8, 9, 264, 266, 267], "wa": [7, 8, 15, 16, 18, 21, 22, 23, 28, 30, 31, 32, 34, 35, 36, 39, 40, 43, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 78, 86, 87, 88, 96, 98, 99, 105, 110, 111, 117, 118, 119, 125, 146, 147, 158, 163, 166, 167, 169, 171, 174, 178, 183, 236, 240, 264, 266, 272, 273, 275, 278, 279, 280, 285, 287, 288, 289, 291, 292, 293, 297, 298, 301, 305, 306, 307, 308, 312, 313, 314, 315, 316, 323, 324, 336, 344, 345, 346, 353, 355, 356, 363, 368, 369, 375, 376, 377, 384, 405, 406, 417, 421, 424, 426, 428, 430, 433, 437, 441, 496, 500, 524, 525], "propos": [7, 8, 67, 78, 91, 96, 98, 99, 107, 110, 111, 114, 118, 119, 120, 172, 264, 266, 324, 336, 348, 353, 355, 356, 365, 368, 369, 372, 376, 377, 378, 431], "self": [7, 8, 78, 91, 105, 106, 170, 264, 266, 317, 336, 348, 363, 364, 429], "supervis": [7, 8, 9, 91, 101, 103, 109, 115, 125, 163, 166, 169, 175, 264, 266, 267, 348, 358, 360, 367, 373, 384, 421, 424, 428, 434], "speech": [7, 8, 9, 11, 96, 151, 152, 196, 253, 257, 264, 266, 267, 269, 353, 410, 411, 455, 513, 530], "represent": [7, 8, 78, 91, 93, 94, 99, 100, 101, 103, 113, 116, 117, 118, 119, 120, 138, 179, 181, 212, 225, 237, 238, 264, 266, 336, 348, 350, 351, 356, 357, 358, 360, 371, 374, 375, 376, 377, 378, 397, 438, 439, 471, 484, 497], "learn": [7, 8, 28, 44, 50, 71, 73, 77, 82, 91, 99, 100, 103, 110, 111, 115, 116, 118, 119, 120, 125, 139, 140, 149, 155, 160, 161, 162, 163, 165, 166, 167, 168, 173, 174, 175, 177, 179, 183, 221, 234, 264, 266, 285, 302, 308, 329, 331, 335, 340, 348, 356, 357, 360, 368, 369, 373, 374, 376, 377, 378, 384, 398, 399, 407, 414, 418, 419, 420, 421, 423, 424, 426, 427, 432, 433, 434, 436, 438, 441, 480, 493, 522], "mask": [7, 78, 98, 107, 118, 119, 120, 163, 192, 264, 336, 355, 365, 376, 377, 378, 421, 451], "predict": [7, 9, 66, 78, 98, 107, 140, 160, 161, 162, 166, 179, 221, 234, 264, 267, 323, 336, 355, 365, 399, 418, 419, 420, 424, 438, 480, 493, 520], "hidden": [7, 14, 16, 20, 22, 24, 26, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 91, 103, 120, 188, 264, 271, 273, 277, 279, 281, 283, 286, 288, 290, 292, 296, 298, 299, 301, 304, 306, 310, 311, 313, 316, 348, 360, 378, 447], "unit": [7, 166, 167, 188, 264, 424, 426, 447], "wei": [7, 78, 264, 336], "ning": [7, 264], "hsu": [7, 264], "benjamin": [7, 96, 264, 353], "bolt": [7, 264], "yao": [7, 264], "hung": [7, 264], "tsai": [7, 264], "kushal": [7, 264], "lakhotia": [7, 264], "ruslan": [7, 264], "salakhutdinov": [7, 264], "abdelrahman": [7, 8, 264, 266], "moham": [7, 8, 264, 266], "take": [7, 8, 17, 18, 23, 36, 49, 51, 56, 86, 88, 96, 107, 123, 134, 161, 162, 172, 184, 187, 193, 211, 251, 264, 266, 274, 275, 280, 293, 307, 309, 314, 344, 346, 353, 365, 381, 393, 407, 408, 419, 420, 431, 443, 446, 452, 470, 475, 480, 491, 497, 510, 523, 524, 528, 529], "transcrib": [7, 8, 9, 264, 266, 267], "text": [7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 214, 220, 221, 222, 225, 226, 234, 236, 237, 238, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 257, 258, 264, 266, 267, 268, 269, 272, 273, 274, 275, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 291, 292, 293, 295, 297, 298, 300, 301, 302, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 398, 399, 400, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 465, 467, 468, 469, 471, 472, 479, 480, 481, 484, 485, 493, 496, 497, 498, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 517, 518, 520, 523, 524, 525, 529, 530], "need": [7, 8, 9, 11, 17, 84, 85, 95, 99, 101, 109, 110, 117, 122, 123, 125, 128, 131, 133, 139, 140, 141, 144, 150, 152, 155, 158, 160, 162, 166, 169, 172, 174, 183, 184, 185, 192, 193, 198, 207, 208, 210, 234, 241, 251, 252, 253, 259, 264, 266, 267, 269, 274, 341, 343, 347, 352, 356, 358, 367, 368, 375, 379, 381, 384, 389, 392, 398, 399, 400, 403, 408, 411, 414, 417, 418, 420, 424, 428, 431, 433, 441, 443, 444, 451, 452, 456, 465, 467, 469, 493, 501, 510, 511, 513, 520, 522, 524, 525, 528, 530], "provid": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 127, 128, 130, 131, 132, 133, 134, 139, 140, 144, 152, 155, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 183, 184, 185, 196, 203, 208, 221, 226, 240, 258, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 386, 387, 388, 389, 391, 392, 393, 398, 399, 403, 407, 408, 411, 414, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 441, 443, 444, 455, 461, 467, 475, 480, 485, 487, 491, 497, 500, 518, 525], "pre": [7, 8, 9, 28, 44, 50, 66, 80, 93, 94, 98, 99, 101, 103, 106, 107, 109, 115, 140, 150, 163, 179, 193, 200, 202, 209, 213, 252, 264, 266, 267, 285, 302, 308, 323, 338, 350, 351, 355, 356, 358, 360, 364, 365, 367, 373, 399, 408, 421, 438, 458, 460, 468, 472, 511, 524], "processor": [7, 8, 264, 266], "m1": [7, 8, 264, 266], "due": [7, 8, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 91, 105, 114, 163, 264, 266, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 348, 363, 372, 421], "instruct": [7, 8, 73, 76, 90, 104, 165, 168, 171, 175, 264, 266, 331, 334, 362, 423, 427, 430, 434], "xla": [7, 8, 264, 266], "can": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 133, 138, 139, 140, 142, 143, 146, 147, 152, 154, 155, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 194, 196, 200, 201, 209, 210, 211, 212, 217, 221, 225, 234, 240, 241, 246, 247, 249, 251, 252, 253, 259, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 392, 397, 398, 399, 401, 402, 405, 406, 411, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 453, 455, 458, 459, 468, 469, 470, 471, 480, 484, 493, 500, 501, 506, 507, 509, 510, 511, 513, 520, 522, 524, 525, 527, 528, 529, 530], "companion": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 139, 140, 143, 152, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 183, 184, 185, 187, 196, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 386, 387, 398, 399, 402, 411, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 441, 443, 444, 446, 455, 489], "speechtotext": [7, 8, 9, 264, 266, 267], "setoutputcol": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 212, 213, 214, 217, 234, 235, 237, 238, 243, 245, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 465, 468, 469, 471, 472, 475, 493, 497, 498, 505, 520, 524, 525], "asr_hubert_large_ls960": [7, 9, 264, 267], "For": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 143, 144, 146, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 193, 196, 200, 201, 202, 203, 209, 210, 213, 221, 234, 236, 240, 241, 254, 259, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 400, 402, 403, 405, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 452, 455, 458, 459, 460, 461, 468, 469, 472, 480, 493, 496, 500, 501, 514, 520, 521, 523, 524, 525, 526, 527, 528], "pleas": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 72, 74, 75, 76, 78, 79, 80, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 127, 128, 130, 131, 133, 134, 139, 140, 144, 152, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 183, 184, 185, 187, 190, 191, 196, 200, 209, 210, 211, 241, 259, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 330, 332, 333, 334, 336, 337, 338, 341, 343, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 386, 387, 388, 389, 392, 393, 398, 399, 403, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 441, 443, 444, 446, 448, 450, 455, 458, 468, 469, 470, 501, 521, 522, 526, 529], "see": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 193, 196, 200, 201, 202, 203, 204, 209, 210, 213, 221, 224, 234, 240, 241, 254, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 452, 455, 458, 459, 460, 461, 462, 468, 469, 472, 480, 483, 493, 500, 501, 514, 520, 521, 522, 527, 529, 530], "hub": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 127, 128, 139, 140, 152, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 183, 184, 185, 187, 196, 241, 257, 260, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 386, 387, 398, 399, 411, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 441, 443, 444, 446, 455, 501, 517], "To": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 92, 93, 95, 96, 98, 99, 105, 110, 114, 118, 120, 125, 131, 133, 152, 154, 160, 161, 162, 163, 166, 173, 179, 196, 204, 208, 210, 211, 234, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 322, 323, 324, 329, 330, 331, 333, 334, 335, 336, 337, 338, 348, 349, 350, 352, 353, 355, 356, 363, 368, 372, 376, 378, 384, 389, 392, 411, 413, 418, 419, 420, 421, 424, 432, 438, 455, 462, 467, 469, 470, 493, 520, 528], "which": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 91, 93, 94, 95, 96, 98, 99, 100, 103, 104, 105, 108, 110, 112, 113, 114, 115, 116, 118, 120, 123, 125, 131, 132, 133, 140, 143, 144, 146, 147, 154, 155, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 192, 196, 201, 203, 208, 221, 226, 241, 251, 252, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 347, 348, 350, 351, 352, 353, 355, 356, 357, 360, 362, 363, 366, 368, 370, 371, 372, 373, 374, 376, 378, 381, 384, 389, 391, 392, 399, 402, 403, 405, 406, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 451, 455, 459, 461, 467, 480, 485, 501, 510, 511, 524, 525], "compat": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 96, 98, 99, 105, 110, 115, 118, 120, 140, 201, 207, 241, 258, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 322, 323, 324, 329, 330, 331, 333, 334, 335, 336, 337, 338, 348, 350, 353, 355, 356, 363, 368, 376, 378, 399, 459, 465, 501, 518], "import": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 226, 234, 240, 245, 246, 249, 251, 252, 253, 254, 255, 259, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 400, 401, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 465, 467, 468, 469, 470, 471, 472, 485, 493, 500, 505, 506, 509, 510, 511, 513, 514, 515, 520, 523, 524, 527, 528, 529, 530], "them": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 96, 98, 99, 105, 110, 118, 120, 122, 123, 125, 131, 133, 155, 168, 170, 178, 183, 187, 196, 207, 211, 213, 237, 247, 259, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 322, 323, 324, 329, 330, 331, 333, 334, 335, 336, 337, 338, 348, 350, 353, 355, 356, 363, 368, 376, 378, 379, 381, 384, 389, 392, 414, 427, 429, 437, 441, 446, 455, 465, 470, 472, 497, 507, 524, 525], "5669": [7, 8, 9, 66, 67, 78, 79, 80, 96, 264, 266, 267, 323, 324, 336, 337, 338, 353], "more": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 87, 96, 99, 101, 103, 104, 112, 118, 119, 123, 125, 131, 135, 138, 143, 146, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 192, 193, 200, 201, 202, 209, 210, 213, 221, 234, 236, 238, 240, 246, 247, 249, 254, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 345, 353, 356, 358, 360, 362, 370, 376, 377, 381, 384, 389, 394, 397, 402, 405, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 451, 452, 458, 459, 460, 468, 469, 472, 480, 493, 496, 498, 500, 506, 507, 509, 514, 520, 521, 522, 524, 527, 530], "extend": [7, 8, 9, 11, 28, 44, 50, 63, 66, 67, 71, 73, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 99, 103, 110, 112, 115, 117, 118, 120, 125, 127, 128, 131, 132, 133, 134, 135, 139, 140, 141, 143, 144, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 170, 179, 181, 183, 184, 186, 187, 191, 193, 196, 200, 201, 202, 203, 209, 210, 213, 240, 264, 266, 267, 269, 285, 302, 308, 317, 321, 323, 324, 329, 331, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 348, 349, 350, 351, 353, 354, 356, 360, 368, 370, 373, 375, 376, 378, 384, 386, 387, 389, 391, 392, 393, 394, 398, 399, 400, 402, 403, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 429, 438, 439, 441, 443, 445, 446, 450, 452, 455, 458, 459, 460, 461, 468, 469, 472, 500], "examplhubertforctctestspec": [7, 264], "paper": [7, 9, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 125, 155, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 196, 221, 254, 264, 267, 317, 324, 336, 337, 338, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 376, 377, 378, 384, 414, 417, 421, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 455, 514, 530], "abstract": [7, 9, 67, 78, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 118, 119, 120, 125, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 254, 264, 267, 317, 324, 336, 338, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 376, 377, 378, 384, 421, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 447, 483, 514, 530], "approach": [7, 9, 67, 78, 102, 106, 110, 111, 114, 120, 125, 137, 139, 140, 143, 155, 157, 163, 166, 167, 168, 171, 174, 179, 183, 184, 185, 215, 264, 267, 324, 336, 359, 364, 368, 369, 372, 378, 384, 396, 398, 399, 402, 414, 416, 421, 424, 426, 427, 430, 433, 438, 441, 443, 444, 473, 527], "challeng": [7, 44, 78, 99, 103, 104, 110, 111, 114, 125, 171, 172, 174, 264, 302, 336, 356, 360, 362, 368, 369, 372, 384, 430, 431, 433], "three": [7, 95, 183, 194, 264, 352, 441, 453], "uniqu": [7, 146, 147, 163, 224, 264, 405, 406, 421, 483], "problem": [7, 17, 44, 91, 103, 107, 114, 163, 179, 183, 196, 264, 274, 302, 348, 360, 365, 372, 421, 438, 441, 455], "multipl": [7, 9, 13, 19, 37, 44, 45, 77, 80, 95, 96, 122, 125, 131, 154, 161, 163, 168, 172, 177, 178, 181, 193, 226, 234, 236, 237, 245, 251, 264, 267, 270, 276, 294, 302, 303, 335, 338, 352, 353, 379, 384, 389, 413, 419, 421, 427, 431, 436, 437, 439, 452, 485, 493, 496, 497, 505, 510], "sound": [7, 86, 264, 344], "each": [7, 8, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 67, 78, 79, 80, 86, 95, 98, 100, 101, 107, 109, 112, 116, 117, 122, 123, 125, 128, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 144, 146, 147, 149, 150, 152, 154, 155, 157, 161, 162, 163, 177, 181, 183, 184, 185, 192, 193, 196, 200, 209, 220, 221, 226, 232, 253, 264, 266, 274, 275, 280, 284, 285, 289, 293, 302, 307, 308, 314, 324, 336, 337, 338, 344, 352, 355, 357, 358, 365, 367, 370, 374, 375, 379, 381, 384, 387, 388, 389, 392, 393, 394, 396, 398, 399, 402, 403, 405, 406, 408, 411, 413, 414, 416, 419, 420, 421, 436, 439, 441, 443, 444, 451, 452, 455, 458, 468, 479, 480, 485, 492, 513, 525], "inpututter": [7, 264], "lexicon": [7, 264], "phase": [7, 99, 141, 163, 264, 356, 400, 421], "have": [7, 17, 18, 23, 28, 36, 44, 49, 50, 56, 88, 91, 96, 99, 104, 110, 111, 117, 125, 133, 135, 138, 139, 140, 142, 146, 152, 154, 155, 161, 162, 164, 165, 166, 167, 168, 172, 173, 174, 175, 177, 185, 194, 210, 213, 259, 264, 274, 275, 280, 285, 293, 302, 307, 308, 314, 346, 347, 348, 353, 356, 362, 368, 369, 375, 384, 392, 394, 397, 398, 399, 401, 405, 411, 413, 414, 419, 420, 422, 423, 424, 426, 427, 431, 432, 433, 434, 436, 444, 453, 469, 472, 488, 508, 524, 525, 528], "variabl": [7, 100, 116, 210, 264, 357, 374, 469], "length": [7, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 120, 135, 144, 146, 154, 155, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 192, 193, 210, 221, 236, 237, 245, 264, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 344, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 376, 377, 378, 394, 403, 405, 413, 414, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 451, 452, 469, 480, 496, 505], "explicit": [7, 131, 154, 166, 264, 347, 413, 424], "segment": [7, 63, 67, 68, 78, 99, 110, 195, 196, 257, 264, 321, 324, 325, 336, 356, 368, 454, 455], "deal": [7, 208, 264, 467, 528], "we": [7, 8, 9, 28, 44, 67, 78, 80, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 114, 115, 116, 118, 119, 120, 125, 139, 140, 141, 144, 146, 155, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 183, 184, 193, 208, 210, 226, 259, 264, 266, 267, 285, 302, 317, 324, 336, 338, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 367, 368, 369, 372, 373, 374, 376, 377, 378, 384, 398, 399, 400, 403, 405, 414, 418, 419, 420, 421, 424, 426, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 441, 443, 452, 467, 469, 485, 520, 523, 524, 525, 528, 529, 530], "bert": [7, 15, 19, 20, 21, 22, 23, 25, 27, 30, 34, 35, 39, 42, 47, 51, 54, 57, 79, 91, 93, 94, 98, 99, 105, 106, 107, 110, 111, 113, 118, 119, 120, 140, 142, 143, 163, 179, 264, 272, 276, 277, 278, 279, 280, 282, 284, 287, 291, 292, 297, 300, 305, 309, 312, 315, 337, 348, 350, 351, 355, 356, 363, 364, 365, 368, 369, 371, 376, 377, 378, 399, 401, 402, 421, 438], "offlin": [7, 234, 264, 493], "step": [7, 28, 44, 50, 100, 116, 140, 150, 234, 264, 285, 302, 308, 357, 374, 399, 408, 493, 520, 524], "align": [7, 175, 177, 264, 434, 436], "target": [7, 81, 115, 128, 160, 161, 162, 163, 169, 170, 172, 193, 199, 208, 221, 240, 264, 317, 339, 373, 418, 419, 420, 421, 428, 429, 431, 452, 457, 467, 480, 500], "label": [7, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 78, 80, 84, 85, 95, 101, 114, 122, 127, 137, 138, 139, 140, 141, 143, 149, 150, 157, 158, 179, 183, 188, 196, 221, 234, 251, 264, 272, 273, 274, 275, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 291, 292, 293, 297, 298, 300, 301, 302, 305, 306, 307, 308, 312, 313, 314, 315, 316, 323, 324, 336, 338, 341, 343, 352, 358, 372, 379, 386, 396, 397, 398, 399, 400, 402, 407, 408, 416, 417, 438, 441, 447, 455, 480, 493, 510, 520, 524], "loss": [7, 91, 99, 104, 140, 179, 264, 348, 356, 362, 399, 438, 520], "A": [7, 8, 50, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 102, 110, 111, 113, 117, 122, 125, 128, 130, 133, 134, 135, 143, 144, 146, 147, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 185, 192, 193, 203, 207, 221, 234, 236, 249, 253, 259, 264, 266, 308, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 347, 348, 359, 368, 369, 371, 375, 379, 384, 387, 388, 392, 393, 394, 402, 403, 405, 406, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 444, 451, 452, 461, 465, 480, 493, 496, 509, 513, 522, 524, 530], "ingredi": [7, 264], "our": [7, 91, 95, 96, 99, 100, 101, 103, 104, 105, 110, 111, 115, 116, 118, 119, 125, 155, 163, 166, 167, 168, 169, 171, 172, 174, 175, 177, 178, 179, 226, 240, 264, 348, 352, 353, 356, 357, 358, 360, 362, 363, 368, 369, 373, 374, 376, 377, 384, 414, 421, 424, 426, 427, 428, 430, 431, 433, 434, 436, 437, 438, 485, 500, 529], "appli": [7, 10, 28, 44, 50, 67, 80, 86, 87, 122, 123, 140, 142, 150, 154, 160, 161, 162, 179, 183, 184, 202, 203, 210, 221, 226, 227, 230, 237, 251, 264, 268, 285, 302, 308, 324, 338, 344, 345, 379, 381, 399, 401, 408, 413, 418, 419, 420, 438, 441, 443, 460, 461, 469, 480, 485, 489, 510], "over": [7, 69, 86, 99, 107, 118, 119, 120, 163, 167, 171, 172, 184, 187, 193, 221, 226, 234, 264, 326, 344, 356, 365, 376, 377, 378, 421, 426, 430, 431, 443, 452, 480, 485, 493, 520], "region": [7, 264], "onli": [7, 9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 95, 101, 102, 103, 106, 107, 115, 120, 131, 133, 144, 146, 154, 155, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 191, 196, 203, 210, 211, 220, 221, 237, 245, 251, 258, 264, 267, 317, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 352, 358, 359, 360, 364, 365, 373, 378, 389, 392, 403, 405, 413, 414, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 450, 455, 461, 469, 470, 479, 480, 497, 505, 510, 518], "forc": [7, 92, 160, 161, 162, 221, 237, 245, 264, 349, 418, 419, 420, 480], "combin": [7, 17, 18, 23, 27, 32, 36, 49, 56, 79, 99, 105, 117, 125, 163, 169, 172, 179, 183, 184, 196, 264, 274, 275, 280, 284, 289, 293, 307, 314, 337, 356, 363, 375, 384, 421, 428, 431, 438, 441, 443, 455], "acoust": [7, 264], "continu": [7, 138, 160, 161, 162, 166, 181, 204, 221, 264, 397, 418, 419, 420, 424, 439, 462, 480, 520], "reli": [7, 84, 85, 120, 125, 264, 341, 343, 378, 384], "primarili": [7, 114, 264, 372], "consist": [7, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 98, 105, 133, 152, 158, 174, 177, 196, 212, 253, 264, 322, 326, 328, 329, 330, 331, 332, 333, 334, 335, 348, 355, 363, 392, 411, 417, 433, 436, 455, 471, 513], "unsupervis": [7, 118, 119, 120, 125, 163, 166, 264, 376, 377, 378, 384, 421, 424], "rather": [7, 67, 92, 160, 161, 162, 221, 264, 324, 347, 349, 418, 419, 420, 480], "than": [7, 44, 50, 67, 92, 95, 99, 100, 102, 104, 106, 116, 118, 119, 120, 125, 127, 135, 139, 146, 160, 161, 162, 165, 166, 167, 168, 169, 170, 174, 175, 178, 184, 185, 221, 264, 302, 308, 324, 347, 349, 352, 356, 357, 359, 362, 364, 374, 376, 377, 378, 384, 386, 394, 398, 405, 418, 419, 420, 423, 424, 426, 427, 428, 429, 433, 434, 437, 443, 444, 480, 524], "intrins": [7, 67, 264, 324], "qualiti": [7, 70, 78, 113, 114, 166, 168, 169, 172, 175, 178, 264, 328, 336, 371, 372, 424, 427, 428, 431, 434, 437], "assign": [7, 44, 122, 142, 157, 264, 302, 379, 401, 416], "simpl": [7, 60, 93, 94, 106, 122, 166, 264, 317, 350, 351, 364, 379, 424, 525], "k": [7, 9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 201, 203, 221, 264, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 459, 461, 480], "mean": [7, 9, 11, 17, 18, 23, 27, 32, 36, 44, 49, 56, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 92, 108, 113, 114, 118, 125, 127, 131, 132, 146, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 192, 201, 208, 210, 221, 264, 267, 269, 274, 275, 280, 284, 289, 293, 302, 307, 314, 317, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 349, 366, 371, 372, 376, 384, 386, 389, 391, 405, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 451, 459, 467, 469, 480, 524, 525, 528], "teacher": [7, 264], "100": [7, 28, 44, 51, 80, 100, 116, 118, 125, 146, 155, 169, 212, 249, 264, 285, 302, 309, 338, 357, 374, 376, 384, 405, 414, 428, 471, 509], "two": [7, 44, 71, 72, 73, 75, 76, 77, 78, 84, 85, 91, 98, 100, 115, 116, 117, 118, 119, 123, 141, 162, 175, 194, 210, 251, 264, 302, 329, 330, 331, 333, 334, 335, 336, 341, 343, 348, 355, 357, 373, 374, 375, 376, 377, 381, 400, 420, 434, 453, 469, 510, 524], "iter": [7, 84, 85, 91, 100, 116, 152, 168, 196, 210, 234, 264, 341, 343, 348, 357, 374, 411, 427, 455, 469, 493, 520], "either": [7, 9, 28, 50, 80, 81, 85, 96, 97, 112, 122, 125, 127, 133, 157, 158, 179, 196, 199, 208, 209, 212, 240, 245, 264, 267, 285, 308, 338, 339, 343, 353, 354, 370, 379, 384, 386, 392, 416, 417, 438, 455, 457, 467, 468, 471, 500, 505, 525], "match": [7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 71, 87, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 120, 122, 129, 130, 131, 132, 133, 134, 144, 152, 154, 163, 166, 168, 178, 193, 196, 199, 210, 220, 221, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 324, 329, 345, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 376, 377, 378, 379, 388, 389, 390, 391, 392, 393, 403, 411, 413, 421, 424, 427, 437, 452, 455, 457, 469, 479, 480, 523], "improv": [7, 81, 91, 93, 94, 96, 98, 103, 104, 110, 111, 114, 118, 119, 139, 140, 166, 167, 168, 172, 173, 174, 175, 177, 179, 181, 237, 264, 339, 348, 350, 351, 353, 355, 360, 362, 368, 369, 372, 376, 377, 398, 399, 424, 426, 427, 431, 432, 433, 434, 436, 438, 439, 529], "upon": [7, 70, 88, 95, 125, 160, 161, 162, 177, 178, 221, 264, 328, 346, 352, 384, 418, 419, 420, 436, 437, 480], "state": [7, 14, 16, 20, 22, 24, 26, 28, 29, 31, 33, 35, 38, 40, 41, 43, 44, 46, 48, 50, 52, 53, 55, 58, 67, 69, 78, 80, 91, 93, 94, 96, 101, 103, 104, 105, 107, 110, 111, 114, 120, 125, 140, 163, 166, 167, 172, 173, 174, 175, 176, 179, 209, 264, 271, 273, 277, 279, 281, 283, 285, 286, 288, 290, 292, 296, 298, 299, 301, 302, 304, 306, 308, 310, 311, 313, 316, 324, 326, 336, 338, 348, 350, 351, 353, 358, 360, 362, 363, 365, 368, 369, 372, 378, 384, 399, 421, 424, 426, 431, 432, 433, 434, 435, 438, 468, 521, 524], "art": [7, 28, 44, 67, 69, 78, 80, 91, 93, 94, 95, 96, 101, 103, 104, 105, 107, 110, 111, 114, 120, 125, 140, 163, 166, 172, 173, 174, 175, 176, 179, 209, 264, 285, 302, 324, 326, 336, 338, 348, 350, 351, 352, 353, 358, 360, 362, 363, 365, 368, 369, 372, 378, 384, 399, 421, 424, 431, 432, 433, 434, 435, 438, 468], "wav2vec": [7, 8, 264, 266], "perform": [7, 67, 71, 77, 78, 80, 81, 87, 91, 95, 96, 98, 99, 101, 102, 103, 104, 106, 109, 110, 111, 113, 115, 117, 118, 119, 120, 140, 141, 158, 163, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 177, 178, 179, 181, 184, 237, 249, 264, 324, 329, 335, 336, 338, 339, 345, 348, 352, 353, 355, 356, 358, 359, 360, 362, 364, 367, 368, 369, 371, 373, 375, 376, 377, 378, 399, 400, 417, 421, 422, 423, 424, 426, 427, 428, 430, 431, 433, 434, 436, 437, 438, 439, 443, 509], "librispeech": [7, 264], "960h": [7, 264], "libri": [7, 264], "light": [7, 99, 120, 125, 208, 260, 264, 356, 378, 384, 467, 527, 529], "60": [7, 99, 154, 164, 168, 176, 264, 356, 413, 422, 427, 435], "000h": [7, 264], "benchmark": [7, 9, 73, 80, 91, 95, 98, 99, 101, 103, 106, 118, 119, 163, 165, 167, 168, 171, 172, 174, 175, 178, 179, 257, 264, 267, 331, 338, 348, 352, 355, 356, 358, 360, 364, 376, 377, 421, 423, 426, 427, 430, 431, 433, 434, 437, 438, 517], "10min": [7, 264], "1h": [7, 264], "10h": [7, 264], "100h": [7, 264], "fine": [7, 9, 63, 93, 94, 99, 101, 102, 106, 107, 143, 163, 167, 168, 171, 174, 175, 179, 255, 264, 267, 321, 350, 351, 356, 358, 359, 364, 365, 402, 421, 426, 427, 430, 433, 434, 438, 515], "tune": [7, 9, 63, 73, 81, 93, 94, 99, 101, 102, 106, 107, 143, 163, 167, 168, 171, 174, 175, 179, 264, 267, 321, 331, 339, 350, 351, 356, 358, 359, 364, 365, 402, 421, 426, 427, 430, 433, 434, 438], "subset": [7, 172, 264, 431], "1b": [7, 264], "show": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 212, 213, 226, 236, 238, 241, 245, 246, 249, 251, 252, 253, 254, 255, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 465, 468, 469, 471, 472, 485, 496, 498, 501, 505, 506, 509, 510, 511, 513, 514, 515, 520, 523, 524, 525, 529], "19": [7, 82, 95, 101, 109, 135, 253, 255, 264, 340, 352, 358, 367, 394, 513, 515], "13": [7, 10, 11, 63, 118, 119, 123, 152, 174, 178, 202, 255, 264, 268, 269, 321, 376, 377, 381, 411, 433, 437, 460, 515], "rel": [7, 96, 98, 118, 131, 132, 139, 165, 172, 183, 264, 353, 355, 376, 389, 391, 398, 423, 431, 441, 523], "wer": [7, 264], "reduct": [7, 91, 184, 264, 348, 443], "dev": [7, 78, 91, 103, 115, 264, 336, 348, 360, 373], "other": [7, 10, 44, 67, 79, 88, 96, 108, 109, 112, 113, 114, 115, 123, 125, 144, 157, 163, 166, 169, 178, 179, 183, 190, 191, 201, 202, 259, 264, 268, 302, 324, 337, 346, 353, 366, 367, 370, 371, 372, 373, 381, 384, 403, 416, 421, 424, 428, 437, 438, 441, 448, 450, 459, 460, 524], "test": [7, 28, 44, 50, 66, 67, 70, 71, 73, 76, 77, 78, 79, 80, 84, 85, 93, 94, 115, 117, 128, 130, 133, 134, 139, 140, 141, 150, 152, 162, 166, 167, 174, 175, 184, 185, 190, 196, 236, 251, 252, 253, 254, 255, 264, 285, 302, 308, 323, 324, 328, 329, 331, 334, 335, 336, 337, 338, 341, 343, 347, 350, 351, 373, 375, 387, 388, 392, 393, 398, 399, 400, 408, 411, 420, 424, 426, 433, 434, 443, 444, 448, 455, 496, 510, 511, 513, 514, 515, 524, 530], "evalu": [7, 28, 44, 50, 96, 101, 104, 105, 106, 114, 118, 119, 150, 163, 164, 167, 169, 171, 172, 173, 174, 178, 217, 234, 236, 237, 264, 285, 302, 308, 353, 358, 362, 363, 364, 372, 376, 377, 408, 421, 422, 426, 428, 430, 431, 432, 433, 437, 475, 493, 496], "batchsiz": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 136, 140, 148, 149, 163, 170, 182, 183, 214, 221, 264, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 376, 377, 378, 399, 407, 421, 429, 441, 480], "size": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 87, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 123, 125, 140, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 214, 221, 236, 237, 238, 246, 248, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 344, 345, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 381, 384, 399, 407, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 480, 496, 497, 506, 508, 523, 528, 529], "batch": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 140, 149, 160, 161, 162, 163, 170, 183, 221, 264, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 348, 349, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 376, 377, 378, 399, 407, 418, 419, 420, 421, 429, 441, 480], "refer": [7, 9, 63, 67, 69, 72, 73, 74, 75, 76, 78, 80, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 125, 143, 146, 147, 154, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 196, 199, 200, 209, 221, 224, 236, 259, 260, 264, 267, 317, 321, 324, 326, 330, 331, 332, 333, 334, 336, 338, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 376, 377, 378, 384, 402, 405, 406, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 455, 457, 458, 468, 480, 483, 496, 524, 526, 527], "ml": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 203, 207, 208, 209, 211, 212, 213, 234, 245, 246, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 400, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 465, 467, 468, 470, 471, 472, 493, 505, 506, 520, 524, 528], "audio_cont": [7, 8, 9, 198, 264, 266, 267, 456], "setstag": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 199, 201, 203, 212, 213, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 400, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 457, 459, 461, 471, 472, 524, 525], "processedaudiofloat": [7, 8, 9, 264, 266, 267], "createdatafram": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 82, 84, 85, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 203, 209, 210, 212, 213, 226, 234, 238, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 321, 340, 341, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 468, 469, 471, 472, 485, 493, 498, 520, 523, 524, 525, 529], "rawfloat": [7, 8, 9, 264, 266, 267], "todf": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 142, 143, 144, 146, 147, 152, 154, 155, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 207, 209, 210, 212, 213, 226, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 321, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 401, 402, 403, 405, 406, 411, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 457, 458, 459, 460, 465, 468, 469, 471, 472, 485, 523, 524, 525, 529], "fit": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 150, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 199, 201, 203, 208, 211, 212, 213, 227, 232, 234, 238, 245, 246, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 400, 401, 402, 403, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 457, 459, 461, 467, 470, 471, 472, 492, 493, 498, 505, 506, 520, 524, 525, 528], "select": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 92, 97, 99, 102, 117, 123, 125, 127, 139, 140, 143, 146, 147, 158, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 191, 196, 198, 200, 202, 203, 204, 207, 209, 210, 212, 213, 226, 234, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 340, 349, 354, 356, 359, 375, 381, 384, 386, 398, 399, 402, 405, 406, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 450, 455, 456, 458, 460, 461, 462, 465, 468, 469, 471, 472, 485, 493, 520, 525], "truncat": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 66, 67, 69, 70, 71, 73, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 92, 102, 117, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 143, 144, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 199, 200, 202, 203, 204, 209, 210, 212, 213, 226, 249, 253, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 323, 324, 326, 328, 329, 331, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 349, 359, 375, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 457, 458, 460, 461, 462, 468, 469, 471, 472, 485, 509, 513, 523, 524, 525], "mister": [7, 8, 264, 266], "quilter": [7, 8, 9, 264, 266, 267], "THE": [7, 8, 87, 264, 266, 345], "apostl": [7, 8, 9, 264, 266, 267], "OF": [7, 8, 91, 264, 266, 348], "midl": [7, 8, 264, 266], "clase": [7, 8, 264, 266], "AND": [7, 8, 264, 266], "glad": [7, 8, 9, 264, 266, 267], "TO": [7, 8, 251, 264, 266, 510, 530], "welcom": [7, 8, 9, 260, 264, 266, 267], "hi": [7, 8, 9, 88, 143, 155, 264, 266, 267, 346, 402, 414], "gospel": [7, 8, 9, 264, 266, 267], "parent": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 191, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 212, 213, 217, 221, 224, 237, 238, 245, 246, 247, 248, 341, 343], "undefin": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 191, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 212, 213, 217, 221, 224, 237, 238, 245, 246, 247, 248], "doc": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 191, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 212, 213, 217, 221, 224, 236, 237, 238, 243, 245, 246, 247, 248, 249, 254, 405, 406, 441, 496, 498, 506, 508, 509, 514, 530], "configproto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 127, 140, 149, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 264, 266, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 386, 399, 407, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441], "tensorflow": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 125, 127, 140, 149, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 264, 266, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 384, 386, 399, 407, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441], "get": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 125, 127, 137, 140, 141, 149, 152, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 188, 193, 196, 198, 200, 201, 202, 203, 207, 208, 209, 217, 221, 224, 231, 237, 260, 267, 285, 302, 349, 384, 396, 400, 411, 419, 439, 441, 447, 452, 455, 456, 458, 459, 460, 461, 465, 467, 468, 475, 480, 483, 491, 497, 520, 524, 529, 530], "config_proto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 127, 140, 149, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183], "serializetostr": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 75, 76, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 127, 140, 149, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183], "folder": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 140, 141, 150, 155, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 185, 188, 241, 251, 257, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 399, 400, 408, 414, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 444, 447, 501, 510, 517], "spark_sess": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 118, 119, 120, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438], "restor": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 143, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 386, 387, 388, 393, 398, 399, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455], "lang": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 130, 134, 139, 140, 143, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 240, 241, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 388, 393, 398, 399, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455, 500, 501, 524, 529], "en": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 120, 122, 123, 127, 128, 130, 134, 139, 140, 143, 152, 155, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 240, 241, 252, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 378, 379, 381, 386, 387, 388, 393, 398, 399, 402, 411, 414, 417, 418, 419, 420, 421, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455, 500, 501, 511, 524, 529, 530], "remote_loc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 127, 128, 130, 134, 139, 140, 143, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 240, 241, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 386, 387, 388, 393, 398, 399, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455, 500, 501], "remot": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 143, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 237, 240, 241, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 386, 387, 388, 393, 398, 399, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455, 497, 500, 501], "address": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 143, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 386, 387, 388, 393, 398, 399, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455], "resourc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 127, 128, 130, 133, 134, 139, 140, 141, 143, 144, 150, 152, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 190, 193, 196, 211, 222, 225, 237, 239, 241, 251, 252, 253, 254, 255, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 386, 387, 388, 392, 393, 398, 399, 400, 402, 403, 408, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 448, 452, 455, 470, 481, 484, 497, 499, 501, 510, 511, 513, 514, 515, 524, 530], "Will": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 143, 152, 154, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 386, 387, 388, 393, 398, 399, 402, 411, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455], "repositori": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 143, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 240, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 386, 387, 388, 393, 398, 399, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455, 500, 521], "otherwis": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 130, 134, 139, 140, 143, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 193, 196, 199, 221, 234, 237, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 386, 387, 388, 393, 398, 399, 402, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 452, 455, 457, 480, 493, 497], "b": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115, 118, 119, 120, 127, 130, 134, 138, 139, 140, 142, 143, 149, 154, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 196, 208, 226, 240, 251, 254, 264, 266, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 321, 324, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 367, 368, 369, 373, 376, 377, 378, 386, 388, 393, 397, 398, 399, 401, 402, 407, 413, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 455, 467, 485, 500, 510, 514, 530], "wav2vec2": [8, 266], "framework": [8, 71, 163, 170, 173, 179, 259, 266, 317, 329, 347, 421, 429, 432, 438], "alexei": [8, 266], "baevski": [8, 266], "henri": [8, 266], "zhou": [8, 266], "michael": [8, 190, 266, 448], "auli": [8, 266], "asr_wav2vec2_base_960h": [8, 266], "wav2vec2forctctestspec": [8, 266], "whisper": [9, 267], "automat": [9, 123, 125, 141, 143, 160, 170, 184, 236, 267, 317, 347, 381, 384, 400, 402, 418, 429, 443, 496, 523, 524], "recognit": [9, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 67, 73, 80, 96, 136, 139, 140, 143, 257, 267, 273, 279, 283, 288, 292, 298, 301, 306, 313, 316, 324, 331, 338, 353, 395, 398, 399, 402, 517], "asr": [9, 267], "system": [9, 76, 92, 125, 160, 161, 162, 163, 166, 168, 169, 172, 176, 210, 221, 267, 334, 349, 384, 418, 419, 420, 421, 424, 427, 428, 431, 435, 469, 480], "680": [9, 267], "000": [9, 51, 125, 166, 172, 196, 212, 267, 309, 384, 424, 431, 455, 471], "hour": [9, 88, 131, 132, 267, 346, 389, 391], "multilingu": [9, 69, 70, 118, 119, 164, 169, 172, 177, 196, 267, 326, 328, 376, 377, 422, 428, 431, 436, 455], "multitask": [9, 104, 166, 267, 362, 424], "collect": [9, 73, 114, 125, 167, 174, 234, 267, 331, 372, 384, 426, 433, 493, 520], "web": [9, 63, 87, 96, 113, 166, 175, 234, 267, 321, 345, 353, 371, 424, 434, 493, 520], "It": [9, 15, 17, 18, 21, 23, 27, 28, 30, 32, 34, 36, 39, 44, 47, 49, 50, 51, 54, 56, 57, 66, 67, 69, 71, 78, 79, 81, 86, 87, 93, 94, 96, 98, 99, 100, 102, 105, 110, 111, 116, 118, 119, 122, 125, 135, 141, 158, 161, 162, 163, 165, 170, 174, 177, 181, 183, 184, 185, 191, 202, 203, 208, 238, 241, 246, 247, 259, 267, 272, 274, 275, 278, 280, 284, 285, 287, 289, 291, 293, 297, 302, 305, 307, 308, 309, 312, 314, 315, 317, 323, 324, 326, 329, 336, 337, 339, 344, 345, 347, 350, 351, 353, 355, 356, 357, 359, 363, 368, 369, 374, 376, 377, 379, 384, 394, 400, 417, 419, 420, 421, 423, 429, 433, 436, 439, 441, 443, 444, 450, 460, 461, 467, 498, 501, 506, 507, 523, 528], "well": [9, 65, 70, 72, 75, 77, 80, 84, 85, 86, 101, 115, 118, 119, 125, 146, 163, 164, 177, 178, 212, 267, 322, 328, 330, 333, 335, 338, 341, 343, 344, 358, 373, 376, 377, 384, 405, 421, 422, 436, 437, 471], "translat": [9, 131, 163, 166, 169, 170, 172, 179, 196, 257, 267, 317, 421, 424, 428, 429, 431, 438, 455], "those": [9, 96, 123, 142, 177, 267, 353, 381, 401, 436, 524, 525], "english": [9, 50, 95, 96, 109, 125, 169, 171, 172, 184, 187, 196, 241, 267, 308, 352, 353, 367, 384, 428, 430, 431, 443, 446, 455, 501], "moment": [9, 162, 210, 267, 420, 469], "greedi": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "search": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 95, 113, 131, 161, 163, 164, 168, 169, 172, 176, 181, 184, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 352, 371, 389, 419, 421, 422, 427, 428, 431, 435, 439, 443, 480], "task": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 67, 68, 71, 77, 78, 80, 91, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 109, 114, 115, 118, 119, 120, 125, 143, 159, 161, 163, 165, 166, 170, 171, 172, 176, 177, 178, 179, 211, 214, 221, 257, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 324, 325, 329, 335, 336, 338, 348, 350, 351, 352, 353, 355, 356, 358, 362, 363, 364, 365, 367, 372, 373, 376, 377, 378, 384, 402, 419, 421, 423, 424, 429, 430, 431, 435, 436, 437, 438, 470, 480, 517], "asr_whisper_tiny_opt": [9, 267], "whisperforctctestspec": [9, 267], "robust": [9, 104, 175, 267, 362, 434], "larg": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 86, 88, 91, 92, 98, 99, 101, 103, 106, 107, 113, 114, 118, 119, 120, 125, 127, 130, 134, 140, 160, 162, 163, 164, 165, 166, 167, 168, 169, 174, 177, 178, 185, 210, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 322, 324, 325, 326, 328, 330, 331, 332, 333, 334, 336, 337, 338, 344, 346, 348, 349, 355, 356, 358, 360, 364, 365, 371, 372, 376, 377, 378, 384, 386, 388, 393, 399, 418, 420, 421, 422, 423, 424, 426, 427, 428, 433, 436, 437, 469], "scale": [9, 67, 78, 79, 80, 91, 92, 99, 101, 105, 107, 118, 119, 160, 161, 162, 163, 165, 166, 167, 168, 169, 172, 174, 175, 179, 203, 221, 267, 324, 336, 337, 338, 348, 349, 356, 358, 363, 365, 376, 377, 418, 419, 420, 421, 423, 424, 426, 427, 428, 431, 433, 434, 438, 461, 480], "weak": [9, 101, 267, 358], "studi": [9, 88, 99, 110, 111, 163, 173, 179, 267, 346, 356, 368, 369, 421, 432, 438], "capabl": [9, 66, 69, 70, 78, 99, 120, 164, 166, 168, 171, 175, 177, 203, 267, 323, 326, 328, 336, 356, 378, 422, 424, 427, 430, 434, 436, 461], "simpli": [9, 87, 104, 267, 345, 362, 525], "amount": [9, 80, 115, 125, 134, 160, 161, 162, 166, 177, 196, 208, 221, 267, 338, 373, 384, 393, 418, 419, 420, 424, 436, 455, 467, 480, 528], "transcript": [9, 267], "internet": [9, 267], "when": [9, 10, 11, 15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 67, 78, 79, 80, 81, 86, 87, 91, 92, 101, 123, 131, 132, 135, 140, 146, 160, 161, 162, 163, 166, 169, 174, 175, 177, 179, 183, 184, 187, 191, 196, 208, 210, 221, 236, 237, 238, 251, 267, 268, 269, 272, 275, 278, 280, 287, 289, 291, 293, 297, 305, 307, 312, 314, 315, 324, 336, 337, 338, 339, 344, 345, 347, 348, 349, 358, 381, 389, 391, 394, 399, 405, 418, 419, 420, 421, 424, 428, 433, 434, 436, 438, 441, 443, 446, 450, 455, 467, 469, 480, 496, 497, 510, 524, 525, 528], "gener": [9, 28, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 91, 92, 95, 97, 99, 101, 104, 105, 106, 109, 112, 114, 120, 123, 125, 139, 140, 143, 146, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 188, 202, 204, 210, 221, 234, 236, 237, 238, 257, 267, 285, 302, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 348, 349, 352, 354, 356, 358, 362, 363, 364, 367, 370, 372, 378, 381, 384, 398, 399, 402, 405, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 460, 462, 469, 480, 493, 496, 497, 517, 520, 523, 524, 525], "standard": [9, 67, 73, 78, 79, 80, 87, 105, 131, 132, 163, 184, 185, 193, 221, 267, 324, 331, 336, 337, 338, 345, 363, 389, 391, 421, 443, 444, 452, 480], "often": [9, 91, 102, 110, 111, 120, 267, 348, 359, 368, 369, 378], "competit": [9, 118, 119, 125, 169, 177, 267, 376, 377, 384, 428, 436], "prior": [9, 67, 95, 99, 104, 105, 146, 173, 183, 249, 267, 324, 352, 356, 362, 363, 405, 432, 441, 509], "fulli": [9, 109, 240, 267, 367, 500], "zero": [9, 66, 101, 117, 143, 166, 267, 323, 358, 375, 402, 424], "shot": [9, 66, 101, 143, 166, 267, 323, 358, 402, 424], "transfer": [9, 80, 99, 101, 115, 118, 119, 163, 166, 179, 267, 338, 356, 358, 373, 376, 377, 421, 424, 438], "without": [9, 66, 77, 93, 94, 101, 102, 104, 118, 119, 125, 162, 166, 171, 196, 249, 267, 323, 335, 350, 351, 358, 359, 362, 376, 377, 384, 420, 424, 430, 455, 509], "ani": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 81, 95, 100, 101, 104, 115, 116, 122, 125, 140, 141, 166, 169, 179, 183, 201, 202, 221, 241, 257, 267, 274, 275, 280, 284, 289, 293, 307, 314, 323, 339, 347, 352, 357, 358, 362, 373, 374, 379, 384, 399, 400, 424, 428, 438, 441, 459, 460, 480, 501, 517, 521, 524, 525, 530], "compar": [9, 78, 80, 91, 98, 99, 103, 104, 106, 107, 120, 125, 155, 163, 165, 167, 177, 178, 179, 183, 234, 267, 336, 338, 348, 355, 356, 360, 362, 364, 365, 378, 384, 414, 421, 423, 426, 436, 437, 438, 441, 493, 520], "human": [9, 98, 125, 165, 167, 168, 171, 172, 174, 177, 267, 355, 384, 423, 426, 427, 430, 431, 433, 436], "accuraci": [9, 67, 78, 84, 85, 93, 94, 100, 113, 115, 116, 118, 119, 139, 140, 152, 171, 184, 196, 267, 324, 336, 341, 343, 350, 351, 357, 371, 373, 374, 376, 377, 398, 399, 411, 430, 443, 455, 520], "infer": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 68, 77, 92, 93, 94, 96, 99, 120, 160, 161, 162, 165, 167, 171, 173, 207, 237, 267, 274, 275, 280, 284, 289, 293, 307, 314, 323, 325, 335, 349, 350, 351, 353, 356, 378, 418, 419, 420, 423, 426, 430, 432, 465, 497], "code": [9, 63, 66, 98, 100, 104, 105, 109, 110, 111, 116, 118, 119, 125, 127, 163, 165, 171, 173, 175, 176, 177, 178, 179, 249, 267, 321, 323, 347, 355, 357, 362, 363, 367, 368, 369, 374, 376, 377, 384, 386, 421, 423, 430, 432, 434, 435, 436, 437, 438, 509, 521, 529], "serv": [9, 78, 267, 336, 521], "foundat": [9, 167, 168, 267, 426, 427], "further": [9, 10, 91, 104, 106, 113, 125, 139, 140, 146, 175, 213, 267, 268, 348, 362, 364, 371, 384, 398, 399, 405, 434, 472], "work": [9, 67, 99, 104, 105, 114, 127, 146, 160, 163, 167, 169, 170, 174, 177, 179, 190, 221, 238, 259, 267, 317, 324, 356, 362, 363, 372, 386, 405, 418, 421, 426, 428, 429, 433, 436, 438, 448, 480, 498, 523, 525, 529], "e": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 81, 85, 87, 101, 103, 104, 105, 106, 107, 122, 123, 139, 140, 163, 166, 170, 175, 179, 181, 183, 187, 212, 221, 234, 236, 237, 238, 245, 258, 267, 269, 270, 272, 273, 276, 278, 279, 282, 283, 287, 288, 291, 292, 294, 297, 298, 300, 301, 303, 305, 306, 312, 313, 315, 316, 317, 324, 339, 343, 345, 358, 360, 362, 363, 364, 365, 379, 381, 398, 399, 421, 424, 429, 434, 438, 439, 441, 446, 471, 480, 493, 496, 497, 498, 518, 520], "g": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 81, 85, 87, 101, 103, 104, 106, 107, 123, 139, 140, 163, 166, 170, 175, 179, 183, 187, 212, 221, 234, 237, 238, 245, 258, 267, 269, 270, 272, 273, 276, 278, 279, 282, 283, 287, 288, 291, 292, 294, 297, 298, 300, 301, 303, 305, 306, 312, 313, 315, 316, 317, 324, 339, 343, 345, 358, 360, 362, 364, 365, 381, 398, 399, 421, 424, 429, 434, 438, 441, 446, 471, 480, 493, 497, 498, 518, 520], "check": [9, 71, 73, 77, 95, 101, 109, 140, 141, 154, 182, 183, 184, 185, 208, 213, 240, 257, 267, 329, 331, 335, 352, 358, 367, 399, 400, 413, 441, 442, 443, 444, 467, 472, 500, 517, 524, 529], "descript": [9, 85, 104, 112, 125, 131, 167, 174, 184, 191, 220, 222, 257, 267, 343, 362, 370, 384, 389, 426, 433, 443, 450, 479, 481, 517], "minoutputlength": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "minimum": [9, 44, 50, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 100, 116, 123, 125, 127, 137, 139, 140, 144, 154, 155, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 185, 192, 193, 203, 221, 237, 238, 246, 248, 251, 267, 302, 308, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 357, 374, 381, 384, 386, 396, 398, 399, 403, 413, 414, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 444, 451, 452, 461, 480, 497, 506, 508, 510], "sequenc": [9, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 92, 105, 108, 113, 114, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 187, 210, 221, 267, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 317, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 349, 363, 366, 371, 372, 405, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 446, 469, 480], "maxoutputlength": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 267, 317, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "maximum": [9, 28, 44, 50, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 100, 116, 123, 125, 137, 139, 140, 144, 146, 149, 154, 155, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 192, 193, 203, 221, 237, 267, 285, 302, 308, 317, 321, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 347, 357, 374, 381, 384, 396, 398, 399, 403, 405, 407, 413, 414, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 451, 452, 461, 480], "dosampl": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "sampl": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 106, 113, 146, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 249, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 364, 371, 405, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480, 509], "decod": [9, 60, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 92, 98, 105, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 267, 317, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 349, 355, 363, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "temperatur": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 145, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 405, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "next": [9, 42, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 110, 111, 125, 131, 132, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 267, 300, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 368, 369, 384, 389, 391, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "probabl": [9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 125, 146, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 221, 267, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 384, 405, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 480], "topk": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 203, 214, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 461, 480], "highest": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 146, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 405, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 480], "vocabulari": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 100, 116, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 357, 374, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 480], "keep": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 86, 92, 125, 144, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 237, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 344, 349, 384, 403, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480, 497], "filter": [9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 118, 119, 125, 138, 139, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 187, 203, 221, 226, 241, 267, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 376, 377, 384, 397, 398, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 446, 461, 480, 485, 501], "topp": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 145, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 405, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "most": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 86, 88, 96, 99, 105, 107, 125, 140, 146, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 267, 317, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 344, 346, 353, 356, 363, 365, 384, 399, 405, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "add": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 117, 131, 132, 154, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 193, 203, 210, 221, 257, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 375, 389, 391, 413, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 452, 461, 469, 480, 517, 524], "top_p": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 146, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 267, 325, 326, 337, 405], "higher": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 117, 125, 146, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 375, 384, 405, 417, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "kept": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "repetitionpenalti": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "repetit": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "penalti": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "norepeatngrams": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "ngram": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 97, 135, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 354, 394, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "occur": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "onc": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 210, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 469, 480], "beamsiz": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 163, 164, 168, 169, 172, 176, 214, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 427, 428, 431, 435, 480], "beam": [9, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 163, 164, 168, 169, 172, 176, 221, 267, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 427, 428, 431, 435, 480], "mr": [9, 267], "middl": [9, 191, 196, 267, 450, 455], "langaug": [9, 240, 267, 500], "xx": [9, 23, 56, 118, 119, 127, 165, 169, 170, 172, 267, 280, 314, 317, 376, 377, 386, 423, 428, 429, 431], "do": [9, 10, 88, 115, 125, 138, 164, 187, 193, 208, 210, 267, 268, 346, 373, 384, 397, 422, 446, 452, 467, 469, 520, 524, 528], "convert": [10, 60, 79, 82, 87, 97, 107, 112, 117, 131, 132, 135, 138, 144, 146, 163, 179, 192, 194, 196, 199, 202, 204, 234, 237, 245, 268, 317, 337, 340, 345, 354, 365, 370, 375, 389, 391, 394, 397, 403, 405, 421, 438, 451, 453, 455, 457, 460, 462, 493, 520, 527], "back": [10, 88, 141, 146, 163, 268, 346, 400, 405, 421], "try": [10, 183, 251, 268, 441, 510], "re": [10, 95, 101, 109, 210, 268, 352, 358, 367, 469, 524], "analysi": [10, 28, 44, 50, 103, 104, 120, 156, 157, 179, 219, 236, 257, 268, 285, 302, 308, 360, 362, 378, 415, 416, 438, 477, 496, 517, 525], "york": [10, 143, 202, 268, 402, 460], "jersei": [10, 202, 268, 460], "aren": [10, 202, 268, 460], "t": [10, 17, 18, 23, 27, 32, 36, 49, 56, 88, 92, 99, 110, 128, 144, 155, 157, 160, 161, 162, 174, 193, 202, 210, 221, 268, 274, 275, 280, 284, 289, 293, 307, 314, 346, 349, 356, 368, 387, 403, 414, 416, 418, 419, 420, 433, 452, 460, 469, 480], "far": [10, 146, 166, 202, 268, 405, 424, 460], "apart": [10, 84, 85, 202, 268, 341, 343, 460], "actual": [10, 135, 202, 213, 268, 394, 460, 472], "id": [10, 44, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 87, 118, 122, 146, 147, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 199, 200, 202, 209, 213, 221, 234, 251, 268, 302, 318, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 345, 376, 379, 405, 406, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 457, 458, 460, 468, 472, 480, 493, 510], "defin": [10, 11, 138, 139, 140, 141, 183, 187, 191, 202, 210, 226, 234, 240, 245, 268, 269, 397, 398, 399, 400, 441, 446, 450, 460, 469, 485, 493, 500, 505, 520, 524, 528], "amongst": [10, 202, 268, 460], "thing": [10, 168, 183, 202, 268, 427, 441, 460], "explain_document_dl": [10, 202, 208, 226, 240, 268, 460, 467, 485, 500], "chunktodoc": [10, 268], "chunkconvert": [10, 268], "explainresult": [10, 202, 268, 460], "selectexpr": [10, 11, 28, 51, 63, 66, 67, 78, 79, 80, 84, 85, 86, 87, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 128, 130, 131, 132, 133, 134, 135, 138, 142, 143, 144, 152, 154, 155, 157, 162, 170, 186, 187, 190, 192, 193, 194, 199, 201, 202, 226, 251, 252, 253, 268, 269, 285, 309, 317, 321, 323, 324, 336, 337, 338, 341, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 387, 388, 389, 391, 392, 393, 394, 397, 401, 402, 403, 411, 413, 414, 416, 420, 429, 445, 446, 448, 451, 452, 453, 457, 459, 460, 485, 510, 511, 513, 523, 524, 529], "explod": [10, 11, 28, 51, 63, 84, 85, 86, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 130, 132, 133, 134, 135, 138, 142, 143, 152, 154, 155, 170, 194, 201, 202, 226, 237, 251, 253, 268, 269, 285, 309, 317, 321, 341, 343, 344, 346, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 388, 391, 392, 393, 394, 397, 401, 402, 411, 413, 414, 429, 453, 459, 460, 485, 497, 510, 513, 523, 524, 529], "col": [10, 84, 85, 122, 130, 138, 142, 181, 199, 201, 202, 204, 209, 226, 249, 268, 341, 343, 379, 388, 397, 401, 460, 485, 509, 523], "7": [10, 50, 78, 93, 94, 98, 131, 132, 147, 152, 166, 167, 171, 174, 175, 202, 253, 255, 259, 268, 308, 336, 350, 351, 355, 389, 391, 406, 411, 424, 426, 430, 433, 434, 460, 513, 515, 523], "loc": [10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 123, 138, 139, 140, 202, 208, 226, 240, 251, 268, 273, 279, 283, 288, 292, 298, 301, 306, 313, 316, 381, 397, 398, 399, 460, 467, 485, 500, 510], "22": [10, 202, 251, 268, 460, 510, 523], "part": [11, 96, 125, 128, 151, 152, 160, 161, 162, 167, 186, 196, 199, 221, 237, 238, 253, 257, 269, 347, 353, 384, 387, 410, 411, 418, 419, 420, 426, 445, 455, 457, 480, 513, 530], "tag": [11, 28, 44, 50, 87, 96, 137, 138, 139, 140, 142, 151, 152, 196, 226, 234, 236, 237, 238, 249, 251, 253, 254, 257, 269, 285, 302, 308, 345, 353, 396, 397, 398, 399, 401, 410, 411, 455, 485, 493, 496, 497, 509, 510, 513, 514, 517, 530], "order": [11, 86, 104, 120, 122, 125, 131, 160, 161, 162, 163, 167, 174, 184, 185, 203, 208, 213, 221, 226, 269, 344, 347, 362, 378, 379, 384, 389, 418, 419, 420, 421, 426, 433, 443, 444, 461, 467, 472, 480, 485, 524, 525, 528, 530], "meaning": [11, 186, 269, 445], "phrase": [11, 96, 100, 116, 130, 134, 269, 353, 357, 374, 388, 393], "onto": [11, 226, 269, 485, 525], "pars": [11, 83, 84, 85, 96, 122, 128, 131, 132, 183, 184, 185, 208, 210, 212, 236, 237, 240, 246, 247, 249, 251, 253, 269, 341, 342, 343, 353, 379, 387, 389, 391, 441, 443, 444, 467, 469, 471, 496, 500, 506, 507, 509, 510, 513], "regular": [11, 86, 133, 139, 154, 269, 344, 392, 398, 413], "express": [11, 50, 63, 86, 131, 133, 154, 269, 308, 321, 344, 389, 392, 413], "wrap": [11, 269, 318, 439, 473, 474, 482, 488, 492, 508], "angl": [11, 114, 269, 372], "bracket": [11, 269], "easili": [11, 103, 152, 201, 269, 360, 411, 459, 520], "distinguish": [11, 269], "itself": [11, 125, 172, 179, 196, 211, 269, 347, 384, 431, 438, 455, 470, 525], "form": [11, 28, 44, 50, 117, 122, 128, 130, 131, 133, 134, 155, 157, 184, 185, 196, 201, 234, 251, 252, 269, 285, 302, 308, 375, 379, 387, 388, 389, 392, 393, 414, 416, 443, 444, 455, 459, 493, 510, 511, 524], "peter": [11, 105, 128, 144, 152, 155, 184, 186, 251, 269, 363, 387, 403, 411, 414, 443, 445, 510], "piper": [11, 128, 152, 186, 269, 387, 411, 445], "employe": [11, 128, 152, 186, 269, 387, 411, 445], "pick": [11, 128, 152, 186, 269, 387, 411, 445], "peck": [11, 128, 152, 186, 269, 387, 411, 445], "pickl": [11, 128, 152, 186, 269, 387, 411, 445], "pepper": [11, 128, 152, 186, 269, 387, 411, 445], "nnp": [11, 152, 208, 226, 251, 252, 253, 254, 269, 411, 467, 485, 510, 511, 513, 514, 523, 528, 529, 530], "nn": [11, 86, 152, 251, 252, 253, 254, 269, 344, 411, 510, 511, 513, 514, 530], "vbp": [11, 152, 208, 252, 269, 411, 467, 511, 523, 528, 529], "vbg": [11, 152, 269, 411], "IN": [11, 152, 208, 226, 252, 253, 254, 269, 411, 467, 485, 511, 513, 514, 523, 528, 529], "jj": [11, 152, 208, 226, 251, 253, 269, 411, 467, 485, 510, 513, 523, 528, 529, 530], "enclos": [11, 269], "treat": [11, 183, 196, 269, 441, 455], "group": [11, 92, 160, 161, 162, 167, 171, 177, 193, 236, 237, 269, 349, 418, 419, 420, 426, 430, 436, 452, 496], "so": [11, 17, 18, 23, 28, 36, 49, 50, 56, 88, 125, 138, 146, 155, 169, 210, 211, 234, 269, 274, 275, 280, 285, 293, 307, 308, 314, 346, 347, 384, 397, 405, 414, 428, 469, 470, 493, 520], "here": [11, 128, 210, 226, 269, 387, 469, 485, 524], "specif": [11, 51, 71, 84, 85, 87, 93, 94, 99, 114, 115, 123, 125, 140, 161, 163, 166, 168, 169, 172, 178, 181, 188, 208, 211, 234, 237, 238, 269, 309, 329, 341, 343, 345, 350, 351, 356, 372, 373, 381, 384, 399, 419, 421, 424, 427, 428, 431, 437, 447, 467, 470, 493, 497, 528], "noun": [11, 252, 269, 511], "success": [11, 96, 107, 166, 269, 353, 365, 424], "grammar": [11, 160, 161, 162, 214, 221, 269, 418, 419, 420, 480], "parser": [11, 84, 85, 123, 257, 269, 341, 343, 381, 382], "Of": [11, 91, 196, 269, 348, 455], "postag": [11, 269], "11": [11, 82, 118, 119, 131, 132, 135, 152, 245, 255, 269, 340, 376, 377, 389, 391, 394, 411, 505, 515], "21": [11, 131, 132, 142, 152, 255, 269, 389, 391, 401, 411, 515], "35": [11, 95, 152, 164, 255, 269, 352, 411, 422, 515], "39": [11, 142, 147, 152, 246, 253, 255, 269, 401, 406, 411, 506, 513, 515], "52": [11, 142, 152, 253, 269, 401, 411, 513], "58": [11, 78, 152, 269, 336, 411], "choicesdelimit": [12, 13, 19, 37, 45, 270, 276, 294, 303], "setchoicesdelimit": [12, 13, 19, 37, 45, 270, 276, 294, 303], "coalescesent": [12, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 126, 127, 271, 272, 274, 275, 277, 278, 280, 281, 282, 284, 286, 287, 289, 290, 291, 293, 296, 297, 300, 304, 305, 307, 311, 312, 314, 315, 386], "getclass": [12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 54, 55, 56, 57, 58, 64, 67, 78, 80, 136, 143, 272, 273, 274, 275, 278, 279, 280, 282, 283, 284, 287, 288, 289, 291, 292, 293, 297, 298, 300, 301, 305, 306, 307, 312, 313, 314, 315, 316, 324, 336, 338, 402], "setcoalescesent": [12, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 126, 127, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 386], "maxsentencelength": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 77, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 120, 214, 221, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 328, 329, 330, 331, 332, 333, 334, 335, 348, 350, 351, 352, 353, 355, 356, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 376, 377, 378, 480], "setmaxsentencelength": [12, 18, 48, 49, 56, 90, 100, 116, 214, 221, 275, 306, 307, 314, 357, 374, 480], "dropout": [12, 28, 50, 136, 140, 285, 308, 399], "setdropout": [12, 28, 50, 136, 140, 285, 308, 399, 524], "setshuffleperepoch": [12, 44, 234, 302, 493, 520], "setthreshold": [12, 44, 50, 124, 125, 126, 127, 214, 221, 234, 235, 237, 302, 308, 384, 386, 480, 493, 497, 520], "setverbos": [12, 44, 136, 139, 140, 141, 148, 150, 302, 398, 399, 400, 408], "shuffleperepoch": [12, 44, 302], "threshold": [12, 44, 50, 92, 100, 116, 124, 125, 126, 127, 139, 143, 160, 161, 162, 183, 196, 203, 214, 221, 235, 236, 237, 238, 246, 248, 302, 308, 349, 357, 374, 384, 386, 398, 402, 418, 419, 420, 441, 455, 461, 480, 496, 497, 506, 508], "setthresholdlabel": [12, 50, 126, 127, 308, 386], "thresholdlabel": [12, 50, 126, 127, 308, 386], "classifi": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 67, 78, 125, 201, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 323, 324, 336, 382, 384, 459, 524], "dl": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 127, 140, 141, 143, 184, 185, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 386, 399, 400, 402, 443, 444], "albert": [13, 14, 15, 16, 91, 270, 271, 272, 273, 348], "choic": [13, 19, 37, 45, 110, 111, 133, 168, 171, 270, 276, 294, 303, 368, 369, 392, 427, 430], "linear": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 78, 92, 160, 161, 162, 166, 221, 270, 271, 272, 273, 276, 277, 278, 279, 281, 282, 283, 286, 287, 288, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 310, 311, 312, 313, 315, 316, 336, 349, 418, 419, 420, 424, 480], "layer": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 91, 92, 93, 94, 98, 103, 106, 120, 160, 161, 162, 221, 270, 271, 272, 273, 276, 277, 278, 279, 281, 282, 283, 286, 287, 288, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 310, 311, 312, 313, 315, 316, 348, 349, 350, 351, 355, 360, 364, 378, 418, 419, 420, 480], "pool": [13, 15, 19, 21, 25, 30, 34, 37, 39, 42, 45, 47, 54, 57, 92, 97, 103, 108, 112, 113, 114, 160, 161, 221, 270, 272, 276, 278, 282, 287, 291, 294, 297, 300, 303, 305, 312, 315, 349, 354, 360, 366, 370, 371, 372, 418, 419, 480], "softmax": [13, 15, 17, 18, 19, 21, 23, 25, 27, 32, 34, 36, 37, 39, 42, 45, 47, 49, 54, 56, 57, 98, 100, 116, 183, 221, 270, 272, 274, 275, 276, 278, 280, 282, 284, 289, 291, 293, 294, 297, 300, 303, 305, 307, 312, 314, 315, 355, 357, 374, 441, 480], "rocstori": [13, 19, 37, 45, 270, 276, 294, 303], "swag": [13, 19, 37, 45, 270, 276, 294, 303], "spanclassifi": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 270, 271, 276, 277, 281, 286, 290, 294, 296, 299, 303, 304, 310, 311], "document_quest": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 270, 271, 276, 277, 281, 286, 290, 294, 296, 299, 303, 304, 309, 310, 311], "document_context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 270, 271, 276, 277, 281, 286, 290, 294, 296, 299, 303, 304, 310, 311], "answer": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 84, 85, 86, 93, 94, 103, 120, 143, 163, 164, 166, 171, 179, 208, 210, 257, 270, 271, 276, 277, 281, 286, 290, 294, 296, 299, 303, 304, 309, 310, 311, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 341, 343, 344, 350, 351, 360, 378, 402, 421, 422, 424, 430, 438, 467, 469], "albert_base_uncased_multiple_choic": [13, 270], "allow": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 103, 109, 115, 139, 140, 144, 154, 155, 163, 178, 192, 193, 211, 220, 238, 246, 247, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 360, 367, 373, 398, 399, 403, 413, 414, 421, 437, 451, 452, 470, 479, 498, 506, 507], "faster": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 92, 99, 103, 106, 160, 161, 162, 171, 184, 185, 221, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 349, 356, 360, 364, 418, 419, 420, 430, 443, 444, 480], "requir": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 82, 84, 85, 91, 94, 95, 98, 101, 103, 109, 115, 118, 119, 125, 140, 141, 144, 158, 161, 183, 194, 196, 199, 201, 207, 213, 257, 260, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 338, 340, 341, 343, 347, 348, 351, 352, 355, 358, 360, 367, 373, 376, 377, 384, 399, 400, 403, 417, 419, 441, 453, 455, 457, 459, 465, 472, 517, 523, 524, 525], "8": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 67, 84, 85, 86, 87, 88, 91, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 131, 135, 140, 142, 146, 147, 150, 166, 175, 183, 194, 196, 251, 255, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 324, 341, 343, 344, 345, 346, 348, 350, 351, 352, 353, 355, 356, 358, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 376, 377, 378, 389, 394, 399, 401, 405, 406, 408, 424, 434, 441, 453, 455, 510, 515], "ignor": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 130, 135, 138, 143, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 187, 208, 221, 237, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 376, 377, 378, 388, 394, 397, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 446, 467, 480, 497], "case": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 85, 86, 87, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 122, 127, 130, 134, 141, 144, 164, 167, 174, 183, 184, 187, 193, 199, 221, 251, 252, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 343, 344, 345, 347, 348, 350, 351, 352, 353, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 376, 377, 378, 379, 386, 388, 393, 400, 422, 426, 433, 441, 443, 446, 452, 457, 480, 510, 511, 524], "512": [13, 15, 17, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36, 37, 39, 42, 45, 47, 49, 51, 54, 56, 57, 88, 95, 101, 103, 106, 107, 108, 109, 113, 114, 170, 221, 270, 272, 274, 275, 276, 278, 280, 282, 284, 287, 289, 291, 293, 294, 297, 300, 303, 305, 307, 309, 312, 314, 315, 317, 346, 352, 358, 360, 364, 365, 366, 367, 371, 372, 429, 480], "question": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 84, 85, 93, 94, 103, 110, 111, 120, 143, 152, 163, 164, 166, 171, 179, 208, 257, 270, 271, 276, 277, 281, 286, 290, 294, 296, 299, 303, 304, 309, 310, 311, 322, 326, 328, 329, 330, 331, 332, 333, 334, 335, 341, 343, 350, 351, 360, 368, 369, 378, 402, 411, 421, 422, 424, 430, 438, 467], "context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 69, 70, 92, 93, 94, 100, 103, 109, 116, 120, 146, 158, 160, 161, 162, 167, 175, 177, 183, 193, 221, 237, 270, 271, 276, 277, 281, 286, 290, 294, 296, 299, 303, 304, 310, 311, 326, 328, 349, 350, 351, 357, 360, 367, 374, 378, 405, 417, 418, 419, 420, 426, 434, 436, 441, 452, 480], "questionansw": [13, 19, 20, 37, 45, 270, 276, 277, 294, 303], "eiffel": [13, 19, 37, 45, 270, 276, 294, 303], "tower": [13, 19, 37, 45, 270, 276, 294, 303], "countri": [13, 19, 37, 45, 183, 270, 276, 294, 303, 441], "germani": [13, 19, 37, 45, 270, 276, 294, 303], "franc": [13, 19, 27, 37, 45, 170, 270, 276, 284, 294, 303, 317, 429], "itali": [13, 19, 37, 45, 270, 276, 294, 303], "split": [13, 19, 37, 45, 66, 67, 77, 78, 79, 80, 86, 88, 92, 154, 155, 160, 161, 162, 170, 190, 191, 192, 196, 221, 237, 245, 270, 276, 294, 303, 317, 323, 324, 335, 336, 337, 338, 344, 346, 349, 413, 414, 418, 419, 420, 429, 448, 450, 451, 455, 480, 497, 505], "bert_base_uncased_multiple_choic": [13, 19, 37, 270, 276, 294], "span": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 163, 178, 179, 271, 277, 281, 286, 290, 296, 299, 304, 310, 311, 421, 437, 438], "squad": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 91, 93, 94, 98, 107, 110, 111, 163, 271, 277, 281, 286, 290, 296, 299, 304, 310, 311, 348, 350, 351, 355, 365, 368, 369, 421], "comput": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 67, 78, 80, 81, 91, 98, 99, 104, 115, 141, 166, 170, 171, 172, 181, 185, 196, 208, 271, 277, 281, 286, 290, 296, 299, 304, 310, 311, 317, 324, 336, 338, 339, 348, 355, 356, 362, 373, 400, 424, 429, 430, 431, 439, 444, 455, 467, 528], "logit": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 32, 33, 34, 36, 38, 39, 41, 42, 46, 47, 49, 52, 53, 54, 56, 57, 146, 160, 161, 162, 221, 271, 272, 274, 275, 277, 278, 280, 281, 282, 284, 286, 289, 290, 291, 293, 296, 297, 299, 300, 304, 305, 307, 310, 311, 312, 314, 315, 405, 418, 419, 420, 480], "albert_base_qa_squad2": [14, 271], "128": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 91, 93, 94, 96, 98, 99, 104, 110, 111, 118, 119, 120, 234, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 348, 350, 351, 353, 355, 356, 362, 368, 369, 376, 377, 378, 493, 520], "what": [14, 20, 24, 29, 33, 38, 41, 46, 50, 52, 53, 65, 67, 72, 73, 84, 85, 125, 127, 143, 146, 170, 172, 176, 183, 191, 252, 271, 277, 281, 286, 290, 296, 299, 304, 308, 310, 311, 317, 322, 324, 330, 331, 341, 343, 384, 386, 402, 405, 429, 431, 435, 441, 450, 511, 521], "": [14, 17, 18, 20, 23, 24, 27, 29, 32, 33, 36, 38, 41, 46, 49, 52, 53, 56, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 87, 88, 91, 95, 96, 98, 99, 100, 101, 105, 109, 110, 111, 115, 116, 118, 119, 122, 125, 133, 140, 144, 146, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 191, 192, 193, 196, 198, 202, 208, 210, 221, 226, 232, 234, 249, 259, 260, 271, 274, 275, 277, 280, 281, 284, 286, 289, 290, 293, 296, 299, 304, 307, 310, 311, 314, 317, 318, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 344, 345, 346, 347, 348, 352, 353, 355, 356, 357, 358, 363, 367, 368, 369, 374, 376, 377, 379, 384, 392, 399, 403, 405, 417, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 450, 451, 452, 455, 456, 460, 467, 469, 473, 474, 480, 482, 485, 488, 492, 493, 508, 509, 520, 523, 524, 525, 528], "my": [14, 16, 17, 20, 22, 24, 28, 29, 31, 33, 35, 38, 40, 41, 42, 43, 46, 48, 50, 52, 53, 55, 58, 86, 87, 88, 133, 135, 143, 146, 154, 165, 166, 167, 171, 173, 174, 175, 177, 187, 190, 192, 210, 271, 273, 274, 277, 279, 281, 285, 286, 288, 290, 292, 296, 298, 299, 300, 301, 304, 306, 308, 310, 311, 313, 316, 344, 345, 346, 392, 394, 402, 405, 413, 423, 424, 426, 430, 432, 433, 434, 436, 446, 448, 451, 469, 524], "clara": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 143, 271, 277, 281, 286, 290, 296, 299, 304, 310, 311, 402], "live": [14, 16, 20, 22, 24, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 143, 166, 167, 234, 271, 273, 277, 279, 281, 286, 288, 290, 292, 296, 298, 299, 301, 304, 306, 310, 311, 313, 316, 402, 424, 426, 493, 520], "berkelei": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 173, 174, 175, 177, 271, 277, 281, 286, 290, 296, 299, 304, 310, 311, 432, 433, 434, 436], "instead": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 94, 125, 127, 131, 132, 179, 201, 202, 207, 208, 237, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 351, 384, 386, 389, 391, 438, 459, 460, 465, 467, 528], "per": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 81, 95, 101, 109, 118, 119, 127, 131, 135, 137, 138, 139, 140, 141, 146, 149, 196, 208, 210, 226, 237, 240, 245, 251, 272, 273, 274, 275, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 291, 292, 293, 297, 298, 300, 301, 302, 305, 306, 307, 308, 312, 313, 314, 315, 316, 339, 352, 358, 367, 376, 377, 386, 389, 394, 396, 397, 398, 399, 405, 455, 467, 469, 485, 497, 500, 505, 510], "averag": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 95, 97, 101, 104, 109, 112, 118, 119, 127, 140, 152, 181, 221, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 309, 312, 314, 315, 352, 354, 358, 362, 367, 370, 376, 377, 386, 399, 411, 439, 480], "regress": [15, 21, 25, 30, 34, 39, 42, 47, 54, 57, 163, 179, 272, 278, 282, 287, 291, 297, 300, 305, 312, 315, 421, 438], "multi": [15, 21, 25, 28, 30, 34, 39, 42, 44, 47, 50, 54, 57, 91, 113, 115, 118, 119, 125, 127, 170, 221, 272, 278, 282, 285, 287, 291, 297, 300, 302, 305, 308, 312, 315, 317, 348, 371, 373, 376, 377, 384, 386, 429, 480], "sequenceclassifi": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315], "albert_base_sequence_classifier_imdb": [15, 272], "activ": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 125, 177, 207, 214, 221, 259, 272, 274, 275, 278, 280, 282, 284, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 384, 436, 465, 480], "calcul": [15, 17, 18, 21, 23, 25, 27, 28, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 81, 117, 135, 140, 150, 157, 181, 221, 272, 274, 275, 278, 280, 282, 284, 285, 289, 291, 293, 297, 300, 302, 305, 307, 308, 312, 314, 315, 339, 375, 394, 399, 408, 416, 439, 480], "sigmoid": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 221, 272, 274, 275, 278, 280, 282, 284, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 480], "love": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 94, 111, 119, 155, 158, 272, 275, 278, 280, 285, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 351, 369, 377, 414, 417, 524], "movi": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 158, 165, 272, 275, 278, 280, 285, 287, 289, 291, 293, 297, 305, 307, 308, 312, 314, 315, 417, 423, 524], "child": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 272, 275, 278, 280, 287, 289, 291, 293, 297, 305, 307, 312, 314, 315], "pretti": [15, 18, 21, 23, 30, 32, 34, 36, 39, 44, 47, 49, 54, 56, 57, 125, 272, 275, 278, 280, 287, 289, 291, 293, 297, 302, 305, 307, 312, 314, 315, 384], "bore": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 272, 275, 278, 280, 287, 289, 291, 293, 297, 305, 307, 312, 314, 315], "neg": [15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 113, 157, 158, 181, 221, 234, 272, 275, 278, 280, 282, 287, 289, 291, 293, 297, 305, 307, 308, 312, 314, 315, 371, 416, 417, 439, 480, 493, 520], "limit": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 69, 78, 80, 88, 91, 96, 105, 107, 114, 117, 120, 125, 158, 179, 184, 203, 221, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 324, 326, 336, 338, 346, 348, 353, 363, 365, 372, 375, 378, 384, 438, 443, 461, 480], "almost": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315], "help": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 69, 76, 84, 85, 86, 91, 92, 146, 147, 160, 161, 162, 164, 167, 168, 170, 174, 176, 193, 210, 221, 234, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 317, 326, 334, 341, 343, 344, 348, 349, 405, 406, 418, 419, 420, 422, 426, 427, 429, 433, 435, 452, 469, 480, 493, 520, 525, 529], "feed": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315], "entir": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 95, 108, 113, 114, 170, 175, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 305, 307, 312, 314, 315, 317, 324, 352, 366, 371, 372, 429, 434], "one": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 44, 47, 49, 54, 56, 57, 63, 67, 78, 79, 80, 81, 84, 85, 87, 93, 94, 102, 107, 112, 118, 119, 120, 125, 127, 131, 133, 138, 141, 146, 155, 162, 175, 184, 190, 210, 213, 221, 236, 237, 249, 272, 274, 275, 278, 280, 282, 284, 287, 289, 291, 293, 297, 300, 302, 305, 307, 312, 314, 315, 321, 324, 336, 337, 338, 339, 341, 343, 345, 350, 351, 359, 365, 370, 376, 377, 378, 384, 386, 389, 392, 397, 400, 405, 414, 420, 434, 443, 448, 469, 472, 480, 496, 497, 509, 520, 524], "token_classifi": [16, 26, 40, 43, 48, 55, 58, 273, 283, 298, 301, 306, 313, 316], "albert_base_token_classifier_conll03": [16, 273], "tokenclassifi": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 273, 279, 283, 288, 292, 298, 301, 306, 313, 316], "john": [16, 22, 31, 35, 40, 43, 48, 55, 58, 63, 94, 111, 119, 122, 123, 142, 144, 155, 204, 249, 255, 273, 279, 288, 292, 298, 301, 306, 313, 316, 321, 351, 369, 377, 379, 381, 401, 403, 414, 462, 509, 515], "lenon": [16, 22, 31, 35, 40, 43, 48, 55, 58, 273, 279, 288, 292, 298, 301, 306, 313, 316], "born": [16, 22, 31, 35, 40, 43, 48, 55, 58, 166, 167, 273, 279, 288, 292, 298, 301, 306, 313, 316, 424, 426], "london": [16, 22, 31, 35, 40, 43, 48, 55, 58, 273, 279, 288, 292, 298, 301, 306, 313, 316], "pari": [16, 22, 31, 35, 40, 43, 48, 55, 58, 143, 273, 279, 288, 292, 298, 301, 306, 313, 316, 402], "sarah": [16, 22, 31, 35, 40, 43, 48, 55, 58, 273, 279, 288, 292, 298, 301, 306, 313, 316], "o": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 138, 139, 140, 142, 208, 226, 240, 251, 254, 273, 279, 283, 288, 292, 298, 301, 306, 313, 316, 397, 398, 399, 401, 467, 485, 500, 510, 514, 530], "modelforsequenceclassif": [17, 18, 23, 27, 32, 36, 49, 56, 274, 275, 280, 284, 289, 293, 307, 314], "nli": [17, 18, 23, 27, 32, 36, 49, 56, 274, 275, 280, 284, 289, 293, 307, 314], "natur": [17, 18, 23, 27, 32, 36, 49, 50, 56, 80, 91, 92, 93, 94, 96, 98, 99, 100, 107, 115, 116, 120, 127, 163, 166, 171, 177, 179, 199, 209, 213, 274, 275, 280, 284, 289, 293, 307, 308, 314, 338, 348, 349, 350, 351, 353, 355, 356, 357, 365, 373, 374, 378, 386, 421, 424, 430, 436, 438, 457, 468, 472], "don": [17, 18, 23, 27, 32, 36, 49, 56, 99, 110, 144, 221, 274, 275, 280, 284, 289, 293, 307, 314, 356, 368, 403, 480], "hardcod": [17, 18, 23, 27, 32, 36, 49, 56, 274, 275, 280, 284, 289, 293, 307, 314], "potenti": [17, 18, 23, 27, 32, 36, 49, 56, 78, 165, 169, 173, 175, 183, 274, 275, 280, 284, 289, 293, 307, 314, 336, 423, 428, 432, 434, 441], "thei": [17, 18, 23, 27, 32, 36, 49, 51, 56, 84, 85, 86, 140, 144, 146, 162, 166, 211, 252, 274, 275, 280, 284, 289, 293, 307, 309, 314, 341, 343, 344, 399, 403, 405, 420, 424, 470, 488, 508, 511, 524], "chosen": [17, 18, 23, 27, 32, 36, 49, 56, 84, 85, 140, 146, 274, 275, 280, 284, 289, 293, 307, 314, 341, 343, 399, 405], "runtim": [17, 18, 23, 27, 32, 36, 49, 56, 274, 275, 280, 284, 289, 293, 307, 314], "usual": [17, 18, 23, 27, 32, 36, 49, 56, 80, 213, 241, 274, 275, 280, 284, 289, 293, 307, 314, 338, 472, 501], "slower": [17, 18, 23, 27, 32, 36, 49, 56, 274, 275, 280, 284, 289, 293, 307, 314], "flexibl": [17, 18, 23, 27, 32, 36, 49, 56, 66, 71, 78, 274, 275, 280, 284, 289, 293, 307, 314, 323, 329, 336], "loop": [17, 18, 23, 36, 49, 56, 210, 274, 275, 280, 293, 307, 314, 469], "through": [17, 18, 23, 36, 49, 56, 91, 107, 123, 125, 135, 169, 172, 174, 204, 274, 275, 280, 293, 307, 314, 348, 365, 381, 384, 428, 431, 433, 462, 525], "longer": [17, 18, 23, 36, 49, 56, 91, 100, 105, 116, 127, 167, 170, 171, 274, 275, 280, 293, 307, 314, 317, 348, 357, 363, 374, 386, 426, 429, 430, 529], "pass": [17, 18, 23, 27, 32, 36, 49, 56, 146, 210, 274, 275, 280, 284, 289, 293, 307, 314, 347, 405, 469], "pose": [17, 18, 23, 27, 32, 36, 49, 56, 274, 275, 280, 284, 289, 293, 307, 314], "premis": [17, 18, 23, 27, 32, 36, 49, 56, 274, 275, 280, 284, 289, 293, 307, 314], "hypothesi": [17, 18, 23, 27, 32, 36, 49, 56, 274, 275, 280, 284, 289, 293, 307, 314], "pair": [17, 18, 23, 27, 32, 36, 49, 56, 66, 101, 102, 109, 113, 123, 169, 234, 274, 275, 280, 284, 289, 293, 307, 314, 323, 358, 359, 367, 371, 381, 428, 493], "albert_base_zero_shot_classifier_onnx": [17, 274], "iphon": [17, 274], "resolv": [17, 274], "asap": [17, 274], "urgent": [17, 274], "albert_zero_shot_classifier_onnx": [17, 274], "bart": [17, 18, 163, 274, 275, 421], "bartforsequenceclassif": [18, 275], "bart_large_zero_shot_classifier_mnli": [18, 275], "bert_base_cased_qa_squad2": [20, 277], "bert_base_sequence_classifier_imdb": [21, 278], "bert_base_token_classifier_conll03": [22, 279], "bert_zero_shot_classifier_mnli": [23, 280], "camembert": [24, 25, 26, 96, 281, 282, 283, 353], "camembert_base_qa_fquad": [24, 281], "fr": [24, 25, 27, 96, 127, 169, 172, 281, 282, 284, 353, 386, 428, 431], "sequence_classifi": [25, 282], "camembert_base_sequence_classifier_allocin": [25, 282], "j": [25, 122, 282, 379], "ai": [25, 146, 147, 163, 168, 234, 282, 405, 406, 421, 427, 493, 520], "ador\u00e9": [25, 282], "ce": [25, 282], "film": [25, 282], "lorsqu": [25, 282], "\u00e9tai": [25, 282], "enfant": [25, 282], "je": [25, 282], "d\u00e9test": [25, 282], "\u00e7a": [25, 282], "camembert_base_token_classifier_wikin": [26, 283], "georg": [26, 283], "washington": [26, 283], "est": [26, 96, 127, 170, 283, 317, 353, 386, 429], "all\u00e9": [26, 283], "\u00e0": [26, 283], "camembert_zero_shot_classifier_xnli_onnx": [27, 284], "multi_class": [27, 284], "setcandidatelabel": [27, 66, 214, 221, 284, 323, 480], "sport": [27, 284], "politiqu": [27, 284], "scienc": [27, 104, 125, 173, 178, 284, 362, 384, 432, 437, 521], "l": [27, 71, 237, 245, 284, 329, 497], "\u00e9quip": [27, 284], "de": [27, 80, 96, 125, 127, 170, 284, 317, 338, 353, 384, 386, 429], "joue": [27, 284], "aujourd": [27, 284], "hui": [27, 284], "au": [27, 284], "parc": [27, 284], "princ": [27, 284], "classifierdl": [28, 285, 524], "univers": [28, 84, 85, 102, 114, 115, 165, 170, 172, 173, 174, 175, 177, 285, 317, 341, 343, 359, 372, 373, 423, 429, 431, 432, 433, 434, 436], "deep": [28, 93, 94, 103, 106, 125, 139, 155, 183, 221, 285, 350, 351, 360, 364, 384, 398, 414, 441, 480], "dnn": [28, 285], "built": [28, 44, 69, 165, 177, 209, 259, 285, 302, 326, 423, 436, 468], "insid": [28, 44, 138, 152, 193, 251, 285, 302, 397, 411, 452, 510], "instanti": [28, 44, 50, 84, 85, 100, 116, 117, 122, 128, 130, 133, 134, 139, 140, 144, 152, 155, 157, 158, 181, 183, 184, 185, 190, 191, 196, 249, 251, 252, 285, 302, 308, 341, 343, 347, 357, 374, 375, 379, 387, 388, 392, 393, 398, 399, 403, 411, 414, 416, 417, 439, 441, 443, 444, 448, 450, 455, 509, 510, 511], "dataset": [28, 44, 50, 84, 85, 95, 96, 100, 101, 104, 105, 107, 110, 111, 113, 114, 116, 117, 125, 127, 139, 140, 141, 150, 155, 166, 168, 169, 172, 173, 175, 178, 183, 196, 232, 238, 240, 251, 252, 253, 254, 260, 285, 302, 308, 341, 343, 352, 353, 357, 358, 362, 363, 365, 368, 369, 371, 372, 374, 375, 384, 386, 398, 399, 400, 408, 414, 424, 427, 428, 431, 432, 434, 437, 441, 455, 492, 498, 500, 510, 511, 513, 514, 527], "monitor": [28, 44, 50, 140, 146, 147, 233, 234, 285, 302, 308, 399, 405, 406, 493, 520], "metric": [28, 44, 50, 140, 185, 234, 285, 302, 308, 399, 444, 493], "done": [28, 44, 50, 110, 111, 139, 140, 141, 285, 302, 308, 368, 369, 398, 399, 400, 525], "settestdataset": [28, 44, 50, 140, 148, 150, 285, 302, 308, 399, 408], "method": [28, 44, 50, 91, 92, 95, 99, 100, 104, 107, 116, 120, 125, 140, 160, 161, 162, 181, 221, 241, 285, 302, 308, 347, 348, 349, 352, 356, 357, 362, 365, 374, 378, 384, 399, 418, 419, 420, 439, 480, 501, 519], "expect": [28, 44, 50, 95, 101, 109, 120, 140, 162, 193, 210, 226, 247, 258, 285, 302, 308, 352, 358, 367, 378, 399, 420, 452, 469, 485, 507, 518], "path": [28, 44, 50, 65, 68, 70, 71, 72, 73, 74, 75, 76, 77, 81, 84, 85, 100, 116, 117, 122, 123, 128, 130, 133, 134, 139, 140, 141, 143, 144, 150, 155, 157, 160, 161, 162, 166, 183, 184, 185, 188, 193, 207, 208, 224, 225, 234, 236, 237, 238, 240, 245, 249, 251, 252, 253, 254, 257, 285, 302, 308, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 339, 341, 343, 357, 374, 375, 379, 381, 387, 388, 392, 393, 398, 399, 400, 402, 403, 408, 414, 416, 418, 419, 420, 424, 441, 443, 444, 447, 452, 465, 467, 483, 484, 493, 496, 497, 500, 505, 509, 510, 511, 513, 514, 517, 520], "parquet": [28, 44, 50, 81, 140, 150, 198, 285, 302, 308, 339, 399, 408, 456], "datafram": [28, 44, 50, 81, 100, 116, 117, 140, 150, 152, 181, 196, 207, 208, 221, 222, 226, 232, 234, 236, 237, 238, 240, 246, 247, 249, 251, 252, 253, 254, 258, 285, 302, 308, 339, 357, 374, 375, 399, 408, 411, 439, 455, 465, 467, 480, 481, 485, 492, 493, 496, 500, 506, 507, 509, 510, 511, 513, 514, 518, 520, 524, 528, 530], "ha": [28, 44, 50, 51, 66, 67, 78, 79, 80, 86, 87, 88, 91, 98, 99, 103, 110, 111, 114, 117, 125, 128, 133, 140, 150, 155, 157, 162, 163, 164, 172, 173, 175, 179, 184, 185, 196, 198, 199, 207, 208, 221, 234, 241, 253, 285, 302, 308, 309, 323, 324, 336, 337, 338, 344, 345, 346, 348, 355, 356, 360, 368, 369, 372, 375, 384, 387, 392, 399, 408, 414, 416, 420, 421, 422, 431, 432, 434, 438, 443, 444, 455, 456, 457, 465, 467, 480, 493, 501, 513, 520, 524, 525], "same": [28, 44, 50, 63, 69, 91, 107, 110, 117, 118, 122, 123, 140, 146, 150, 160, 161, 165, 174, 175, 179, 181, 211, 234, 285, 302, 308, 321, 326, 348, 365, 368, 375, 376, 379, 381, 399, 405, 408, 418, 419, 423, 433, 434, 438, 439, 470, 493, 525], "also": [28, 44, 50, 66, 67, 71, 73, 76, 77, 78, 79, 80, 81, 87, 91, 95, 102, 103, 105, 106, 117, 118, 119, 122, 123, 125, 131, 133, 138, 139, 140, 150, 155, 158, 160, 163, 165, 171, 175, 178, 187, 208, 212, 249, 259, 285, 302, 308, 323, 324, 329, 331, 334, 335, 336, 337, 338, 339, 345, 348, 352, 359, 360, 363, 364, 375, 376, 377, 379, 381, 384, 389, 392, 397, 398, 399, 407, 408, 414, 417, 418, 421, 423, 430, 434, 437, 446, 467, 471, 475, 480, 491, 497, 509, 520, 524, 525, 526, 527, 529], "follow": [28, 44, 50, 63, 76, 82, 87, 103, 105, 113, 117, 125, 131, 132, 133, 138, 140, 144, 154, 171, 175, 194, 210, 212, 237, 238, 285, 302, 308, 321, 334, 340, 345, 360, 363, 371, 375, 384, 389, 391, 392, 397, 399, 403, 413, 430, 434, 453, 469, 471, 497, 520, 522, 525], "preprocessingpipelin": [28, 44, 50, 140, 150, 285, 302, 308, 399, 408], "randomsplit": [28, 44, 50, 140, 150, 285, 302, 308, 399, 408], "write": [28, 44, 50, 117, 140, 146, 150, 165, 178, 184, 185, 285, 302, 308, 375, 399, 405, 408, 423, 437, 443, 444, 525], "overwrit": [28, 44, 50, 140, 142, 150, 234, 285, 302, 308, 399, 401, 408, 493], "test_data": [28, 44, 50, 140, 150, 285, 302, 308, 399, 408], "usag": [28, 44, 50, 63, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 99, 103, 110, 115, 117, 118, 120, 122, 125, 127, 128, 131, 132, 133, 134, 139, 140, 141, 144, 152, 154, 155, 157, 158, 160, 161, 162, 163, 170, 179, 181, 183, 184, 186, 187, 191, 193, 196, 203, 285, 302, 308, 317, 321, 341, 343, 344, 345, 346, 348, 349, 350, 351, 353, 354, 356, 360, 368, 373, 375, 376, 378, 379, 384, 386, 387, 389, 391, 392, 393, 398, 399, 400, 403, 411, 413, 414, 416, 417, 418, 419, 420, 421, 429, 438, 439, 441, 443, 445, 446, 450, 452, 455, 461], "64": [28, 44, 50, 91, 140, 149, 285, 302, 308, 348, 399, 407, 524], "coeffici": [28, 50, 139, 140, 285, 308, 398, 399], "5": [28, 44, 50, 63, 70, 78, 81, 86, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 131, 132, 135, 138, 140, 146, 147, 152, 158, 166, 174, 175, 177, 196, 201, 208, 221, 226, 234, 240, 252, 253, 254, 255, 285, 302, 308, 321, 328, 336, 339, 344, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 384, 386, 389, 391, 394, 397, 399, 405, 406, 411, 424, 433, 434, 436, 455, 459, 467, 480, 485, 493, 500, 511, 513, 514, 515, 520, 523, 524, 530], "enableoutputlog": [28, 44, 50, 140, 148, 150, 285, 302, 308, 399, 408], "stdout": [28, 44, 50, 140, 150, 285, 302, 308, 399, 408], "addit": [28, 44, 50, 81, 84, 85, 93, 94, 122, 139, 140, 141, 146, 150, 154, 162, 166, 178, 193, 234, 285, 302, 308, 339, 341, 343, 347, 350, 351, 379, 398, 399, 400, 405, 408, 413, 420, 424, 437, 452, 493, 523, 524], "evaluationlogextend": [28, 44, 50, 140, 148, 150, 285, 302, 308, 399, 408], "valid": [28, 44, 50, 131, 140, 150, 155, 183, 285, 302, 308, 389, 399, 408, 414, 441, 520], "displai": [28, 44, 50, 150, 166, 234, 285, 302, 308, 408, 424, 493, 520], "lr": [28, 44, 50, 136, 140, 148, 149, 196, 285, 302, 308, 399, 407, 455], "rate": [28, 44, 50, 71, 82, 100, 110, 111, 116, 117, 140, 149, 160, 161, 162, 181, 183, 221, 285, 302, 308, 329, 340, 357, 368, 369, 374, 375, 399, 407, 418, 419, 420, 439, 441, 480], "005": [28, 50, 140, 149, 285, 308, 399, 407], "maxepoch": [28, 44, 50, 136, 137, 139, 140, 148, 149, 285, 302, 308, 396, 398, 399, 407], "epoch": [28, 44, 50, 137, 139, 140, 149, 150, 155, 182, 183, 234, 285, 302, 308, 396, 398, 399, 407, 408, 414, 441, 493], "30": [28, 50, 125, 131, 132, 138, 149, 170, 208, 226, 240, 255, 285, 308, 317, 384, 389, 391, 397, 407, 429, 467, 485, 500, 515, 523], "outputlogspath": [28, 44, 50, 140, 148, 150, 153, 155, 285, 302, 308, 399, 408, 414], "randomse": [28, 44, 50, 136, 137, 139, 140, 148, 149, 285, 302, 308, 396, 398, 399, 407], "random": [28, 44, 50, 100, 116, 137, 139, 140, 146, 149, 170, 181, 201, 285, 302, 308, 357, 374, 396, 398, 399, 405, 407, 429, 439, 459], "seed": [28, 44, 50, 90, 100, 116, 137, 139, 140, 149, 160, 161, 162, 170, 214, 221, 285, 302, 308, 357, 374, 396, 398, 399, 407, 418, 419, 420, 429, 480], "shuffl": [28, 44, 137, 149, 163, 285, 302, 396, 407, 421], "testdataset": [28, 44, 50, 140, 148, 150, 234, 285, 302, 308, 399, 408, 493, 520], "statist": [28, 44, 50, 117, 125, 140, 150, 285, 302, 308, 375, 384, 399, 408], "validationsplit": [28, 44, 50, 140, 148, 150, 153, 155, 285, 302, 308, 399, 408, 414], "choos": [28, 44, 50, 97, 112, 140, 146, 150, 155, 184, 221, 285, 302, 308, 354, 370, 399, 405, 414, 443], "proport": [28, 44, 50, 140, 150, 155, 158, 285, 302, 308, 399, 408, 414], "against": [28, 44, 50, 122, 125, 130, 134, 140, 150, 155, 161, 174, 175, 211, 285, 302, 308, 379, 384, 388, 393, 399, 408, 414, 419, 433, 434, 470], "between": [28, 44, 50, 71, 78, 84, 85, 86, 88, 102, 107, 110, 111, 115, 118, 119, 120, 123, 140, 146, 150, 154, 155, 169, 171, 172, 183, 221, 237, 285, 302, 308, 329, 336, 341, 343, 344, 346, 359, 365, 368, 369, 373, 376, 377, 378, 381, 399, 405, 408, 413, 414, 428, 430, 431, 441, 480], "off": [28, 44, 50, 115, 118, 119, 140, 150, 155, 173, 285, 302, 308, 373, 376, 377, 399, 408, 414, 432], "verbos": [28, 44, 50, 136, 139, 140, 148, 150, 221, 285, 302, 308, 398, 399, 408, 480], "accept": [28, 44, 50, 77, 146, 236, 238, 285, 302, 308, 335, 405, 496, 498], "singl": [28, 44, 50, 71, 101, 102, 104, 117, 123, 125, 163, 169, 181, 190, 191, 193, 210, 221, 237, 245, 246, 251, 285, 302, 308, 329, 347, 358, 359, 362, 375, 381, 384, 421, 428, 439, 448, 450, 452, 469, 480, 497, 505, 506, 510], "item": [28, 50, 117, 146, 210, 234, 251, 285, 308, 375, 405, 469, 493, 510, 520], "doubl": [28, 50, 157, 198, 203, 212, 285, 308, 456, 461, 471], "In": [28, 44, 50, 67, 80, 88, 96, 98, 99, 105, 107, 109, 117, 120, 122, 125, 127, 128, 130, 133, 134, 141, 154, 155, 157, 162, 163, 166, 167, 169, 171, 172, 174, 177, 178, 179, 184, 185, 196, 234, 237, 238, 253, 285, 302, 308, 324, 338, 346, 353, 355, 356, 363, 365, 367, 375, 378, 379, 384, 386, 387, 388, 392, 393, 400, 413, 414, 416, 420, 421, 424, 426, 428, 430, 431, 433, 436, 437, 438, 443, 444, 455, 493, 513, 520, 524, 525, 529, 530], "csv": [28, 50, 81, 122, 150, 212, 243, 249, 285, 308, 339, 379, 408, 471, 509, 524], "best": [28, 50, 91, 96, 101, 104, 110, 111, 125, 127, 140, 146, 163, 165, 169, 178, 210, 285, 308, 348, 353, 358, 362, 368, 369, 384, 386, 399, 405, 421, 423, 428, 437, 469, 524], "wach": [28, 285, 524], "ever": [28, 50, 87, 285, 308, 345, 524], "opinion": [28, 50, 285, 308, 524], "win": [28, 50, 285, 308, 524], "award": [28, 50, 285, 308, 524], "terribl": [28, 50, 285, 308, 524], "act": [28, 50, 141, 217, 285, 308, 400, 524], "bad": [28, 50, 157, 234, 285, 308, 416, 493, 520, 524], "realli": [28, 50, 146, 158, 285, 308, 405, 417, 524], "Then": [28, 44, 139, 140, 169, 172, 213, 234, 259, 285, 302, 398, 399, 428, 431, 472, 493, 524], "trane": [28, 285], "smallcorpu": [28, 50, 285, 308, 524], "header": [28, 50, 51, 81, 210, 212, 236, 237, 238, 249, 285, 308, 309, 339, 469, 471, 496, 497, 498, 509, 524], "src": [28, 50, 66, 67, 78, 79, 80, 84, 85, 117, 128, 130, 133, 134, 139, 140, 141, 152, 162, 171, 184, 185, 190, 196, 251, 252, 253, 254, 255, 285, 308, 323, 324, 336, 337, 338, 341, 343, 375, 387, 388, 392, 393, 398, 399, 400, 411, 420, 430, 443, 444, 448, 455, 510, 511, 513, 514, 515, 524, 530], "useembed": [28, 44, 50, 115, 285, 302, 308, 373, 524], "docclassifi": [28, 44, 50, 285, 302, 308, 524], "setbatchs": [28, 44, 50, 64, 68, 90, 92, 103, 136, 140, 148, 149, 160, 161, 162, 182, 183, 214, 221, 234, 285, 302, 308, 325, 349, 360, 399, 407, 418, 419, 420, 441, 480, 493, 520, 524], "setmaxepoch": [28, 44, 50, 136, 137, 139, 140, 141, 148, 149, 234, 285, 302, 308, 396, 398, 399, 400, 407, 493, 520, 524], "20": [28, 42, 51, 67, 69, 77, 86, 120, 138, 160, 163, 165, 166, 167, 169, 171, 172, 173, 174, 175, 177, 178, 208, 212, 226, 240, 285, 300, 309, 324, 326, 335, 344, 378, 397, 418, 421, 423, 424, 426, 428, 430, 431, 432, 433, 434, 436, 437, 467, 471, 485, 500, 524], "setlr": [28, 44, 50, 136, 140, 148, 149, 234, 285, 302, 308, 399, 407, 493, 520, 524], "5e": [28, 50, 285, 308, 524], "pipelinemodel": [28, 42, 44, 50, 84, 85, 87, 100, 116, 139, 140, 141, 158, 183, 184, 185, 196, 208, 211, 234, 238, 241, 285, 300, 302, 308, 341, 343, 345, 357, 374, 398, 399, 400, 417, 441, 443, 444, 455, 467, 470, 493, 498, 501, 524, 527], "v": [28, 44, 50, 82, 98, 102, 107, 117, 125, 127, 130, 140, 149, 150, 165, 185, 221, 226, 285, 302, 308, 340, 355, 359, 365, 375, 384, 386, 388, 399, 407, 408, 423, 444, 480, 485], "your": [28, 44, 50, 84, 88, 92, 99, 100, 110, 112, 116, 128, 130, 133, 134, 138, 139, 140, 144, 146, 147, 152, 157, 158, 160, 161, 162, 183, 184, 190, 191, 196, 201, 238, 246, 247, 259, 260, 285, 302, 308, 341, 346, 349, 356, 357, 368, 370, 374, 387, 388, 392, 393, 397, 398, 399, 403, 405, 406, 411, 416, 417, 418, 419, 420, 441, 443, 448, 450, 455, 459, 498, 506, 507, 522, 524, 527, 528, 530], "own": [28, 44, 50, 84, 100, 116, 128, 130, 133, 134, 139, 140, 144, 152, 157, 158, 183, 184, 190, 191, 196, 260, 285, 302, 308, 341, 347, 357, 374, 387, 388, 392, 393, 398, 399, 403, 411, 416, 417, 441, 443, 448, 450, 455, 527, 528, 530], "classifierdl_use_trec6": [28, 285, 524], "trec": [28, 285], "sarcasmdl": [28, 285, 524], "classifierdl_use_sarcasm": [28, 285, 524], "sarcasm": [28, 285, 524], "m": [28, 88, 131, 132, 164, 249, 255, 285, 346, 389, 391, 422, 509, 515, 524], "readi": [28, 240, 259, 285, 500, 524], "could": [28, 99, 125, 133, 150, 183, 285, 356, 384, 392, 408, 441, 523, 524, 525], "put": [28, 210, 226, 285, 469, 485, 524], "word": [28, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 84, 85, 91, 97, 98, 100, 102, 103, 110, 112, 115, 116, 117, 120, 122, 123, 125, 128, 135, 138, 142, 143, 144, 152, 157, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 191, 193, 195, 196, 208, 226, 236, 237, 238, 240, 246, 249, 253, 254, 257, 285, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 341, 343, 348, 354, 355, 357, 359, 360, 368, 370, 373, 374, 375, 378, 379, 381, 384, 387, 394, 397, 401, 402, 403, 411, 416, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 450, 452, 454, 455, 467, 485, 496, 498, 500, 506, 509, 513, 514, 523, 524], "wake": [28, 285, 524], "am": [28, 86, 131, 132, 160, 165, 166, 167, 168, 173, 174, 175, 177, 190, 285, 344, 389, 391, 418, 423, 424, 426, 427, 432, 433, 434, 436, 448, 524], "mondai": [28, 285, 524], "arrays_zip": [28, 84, 85, 125, 285, 341, 343, 384, 524], "out": [28, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 92, 95, 101, 109, 125, 128, 144, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 186, 187, 285, 326, 328, 329, 330, 331, 332, 333, 334, 335, 339, 349, 352, 358, 367, 384, 387, 403, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 445, 446, 524], "deberta": [29, 30, 31, 32, 98, 286, 287, 288, 289, 355], "deberta_v3_xsmall_qa_squad2": [29, 286], "v2": [30, 31, 93, 94, 98, 178, 287, 288, 350, 351, 355, 437], "v3": [30, 31, 287, 288], "deberta_v3_xsmall_sequence_classifier_imdb": [30, 287], "deberta_base_sequence_classifier_imdb": [30, 287], "deberta_v3_xsmall_token_classifier_conll03": [31, 288], "deberta_base_zero_shot_classifier_mnli_anli_v3": [32, 289], "distilbert": [33, 34, 36, 37, 99, 290, 291, 293, 294, 356], "distilbert_base_cased_qa_squad2": [33, 290], "distilbert_base_sequence_classifier_imdb": [34, 291], "distilbert_base_token_classifier_conll03": [35, 292], "distilbert_base_zero_shot_classifier_uncased_mnli": [36, 293], "distilbert_base_uncased_multiple_choic": [37, 294], "longform": [38, 39, 40, 105, 296, 297, 298, 363], "longformer_base_base_qa_squad2": [38, 296], "longformer_base_sequence_classifier_imdb": [39, 297], "4096": [39, 69, 70, 91, 105, 162, 221, 297, 326, 328, 348, 363, 420, 480], "xlnet_base_token_classifier_conll03": [40, 58, 298, 316], "longformer_base_token_classifier_conll03": [40, 298], "mpnet": [41, 42, 107, 299, 300, 365], "mpnet_base_question_answering_squad2": [41, 299], "mpnet_sequence_classifier_ukr_messag": [42, 300], "drive": [42, 300], "car": [42, 300], "bu": [42, 300], "arriv": [42, 300], "minut": [42, 44, 300, 302], "pineappl": [42, 300], "pizza": [42, 300], "worst": [42, 300], "transport": [42, 300], "movement": [42, 300], "food": [42, 146, 147, 161, 162, 203, 300, 405, 406, 419, 420, 461], "mpnet_base_sequence_classifier_imdb": [42, 300], "xlm": [43, 52, 53, 54, 55, 118, 119, 301, 310, 311, 312, 313, 376, 377], "roberta": [43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 79, 96, 98, 105, 107, 110, 111, 118, 119, 143, 163, 301, 303, 304, 305, 306, 307, 310, 311, 312, 313, 337, 353, 355, 363, 365, 368, 369, 376, 377, 402, 421], "mpnet_base_token_classifi": [43, 55, 301, 313], "multiclassifierdl": [44, 302], "bidirect": [44, 93, 94, 103, 120, 163, 302, 350, 351, 360, 378, 421], "gru": [44, 302], "convolut": [44, 67, 80, 302, 324, 338], "machin": [44, 67, 86, 88, 100, 116, 125, 139, 163, 166, 169, 170, 172, 179, 234, 302, 317, 324, 344, 346, 357, 374, 384, 398, 421, 424, 428, 429, 431, 438, 493, 522], "strongli": [44, 302], "relat": [44, 84, 85, 123, 302, 341, 343, 381, 529], "variant": [44, 82, 105, 115, 175, 302, 340, 363, 373, 434], "mai": [44, 88, 92, 146, 160, 161, 162, 167, 169, 174, 199, 221, 249, 302, 346, 347, 349, 405, 418, 419, 420, 426, 428, 433, 457, 480, 509, 523, 524, 525, 528, 529], "multiclass": [44, 221, 302], "categor": [44, 241, 302, 501], "precis": [44, 84, 85, 88, 221, 302, 341, 343, 346, 480], "constraint": [44, 302], "mani": [44, 73, 98, 110, 111, 125, 146, 163, 165, 166, 167, 169, 170, 172, 179, 196, 246, 247, 302, 317, 331, 347, 355, 368, 369, 384, 405, 421, 423, 424, 426, 428, 429, 431, 438, 455, 506, 507], "formal": [44, 302], "find": [44, 84, 85, 109, 110, 111, 114, 115, 122, 123, 128, 131, 163, 166, 178, 302, 341, 343, 367, 368, 369, 372, 373, 379, 381, 387, 389, 421, 424, 437], "x": [44, 71, 226, 251, 259, 302, 329, 485, 510, 530], "binari": [44, 207, 214, 222, 234, 245, 247, 249, 302, 465, 481, 493, 505, 507, 509], "y": [44, 88, 259, 302, 346], "multiclassifi": [44, 234, 302, 493, 520], "001": [44, 82, 139, 140, 302, 340, 398, 399], "10": [44, 63, 68, 84, 88, 95, 125, 131, 132, 142, 146, 164, 169, 181, 184, 234, 255, 302, 321, 325, 341, 346, 352, 384, 389, 391, 401, 405, 422, 428, 439, 443, 493, 515, 523], "44": [44, 100, 116, 152, 172, 302, 357, 374, 411, 431], "ed58abb40640f983": [44, 302], "pn": [44, 302], "newsyou": [44, 302], "toxic": [44, 172, 174, 302, 431, 433], "a1237f726b5f5d89": [44, 302], "dude": [44, 302], "place": [44, 80, 162, 210, 302, 338, 347, 420, 469], "obscen": [44, 302], "insult": [44, 302], "24b0d6c8733c2abe": [44, 302], "thank": [44, 120, 125, 164, 255, 302, 378, 384, 422, 515], "8c4478fb239bcfc0": [44, 302], "gee": [44, 302], "traindataset": [44, 234, 302, 493, 520], "printschema": [44, 198, 200, 207, 209, 236, 245, 249, 302, 456, 458, 465, 468, 496, 505, 509], "root": [44, 63, 84, 85, 123, 198, 200, 207, 209, 236, 245, 247, 249, 252, 302, 321, 341, 343, 381, 456, 458, 465, 468, 496, 505, 507, 509, 511], "setcleanupmod": [44, 197, 200, 209, 302, 458, 468], "shrink": [44, 200, 209, 302, 458, 468], "1e": [44, 234, 302, 493, 520], "setvalidationsplit": [44, 148, 150, 153, 155, 302, 408, 414], "multiclassifierdl_use_tox": [44, 302], "comment": [44, 125, 302, 384], "jigsaw": [44, 302], "good": [44, 96, 99, 115, 158, 302, 353, 356, 373, 417], "stuff": [44, 302], "wtf": [44, 302], "kind": [44, 125, 131, 132, 302, 384, 389, 391], "crap": [44, 302], "roberta_base_uncased_multiple_choic": [45, 303], "roberta_base_qa_squad2": [46, 143, 304, 402], "roberta_base_sequence_classifier_imdb": [47, 305], "roberta_base_token_classifier_conll03": [48, 306], "roberta_base_zero_shot_classifier_nli": [49, 307], "sentimentdl": [50, 308], "affect": [50, 193, 221, 308, 452, 480], "subject": [50, 84, 85, 308, 341, 343], "view": [50, 308], "product": [50, 173, 308, 432], "review": [50, 146, 230, 308, 405, 489], "tweet": [50, 308], "interpret": [50, 86, 122, 177, 224, 308, 344, 379, 436, 483], "posit": [50, 98, 99, 107, 113, 118, 119, 120, 125, 138, 141, 146, 157, 158, 162, 181, 192, 196, 213, 221, 234, 308, 355, 356, 365, 371, 376, 377, 378, 384, 397, 400, 405, 416, 417, 420, 439, 451, 455, 472, 480, 493, 520], "final": [50, 86, 105, 110, 111, 118, 119, 127, 140, 169, 183, 308, 344, 363, 368, 369, 376, 377, 386, 399, 428, 441, 524], "otheriws": [50, 127, 308, 386], "neutral": [50, 127, 308, 386], "score": [50, 93, 94, 118, 119, 125, 127, 139, 140, 143, 157, 158, 161, 166, 203, 308, 350, 351, 376, 377, 384, 386, 398, 399, 402, 416, 417, 419, 424, 461], "less": [50, 99, 127, 131, 135, 139, 170, 174, 184, 308, 356, 386, 389, 394, 398, 429, 433, 443], "watch": [50, 158, 165, 308, 417, 423], "32": [50, 91, 92, 103, 160, 161, 162, 221, 255, 308, 348, 349, 360, 418, 419, 420, 480, 515, 523, 529], "p": [50, 87, 100, 116, 127, 140, 141, 150, 160, 161, 162, 191, 221, 308, 345, 357, 374, 386, 399, 400, 408, 418, 419, 420, 450, 480], "sentimentdl_use_imdb": [50, 308], "imdb": [50, 308], "sentimentdl_use_twitt": [50, 308], "wow": [50, 308], "video": [50, 125, 308, 384], "awesom": [50, 308], "bruh": [50, 308], "damn": [50, 308], "wast": [50, 158, 308, 417], "implement": [51, 100, 116, 118, 143, 155, 183, 205, 206, 309, 318, 347, 357, 374, 376, 402, 414, 439, 441, 463, 464, 473, 474, 482, 488, 492, 508], "tapa": [51, 309], "design": [51, 67, 77, 78, 82, 93, 94, 110, 111, 114, 130, 161, 163, 168, 170, 173, 176, 178, 234, 309, 317, 324, 335, 336, 340, 350, 351, 368, 369, 372, 388, 419, 421, 427, 429, 432, 435, 437, 493, 520], "about": [51, 65, 72, 73, 77, 84, 85, 110, 111, 113, 117, 125, 143, 146, 154, 165, 185, 208, 211, 257, 309, 322, 330, 331, 335, 341, 343, 368, 369, 371, 375, 384, 402, 405, 413, 423, 444, 467, 470, 517, 523, 525, 528, 529], "tabular": [51, 212, 309, 471], "tabl": [51, 181, 212, 214, 218, 236, 237, 238, 249, 309, 439, 471, 476, 496, 497, 509], "tri": [51, 309], "share": [51, 125, 309, 384, 525], "its": [51, 70, 80, 98, 99, 105, 120, 125, 152, 157, 161, 162, 163, 170, 171, 173, 174, 175, 177, 178, 187, 210, 234, 237, 245, 253, 309, 317, 328, 338, 355, 356, 363, 378, 384, 411, 416, 419, 420, 421, 429, 430, 432, 433, 434, 436, 437, 446, 469, 493, 513], "table_qa_tapas_base_finetuned_wtq": [51, 309], "table_json": [51, 309], "document_t": [51, 212, 309, 471], "stage": [51, 113, 181, 208, 211, 234, 238, 245, 246, 309, 371, 439, 467, 470, 493, 498, 505, 506, 520, 524, 525, 528], "json_data": [51, 309], "monei": [51, 212, 309, 471], "ag": [51, 95, 101, 109, 212, 309, 352, 358, 367, 471], "donald": [51, 212, 309, 471], "trump": [51, 212, 309, 471], "75": [51, 125, 175, 212, 309, 384, 434, 471], "elon": [51, 212, 309, 471], "musk": [51, 212, 309, 471], "55": [51, 142, 212, 255, 309, 401, 471, 515], "AS": [51, 63, 143, 309, 321, 402], "who": [51, 86, 88, 168, 191, 309, 344, 346, 427, 450, 524], "earn": [51, 309], "count": [51, 146, 177, 183, 237, 309, 405, 436, 441], "old": [51, 63, 253, 309, 321, 513], "xlm_roberta_base_qa_squad2": [52, 53, 310, 311], "xlm_roberta_base_mc": [52, 310], "xlm_roberta_base_sequence_classifier_imdb": [54, 312], "xlm_roberta_large_zero_shot_classifier_xnli_anli": [56, 314], "xlmroberta": [56, 314], "xlnet": [57, 58, 107, 120, 315, 316, 365, 378], "xlnet_base_sequence_classifier_imdb": [57, 315], "bullet": [59, 60, 61, 249, 317, 509], "cleanpostfixpattern": [59, 60, 317], "cleanprefixpattern": [59, 60, 317], "cleanermod": [59, 60, 317], "dash": [59, 60, 317], "extrawhitespac": [59, 60, 317], "ignorecas": [59, 60, 317], "setbullet": [59, 60, 317], "setcleanpostfixpattern": [59, 60, 317], "setcleanprefixpattern": [59, 60, 317], "setcleanermod": [59, 60, 317], "setdash": [59, 60, 317], "setextrawhitespac": [59, 60, 317], "setignorecas": [59, 60, 317], "setstrip": [59, 60, 317], "settrailingpunctu": [59, 60, 317], "strip": [59, 60, 317], "trailingpunctu": [59, 60, 317], "emailaddress": [59, 61, 318], "emaildatetimetzpattern": [59, 61, 318], "extractormod": [59, 61, 318], "imageurlpattern": [59, 61, 318], "ipaddressnamepattern": [59, 61, 318], "ipaddresspattern": [59, 61, 318], "mapiidpattern": [59, 61, 318], "setemailaddress": [59, 61, 318], "setemaildatetimetzpattern": [59, 61, 318], "setextractormod": [59, 61, 318], "setimageurlpattern": [59, 61, 318], "setindex": [59, 61, 318], "setipaddressnamepattern": [59, 61, 318], "setipaddresspattern": [59, 61, 318], "setmapiidpattern": [59, 61, 318], "settextpattern": [59, 61, 318], "setusphonenumberspattern": [59, 61, 318], "textpattern": [59, 61, 318], "usphonenumberspattern": [59, 61, 318], "handl": [60, 69, 70, 163, 171, 224, 250, 317, 326, 328, 421, 430, 483, 512], "postfix": [60, 317], "regex": [60, 86, 87, 122, 131, 133, 144, 183, 184, 185, 192, 193, 196, 236, 237, 317, 344, 345, 379, 382, 389, 392, 403, 441, 443, 444, 451, 452, 455, 496], "prefix": [60, 138, 160, 161, 162, 189, 191, 193, 234, 317, 397, 418, 419, 420, 450, 452, 493, 520], "clean": [60, 87, 144, 163, 179, 213, 317, 345, 403, 421, 438, 472, 525], "bytes_string_to_str": [60, 317], "clean_non_ascii_char": [60, 317], "clean_ordered_bullet": [60, 317], "clean_postfix": [60, 317], "clean_prefix": [60, 317], "remove_punctu": [60, 317], "replace_unicode_quot": [60, 317], "utf": [60, 87, 317, 345], "remov": [60, 81, 87, 110, 111, 144, 158, 192, 201, 202, 204, 257, 317, 339, 345, 368, 369, 403, 417, 451, 459, 460, 462], "extra": [60, 183, 184, 210, 317, 441, 443, 469, 524], "whitespac": [60, 86, 88, 192, 196, 199, 317, 344, 346, 451, 455, 457], "oper": [60, 99, 105, 183, 191, 317, 356, 363, 441, 450, 523], "lead": [60, 91, 96, 108, 113, 114, 118, 119, 168, 317, 348, 353, 366, 371, 372, 376, 377, 427], "trail": [60, 317], "punctuat": [60, 144, 154, 317, 403, 413], "specifi": [61, 67, 81, 92, 142, 143, 146, 155, 160, 161, 162, 181, 221, 251, 252, 318, 324, 339, 347, 349, 401, 402, 405, 414, 418, 419, 420, 480, 510, 511], "email": [61, 236, 238, 243, 246, 249, 318, 496, 498, 506, 509], "timestamp": [61, 245, 318, 505], "includ": [61, 70, 78, 87, 93, 94, 95, 100, 103, 114, 116, 118, 119, 120, 123, 125, 131, 138, 139, 140, 141, 146, 163, 164, 166, 167, 173, 175, 177, 178, 179, 181, 183, 202, 203, 207, 224, 234, 236, 237, 238, 245, 246, 247, 254, 259, 318, 328, 336, 345, 347, 350, 351, 352, 357, 360, 372, 374, 376, 377, 378, 381, 384, 389, 397, 398, 399, 400, 405, 421, 422, 424, 426, 432, 434, 436, 437, 438, 439, 441, 460, 461, 465, 483, 493, 496, 497, 498, 505, 506, 507, 514, 521, 523, 524, 525, 530], "zone": [61, 114, 318, 372], "email_d": 61, "email_address": 61, "ip_address": 61, "ip_address_nam": 61, "mapi_id": 61, "us_phone_numb": 61, "image_url": 61, "text_aft": 61, "text_befor": 61, "url": [61, 104, 236, 237, 238, 249, 318, 362, 496, 498, 509], "after": [61, 81, 82, 84, 85, 100, 110, 111, 115, 116, 131, 132, 138, 146, 165, 171, 191, 213, 234, 237, 259, 318, 339, 340, 341, 343, 357, 368, 369, 374, 389, 391, 397, 405, 423, 430, 450, 472, 493, 523, 524], "befor": [61, 87, 117, 131, 132, 141, 163, 179, 184, 192, 196, 259, 318, 345, 347, 375, 389, 391, 400, 421, 438, 439, 443, 451, 455, 474, 492, 520], "ip": [61, 318], "mapi": [61, 318], "u": [61, 84, 85, 98, 99, 125, 132, 138, 139, 140, 208, 226, 240, 252, 318, 341, 343, 355, 356, 384, 391, 397, 398, 399, 467, 485, 500, 511, 522, 525, 530], "phone": [61, 125, 175, 318, 384, 434], "maxsegmentlength": [62, 63, 321], "setmaxsegmentlength": [62, 63, 321], "settextgenr": [62, 63, 321], "textgenr": [62, 63, 321], "corefer": [63, 321], "resolut": [63, 78, 321, 336], "spanbert": [63, 321], "identifi": [63, 117, 125, 130, 133, 146, 147, 178, 192, 193, 225, 234, 236, 237, 321, 375, 384, 388, 392, 405, 406, 437, 451, 452, 484, 493, 496, 525], "given": [63, 67, 78, 79, 80, 86, 88, 104, 122, 125, 141, 143, 160, 161, 162, 163, 166, 173, 179, 183, 184, 185, 187, 207, 210, 220, 221, 232, 234, 257, 321, 324, 336, 337, 338, 344, 346, 362, 379, 384, 400, 402, 418, 419, 420, 421, 424, 432, 438, 441, 443, 444, 446, 465, 469, 479, 480, 492, 493, 517], "told": [63, 132, 321, 391], "mari": [63, 94, 111, 119, 155, 321, 351, 369, 377, 414], "he": [63, 86, 88, 98, 132, 191, 255, 321, 344, 346, 355, 391, 450, 515], "borrow": [63, 321], "book": [63, 87, 166, 183, 252, 321, 345, 424, 441, 511], "her": [63, 143, 321, 402], "link": [63, 240, 321, 500], "ontonot": [63, 321], "corefresolut": [63, 321], "spanbert_base_coref": [63, 321], "genr": [63, 321], "One": [63, 104, 125, 162, 191, 194, 321, 362, 384, 420, 450, 453], "bc": [63, 321], "broadcast": [63, 321], "convers": [63, 321], "bn": [63, 321], "nw": [63, 321], "wire": [63, 321], "pt": [63, 321], "pivot": [63, 114, 321, 372], "testament": [63, 321], "tc": [63, 321], "telephon": [63, 321], "wb": [63, 321], "mz": 63, "getcandidatelabel": [64, 66, 323], "croppct": [64, 67, 324], "dorescal": [64, 67, 78, 79, 214, 221, 324, 336, 337, 480], "rescalefactor": [64, 67, 78, 79, 214, 221, 324, 336, 337, 480], "setcroppct": [64, 67, 324], "setdorescal": [64, 67, 214, 221, 324, 480], "setrescalefactor": [64, 67, 214, 221, 324, 480], "ignoretokenid": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438], "setbeams": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 163, 164, 168, 169, 172, 176, 214, 221, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 427, 428, 431, 435, 480], "setdosampl": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "setignoretokenid": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438], "setmaxoutputlength": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "setminoutputlength": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "setnorepeatngrams": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "setrepetitionpenalti": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "settemperatur": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 145, 146, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 405, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "settopk": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 203, 214, 221, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 461, 480], "settopp": [64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 145, 146, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214, 221, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 405, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "maxinputlength": [64, 69, 159, 170, 317, 326, 429], "imagegeneratemod": [64, 71, 329], "numofparallelimag": [64, 71, 329], "setimagegeneratemod": [64, 71, 329], "setnumofparallelimag": [64, 71, 329], "doimagesplit": [64, 77, 335], "imagetoken": [64, 77, 335], "maximages": [64, 77, 335], "numvisiontoken": [64, 77, 335], "paddingconst": [64, 77, 335], "patchsiz": [64, 77, 335], "setdoimagesplit": [64, 77, 335], "setimagetoken": [64, 77, 335], "setmaximages": [64, 77, 335], "setnumvisiontoken": [64, 77, 335], "setpaddingconst": [64, 77, 335], "setpatchs": [64, 77, 335], "setstoptokenid": [64, 77, 159, 164, 168, 176, 335, 422, 427, 435], "stoptokenid": [64, 77, 159, 164, 168, 176, 335, 422, 427, 435], "blip": [65, 322], "visual": [65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 234, 322, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 493], "vision": [65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 175, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 434], "togeth": [65, 72, 75, 77, 104, 162, 322, 330, 333, 335, 362, 420], "visualqaclassifi": [65, 71, 72, 73, 74, 75, 76, 77, 322, 329, 330, 331, 332, 333, 334, 335], "blip_vqa_bas": [65, 322], "50": [65, 68, 69, 71, 72, 73, 74, 75, 76, 140, 142, 152, 163, 165, 166, 167, 169, 171, 172, 173, 174, 175, 177, 178, 255, 322, 325, 326, 329, 330, 331, 332, 333, 334, 399, 401, 411, 421, 423, 424, 426, 428, 430, 431, 432, 433, 434, 436, 437, 515], "image_df": [65, 68, 70, 71, 72, 73, 74, 75, 76, 102, 322, 325, 328, 329, 330, 331, 332, 333, 334, 359], "sparksessionfortest": [65, 71, 72, 73, 74, 75, 76, 322, 329, 330, 331, 332, 333, 334], "images_path": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335], "test_df": [65, 68, 70, 71, 72, 73, 74, 75, 76, 102, 322, 325, 328, 329, 330, 331, 332, 333, 334, 359], "withcolumn": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 102, 162, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 359, 420], "lit": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 102, 162, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 359, 420], "pictur": [65, 71, 72, 73, 75, 77, 322, 329, 330, 331, 333, 335], "setsiz": [65, 214, 221, 322, 480], "384": [65, 71, 77, 106, 322, 329, 335, 364], "cat_imag": [65, 71, 72, 73, 75, 76, 77, 322, 329, 330, 331, 333, 334, 335], "jpg": [65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 162, 322, 323, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 420], "cat": [65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 102, 162, 322, 323, 324, 329, 330, 331, 333, 334, 335, 336, 337, 338, 359, 420], "abov": [65, 102, 117, 123, 253, 359, 375, 381, 513], "skip": [65, 100, 116, 123, 183, 357, 374, 381, 441], "blip_vqa_tf": [65, 322], "clip": [66, 162, 323, 420], "contrast": [66, 101, 104, 105, 109, 130, 179, 323, 358, 362, 363, 367, 388, 438], "neural": [66, 80, 93, 94, 98, 140, 155, 163, 170, 317, 323, 338, 350, 351, 355, 399, 414, 421, 429], "network": [66, 80, 93, 94, 103, 140, 155, 323, 338, 350, 351, 360, 399, 414], "abil": [66, 114, 125, 163, 165, 166, 171, 323, 372, 384, 421, 423, 424, 430], "hard": [66, 113, 186, 323, 371, 445], "make": [66, 67, 77, 78, 87, 92, 96, 105, 107, 118, 119, 125, 146, 147, 155, 158, 160, 161, 162, 163, 168, 171, 178, 184, 259, 323, 324, 335, 336, 345, 349, 353, 363, 365, 376, 377, 384, 405, 406, 414, 417, 418, 419, 420, 421, 427, 430, 437, 443, 526, 530], "veri": [66, 79, 80, 96, 103, 118, 119, 120, 158, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 208, 317, 323, 337, 338, 353, 360, 376, 377, 378, 421, 422, 423, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 467, 523, 525, 528, 529], "gpt": [66, 110, 146, 163, 166, 175, 323, 368, 405, 421, 424, 434], "imageclassifi": [66, 67, 78, 79, 80, 323, 324, 336, 337, 338], "zero_shot_classifier_clip_vit_base_patch32": [66, 323], "huggingfac": [66, 67, 71, 73, 76, 77, 78, 79, 80, 96, 102, 174, 175, 176, 323, 324, 329, 331, 334, 335, 336, 337, 338, 353, 359, 433, 434, 435], "librari": [66, 67, 71, 73, 76, 77, 78, 79, 80, 92, 127, 160, 161, 162, 199, 200, 201, 209, 213, 260, 323, 324, 329, 331, 334, 335, 336, 337, 338, 349, 386, 418, 419, 420, 457, 458, 459, 468, 472, 529], "clipforzeroshotclassificationtestspec": [66, 323], "candidatelabel": [66, 214, 221, 323, 480], "imagedf": [66, 67, 69, 77, 78, 79, 80, 323, 324, 326, 335, 336, 337, 338], "dropinvalid": [66, 67, 78, 79, 80, 323, 324, 336, 337, 338], "photo": [66, 323], "bird": [66, 79, 162, 323, 337, 420], "dog": [66, 74, 79, 162, 323, 332, 337, 420], "hen": [66, 67, 78, 79, 80, 162, 323, 324, 336, 337, 338, 420], "hippo": [66, 67, 78, 80, 162, 323, 324, 336, 338, 420], "room": [66, 79, 162, 210, 323, 337, 420, 469], "tractor": [66, 67, 78, 79, 80, 162, 323, 324, 336, 337, 338, 420], "ostrich": [66, 67, 78, 79, 80, 162, 323, 324, 336, 337, 338, 420], "ox": [66, 67, 78, 79, 80, 162, 323, 324, 336, 337, 338, 420], "pipelinedf": [66, 67, 78, 79, 80, 323, 324, 336, 337, 338], "revers": [66, 67, 78, 79, 80, 162, 323, 324, 336, 337, 338, 420], "image_nam": [66, 67, 78, 79, 80, 162, 323, 324, 336, 337, 338, 420], "palac": [66, 67, 78, 79, 80, 162, 323, 324, 336, 337, 338, 420], "jpeg": [66, 67, 78, 79, 80, 162, 207, 323, 324, 336, 337, 338, 420, 465], "egyptian_cat": [66, 67, 78, 79, 80, 162, 323, 324, 336, 337, 338, 420], "hippopotamu": [66, 67, 78, 79, 80, 162, 323, 324, 336, 337, 338, 420], "junco": [66, 67, 78, 79, 80, 162, 323, 324, 336, 337, 338, 420], "bluetick": [66, 67, 74, 78, 79, 80, 162, 323, 324, 332, 336, 337, 338, 420], "chihuahua": [66, 67, 78, 79, 80, 162, 323, 324, 336, 337, 338, 420], "image_classifier_vit_base_patch16_224": [66, 80, 323, 338], "convnet": [67, 324], "convnext": [67, 324], "2020": [67, 125, 131, 132, 155, 324, 384, 389, 391, 414], "zhuang": [67, 324], "liu": [67, 78, 98, 110, 111, 324, 336, 355, 368, 369], "hanzi": [67, 324], "mao": [67, 324], "chao": [67, 324], "yuan": [67, 324], "wu": [67, 324], "christoph": [67, 324], "feichtenhof": [67, 324], "trevor": [67, 324], "darrel": [67, 324], "sain": [67, 324], "xie": [67, 324], "pure": [67, 77, 80, 170, 317, 324, 335, 338, 429], "inspir": [67, 158, 173, 184, 185, 230, 324, 417, 432, 443, 444, 489], "claim": [67, 324], "outperform": [67, 73, 95, 101, 105, 107, 109, 114, 115, 118, 119, 120, 125, 165, 166, 167, 168, 171, 174, 178, 324, 331, 352, 358, 363, 365, 367, 372, 373, 376, 377, 378, 384, 423, 424, 426, 427, 430, 433, 437], "convnextforimageclassificationtestspec": [67, 324], "roar": [67, 324], "began": [67, 324], "introduct": [67, 324], "vit": [67, 79, 80, 324, 337, 338], "quickli": [67, 146, 324, 405], "supersed": [67, 324], "vanilla": [67, 324], "hand": [67, 191, 324, 450], "face": [67, 114, 324, 372], "difficulti": [67, 324], "detect": [67, 68, 78, 115, 126, 127, 146, 147, 153, 154, 155, 236, 237, 238, 246, 248, 257, 324, 325, 336, 373, 385, 386, 405, 406, 412, 413, 414, 496, 497, 506, 508], "semant": [67, 78, 95, 103, 104, 114, 115, 181, 196, 324, 336, 352, 360, 362, 372, 373, 439, 455], "hierarch": [67, 78, 100, 116, 324, 336, 357, 374], "swin": [67, 78, 324, 336], "reintroduc": [67, 324], "sever": [67, 162, 178, 203, 236, 324, 420, 437, 461, 496, 530], "practic": [67, 96, 163, 171, 179, 324, 353, 421, 430, 438], "viabl": [67, 324], "backbon": [67, 78, 120, 324, 336, 378], "demonstr": [67, 78, 99, 102, 105, 106, 114, 125, 166, 168, 169, 170, 177, 247, 317, 324, 336, 356, 359, 363, 364, 372, 384, 424, 427, 428, 429, 436, 507], "remark": [67, 168, 324, 427], "wide": [67, 87, 93, 94, 98, 99, 101, 118, 119, 163, 167, 178, 324, 345, 350, 351, 355, 356, 358, 376, 377, 421, 426, 437], "varieti": [67, 68, 105, 107, 118, 119, 164, 324, 325, 363, 365, 376, 377, 422, 529], "howev": [67, 91, 107, 112, 114, 120, 125, 144, 167, 169, 172, 241, 324, 348, 365, 370, 372, 378, 384, 403, 426, 428, 431, 501, 523], "effect": [67, 78, 79, 80, 105, 106, 114, 146, 154, 163, 169, 171, 172, 179, 221, 324, 336, 337, 338, 363, 364, 372, 405, 413, 421, 428, 430, 431, 438, 480], "hybrid": [67, 324], "still": [67, 166, 234, 324, 424, 493], "credit": [67, 324], "superior": [67, 168, 171, 177, 324, 427, 430, 436], "inher": [67, 324], "induct": [67, 99, 324, 356], "bias": [67, 99, 173, 174, 324, 356, 432, 433], "reexamin": [67, 324], "space": [67, 100, 114, 116, 117, 135, 162, 181, 213, 324, 357, 372, 374, 375, 394, 420, 439, 472], "achiev": [67, 95, 98, 101, 104, 105, 106, 107, 110, 111, 118, 119, 120, 140, 163, 165, 166, 167, 170, 172, 175, 179, 208, 317, 324, 352, 355, 358, 362, 363, 364, 365, 368, 369, 376, 377, 378, 399, 421, 423, 424, 426, 429, 431, 434, 438, 467, 528], "gradual": [67, 324], "modern": [67, 324], "resnet": [67, 324], "toward": [67, 162, 166, 172, 324, 420, 424, 431], "discov": [67, 324, 521], "compon": [67, 80, 114, 198, 207, 324, 338, 372, 407, 408, 456, 465, 475, 480, 491, 497, 528], "contribut": [67, 167, 174, 324, 426, 433], "along": [67, 95, 123, 207, 324, 352, 381, 465], "wai": [67, 84, 85, 122, 123, 173, 174, 175, 177, 211, 240, 324, 341, 343, 379, 381, 432, 433, 434, 436, 470, 500], "outcom": [67, 324], "explor": [67, 114, 163, 169, 174, 179, 324, 372, 421, 428, 433, 438], "famili": [67, 69, 87, 95, 101, 167, 168, 175, 324, 326, 345, 352, 358, 426, 427, 434], "dub": [67, 118, 119, 324, 376, 377], "construct": [67, 100, 116, 193, 240, 324, 347, 357, 374, 452, 500, 527], "compet": [67, 324], "favor": [67, 324], "term": [67, 125, 324, 384], "scalabl": [67, 113, 324, 371], "87": [67, 78, 324, 336], "imagenet": [67, 78, 80, 324, 336, 338], "coco": [67, 78, 324, 336], "ade20k": [67, 78, 324, 336], "while": [67, 70, 71, 77, 78, 80, 91, 99, 104, 106, 117, 125, 146, 150, 162, 166, 169, 172, 203, 234, 324, 328, 329, 335, 336, 338, 348, 356, 362, 364, 375, 384, 405, 408, 420, 424, 428, 431, 461, 493, 520, 525], "maintain": [67, 70, 77, 106, 324, 328, 335, 364], "simplic": [67, 163, 324, 421], "effici": [67, 77, 78, 98, 100, 106, 113, 115, 116, 168, 170, 171, 178, 317, 324, 335, 336, 355, 357, 364, 371, 373, 374, 427, 429, 430, 437, 523], "dores": [67, 78, 79, 80, 214, 221, 324, 336, 337, 338, 480], "resiz": [67, 78, 79, 80, 221, 324, 336, 337, 338, 480], "certain": [67, 78, 79, 80, 183, 221, 324, 336, 337, 338, 441, 480], "donorm": [67, 78, 79, 80, 214, 221, 324, 336, 337, 338, 480], "deviat": [67, 78, 79, 80, 221, 324, 336, 337, 338, 480], "featureextractortyp": [67, 78, 79, 80, 214, 221, 324, 336, 337, 338, 480], "architectur": [67, 70, 71, 77, 78, 79, 80, 91, 93, 94, 98, 110, 127, 140, 155, 163, 172, 173, 177, 179, 221, 324, 328, 329, 335, 336, 337, 338, 348, 350, 351, 355, 368, 386, 399, 414, 421, 431, 432, 436, 438, 480], "featur": [67, 69, 70, 76, 78, 79, 80, 84, 100, 108, 113, 114, 116, 125, 135, 139, 150, 158, 162, 171, 181, 221, 234, 238, 324, 326, 328, 334, 336, 337, 338, 341, 357, 366, 371, 372, 374, 384, 394, 398, 408, 420, 430, 439, 480, 493, 498, 527], "imagemean": [67, 78, 79, 80, 214, 221, 324, 336, 337, 338, 480], "imagestd": [67, 78, 79, 80, 214, 221, 324, 336, 337, 338, 480], "resampl": [67, 78, 79, 80, 214, 221, 324, 336, 337, 338, 480], "pil": [67, 78, 79, 80, 221, 324, 336, 337, 338, 480], "nearest": [67, 78, 79, 80, 181, 221, 324, 336, 337, 338, 439, 480], "bilinear": [67, 78, 79, 80, 221, 324, 336, 337, 338, 480], "bicub": [67, 78, 79, 80, 221, 324, 336, 337, 338, 480], "do_res": [67, 78, 79, 80, 221, 324, 336, 337, 338, 480], "tupl": [67, 78, 79, 80, 210, 221, 232, 324, 336, 337, 338, 469, 480, 492], "rescal": [67, 78, 79, 221, 324, 336, 337, 480], "factor": [67, 78, 79, 92, 118, 119, 120, 160, 161, 162, 163, 179, 183, 221, 324, 336, 337, 349, 376, 377, 378, 418, 419, 420, 421, 438, 441, 480], "percentag": [67, 117, 183, 196, 324, 375, 441, 455, 477], "crop": [67, 324], "tabbi": [67, 78, 324, 336], "river": [67, 78, 80, 324, 336, 338], "hors": [67, 78, 80, 161, 203, 324, 336, 338, 419, 461], "amphibiu": [67, 78, 80, 324, 336, 338], "snowbird": [67, 78, 80, 324, 336, 338], "struthio": [67, 78, 80, 324, 336, 338], "camelu": [67, 78, 80, 324, 336, 338], "thresher": [67, 324], "thrasher": [67, 324], "thresh": [67, 324], "image_classifier_convnext_tiny_224_loc": [67, 324], "determin": [67, 118, 210, 221, 237, 324, 347, 376, 469, 480], "smaller": [67, 88, 99, 100, 106, 113, 116, 324, 346, 356, 357, 364, 371, 374], "224": [67, 324], "256": [67, 162, 324, 420], "edg": [67, 99, 123, 165, 168, 324, 356, 381, 423, 427], "afterward": [67, 324], "boolean": [67, 131, 221, 324, 389, 480], "255": [67, 221, 324, 480], "florenc": [68, 325], "prompt": [68, 92, 146, 160, 161, 162, 175, 210, 221, 247, 325, 349, 405, 418, 419, 420, 434, 469, 480, 507], "caption": [68, 73, 79, 162, 325, 331, 337, 420], "ocr": [68, 325], "describ": [68, 69, 71, 76, 77, 84, 85, 109, 123, 125, 170, 317, 325, 326, 329, 334, 335, 341, 343, 367, 381, 384, 429], "florence2": [68, 325], "florence2_base_ft_int4": [68, 325], "200": [68, 86, 163, 172, 179, 325, 344, 421, 431, 438], "od": [68, 325], "use_openvino": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 93, 94, 101, 102, 106, 109, 110, 118, 164, 165, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 350, 351, 358, 359, 364, 367, 368, 376, 422, 423, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437], "gram": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 95, 100, 101, 109, 116, 125, 135, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 352, 357, 358, 367, 374, 384, 394, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "cumul": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "gemma": [69, 326], "merger": [69, 70, 74, 326, 328, 332], "merg": [69, 70, 74, 123, 130, 134, 236, 237, 326, 328, 332, 381, 388, 393, 496, 497], "lightweight": [69, 77, 106, 175, 326, 335, 364, 434], "open": [69, 73, 77, 109, 113, 127, 164, 165, 167, 168, 169, 173, 174, 175, 176, 177, 178, 193, 199, 200, 201, 209, 213, 326, 331, 335, 367, 371, 386, 422, 423, 426, 427, 428, 432, 433, 434, 435, 436, 437, 452, 457, 458, 459, 468, 472, 521], "googl": [69, 91, 93, 94, 98, 100, 103, 110, 111, 115, 116, 125, 179, 238, 252, 326, 348, 350, 351, 355, 357, 360, 368, 369, 373, 374, 384, 438, 498, 511], "research": [69, 91, 93, 94, 98, 100, 116, 164, 170, 172, 173, 174, 176, 179, 317, 326, 348, 350, 351, 355, 357, 374, 422, 429, 431, 432, 433, 435, 438], "technologi": [69, 125, 326, 384], "gemini": [69, 326], "128k": [69, 175, 326, 434], "window": [69, 70, 78, 79, 100, 105, 115, 116, 125, 140, 171, 177, 183, 326, 328, 336, 337, 357, 363, 374, 384, 399, 430, 436, 441], "140": [69, 127, 326, 386], "multimod": [69, 70, 71, 73, 76, 77, 102, 160, 162, 165, 207, 258, 326, 328, 329, 331, 334, 335, 359, 418, 420, 423, 465, 518], "both": [69, 70, 81, 93, 94, 101, 103, 109, 115, 123, 146, 163, 168, 171, 173, 175, 177, 326, 328, 339, 350, 351, 358, 360, 367, 373, 381, 405, 421, 427, 430, 432, 434, 436, 524, 525], "optim": [69, 70, 73, 81, 92, 95, 100, 110, 111, 113, 114, 116, 140, 143, 155, 160, 161, 162, 164, 167, 168, 174, 175, 221, 326, 328, 331, 339, 349, 352, 357, 368, 369, 371, 372, 374, 399, 402, 414, 418, 419, 420, 422, 426, 427, 433, 434, 480], "deploy": [69, 70, 326, 328], "laptop": [69, 326], "desktop": [69, 87, 326, 345], "cloud": [69, 125, 326, 384], "visualqa": [69, 70, 77, 326, 328, 335], "gemma3_4b_it_int4": [69, 326], "9": [69, 98, 118, 119, 135, 147, 160, 165, 169, 175, 176, 326, 355, 376, 377, 394, 406, 418, 423, 428, 434, 435, 523, 528, 529], "testdf": [69, 77, 326, 335], "bo": [69, 160, 161, 162, 326, 418, 419, 420], "start_of_turn": [69, 326], "nyou": [69, 76, 88, 210, 326, 334, 346, 469], "assist": [69, 70, 72, 73, 75, 76, 102, 164, 168, 176, 178, 210, 226, 326, 328, 330, 331, 333, 334, 359, 422, 427, 435, 437, 469, 485], "start_of_imag": [69, 326], "end_of_turn": [69, 326], "http": [69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 95, 96, 98, 100, 102, 103, 104, 109, 115, 116, 146, 147, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 196, 221, 236, 238, 249, 348, 352, 353, 355, 357, 359, 360, 362, 367, 373, 374, 405, 406, 421, 423, 433, 434, 435, 436, 455, 496, 498, 509, 521], "arxiv": [69, 70, 71, 72, 73, 74, 75, 76, 77, 105, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 363, 421, 435], "pdf": [69, 70, 71, 72, 73, 74, 75, 76, 77, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 236, 237, 238, 243, 245, 246, 248, 249, 496, 497, 498, 505, 506, 508, 509], "1909": [69, 70, 71, 72, 73, 74, 75, 76, 77, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221], "05858": [69, 70, 71, 72, 73, 74, 75, 76, 77, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221], "__": [69, 70, 71, 72, 73, 74, 75, 76, 77, 87, 141, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 201, 202, 221, 345, 400, 421, 459, 460], "ctrl": [69, 70, 71, 72, 73, 74, 75, 76, 77, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 326, 328, 329, 330, 331, 332, 333, 334, 335, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "condit": [69, 70, 71, 72, 73, 74, 75, 76, 77, 93, 94, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 221, 326, 328, 329, 330, 331, 332, 333, 334, 335, 350, 351, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480], "control": [69, 70, 71, 72, 73, 74, 75, 76, 77, 146, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 221, 317, 326, 328, 329, 330, 331, 332, 333, 334, 335, 405, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 480], "internvl": [70, 328], "advanc": [70, 95, 127, 168, 171, 176, 177, 178, 199, 210, 213, 328, 352, 386, 427, 430, 435, 436, 437, 457, 469, 472], "mllm": [70, 328], "seri": [70, 165, 173, 177, 328, 423, 432, 436], "build": [70, 98, 99, 110, 111, 123, 125, 130, 166, 167, 169, 173, 174, 178, 234, 246, 259, 328, 355, 356, 368, 369, 381, 384, 388, 424, 426, 428, 432, 433, 437, 493, 506, 520], "core": [70, 81, 114, 328, 339, 372], "introduc": [70, 93, 94, 95, 99, 103, 104, 105, 107, 114, 163, 167, 168, 171, 175, 177, 178, 179, 328, 350, 351, 352, 356, 360, 362, 363, 365, 372, 421, 426, 427, 430, 434, 436, 437, 438], "signific": [70, 110, 111, 118, 119, 125, 128, 167, 177, 328, 368, 369, 376, 377, 384, 387, 426, 436], "enhanc": [70, 71, 98, 158, 163, 168, 171, 174, 328, 329, 355, 417, 421, 427, 430, 433], "strategi": [70, 92, 97, 108, 112, 113, 114, 129, 131, 133, 154, 160, 161, 162, 183, 220, 221, 237, 328, 349, 354, 366, 370, 371, 372, 389, 392, 413, 418, 419, 420, 441, 479, 480], "int4": [70, 328], "quantiz": [70, 328], "internvl2_5_1b_int4": [70, 328], "larger": [70, 71, 73, 77, 79, 92, 95, 96, 99, 110, 111, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 317, 328, 329, 331, 335, 337, 349, 352, 353, 356, 368, 369, 418, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439], "im_start": [70, 76, 77, 328, 334, 335], "ndescrib": [70, 74, 328, 332], "im_end": [70, 76, 328, 334], "janu": [71, 329], "alongsid": [71, 73, 178, 237, 238, 329, 331, 437], "novel": [71, 98, 107, 114, 120, 125, 163, 172, 329, 355, 365, 372, 378, 384, 421, 431], "autoregress": [71, 120, 329, 378], "unifi": [71, 163, 179, 236, 329, 421, 438, 496], "understand": [71, 93, 94, 99, 107, 118, 120, 125, 163, 168, 174, 175, 178, 179, 196, 329, 350, 351, 356, 365, 376, 378, 384, 421, 427, 433, 434, 437, 438, 455, 523], "decoupl": [71, 329], "separ": [71, 86, 88, 99, 110, 133, 135, 154, 155, 184, 193, 196, 202, 226, 237, 238, 251, 329, 344, 346, 356, 368, 392, 394, 413, 414, 443, 452, 455, 460, 485, 497, 510, 522], "pathwai": [71, 329], "allevi": [71, 329], "conflict": [71, 329], "role": [71, 210, 329, 469], "surpass": [71, 78, 98, 109, 165, 171, 329, 336, 355, 367, 423, 430], "previou": [71, 78, 104, 107, 118, 119, 166, 168, 172, 177, 217, 329, 336, 362, 365, 376, 377, 424, 427, 431, 436, 524], "exce": [71, 110, 111, 146, 329, 368, 369, 405], "deepseek": [71, 329], "llm": [71, 73, 114, 167, 168, 174, 177, 178, 329, 331, 372, 426, 427, 433, 436, 437], "3b": [71, 178, 329, 437], "approxim": [71, 181, 329, 439], "500b": [71, 329], "emploi": [71, 88, 120, 329, 346, 378], "siglip": [71, 329], "downsampl": [71, 329], "16": [71, 91, 120, 142, 238, 253, 329, 348, 378, 401, 498, 513, 523], "janus_1_3b_int4": [71, 329], "suit": [71, 73, 76, 77, 95, 113, 329, 331, 334, 335, 352, 371], "image_placehold": [71, 329], "nassist": [71, 74, 77, 329, 332, 335], "unusu": [71, 72, 73, 75, 76, 77, 329, 330, 331, 333, 334, 335], "aspect": [71, 72, 73, 75, 77, 171, 329, 330, 331, 333, 335, 430], "presenc": [71, 72, 73, 75, 77, 160, 161, 162, 221, 329, 330, 331, 333, 335, 418, 419, 420, 480], "ly": [71, 72, 73, 75, 76, 77, 162, 329, 330, 331, 333, 334, 335, 420], "pink": [71, 72, 73, 75, 76, 77, 162, 329, 330, 331, 333, 334, 335, 420], "couch": [71, 72, 73, 75, 76, 77, 79, 329, 330, 331, 333, 334, 335, 337], "parallel": [71, 92, 102, 154, 155, 208, 221, 251, 329, 349, 359, 413, 414, 467, 480, 510, 528], "llava": [72, 330], "llava_1_5_7b_hf": [72, 330], "llama": [73, 92, 160, 161, 162, 167, 168, 171, 174, 207, 210, 331, 349, 418, 419, 420, 426, 427, 430, 433, 465, 469], "compris": [73, 146, 331, 405], "11b": [73, 331], "90b": [73, 331], "These": [73, 78, 91, 110, 111, 114, 120, 125, 139, 166, 168, 177, 210, 240, 331, 336, 348, 368, 369, 372, 378, 384, 398, 424, 427, 436, 469, 500, 522], "reason": [73, 86, 88, 146, 164, 171, 174, 175, 176, 178, 331, 344, 346, 405, 422, 430, 433, 434, 435, 437], "proprietari": [73, 113, 173, 177, 331, 371, 432, 436], "industri": [73, 87, 331, 345], "llama_3_2_11b_vision_instruct_int4": [73, 331], "begin_of_text": [73, 331], "start_header_id": [73, 102, 168, 176, 210, 331, 359, 427, 435, 469], "end_header_id": [73, 102, 168, 176, 210, 331, 359, 427, 435, 469], "eot_id": [73, 102, 210, 331, 359, 469], "paligemma": [74, 332], "paligemma_3b_pt_224_int4": [74, 332], "stand": [74, 79, 93, 94, 162, 171, 332, 337, 350, 351, 420, 430], "grassi": [74, 162, 332, 420], "field": [74, 79, 95, 100, 116, 117, 122, 134, 162, 173, 174, 175, 177, 257, 332, 337, 352, 357, 374, 375, 379, 393, 420, 432, 433, 434, 436, 517], "phi_3_vision_128k_instruct": [75, 333], "image_1": [75, 333], "nwhat": [75, 333], "phi3v": [75, 333], "qwen2": [76, 162, 177, 334, 420, 436], "integr": [76, 95, 120, 125, 145, 170, 234, 317, 334, 352, 378, 384, 404, 429, 493, 520, 522], "respons": [76, 146, 155, 167, 168, 174, 178, 334, 405, 414, 426, 427, 433, 437], "queri": [76, 95, 101, 109, 113, 159, 161, 167, 171, 177, 181, 334, 352, 358, 367, 371, 419, 426, 430, 436, 439, 521], "qwen2_vl_2b_instruct_int4": [76, 334], "vision_start": [76, 334], "image_pad": [76, 334], "vision_end": [76, 334], "becaus": [76, 146, 157, 259, 318, 334, 405, 416, 439, 474, 492], "smolvlm": [77, 335], "compact": [77, 335], "arbitrari": [77, 163, 171, 335, 421, 430], "produc": [77, 335, 524], "stori": [77, 335], "ground": [77, 79, 335, 337], "Its": [77, 78, 85, 143, 163, 335, 336, 343, 402, 421], "suitabl": [77, 141, 167, 174, 335, 400, 426, 433], "devic": [77, 99, 335, 356], "strong": [77, 101, 102, 118, 119, 173, 174, 175, 177, 335, 358, 359, 376, 377, 432, 433, 434, 436], "smolvlm_instruct_int4": [77, 335], "49153": [77, 335], "81": [77, 253, 335, 513], "patch": [77, 80, 335, 338], "14": [77, 138, 152, 194, 208, 226, 240, 246, 253, 335, 397, 411, 453, 467, 485, 500, 506, 513], "pad": [77, 254, 335, 514], "constant": [77, 220, 222, 335, 479, 481], "end_of_utter": [77, 335], "openvino": [77, 93, 94, 101, 102, 106, 110, 118, 335, 350, 351, 358, 359, 364, 368, 376], "stop": [77, 125, 139, 145, 146, 160, 161, 162, 164, 168, 176, 179, 187, 221, 242, 257, 335, 384, 398, 405, 418, 419, 420, 422, 427, 435, 438, 446, 480, 502], "termin": [77, 335], "swinimageclassif": [78, 336], "shift": [78, 336], "ze": [78, 336], "yutong": [78, 336], "lin": [78, 336], "yue": [78, 336], "cao": [78, 336], "han": [78, 336], "hu": [78, 336], "yixuan": [78, 336], "zheng": [78, 336], "zhang": [78, 336], "stephen": [78, 336], "bain": [78, 336], "guo": [78, 336], "basic": [78, 125, 154, 210, 259, 336, 384, 413, 469, 523], "whose": [78, 175, 336, 347, 434], "scheme": [78, 110, 163, 336, 368, 421], "bring": [78, 169, 336, 428, 524], "greater": [78, 125, 146, 160, 161, 162, 221, 336, 384, 405, 418, 419, 420, 480], "attent": [78, 80, 92, 98, 105, 106, 146, 160, 161, 162, 167, 171, 177, 221, 336, 338, 349, 355, 363, 364, 405, 418, 419, 420, 426, 430, 436, 480], "non": [78, 165, 169, 174, 193, 196, 246, 336, 423, 428, 433, 452, 455, 506], "overlap": [78, 86, 88, 130, 134, 235, 237, 336, 344, 346, 388, 393, 497], "cross": [78, 118, 119, 142, 336, 376, 377, 401], "connect": [78, 336], "image_classifier_swin_base_patch4_window7_224": [78, 336], "swinforimageclassificationtest": [78, 336], "present": [78, 91, 101, 103, 105, 106, 110, 111, 115, 118, 119, 123, 146, 150, 155, 163, 170, 181, 317, 336, 348, 358, 360, 363, 364, 368, 369, 373, 376, 377, 381, 405, 408, 414, 421, 429, 439], "call": [78, 93, 94, 99, 101, 106, 114, 125, 146, 166, 167, 174, 175, 210, 232, 241, 251, 336, 347, 350, 351, 356, 358, 364, 372, 384, 405, 424, 426, 433, 434, 469, 492, 501, 510, 524, 530], "purpos": [78, 99, 101, 155, 336, 356, 358, 414], "adapt": [78, 177, 336, 436], "aris": [78, 336], "domain": [78, 104, 114, 125, 166, 249, 336, 362, 372, 384, 424, 509], "variat": [78, 336], "high": [78, 92, 113, 114, 115, 118, 119, 160, 161, 162, 163, 169, 170, 172, 175, 178, 221, 317, 336, 349, 371, 372, 373, 376, 377, 418, 419, 420, 421, 428, 429, 431, 434, 437, 480], "variou": [78, 106, 114, 120, 171, 174, 178, 235, 236, 237, 238, 246, 247, 249, 258, 336, 364, 372, 378, 430, 433, 437, 495, 496, 497, 498, 506, 507, 509, 518], "complex": [78, 103, 114, 115, 125, 171, 177, 184, 185, 336, 360, 372, 373, 384, 430, 436, 443, 444], "respect": [78, 98, 117, 139, 140, 141, 175, 253, 336, 347, 355, 375, 398, 399, 400, 434, 513], "broad": [78, 86, 166, 336, 344, 424], "rang": [78, 93, 94, 98, 99, 101, 104, 118, 119, 160, 161, 162, 163, 167, 168, 174, 203, 221, 336, 350, 351, 355, 356, 358, 362, 376, 377, 418, 419, 420, 421, 426, 427, 433, 461, 480], "1k": [78, 336], "dens": [78, 93, 94, 95, 169, 175, 176, 181, 336, 350, 351, 352, 428, 434, 435, 439], "box": [78, 102, 169, 172, 336, 359, 428, 431], "ap": [78, 336], "51": [78, 200, 209, 253, 336, 458, 468, 513], "53": [78, 130, 134, 336, 388, 393], "miou": [78, 336], "val": [78, 336], "margin": [78, 107, 120, 336, 365, 378], "prove": [78, 336], "benefici": [78, 125, 336, 384], "mlp": [78, 336], "visionencoderdecod": [79, 337], "auto": [79, 163, 188, 337, 421, 447], "beit": [79, 337], "deit": [79, 337], "gpt2": [79, 166, 337, 424], "image_captioning_vit_gpt2": [79, 337], "visionencoderdecodertestspec": [79, 337], "nreturnsequ": [79, 214, 221, 337, 480], "computation": [79, 103, 110, 111, 120, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 317, 337, 360, 368, 369, 378, 421, 422, 423, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438], "expens": [79, 103, 110, 111, 120, 157, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 184, 317, 337, 360, 368, 369, 378, 416, 421, 422, 423, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 443], "especi": [79, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 317, 337, 421, 422, 423, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438], "recommend": [79, 92, 103, 120, 146, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 259, 317, 337, 349, 360, 378, 405, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438], "imagecapt": [79, 337], "fill": [79, 163, 257, 337, 421, 517], "furnitur": [79, 337], "lai": [79, 172, 337, 431], "anoth": [79, 106, 162, 221, 246, 337, 364, 420, 480, 506, 525], "brown": [79, 162, 236, 337, 420, 496], "bear": [79, 236, 337, 496], "bodi": [79, 162, 337, 420], "water": [79, 162, 337, 420], "flock": [79, 337], "chicken": [79, 162, 337, 420], "lush": [79, 337], "green": [79, 162, 337, 420], "small": [79, 80, 87, 91, 92, 96, 99, 100, 109, 116, 128, 152, 160, 161, 162, 172, 174, 175, 178, 208, 221, 237, 253, 337, 338, 345, 348, 349, 353, 356, 357, 367, 374, 387, 411, 418, 419, 420, 431, 433, 434, 437, 467, 480, 513, 528], "wet": [79, 337], "wooden": [79, 337], "floor": [79, 162, 337, 420], "wear": [79, 162, 337, 420], "blue": [79, 337], "sweater": [79, 162, 337, 420], "man": [79, 92, 161, 162, 166, 167, 203, 337, 349, 419, 420, 424, 426, 461], "cow": [79, 337], "altern": [80, 125, 146, 157, 183, 184, 185, 208, 212, 338, 384, 405, 416, 441, 443, 444, 467, 471, 524, 529], "vitimageclassificationtestspec": [80, 338], "becom": [80, 91, 99, 125, 173, 338, 348, 356, 384, 432], "facto": [80, 125, 338, 384], "remain": [80, 87, 91, 99, 125, 257, 338, 345, 348, 356, 384, 517], "conjunct": [80, 338], "overal": [80, 117, 120, 165, 175, 338, 375, 378, 423, 434], "structur": [80, 143, 193, 203, 213, 236, 237, 238, 246, 247, 338, 402, 461, 472, 496, 497, 506, 507, 523], "relianc": [80, 114, 338, 372], "cnn": [80, 127, 140, 155, 338, 386, 399, 414], "necessari": [80, 99, 338, 347, 356, 520, 527], "directli": [80, 81, 141, 169, 172, 208, 234, 241, 338, 339, 400, 428, 431, 467, 493, 501, 520], "mid": [80, 338], "cifar": [80, 338], "vtab": [80, 338], "etc": [80, 97, 101, 104, 106, 107, 165, 177, 201, 213, 238, 338, 354, 358, 362, 364, 365, 423, 436, 459, 472, 498, 520], "attain": [80, 338], "excel": [80, 120, 171, 236, 237, 238, 246, 249, 338, 378, 430, 496, 498, 506, 509], "substanti": [80, 93, 94, 338, 350, 351], "fewer": [80, 91, 104, 181, 338, 348, 362, 439], "worth": [80, 338], "16x16": [80, 338], "egyptian": [80, 338], "repartit": [81, 339], "cach": [81, 92, 117, 160, 161, 162, 163, 179, 181, 221, 241, 339, 349, 375, 418, 419, 420, 421, 438, 439, 480, 501], "persist": [81, 178, 251, 339, 437, 510], "disk": [81, 117, 339, 375, 524, 525], "intend": [81, 211, 339, 470], "prepar": [81, 146, 198, 200, 207, 209, 339, 405, 456, 458, 465, 468], "export": [81, 339], "indirectli": [81, 339], "json": [81, 122, 146, 210, 212, 234, 237, 255, 339, 379, 405, 469, 471, 493, 515], "writer": [81, 339], "executor": [81, 146, 147, 339, 405, 406], "node": [81, 123, 214, 218, 221, 339, 381, 476, 480], "overrid": [81, 160, 161, 162, 221, 232, 236, 339, 347, 418, 419, 420, 480, 492, 496], "worker": [81, 84, 85, 339, 341, 343], "dataframewrit": [81, 339], "compress": [81, 92, 106, 160, 161, 162, 221, 339, 349, 364, 418, 419, 420, 480], "snappi": [81, 339], "preserv": [81, 99, 138, 192, 203, 213, 339, 356, 397, 451, 461, 472], "modifi": [81, 84, 85, 110, 111, 138, 146, 155, 339, 341, 343, 368, 369, 397, 405, 414], "optimized_df": [81, 339], "input_df": [81, 339], "total": [81, 92, 155, 162, 196, 339, 349, 414, 420, 455, 477], "kwarg": [81, 211, 236, 339, 470, 496], "date_chunk": [82, 340], "omicron": [82, 340], "covid": [82, 340], "world": [82, 86, 87, 88, 108, 113, 114, 171, 173, 174, 175, 177, 190, 234, 255, 340, 344, 345, 346, 366, 371, 372, 430, 432, 433, 434, 436, 448, 493, 515, 520], "health": [82, 340], "organ": [82, 125, 170, 210, 317, 340, 384, 429, 469], "nov": [82, 131, 132, 253, 340, 389, 391, 513], "26": [82, 138, 208, 210, 226, 240, 255, 340, 397, 467, 469, 485, 500, 515], "2021": [82, 131, 132, 340, 389, 391], "118": [82, 212, 340, 471], "121": [82, 340], "01": [82, 131, 132, 133, 340, 389, 391, 392], "dependencytreebank": [83, 84, 341], "numberofiter": [83, 84, 85, 341, 343], "setconllu": [83, 84, 85, 341, 343], "setdependencytreebank": [83, 84, 341], "setnumberofiter": [83, 84, 85, 341, 343], "conll2009": [83, 85, 343], "setconll2009": [83, 85, 343], "conllformat": [83, 85, 343], "traindependencypip": [83, 85, 343], "trainopt": [83, 85, 343], "trainparamet": [83, 85, 343], "dependencypars": [84, 85, 123, 341, 343, 381], "unlabel": [84, 93, 94, 95, 163, 166, 179, 341, 350, 351, 352, 421, 424, 438], "grammat": [84, 85, 341, 343], "inform": [84, 85, 104, 107, 117, 118, 125, 131, 138, 160, 161, 162, 163, 183, 200, 203, 209, 249, 254, 260, 341, 343, 362, 365, 375, 376, 384, 389, 397, 418, 419, 420, 421, 441, 458, 461, 468, 509, 514, 520, 521, 522, 523, 524, 530], "relationship": [84, 85, 115, 123, 341, 343, 373, 381], "tell": [84, 85, 125, 226, 341, 343, 384, 485], "verb": [84, 85, 252, 341, 343, 511], "particular": [84, 85, 125, 241, 341, 343, 384, 501, 524], "treebank": [84, 341], "penn": [84, 341], "converg": [84, 85, 152, 196, 341, 343, 411, 455], "better": [84, 85, 91, 98, 102, 107, 120, 125, 139, 152, 154, 155, 158, 163, 165, 167, 196, 341, 343, 348, 355, 359, 365, 378, 384, 398, 411, 413, 414, 417, 421, 423, 426, 455], "postagg": [84, 85, 123, 139, 152, 341, 343, 381, 398, 411], "dependency_treebank": [84, 341], "emptydataset": [84, 85, 341, 343], "tree": [84, 123, 341, 381], "bank": [84, 341], "dep": [84, 341], "dependency_conllu": [84, 123, 341, 381], "typeddependencyparsermdoel": [84, 341], "union": [84, 85, 341, 343], "turner": [84, 85, 341, 343], "newal": [84, 85, 341, 343], "sai": [84, 85, 125, 193, 341, 343, 384, 452], "disappoint": [84, 85, 341, 343], "talk": [84, 85, 146, 341, 343, 405], "stricken": [84, 85, 341, 343], "firm": [84, 85, 341, 343], "feder": [84, 85, 341, 343], "mogul": [84, 85, 341, 343], "typeddependencypars": [85, 123, 343, 381], "beforehand": [85, 343], "2009": [85, 343], "dependency_typ": [85, 123, 343, 381], "train_smal": [85, 343], "txt": [85, 86, 88, 100, 116, 117, 128, 130, 133, 134, 152, 155, 157, 183, 184, 185, 190, 193, 236, 243, 249, 253, 254, 343, 344, 346, 357, 374, 375, 387, 388, 392, 393, 411, 414, 416, 441, 443, 444, 448, 452, 496, 509, 513, 514, 530], "typdep": [85, 343], "dependency_typed_conllu": [85, 123, 343, 381], "amod": [85, 343], "flat": [85, 123, 204, 343, 381, 462], "nsubj": [85, 123, 204, 252, 343, 381, 462, 511], "parataxi": [85, 343], "pipe": 85, "roughli": [86, 344], "subtext": [86, 344], "perfect": [86, 88, 344, 346], "observ": [86, 88, 115, 344, 346, 373], "seen": [86, 88, 163, 344, 346, 421], "addition": [86, 88, 120, 140, 152, 171, 177, 200, 209, 240, 344, 346, 378, 399, 411, 430, 436, 458, 468, 500], "trim": [86, 88, 210, 344, 346, 469], "individu": [86, 88, 125, 183, 237, 344, 346, 347, 384, 441, 497], "documentcharactertextsplittertest": [86, 344], "decreas": [86, 146, 181, 344, 405, 439], "prioriti": [86, 184, 193, 344, 443, 452], "textdf": [86, 88, 102, 344, 346, 359], "sherlockholm": [86, 88, 100, 116, 183, 344, 346, 357, 374, 441, 530], "wholetext": [86, 88, 344, 346], "textsplitt": [86, 88, 344, 346], "20000": [86, 344], "80": [86, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 133, 201, 213, 344, 346, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 392, 459, 472], "project": [86, 88, 125, 160, 170, 173, 178, 181, 234, 260, 317, 344, 346, 384, 418, 429, 432, 437, 439, 493, 521], "gutenberg": [86, 88, 344, 346], "adventur": [86, 88, 344, 346], "sherlock": [86, 88, 183, 344, 346, 441], "holm": [86, 88, 183, 344, 346, 441], "arthur": [86, 88, 344, 346], "conan": [86, 88, 344, 346], "doyl": [86, 88, 344, 346], "19994": [86, 344], "And": [86, 344], "mademoisel": [86, 344], "ask": [86, 164, 249, 344, 422, 509], "brioni": [86, 344], "lodg": [86, 344], "serpentin": [86, 344], "aven": [86, 344], "19798": [86, 344], "39395": [86, 344], "19597": [86, 344], "did": [86, 125, 171, 177, 344, 384, 430, 436], "woman": [86, 344], "think": [86, 344], "39371": [86, 344], "59242": [86, 344], "19871": [86, 344], "But": [86, 88, 95, 101, 109, 344, 346, 352, 358, 367], "said": [86, 88, 344, 346], "million": [86, 109, 125, 142, 166, 344, 367, 384, 401, 424], "red": [86, 162, 344, 420], "men": [86, 344], "nwould": [86, 344], "59166": [86, 344], "77833": [86, 344], "18667": [86, 344], "friend": [86, 344], "enthusiast": [86, 344], "musician": [86, 344], "being": [86, 99, 106, 140, 146, 150, 163, 167, 170, 175, 179, 181, 317, 344, 356, 364, 399, 405, 408, 421, 426, 429, 434, 438, 439], "himself": [86, 344], "nveri": [86, 344], "capab": [86, 344], "77835": [86, 344], "97769": [86, 344], "19934": [86, 344], "yet": [86, 241, 344, 501], "convinc": [86, 344], "ncome": [86, 344], "li": [86, 175, 344, 434], "97771": [86, 344], "117248": [86, 344], "19477": [86, 344], "she": [86, 191, 344, 450], "had": [86, 125, 146, 344, 384, 405], "slate": [86, 344], "colour": [86, 344], "brim": [86, 344], "straw": [86, 344], "hat": [86, 344], "nfeather": [86, 344], "117250": [86, 344], "137242": [86, 344], "19992": [86, 344], "That": [86, 125, 191, 234, 344, 384, 450, 493, 520, 525], "littl": [86, 155, 344, 414, 529], "paradox": [86, 344], "profoundli": [86, 344], "singulari": [86, 344], "137244": [86, 344], "157171": [86, 344], "19927": [86, 344], "raw": [87, 162, 166, 191, 193, 196, 207, 236, 237, 238, 345, 420, 424, 450, 452, 455, 465, 496, 497, 523, 525], "scrape": [87, 345], "page": [87, 166, 173, 236, 237, 238, 240, 245, 260, 345, 424, 432, 496, 497, 500, 505, 519, 527, 529], "xml": [87, 243, 249, 345, 509], "dirti": [87, 144, 345, 403], "want": [87, 88, 122, 142, 241, 345, 346, 379, 401, 501, 525], "pretty_al": [87, 345], "normalizeddocu": [87, 345], "div": [87, 345], "theworldsgreatest": [87, 345], "right": [87, 93, 94, 163, 196, 210, 345, 350, 351, 421, 455, 469], "hide": [87, 345], "toptext": [87, 345], "style": [87, 127, 179, 345, 386, 438], "font": [87, 236, 237, 238, 246, 248, 345, 496, 497, 506, 508], "sego": [87, 345], "ui": [87, 345], "arial": [87, 345], "san": [87, 125, 345, 384], "serif": [87, 345], "largest": [87, 125, 166, 345, 384, 424], "develop": [87, 125, 167, 168, 170, 172, 173, 174, 176, 177, 178, 227, 317, 345, 384, 426, 427, 429, 431, 432, 433, 435, 436, 437, 490], "site": [87, 125, 165, 345, 384, 423], "h1": [87, 345], "300": [87, 345], "160": [87, 345], "lorem": [87, 130, 134, 345, 388, 393], "ipsum": [87, 130, 134, 345, 388, 393], "typeset": [87, 345], "been": [87, 96, 166, 167, 168, 174, 194, 213, 241, 345, 353, 424, 426, 427, 433, 453, 472, 501], "1500": [87, 345], "unknown": [87, 88, 127, 345, 346, 386], "printer": [87, 345], "took": [87, 172, 345, 431], "gallei": [87, 345], "scrambl": [87, 345], "specimen": [87, 345], "surviv": [87, 345], "five": [87, 142, 162, 345, 401, 420], "centuri": [87, 171, 196, 345, 430, 455], "leap": [87, 345], "electron": [87, 345], "essenti": [87, 166, 173, 345, 424, 432], "unchang": [87, 345], "popularis": [87, 345], "1960": [87, 345], "letraset": [87, 345], "sheet": [87, 260, 345], "passag": [87, 95, 101, 109, 161, 345, 352, 358, 367, 419], "recent": [87, 93, 94, 98, 110, 111, 125, 146, 163, 345, 350, 351, 355, 368, 369, 384, 405, 421], "publish": [87, 110, 111, 345, 368, 369], "softwar": [87, 178, 345, 437], "aldu": [87, 345], "pagemak": [87, 345], "measur": [88, 99, 110, 111, 163, 175, 234, 346, 356, 368, 369, 421, 434, 493], "futur": [88, 155, 163, 179, 346, 414, 421, 438], "techniqu": [88, 91, 98, 163, 166, 168, 172, 177, 179, 181, 346, 348, 355, 421, 424, 427, 431, 436, 438, 439], "documenttokensplittertest": [88, 346], "3018": [88, 346], "crime": [88, 346], "occupi": [88, 346], "nimmens": [88, 346], "faculti": [88, 346], "extraordinari": [88, 346], "power": [88, 93, 94, 163, 173, 179, 249, 346, 350, 351, 421, 432, 438, 509], "2950": [88, 346], "5707": [88, 346], "2757": [88, 346], "chang": [88, 104, 221, 230, 346, 347, 362, 480, 489], "cloth": [88, 346], "imagin": [88, 346], "ndeduc": [88, 346], "As": [88, 91, 93, 94, 95, 99, 101, 109, 125, 146, 173, 346, 348, 350, 351, 352, 356, 358, 367, 384, 405, 432], "5659": [88, 346], "8483": [88, 346], "2824": [88, 346], "quarter": [88, 346], "receiv": [88, 161, 253, 346, 419, 513, 530], "Be": [88, 346], "chamber": [88, 346], "nnot": [88, 346], "8427": [88, 346], "11241": [88, 346], "2814": [88, 346], "piti": [88, 346], "nto": [88, 346], "miss": [88, 131, 132, 141, 199, 346, 389, 391, 400, 457], "client": [88, 346], "never": [88, 141, 158, 346, 400, 417, 524], "mind": [88, 172, 346, 431], "him": [88, 132, 346, 391], "11188": [88, 346], "13970": [88, 346], "2782": [88, 346], "person": [88, 122, 252, 346, 379, 511], "me": [88, 132, 168, 346, 391, 427], "wish": [88, 346], "agent": [88, 177, 346, 436], "conf": [88, 346], "13918": [88, 346], "16898": [88, 346], "2980": [88, 346], "letter": [88, 144, 166, 167, 183, 253, 346, 403, 424, 426, 441, 513, 530], "secret": [88, 346], "marriag": [88, 346], "16836": [88, 346], "19744": [88, 346], "2908": [88, 346], "seven": [88, 346], "hundr": [88, 118, 119, 346, 376, 377], "nnote": [88, 346], "nholm": [88, 346], "scribbl": [88, 346], "receipt": [88, 346], "shee": [88, 346], "19683": [88, 346], "22551": [88, 346], "2868": [88, 346], "defragmentationthreshold": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "flashattent": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "getmetadata": [90, 92, 214, 221, 349, 480], "gpusplitmod": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "grpattnn": [90, 92, 160, 161, 162, 349, 418, 419, 420], "grpattnw": [90, 92, 160, 161, 162, 349, 418, 419, 420], "maingpu": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "nbatch": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "nchunk": [90, 92, 160, 162, 349, 418, 420], "nctx": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "ngpulay": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "nsequenc": [90, 92, 160, 162, 349, 418, 420], "nthread": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "nthreadsbatch": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "nubatch": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "nokvoffload": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "numastrategi": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "poolingtyp": [90, 92, 160, 161, 214, 221, 349, 418, 419, 480], "ropefreqbas": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "ropefreqscal": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "ropescalingtyp": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "setdefragmentationthreshold": [90, 92, 214, 221, 349, 480], "setflashattent": [90, 92, 214, 221, 349, 480], "setgpusplitmod": [90, 92, 214, 221, 349, 480], "setgrpattnn": [90, 92, 349], "setgrpattnw": [90, 92, 349], "setmaingpu": [90, 92, 214, 221, 349, 480], "setnbatch": [90, 92, 214, 221, 349, 480], "setnchunk": [90, 92, 349], "setnctx": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "setngpulay": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "setnparallel": [90, 92, 214, 221, 349, 480], "setnsequ": [90, 92, 349], "setnthread": [90, 92, 214, 221, 349, 480], "setnthreadsbatch": [90, 92, 214, 221, 349, 480], "setnubatch": [90, 92, 214, 221, 349, 480], "setnokvoffload": [90, 92, 214, 221, 349, 480], "setnumastrategi": [90, 92, 214, 221, 349, 480], "setpoolingtyp": [90, 92, 214, 221, 349, 480], "setropefreqbas": [90, 92, 214, 221, 349, 480], "setropefreqscal": [90, 92, 214, 221, 349, 480], "setropescalingtyp": [90, 92, 214, 221, 349, 480], "settensorsplit": [90, 92, 349], "setusemlock": [90, 92, 214, 221, 349, 480], "setusemmap": [90, 92, 214, 221, 349, 480], "setyarnattnfactor": [90, 92, 214, 221, 349, 480], "setyarnbetafast": [90, 92, 214, 221, 349, 480], "setyarnbetaslow": [90, 92, 214, 221, 349, 480], "setyarnextfactor": [90, 92, 214, 221, 349, 480], "setyarnorigctx": [90, 92, 214, 221, 349, 480], "tensorsplit": [90, 92, 160, 161, 162, 349, 418, 419, 420], "usemlock": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "usemmap": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "yarnattnfactor": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "yarnbetafast": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "yarnbetaslow": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "yarnextfactor": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "yarnorigctx": [90, 92, 160, 161, 162, 214, 221, 349, 418, 419, 420, 480], "islong": [90, 94, 351], "setislong": [90, 94, 351], "poolingstrategi": [90, 97, 108, 112, 113, 114, 354, 366, 370, 371, 372], "setpoolingstrategi": [90, 97, 108, 112, 113, 114, 354, 366, 370, 371, 372], "setskipoov": [90, 97, 354], "skipoov": [90, 97, 354], "maxit": [90, 100, 116, 357, 374], "mincount": [90, 100, 116, 182, 183, 357, 374, 441], "setmaxit": [90, 100, 116, 357, 374], "setmincount": [90, 100, 116, 182, 183, 357, 374, 441], "setse": [90, 100, 116, 214, 221, 357, 374, 480], "setsteps": [90, 100, 116, 357, 374], "setvectors": [90, 100, 116, 357, 374], "setwindows": [90, 100, 116, 124, 125, 357, 374, 384], "stepsiz": [90, 100, 116, 357, 374], "vectors": [90, 100, 116, 357, 374], "windows": [90, 100, 116, 124, 125, 357, 374, 384], "getvector": [90, 100, 116, 357, 374], "poolinglay": [90, 103, 360], "setpoolinglay": [90, 103, 360], "setinstruct": [90, 104, 362], "loadsp": [90, 115, 373], "setloadsp": [90, 115, 373], "readcaches": [90, 117, 375], "setreadcaches": [90, 117, 375], "setwritebuffers": [90, 117, 375], "writebuffers": [90, 117, 375], "databas": [90, 117, 121, 122, 129, 130, 224, 375, 379, 388, 483], "loadstorag": [90, 117, 121, 122, 129, 130, 214, 224, 375, 379, 388, 483], "overallcoverag": [90, 117, 375], "withcoveragecolumn": [90, 117, 375], "lite": [91, 348], "toyota": [91, 348], "technolog": [91, 348], "institut": [91, 348], "chicago": [91, 348], "offici": [91, 125, 138, 139, 140, 208, 226, 240, 348, 384, 397, 398, 399, 467, 485, 500, 521], "tf": [91, 115, 348, 373], "wrapper": [91, 348, 489], "port": [91, 348], "albert_base_uncas": [91, 348], "albert_bas": [91, 348], "768": [91, 93, 94, 95, 96, 98, 99, 101, 104, 105, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 348, 350, 351, 352, 353, 355, 356, 358, 362, 363, 365, 366, 367, 368, 369, 371, 372, 376, 377, 378], "emb": [91, 109, 113, 348, 367, 371], "dim": [91, 92, 160, 161, 162, 221, 348, 349, 418, 419, 420, 480], "12m": [91, 348], "albert_large_uncas": [91, 348], "albert_larg": [91, 348], "1024": [91, 103, 105, 120, 348, 360, 363, 378], "24": [91, 120, 130, 134, 138, 183, 208, 226, 240, 348, 378, 388, 393, 397, 441, 467, 485, 500, 523], "18m": [91, 348], "albert_xlarge_uncas": [91, 348], "albert_xlarg": [91, 348], "2048": [91, 348], "60m": [91, 348], "albert_xxlarge_uncas": [91, 348], "albert_xxlarg": [91, 348], "235m": [91, 348], "sentencepiec": [91, 98, 115, 348, 355, 373], "everi": [91, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 140, 158, 170, 183, 200, 209, 211, 221, 317, 348, 350, 351, 352, 353, 355, 356, 358, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 376, 377, 378, 399, 417, 429, 441, 458, 468, 470, 525], "dimens": [91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 141, 214, 221, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 400, 480], "repeat": [91, 146, 160, 161, 162, 221, 348, 405, 418, 419, 420, 480], "footprint": [91, 348], "cost": [91, 171, 183, 184, 348, 430, 441, 443], "FOR": [91, 348], "tfhub": [91, 103, 115, 348, 360, 373], "q": [91, 348], "increas": [91, 92, 95, 101, 109, 117, 125, 146, 160, 161, 162, 163, 166, 169, 181, 184, 185, 221, 348, 349, 352, 358, 367, 375, 384, 405, 418, 419, 420, 421, 424, 428, 439, 443, 480], "downstream": [91, 96, 98, 103, 104, 105, 106, 120, 163, 166, 177, 179, 348, 353, 355, 360, 362, 363, 364, 378, 421, 424, 436, 438], "some": [91, 92, 94, 118, 125, 140, 155, 160, 161, 162, 165, 166, 168, 175, 210, 211, 221, 234, 255, 348, 349, 351, 376, 384, 399, 414, 418, 419, 420, 423, 424, 427, 434, 469, 470, 480, 493, 515, 523, 524, 528, 529], "point": [91, 93, 94, 154, 155, 200, 209, 249, 251, 348, 350, 351, 413, 414, 458, 468, 509, 510], "harder": [91, 348], "tpu": [91, 348], "consumpt": [91, 115, 117, 348, 373, 375], "speed": [91, 139, 165, 170, 171, 317, 348, 398, 423, 429, 430], "devlin": [91, 110, 111, 348, 368, 369], "et": [91, 110, 111, 127, 348, 368, 369, 386], "al": [91, 110, 111, 348, 368, 369], "2019": [91, 96, 98, 110, 111, 118, 119, 163, 348, 353, 355, 368, 369, 376, 377, 421], "comprehens": [91, 95, 114, 163, 165, 166, 168, 171, 177, 178, 348, 352, 372, 421, 423, 424, 427, 430, 436, 437], "empir": [91, 93, 94, 118, 119, 120, 348, 350, 351, 376, 377, 378], "evid": [91, 348], "focus": [91, 113, 125, 146, 162, 177, 178, 348, 371, 384, 405, 420, 436, 437], "inter": [91, 348], "coher": [91, 164, 166, 237, 348, 422, 424], "establish": [91, 348], "glue": [91, 93, 94, 99, 106, 107, 110, 111, 118, 119, 163, 348, 350, 351, 356, 364, 365, 368, 369, 376, 377, 421], "race": [91, 98, 110, 111, 348, 355, 368, 369], "finished_embed": [91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "setoutputasvector": [91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 197, 201, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 459], "setcleanannot": [91, 98, 99, 103, 105, 110, 112, 115, 117, 118, 120, 197, 201, 202, 204, 348, 355, 356, 360, 363, 368, 370, 373, 375, 376, 378, 459, 460, 462], "1342473030090332": [91, 98, 348, 355], "3855540752410889": [91, 98, 348, 355], "9818322062492371": [91, 98, 348, 355], "784737348556518": [91, 98, 348, 355], "847029983997345": [91, 98, 348, 355], "047153353691101": [91, 98, 348, 355], "1520637571811676": [91, 98, 348, 355], "6245765686035156": [91, 98, 348, 355], "009860038757324219": [91, 98, 348, 355], "13450059294700623": [91, 98, 348, 355], "707749128341675": [91, 98, 348, 355], "2916892766952": [91, 98, 348, 355], "04192575812339783": [91, 98, 348, 355], "5764210224151611": [91, 98, 348, 355], "3196685314178467": [91, 98, 348, 355], "527840495109": [91, 98, 348, 355], "15583214163780212": [91, 98, 348, 355], "1614152491092682": [91, 98, 348, 355], "28423872590065": [91, 98, 348, 355], "135491415858268": [91, 98, 348, 355], "cpp": [92, 160, 161, 162, 207, 210, 349, 418, 419, 420, 465, 469], "cl": [92, 95, 108, 113, 114, 221, 349, 352, 366, 371, 372, 480], "qwen3_embedding_0": [92, 349], "6b_q8_0_gguf": [92, 349], "autoggufembeddingstest": [92, 349], "notebook": [92, 160, 161, 162, 178, 181, 210, 234, 259, 349, 418, 419, 420, 437, 439, 469, 493, 520], "thread": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480, 493], "logic": [92, 160, 161, 162, 174, 175, 221, 349, 418, 419, 420, 433, 434, 480], "bla": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "physic": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "maxim": [92, 120, 160, 162, 183, 349, 378, 418, 420, 441], "store": [92, 123, 160, 161, 162, 212, 221, 237, 238, 240, 245, 255, 349, 381, 407, 408, 418, 419, 420, 471, 475, 480, 491, 497, 498, 500, 505, 515, 521], "vram": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "across": [92, 103, 160, 161, 162, 166, 167, 168, 171, 177, 181, 221, 349, 360, 418, 419, 420, 424, 426, 427, 430, 436, 439, 480], "main": [92, 122, 160, 161, 162, 181, 193, 221, 260, 349, 379, 418, 419, 420, 439, 452, 480, 523, 527, 530], "scratch": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "tensor": [92, 103, 160, 161, 162, 221, 349, 360, 418, 419, 420, 480], "distribut": [92, 100, 116, 160, 161, 162, 221, 349, 357, 374, 418, 419, 420, 480], "rope": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "frequenc": [92, 146, 158, 160, 161, 162, 183, 184, 185, 196, 221, 349, 405, 417, 418, 419, 420, 441, 443, 444, 455, 480], "ntk": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "awar": [92, 160, 161, 162, 183, 221, 349, 418, 419, 420, 441, 480], "expand": [92, 160, 161, 162, 171, 221, 349, 418, 419, 420, 430, 480], "yarn": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "extrapol": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "mix": [92, 103, 113, 160, 161, 162, 221, 318, 349, 360, 371, 418, 419, 420, 439, 474, 480, 492], "sqrt": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "magnitud": [92, 104, 160, 161, 162, 184, 185, 221, 349, 362, 418, 419, 420, 443, 444, 480], "low": [92, 95, 118, 119, 160, 161, 162, 172, 178, 183, 221, 349, 352, 376, 377, 418, 419, 420, 431, 437, 441, 480], "correct": [92, 118, 160, 161, 162, 183, 184, 185, 196, 221, 349, 376, 418, 419, 420, 441, 443, 444, 455, 480], "beta": [92, 160, 161, 162, 177, 221, 349, 418, 419, 420, 436, 480], "alpha": [92, 160, 161, 162, 165, 183, 221, 349, 418, 419, 420, 423, 441, 480], "kv": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "defragment": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "numa": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "unless": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "unspecifi": [92, 160, 161, 221, 349, 418, 419, 480], "flash": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "pageout": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "mlock": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "ram": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "swap": [92, 160, 161, 162, 184, 221, 349, 418, 419, 420, 443, 480], "disabl": [92, 158, 160, 161, 162, 200, 209, 221, 237, 245, 349, 418, 419, 420, 458, 468, 480, 505], "offload": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "sure": [92, 158, 160, 161, 162, 259, 349, 417, 418, 419, 420], "adjust": [92, 160, 161, 162, 221, 349, 418, 419, 420, 480], "accord": [92, 125, 160, 161, 162, 167, 183, 251, 349, 384, 418, 419, 420, 426, 441, 510], "hardwar": [92, 160, 161, 162, 349, 418, 419, 420], "avoid": [92, 107, 157, 160, 161, 162, 221, 349, 365, 416, 418, 419, 420, 480], "error": [92, 160, 161, 162, 183, 347, 349, 418, 419, 420, 441], "99": [92, 160, 162, 349, 418, 420], "moon": [92, 108, 113, 114, 349, 366, 371, 372], "jupit": [92, 349], "77": [92, 349], "79": [92, 131, 132, 349, 389, 391], "confirm": [92, 349], "satellit": [92, 349], "made": [92, 95, 98, 115, 349, 352, 355, 373, 520], "ones": [92, 162, 349, 420], "034486726": [92, 349], "07770534": [92, 349], "15982522": [92, 349], "017873349": [92, 349], "013914132": [92, 349], "0365736": [92, 349], "nparallel": [92, 221, 349, 480], "alia": [92, 160, 161, 162, 221, 226, 349, 418, 419, 420, 480, 485], "small_bert_l2_768": [93, 350], "unlik": [93, 94, 104, 118, 125, 173, 191, 350, 351, 362, 376, 384, 432, 450], "jointli": [93, 94, 350, 351], "left": [93, 94, 162, 163, 172, 196, 217, 350, 351, 420, 421, 431, 455], "just": [93, 94, 99, 110, 135, 140, 160, 237, 350, 351, 356, 368, 394, 399, 418], "modif": [93, 94, 350, 351], "conceptu": [93, 94, 350, 351], "obtain": [93, 94, 96, 101, 115, 141, 172, 350, 351, 353, 358, 373, 400, 431], "eleven": [93, 94, 350, 351], "push": [93, 94, 257, 350, 351, 517], "absolut": [93, 94, 350, 351], "multinli": [93, 94, 350, 351], "86": [93, 94, 98, 350, 351, 355], "v1": [93, 94, 109, 350, 351, 367], "f1": [93, 94, 118, 119, 140, 166, 350, 351, 376, 377, 399, 424], "93": [93, 94, 350, 351], "83": [93, 94, 98, 253, 254, 350, 351, 355, 513, 514, 530], "small_bert_l2_128": [93, 350], "3497989177703857": [93, 104, 350, 362], "480538547039032": [93, 104, 350, 362], "3238905668258667": [93, 104, 350, 362], "612930893898010": [93, 104, 350, 362], "1357314586639404": [93, 350], "32984697818756104": [93, 350], "6032363176345825": [93, 350], "6791689395904": [93, 350], "8244884014129639": [93, 350], "27088963985443115": [93, 350], "059438943862915": [93, 350], "9817547798156": [93, 350], "1648050546646118": [93, 350], "4725411534309387": [93, 350], "5938255786895752": [93, 350], "5780693292617": [93, 350], "9125322699546814": [93, 350], "4563939869403839": [93, 350], "3975459933280945": [93, 350], "81611204147338": [93, 350], "backend": [93, 94, 101, 106, 110, 118, 210, 350, 351, 358, 364, 368, 376, 469], "sentence_bert_embed": [94, 351], "sent_small_bert_l2_768": [94, 351], "long": [94, 105, 109, 113, 114, 120, 162, 171, 175, 221, 245, 347, 351, 363, 367, 371, 372, 378, 420, 430, 434, 480, 505], "sent_small_bert_l2_128": [94, 351], "orang": [94, 111, 119, 351, 369, 377], "8951074481010437": [94, 111, 119, 351, 369, 377], "13753940165042877": [94, 111, 119, 351, 369, 377], "3108254075050354": [94, 111, 119, 351, 369, 377], "65693199634552": [94, 111, 119, 351, 369, 377], "6180210709571838": [94, 111, 119, 351, 369, 377], "12179657071828842": [94, 111, 119, 351, 369, 377], "191165953874588": [94, 111, 119, 351, 369, 377], "4497021436691": [94, 111, 119, 351, 369, 377], "822715163230896": [94, 111, 119, 351, 369, 377], "7568016648292542": [94, 111, 119, 351, 369, 377], "1165061742067337": [94, 111, 119, 351, 369, 377], "59048593044281": [94, 111, 119, 351, 369, 377], "bge": [95, 352], "baai": [95, 352], "dimension": [95, 115, 141, 352, 373, 400], "retriev": [95, 101, 104, 106, 113, 117, 128, 181, 184, 185, 186, 234, 237, 240, 259, 352, 358, 362, 364, 371, 375, 387, 439, 443, 444, 445, 493, 497, 500, 520, 524, 525], "bge_bas": [95, 352], "c": [95, 96, 100, 116, 125, 170, 196, 259, 317, 352, 353, 357, 374, 384, 429, 455], "pack": [95, 352], "chines": [95, 165, 196, 352, 423, 455], "github": [95, 98, 104, 106, 109, 110, 114, 170, 173, 177, 178, 240, 260, 317, 352, 355, 362, 364, 367, 368, 372, 429, 432, 436, 437, 500], "significantli": [95, 98, 103, 110, 111, 118, 119, 125, 175, 177, 178, 352, 355, 360, 368, 369, 376, 377, 384, 434, 436, 437], "critic": [95, 172, 352, 431], "mteb": [95, 101, 352, 358], "cover": [95, 155, 163, 169, 172, 179, 196, 352, 414, 421, 428, 431, 438, 455, 477], "mtp": [95, 352], "massiv": [95, 169, 352, 428], "curat": [95, 101, 109, 113, 352, 358, 367, 371], "corpora": [95, 107, 125, 130, 352, 365, 384, 388], "tem": [95, 352], "stateof": [95, 352], "meanwhil": [95, 352], "publicli": [95, 98, 118, 119, 175, 352, 355, 376, 377, 434], "flagopen": [95, 352], "flagembed": [95, 352], "useclstoken": [95, 214, 221, 352, 480], "protein": [95, 101, 109, 352, 358, 367], "femal": [95, 101, 109, 352, 358, 367], "eat": [95, 101, 109, 161, 203, 352, 358, 367, 419, 461], "guidelin": [95, 101, 109, 352, 358, 367], "cdc": [95, 101, 109, 352, 358, 367], "women": [95, 101, 109, 352, 358, 367], "70": [95, 101, 104, 109, 167, 168, 174, 352, 358, 362, 367, 426, 427, 433], "46": [95, 101, 109, 255, 352, 358, 367, 515], "dai": [95, 101, 109, 131, 132, 183, 352, 358, 367, 389, 391, 441], "chart": [95, 101, 109, 234, 352, 358, 367, 493, 520], "ll": [95, 101, 109, 196, 352, 358, 367, 455], "marathon": [95, 101, 109, 352, 358, 367], "below": [95, 101, 109, 123, 352, 358, 367, 381, 529], "0190285e": [95, 101, 109, 352, 358, 367], "005974853": [95, 101, 109, 352, 358, 367], "072875895": [95, 101, 109, 352, 358, 367], "007944068": [95, 101, 109, 352, 358, 367], "026059335": [95, 101, 109, 352, 358, 367], "0080": [95, 101, 109, 352, 358, 367], "050514214": [95, 101, 109, 352, 358, 367], "010061974": [95, 101, 109, 352, 358, 367], "04340176": [95, 101, 109, 352, 358, 367], "020937217": [95, 101, 109, 352, 358, 367], "05170225": [95, 101, 109, 352, 358, 367], "01157857": [95, 101, 109, 352, 358, 367], "bge_small_en_v1": [95, 352], "tasti": [96, 353], "french": [96, 125, 170, 187, 317, 353, 384, 429, 446], "loui": [96, 353], "martin": [96, 353], "muller": [96, 353], "pedro": [96, 353], "javier": [96, 353], "ortiz": [96, 353], "su\u00e1rez": [96, 353], "yoann": [96, 353], "dupont": [96, 353], "laurent": [96, 353], "romari": [96, 353], "\u00e9ric": [96, 353], "villemont": [96, 353], "la": [96, 146, 170, 317, 353, 405, 429], "clergeri": [96, 353], "djam\u00e9": [96, 353], "seddah": [96, 353], "beno\u00eet": [96, 353], "sagot": [96, 353], "facebook": [96, 98, 118, 119, 163, 353, 355, 376, 377, 421], "138gb": [96, 353], "camembert_bas": [96, 353], "camembertembeddingstestspec": [96, 353], "co": [96, 102, 125, 174, 175, 176, 353, 359, 384, 433, 434, 435], "now": [96, 141, 155, 208, 259, 353, 400, 414, 467, 525], "ubiquit": [96, 173, 353, 432], "despit": [96, 163, 175, 353, 421, 434], "concaten": [96, 196, 237, 353, 455, 497], "except": [96, 135, 140, 141, 189, 193, 237, 245, 347, 353, 394, 399, 400, 452, 497, 505], "investig": [96, 99, 115, 353, 356, 373], "feasibl": [96, 353], "monolingu": [96, 118, 119, 353, 376, 377], "crawl": [96, 163, 179, 353, 421, 438], "prefer": [96, 123, 175, 204, 353, 381, 434, 462], "wikipedia": [96, 127, 166, 236, 249, 353, 386, 424, 496, 509], "surprisingli": [96, 115, 353, 373], "4gb": [96, 353], "130": [96, 353], "gb": [96, 353], "reach": [96, 125, 166, 196, 353, 384, 424, 455], "four": [96, 155, 162, 194, 196, 353, 414, 420, 453, 455], "un": [96, 127, 353, 386], "08442357927560806": [96, 353], "12863239645957947": [96, 353], "03835778683423996": [96, 353], "200479581952": [96, 353], "048462312668561935": [96, 353], "12637358903884888": [96, 353], "27429091930389404": [96, 353], "07516729831": [96, 353], "02690504491329193": [96, 353], "12104076147079468": [96, 353], "012526623904705048": [96, 353], "031543646007": [96, 353], "05877285450696945": [96, 353], "08773420006036758": [96, 353], "06381352990865707": [96, 353], "122621834278": [96, 353], "aggreg": [97, 112, 181, 354, 370, 439], "sum": [97, 103, 112, 221, 354, 360, 370, 480], "discard": [97, 143, 354, 402], "oov": [97, 354], "55661": [97, 354], "42829502": [97, 354], "86661": [97, 354], "409785": [97, 354], "06316501": [97, 354], "120775": [97, 354], "0732005": [97, 354], "40674996": [97, 354], "22938299": [97, 354], "50597": [97, 354], "288195": [97, 354], "555655": [97, 354], "465145": [97, 354], "140118": [97, 354], "17417": [97, 354], "095253006": [97, 354], "0530925": [97, 354], "218465": [97, 354], "714395": [97, 354], "79860497": [97, 354], "0129999": [97, 354], "139705": [97, 354], "177955": [97, 354], "1887775": [97, 354], "45545": [97, 354], "20030999": [97, 354], "461557": [97, 354], "07891501": [97, 354], "disentangl": [98, 355], "pengcheng": [98, 355], "xiaodong": [98, 355], "jianfeng": [98, 355], "gao": [98, 355], "weizhu": [98, 355], "chen": [98, 110, 111, 355, 368, 369], "2018": [98, 110, 111, 355, 368, 369], "half": [98, 125, 355, 384], "deberta_v3_bas": [98, 355], "microsoft": [98, 101, 107, 109, 170, 174, 175, 176, 317, 355, 358, 365, 367, 429, 433, 434, 435], "www": [98, 236, 238, 249, 355, 496, 498, 509], "blog": [98, 177, 355, 436], "superglu": [98, 355], "progress": [98, 155, 192, 355, 414, 451], "mechan": [98, 105, 355, 363], "weight": [98, 103, 109, 125, 139, 142, 164, 173, 178, 183, 355, 360, 367, 384, 398, 401, 422, 432, 437, 441], "among": [98, 107, 165, 174, 175, 355, 365, 423, 433, 434], "matric": [98, 355], "second": [98, 103, 133, 154, 187, 192, 210, 237, 355, 360, 392, 413, 446, 451, 469, 497, 524], "mnli": [98, 355], "90": [98, 355], "91": [98, 355], "88": [98, 355], "fast": [99, 158, 167, 170, 208, 317, 356, 417, 426, 429, 467, 528], "cheap": [99, 356], "distil": [99, 106, 356, 364], "40": [99, 101, 142, 160, 162, 164, 167, 168, 170, 172, 176, 317, 356, 358, 401, 418, 420, 422, 426, 427, 429, 431, 435], "uncas": [99, 113, 356, 371], "run": [99, 125, 181, 234, 241, 259, 347, 356, 384, 439, 493, 501, 521, 529], "95": [99, 162, 249, 356, 420, 509], "distilbert_base_cas": [99, 356], "doesn": [99, 110, 356, 368], "token_type_id": [99, 110, 356, 368], "indic": [99, 110, 161, 192, 196, 356, 368, 419, 451, 455], "belong": [99, 110, 175, 356, 368, 434], "sep_token": [99, 110, 356, 368], "sep": [99, 356], "position_id": [99, 356], "ad": [99, 103, 146, 161, 183, 203, 210, 237, 238, 249, 356, 360, 405, 419, 441, 461, 469, 509], "though": [99, 125, 356, 384], "let": [99, 146, 191, 259, 356, 405, 450, 524], "know": [99, 170, 211, 317, 356, 429, 470], "cheaper": [99, 356], "lighter": [99, 356], "preval": [99, 356], "constrain": [99, 160, 161, 162, 221, 356, 418, 419, 420, 480], "budget": [99, 356], "counterpart": [99, 356], "leverag": [99, 107, 113, 171, 234, 356, 365, 371, 430, 493, 520], "knowledg": [99, 125, 173, 174, 175, 177, 204, 210, 259, 356, 384, 432, 433, 434, 436, 462, 469], "reduc": [99, 107, 171, 174, 184, 185, 213, 356, 365, 430, 433, 443, 444, 472], "retain": [99, 356], "97": [99, 131, 132, 196, 356, 389, 391, 455], "tripl": [99, 123, 356, 381], "cosin": [99, 114, 356, 372], "distanc": [99, 162, 181, 183, 184, 185, 356, 420, 439, 441, 443, 444], "proof": [99, 356], "concept": [99, 356, 525], "experi": [99, 114, 120, 146, 163, 165, 171, 234, 356, 372, 378, 405, 421, 423, 430, 493, 521], "1127224713563919": [99, 356], "1982710212469101": [99, 356], "5360898375511169": [99, 356], "272536993026733": [99, 356], "35534414649009705": [99, 356], "13215228915214539": [99, 356], "40981462597846985": [99, 356], "14036104083061": [99, 356], "328085333108902": [99, 356], "06269335001707077": [99, 356], "017595693469047546": [99, 356], "024373905733": [99, 356], "15617232024669647": [99, 356], "2967822253704071": [99, 356], "22324979305267334": [99, 356], "04568954557180": [99, 356], "45411425828933716": [99, 356], "01173491682857275": [99, 356], "190129816532135": [99, 356], "1178255230188369": [99, 356], "corpu": [100, 103, 116, 125, 128, 152, 163, 179, 182, 183, 185, 253, 357, 360, 374, 384, 387, 411, 421, 438, 441, 444, 513, 530], "algorithm": [100, 116, 125, 139, 158, 183, 184, 185, 186, 357, 374, 384, 398, 417, 441, 443, 444], "appear": [100, 116, 146, 162, 183, 357, 374, 405, 420, 441], "divid": [100, 116, 357, 374], "1000": [100, 116, 123, 139, 357, 374, 381, 398], "025": [100, 116, 158, 357, 374], "estim": [100, 116, 188, 205, 232, 237, 357, 374, 447, 463, 473, 482, 492, 524], "composition": [100, 116, 357, 374], "numiter": [100, 116, 357, 374], "equal": [100, 116, 357, 374], "doc2vec_gigaword_300": [100, 357], "06222493574023247": [100, 116, 357, 374], "011579325422644615": [100, 116, 357, 374], "009919632226228714": [100, 116, 357, 374], "109361454844": [100, 116, 357, 374], "doc2vec_wiki": [100, 357], "e5": [101, 102, 358, 359], "weakli": [101, 109, 358, 367], "tailor": [101, 104, 172, 358, 362, 431], "e5_smal": [101, 358], "unilm": [101, 109, 358, 367], "manner": [101, 125, 358, 384], "signal": [101, 103, 358, 360], "ccpair": [101, 358], "readili": [101, 358], "conduct": [101, 114, 358, 372], "extens": [101, 114, 171, 178, 230, 358, 372, 430, 437, 489], "56": [101, 253, 358, 513], "beir": [101, 358], "bm25": [101, 358], "baselin": [101, 115, 166, 358, 373, 424], "beat": [101, 358], "exist": [101, 103, 113, 114, 146, 165, 169, 183, 201, 204, 221, 234, 238, 246, 247, 257, 358, 360, 371, 372, 405, 423, 428, 441, 459, 462, 480, 493, 498, 506, 507, 517], "royokong": [102, 359], "bridg": [102, 359], "modal": [102, 359], "gap": [102, 172, 359, 431], "even": [102, 125, 131, 165, 168, 177, 179, 359, 384, 389, 423, 427, 436, 438], "exclus": [102, 146, 177, 359, 405, 436], "yield": [102, 359], "e5v": [102, 359], "e5v_int4": [102, 359], "nsummari": [102, 359], "imageprompt": [102, 359], "textprompt": [102, 359], "sent": [102, 125, 359, 384], "textdesc": [102, 359], "sit": [102, 130, 134, 162, 359, 388, 393, 420], "nullimagedf": [102, 359], "sparkcontext": [102, 359], "engin": [102, 170, 171, 190, 214, 221, 317, 359, 429, 430, 448, 480], "elmo": [103, 360], "billion": [103, 164, 166, 167, 168, 171, 174, 175, 178, 360, 422, 424, 426, 427, 430, 433, 434, 437], "lookup": [103, 117, 120, 130, 160, 161, 162, 184, 185, 224, 360, 375, 378, 388, 418, 419, 420, 443, 444, 483], "word_emb": [103, 360], "shape": [103, 360], "batch_siz": [103, 360], "max_length": [103, 360], "lstm_outputs1": [103, 360], "lstm": [103, 140, 360, 399], "lstm_outputs2": [103, 360], "trainabl": [103, 360], "contextu": [103, 163, 168, 172, 183, 360, 421, 427, 431, 441], "characterist": [103, 237, 360], "syntax": [103, 360], "vari": [103, 146, 177, 360, 405, 436], "linguist": [103, 196, 360, 455], "polysemi": [103, 360], "bilm": [103, 360], "six": [103, 184, 185, 360, 443, 444], "textual": [103, 104, 114, 171, 237, 360, 362, 372, 430, 497], "entail": [103, 360], "expos": [103, 360], "crucial": [103, 113, 114, 360, 371, 372], "semi": [103, 360], "662458181381226e": [103, 360], "2541114091873169": [103, 360], "6275503039360046": [103, 360], "5787073969841": [103, 360], "19154725968837738": [103, 360], "22998669743537903": [103, 360], "2894386649131775": [103, 360], "21524395048618": [103, 360], "10400570929050446": [103, 360], "12288510054349899": [103, 360], "07056470215320587": [103, 360], "246389418840": [103, 360], "49932169914245605": [103, 360], "12706467509269714": [103, 360], "30969417095184326": [103, 360], "2643227577209": [103, 360], "8871506452560425": [103, 360], "20039963722229004": [103, 360], "0601330995559692": [103, 360], "0348707810044": [103, 360], "instructor": [104, 362], "finetun": [104, 105, 120, 177, 362, 363, 378, 436], "financ": [104, 362], "sota": [104, 114, 120, 362, 372, 378], "divers": [104, 115, 163, 166, 168, 178, 179, 362, 373, 421, 424, 427, 437, 438, 521], "medicin": [104, 362], "instructor_bas": [104, 362], "summar": [104, 105, 125, 163, 164, 166, 170, 179, 221, 257, 317, 362, 363, 384, 421, 422, 424, 429, 438, 480], "embedd": [104, 362], "hkunlp": [104, 362], "explain": [104, 234, 362, 493, 520, 527, 529], "special": [104, 141, 161, 177, 183, 196, 362, 400, 419, 436, 441, 455, 487, 525], "330": [104, 362], "mixtur": [104, 172, 177, 362, 431, 436], "66": [104, 142, 362, 401], "unseen": [104, 362], "suggest": [104, 166, 362, 424], "mitig": [104, 114, 362, 372], "io": [104, 177, 362, 436], "dynam": [104, 160, 161, 162, 170, 221, 317, 362, 418, 419, 420, 429, 480], "scalar": [104, 362], "degre": [104, 362], "freedom": [104, 362], "horava": [104, 362], "lifshitz": [104, 362], "graviti": [104, 362], "iz": [105, 363], "beltagi": [105, 363], "matthew": [105, 363], "arman": [105, 363], "cohan": [105, 363], "checkpoint": [105, 173, 363, 432], "mlm": [105, 107, 363, 365], "096": [105, 363], "longformer_base_4096": [105, 363], "unabl": [105, 363], "quadrat": [105, 363], "linearli": [105, 363], "easi": [105, 363], "thousand": [105, 169, 172, 363, 428, 431], "drop": [105, 187, 363, 446], "motiv": [105, 363], "global": [105, 172, 363, 431], "text8": [105, 363], "enwik8": [105, 363], "wikihop": [105, 363], "triviaqa": [105, 363], "led": [105, 110, 111, 125, 363, 368, 369, 384], "found": [105, 117, 125, 184, 191, 199, 251, 363, 375, 384, 443, 450, 457, 510, 527], "18792399764060974": [105, 110, 363, 368], "14591649174690247": [105, 110, 363, 368], "20547787845134735": [105, 110, 363, 368], "1468472778797": [105, 110, 363, 368], "22845706343650818": [105, 110, 363, 368], "18073144555091858": [105, 110, 363, 368], "09725798666477203": [105, 110, 363, 368], "0417917296290": [105, 110, 363, 368], "07037967443466187": [105, 110, 363, 368], "14801117777824402": [105, 110, 363, 368], "03603338822722435": [105, 110, 363, 368], "17893412709": [105, 110, 363, 368], "08734266459941864": [105, 110, 363, 368], "2486150562763214": [105, 110, 363, 368], "009067727252840996": [105, 110, 363, 368], "24408400058": [105, 110, 363, 368], "22409197688102722": [105, 110, 363, 368], "4312366545200348": [105, 110, 363, 368], "1401449590921402": [105, 110, 363, 368], "356410235166549": [105, 110, 363, 368], "minilm": [106, 364], "minilm_l6_v2": [106, 364], "agnost": [106, 364], "3x": [106, 364], "5x": [106, 364], "22x": [106, 364], "12x": [106, 364], "1234567": [106, 364], "2345678": [106, 364], "3456789": [106, 364], "4567890": [106, 364], "5678901": [106, 364], "6789012": [106, 364], "7890123": [106, 364], "adopt": [107, 171, 365, 430], "permut": [107, 120, 365, 378], "inherit": [107, 318, 365, 439, 474, 492], "advantag": [107, 211, 365, 470], "all_mpnet_base_v2": [107, 365], "neglect": [107, 120, 365, 378], "plm": [107, 365], "doe": [107, 118, 125, 138, 141, 169, 170, 172, 208, 211, 241, 365, 376, 384, 397, 400, 428, 429, 431, 467, 470, 501, 525, 528, 529], "full": [107, 109, 120, 177, 178, 236, 237, 238, 365, 367, 378, 436, 437, 496, 524], "thu": [107, 125, 365, 384], "suffer": [107, 120, 365, 378], "discrep": [107, 120, 365, 378], "auxiliari": [107, 365], "160gb": [107, 365], "down": [107, 140, 236, 365, 399, 496, 524, 525], "stream": [107, 146, 160, 161, 162, 165, 221, 365, 405, 418, 419, 420, 423, 480], "experiment": [107, 125, 365, 384], "022502584": [107, 365], "078291744": [107, 365], "023030775": [107, 365], "0051000593": [107, 365], "080340415": [107, 365], "039": [107, 365], "041702367": [107, 365], "0010974605": [107, 365], "015534201": [107, 365], "07092203": [107, 365], "0017729357": [107, 365], "04661": [107, 365], "mxbai": [108, 366], "mxbai_large_v1": [108, 366], "hello": [108, 113, 114, 130, 134, 160, 164, 190, 210, 255, 366, 371, 372, 388, 393, 418, 422, 448, 469, 515], "50387806": [108, 113, 114, 366, 371, 372], "5861606": [108, 113, 114, 366, 371, 372], "35129607": [108, 113, 114, 366, 371, 372], "76046336": [108, 113, 114, 366, 371, 372], "32446072": [108, 113, 114, 366, 371, 372], "117674336": [108, 113, 114, 366, 371, 372], "6660665": [108, 113, 114, 366, 371, 372], "961762": [108, 113, 114, 366, 371, 372], "24854276": [108, 113, 114, 366, 371, 372], "1018044": [108, 113, 114, 366, 371, 372], "6569202": [108, 113, 114, 366, 371, 372], "027635604": [108, 113, 114, 366, 371, 372], "1915": [108, 113, 114, 366, 371, 372], "cls_avg": [108, 113, 114, 366, 371, 372], "avg": [108, 113, 114, 366, 371, 372], "nomic": [109, 367], "8192": [109, 367], "ada": [109, 147, 367, 406], "002": [109, 147, 367, 406], "short": [109, 114, 236, 237, 367, 372, 496], "nomic_embed_v1": [109, 367], "technic": [109, 113, 173, 177, 367, 371, 432, 436], "report": [109, 110, 111, 113, 115, 163, 173, 177, 234, 367, 368, 369, 371, 373, 421, 432, 436, 493, 520], "reproduc": [109, 169, 234, 367, 428, 493, 520, 521], "opendata": [109, 367], "licens": [109, 171, 178, 367, 430, 437], "loader": [109, 367], "235": [109, 367], "replic": [109, 110, 111, 163, 367, 368, 369, 421], "embedtext": [109, 367], "nomicai": [109, 367], "contrastor": [109, 367], "robustli": [110, 111, 143, 368, 369, 402], "yinhan": [110, 111, 368, 369], "myle": [110, 111, 118, 119, 368, 369, 376, 377], "ott": [110, 111, 118, 119, 368, 369, 376, 377], "naman": [110, 111, 118, 119, 368, 369, 376, 377], "goyal": [110, 111, 118, 119, 368, 369, 376, 377], "jingfei": [110, 111, 368, 369], "du": [110, 111, 127, 368, 369, 386], "mandar": [110, 111, 368, 369], "joshi": [110, 111, 368, 369], "danqi": [110, 111, 368, 369], "omer": [110, 111, 368, 369], "levi": [110, 111, 368, 369], "mike": [110, 111, 368, 369], "lewi": [110, 111, 368, 369], "luke": [110, 111, 118, 119, 368, 369, 376, 377], "zettlemoy": [110, 111, 118, 119, 368, 369, 376, 377], "veselin": [110, 111, 118, 119, 368, 369, 376, 377], "stoyanov": [110, 111, 118, 119, 368, 369, 376, 377], "hyperparamet": [110, 111, 368, 369], "mini": [110, 111, 175, 368, 369, 434], "roberta_bas": [110, 368], "bpe": [110, 368], "gain": [110, 111, 118, 119, 163, 169, 368, 369, 376, 377, 421, 428], "care": [110, 111, 193, 368, 369, 452], "comparison": [110, 111, 115, 177, 187, 368, 369, 373, 436, 446], "privat": [110, 111, 368, 369, 487], "impact": [110, 111, 368, 369], "carefulli": [110, 111, 146, 178, 368, 369, 405, 437], "undertrain": [110, 111, 368, 369], "highlight": [110, 111, 368, 369], "previous": [110, 111, 125, 177, 368, 369, 384, 436], "overlook": [110, 111, 368, 369], "rais": [110, 111, 125, 135, 140, 141, 234, 347, 368, 369, 384, 394, 399, 400, 493], "sent_roberta_bas": [111, 369], "embeddingssent": [112, 370], "22093398869037628": [112, 370], "25130119919776917": [112, 370], "41810303926467896": [112, 370], "380883991718": [112, 370], "snowflak": [113, 371], "arctic": [113, 371], "snowflake_artic_m": [113, 371], "accur": [113, 115, 158, 163, 184, 371, 373, 417, 421, 443], "deriv": [113, 185, 371, 444], "400m": [113, 371], "public": [113, 123, 241, 257, 371, 381, 501, 524], "1m": [113, 371], "triplet": [113, 371], "harm": [113, 371], "mine": [113, 169, 172, 371, 428, 431], "shortli": [113, 371], "uae": [114, 372], "satur": [114, 372], "uae_large_v1": [114, 372], "st": [114, 372], "vanish": [114, 372], "gradient": [114, 139, 372, 398], "issu": [114, 196, 260, 372, 455], "idea": [114, 120, 372, 378], "advers": [114, 372], "imped": [114, 372], "hinder": [114, 372], "furthermor": [114, 120, 177, 372, 378, 436], "examin": [114, 372], "scenario": [114, 158, 258, 372, 417, 518], "were": [114, 117, 140, 177, 234, 372, 375, 399, 436, 493, 520], "uae_smal": [114, 372], "tfhub_us": [115, 373], "op": [115, 373], "lingual": [115, 118, 119, 125, 127, 170, 317, 373, 376, 377, 384, 386, 429], "trade": [115, 118, 119, 373, 376, 377], "tend": [115, 373], "With": [115, 120, 125, 178, 373, 378, 384, 437], "minim": [115, 143, 170, 246, 248, 317, 373, 402, 429, 506, 508], "encourag": [115, 168, 373, 427], "weat": [115, 373], "bia": [115, 146, 160, 161, 162, 177, 221, 373, 405, 418, 419, 420, 436, 480], "freeli": [115, 373], "04616805538535118": [115, 373], "022307956591248512": [115, 373], "044395286589860916": [115, 373], "0016493503": [115, 373], "changeabl": 115, "nor": [115, 125, 384], "word2vec_gigaword_300": [116, 374], "word2vec_wiki": [116, 374], "setstoragepath": [117, 130, 214, 224, 375, 388, 483], "line": [117, 122, 130, 134, 146, 155, 157, 183, 236, 237, 240, 245, 249, 251, 253, 375, 379, 388, 393, 405, 414, 416, 441, 496, 500, 509, 510, 513], "39658191506190343": [117, 375], "630968081620067": [117, 375], "5393722253731201": [117, 375], "8428180123359783": [117, 375], "7535235923631415": [117, 375], "9699218875629833": [117, 375], "10397182122983872": [117, 375], "11833962569383116": [117, 375], "stress": [117, 375], "0492683418305907": [117, 375], "9415954572751959": [117, 375], "47624463167525755": [117, 375], "16790967216778263": [117, 375], "induc": [117, 375], "1535748762292387": [117, 375], "33498936903209897": [117, 375], "9235178224122094": [117, 375], "1158772920395934": [117, 375], "dump": [117, 375], "10000": [117, 375], "random_embeddings_dim4": [117, 375], "setstorageref": [117, 214, 224, 375, 483], "glove_4d": [117, 375], "setdimens": [117, 214, 221, 375, 480], "patient": [117, 375], "diagnos": [117, 375], "diabet": [117, 375], "9439099431037903": [117, 375], "4707513153553009": [117, 375], "806300163269043": [117, 375], "16176554560661316": [117, 375], "7966810464859009": [117, 375], "5551124811172485": [117, 375], "8861005902290344": [117, 375], "28284206986427307": [117, 375], "025029370561242104": [117, 375], "35177749395370483": [117, 375], "052506182342767715": [117, 375], "1887107789516449": [117, 375], "08617766946554184": [117, 375], "8399239182472229": [117, 375], "5395117998123169": [117, 375], "7864698767662048": [117, 375], "6599600911140442": [117, 375], "16109347343444824": [117, 375], "6041093468666077": [117, 375], "8913561105728149": [117, 375], "5955275893211365": [117, 375], "01899011991918087": [117, 375], "4397728443145752": [117, 375], "8911281824111938": [117, 375], "9840458631515503": [117, 375], "7599489092826843": [117, 375], "9417727589607239": [117, 375], "8624503016471863": [117, 375], "glove_100d": [117, 140, 375, 399], "There": [117, 122, 123, 162, 191, 375, 379, 381, 420, 450, 522, 524, 525, 530], "conveni": [117, 375], "coverag": [117, 219, 375, 477], "stat": [117, 375], "whole": [117, 141, 173, 224, 240, 375, 400, 432, 483, 500], "570580005645752": [117, 375], "44183000922203064": [117, 375], "7010200023651123": [117, 375], "417129993438720": [117, 375], "542639970779419": [117, 375], "4147599935531616": [117, 375], "0321999788284302": [117, 375], "4024400115013122": [117, 375], "2708599865436554": [117, 375], "04400600120425224": [117, 375], "020260000601410866": [117, 375], "17395000159": [117, 375], "6191999912261963": [117, 375], "14650000631809235": [117, 375], "08592499792575836": [117, 375], "2629800140857": [117, 375], "3397899866104126": [117, 375], "20940999686717987": [117, 375], "46347999572753906": [117, 375], "6479200124740": [117, 375], "storage_ref": [117, 122, 130, 224, 375, 379, 388, 483], "embeddings_col": [117, 375], "coverateresult": [117, 375], "wordsoverallcoverag": [117, 375], "resultdf": [117, 238, 375, 498], "output_col": [117, 375], "wordscoverag": [117, 375], "cov_embed": [117, 375], "alexi": [118, 119, 376, 377], "conneau": [118, 119, 376, 377], "kartikai": [118, 119, 376, 377], "khandelw": [118, 119, 376, 377], "vishrav": [118, 119, 376, 377], "chaudhari": [118, 119, 376, 377], "guillaum": [118, 119, 376, 377], "wenzek": [118, 119, 376, 377], "francisco": [118, 119, 125, 376, 377, 384], "guzman": [118, 376], "edouard": [118, 119, 376, 377], "grave": [118, 119, 376, 377], "5tb": [118, 119, 376, 377], "commoncrawl": [118, 119, 376, 377], "xlm_roberta_bas": [118, 376], "abl": [118, 160, 169, 179, 234, 376, 418, 428, 438, 493, 523], "terabyt": [118, 119, 376, 377], "r": [118, 119, 125, 164, 376, 377, 384, 422], "mbert": [118, 119, 376, 377], "xnli": [118, 119, 376, 377], "mlqa": [118, 119, 376, 377], "particularli": [118, 119, 163, 177, 376, 377, 421, 436], "swahili": [118, 119, 376, 377], "urdu": [118, 119, 376, 377], "capac": [118, 119, 166, 169, 376, 377, 424, 428], "dilut": [118, 119, 376, 377], "sacrif": [118, 119, 376, 377], "ri": [118, 119, 376, 377], "05969233065843582": [118, 376], "030789051204919815": [118, 376], "04443822056055069": [118, 376], "09564960747": [118, 376], "038839809596538544": [118, 376], "011712731793522835": [118, 376], "019954433664679527": [118, 376], "0667808502": [118, 376], "03952755779027939": [118, 376], "03455188870429993": [118, 376], "019103847444057465": [118, 376], "04311436787": [118, 376], "09579929709434509": [118, 376], "02494969218969345": [118, 376], "014753809198737144": [118, 376], "10259044915": [118, 376], "004710011184215546": [118, 376], "022148698568344116": [118, 376], "011723337695002556": [118, 376], "013356896": [118, 376], "guzm\u00e3": [119, 377], "sent_xlm_roberta_bas": [119, 377], "xl": [120, 236, 238, 243, 246, 249, 378, 496, 498, 506, 509], "exhibit": [120, 378], "involv": [120, 155, 173, 378, 414, 432], "rank": [120, 161, 165, 181, 183, 203, 221, 378, 419, 423, 439, 441, 461, 480], "xlnet_large_cas": [120, 378], "xlnet_base_cas": [120, 378], "zihangdai": [120, 378], "denois": [120, 163, 378, 421], "autoencod": [120, 163, 378, 421], "corrupt": [120, 163, 378, 421], "pro": [120, 378], "con": [120, 378], "likelihood": [120, 146, 378, 405], "overcom": [120, 378], "formul": [120, 378], "6287205219268799": [120, 378], "4865287244319916": [120, 378], "186111718416214": [120, 378], "234187275171279": [120, 378], "1967450380325317": [120, 378], "2746637463569641": [120, 378], "9481253027915955": [120, 378], "3431355059146881": [120, 378], "0777631998062134": [120, 378], "092679977416992": [120, 378], "5331977605819702": [120, 378], "11190271377563": [120, 378], "8349916934967041": [120, 378], "45627787709236145": [120, 378], "7890847325325012": [120, 378], "028069257736": [120, 378], "134845569729805": [120, 378], "11672890186309814": [120, 378], "4945235550403595": [120, 378], "66587203741073": [120, 378], "alphabet": [121, 122, 144, 379, 403], "patternsresourc": [121, 122, 379], "sentencematch": [121, 122, 379], "setalphabetresourc": [121, 122, 379], "setpatternsresourc": [121, 122, 379], "setsentencematch": [121, 122, 379], "setusestorag": [121, 122, 379], "usestorag": [121, 122, 379], "entityrul": [122, 379], "exact": [122, 130, 134, 146, 379, 388, 393, 405], "definit": [122, 143, 251, 379, 402, 510], "jsonl": [122, 379], "might": [122, 140, 196, 379, 399, 455, 529], "rule": [122, 129, 131, 133, 157, 189, 191, 193, 220, 225, 237, 238, 379, 389, 392, 416, 450, 452, 479, 484], "winterfel": [122, 379], "jon": [122, 379], "snow": [122, 142, 162, 183, 379, 401, 420, 441], "stark": [122, 379], "eddard": [122, 379], "rocksdb": [122, 379], "lord": [122, 379], "29": [122, 142, 196, 253, 255, 379, 401, 455, 513, 515], "38": [122, 175, 246, 255, 379, 434, 506, 515], "plain": [122, 236, 237, 238, 246, 248, 379, 496, 497, 498, 506, 508, 530], "entity_pattern": [122, 379], "graph": [123, 140, 141, 170, 183, 188, 204, 317, 381, 399, 400, 429, 441, 447, 462], "relev": [123, 125, 146, 158, 161, 203, 381, 384, 405, 419, 461], "taken": [123, 381], "implicitli": [123, 381], "travers": [123, 381], "neighbor": [123, 181, 381, 439], "symbol": [123, 183, 196, 381, 441, 455], "coordin": [123, 154, 237, 245, 249, 381, 413, 497, 509], "remoteloc": [123, 381], "rdf": [123, 204, 381, 462], "nertagg": [123, 139, 140, 141, 142, 381, 398, 399, 400, 401], "morn": [123, 204, 381, 462], "flight": [123, 204, 381, 462], "denver": [123, 204, 381, 462], "18": [123, 131, 132, 135, 138, 142, 162, 208, 226, 240, 381, 389, 391, 394, 397, 401, 420, 467, 485, 500, 523], "path1": [123, 381], "iob": [123, 138, 139, 140, 381, 397, 398, 399], "iob2": [123, 138, 381, 397], "getstopword": [124, 125, 384], "maxngram": [124, 125, 384], "minngram": [124, 125, 384], "nkeyword": [124, 125, 384], "setmaxngram": [124, 125, 384], "setminngram": [124, 125, 384], "setnkeyword": [124, 125, 384], "yake": [125, 384], "independ": [125, 184, 185, 191, 384, 443, 444, 450], "grow": [125, 384], "autom": [125, 171, 384, 430], "adequ": [125, 384], "emerg": [125, 163, 179, 384, 421, 438], "tool": [125, 146, 163, 177, 178, 210, 384, 405, 421, 436, 437, 469], "thesauri": [125, 384], "neither": [125, 384], "written": [125, 170, 317, 384, 429], "plethora": [125, 384], "situat": [125, 155, 384, 414], "access": [125, 173, 210, 384, 432, 469], "restrict": [125, 174, 384, 433], "therefor": [125, 384, 528], "boundari": [125, 154, 155, 158, 193, 196, 236, 237, 238, 384, 413, 414, 417, 452, 455, 496], "detector": [125, 131, 157, 384, 389, 416], "section": [125, 200, 209, 237, 238, 384, 458, 468, 520, 522, 528], "tweakabl": [125, 384], "upper": [125, 384], "bound": [125, 154, 155, 158, 384, 413, 414, 417], "occurr": [125, 220, 384, 479], "campo": [125, 384], "mangaravit": [125, 384], "pasquali": [125, 384], "jatowt": [125, 384], "jorg": [125, 384], "nune": [125, 384], "journal": [125, 196, 384, 455], "elsevi": [125, 384], "vol": [125, 384], "509": [125, 384], "pp": [125, 196, 384, 455], "257": [125, 384], "289": [125, 384], "turn": [125, 213, 384, 472, 524], "come": [125, 138, 146, 167, 173, 384, 397, 405, 426, 432], "fly": [125, 384], "demand": [125, 384], "within": [125, 152, 158, 163, 166, 193, 199, 238, 246, 247, 384, 411, 417, 421, 424, 452, 457, 498, 506, 507], "resort": [125, 384], "alwai": [125, 146, 168, 173, 174, 175, 177, 179, 347, 384, 405, 427, 432, 433, 434, 436, 438], "solut": [125, 171, 384, 430], "articl": [125, 183, 384, 441], "rest": [125, 138, 384, 397], "extern": [125, 128, 133, 134, 139, 140, 141, 183, 188, 211, 225, 251, 252, 253, 254, 259, 384, 387, 392, 393, 399, 400, 441, 447, 470, 484, 510, 511, 513, 514], "merit": [125, 384], "ten": [125, 384], "carri": [125, 161, 203, 384, 419, 461], "twenti": [125, 384], "setcontextchar": [125, 189, 193, 384, 452], "acquir": [125, 384], "kaggl": [125, 178, 384, 437], "platform": [125, 146, 147, 234, 384, 405, 406, 493, 522], "host": [125, 384], "transact": [125, 384], "somewhat": [125, 384], "vagu": [125, 384], "confer": [125, 384], "week": [125, 131, 132, 190, 384, 389, 391, 448], "announc": [125, 142, 384, 401], "earli": [125, 384], "tomorrow": [125, 131, 132, 384, 389, 391], "founder": [125, 384], "ceo": [125, 384], "anthoni": [125, 384], "goldbloom": [125, 384], "declin": [125, 384], "deni": [125, 384], "acquisit": [125, 384], "happen": [125, 384], "rumor": [125, 384], "scientist": [125, 384], "ben": [125, 384], "hamner": [125, 384], "2010": [125, 384], "servic": [125, 146, 170, 317, 384, 405, 429], "got": [125, 384], "few": [125, 193, 253, 384, 452, 513, 530], "competitor": [125, 384], "drivendata": [125, 384], "topcod": [125, 384], "hackerrank": [125, 384], "manag": [125, 241, 259, 384, 501, 521], "stai": [125, 384], "ahead": [125, 384], "nich": [125, 384], "bui": [125, 252, 384, 511], "commun": [125, 167, 168, 173, 174, 384, 426, 427, 432, 433], "mindshar": [125, 384], "too": [125, 157, 384, 416, 523], "plenti": [125, 384], "bit": [125, 155, 384, 414, 529], "histori": [125, 155, 183, 384, 414, 441], "earlier": [125, 384], "month": [125, 131, 132, 253, 384, 389, 391, 513, 530], "team": [125, 170, 234, 317, 384, 429, 493, 520], "around": [125, 162, 172, 384, 420, 431], "youtub": [125, 384], "interest": [125, 173, 174, 175, 177, 384, 432, 433, 434, 436], "kernel": [125, 384], "On": [125, 165, 166, 170, 317, 384, 423, 424, 429], "analyz": [125, 158, 384, 417], "compani": [125, 170, 317, 384, 429], "script": [125, 169, 384, 428], "centric": [125, 169, 172, 384, 428, 431], "job": [125, 199, 384, 457], "board": [125, 152, 253, 384, 411, 513], "unclear": [125, 384], "crunchbas": [125, 384], "pitchbook": [125, 384], "launch": [125, 384], "investor": [125, 384], "ventur": [125, 384], "sv": [125, 384], "angel": [125, 165, 384, 423], "levchin": [125, 384], "naravik": [125, 384], "chie": [125, 384], "economist": [125, 384], "hal": [125, 384], "varian": [125, 384], "khosla": [125, 384], "yuri": [125, 384], "milner": [125, 384], "resulttupl": [125, 384], "ascend": [125, 384], "orderbi": [125, 384], "32051516486864573": [125, 384], "37786450577630676": [125, 384], "39922830978423146": [125, 384], "40224744669493756": [125, 384], "41584827825302534": [125, 384], "danish": [125, 187, 384, 446], "dutch": [125, 187, 384, 446], "finnish": [125, 187, 384, 446], "german": [125, 187, 251, 384, 446, 510, 530], "hungarian": [125, 187, 384, 446], "italian": [125, 146, 183, 187, 384, 405, 441, 446], "norwegian": [125, 187, 384, 446], "portugues": [125, 187, 384, 446], "russian": [125, 187, 384, 446], "spanish": [125, 187, 384, 446], "swedish": [125, 187, 384, 446], "turkish": [125, 187, 384, 446], "ld": [127, 382, 386], "identif": [127, 224, 386, 483], "rnn": [127, 386], "tatoeba": [127, 386], "wiki": [127, 386], "languagedetector": [127, 386], "ld_wiki_tatoeba_cnn_21": [127, 386], "java": [127, 241, 259, 318, 386, 439, 473, 474, 482, 488, 489, 492, 501, 508], "scala": [127, 318, 386, 439, 473, 474, 482, 488, 492, 508], "program": [127, 178, 386, 437], "biblioth\u00e8qu": [127, 386], "traitement": [127, 386], "pour": [127, 386], "le": [127, 170, 317, 386, 429], "avanc\u00e9": [127, 386], "langag": [127, 386], "naturel": [127, 386], "programm": [127, 386], "ist": [127, 386], "ein": [127, 386], "textverarbeitungsbibliothek": [127, 386], "f\u00fcr": [127, 386], "fortgeschritten": [127, 386], "nat\u00fcrlich": [127, 386], "sprachverarbeitung": [127, 386], "die": [127, 386], "programmiersprachen": [127, 386], "und": [127, 386], "lemma": [128, 157, 208, 240, 252, 387, 416, 467, 500, 511, 525, 528, 529], "predefin": [128, 130, 133, 134, 157, 387, 388, 392, 393, 416], "lemmas_smal": [128, 157, 387, 416], "keydelimit": 128, "valuedelimit": 128, "correspend": [128, 387], "key_delimit": [128, 387], "value_delimit": [128, 387], "fromlemma": [128, 387], "lemma_antbnc": [128, 387], "mergeoverlap": [129, 130, 134, 388, 393], "setent": [129, 130, 134, 136, 137, 190, 388, 393, 396, 448], "setmergeoverlap": [129, 130, 134, 388, 393], "settoken": [129, 130, 388], "searchtri": [129, 130, 134, 388, 393], "aggressivematch": [129, 131, 389], "anchordatedai": [129, 131, 132, 389, 391], "anchordatemonth": [129, 131, 132, 389, 391], "anchordateyear": [129, 131, 132, 389, 391], "defaultdaywhenmiss": [129, 131, 132, 389, 391], "inputformat": [129, 131, 197, 212, 389, 471], "outputformat": [129, 131, 235, 237, 389, 497], "readmonthfirst": [129, 131, 132, 389, 391], "relaxedfactorystrategi": [129, 131, 389], "setaggressivematch": [129, 131, 389], "setanchordatedai": [129, 131, 132, 389, 391], "setanchordatemonth": [129, 131, 132, 389, 391], "setanchordateyear": [129, 131, 132, 389, 391], "setdefaultdaywhenmiss": [129, 131, 389], "setinputformat": [129, 131, 197, 212, 389, 471], "setoutputformat": [129, 131, 132, 235, 237, 389, 391, 497], "setreadmonthfirst": [129, 131, 389], "setrelaxedfactorystrategi": [129, 131, 389], "setsourcelanguag": [129, 131, 389], "sourcelanguag": [129, 131, 389], "externalrul": [129, 133, 392], "setexternalrul": [129, 133, 392], "setrul": [129, 133, 392], "setstrategi": [129, 133, 392], "buildfromtoken": [129, 134, 393], "entityvalu": [129, 134, 393], "setbuildfromtoken": [129, 134, 393], "setentityvalu": [129, 134, 393], "trie": [130, 388], "dolor": [130, 134, 388, 393], "magna": [130, 134, 388, 393], "aliqua": [130, 134, 388, 393], "laborum": [130, 134, 388, 393], "entityextractor": [130, 134, 190, 388, 393, 448], "59": [130, 131, 132, 134, 388, 389, 391, 393], "tokenizer_model": [130, 388], "btm": [130, 388], "tmvocab": [130, 388], "tmedg": [130, 388], "tmnode": [130, 388], "1978": [131, 132, 389, 391], "28": [131, 132, 138, 208, 226, 238, 240, 255, 389, 391, 397, 467, 485, 498, 500, 515, 523], "1984": [131, 132, 389, 391], "04": [131, 132, 389, 391], "02": [131, 132, 389, 391], "1980": [131, 132, 389, 391], "31st": [131, 132, 389, 391], "april": [131, 132, 389, 391], "year": [131, 132, 166, 167, 190, 253, 389, 391, 424, 426, 448, 513], "2008": [131, 132, 389, 391], "fri": [131, 132, 389, 391], "1997": [131, 132, 389, 391], "jan": [131, 132, 389, 391], "sun": [131, 132, 389, 391], "1st": [131, 132, 389, 391], "thursdai": [131, 132, 389, 391], "wednesdai": [131, 132, 389, 391], "todai": [131, 132, 164, 172, 210, 255, 389, 391, 422, 431, 469, 515], "yesterdai": [131, 132, 389, 391], "0600h": [131, 132, 389, 391], "06": [131, 132, 389, 391], "00": [131, 132, 389, 391], "6pm": [131, 132, 389, 391], "23": [131, 132, 133, 142, 152, 253, 254, 255, 389, 391, 392, 401, 411, 513, 514, 515, 530], "1988": [131, 132, 389, 391], "31": [131, 132, 133, 142, 152, 253, 389, 391, 392, 401, 411, 513], "dateformat": [131, 132, 389, 391], "desir": [131, 132, 389, 391], "yyyi": [131, 132, 389, 391], "mm": [131, 132, 196, 389, 391, 455], "dd": [131, 132, 133, 389, 391, 392], "anchor": [131, 132, 389, 391], "januari": [131, 132, 389, 391], "15": [131, 245, 246, 255, 389, 505, 506, 515], "aggress": [131, 389], "attempt": [131, 184, 389, 443], "ambigu": [131, 389], "juli": [131, 389], "07": [131, 389], "05": [131, 162, 245, 389, 420, 505], "2015": [131, 389], "relax": [131, 162, 389, 420], "Not": [131, 140, 211, 389, 399, 470], "5th": [131, 389], "match_first": [131, 133, 214, 220, 389, 392, 479], "exhaust": [131, 389], "saw": [132, 391], "visit": [132, 146, 391, 405], "57": [132, 142, 391, 401], "65": [132, 142, 391, 401], "d": [133, 144, 193, 238, 392, 403, 452, 498, 522], "1970": [133, 392], "match_al": [133, 214, 220, 392, 479], "match_complet": [133, 214, 220, 392, 479], "ceremoni": [133, 392], "71": [133, 392], "short_dat": [133, 392], "regardless": [134, 393], "27": [134, 152, 154, 253, 393, 411, 413, 513], "48": [134, 196, 255, 393, 455, 515], "null": [135, 394], "empti": [135, 162, 181, 188, 199, 208, 236, 237, 246, 394, 420, 439, 457, 467, 496, 506], "join": [135, 152, 210, 212, 236, 237, 246, 253, 394, 411, 469, 471, 496, 497, 506, 513], "minepoch": [136, 137, 139, 140, 396, 398, 399], "setminepoch": [136, 137, 139, 396, 398], "setrandomse": [136, 137, 140, 141, 148, 149, 159, 170, 396, 399, 400, 407, 429], "nerhasnoschema": [136, 138, 397], "preserveposit": [136, 138, 189, 192, 197, 213, 397, 451, 472], "setnerhasnoschema": [136, 138, 397], "setpreserveposit": [136, 138, 189, 192, 197, 213, 397, 451, 472], "setwhitelist": [136, 138, 189, 191, 397, 450], "whitelist": [136, 138, 189, 191, 397, 450], "c0": [136, 139, 398], "externalfeatur": [136, 139, 398], "includeconfid": [136, 139, 140, 398, 399], "l2": [136, 139, 398], "lossep": [136, 139, 398], "minw": [136, 139, 398], "setc0": [136, 139, 398], "setexternalfeatur": [136, 139, 398], "setincludeconfid": [136, 139, 140, 398, 399], "setl2": [136, 139, 398], "setlossep": [136, 139, 398], "setminw": [136, 139, 398], "bestmodelmetr": [136, 140, 399], "enablememoryoptim": [136, 140, 399], "includeallconfidencescor": [136, 140, 399], "setbestmodelmetr": [136, 140, 399], "setenablememoryoptim": [136, 140, 399], "setincludeallconfidencescor": [136, 140, 399], "setpo": [136, 140, 399], "setusebestmodel": [136, 140, 399], "setusecontrib": [136, 140, 399], "usebestmodel": [136, 140, 399], "usecontrib": [136, 140, 399], "embeddingsdim": [136, 141, 400], "setembeddingsdim": [136, 141, 400], "setembeddingsmodel": [136, 141, 400], "nerword": [136, 142, 401], "newnerent": [136, 142, 401], "replaceent": [136, 142, 401], "setnerword": [136, 142, 401], "setnewnerent": [136, 142, 401], "setreplaceent": [136, 142, 401], "ignoreent": [136, 143, 402], "predictionthreshold": [136, 143, 402], "setentitydefinit": [136, 143, 402], "setpredictionthreshold": [136, 143, 402], "recogn": [137, 138, 139, 140, 142, 143, 183, 396, 397, 398, 399, 401, 402, 441], "friendli": [138, 146, 170, 317, 397, 405, 429], "outsid": [138, 397], "ekeu": [138, 139, 140, 208, 226, 240, 397, 398, 399, 467, 485, 500], "36": [138, 152, 208, 226, 240, 253, 255, 397, 411, 467, 485, 500, 513, 515], "baghdad": [138, 139, 140, 208, 226, 240, 397, 398, 399, 467, 485, 500], "37": [138, 208, 226, 240, 397, 467, 485, 500], "nercrf": [139, 398], "crf": [139, 140, 398, 399], "2003": [139, 140, 196, 251, 398, 399, 455, 510, 530], "exclud": [139, 140, 246, 398, 399, 506], "decai": [139, 140, 398, 399], "2250000": [139, 398], "ep": [139, 398], "confid": [139, 140, 143, 398, 399, 402], "trainingdata": [139, 140, 141, 155, 184, 185, 251, 398, 399, 400, 414, 443, 444, 510], "readdataset": [139, 140, 141, 152, 196, 250, 251, 252, 253, 254, 255, 398, 399, 400, 411, 455, 510, 511, 513, 514, 515, 530], "conll2003": [139, 140, 141, 251, 398, 399, 400, 510, 530], "eng": [139, 140, 141, 251, 398, 399, 400, 510, 530], "c0valu": [139, 398], "l2valu": [139, 398], "verbosevalu": [139, 398], "prerequisit": [139, 140, 142, 398, 399, 401, 524], "nerdl": [140, 141, 399, 400], "char": [140, 144, 155, 237, 245, 399, 403, 414], "bilstm": [140, 399], "tagger": [140, 253, 399, 513, 530], "rage": [140, 399], "contrib": [140, 399], "cell": [140, 212, 236, 237, 238, 399, 471, 496, 497], "slightli": [140, 155, 177, 399, 414, 436], "slow": [140, 399], "micro": [140, 399], "macro": [140, 399], "nermodel": [140, 399], "javaestim": [141, 211, 215, 232], "javamlwrit": [141, 215, 216, 223, 229, 245], "least": [141, 160, 161, 162, 196, 221, 400, 418, 419, 420, 455, 480], "nerdlgraphcheckertestspec": [141, 400], "annotatorr": [141, 400], "fall": [141, 177, 400, 436], "cannot": [141, 146, 210, 400, 405, 469], "javamodel": [141, 216, 232], "ident": [141, 181, 400, 439], "setnewresult": [142, 401], "overwritten": [142, 401], "lab": [142, 401], "42": [142, 152, 401, 411], "45": [142, 152, 253, 255, 401, 411, 513, 515], "47": [142, 253, 255, 401, 513, 515], "ner_overwritten": [142, 401], "cardin": [142, 401], "rw": [142, 401], "zeroshotn": [143, 402], "zer_shot_n": [143, 402], "entitydefinit": [143, 402], "citi": [143, 402], "town": [143, 402], "01f": [143, 402], "zero_shot_n": [143, 402], "hellen": [143, 402], "5328949": [143, 402], "9360068": [143, 402], "83294415": [143, 402], "45366877": [143, 402], "shortcut": [143, 402], "zero_shot_ner_roberta": [143, 402], "stem": [144, 186, 208, 240, 403, 445, 467, 500, 528, 529], "henc": [144, 403], "pl": [144, 403], "slang": [144, 403], "alphanumer": [144, 403], "za": [144, 403], "z": [144, 160, 161, 162, 193, 221, 403, 418, 419, 420, 452, 480], "brother": [144, 403], "dont": [144, 158, 403, 417], "sensit": [144, 184, 187, 193, 443, 446, 452], "bestof": [145, 146, 405], "echo": [145, 146, 405], "frequencypenalti": [145, 146, 160, 161, 162, 214, 221, 405, 418, 419, 420, 480], "logitbia": [145, 146, 405], "logprob": [145, 146, 405], "maxtoken": [145, 146, 405], "numberofcomplet": [145, 146, 405], "presencepenalti": [145, 146, 160, 161, 162, 214, 221, 405, 418, 419, 420, 480], "setbestof": [145, 146, 405], "setecho": [145, 146, 405], "setfrequencypenalti": [145, 146, 214, 221, 405, 480], "setlogitbia": [145, 146, 405], "setlogprob": [145, 146, 405], "setmaxtoken": [145, 146, 405], "setmodel": [145, 146, 147, 153, 155, 405, 406, 414], "setnumberofcomplet": [145, 146, 405], "setpresencepenalti": [145, 146, 214, 221, 405, 480], "setstop": [145, 146, 405], "setsuffix": [145, 146, 189, 191, 405, 450], "setus": [145, 146, 147, 405, 406], "suffix": [145, 146, 160, 161, 162, 189, 191, 193, 221, 405, 418, 419, 420, 450, 452, 480, 524], "request": [146, 147, 178, 236, 405, 406, 437, 496], "complet": [146, 160, 161, 162, 178, 221, 234, 405, 418, 419, 420, 437, 480, 493, 521, 524], "api": [146, 147, 260, 405, 406, 520, 524, 527], "insert": [146, 184, 185, 237, 405, 443, 444, 524], "nucleu": [146, 405], "mass": [146, 405], "penal": [146, 160, 161, 162, 221, 405, 418, 419, 420, 480], "topic": [146, 405], "verbatim": [146, 405], "best_of": [146, 405], "server": [146, 160, 161, 162, 405, 418, 419, 420, 529], "side": [146, 162, 165, 196, 405, 420, 423, 455], "abus": [146, 147, 405, 406], "davinci": [146, 405], "003": [146, 405], "empty_df": [146, 147, 405, 406], "sample_text": [146, 147, 405, 406], "restaur": [146, 157, 405, 416], "eateri": [146, 405], "dine": [146, 405], "sample_df": [146, 147, 405, 406], "258": [146, 405], "ni": [146, 210, 405, 469], "pleasur": [146, 405], "fiorita": [146, 405], "truli": [146, 173, 405, 432], "delight": [146, 405], "menu": [146, 405], "boast": [146, 405], "wonder": [146, 405], "classic": [146, 405], "dish": [146, 405], "exquisit": [146, 405], "staff": [146, 157, 405, 416], "227": [146, 405], "barbecu": [146, 405], "joe": [146, 405], "dinner": [146, 405], "amaz": [146, 405], "pull": [146, 178, 405, 437], "pork": [146, 405], "smoke": [146, 405], "turkei": [146, 405], "brisket": [146, 405], "rib": [146, 405], "sandwich": [146, 405], "opt": [146, 405], "172": [146, 405], "overallr": [146, 405], "reviewbodi": [146, 405], "enjoi": [146, 162, 165, 405, 420, 423], "meal": [146, 405], "flavour": [146, 405], "beautifulli": [146, 162, 405, 420], "candid": [146, 183, 184, 185, 193, 405, 441, 443, 444, 452], "consum": [146, 405], "quota": [146, 405], "ensur": [146, 171, 172, 178, 405, 430, 431, 437, 488, 508], "max_token": [146, 405], "mathemat": [146, 165, 171, 177, 405, 423, 430, 436], "ban": [146, 405], "50256": [146, 405], "prevent": [146, 405], "endoftext": [146, 405], "plu": [146, 166, 405, 424], "determinist": [146, 405], "alter": [146, 405], "delici": [147, 406], "waiter": [147, 406], "002297497": [147, 406], "009297881": [147, 406], "015739758": [147, 406], "0076794787": [147, 406], "004737794": [147, 406], "01487661": [147, 406], "009856389": [147, 406], "03823238": [147, 406], "0069305706": [147, 406], "028610818": [147, 406], "025208998": [147, 406], "018138802": [147, 406], "0036271256": [147, 406], "025539026": [147, 406], "204275e": [147, 406], "016374426": [147, 406], "02828079": [147, 406], "0054073683": [147, 406], "009710415": [147, 406], "016399812": [147, 406], "015397037": [147, 406], "00427766": [147, 406], "006987691": [147, 406], "0072859847": [147, 406], "003874646": [147, 406], "018544989": [147, 406], "008752067": [147, 406], "022657635": [147, 406], "011493831": [147, 406], "023901584": [147, 406], "015638212": [147, 406], "0035192322": [147, 406], "034932107": [147, 406], "0041919798": [147, 406], "02612292": [147, 406], "021515233": [147, 406], "005715182": [147, 406], "011754045": [147, 406], "008453773": [147, 406], "004080913": [147, 406], "019179657": [147, 406], "014419649": [147, 406], "00893612": [147, 406], "0063911034": [147, 406], "045670684": [147, 406], "017884934": [147, 406], "005610462": [147, 406], "219344e": [147, 406], "02211182": [147, 406], "0039539794": [147, 406], "021007499": [147, 406], "017631067": [147, 406], "011696924": [147, 406], "02260686": [147, 406], "016336346": [147, 406], "017174106": [147, 406], "008466466": [147, 406], "0015922225": [147, 406], "025094759": [147, 406], "024967825": [147, 406], "007806412": [147, 406], "005794516": [147, 406], "022187982": [147, 406], "0029162979": [147, 406], "0060959826": [147, 406], "025564414": [147, 406], "008104706": [147, 406], "0010178483": [147, 406], "9823447e": [147, 406], "0046425937": [147, 406], "02074094": [147, 406], "013467647": [147, 406], "004626727": [147, 406], "016006319": [147, 406], "0166156": [147, 406], "008948814": [147, 406], "007616012": [147, 406], "013619968": [147, 406], "0069749975": [147, 406], "0052677416": [147, 406], "009881775": [147, 406], "04592455": [147, 406], "0030464048": [147, 406], "024003131": [147, 406], "02301305": [147, 406], "006981344": [147, 406], "023571556": [147, 406], "009938896": [147, 406], "006537077": [147, 406], "033332746": [147, 406], "002690991": [147, 406], "019928563": [147, 406], "0017596161": [147, 406], "001090835": [147, 406], "022683023": [147, 406], "005007528": [147, 406], "01540973": [147, 406], "031530287": [147, 406], "0054676617": [147, 406], "015980931": [147, 406], "0051471544": [147, 406], "019890483": [147, 406], "009386734": [147, 406], "0062133963": [147, 406], "031174876": [147, 406], "009405775": [147, 406], "015270104": [147, 406], "028864685": [147, 406], "021020193": [147, 406], "018303815": [147, 406], "0029210579": [147, 406], "012693353": [147, 406], "005102728": [147, 406], "049580235": [147, 406], "04300508": [147, 406], "1293065e": [147, 406], "0215787": [147, 406], "016894853": [147, 406], "0065434235": [147, 406], "041431103": [147, 406], "662815e": [147, 406], "03351045": [147, 406], "0128901": [147, 406], "010510096": [147, 406], "807209e": [147, 406], "01835459": [147, 406], "2869726e": [147, 406], "01309954": [147, 406], "011982525": [147, 406], "005813556": [147, 406], "0070194243": [147, 406], "008637827": [147, 406], "018456135": [147, 406], "5521466e": [147, 406], "019141577": [147, 406], "021896034": [147, 406], "02975322": [147, 406], "0043220865": [147, 406], "0015160623": [147, 406], "0052074483": [147, 406], "0149527695": [147, 406], "0213883": [147, 406], "018836936": [147, 406], "01105591": [147, 406], "0074636918": [147, 406], "022632249": [147, 406], "0036810723": [147, 406], "006286383": [147, 406], "025678653": [147, 406], "027773056": [147, 406], "03668379": [147, 406], "00445854": [147, 406], "013911915": [147, 406], "008015852": [147, 406], "0056739287": [147, 406], "010281616": [147, 406], "0057659554": [147, 406], "00872668": [147, 406], "010649723": [147, 406], "0787844e": [147, 406], "032164957": [147, 406], "023838118": [147, 406], "002641804": [147, 406], "030387888": [147, 406], "029626286": [147, 406], "016602905": [147, 406], "0021784967": [147, 406], "0010519617": [147, 406], "0116524985": [147, 406], "018519603": [147, 406], "007552545": [147, 406], "007419265": [147, 406], "0011090817": [147, 406], "0044331537": [147, 406], "009989669": [147, 406], "007533505": [147, 406], "0061943564": [147, 406], "0057088356": [147, 406], "028230017": [147, 406], "0042554466": [147, 406], "029321646": [147, 406], "024790118": [147, 406], "015676292": [147, 406], "018202268": [147, 406], "0075017717": [147, 406], "00865052": [147, 406], "0063942764": [147, 406], "0020118963": [147, 406], "036963046": [147, 406], "002335577": [147, 406], "020804405": [147, 406], "6888937": [147, 406], "019598536": [147, 406], "0034748053": [147, 406], "0067401705": [147, 406], "02835695": [147, 406], "023393849": [147, 406], "0071527045": [147, 406], "010586256": [147, 406], "0096088685": [147, 406], "009488282": [147, 406], "021337526": [147, 406], "6766098e": [147, 406], "019801632": [147, 406], "0022705235": [147, 406], "009558095": [147, 406], "0020753632": [147, 406], "708839e": [147, 406], "0066449703": [147, 406], "04130417": [147, 406], "011220924": [147, 406], "013391487": [147, 406], "027722282": [147, 406], "011366897": [147, 406], "4434706e": [147, 406], "015460504": [147, 406], "549375e": [147, 406], "01449581": [147, 406], "008529933": [147, 406], "018875016": [147, 406], "017745307": [147, 406], "009437508": [147, 406], "024587024": [147, 406], "013010687": [147, 406], "008993241": [147, 406], "005093208": [147, 406], "024218917": [147, 406], "024066597": [147, 406], "0037857925": [147, 406], "031047942": [147, 406], "015003543": [147, 406], "023266915": [147, 406], "03021018": [147, 406], "0069115306": [147, 406], "010154682": [147, 406], "011430364": [147, 406], "030311726": [147, 406], "01764376": [147, 406], "0020975766": [147, 406], "006746517": [147, 406], "009748495": [147, 406], "01665368": [147, 406], "003658859": [147, 406], "02789999": [147, 406], "0040682196": [147, 406], "0031289116": [147, 406], "029905539": [147, 406], "016882159": [147, 406], "0021689767": [147, 406], "023228835": [147, 406], "011773085": [147, 406], "014292715": [147, 406], "019827018": [147, 406], "029575512": [147, 406], "0015803224": [147, 406], "018405361": [147, 406], "002776671": [147, 406], "019370057": [147, 406], "027569963": [147, 406], "008460119": [147, 406], "012445833": [147, 406], "0028322043": [147, 406], "0052804346": [147, 406], "006422837": [147, 406], "009335961": [147, 406], "02354617": [147, 406], "0010345082": [147, 406], "018900402": [147, 406], "0029908712": [147, 406], "0068544107": [147, 406], "010148335": [147, 406], "007939693": [147, 406], "0072796377": [147, 406], "020537846": [147, 406], "010928977": [147, 406], "029880153": [147, 406], "0038492593": [147, 406], "002795711": [147, 406], "01892579": [147, 406], "029956313": [147, 406], "024612412": [147, 406], "00446806": [147, 406], "026452947": [147, 406], "017605681": [147, 406], "041177236": [147, 406], "02018243": [147, 406], "014648129": [147, 406], "021553313": [147, 406], "0015017823": [147, 406], "0034874987": [147, 406], "034170505": [147, 406], "036125284": [147, 406], "02805231": [147, 406], "018430749": [147, 406], "003404992": [147, 406], "009329614": [147, 406], "020766325": [147, 406], "012560072": [147, 406], "01707256": [147, 406], "011538258": [147, 406], "007711212": [147, 406], "01332802": [147, 406], "007412918": [147, 406], "022492621": [147, 406], "0059055826": [147, 406], "025754813": [147, 406], "01904003": [147, 406], "013353407": [147, 406], "0026005507": [147, 406], "022530701": [147, 406], "007895266": [147, 406], "842112e": [147, 406], "028103083": [147, 406], "013962688": [147, 406], "019979337": [147, 406], "02115982": [147, 406], "0029305778": [147, 406], "01340418": [147, 406], "01609517": [147, 406], "011880978": [147, 406], "016793307": [147, 406], "0048837676": [147, 406], "013036073": [147, 406], "025767507": [147, 406], "030337114": [147, 406], "022454541": [147, 406], "018824242": [147, 406], "0019785764": [147, 406], "006146756": [147, 406], "0021055099": [147, 406], "0014525956": [147, 406], "011157458": [147, 406], "005293128": [147, 406], "011468444": [147, 406], "021591393": [147, 406], "0051535014": [147, 406], "005597769": [147, 406], "1935701e": [147, 406], "012731433": [147, 406], "0034208586": [147, 406], "024688572": [147, 406], "0018103895": [147, 406], "001299482": [147, 406], "005461315": [147, 406], "024878971": [147, 406], "030565593": [147, 406], "016717145": [147, 406], "013226474": [147, 406], "008764761": [147, 406], "007355798": [147, 406], "0070638508": [147, 406], "005734222": [147, 406], "012084072": [147, 406], "023749264": [147, 406], "028813912": [147, 406], "015892077": [147, 406], "0033573918": [147, 406], "0052201413": [147, 406], "01672984": [147, 406], "0014105488": [147, 406], "02184526": [147, 406], "019560456": [147, 406], "0063752364": [147, 406], "008777454": [147, 406], "00418246": [147, 406], "013861141": [147, 406], "012877407": [147, 406], "009500975": [147, 406], "005804036": [147, 406], "0013859555": [147, 406], "025335932": [147, 406], "01779608": [147, 406], "01537165": [147, 406], "0019722297": [147, 406], "011081297": [147, 406], "0073875315": [147, 406], "0015795291": [147, 406], "015968239": [147, 406], "013454954": [147, 406], "0026592575": [147, 406], "0020944031": [147, 406], "014140395": [147, 406], "0023339903": [147, 406], "0064989966": [147, 406], "0030828982": [147, 406], "0046870206": [147, 406], "013239168": [147, 406], "017491441": [147, 406], "011106684": [147, 406], "029702445": [147, 406], "003696939": [147, 406], "013784981": [147, 406], "017250266": [147, 406], "0037762725": [147, 406], "021413686": [147, 406], "017047172": [147, 406], "019268509": [147, 406], "006898837": [147, 406], "013924608": [147, 406], "009266147": [147, 406], "0023577902": [147, 406], "020905953": [147, 406], "005264568": [147, 406], "0014875022": [147, 406], "0064513967": [147, 406], "003044818": [147, 406], "0073431046": [147, 406], "0012431552": [147, 406], "0021166166": [147, 406], "0019404964": [147, 406], "018646536": [147, 406], "6913787e": [147, 406], "01518125": [147, 406], "0013581888": [147, 406], "016755225": [147, 406], "5418405e": [147, 406], "0076921717": [147, 406], "016780613": [147, 406], "56008e": [147, 406], "010948017": [147, 406], "956349e": [147, 406], "006108676": [147, 406], "011290737": [147, 406], "027443029": [147, 406], "008910734": [147, 406], "012858367": [147, 406], "016844079": [147, 406], "017592987": [147, 406], "01476237": [147, 406], "0039793663": [147, 406], "008066626": [147, 406], "0018421229": [147, 406], "03422128": [147, 406], "016526746": [147, 406], "022200674": [147, 406], "0010051549": [147, 406], "004474407": [147, 406], "6767073e": [147, 406], "007749292": [147, 406], "026249854": [147, 406], "006670357": [147, 406], "014775063": [147, 406], "02589444": [147, 406], "0023530303": [147, 406], "0066068904": [147, 406], "0067147836": [147, 406], "0012542619": [147, 406], "018671922": [147, 406], "0022498968": [147, 406], "0048552076": [147, 406], "0031463648": [147, 406], "0217691": [147, 406], "011849245": [147, 406], "0026735375": [147, 406], "011024177": [147, 406], "01733912": [147, 406], "0073621445": [147, 406], "012407753": [147, 406], "0032939252": [147, 406], "0072288644": [147, 406], "014457729": [147, 406], "0011781019": [147, 406], "009615215": [147, 406], "0141150085": [147, 406], "025376e": [147, 406], "04615303": [147, 406], "031631835": [147, 406], "005131288": [147, 406], "006594197": [147, 406], "025386706": [147, 406], "028204631": [147, 406], "023482703": [147, 406], "013086847": [147, 406], "022314915": [147, 406], "2082416e": [147, 406], "023457317": [147, 406], "006013476": [147, 406], "0125029525": [147, 406], "0021404168": [147, 406], "023977743": [147, 406], "0033542186": [147, 406], "029423192": [147, 406], "0019960299": [147, 406], "0076477453": [147, 406], "080113e": [147, 406], "030413274": [147, 406], "008790147": [147, 406], "013493034": [147, 406], "078089505": [147, 406], "004842514": [147, 406], "015232024": [147, 406], "00825068": [147, 406], "036785338": [147, 406], "335175e": [147, 406], "03891782": [147, 406], "004680674": [147, 406], "005451795": [147, 406], "012134845": [147, 406], "02490436": [147, 406], "007101931": [147, 406], "026351402": [147, 406], "0043093935": [147, 406], "0059595294": [147, 406], "024561638": [147, 406], "019331977": [147, 406], "02385081": [147, 406], "008206253": [147, 406], "015942851": [147, 406], "027138388": [147, 406], "01521933": [147, 406], "0043728603": [147, 406], "025500946": [147, 406], "026173694": [147, 406], "0011558884": [147, 406], "023381157": [147, 406], "0016207825": [147, 406], "001237602": [147, 406], "0049916613": [147, 406], "0024085636": [147, 406], "015587438": [147, 406], "0048203007": [147, 406], "35144e": [147, 406], "012255432": [147, 406], "0048742476": [147, 406], "0062546497": [147, 406], "04051718": [147, 406], "0051090745": [147, 406], "016932933": [147, 406], "0016660026": [147, 406], "02774767": [147, 406], "050976507": [147, 406], "03043866": [147, 406], "0028655245": [147, 406], "0023292303": [147, 406], "0104275895": [147, 406], "004360167": [147, 406], "011144764": [147, 406], "024282385": [147, 406], "013988075": [147, 406], "016234798": [147, 406], "014698903": [147, 406], "037673872": [147, 406], "0054644886": [147, 406], "020461684": [147, 406], "012598153": [147, 406], "012363326": [147, 406], "002833791": [147, 406], "0029274046": [147, 406], "01243314": [147, 406], "0037413659": [147, 406], "012820287": [147, 406], "0070511578": [147, 406], "017364508": [147, 406], "0025545373": [147, 406], "0034843255": [147, 406], "009773882": [147, 406], "0010368882": [147, 406], "009894469": [147, 406], "330013e": [147, 406], "008237986": [147, 406], "0013804021": [147, 406], "0035890455": [147, 406], "029194713": [147, 406], "022721102": [147, 406], "026605267": [147, 406], "011151111": [147, 406], "0054200618": [147, 406], "0043919003": [147, 406], "0022181633": [147, 406], "0025402573": [147, 406], "015562051": [147, 406], "021984888": [147, 406], "025145533": [147, 406], "008422039": [147, 406], "0032590183": [147, 406], "008130092": [147, 406], "0019309763": [147, 406], "009278841": [147, 406], "981743e": [147, 406], "04363975": [147, 406], "008510893": [147, 406], "011360551": [147, 406], "025069373": [147, 406], "004252273": [147, 406], "011132071": [147, 406], "020474378": [147, 406], "014889303": [147, 406], "01896387": [147, 406], "0075461986": [147, 406], "012096765": [147, 406], "030489434": [147, 406], "012166579": [147, 406], "032393437": [147, 406], "0035763523": [147, 406], "009018627": [147, 406], "007438305": [147, 406], "0064196633": [147, 406], "025056679": [147, 406], "012230045": [147, 406], "821482e": [147, 406], "0124839125": [147, 406], "0014454556": [147, 406], "012744127": [147, 406], "007159051": [147, 406], "010402203": [147, 406], "010053135": [147, 406], "0042808335": [147, 406], "0025307373": [147, 406], "004128513": [147, 406], "010890896": [147, 406], "025716733": [147, 406], "024155451": [147, 406], "04023793": [147, 406], "015257411": [147, 406], "0129154865": [147, 406], "013264554": [147, 406], "028636204": [147, 406], "023520783": [147, 406], "004890114": [147, 406], "008022199": [147, 406], "016184025": [147, 406], "051535014": [147, 406], "011792125": [147, 406], "009291534": [147, 406], "031707995": [147, 406], "039476328": [147, 406], "004699714": [147, 406], "014216555": [147, 406], "01480045": [147, 406], "0065053436": [147, 406], "0044997935": [147, 406], "021705633": [147, 406], "0904366e": [147, 406], "019585844": [147, 406], "0036842457": [147, 406], "455769e": [147, 406], "006727477": [147, 406], "0108718565": [147, 406], "0046076872": [147, 406], "0303625": [147, 406], "02967706": [147, 406], "026554495": [147, 406], "014825836": [147, 406], "009786575": [147, 406], "009285187": [147, 406], "020931339": [147, 406], "003630299": [147, 406], "004693367": [147, 406], "009589829": [147, 406], "013886528": [147, 406], "017694535": [147, 406], "027493803": [147, 406], "004982141": [147, 406], "0071717445": [147, 406], "03297733": [147, 406], "007571585": [147, 406], "006276863": [147, 406], "016069785": [147, 406], "0464047e": [147, 406], "0025450173": [147, 406], "015358957": [147, 406], "018494215": [147, 406], "7068556e": [147, 406], "027646123": [147, 406], "0011114617": [147, 406], "013429567": [147, 406], "007920653": [147, 406], "0050011813": [147, 406], "013543808": [147, 406], "014381569": [147, 406], "0047346205": [147, 406], "018798856": [147, 406], "019674698": [147, 406], "012629886": [147, 406], "029803993": [147, 406], "009862735": [147, 406], "0033732585": [147, 406], "013048767": [147, 406], "009456548": [147, 406], "03815622": [147, 406], "286778e": [147, 406], "0040301397": [147, 406], "014254635": [147, 406], "0038809928": [147, 406], "016666373": [147, 406], "6997105e": [147, 406], "017351814": [147, 406], "015549357": [147, 406], "02952474": [147, 406], "00431574": [147, 406], "009818309": [147, 406], "470635e": [147, 406], "011404978": [147, 406], "025082065": [147, 406], "021908727": [147, 406], "018951176": [147, 406], "022936888": [147, 406], "013658048": [147, 406], "004671154": [147, 406], "0296009": [147, 406], "0127949": [147, 406], "018341895": [147, 406], "6842424e": [147, 406], "01292818": [147, 406], "0036429923": [147, 406], "030083247": [147, 406], "00215311": [147, 406], "024206225": [147, 406], "02619908": [147, 406], "009837349": [147, 406], "010256229": [147, 406], "008168173": [147, 406], "0100340955": [147, 406], "013150314": [147, 406], "02188334": [147, 406], "010935323": [147, 406], "008371267": [147, 406], "00857436": [147, 406], "0036144322": [147, 406], "009697721": [147, 406], "007863532": [147, 406], "018100722": [147, 406], "019446217": [147, 406], "023495397": [147, 406], "0037032857": [147, 406], "009380388": [147, 406], "027265321": [147, 406], "007140011": [147, 406], "015193944": [147, 406], "004556914": [147, 406], "013632661": [147, 406], "0056358487": [147, 406], "01040855": [147, 406], "0050519546": [147, 406], "008155479": [147, 406], "9020106e": [147, 406], "032571144": [147, 406], "0048076073": [147, 406], "0060293428": [147, 406], "016031705": [147, 406], "021781793": [147, 406], "0015866691": [147, 406], "0016088824": [147, 406], "024752038": [147, 406], "0019547765": [147, 406], "012369673": [147, 406], "015320877": [147, 406], "012706046": [147, 406], "009082094": [147, 406], "010249883": [147, 406], "019128883": [147, 406], "02543748": [147, 406], "0084982": [147, 406], "0032970984": [147, 406], "012991647": [147, 406], "022479929": [147, 406], "02316537": [147, 406], "0012312552": [147, 406], "0042840065": [147, 406], "018227655": [147, 406], "005731049": [147, 406], "02604676": [147, 406], "006689397": [147, 406], "006305423": [147, 406], "018075334": [147, 406], "019484296": [147, 406], "01783416": [147, 406], "0012130085": [147, 406], "015866691": [147, 406], "020626698": [147, 406], "039882515": [147, 406], "008682254": [147, 406], "0022546567": [147, 406], "009323268": [147, 406], "035871416": [147, 406], "014330796": [147, 406], "0145465825": [147, 406], "023216143": [147, 406], "011531911": [147, 406], "020372832": [147, 406], "00641649": [147, 406], "013531114": [147, 406], "016437892": [147, 406], "013124927": [147, 406], "019814324": [147, 406], "0015136823": [147, 406], "016247492": [147, 406], "004753661": [147, 406], "013823061": [147, 406], "007907959": [147, 406], "027113002": [147, 406], "009932549": [147, 406], "009659641": [147, 406], "0044807536": [147, 406], "009850042": [147, 406], "014191168": [147, 406], "042954307": [147, 406], "024701266": [147, 406], "01059895": [147, 406], "0047885673": [147, 406], "021629473": [147, 406], "006651317": [147, 406], "031098714": [147, 406], "0058262493": [147, 406], "0051249415": [147, 406], "0065180366": [147, 406], "0519563e": [147, 406], "009792922": [147, 406], "0423958": [147, 406], "010992444": [147, 406], "008739374": [147, 406], "002449817": [147, 406], "012045992": [147, 406], "014089622": [147, 406], "0018310162": [147, 406], "014406956": [147, 406], "033180423": [147, 406], "0052709146": [147, 406], "0016802826": [147, 406], "012750473": [147, 406], "018329201": [147, 406], "005750089": [147, 406], "048234742": [147, 406], "01771992": [147, 406], "009240761": [147, 406], "789961e": [147, 406], "017669147": [147, 406], "01730104": [147, 406], "0026529108": [147, 406], "022543395": [147, 406], "017288346": [147, 406], "007971426": [147, 406], "019065415": [147, 406], "007857186": [147, 406], "0481933e": [147, 406], "016488666": [147, 406], "709636e": [147, 406], "009348654": [147, 406], "0049281945": [147, 406], "0059436625": [147, 406], "020956725": [147, 406], "003538272": [147, 406], "0038905127": [147, 406], "0016485492": [147, 406], "0044141137": [147, 406], "01271874": [147, 406], "01483853": [147, 406], "01245218": [147, 406], "0023657237": [147, 406], "0037794458": [147, 406], "5497736e": [147, 406], "00882188": [147, 406], "015815917": [147, 406], "016767919": [147, 406], "005185235": [147, 406], "018049948": [147, 406], "007685825": [147, 406], "21934114": [147, 406], "012007912": [147, 406], "005039261": [147, 406], "037445392": [147, 406], "4307736e": [147, 406], "031403355": [147, 406], "0018468829": [147, 406], "0024656837": [147, 406], "01722488": [147, 406], "013213781": [147, 406], "011512871": [147, 406], "0015811158": [147, 406], "0035287521": [147, 406], "0062419563": [147, 406], "0048456877": [147, 406], "025120145": [147, 406], "023800036": [147, 406], "0269697e": [147, 406], "03554139": [147, 406], "01071319": [147, 406], "2110125e": [147, 406], "017313734": [147, 406], "03777542": [147, 406], "0019944431": [147, 406], "04402055": [147, 406], "02442201": [147, 406], "018976564": [147, 406], "005873849": [147, 406], "006924224": [147, 406], "003865126": [147, 406], "0057437425": [147, 406], "0038206992": [147, 406], "013163007": [147, 406], "01646328": [147, 406], "02446009": [147, 406], "018748082": [147, 406], "027239935": [147, 406], "0032479118": [147, 406], "03653147": [147, 406], "015206637": [147, 406], "018773468": [147, 406], "00643553": [147, 406], "010141989": [147, 406], "009183641": [147, 406], "02025859": [147, 406], "019852404": [147, 406], "006054729": [147, 406], "010630683": [147, 406], "009481935": [147, 406], "059881e": [147, 406], "03005786": [147, 406], "014851223": [147, 406], "014280022": [147, 406], "003274885": [147, 406], "0014168955": [147, 406], "025005905": [147, 406], "9089613e": [147, 406], "022302222": [147, 406], "008999587": [147, 406], "010097562": [147, 406], "024942439": [147, 406], "012807593": [147, 406], "019547764": [147, 406], "034957495": [147, 406], "026833748": [147, 406], "7683392e": [147, 406], "0068417173": [147, 406], "011182844": [147, 406], "016907547": [147, 406], "03013402": [147, 406], "0041062995": [147, 406], "014571969": [147, 406], "02070286": [147, 406], "011335164": [147, 406], "012725086": [147, 406], "8341785e": [147, 406], "0013653288": [147, 406], "017859548": [147, 406], "0056802756": [147, 406], "006556117": [147, 406], "0033002717": [147, 406], "011398631": [147, 406], "010954363": [147, 406], "055139925": [147, 406], "009424815": [147, 406], "004959928": [147, 406], "028788524": [147, 406], "0031241516": [147, 406], "0027465243": [147, 406], "036810722": [147, 406], "0031828582": [147, 406], "005543822": [147, 406], "0026053106": [147, 406], "6973375e": [147, 406], "017935708": [147, 406], "0015406557": [147, 406], "0023911104": [147, 406], "016945627": [147, 406], "0035636588": [147, 406], "02396505": [147, 406], "01911619": [147, 406], "0029448578": [147, 406], "033408906": [147, 406], "020550538": [147, 406], "01294722": [147, 406], "011500178": [147, 406], "011988872": [147, 406], "025424786": [147, 406], "011887325": [147, 406], "038587794": [147, 406], "003395472": [147, 406], "007946039": [147, 406], "019966645": [147, 406], "033713546": [147, 406], "018189576": [147, 406], "026859134": [147, 406], "012223699": [147, 406], "024802811": [147, 406], "099946e": [147, 406], "0010448216": [147, 406], "005020221": [147, 406], "012356979": [147, 406], "007590625": [147, 406], "03089562": [147, 406], "014521196": [147, 406], "017212186": [147, 406], "024917051": [147, 406], "020169739": [147, 406], "044680603": [147, 406], "005658062": [147, 406], "013835755": [147, 406], "3776127e": [147, 406], "0028496578": [147, 406], "006467263": [147, 406], "053007443": [147, 406], "011614418": [147, 406], "0056453687": [147, 406], "16145945": [147, 406], "0091963345": [147, 406], "024548944": [147, 406], "016425198": [147, 406], "015701678": [147, 406], "862344e": [147, 406], "023190755": [147, 406], "0074509983": [147, 406], "018088028": [147, 406], "010205456": [147, 406], "010383163": [147, 406], "033028103": [147, 406], "0023324036": [147, 406], "019052723": [147, 406], "016590212": [147, 406], "4408938e": [147, 406], "02324153": [147, 406], "019623924": [147, 406], "0383847": [147, 406], "002686231": [147, 406], "0010852817": [147, 406], "0076223584": [147, 406], "002762391": [147, 406], "030540207": [147, 406], "0037667525": [147, 406], "011005137": [147, 406], "0017850028": [147, 406], "005984916": [147, 406], "0029353378": [147, 406], "02555172": [147, 406], "00855532": [147, 406], "010287963": [147, 406], "2544602e": [147, 406], "0065624635": [147, 406], "017808774": [147, 406], "03528752": [147, 406], "013188394": [147, 406], "027925376": [147, 406], "0014248289": [147, 406], "009342308": [147, 406], "0017247093": [147, 406], "023596942": [147, 406], "004709234": [147, 406], "037369233": [147, 406], "016082479": [147, 406], "0011963486": [147, 406], "00222451": [147, 406], "014165782": [147, 406], "0014414889": [147, 406], "0058865426": [147, 406], "2633766e": [147, 406], "012274472": [147, 406], "011328817": [147, 406], "0020372833": [147, 406], "0013026553": [147, 406], "00635937": [147, 406], "00651169": [147, 406], "0024672705": [147, 406], "0026640175": [147, 406], "0033669118": [147, 406], "0074763848": [147, 406], "311968e": [147, 406], "023444623": [147, 406], "017656455": [147, 406], "0065243836": [147, 406], "021832567": [147, 406], "02320345": [147, 406], "015092397": [147, 406], "034119733": [147, 406], "025983294": [147, 406], "021324834": [147, 406], "015663598": [147, 406], "00417294": [147, 406], "014965463": [147, 406], "014203862": [147, 406], "0074319583": [147, 406], "007381185": [147, 406], "0035446188": [147, 406], "009310574": [147, 406], "02562788": [147, 406], "01101783": [147, 406], "009050361": [147, 406], "010484709": [147, 406], "005835769": [147, 406], "0036620323": [147, 406], "0055565154": [147, 406], "028712364": [147, 406], "033586614": [147, 406], "027087616": [147, 406], "019509684": [147, 406], "005166195": [147, 406], "020042805": [147, 406], "019903177": [147, 406], "010738577": [147, 406], "038816273": [147, 406], "014990849": [147, 406], "025412092": [147, 406], "030464048": [147, 406], "009158255": [147, 406], "046609994": [147, 406], "9095457e": [147, 406], "0016675893": [147, 406], "012921833": [147, 406], "2828116e": [147, 406], "0033288319": [147, 406], "10784273": [147, 406], "022898808": [147, 406], "020563232": [147, 406], "020487072": [147, 406], "0063117696": [147, 406], "005299475": [147, 406], "013442261": [147, 406], "0112590045": [147, 406], "015282797": [147, 406], "013581888": [147, 406], "023723876": [147, 406], "00847916": [147, 406], "025221692": [147, 406], "028686978": [147, 406], "8655227e": [147, 406], "005169368": [147, 406], "0765446e": [147, 406], "011436711": [147, 406], "004963101": [147, 406], "0067592105": [147, 406], "007527158": [147, 406], "029854767": [147, 406], "0072098244": [147, 406], "011246311": [147, 406], "009945242": [147, 406], "017326428": [147, 406], "004052353": [147, 406], "011684231": [147, 406], "311375e": [147, 406], "026986068": [147, 406], "012801247": [147, 406], "0023815904": [147, 406], "047600072": [147, 406], "006886144": [147, 406], "004464887": [147, 406], "9809546e": [147, 406], "018684616": [147, 406], "022924196": [147, 406], "0070575043": [147, 406], "0037730993": [147, 406], "025830973": [147, 406], "029651672": [147, 406], "0046140337": [147, 406], "041710358": [147, 406], "0058960626": [147, 406], "0018706829": [147, 406], "0065878504": [147, 406], "0067338236": [147, 406], "0011431951": [147, 406], "020233205": [147, 406], "008218946": [147, 406], "015930157": [147, 406], "0024022171": [147, 406], "0051439814": [147, 406], "0120777255": [147, 406], "00895516": [147, 406], "010116602": [147, 406], "038638566": [147, 406], "0056231553": [147, 406], "840722e": [147, 406], "009754842": [147, 406], "0074256114": [147, 406], "0011773085": [147, 406], "7314436e": [147, 406], "02014435": [147, 406], "010186416": [147, 406], "0067211306": [147, 406], "015828611": [147, 406], "0043665133": [147, 406], "0112526575": [147, 406], "031073328": [147, 406], "018126108": [147, 406], "014432343": [147, 406], "0021118566": [147, 406], "017389894": [147, 406], "023635022": [147, 406], "0062736897": [147, 406], "040187154": [147, 406], "006905184": [147, 406], "0068163304": [147, 406], "0087838005": [147, 406], "010072175": [147, 406], "00832684": [147, 406], "01061799": [147, 406], "01268066": [147, 406], "0137088215": [147, 406], "007926999": [147, 406], "01711064": [147, 406], "00885996": [147, 406], "015422424": [147, 406], "0052011013": [147, 406], "022327607": [147, 406], "0092280675": [147, 406], "022251448": [147, 406], "0045251804": [147, 406], "5886433e": [147, 406], "020360138": [147, 406], "021870647": [147, 406], "013251861": [147, 406], "027595349": [147, 406], "01094167": [147, 406], "011550951": [147, 406], "0033034452": [147, 406], "026072146": [147, 406], "030032473": [147, 406], "00411582": [147, 406], "012185619": [147, 406], "0096215615": [147, 406], "002618004": [147, 406], "006575157": [147, 406], "03675995": [147, 406], "010986097": [147, 406], "023673104": [147, 406], "011900018": [147, 406], "016044399": [147, 406], "0040206197": [147, 406], "018722696": [147, 406], "0038873393": [147, 406], "011163804": [147, 406], "01919235": [147, 406], "015790531": [147, 406], "0013692954": [147, 406], "011836552": [147, 406], "005096381": [147, 406], "031200262": [147, 406], "0358968": [147, 406], "009126521": [147, 406], "013696128": [147, 406], "014711596": [147, 406], "018608455": [147, 406], "03922246": [147, 406], "0179484": [147, 406], "0069178776": [147, 406], "010909937": [147, 406], "013569194": [147, 406], "019839711": [147, 406], "024447398": [147, 406], "01086551": [147, 406], "010294309": [147, 406], "024726652": [147, 406], "016679065": [147, 406], "0013145554": [147, 406], "004617207": [147, 406], "004690194": [147, 406], "013315327": [147, 406], "0112653505": [147, 406], "0016009491": [147, 406], "003998406": [147, 406], "025272466": [147, 406], "0030051514": [147, 406], "007869879": [147, 406], "031251036": [147, 406], "005375635": [147, 406], "0046203807": [147, 406], "0030099114": [147, 406], "0071273176": [147, 406], "012020606": [147, 406], "016285572": [147, 406], "033865865": [147, 406], "04290353": [147, 406], "009107481": [147, 406], "007400225": [147, 406], "018253041": [147, 406], "016704453": [147, 406], "003957153": [147, 406], "022644943": [147, 406], "0074446513": [147, 406], "012122152": [147, 406], "0013796088": [147, 406], "019014644": [147, 406], "026909908": [147, 406], "003035298": [147, 406], "012153885": [147, 406], "020499766": [147, 406], "006010303": [147, 406], "004026966": [147, 406], "3466855e": [147, 406], "001078935": [147, 406], "0051725414": [147, 406], "0014906756": [147, 406], "009526362": [147, 406], "016310958": [147, 406], "010357776": [147, 406], "0145338895": [147, 406], "015993625": [147, 406], "025259772": [147, 406], "036937658": [147, 406], "0044014202": [147, 406], "008713987": [147, 406], "003931766": [147, 406], "0053597684": [147, 406], "02797615": [147, 406], "020093577": [147, 406], "004550567": [147, 406], "024434704": [147, 406], "0029956312": [147, 406], "6632223e": [147, 406], "51248e": [147, 406], "028915457": [147, 406], "023470009": [147, 406], "008675907": [147, 406], "014013462": [147, 406], "0031527115": [147, 406], "0018865496": [147, 406], "0033986452": [147, 406], "040974144": [147, 406], "002589444": [147, 406], "0018516429": [147, 406], "049504075": [147, 406], "00884092": [147, 406], "004541047": [147, 406], "014076929": [147, 406], "015473197": [147, 406], "0027211376": [147, 406], "031327195": [147, 406], "041126464": [147, 406], "018595763": [147, 406], "0104593225": [147, 406], "01938275": [147, 406], "0027592175": [147, 406], "setenableoutputlog": [148, 150, 234, 408, 493, 520], "setevaluationlogextend": [148, 150, 408], "setoutputlogspath": [148, 150, 153, 155, 234, 408, 414, 493, 520], "assum": [150, 408], "getniter": [151, 152, 195, 196, 411, 455], "niter": [151, 152, 195, 196, 411, 455], "poscol": [151, 152, 195, 196, 251, 411, 455, 510], "setiter": [151, 152, 411], "setposcolumn": [151, 152, 195, 196, 411, 455], "member": [152, 240, 411, 500], "helper": [152, 162, 196, 204, 226, 253, 254, 255, 260, 411, 420, 455, 462, 485, 513, 514, 515, 527, 530], "datasetpath": [152, 411], "pierr": [152, 253, 411, 513], "vinken": [152, 253, 411, 513], "34": [152, 253, 255, 411, 513, 515], "md": [152, 243, 249, 253, 411, 509, 513], "vb": [152, 251, 253, 411, 510, 513, 530], "41": [152, 154, 253, 255, 411, 413, 513, 515], "43": [152, 154, 253, 255, 411, 413, 513, 515], "dt": [152, 253, 254, 411, 513, 514, 530], "49": [152, 253, 411, 513], "anc": [152, 253, 411, 513, 530], "trainingperceptrondf": [152, 411], "trainedpo": [152, 411], "cd": [152, 251, 253, 411, 510, 513], "pos_anc": [152, 411], "25": [152, 154, 253, 255, 411, 413, 513, 515], "33": [152, 245, 255, 411, 505, 515], "detectlist": [153, 154, 413], "setcustombound": [153, 154, 155, 413, 414], "setcustomboundsstrategi": [153, 154, 413], "setdetectlist": [153, 154, 413], "setexplodesent": [153, 154, 155, 413, 414], "setsplitlength": [153, 154, 155, 413, 414], "setuseabbrevi": [153, 154, 413], "setusecustomboundsonli": [153, 154, 155, 413, 414], "custombound": [153, 154, 155, 413, 414], "customboundsstrategi": [153, 154, 413], "explodesent": [153, 154, 155, 251, 252, 413, 414, 510, 511], "splitlength": [153, 154, 155, 413, 414], "useabbrevi": [153, 154, 413], "usecustomboundsonli": [153, 154, 155, 413, 414], "epochsnumb": [153, 155, 414], "impossiblepenultim": [153, 155, 414], "modelarchitectur": [153, 155, 414], "setepochsnumb": [153, 155, 414], "setimpossiblepenultim": [153, 155, 414], "ii": [154, 413], "abbrevi": [154, 413], "period": [154, 413], "geo": [154, 413], "1026": [154, 413], "253": [154, 413], "553": [154, 413], "ellipsi": [154, 413], "quotat": [154, 413], "mark": [154, 155, 196, 413, 414, 455], "exclam": [154, 413], "breaker": [154, 413], "pragmaticcontentformatt": [154, 413], "explicitli": [154, 155, 187, 226, 413, 414, 446, 485, 524], "prepend": [154, 199, 413, 457], "break": [154, 172, 236, 237, 238, 413, 431, 496, 497], "append": [154, 183, 237, 413, 441, 497, 524], "forcibli": [154, 155, 413, 414], "99999": [154, 155, 193, 413, 414, 452], "nhow": [154, 413], "third": [154, 187, 233, 251, 260, 413, 446, 494, 510], "sentencedetectordl": [155, 170, 317, 414, 429], "imposs": [155, 196, 414, 455], "penultim": [155, 414], "eo": [155, 414], "stefan": [155, 414], "schweter": [155, 414], "sajawel": [155, 414], "ahm": [155, 414], "broken": [155, 236, 237, 414, 496], "moder": [155, 414], "lack": [155, 414], "easier": [155, 202, 414, 460, 526, 530], "polit": [155, 414], "successor": [155, 414], "great": [155, 414], "heritag": [155, 178, 414, 437], "bequeath": [155, 414], "nelson": [155, 414], "mandela": [155, 414], "epochs_numb": [155, 414], "impossible_penultim": [155, 414], "model_architectur": [155, 414], "output_logs_path": [155, 414], "validation_split": [155, 414], "sentencedl": [155, 414], "sentencesdl": [155, 414], "helen": [155, 414], "peopl": [155, 414], "decrementmultipli": [156, 157, 416], "enablescor": [156, 157, 416], "incrementmultipli": [156, 157, 416], "negativemultipli": [156, 157, 416], "positivemultipli": [156, 157, 416], "reversemultipli": [156, 157, 416], "featurelimit": [156, 158, 417], "importantfeatureratio": [156, 158, 417], "prunecorpu": [156, 158, 417], "sentimentcol": [156, 158, 417], "setprunecorpu": [156, 158, 417], "setsentimentcol": [156, 158, 417], "unimportantfeaturestep": [156, 158, 417], "els": [157, 210, 416, 469], "cool": [157, 416], "superb": [157, 416], "uninspir": [157, 416], "sentimentscor": [157, 416], "nice": [157, 234, 416, 493, 520], "multipli": 157, "decrement": 157, "increment": [157, 192, 451], "revert": 157, "entri": [157, 200, 209, 241, 416, 458, 468, 501], "sttr": [157, 416], "sda": [157, 158, 382, 416, 417], "pragmat": [157, 416], "viveknsenti": [158, 417], "analys": [158, 417], "vivek": [158, 417], "narayanan": [158, 417], "give": [158, 417], "transit": [158, 183, 417, 441], "unfrequ": [158, 417], "scope": [158, 417], "naiv": [158, 417], "bay": [158, 417], "vivekn": [158, 417], "train_senti": [158, 417], "result_senti": [158, 417], "final_senti": [158, 417], "cast": [158, 198, 417, 456], "horribl": [158, 417], "go": [158, 417, 524], "again": [158, 191, 417, 450], "anyon": [158, 417], "protagonist": [158, 417], "music": [158, 417], "boost": 158, "dirt": 158, "lookahead": 158, "unimport": 158, "sentiment_vivekn": [158, 417], "getqueri": [159, 161, 419], "setqueri": [159, 161, 203, 419, 461], "setcach": [159, 163, 421], "usecach": [159, 163, 179, 421, 438], "setsrclang": [159, 169, 172, 428, 431], "settgtlang": [159, 169, 172, 428, 431], "srclang": [159, 169, 172, 428, 431], "tgtlang": [159, 169, 172, 428, 431], "langid": [159, 170, 317, 429], "setlangid": [159, 170, 429], "setmaxinputlength": [159, 170, 317, 429], "maxnewtoken": [159, 179, 438], "setmaxnewtoken": [159, 179, 438], "setstopateo": [159, 179, 438], "setusecach": [159, 179, 438], "stopateo": [159, 179, 438], "settabl": [160, 161, 162, 418, 419, 420], "explan": [160, 161, 162, 183, 418, 419, 420, 441, 527], "phi_4_mini_instruct_q4_k_m_gguf": [160, 418], "autoggufmodeltest": [160, 418], "nthreadsdraft": [160, 161, 162, 418, 419, 420], "draft": [160, 161, 162, 221, 418, 419, 420, 480], "nthreadsbatchdraft": [160, 161, 162, 418, 419, 420], "ndraft": [160, 162, 214, 221, 418, 420, 480], "specul": [160, 161, 162, 221, 418, 419, 420, 480], "psplit": [160, 162, 418, 420], "ngpulayersdraft": [160, 161, 162, 214, 221, 418, 419, 420, 480], "modeldraft": [160, 161, 162, 214, 221, 418, 419, 420, 480], "modelalia": [160, 161, 162, 214, 221, 418, 419, 420, 480], "lookupcachestaticfilepath": [160, 161, 162, 418, 419, 420], "updat": [160, 161, 162, 183, 418, 419, 420, 441], "lookupcachedynamicfilepath": [160, 161, 162, 418, 419, 420], "inputprefixbo": [160, 161, 162, 418, 419, 420], "preced": [160, 161, 162, 418, 419, 420, 524], "systemprompt": [160, 161, 162, 214, 221, 418, 419, 420, 480], "chattempl": [160, 161, 162, 197, 210, 214, 221, 418, 419, 420, 469, 480], "chat": [160, 161, 162, 165, 167, 168, 171, 174, 175, 177, 210, 221, 418, 419, 420, 423, 426, 427, 430, 433, 434, 436, 469, 480], "templat": [160, 161, 162, 210, 221, 247, 418, 419, 420, 469, 480, 507], "inputprefix": [160, 161, 162, 214, 221, 418, 419, 420, 480], "inputsuffix": [160, 161, 162, 214, 221, 418, 419, 420, 480], "infil": [160, 161, 162, 221, 418, 419, 420, 480], "cacheprompt": [160, 161, 162, 214, 221, 418, 419, 420, 480], "rememb": [160, 161, 162, 183, 221, 418, 419, 420, 441, 480], "reprocess": [160, 161, 162, 221, 418, 419, 420, 480], "npredict": [160, 161, 162, 214, 221, 418, 419, 420, 480], "minp": [160, 161, 162, 214, 221, 418, 419, 420, 480], "min": [160, 161, 162, 183, 203, 221, 418, 419, 420, 441, 461, 480], "tfsz": [160, 161, 162, 214, 221, 418, 419, 420, 480], "tail": [160, 161, 162, 221, 418, 419, 420, 480], "free": [160, 161, 162, 170, 221, 317, 418, 419, 420, 429, 480], "typicalp": [160, 161, 162, 214, 221, 418, 419, 420, 480], "typic": [160, 161, 162, 166, 221, 238, 418, 419, 420, 424, 480, 498], "dynatemprang": [160, 161, 162, 221, 418, 419, 420], "dynatempexpon": [160, 161, 162, 221, 418, 419, 420], "expon": [160, 161, 162, 221, 418, 419, 420, 480], "repeatlastn": [160, 161, 162, 214, 221, 418, 419, 420, 480], "repeatpenalti": [160, 161, 162, 214, 221, 418, 419, 420, 480], "mirostat": [160, 161, 162, 214, 221, 418, 419, 420, 480], "mirostattau": [160, 161, 162, 214, 221, 418, 419, 420, 480], "entropi": [160, 161, 162, 221, 418, 419, 420, 480], "tau": [160, 161, 162, 221, 418, 419, 420, 480], "mirostateta": [160, 161, 162, 214, 221, 418, 419, 420, 480], "eta": [160, 161, 162, 221, 418, 419, 420, 480], "penalizenl": [160, 161, 162, 214, 221, 418, 419, 420, 480], "newlin": [160, 161, 162, 183, 221, 418, 419, 420, 441, 480], "nkeep": [160, 161, 162, 214, 221, 418, 419, 420, 480], "rng": [160, 161, 162, 221, 418, 419, 420, 480], "nprob": [160, 161, 162, 214, 221, 418, 419, 420, 480], "minkeep": [160, 161, 162, 214, 221, 418, 419, 420, 480], "sampler": [160, 161, 162, 214, 221, 418, 419, 420, 480], "bnf": [160, 161, 162, 221, 418, 419, 420, 480], "penaltyprompt": [160, 161, 162, 214, 221, 418, 419, 420, 480], "ignoreeo": [160, 161, 162, 214, 221, 418, 419, 420, 480], "impli": [160, 161, 162, 221, 418, 419, 420, 480], "inf": [160, 161, 162, 221, 418, 419, 420, 480], "disabletokenid": [160, 161, 162, 214, 221, 418, 419, 420, 480], "stopstr": [160, 161, 162, 214, 221, 418, 419, 420, 480], "usechattempl": [160, 161, 162, 214, 221, 418, 419, 420, 480], "setnpredict": [160, 162, 214, 221, 418, 420, 480], "setpenalizenl": [160, 162, 214, 221, 418, 420, 480], "78": [160, 175, 253, 418, 434, 513], "gguf": [160, 161, 418, 419], "rerank": [161, 203, 221, 419, 461, 480], "relevance_scor": [161, 419], "reranked_docu": [161, 203, 419, 461], "pasta": [161, 203, 419, 461], "bge_reranker_v2_m3_q4_k_m": [161, 419], "autoggufrerankertest": [161, 419], "intent": [161, 174, 211, 419, 433, 470], "piec": [161, 193, 203, 419, 452, 461], "bread": [161, 203, 255, 419, 461, 515], "girl": [161, 203, 419, 461], "babi": [161, 162, 203, 419, 420, 461], "ride": [161, 203, 419, 461], "chain": [161, 419], "ingest": [162, 420], "At": [162, 210, 236, 420, 469, 496, 525], "hasllamacppinferenceproperti": [162, 420], "hasllamacppmodelproperti": [162, 420], "preprocess": [162, 234, 236, 420, 493, 496, 520], "loadimagesasbyt": [162, 197, 207, 420, 465], "5_vl_3b_instruct_q4_k_m_gguf": [162, 420], "autoggufvisionmodeltest": [162, 420], "caption_docu": [162, 420], "imagespath": [162, 420], "setminkeep": [162, 214, 221, 420, 480], "setminp": [162, 214, 221, 420, 480], "setnprob": [162, 214, 221, 420, 480], "setrepeatlastn": [162, 214, 221, 420, 480], "setrepeatpenalti": [162, 214, 221, 420, 480], "setstopstr": [162, 214, 221, 420, 480], "settfsz": [162, 214, 221, 420, 480], "settypicalp": [162, 214, 221, 420, 480], "depict": [162, 420], "ornat": [162, 420], "ceil": [162, 420], "decor": [162, 420], "wall": [162, 420], "chair": [162, 420], "throughout": [162, 420], "cushion": [162, 420], "surfac": [162, 420], "possibli": [162, 420], "bed": [162, 420], "sofa": [162, 420], "scene": [162, 420], "sleep": [162, 420], "hold": [162, 208, 420, 467, 528], "swim": [162, 420], "aquarium": [162, 420], "seem": [162, 420], "adult": [162, 420], "young": [162, 420], "gather": [162, 240, 420, 500], "neck": [162, 420], "grass": [162, 420], "speci": [162, 420], "held": [162, 420], "black": [162, 420], "white": [162, 183, 420, 441], "chest": [162, 420], "someth": [162, 420], "anim": [162, 420], "vicin": [162, 420], "collar": [162, 420], "stare": [162, 420], "front": [162, 420], "owner": [162, 420], "comfort": [162, 420], "seat": [162, 420], "yellow": [162, 420], "wheel": [162, 420], "tire": [162, 420], "park": [162, 420], "bull": [162, 420], "horn": [162, 420], "modelpath": [162, 420], "mmprojpath": [162, 420], "captur": [163, 181, 421, 439], "past": [163, 170, 241, 317, 421, 429, 501], "incorpor": [163, 175, 421, 434], "versatil": [163, 171, 178, 421, 430, 437], "valuabl": [163, 178, 421, 437], "summari": [163, 165, 166, 167, 169, 171, 172, 173, 174, 175, 177, 179, 421, 423, 424, 426, 428, 430, 431, 432, 433, 434, 436, 438], "distilbart_xsum_12_6": [163, 421], "barttestspec": [163, 421], "ab": [163, 421], "1910": [163, 421], "13461": [163, 421], "pytorch": [163, 169, 172, 421, 428, 431], "fairseq": [163, 169, 172, 421, 428, 431], "nois": [163, 421], "reconstruct": [163, 213, 421, 472], "tranform": [163, 421], "randomli": [163, 421], "dialogu": [163, 167, 168, 174, 421, 426, 427, 433], "roug": [163, 421], "bleu": [163, 169, 172, 421, 428, 431], "ablat": [163, 421], "influenc": [163, 183, 421, 441], "rich": [163, 179, 421, 438], "rise": [163, 179, 421, 438], "methodologi": [163, 179, 421, 438], "landscap": [163, 179, 421, 438], "systemat": [163, 179, 421, 438], "dozen": [163, 179, 421, 438], "insight": [163, 179, 421, 438], "coloss": [163, 179, 421, 438], "facilit": [163, 179, 421, 438], "use_cach": [163, 421], "command": [164, 422], "c4ai": [164, 422], "highli": [164, 177, 422, 436], "rag": [164, 181, 422, 439], "c4ai_command_r_v01_int4": [164, 422], "bos_token": [164, 210, 422, 469], "start_of_turn_token": [164, 422], "user_token": [164, 422], "end_of_turn_token": [164, 422], "chatbot_token": [164, 422], "excit": [164, 167, 422, 426], "whatev": [164, 422], "minicpm": [165, 423], "unveil": [165, 423], "2b": [165, 423], "4b": [165, 177, 423, 436], "close": [165, 167, 168, 173, 174, 423, 426, 427, 432, 433], "mistral": [165, 171, 423, 430], "7b": [165, 167, 171, 173, 174, 175, 177, 178, 423, 426, 430, 432, 433, 434, 436, 437], "llama2": [165, 167, 423, 426], "13b": [165, 167, 171, 177, 178, 423, 426, 430, 436, 437], "mpt": [165, 423], "30b": [165, 423], "falcon": [165, 423], "40b": [165, 423], "mtbench": [165, 423], "closest": [165, 423], "70b": [165, 167, 168, 423, 426, 427], "vicuna": [165, 423], "33b": [165, 178, 423, 437], "v0": [165, 171, 423, 430], "zephyr": [165, 423], "dpo": [165, 423], "multimodel": [165, 423], "phi": [165, 174, 175, 176, 423, 433, 434, 435], "6b": [165, 423], "qwen": [165, 177, 423, 436], "vl": [165, 423], "deploi": [165, 170, 175, 317, 423, 429, 434, 521], "smartphon": [165, 423], "verbal": [165, 423], "cpm": [165, 423], "mini_cpm_2b_8bit": [165, 423], "shengdinghu": [165, 423], "notion": [165, 423], "d4d3a8c426424654a4e80e42a711cb20": [165, 423], "openbmb": [165, 423], "leonardo": [165, 166, 167, 171, 173, 174, 175, 177, 423, 424, 426, 430, 432, 433, 434, 436], "student": [165, 173, 174, 175, 177, 423, 432, 433, 434, 436], "california": [165, 173, 174, 175, 177, 423, 432, 433, 434, 436], "lo": [165, 423], "passion": [165, 173, 174, 175, 177, 423, 432, 433, 434, 436], "cultur": [165, 423], "plai": [165, 423], "basketbal": [165, 423], "caus": [166, 193, 424, 452], "goal": [166, 172, 196, 424, 431, 455], "direct": [166, 169, 172, 175, 424, 428, 431, 434], "10x": [166, 424], "synthet": [166, 174, 175, 424, 433, 434], "unpreced": [166, 424], "prime": [166, 424], "lengthi": [166, 424], "benefit": [166, 424], "suffici": [166, 424], "learner": [166, 424], "taskspecif": [166, 424], "webpag": [166, 236, 424, 496, 521], "webtext": [166, 424], "coqa": [166, 424], "exceed": [166, 168, 424, 427], "127": [166, 424], "fashion": [166, 181, 424, 439], "5b": [166, 177, 424, 436], "underfit": [166, 424], "reflect": [166, 169, 424, 428], "paragraph": [166, 183, 236, 237, 249, 424, 441, 496, 509], "promis": [166, 424], "1776": [166, 167, 424, 426], "came": [166, 167, 424, 426], "kingdom": [166, 167, 424, 426], "4k": [167, 175, 426, 434], "reinforc": [167, 168, 174, 177, 426, 427, 433, 436], "feedback": [167, 168, 174, 177, 426, 427, 433, 436], "rlhf": [167, 168, 177, 426, 427, 436], "safeti": [167, 168, 172, 174, 175, 426, 427, 431, 433, 434], "chatgpt": [167, 426], "llam2": [167, 174, 426, 433], "facebookresearch": [167, 168, 426, 427], "substitut": [167, 174, 426, 433], "llama_2_7b_chat_hf_int4": [167, 426], "cut": [168, 210, 427, 469], "8b": [168, 177, 427, 436], "expans": [168, 427], "offer": [168, 171, 173, 427, 430, 432, 524, 526, 529], "known": [168, 427], "llama3": [168, 427], "llama_3_7b_instruct_hf_int4": [168, 427], "latest": [168, 427], "meta": [168, 234, 427, 493, 522], "commerci": [168, 170, 173, 317, 427, 429, 432], "aim": [168, 172, 181, 427, 431, 439], "foster": [168, 427], "collabor": [168, 178, 427, 437], "minion": [168, 427], "chatbot": [168, 427], "respond": [168, 210, 427, 469], "speak": [168, 427], "oooh": [168, 427], "yeah": [168, 427], "bana": [168, 427], "na": [168, 427], "m2m100": [169, 428], "seq": [169, 172, 428, 431], "900": [169, 428], "m2m100_418m": [169, 428], "beyond": [169, 172, 428, 431], "worldwid": [169, 428], "spars": [169, 172, 428, 431], "focu": [169, 172, 175, 428, 431, 434], "wmt": [169, 428], "m2m": [169, 428], "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": [169, 172, 428, 431], "life": [169, 172, 428, 431], "chocol": [169, 172, 428, 431], "marian": [170, 317, 429], "mainli": [170, 317, 429], "academ": [170, 175, 317, 429, 434], "notabl": [170, 171, 317, 429, 430], "edinburgh": [170, 317, 429], "adam": [170, 317, 429], "mickiewicz": [170, 317, 429], "pozna\u0144": [170, 317, 429], "contributor": [170, 317, 429], "mariannmt": [170, 317, 429], "behind": [170, 172, 173, 174, 177, 317, 429, 431, 432, 433, 436], "opus_mt_en_fr": [170, 317, 429], "differenti": [170, 317, 429], "toolkit": [170, 317, 429], "capit": [170, 183, 237, 238, 317, 429, 441], "quell": [170, 317, 429], "capital": [170, 317, 429], "devrait": [170, 317, 429], "savoir": [170, 317, 429], "fran\u00e7ai": [170, 317, 429], "34b": [171, 178, 430, 437], "strike": [171, 430], "balanc": [171, 221, 430, 480], "rival": [171, 175, 430, 434], "codellama": [171, 178, 430, 437], "latter": [171, 430], "gqa": [171, 177, 430, 436], "quicker": [171, 430], "compromis": [171, 430], "streamlin": [171, 234, 430, 493, 520], "smoother": [171, 430], "slide": [171, 177, 237, 249, 430, 436, 497, 509], "swa": [171, 177, 430, 436], "reliabl": [171, 234, 430, 493, 520], "mistral_7b": [171, 430], "mistralai": [171, 430], "coupl": [171, 430], "da": [171, 430], "vinci": [171, 430], "invent": [171, 430], "microscop": [171, 430], "No": [171, 172, 221, 252, 430, 431, 480, 511, 523], "late": [171, 430], "16th": [171, 430], "nllb": [172, 431], "nllb_distilled_600m_8int": [172, 431], "driven": [172, 431], "erad": [172, 431], "barrier": [172, 431], "solidifi": [172, 431], "artifici": [172, 173, 174, 175, 177, 431, 432, 433, 434, 436], "intellig": [172, 173, 174, 175, 177, 431, 432, 433, 434, 436], "effort": [172, 173, 431, 432], "coalesc": [172, 431], "leav": [172, 431], "vast": [172, 431], "major": [172, 431], "mostli": [172, 431], "safe": [172, 431], "ethic": [172, 431], "consider": [172, 431], "exploratori": [172, 431], "interview": [172, 431], "nativ": [172, 431, 521], "speaker": [172, 236, 237, 431, 496, 497], "narrow": [172, 431], "gate": [172, 173, 431, 432], "expert": [172, 431], "counteract": [172, 431], "overfit": [172, 431], "flore": [172, 431], "assess": [172, 174, 175, 431, 433, 434], "groundwork": [172, 431], "realiz": [172, 431], "zho_han": [172, 431], "eng_latn": [172, 431], "olmo": [173, 432], "dolma": [173, 432], "soon": [173, 432], "olmo_1b_int4": [173, 432], "lm": [173, 183, 432, 441], "surg": [173, 432], "interfac": [173, 234, 236, 432, 493, 496, 520, 528], "undisclos": [173, 432], "scientif": [173, 178, 432, 437], "risk": [173, 432], "believ": [173, 432], "hope": [173, 432], "empow": [173, 432], "strengthen": [173, 432], "wave": [173, 432], "innov": [173, 175, 432, 434], "skill": [173, 174, 175, 177, 432, 433, 434, 436], "textbook": [174, 433], "augment": [174, 433], "websit": [174, 175, 433, 434], "educ": [174, 433], "sens": [174, 175, 433, 434, 529], "showcas": [174, 175, 177, 433, 434, 436], "nearli": [174, 433], "hasn": [174, 433], "craft": [174, 433], "vital": [174, 433], "societ": [174, 433], "phi2": [174, 433], "medium": [175, 434], "14b": [175, 176, 177, 434, 435, 436], "underw": [175, 434], "post": [175, 203, 434, 461], "math": [175, 177, 178, 434, 436, 437], "phi3": [175, 434], "phi_3_mini_128k_instruct": [175, 434], "big": [175, 236, 249, 434, 496, 509], "trillion": [175, 178, 434, 437], "mixtral": [175, 434], "8x7b": [175, 434], "69": [175, 253, 434, 513], "mmlu": [175, 434], "mt": [175, 434], "bench": [175, 434], "enough": [175, 434], "compos": [175, 434], "heavili": [175, 434], "8t": [175, 176, 434, 435], "moreov": [175, 434], "2412": [176, 435], "08905": [176, 435], "phi4": [176, 435], "qwen1": [177, 436], "72b": [177, 436], "stabl": [177, 436], "32k": [177, 436], "swiglu": [177, 436], "qkv": [177, 436], "qwenlm": [177, 436], "revolution": [177, 436], "thought": [177, 436], "instal": [177, 234, 260, 436, 493, 522], "encompass": [177, 436], "distinct": [177, 436], "multitud": [177, 436], "possess": [177, 436], "plan": [177, 196, 436, 455], "impress": [177, 436], "bigger": [177, 436], "qwen_7": [177, 436], "5b_chat": [177, 436], "starcoder2": [178, 437], "predecessor": [178, 437], "starcoder2transform": [178, 437], "bigcod": [178, 437], "starcod": [178, 437], "partnership": [178, 437], "swh": [178, 437], "stack": [178, 437], "digit": [178, 437], "archiv": [178, 437], "619": [178, 437], "15b": [178, 437], "thoroughli": [178, 437], "starcoderbas": [178, 437], "twice": [178, 437], "although": [178, 437], "deepseekcod": [178, 437], "openrail": [178, 437], "transpar": [178, 437], "regard": [178, 220, 437, 479], "swhid": [178, 437], "def": [178, 226, 437, 485], "t5": [179, 438], "reconsid": [179, 438], "hyper": [179, 438], "t5_small": [179, 438], "encount": [179, 438], "aggregationmethod": [180, 181, 439], "asretriev": [180, 181, 439], "asretrieverqueri": [180, 181, 439], "bucketlength": [180, 181, 439], "identityrank": [180, 181, 439], "numhasht": [180, 181, 439], "numberofneighbour": [180, 181, 439], "setaggregationmethod": [180, 181, 439], "setbucketlength": [180, 181, 439], "setidentityrank": [180, 181, 439], "setnumhasht": [180, 181, 439], "setnumberofneighbour": [180, 181, 439], "setsimilaritymethod": [180, 181, 439], "setvisibledist": [180, 181, 439], "similaritymethod": [180, 181, 439], "visibledist": [180, 181, 439], "extractnearestneighbor": [180, 181, 439], "getoutputcol": [180, 181, 197, 198, 200, 201, 202, 203, 207, 209, 214, 217, 439, 456, 458, 459, 460, 461, 465, 468, 475], "outputcol": [180, 181, 197, 198, 200, 201, 202, 203, 204, 207, 209, 210, 214, 217, 235, 237, 238, 245, 439, 456, 458, 459, 460, 461, 462, 465, 468, 469, 475, 497, 498, 505], "setextractnearestneighbor": [180, 181, 439], "documentsimilarityrank": [181, 439], "lsh": [181, 439], "lib": [181, 439], "execut": [181, 208, 221, 347, 439, 467, 480, 524, 528], "ranker": [181, 439], "jupyt": [181, 234, 259, 439, 493, 520], "doc_similarity_rank": [181, 214, 218, 439, 476], "enablecach": [181, 214, 221, 439, 480], "rdd": [181, 221, 439, 480], "neighbour": [181, 439], "brp": [181, 439], "bucket": [181, 439], "euclidean": [181, 439], "hash": [181, 439], "debug": [181, 439], "document_similarity_ranker_finish": [181, 439], "finished_doc_similarity_rankings_id": [181, 439], "finished_doc_similarity_rankings_neighbor": [181, 439], "docsimrankerpipelin": [181, 439], "1510101612": [181, 439], "1634839239": [181, 439], "12448559591306324": [181, 439], "612640902": [181, 439], "1274183715": [181, 439], "1220122862046063": [181, 439], "1320876223": [181, 439], "1293373212": [181, 439], "17848855164122393": [181, 439], "1548374770": [181, 439], "1719102856": [181, 439], "23297156732534166": [181, 439], "wise": [181, 439], "inclus": [181, 439], "visibl": [181, 439], "addregexclass": [182, 183, 441], "addvocabclass": [182, 183, 441], "casestrategi": [182, 183, 441], "classcount": [182, 183, 441], "compoundcount": [182, 183, 441], "errorthreshold": [182, 183, 441], "finalr": [182, 183, 441], "initialr": [182, 183, 441], "languagemodelclass": [182, 183, 441], "maxcandid": [182, 183, 441], "maxsentlen": [182, 183, 441], "maxwindowlen": [182, 183, 441], "setcasestrategi": [182, 183, 441], "setclasscount": [182, 183, 441], "setcompoundcount": [182, 183, 441], "setepoch": [182, 183, 441], "seterrorthreshold": [182, 183, 441], "setfinalr": [182, 183, 441], "setinitialr": [182, 183, 441], "setlanguagemodelclass": [182, 183, 441], "setmaxcandid": [182, 183, 441], "setmaxsentlen": [182, 183, 441], "setmaxwindowlen": [182, 183, 441], "settradeoff": [182, 183, 441], "setvalidationfract": [182, 183, 441], "setweighteddistpath": [182, 183, 441], "setwordmaxdist": [182, 183, 441], "tradeoff": [182, 183, 441], "validationfract": [182, 183, 441], "weighteddistpath": [182, 183, 441], "wordmaxdist": [182, 183, 441], "comparelowcas": [182, 183, 441], "correctsymbol": [182, 183, 441], "gamma": [182, 183, 441], "getwordclass": [182, 183, 441], "idsvocab": [182, 183, 441], "setclass": [182, 183, 441], "setcomparelowcas": [182, 183, 441], "setcorrectsymbol": [182, 183, 441], "setgamma": [182, 183, 441], "setidsvocab": [182, 183, 441], "setvocabfreq": [182, 183, 441], "setvocabid": [182, 183, 441], "setweight": [182, 183, 441], "updateregexclass": [182, 183, 441], "updatevocabclass": [182, 183, 441], "vocabfreq": [182, 183, 441], "vocabid": [182, 183, 441], "doublevari": [182, 184, 443], "dupslimit": [182, 184, 185, 443, 444], "frequencyprior": [182, 184, 443], "intersect": [182, 184, 443], "reductlimit": [182, 184, 443], "setdoublevari": [182, 184, 443], "setfrequencyprior": [182, 184, 443], "setshortcircuit": [182, 184, 443], "shortcircuit": [182, 184, 443], "vowelswaplimit": [182, 184, 443], "wordsizeignor": [182, 184, 443], "deletesthreshold": [182, 185, 444], "frequencythreshold": [182, 185, 195, 196, 444, 455], "maxeditdist": [182, 185, 444], "setdeletesthreshold": [182, 185, 444], "setfrequencythreshold": [182, 185, 195, 196, 444, 455], "setmaxeditdist": [182, 185, 444], "spell": [182, 183, 184, 185, 208, 213, 257, 382, 441, 442, 443, 444, 467, 472, 527, 528, 529], "contextspellcheck": [183, 441], "noisi": [183, 441], "surround": [183, 212, 441, 471], "edit": [183, 184, 185, 441, 443, 444], "subword": [183, 441], "checker": [183, 184, 185, 441, 443, 444, 527], "uppercas": [183, 441], "perplex": [183, 441], "nlm": [183, 441], "datapoint": [183, 441], "vocab": [183, 441], "compound": [183, 441], "levenshtein": [183, 184, 185, 441, 443, 444], "depth": [183, 441, 527], "spellcheck": [183, 184, 185, 441, 443, 444], "1650": [183, 441], "_name_": [183, 441], "userdist": [183, 441], "sentlen": [183, 441], "fraction": [183, 441], "dist": [183, 441], "spellcheck_dl": [183, 441], "decis": [183, 441], "usenewlin": [183, 441], "cold": [183, 441], "dreari": [183, 441], "smow": [183, 441], "norvigsweet": [184, 443], "norvig": [184, 443], "bayesian": [184, 443], "tokenpattern": [184, 443], "ham": [184, 443], "duplic": [184, 185, 443], "vowel": [184, 443], "corrector": [184, 443], "gummi": [184, 185, 443, 444], "gummic": [184, 185, 443, 444], "gummier": [184, 185, 443, 444], "gummiest": [184, 185, 443, 444], "gummifer": [184, 185, 443, 444], "basi": [184, 185, 443, 444], "sensitivti": 184, "token_pattern": [184, 185, 443, 444], "symmetr": [184, 185, 443, 444], "delet": [184, 185, 443, 444, 524], "damerau": [184, 185, 443, 444], "transpos": [184, 185, 443, 444], "spellcheck_norvig": [184, 443], "symspel": [184, 185, 443, 444], "somtim": [184, 443], "wrrite": [184, 185, 443, 444], "wordz": [184, 185, 443, 444], "erong": [184, 185, 443, 444], "sometim": [184, 185, 443, 444, 524], "wrong": [184, 185, 443, 444], "symmetricdelet": [185, 444], "teach": [185, 444], "patttern": [185, 444], "spellcheck_sd": [185, 444], "spmetim": [185, 444], "employ": [186, 445], "mllib": [187, 446, 521], "stopwordsremov": [187, 446], "cleantoken": [187, 201, 213, 446, 459, 472], "stopwords_en": [187, 446], "forth": [187, 446], "defaultparamswrit": 188, "defaultparamsread": 188, "assertiondlapproach": [188, 447], "medicalnerapproach": [188, 447], "srt": [188, 447], "greaph": [188, 447], "infix": [189, 191, 193, 450, 452], "setinfix": [189, 191, 450], "setprefix": [189, 191, 450], "positionalmask": [189, 192, 451], "setpositionalmask": [189, 192, 451], "settolowercas": [189, 192, 195, 196, 451, 455], "tolowercas": [189, 192, 195, 196, 451, 455], "addcontextchar": [189, 193, 452], "addexcept": [189, 193, 452], "addinfixpattern": [189, 193, 452], "addsplitchar": [189, 193, 452], "casesensitiveexcept": [189, 193, 452], "contextchar": [189, 193, 452], "exceptionspath": [189, 193, 452], "getcasesensitiveexcept": [189, 193, 452], "getcontextchar": [189, 193, 452], "getexcept": [189, 193, 452], "getinfixpattern": [189, 193, 452], "getprefixpattern": [189, 193, 452], "getsplitchar": [189, 193, 452], "getsuffixpattern": [189, 193, 452], "infixpattern": [189, 193, 452], "prefixpattern": [189, 193, 452], "setcasesensitiveexcept": [189, 193, 452], "setexcept": [189, 193, 452], "setexceptionspath": [189, 193, 452], "setinfixpattern": [189, 193, 452], "setprefixpattern": [189, 193, 452], "setsplitchar": [189, 193, 452], "setsuffixpattern": [189, 193, 452], "settargetpattern": [189, 193, 452], "splitchar": [189, 193, 452], "suffixpattern": [189, 193, 452], "targetpattern": [189, 193, 452], "flatten": [190, 246, 248, 448, 506, 508], "artist": [190, 448], "benezar": [190, 448], "robert": [190, 448], "farendel": [190, 448], "graduat": [190, 448], "luca": [190, 448], "qam": [191, 450], "guarante": [192, 451], "flag": [192, 451], "eventu": [192, 451], "nthi": [192, 451], "tokenizedsent": [193, 452], "rulefactori": [193, 220, 452, 479], "grab": [193, 452], "sub": [193, 452], "won": [193, 452], "didn": [193, 452], "jane": [193, 452], "boyfriend": [193, 452], "token_rul": [193, 452], "factori": 193, "17": [194, 253, 255, 453, 513, 515], "ambiguitythreshold": [195, 196, 455], "enableregextoken": [195, 196, 455], "getambiguitythreshold": [195, 196, 455], "getfrequencythreshold": [195, 196, 455], "setambiguitythreshold": [195, 196, 455], "setenableregextoken": [195, 196, 455], "setniter": [195, 196, 455], "wordsegment": [196, 455], "korean": [196, 455], "japanes": [196, 455], "correspond": [196, 234, 237, 245, 455, 493], "rr": [196, 455], "likewis": [196, 455], "themselv": [196, 455], "\u4e0a\u6d77": [196, 455], "\u8ba1\u5212": [196, 455], "\u5230": [196, 455], "\u672c": [196, 455], "\u4e16\u7eaa": [196, 455], "\u672b": [196, 455], "\u5b9e\u73b0": [196, 455], "\u4eba\u5747": [196, 455], "\u56fd\u5185": [196, 455], "\u751f\u4ea7": [196, 455], "\u603b\u503c": [196, 455], "\u4e94\u5343": [196, 455], "\u7f8e\u5143": [196, 455], "\u4e0a": [196, 455], "\u6d77": [196, 455], "\u8ba1": [196, 455], "\u5212": [196, 455], "\u4e16": [196, 455], "\u7eaa": [196, 455], "\u5b9e": [196, 455], "\u73b0": [196, 455], "\u4eba": [196, 455], "\u5747": [196, 455], "\u56fd": [196, 455], "\u5185": [196, 455], "\u751f": [196, 455], "\u4ea7": [196, 455], "\u603b": [196, 455], "ll\u503c": [196, 455], "\u4e94": [196, 455], "\u5343": [196, 455], "\u7f8e": [196, 455], "\u5143": [196, 455], "shanghai": [196, 455], "dollar": [196, 455], "capita": [196, 455], "gdp": [196, 455], "tip": [196, 455], "frame": [196, 455], "frequent": [196, 455], "xue": [196, 455], "nianwen": [196, 455], "volum": [196, 455], "februari": [196, 455], "aclweb": [196, 455], "aclanthologi": [196, 455], "o03": [196, 455], "4002": [196, 455], "chinese_train": [196, 455], "utf8": [196, 455], "\u5341": [196, 455], "\u56db": [196, 455], "\u4e0d": [196, 455], "\u662f": [196, 455], "trainingdataset": [196, 455], "plit": [196, 455], "words_seg": [196, 455], "wordseg_pku": [196, 455], "zh": [196, 455], "\u7136\u800c": [196, 455], "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": [196, 455], "\u9019\u6a23": [196, 455], "\u7684": [196, 455], "\u8655\u7406": [196, 455], "\u4e5f": [196, 455], "\u884d\u751f": [196, 455], "\u4e86": [196, 455], "\u4e00\u4e9b": [196, 455], "\u554f\u984c": [196, 455], "chunkcol": [197, 199, 457], "failonmiss": [197, 199, 457], "isarrai": [197, 199, 457], "setchunkcol": [197, 199, 457], "setfailonmiss": [197, 199, 457], "setisarrai": [197, 199, 457], "setstartcol": [197, 199, 457], "setstartcolbytokenindex": [197, 199, 457], "startcol": [197, 199, 457], "startcolbytokenindex": [197, 199, 457], "cleanupmod": [197, 200, 209, 458, 468], "idcol": [197, 200, 209, 458, 468], "metadatacol": [197, 200, 209, 458, 468], "setidcol": [197, 200, 209, 458, 468], "setmetadatacol": [197, 200, 209, 458, 468], "cleanannot": [197, 201, 202, 204, 459, 460, 462], "outputasvector": [197, 201, 459], "annotationsplitsymbol": [197, 202, 460], "includemetadata": [197, 202, 460], "outputasarrai": [197, 202, 204, 460, 462], "parseembeddingsvector": [197, 202, 460], "setannotationsplitsymbol": [197, 202, 460], "setincludemetadata": [197, 202, 460, 525], "setoutputasarrai": [197, 202, 204, 460, 462], "setparseembeddingsvector": [197, 202, 460], "setvaluesplitsymbol": [197, 202, 460], "valuesplitsymbol": [197, 202, 460], "getminmaxsc": [197, 203, 461], "getminrelevancescor": [197, 203, 461], "gettopk": [197, 203, 461], "minmaxsc": [197, 203, 461], "minrelevancescor": [197, 203, 461], "setminmaxsc": [197, 203, 461], "setminrelevancescor": [197, 203, 461], "settextcol": [197, 207, 465], "textcol": [197, 207, 251, 252, 465, 510, 511], "fullannot": [197, 208, 239, 240, 467, 500], "fullannotateimag": [197, 208, 239, 240, 467, 500], "getignoreunsupport": [197, 208, 467], "setignoreunsupport": [197, 208, 467], "addassist": [197, 210, 469], "setaddassist": [197, 210, 469], "setchattempl": [197, 210, 214, 221, 469, 480], "csvdelimit": [197, 212, 471], "escapecsvdelimit": [197, 212, 471], "setcsvdelimit": [197, 212, 471], "setescapecsvdelimit": [197, 212, 471], "inferschema": [198, 456], "librispeech_asr_dummy_clean_audio_array_parquet": [198, 456], "float_arrai": [198, 456], "stringtyp": [199, 226, 258, 457], "fail": [199, 347, 457], "chunkassembl": [199, 457], "cleanup": [200, 209, 458, 468], "inplac": [200, 209, 458, 468], "inplace_ful": [200, 209, 458, 468], "shrink_ful": [200, 209, 458, 468], "each_ful": [200, 209, 458, 468], "delete_ful": [200, 209, 458, 468], "usabl": [201, 459], "lda": [201, 459], "forest": [201, 459], "featurecol": [201, 459], "gloveembed": [201, 459], "finished_sentence_embed": [201, 459], "resultwiths": [201, 459], "1619900017976761": [201, 459], "045552998781204224": [201, 459], "03229299932718277": [201, 459], "685609996318": [201, 459], "42416998744010925": [201, 459], "1378999948501587": [201, 459], "5717899799346924": [201, 459], "5078899860382": [201, 459], "08621499687433243": [201, 459], "15772999823093414": [201, 459], "06067200005054474": [201, 459], "395359992980": [201, 459], "4970499873161316": [201, 459], "7164199948310852": [201, 459], "40119001269340515": [201, 459], "05761000141501": [201, 459], "08170200139284134": [201, 459], "7159299850463867": [201, 459], "20677000284194946": [201, 459], "0295659992843": [201, 459], "ouput": 201, "sort": [203, 235, 237, 243, 245, 461, 497, 505], "descend": [203, 461], "ranked_docu": [203, 461], "minvalu": [203, 461], "finishedresult": [204, 462], "java_obj": [205, 230, 232, 463, 489, 492], "javaobject": [205, 206, 232, 463, 464, 492], "abc": [205, 232], "classmethod": [207, 228, 465, 487], "png": [207, 465], "gif": [207, 465], "bmp": [207, 465], "parse_embed": [208, 240, 467, 500], "principl": [208, 467, 528], "everyth": [208, 467, 528, 529], "happi": [208, 467, 523, 525, 528, 529], "prp": [208, 252, 253, 467, 511, 513, 523, 528, 529, 530], "rb": [208, 253, 467, 513, 523, 528, 529, 530], "optional_target": [208, 240, 467, 500], "explain_document_pipelin": [208, 226, 240, 467, 485, 500, 523, 528, 529], "dict_kei": [208, 240, 467, 500], "path_to_imag": [208, 240, 467, 500], "unsupport": [208, 467], "text2": [209, 468], "document1": [209, 468], "document2": [209, 468], "assembl": [210, 237, 469, 497], "messag": [210, 247, 347, 469, 507, 522], "df": [210, 236, 469, 496], "custom_tool": [210, 469], "endif": [210, 469], "tools_in_user_messag": [210, 469], "date_str": [210, 469], "jul": [210, 469], "2024": [210, 469], "block": [210, 236, 237, 469, 496, 497], "slot": [210, 469], "system_messag": [210, 469], "builtin": [210, 469], "builtin_tool": [210, 469], "environ": [210, 259, 347, 469, 521], "ipython": [210, 469], "reject": [210, 251, 469, 510, 530], "equalto": [210, 469], "code_interpret": [210, 469], "decemb": [210, 469], "2023": [210, 469], "argument": [210, 241, 257, 347, 469, 501, 517], "tojson": [210, 469], "indent": [210, 469], "endfor": [210, 469], "guidanc": [210, 469], "plug": [210, 469], "first_user_messag": [210, 469], "raise_except": [210, 469], "proper": [210, 469], "tool_cal": [210, 469], "elif": [210, 469], "python_tag": [210, 469], "arg_nam": [210, 469], "arg_val": [210, 469], "eom_id": [210, 469], "add_generation_prompt": [210, 469], "nhello": [210, 469], "arg": [211, 228, 230, 258, 470, 489, 518], "decid": [211, 237, 470], "behav": [211, 470], "exactli": [211, 470], "pipeline_model": [211, 234, 245, 246, 467, 470, 493, 505, 506, 520], "tab": [212, 234, 471, 493, 520], "escap": [212, 471], "quot": [212, 471], "defailt": [212, 471], "comma": [212, 471], "table_csv": [212, 471], "csv_data": [212, 471], "input_format": [212, 471], "cleantext": [213, 472], "opensourc": [213, 472], "getlazyannot": [214, 217, 475], "lazyannot": [214, 217, 475], "setlazyannot": [214, 217, 475], "features": [214, 221, 480], "paddingsid": [214, 221, 480], "paddingvalu": [214, 221, 480], "returnattentionmask": [214, 221, 480], "samplingr": [214, 221, 480], "setdonorm": [214, 221, 480], "setfeatures": [214, 221, 480], "setpaddingsid": [214, 221, 480], "setpaddingvalu": [214, 221, 480], "setreturnattentionmask": [214, 221, 480], "setsamplingr": [214, 221, 480], "getbatchs": [214, 221, 480], "contradictionidparam": [214, 221, 480], "entailmentidparam": [214, 221, 480], "setcontradictionidparam": [214, 221, 480], "setentailmentidparam": [214, 221, 480], "getcasesensit": [214, 221, 480], "getactiv": [214, 221, 480], "getmultilabel": [214, 221, 480], "multilabel": [214, 221, 480], "setactiv": [214, 221, 480], "setmultilabel": [214, 221, 480], "getuseclstoken": [214, 221, 480], "setuseclstoken": [214, 221, 480], "getdimens": [214, 221, 480], "getenablecach": [214, 221, 480], "setenablecach": [214, 221, 480], "getengin": [214, 221, 480], "setnreturnsequ": [214, 221, 480], "setdores": [214, 221, 480], "setfeatureextractortyp": [214, 221, 480], "setimagemean": [214, 221, 480], "setimagestd": [214, 221, 480], "setresampl": [214, 221, 480], "disablelog": [214, 221, 480], "dynamictemperatureexpon": [214, 221, 480], "dynamictemperaturerang": [214, 221, 480], "logverbos": [214, 221, 480], "setcacheprompt": [214, 221, 480], "setdisablelog": [214, 221, 480], "setdisabletokenid": [214, 221, 480], "setdynamictemperatureexpon": [214, 221, 480], "setdynamictemperaturerang": [214, 221, 480], "setgrammar": [214, 221, 480], "setignoreeo": [214, 221, 480], "setinputprefix": [214, 221, 480], "setinputsuffix": [214, 221, 480], "setlogverbos": [214, 221, 480], "setmirostat": [214, 221, 480], "setmirostateta": [214, 221, 480], "setmirostattau": [214, 221, 480], "setmodelalia": [214, 221, 480], "setmodeldraft": [214, 221, 480], "setndraft": [214, 221, 480], "setngpulayersdraft": [214, 221, 480], "setnkeep": [214, 221, 480], "setpenaltyprompt": [214, 221, 480], "setsampl": [214, 221, 480], "setsystemprompt": [214, 221, 480], "settokenbia": [214, 221, 480], "settokenidbia": [214, 221, 480], "setusechattempl": [214, 221, 480], "max_length_limit": [214, 221, 480], "getmaxsentencelength": [214, 221, 480], "getstoragepath": [214, 224, 483], "storagepath": [214, 224, 483], "savestorag": [214, 224, 483], "enableinmemorystorag": [214, 224, 483], "getenableinmemorystorag": [214, 224, 483], "getincludestorag": [214, 224, 483], "includestorag": [214, 224, 483], "setenableinmemorystorag": [214, 224, 483], "setincludestorag": [214, 224, 483], "getstorageref": [214, 224, 483], "storageref": [214, 224, 483], "lazili": [217, 475], "renam": 217, "lazi": 217, "cov_obj": [219, 477], "recal": [221, 480], "spread": [221, 480], "evenli": [221, 480], "isol": [221, 480], "spawn": [221, 480], "cpu": [221, 480], "numa_ctl": [221, 480], "numactl": [221, 480], "mirror": [221, 480], "tokenbia": [221, 480], "tokenidbia": [221, 480], "fo": [225, 484], "output_column": [226, 485], "vbz": [226, 251, 485, 510, 530], "f": [226, 234, 237, 245, 246, 485, 493, 497, 506, 520], "filter_po": [226, 485], "epeu": [226, 485], "output_typ": [226, 485], "udf": [226, 485], "userdefinedfunct": [226, 485], "nnp_token": [226, 485], "lambda": [226, 485], "annotatyon_typ": [226, 485], "structfield": [226, 258], "integertyp": [226, 258], "maptyp": 226, "floattyp": 226, "chunks_df": [226, 485], "pos_chunk": [226, 485], "getdatafram": [227, 230, 489], "new_java_arrai": [227, 230, 489], "new_java_array_integ": [227, 230, 489], "new_java_array_str": [227, 230, 489], "new_java_obj": [227, 230, 489], "spark_vers": [227, 230, 489], "getparamvalu": [227, 231, 491], "getter_attr": [227, 231, 491], "setparamvalu": [227, 231, 491], "transform_recurs": [227, 232, 492], "kwd": 228, "javamlread": [228, 245, 487], "mlreader": [228, 487], "clazz": [228, 487], "rl": [228, 487], "javatransform": [229, 245], "javawrapp": [230, 489], "jdf": [230, 489], "pylist": [230, 489], "java_class": [230, 489], "todo": [230, 489], "paramnam": [231, 491], "log_asset": [233, 234, 493], "log_asset_data": [233, 234, 493], "log_completed_run": [233, 234, 493], "log_metr": [233, 234, 493, 520], "log_paramet": [233, 234, 493], "log_pipeline_paramet": [233, 234, 493, 520], "log_visu": [233, 234, 493, 520], "parti": [233, 260, 494], "workspac": [234, 493], "project_nam": [234, 493, 520], "comet_mod": [234, 493, 520], "experiment_id": [234, 493], "experiment_kwarg": [234, 493], "logger": [234, 493, 520], "practition": [234, 493, 520], "lifecycl": [234, 493, 520, 522], "track": [234, 493, 520, 521], "outputlogpath": [234, 493, 520], "onlin": [234, 493, 520], "reus": [234, 238, 246, 247, 493, 498, 506, 507], "importerror": [234, 493], "output_log_path": [234, 493, 520], "embd": [234, 493, 520], "logdir": [234, 493, 520], "attribut": [234, 347], "comet_ml": [234, 493, 520], "submit": [234, 259, 493, 520], "outstand": [234, 493], "asset_path": [234, 493], "upload": [234, 257, 493, 517], "asset": [234, 493], "attach": [234, 236, 237, 249, 407, 408, 475, 480, 491, 493, 496, 497, 509], "log_file_path": [234, 493], "sklearn": [234, 493, 520], "multilabelbinar": [234, 493, 520], "classification_report": [234, 493, 520], "preds_df": [234, 493, 520], "topanda": [234, 493, 520], "mlb": [234, 493, 520], "y_true": [234, 493, 520], "fit_transform": [234, 493, 520], "y_pred": [234, 493, 520], "output_dict": [234, 493, 520], "html": [234, 236, 237, 238, 243, 246, 247, 249, 493, 496, 497, 498, 506, 507, 509, 520], "viz": [234, 493, 520], "colum": [234, 493, 520], "ner_chunk": [234, 493, 520], "sparknlp_displai": [234, 493, 520], "nervisu": [234, 493, 520], "idx": [234, 493, 520], "enumer": [234, 493, 520], "label_col": [234, 493, 520], "document_col": [234, 493, 520], "return_html": [234, 493, 520], "interv": [234, 493], "refresh": [234, 493], "partition_text": [235, 236, 496], "partition_url": [235, 236, 496], "chunkingstrategi": [235, 237, 497], "combinetextundernchar": [235, 237, 497], "maxcharact": [235, 237, 497], "newafternchar": [235, 237, 497], "overlapal": [235, 237, 497], "setchunkingstrategi": [235, 237, 497], "setcombinetextundernchar": [235, 237, 497], "setmaxcharact": [235, 237, 497], "setnewafternchar": [235, 237, 497], "setoverlap": [235, 237, 497], "setoverlapal": [235, 237, 497], "addattachmentcont": [235, 237, 497], "getaddattachmentcont": [235, 237, 497], "setaddattachmentcont": [235, 237, 497], "appendcel": [235, 237, 497], "cellsepar": [235, 237, 497], "getappendcel": [235, 237, 497], "getcellsepar": [235, 237, 497], "setappendcel": [235, 237, 497], "setcellsepar": [235, 237, 497], "gettimeout": [235, 237, 497], "sethead": [235, 237, 238, 497, 498], "settimeout": [235, 237, 497], "timeout": [235, 236, 237, 496, 497], "extractcoordin": [235, 237, 243, 245, 497, 505], "normalizeligatur": [235, 237, 243, 245, 497, 505], "onlypagenum": [235, 237, 243, 245, 497, 505], "origincol": [235, 237, 497], "pagenumcol": [235, 237, 243, 245, 497, 505], "partitionnum": [235, 237, 243, 245, 497, 505], "readasimag": [235, 237, 497], "setextractcoordin": [235, 237, 243, 245, 497, 505], "setnormalizeligatur": [235, 237, 243, 245, 497, 505], "setonlypagenum": [235, 237, 243, 245, 497, 505], "setorigincol": [235, 237, 497], "setpagenumcol": [235, 237, 243, 245, 497, 505], "setpartitionnum": [235, 237, 243, 245, 497, 505], "setreadasimag": [235, 237, 497], "setsort": [235, 237, 243, 245, 497, 505], "setsplitpag": [235, 237, 243, 245, 497, 505], "setstoresplittedpdf": [235, 237, 243, 245, 497, 505], "settextstripp": [235, 237, 243, 245, 497, 505], "splitpag": [235, 237, 243, 245, 497, 505], "storesplittedpdf": [235, 237, 243, 245, 497, 505], "textstripp": [235, 237, 243, 245, 497, 505], "getincludeslidenot": [235, 237, 497], "includeslidenot": [235, 237, 497], "setincludeslidenot": [235, 237, 497], "contentpath": [235, 237, 238, 497, 498], "contenttyp": [235, 237, 238, 497, 498], "explodedoc": [235, 237, 497], "ignoreexcept": [235, 237, 497], "includepagebreak": [235, 237, 238, 497, 498], "infertablestructur": [235, 237, 238, 497, 498], "setcontentpath": [235, 237, 238, 246, 497, 498, 506], "setcontenttyp": [235, 237, 238, 246, 497, 498, 506], "setexplodedoc": [235, 237, 497], "setignoreexcept": [235, 237, 497], "setincludepagebreak": [235, 237, 238, 497, 498], "setinfertablestructur": [235, 237, 238, 497, 498], "setstorecont": [235, 237, 238, 497, 498], "settitlefonts": [235, 237, 238, 497, 498], "storecont": [235, 237, 238, 497, 498], "titlefonts": [235, 237, 238, 497, 498], "getgroupbrokenparagraph": [235, 237, 497], "getmaxlinecount": [235, 237, 497], "getparagraphsplit": [235, 237, 497], "getshortlinewordthreshold": [235, 237, 497], "getthreshold": [235, 237, 497], "gettitlelengths": [235, 237, 497], "groupbrokenparagraph": [235, 237, 497], "maxlinecount": [235, 237, 497], "paragraphsplit": [235, 237, 497], "setgroupbrokenparagraph": [235, 237, 497], "setmaxlinecount": [235, 237, 497], "setparagraphsplit": [235, 237, 497], "setshortlinewordthreshold": [235, 237, 497], "settitlelengths": [235, 237, 497], "shortlinewordthreshold": [235, 237, 497], "titlelengths": [235, 237, 497], "getcontentpath": [235, 238, 498], "getcontenttyp": [235, 238, 498], "getincludepagebreak": [235, 238, 498], "getinfertablestructur": [235, 238, 498], "getstorecont": [235, 238, 498], "gettitlefonts": [235, 238, 498], "docx": [236, 238, 246, 496, 498, 506], "xlsx": [236, 238, 246, 496, 498, 506], "powerpoint": [236, 238, 246, 249, 496, 498, 506, 509], "ppt": [236, 238, 243, 246, 249, 496, 498, 506, 509], "pptx": [236, 238, 246, 496, 498, 506], "eml": [236, 238, 246, 496, 498, 506], "msg": [236, 238, 246, 496, 498, 506], "content_typ": [236, 496], "store_cont": [236, 496], "fetch": [236, 237, 496], "title_font_s": [236, 496], "titl": [236, 237, 238, 246, 248, 249, 254, 257, 496, 497, 498, 506, 508, 509, 514, 517, 530], "include_page_break": [236, 496], "group_broken_paragraph": [236, 496], "title_length_s": [236, 496], "qualifi": [236, 237, 496], "paragraph_split": [236, 496], "short_line_word_threshold": [236, 496], "ratio": [236, 237, 496], "switch": [236, 496], "max_line_count": [236, 496], "include_slide_not": [236, 496], "infer_table_structur": [236, 496], "append_cel": [236, 496], "cell_separ": [236, 496], "add_attachment_cont": [236, 496], "txt_directori": [236, 496], "txtfile": [236, 496], "partition_df": [236, 496], "ema": [236, 496], "sev": [236, 496], "wikip": [236, 496], "wikipedi": [236, 496], "sparknlp_partition_reader_demo": [236, 496], "ipynb": [236, 496], "raw_text": [236, 496], "fox": [236, 496], "walk": [236, 496], "lane": [236, 496], "met": [236, 496], "text_df": [236, 496], "narrativetext": [236, 246, 249, 496, 506, 509], "elementtyp": [236, 246, 249, 496, 506, 509], "urls_df": [236, 496], "adjac": 237, "ligatur": [237, 245, 497], "\ufb02": [237, 245, 497], "stripper": [237, 244, 245, 497, 503], "layout": [237, 238, 245, 497, 505], "narr": [237, 246, 497, 506], "mime": [237, 238, 497], "manual": [237, 238, 259, 523], "heurist": [237, 238], "bold": [237, 238], "center": [237, 238], "fragment": 237, "smoothli": [238, 246, 247, 498, 506, 507], "workflow": [238, 246, 247, 498, 506, 507, 520], "seamless": [238, 246, 247, 498, 506, 507], "blizzard": [238, 498], "blizz": [238, 498], "juego": [238, 498], "gmail": [238, 498], "im": [238, 498], "from_disk": [239, 240, 500], "clearcach": [239, 241, 501], "downloadmodel": [239, 241, 501], "downloadmodeldirectli": [239, 241, 501], "downloadpipelin": [239, 241, 501], "showavailableannot": [239, 241, 501], "showpublicmodel": [239, 241, 501, 524], "showpublicpipelin": [239, 241, 501, 529], "showuncategorizedresourc": [239, 241, 501], "disk_loc": [240, 500], "light_model": [240, 500], "onto_100": [241, 501], "onto_300": [241, 501], "ner_dl_bert": [241, 501], "similarli": [241, 501], "check_spel": [241, 501, 529], "match_datetim": [241, 501, 529], "clear": [241, 501], "j_dwn": [241, 501], "pythonresourcedownload": [241, 501], "obj": [241, 252, 501, 511], "unzip": [241, 257, 501, 517], "filer": [241, 501], "pdf_layout_text_stripp": [243, 244, 503], "pdf_text_stripp": [243, 244, 503], "excludenontext": [243, 246, 506], "flattenoutput": [243, 246, 248, 506, 508], "outputasdocu": [243, 246, 506], "setexcludenontext": [243, 246, 506], "setflattenoutput": [243, 246, 248, 506, 508], "setoutputasdocu": [243, 246, 506], "settitlethreshold": [243, 246, 248, 506, 508], "titlethreshold": [243, 246, 248, 506, 508], "customprompttempl": [243, 247, 507], "prompttempl": [243, 247, 507], "setcustomprompttempl": [243, 247, 507], "setprompttempl": [243, 247, 507], "setusermessag": [243, 247, 507], "usermessag": [243, 247, 507], "pdflayouttextstripp": [244, 503], "pdftextstripp": [244, 503], "hasinputcol": 245, "hasoutputcol": 245, "pdf_path": [245, 505], "data_fram": [245, 505], "binaryfil": [245, 505], "pdf_df": [245, 249, 505, 509], "modificationtim": [245, 505], "paula": [245, 505], "2025": [245, 505], "height_dimens": [245, 505], "width_dimens": [245, 505], "pagenum": [245, 505], "pdf_directori": [246, 506], "empty_data_set": [246, 506], "result_df": [246, 506], "pagenumb": [246, 249, 506, 509], "filenam": [246, 247, 506, 507], "68": [246, 506], "markdown": [247, 249, 507, 509], "html_df": [249, 509], "Or": [249, 509], "shorthand": [249, 509], "email_df": [249, 509], "csvpath": [249, 509], "docpath": [249, 509], "csv_df": [249, 509], "alic": [249, 509], "bob": [249, 509], "tr": [249, 509], "td": [249, 509], "doc_df": [249, 509], "filepath": [249, 509], "simplifi": [249, 509], "sent_to": [249, 509], "danilo": [249, 509], "htmlpath": [249, 509], "illustr": [249, 509], "literatur": [249, 509], "permiss": [249, 509], "md_df": [249, 509], "elementid": [249, 509], "pdfpath": [249, 509], "pptdf": [249, 509], "txtdf": [249, 509], "analyt": [249, 509], "xlsdf": [249, 509], "financi": [249, 509], "sheetnam": [249, 509], "xml_df": [249, 509], "smith": [249, 509], "readjsonfil": [250, 255, 515], "documentcol": [251, 252, 510, 511], "sentencecol": [251, 252, 510, 511], "tokencol": [251, 510], "conlllabelindex": [251, 510], "conllposindex": [251, 510], "conlldocidcol": [251, 510], "doc_id": [251, 254, 510, 514], "labelcol": [251, 510], "includedocid": [251, 510], "docstart": [251, 510, 530], "eu": [251, 510, 530], "np": [251, 510, 530], "vp": [251, 510, 530], "misc": [251, 510, 530], "boycott": [251, 510, 530], "british": [251, 510, 530], "lamb": [251, 510, 530], "blackburn": [251, 510], "brussel": [251, 510], "1996": [251, 510], "08": [251, 510], "storage_level": [251, 510], "storagelevel": [251, 510], "lift": [251, 510], "disk_onli": [251, 510], "uposcol": [252, 511], "upo": [252, 511], "xposcol": [252, 511], "xpo": [252, 511], "sent_id": [252, 511], "sell": [252, 511], "pron": [252, 511], "nom": [252, 511], "plur": [252, 511], "_": [252, 511], "tens": [252, 511], "conj": [252, 511], "cc": [252, 511], "spaceaft": [252, 511], "punct": [252, 511], "conllufil": [252, 511, 530], "conlldataset": [252, 511, 530], "morph": [252, 511], "Into": [252, 511], "googleo": [252, 511], "sconj": [252, 511], "propn": [252, 511], "adp": [252, 511], "wp": [252, 511], "vbd": [252, 253, 511, 513, 530], "ago": [253, 513, 530], "posdf": [253, 513], "61": [253, 513], "67": [253, 254, 513, 514, 530], "nonexecut": [253, 513], "76": [253, 513], "director": [253, 513], "84": [253, 513], "outputposcol": [253, 513], "outputdocumentcol": [253, 513], "outputtextcol": [253, 513], "medic": [254, 514, 530], "medment": [254, 514, 530], "25763772": [254, 514, 530], "dctn4": [254, 514, 530], "t116": [254, 514, 530], "t123": [254, 514, 530], "c4308010": [254, 514, 530], "63": [254, 514, 530], "chronic": [254, 514, 530], "pseudomona": [254, 514, 530], "aeruginosa": [254, 514, 530], "infect": [254, 514, 530], "t047": [254, 514, 530], "c0854135": [254, 514, 530], "82": [254, 514, 530], "cystic": [254, 514, 530], "fibrosi": [254, 514, 530], "c0010674": [254, 514, 530], "120": [254, 514, 530], "pa": [254, 514, 530], "124": [254, 514, 530], "139": [254, 514, 530], "pubtatorfil": [254, 514], "corpus_pubtator_sampl": [254, 514], "pubtatordataset": [254, 514], "finished_token": [254, 514, 525], "finished_po": [254, 514], "finished_n": [254, 514], "finished_token_metadata": [254, 514], "finished_pos_metadata": [254, 514], "finished_label_metadata": [254, 514], "mo": [254, 514], "ispaddedtoken": [254, 514], "token_spac": [255, 515], "sentence_end": [255, 515], "spaci": [255, 515], "multi_doc_token": [255, 515], "went": [255, 515], "night": [255, 515], "bought": [255, 515], "54": [255, 515], "jsonfilepath": [255, 515], "model_data": [257, 517], "dictionary_for_upload": [257, 517], "model_zip_path": [257, 517], "pythoncod": [257, 517], "git_token": [257, 517], "predictedent": [257, 517], "sparknlpvers": [257, 517], "howtous": [257, 517], "livedemo": [257, 517], "runincolab": [257, 517], "scalacod": [257, 517], "nlucod": [257, 517], "datasourc": [257, 517], "includedmodel": [257, 517], "info": [257, 517], "zip_path": [257, 517], "zip": [257, 517], "folder_path": [257, 517], "binarytyp": 258, "quick": [259, 520, 525], "pypi": 259, "pip": 259, "anaconda": 259, "shell": 259, "compil": 259, "sbt": 259, "assembli": 259, "oracl": 259, "openjdk": 259, "0_292": 259, "sparknlp": [259, 520, 523, 524, 525, 526, 528, 529, 530], "python3": 259, "bin": 259, "cheat": 260, "guid": [260, 521], "py": [318, 439, 473, 474, 482, 488, 492, 508], "subclass": [318, 347, 439, 474, 488, 492, 508], "ins": [318, 439, 474, 492], "uid": [318, 439, 474, 492], "documenttokensplittertestspec": 347, "methodnam": 347, "runtest": 347, "fixtur": 347, "testcas": 347, "constructor": 347, "author": 347, "deconstruct": 347, "setup": 347, "teardown": 347, "__init__": 347, "signatur": 347, "failureexcept": 347, "assert": 347, "deem": 347, "longmessag": 347, "repr": 347, "failur": 347, "maxdiff": 347, "diff": 347, "difflib": 347, "hook": 347, "exercis": 347, "test_run": 347, "sbd": 382, "dictionary_path": [443, 444], "py4j": [463, 464, 492], "java_gatewai": [463, 464, 492], "mixin": 487, "javaparam": 487, "_java_obj": [488, 508], "sc": 489, "tf_graph": 516, "tf_graph_1x": 516, "overview": [519, 527], "dedic": 520, "account": 520, "inspect": 520, "init": 520, "sparknlp_experi": 520, "offline_directori": 520, "later": 520, "record": 521, "registri": 521, "central": 521, "send": 522, "mlflow": 522, "clearli": 523, "explain_document_ml": [523, 528, 529], "approx": [523, 528, 529], "mb": [523, 528, 529], "ok": [523, 528, 529], "spearhead": 524, "declar": 524, "accordingli": 524, "extra_loc": 524, "classifierdl_use_trec50": 524, "classifierdl_use_spam": 524, "column_nam": 524, "interchang": 525, "road": 525, "proce": 525, "constantli": 529, "train_po": 530, "training_conl": 530, "train_corpu": 530, "withcolumnrenam": 530, "trainingpubtatordf": 530, "corpus_pubt": 530}, "objects": {"": [[486, 0, 0, "-", "sparknlp"]], "sparknlp": [[261, 0, 0, "-", "annotation"], [262, 0, 0, "-", "annotation_audio"], [263, 0, 0, "-", "annotation_image"], [382, 0, 0, "-", "annotator"], [486, 4, 1, "", "annotators"], [466, 0, 0, "-", "base"], [478, 0, 0, "-", "common"], [486, 4, 1, "", "embeddings"], [485, 0, 0, "-", "functions"], [490, 0, 0, "-", "internal"], [494, 0, 0, "-", "logging"], [495, 0, 0, "-", "partition"], [499, 0, 0, "-", "pretrained"], [486, 5, 1, "", "read"], [504, 0, 0, "-", "reader"], [486, 5, 1, "", "start"], [512, 0, 0, "-", "training"], [517, 0, 0, "-", "upload_to_hub"], [518, 0, 0, "-", "util"], [486, 5, 1, "", "version"]], "sparknlp.annotation": [[261, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[261, 2, 1, "", "annotatorType"], [261, 3, 1, "", "arrayType"], [261, 2, 1, "", "begin"], [261, 3, 1, "", "copy"], [261, 3, 1, "", "dataType"], [261, 2, 1, "", "embeddings"], [261, 2, 1, "", "end"], [261, 3, 1, "", "fromRow"], [261, 2, 1, "", "metadata"], [261, 2, 1, "", "result"], [261, 3, 1, "", "toRow"]], "sparknlp.annotation_audio": [[262, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[262, 2, 1, "", "annotatorType"], [262, 3, 1, "", "copy"], [262, 2, 1, "", "metadata"], [262, 2, 1, "", "result"]], "sparknlp.annotation_image": [[263, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[263, 2, 1, "", "annotatorType"], [263, 3, 1, "", "copy"], [263, 2, 1, "", "height"], [263, 2, 1, "", "metadata"], [263, 2, 1, "", "mode"], [263, 2, 1, "", "nChannels"], [263, 2, 1, "", "origin"], [263, 2, 1, "", "result"], [263, 2, 1, "", "width"]], "sparknlp.annotator": [[382, 4, 1, "", "annotators"], [382, 4, 1, "", "audio"], [265, 0, 0, "-", "audio"], [268, 0, 0, "-", "chunk2_doc"], [269, 0, 0, "-", "chunker"], [382, 4, 1, "", "classifier"], [295, 0, 0, "-", "classifier_dl"], [319, 0, 0, "-", "cleaners"], [382, 4, 1, "", "coref"], [320, 0, 0, "-", "coref"], [382, 4, 1, "", "cv"], [327, 0, 0, "-", "cv"], [339, 0, 0, "-", "dataframe_optimizer"], [340, 0, 0, "-", "date2_chunk"], [342, 0, 0, "-", "dependency"], [344, 0, 0, "-", "document_character_text_splitter"], [345, 0, 0, "-", "document_normalizer"], [346, 0, 0, "-", "document_token_splitter"], [347, 0, 0, "-", "document_token_splitter_test"], [382, 4, 1, "", "embeddings"], [361, 0, 0, "-", "embeddings"], [382, 4, 1, "", "er"], [380, 0, 0, "-", "er"], [381, 0, 0, "-", "graph_extraction"], [382, 4, 1, "", "keyword"], [383, 0, 0, "-", "keyword_extraction"], [382, 4, 1, "", "ld"], [385, 0, 0, "-", "ld_dl"], [387, 0, 0, "-", "lemmatizer"], [390, 0, 0, "-", "matcher"], [394, 0, 0, "-", "n_gram_generator"], [395, 0, 0, "-", "ner"], [403, 0, 0, "-", "normalizer"], [404, 0, 0, "-", "openai"], [409, 0, 0, "-", "param"], [382, 4, 1, "", "parser"], [410, 0, 0, "-", "pos"], [382, 4, 1, "", "regex"], [382, 4, 1, "", "sbd"], [382, 4, 1, "", "sda"], [412, 0, 0, "-", "sentence"], [382, 4, 1, "", "sentence_detector_dl"], [415, 0, 0, "-", "sentiment"], [425, 0, 0, "-", "seq2seq"], [440, 0, 0, "-", "similarity"], [382, 4, 1, "", "spell"], [442, 0, 0, "-", "spell_check"], [445, 0, 0, "-", "stemmer"], [446, 0, 0, "-", "stop_words_cleaner"], [447, 0, 0, "-", "tf_ner_dl_graph_builder"], [449, 0, 0, "-", "token"], [453, 0, 0, "-", "token2_chunk"], [454, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[264, 0, 0, "-", "hubert_for_ctc"], [266, 0, 0, "-", "wav2vec2_for_ctc"], [267, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[264, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[264, 2, 1, "", "configProtoBytes"], [264, 2, 1, "", "inputAnnotatorTypes"], [264, 3, 1, "", "loadSavedModel"], [264, 2, 1, "", "name"], [264, 2, 1, "", "outputAnnotatorType"], [264, 3, 1, "", "pretrained"], [264, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[266, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[266, 2, 1, "", "configProtoBytes"], [266, 2, 1, "", "inputAnnotatorTypes"], [266, 3, 1, "", "loadSavedModel"], [266, 2, 1, "", "name"], [266, 2, 1, "", "outputAnnotatorType"], [266, 3, 1, "", "pretrained"], [266, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[267, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[267, 2, 1, "", "configProtoBytes"], [267, 3, 1, "", "getIsMultilingual"], [267, 3, 1, "", "getLanguage"], [267, 2, 1, "", "inputAnnotatorTypes"], [267, 2, 1, "", "isMultilingual"], [267, 2, 1, "", "language"], [267, 3, 1, "", "loadSavedModel"], [267, 2, 1, "", "name"], [267, 2, 1, "", "outputAnnotatorType"], [267, 3, 1, "", "pretrained"], [267, 3, 1, "", "setConfigProtoBytes"], [267, 3, 1, "", "setLanguage"], [267, 3, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[268, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunk2_doc.Chunk2Doc": [[268, 2, 1, "", "inputAnnotatorTypes"], [268, 2, 1, "", "name"], [268, 2, 1, "", "outputAnnotatorType"], [268, 3, 1, "", "setParams"]], "sparknlp.annotator.chunker": [[269, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[269, 2, 1, "", "inputAnnotatorTypes"], [269, 2, 1, "", "name"], [269, 2, 1, "", "outputAnnotatorType"], [269, 2, 1, "", "regexParsers"], [269, 3, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[270, 0, 0, "-", "albert_for_multiple_choice"], [271, 0, 0, "-", "albert_for_question_answering"], [272, 0, 0, "-", "albert_for_sequence_classification"], [273, 0, 0, "-", "albert_for_token_classification"], [274, 0, 0, "-", "albert_for_zero_shot_classification"], [275, 0, 0, "-", "bart_for_zero_shot_classification"], [276, 0, 0, "-", "bert_for_multiple_choice"], [277, 0, 0, "-", "bert_for_question_answering"], [278, 0, 0, "-", "bert_for_sequence_classification"], [279, 0, 0, "-", "bert_for_token_classification"], [280, 0, 0, "-", "bert_for_zero_shot_classification"], [281, 0, 0, "-", "camembert_for_question_answering"], [282, 0, 0, "-", "camembert_for_sequence_classification"], [283, 0, 0, "-", "camembert_for_token_classification"], [284, 0, 0, "-", "camembert_for_zero_shot_classification"], [285, 0, 0, "-", "classifier_dl"], [286, 0, 0, "-", "deberta_for_question_answering"], [287, 0, 0, "-", "deberta_for_sequence_classification"], [288, 0, 0, "-", "deberta_for_token_classification"], [289, 0, 0, "-", "deberta_for_zero_shot_classification"], [290, 0, 0, "-", "distil_bert_for_question_answering"], [291, 0, 0, "-", "distil_bert_for_sequence_classification"], [292, 0, 0, "-", "distil_bert_for_token_classification"], [293, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [294, 0, 0, "-", "distilbert_for_multiple_choice"], [296, 0, 0, "-", "longformer_for_question_answering"], [297, 0, 0, "-", "longformer_for_sequence_classification"], [298, 0, 0, "-", "longformer_for_token_classification"], [299, 0, 0, "-", "mpnet_for_question_answering"], [300, 0, 0, "-", "mpnet_for_sequence_classification"], [301, 0, 0, "-", "mpnet_for_token_classification"], [302, 0, 0, "-", "multi_classifier_dl"], [303, 0, 0, "-", "roberta_for_multiple_choice"], [304, 0, 0, "-", "roberta_for_question_answering"], [305, 0, 0, "-", "roberta_for_sequence_classification"], [306, 0, 0, "-", "roberta_for_token_classification"], [307, 0, 0, "-", "roberta_for_zero_shot_classification"], [308, 0, 0, "-", "sentiment_dl"], [309, 0, 0, "-", "tapas_for_question_answering"], [310, 0, 0, "-", "xlm_roberta_for_multiple_choice"], [311, 0, 0, "-", "xlm_roberta_for_question_answering"], [312, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [313, 0, 0, "-", "xlm_roberta_for_token_classification"], [314, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [315, 0, 0, "-", "xlnet_for_sequence_classification"], [316, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[270, 1, 1, "", "AlbertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice": [[270, 2, 1, "", "choicesDelimiter"], [270, 2, 1, "", "inputAnnotatorTypes"], [270, 3, 1, "", "loadSavedModel"], [270, 2, 1, "", "name"], [270, 2, 1, "", "outputAnnotatorType"], [270, 3, 1, "", "pretrained"], [270, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[271, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[271, 2, 1, "", "coalesceSentences"], [271, 2, 1, "", "configProtoBytes"], [271, 2, 1, "", "inputAnnotatorTypes"], [271, 3, 1, "", "loadSavedModel"], [271, 2, 1, "", "name"], [271, 2, 1, "", "outputAnnotatorType"], [271, 3, 1, "", "pretrained"], [271, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[272, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[272, 2, 1, "", "coalesceSentences"], [272, 2, 1, "", "configProtoBytes"], [272, 3, 1, "", "getClasses"], [272, 2, 1, "", "inputAnnotatorTypes"], [272, 3, 1, "", "loadSavedModel"], [272, 2, 1, "", "name"], [272, 2, 1, "", "outputAnnotatorType"], [272, 3, 1, "", "pretrained"], [272, 3, 1, "", "setCoalesceSentences"], [272, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[273, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[273, 2, 1, "", "configProtoBytes"], [273, 3, 1, "", "getClasses"], [273, 2, 1, "", "inputAnnotatorTypes"], [273, 3, 1, "", "loadSavedModel"], [273, 2, 1, "", "name"], [273, 2, 1, "", "outputAnnotatorType"], [273, 3, 1, "", "pretrained"], [273, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[274, 1, 1, "", "AlbertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification": [[274, 2, 1, "", "coalesceSentences"], [274, 2, 1, "", "configProtoBytes"], [274, 3, 1, "", "getClasses"], [274, 2, 1, "", "inputAnnotatorTypes"], [274, 3, 1, "", "loadSavedModel"], [274, 2, 1, "", "name"], [274, 2, 1, "", "outputAnnotatorType"], [274, 3, 1, "", "pretrained"], [274, 3, 1, "", "setCoalesceSentences"], [274, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[275, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[275, 2, 1, "", "coalesceSentences"], [275, 2, 1, "", "configProtoBytes"], [275, 3, 1, "", "getClasses"], [275, 2, 1, "", "inputAnnotatorTypes"], [275, 3, 1, "", "loadSavedModel"], [275, 2, 1, "", "maxSentenceLength"], [275, 2, 1, "", "name"], [275, 2, 1, "", "outputAnnotatorType"], [275, 3, 1, "", "pretrained"], [275, 3, 1, "", "setCoalesceSentences"], [275, 3, 1, "", "setConfigProtoBytes"], [275, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[276, 1, 1, "", "BertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice": [[276, 2, 1, "", "choicesDelimiter"], [276, 2, 1, "", "inputAnnotatorTypes"], [276, 3, 1, "", "loadSavedModel"], [276, 2, 1, "", "name"], [276, 2, 1, "", "outputAnnotatorType"], [276, 3, 1, "", "pretrained"], [276, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[277, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[277, 2, 1, "", "coalesceSentences"], [277, 2, 1, "", "configProtoBytes"], [277, 2, 1, "", "inputAnnotatorTypes"], [277, 3, 1, "", "loadSavedModel"], [277, 2, 1, "", "name"], [277, 2, 1, "", "outputAnnotatorType"], [277, 3, 1, "", "pretrained"], [277, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[278, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[278, 2, 1, "", "coalesceSentences"], [278, 2, 1, "", "configProtoBytes"], [278, 3, 1, "", "getClasses"], [278, 2, 1, "", "inputAnnotatorTypes"], [278, 3, 1, "", "loadSavedModel"], [278, 2, 1, "", "name"], [278, 2, 1, "", "outputAnnotatorType"], [278, 3, 1, "", "pretrained"], [278, 3, 1, "", "setCoalesceSentences"], [278, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[279, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[279, 2, 1, "", "configProtoBytes"], [279, 3, 1, "", "getClasses"], [279, 2, 1, "", "inputAnnotatorTypes"], [279, 3, 1, "", "loadSavedModel"], [279, 2, 1, "", "name"], [279, 2, 1, "", "outputAnnotatorType"], [279, 3, 1, "", "pretrained"], [279, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[280, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[280, 2, 1, "", "coalesceSentences"], [280, 2, 1, "", "configProtoBytes"], [280, 3, 1, "", "getClasses"], [280, 2, 1, "", "inputAnnotatorTypes"], [280, 3, 1, "", "loadSavedModel"], [280, 2, 1, "", "name"], [280, 2, 1, "", "outputAnnotatorType"], [280, 3, 1, "", "pretrained"], [280, 3, 1, "", "setCoalesceSentences"], [280, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[281, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[281, 2, 1, "", "coalesceSentences"], [281, 2, 1, "", "configProtoBytes"], [281, 2, 1, "", "inputAnnotatorTypes"], [281, 3, 1, "", "loadSavedModel"], [281, 2, 1, "", "name"], [281, 2, 1, "", "outputAnnotatorType"], [281, 3, 1, "", "pretrained"], [281, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[282, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[282, 2, 1, "", "coalesceSentences"], [282, 2, 1, "", "configProtoBytes"], [282, 3, 1, "", "getClasses"], [282, 2, 1, "", "inputAnnotatorTypes"], [282, 3, 1, "", "loadSavedModel"], [282, 2, 1, "", "name"], [282, 2, 1, "", "outputAnnotatorType"], [282, 3, 1, "", "pretrained"], [282, 3, 1, "", "setCoalesceSentences"], [282, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[283, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[283, 2, 1, "", "configProtoBytes"], [283, 3, 1, "", "getClasses"], [283, 2, 1, "", "inputAnnotatorTypes"], [283, 3, 1, "", "loadSavedModel"], [283, 2, 1, "", "name"], [283, 2, 1, "", "outputAnnotatorType"], [283, 3, 1, "", "pretrained"], [283, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[284, 1, 1, "", "CamemBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification": [[284, 2, 1, "", "coalesceSentences"], [284, 2, 1, "", "configProtoBytes"], [284, 3, 1, "", "getClasses"], [284, 2, 1, "", "inputAnnotatorTypes"], [284, 3, 1, "", "loadSavedModel"], [284, 2, 1, "", "name"], [284, 2, 1, "", "outputAnnotatorType"], [284, 3, 1, "", "pretrained"], [284, 3, 1, "", "setCoalesceSentences"], [284, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[285, 1, 1, "", "ClassifierDLApproach"], [285, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[285, 2, 1, "", "dropout"], [285, 2, 1, "", "inputAnnotatorTypes"], [285, 2, 1, "", "outputAnnotatorType"], [285, 3, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[285, 2, 1, "", "classes"], [285, 2, 1, "", "configProtoBytes"], [285, 2, 1, "", "inputAnnotatorTypes"], [285, 2, 1, "", "name"], [285, 2, 1, "", "outputAnnotatorType"], [285, 3, 1, "", "pretrained"], [285, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[286, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[286, 2, 1, "", "coalesceSentences"], [286, 2, 1, "", "configProtoBytes"], [286, 2, 1, "", "inputAnnotatorTypes"], [286, 3, 1, "", "loadSavedModel"], [286, 2, 1, "", "name"], [286, 2, 1, "", "outputAnnotatorType"], [286, 3, 1, "", "pretrained"], [286, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[287, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[287, 2, 1, "", "coalesceSentences"], [287, 2, 1, "", "configProtoBytes"], [287, 3, 1, "", "getClasses"], [287, 2, 1, "", "inputAnnotatorTypes"], [287, 3, 1, "", "loadSavedModel"], [287, 2, 1, "", "name"], [287, 2, 1, "", "outputAnnotatorType"], [287, 3, 1, "", "pretrained"], [287, 3, 1, "", "setCoalesceSentences"], [287, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[288, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[288, 2, 1, "", "configProtoBytes"], [288, 3, 1, "", "getClasses"], [288, 2, 1, "", "inputAnnotatorTypes"], [288, 3, 1, "", "loadSavedModel"], [288, 2, 1, "", "name"], [288, 2, 1, "", "outputAnnotatorType"], [288, 3, 1, "", "pretrained"], [288, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[289, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[289, 2, 1, "", "coalesceSentences"], [289, 2, 1, "", "configProtoBytes"], [289, 3, 1, "", "getClasses"], [289, 2, 1, "", "inputAnnotatorTypes"], [289, 3, 1, "", "loadSavedModel"], [289, 2, 1, "", "name"], [289, 2, 1, "", "outputAnnotatorType"], [289, 3, 1, "", "pretrained"], [289, 3, 1, "", "setCoalesceSentences"], [289, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[290, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[290, 2, 1, "", "coalesceSentences"], [290, 2, 1, "", "configProtoBytes"], [290, 2, 1, "", "inputAnnotatorTypes"], [290, 3, 1, "", "loadSavedModel"], [290, 2, 1, "", "name"], [290, 2, 1, "", "outputAnnotatorType"], [290, 3, 1, "", "pretrained"], [290, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[291, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[291, 2, 1, "", "coalesceSentences"], [291, 2, 1, "", "configProtoBytes"], [291, 3, 1, "", "getClasses"], [291, 2, 1, "", "inputAnnotatorTypes"], [291, 3, 1, "", "loadSavedModel"], [291, 2, 1, "", "name"], [291, 2, 1, "", "outputAnnotatorType"], [291, 3, 1, "", "pretrained"], [291, 3, 1, "", "setCoalesceSentences"], [291, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[292, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[292, 2, 1, "", "configProtoBytes"], [292, 3, 1, "", "getClasses"], [292, 2, 1, "", "inputAnnotatorTypes"], [292, 3, 1, "", "loadSavedModel"], [292, 2, 1, "", "name"], [292, 2, 1, "", "outputAnnotatorType"], [292, 3, 1, "", "pretrained"], [292, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[293, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[293, 2, 1, "", "coalesceSentences"], [293, 2, 1, "", "configProtoBytes"], [293, 3, 1, "", "getClasses"], [293, 2, 1, "", "inputAnnotatorTypes"], [293, 3, 1, "", "loadSavedModel"], [293, 2, 1, "", "name"], [293, 2, 1, "", "outputAnnotatorType"], [293, 3, 1, "", "pretrained"], [293, 3, 1, "", "setCoalesceSentences"], [293, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[294, 1, 1, "", "DistilBertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice": [[294, 2, 1, "", "choicesDelimiter"], [294, 2, 1, "", "inputAnnotatorTypes"], [294, 3, 1, "", "loadSavedModel"], [294, 2, 1, "", "name"], [294, 2, 1, "", "outputAnnotatorType"], [294, 3, 1, "", "pretrained"], [294, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[296, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[296, 2, 1, "", "coalesceSentences"], [296, 2, 1, "", "configProtoBytes"], [296, 2, 1, "", "inputAnnotatorTypes"], [296, 3, 1, "", "loadSavedModel"], [296, 2, 1, "", "name"], [296, 2, 1, "", "outputAnnotatorType"], [296, 3, 1, "", "pretrained"], [296, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[297, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[297, 2, 1, "", "coalesceSentences"], [297, 2, 1, "", "configProtoBytes"], [297, 3, 1, "", "getClasses"], [297, 2, 1, "", "inputAnnotatorTypes"], [297, 3, 1, "", "loadSavedModel"], [297, 2, 1, "", "name"], [297, 2, 1, "", "outputAnnotatorType"], [297, 3, 1, "", "pretrained"], [297, 3, 1, "", "setCoalesceSentences"], [297, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[298, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[298, 2, 1, "", "configProtoBytes"], [298, 3, 1, "", "getClasses"], [298, 2, 1, "", "inputAnnotatorTypes"], [298, 3, 1, "", "loadSavedModel"], [298, 2, 1, "", "name"], [298, 2, 1, "", "outputAnnotatorType"], [298, 3, 1, "", "pretrained"], [298, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[299, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[299, 2, 1, "", "inputAnnotatorTypes"], [299, 3, 1, "", "loadSavedModel"], [299, 2, 1, "", "name"], [299, 2, 1, "", "outputAnnotatorType"], [299, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[300, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[300, 2, 1, "", "coalesceSentences"], [300, 3, 1, "", "getClasses"], [300, 2, 1, "", "inputAnnotatorTypes"], [300, 3, 1, "", "loadSavedModel"], [300, 2, 1, "", "name"], [300, 2, 1, "", "outputAnnotatorType"], [300, 3, 1, "", "pretrained"], [300, 3, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[301, 1, 1, "", "MPNetForTokenClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification": [[301, 2, 1, "", "configProtoBytes"], [301, 3, 1, "", "getClasses"], [301, 2, 1, "", "inputAnnotatorTypes"], [301, 3, 1, "", "loadSavedModel"], [301, 2, 1, "", "name"], [301, 2, 1, "", "outputAnnotatorType"], [301, 3, 1, "", "pretrained"], [301, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[302, 1, 1, "", "MultiClassifierDLApproach"], [302, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[302, 2, 1, "", "inputAnnotatorTypes"], [302, 2, 1, "", "outputAnnotatorType"], [302, 3, 1, "", "setShufflePerEpoch"], [302, 3, 1, "", "setThreshold"], [302, 3, 1, "", "setVerbose"], [302, 2, 1, "", "shufflePerEpoch"], [302, 2, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[302, 2, 1, "", "classes"], [302, 2, 1, "", "configProtoBytes"], [302, 2, 1, "", "inputAnnotatorTypes"], [302, 2, 1, "", "name"], [302, 2, 1, "", "outputAnnotatorType"], [302, 3, 1, "", "pretrained"], [302, 3, 1, "", "setConfigProtoBytes"], [302, 3, 1, "", "setThreshold"], [302, 2, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[303, 1, 1, "", "RoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice": [[303, 2, 1, "", "choicesDelimiter"], [303, 2, 1, "", "inputAnnotatorTypes"], [303, 3, 1, "", "loadSavedModel"], [303, 2, 1, "", "name"], [303, 2, 1, "", "outputAnnotatorType"], [303, 3, 1, "", "pretrained"], [303, 3, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[304, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[304, 2, 1, "", "coalesceSentences"], [304, 2, 1, "", "configProtoBytes"], [304, 2, 1, "", "inputAnnotatorTypes"], [304, 3, 1, "", "loadSavedModel"], [304, 2, 1, "", "name"], [304, 2, 1, "", "outputAnnotatorType"], [304, 3, 1, "", "pretrained"], [304, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[305, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[305, 2, 1, "", "coalesceSentences"], [305, 2, 1, "", "configProtoBytes"], [305, 3, 1, "", "getClasses"], [305, 2, 1, "", "inputAnnotatorTypes"], [305, 3, 1, "", "loadSavedModel"], [305, 2, 1, "", "name"], [305, 2, 1, "", "outputAnnotatorType"], [305, 3, 1, "", "pretrained"], [305, 3, 1, "", "setCoalesceSentences"], [305, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[306, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[306, 2, 1, "", "configProtoBytes"], [306, 3, 1, "", "getClasses"], [306, 2, 1, "", "inputAnnotatorTypes"], [306, 3, 1, "", "loadSavedModel"], [306, 2, 1, "", "maxSentenceLength"], [306, 2, 1, "", "name"], [306, 2, 1, "", "outputAnnotatorType"], [306, 3, 1, "", "pretrained"], [306, 3, 1, "", "setConfigProtoBytes"], [306, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[307, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[307, 2, 1, "", "coalesceSentences"], [307, 2, 1, "", "configProtoBytes"], [307, 3, 1, "", "getClasses"], [307, 2, 1, "", "inputAnnotatorTypes"], [307, 3, 1, "", "loadSavedModel"], [307, 2, 1, "", "maxSentenceLength"], [307, 2, 1, "", "name"], [307, 2, 1, "", "outputAnnotatorType"], [307, 3, 1, "", "pretrained"], [307, 3, 1, "", "setCoalesceSentences"], [307, 3, 1, "", "setConfigProtoBytes"], [307, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[308, 1, 1, "", "SentimentDLApproach"], [308, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[308, 2, 1, "", "dropout"], [308, 2, 1, "", "inputAnnotatorTypes"], [308, 2, 1, "", "outputAnnotatorType"], [308, 3, 1, "", "setDropout"], [308, 3, 1, "", "setThreshold"], [308, 3, 1, "", "setThresholdLabel"], [308, 2, 1, "", "threshold"], [308, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[308, 2, 1, "", "classes"], [308, 2, 1, "", "configProtoBytes"], [308, 2, 1, "", "inputAnnotatorTypes"], [308, 2, 1, "", "name"], [308, 2, 1, "", "outputAnnotatorType"], [308, 3, 1, "", "pretrained"], [308, 3, 1, "", "setConfigProtoBytes"], [308, 3, 1, "", "setThreshold"], [308, 3, 1, "", "setThresholdLabel"], [308, 2, 1, "", "threshold"], [308, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[309, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[309, 2, 1, "", "inputAnnotatorTypes"], [309, 3, 1, "", "loadSavedModel"], [309, 2, 1, "", "name"], [309, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[310, 1, 1, "", "XlmRoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice": [[310, 2, 1, "", "inputAnnotatorTypes"], [310, 3, 1, "", "loadSavedModel"], [310, 2, 1, "", "name"], [310, 2, 1, "", "outputAnnotatorType"], [310, 3, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[311, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[311, 2, 1, "", "coalesceSentences"], [311, 2, 1, "", "configProtoBytes"], [311, 2, 1, "", "inputAnnotatorTypes"], [311, 3, 1, "", "loadSavedModel"], [311, 2, 1, "", "name"], [311, 2, 1, "", "outputAnnotatorType"], [311, 3, 1, "", "pretrained"], [311, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[312, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[312, 2, 1, "", "coalesceSentences"], [312, 2, 1, "", "configProtoBytes"], [312, 3, 1, "", "getClasses"], [312, 2, 1, "", "inputAnnotatorTypes"], [312, 3, 1, "", "loadSavedModel"], [312, 2, 1, "", "name"], [312, 2, 1, "", "outputAnnotatorType"], [312, 3, 1, "", "pretrained"], [312, 3, 1, "", "setCoalesceSentences"], [312, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[313, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[313, 2, 1, "", "configProtoBytes"], [313, 3, 1, "", "getClasses"], [313, 2, 1, "", "inputAnnotatorTypes"], [313, 3, 1, "", "loadSavedModel"], [313, 2, 1, "", "name"], [313, 2, 1, "", "outputAnnotatorType"], [313, 3, 1, "", "pretrained"], [313, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[314, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[314, 2, 1, "", "coalesceSentences"], [314, 2, 1, "", "configProtoBytes"], [314, 3, 1, "", "getClasses"], [314, 2, 1, "", "inputAnnotatorTypes"], [314, 3, 1, "", "loadSavedModel"], [314, 2, 1, "", "maxSentenceLength"], [314, 2, 1, "", "name"], [314, 2, 1, "", "outputAnnotatorType"], [314, 3, 1, "", "pretrained"], [314, 3, 1, "", "setCoalesceSentences"], [314, 3, 1, "", "setConfigProtoBytes"], [314, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[315, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[315, 2, 1, "", "coalesceSentences"], [315, 2, 1, "", "configProtoBytes"], [315, 3, 1, "", "getClasses"], [315, 2, 1, "", "inputAnnotatorTypes"], [315, 3, 1, "", "loadSavedModel"], [315, 2, 1, "", "name"], [315, 2, 1, "", "outputAnnotatorType"], [315, 3, 1, "", "pretrained"], [315, 3, 1, "", "setCoalesceSentences"], [315, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[316, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[316, 2, 1, "", "configProtoBytes"], [316, 3, 1, "", "getClasses"], [316, 2, 1, "", "inputAnnotatorTypes"], [316, 3, 1, "", "loadSavedModel"], [316, 2, 1, "", "name"], [316, 2, 1, "", "outputAnnotatorType"], [316, 3, 1, "", "pretrained"], [316, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cleaners": [[317, 0, 0, "-", "cleaner"], [318, 0, 0, "-", "extractor"]], "sparknlp.annotator.cleaners.cleaner": [[317, 1, 1, "", "Cleaner"]], "sparknlp.annotator.cleaners.cleaner.Cleaner": [[317, 2, 1, "", "bullets"], [317, 2, 1, "", "cleanPostfixPattern"], [317, 2, 1, "", "cleanPrefixPattern"], [317, 2, 1, "", "cleanerMode"], [317, 2, 1, "", "dashes"], [317, 2, 1, "", "encoding"], [317, 2, 1, "", "extraWhitespace"], [317, 2, 1, "", "ignoreCase"], [317, 2, 1, "", "inputAnnotatorTypes"], [317, 2, 1, "", "lowercase"], [317, 2, 1, "", "name"], [317, 2, 1, "", "outputAnnotatorType"], [317, 3, 1, "", "setBullets"], [317, 3, 1, "", "setCleanPostfixPattern"], [317, 3, 1, "", "setCleanPrefixPattern"], [317, 3, 1, "", "setCleanerMode"], [317, 3, 1, "", "setDashes"], [317, 3, 1, "", "setEncoding"], [317, 3, 1, "", "setExtraWhitespace"], [317, 3, 1, "", "setIgnoreCase"], [317, 3, 1, "", "setLowercase"], [317, 3, 1, "", "setStrip"], [317, 3, 1, "", "setTrailingPunctuation"], [317, 2, 1, "", "strip"], [317, 2, 1, "", "trailingPunctuation"]], "sparknlp.annotator.cleaners.extractor": [[318, 1, 1, "", "Extractor"]], "sparknlp.annotator.cleaners.extractor.Extractor": [[318, 2, 1, "", "emailAddress"], [318, 2, 1, "", "emailDateTimeTzPattern"], [318, 2, 1, "", "extractorMode"], [318, 2, 1, "", "imageUrlPattern"], [318, 2, 1, "", "index"], [318, 2, 1, "", "inputAnnotatorTypes"], [318, 2, 1, "", "ipAddressNamePattern"], [318, 2, 1, "", "ipAddressPattern"], [318, 2, 1, "", "mapiIdPattern"], [318, 2, 1, "", "name"], [318, 2, 1, "", "outputAnnotatorType"], [318, 3, 1, "", "setEmailAddress"], [318, 3, 1, "", "setEmailDateTimeTzPattern"], [318, 3, 1, "", "setExtractorMode"], [318, 3, 1, "", "setImageUrlPattern"], [318, 3, 1, "", "setIndex"], [318, 3, 1, "", "setIpAddressNamePattern"], [318, 3, 1, "", "setIpAddressPattern"], [318, 3, 1, "", "setMapiIdPattern"], [318, 3, 1, "", "setTextPattern"], [318, 3, 1, "", "setUsPhoneNumbersPattern"], [318, 2, 1, "", "textPattern"], [318, 2, 1, "", "usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[321, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[321, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[321, 2, 1, "", "configProtoBytes"], [321, 2, 1, "", "inputAnnotatorTypes"], [321, 3, 1, "", "loadSavedModel"], [321, 2, 1, "", "maxSegmentLength"], [321, 2, 1, "", "name"], [321, 2, 1, "", "outputAnnotatorType"], [321, 3, 1, "", "pretrained"], [321, 3, 1, "", "setConfigProtoBytes"], [321, 3, 1, "", "setMaxSegmentLength"], [321, 3, 1, "", "setTextGenre"], [321, 2, 1, "", "textGenre"]], "sparknlp.annotator.cv": [[322, 0, 0, "-", "blip_for_question_answering"], [323, 0, 0, "-", "clip_for_zero_shot_classification"], [324, 0, 0, "-", "convnext_for_image_classification"], [325, 0, 0, "-", "florence2_transformer"], [326, 0, 0, "-", "gemma3_for_multimodal"], [328, 0, 0, "-", "internvl_for_multimodal"], [329, 0, 0, "-", "janus_for_multimodal"], [330, 0, 0, "-", "llava_for_multimodal"], [331, 0, 0, "-", "mllama_for_multimodal"], [332, 0, 0, "-", "paligemma_for_multimodal"], [333, 0, 0, "-", "phi3_vision_for_multimodal"], [334, 0, 0, "-", "qwen2vl_transformer"], [335, 0, 0, "-", "smolvlm_transformer"], [336, 0, 0, "-", "swin_for_image_classification"], [337, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [338, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.blip_for_question_answering": [[322, 1, 1, "", "BLIPForQuestionAnswering"]], "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering": [[322, 2, 1, "", "configProtoBytes"], [322, 2, 1, "", "inputAnnotatorTypes"], [322, 3, 1, "", "loadSavedModel"], [322, 2, 1, "", "maxSentenceLength"], [322, 2, 1, "", "name"], [322, 2, 1, "", "outputAnnotatorType"], [322, 3, 1, "", "pretrained"], [322, 3, 1, "", "setMaxSentenceSize"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[323, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[323, 2, 1, "", "configProtoBytes"], [323, 3, 1, "", "getCandidateLabels"], [323, 2, 1, "", "inputAnnotatorTypes"], [323, 3, 1, "", "loadSavedModel"], [323, 2, 1, "", "name"], [323, 2, 1, "", "outputAnnotatorType"], [323, 3, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[324, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[324, 2, 1, "", "configProtoBytes"], [324, 2, 1, "", "cropPct"], [324, 2, 1, "", "doRescale"], [324, 3, 1, "", "getClasses"], [324, 2, 1, "", "inputAnnotatorTypes"], [324, 3, 1, "", "loadSavedModel"], [324, 2, 1, "", "name"], [324, 2, 1, "", "outputAnnotatorType"], [324, 3, 1, "", "pretrained"], [324, 2, 1, "", "rescaleFactor"], [324, 3, 1, "", "setConfigProtoBytes"], [324, 3, 1, "", "setCropPct"], [324, 3, 1, "", "setDoRescale"], [324, 3, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.florence2_transformer": [[325, 1, 1, "", "Florence2Transformer"]], "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer": [[325, 2, 1, "", "batchSize"], [325, 2, 1, "", "beamSize"], [325, 2, 1, "", "doSample"], [325, 2, 1, "", "ignoreTokenIds"], [325, 2, 1, "", "inputAnnotatorTypes"], [325, 3, 1, "", "loadSavedModel"], [325, 2, 1, "", "maxOutputLength"], [325, 2, 1, "", "minOutputLength"], [325, 2, 1, "", "name"], [325, 2, 1, "", "noRepeatNgramSize"], [325, 2, 1, "", "outputAnnotatorType"], [325, 3, 1, "", "pretrained"], [325, 2, 1, "", "repetitionPenalty"], [325, 3, 1, "", "setBatchSize"], [325, 3, 1, "", "setBeamSize"], [325, 3, 1, "", "setDoSample"], [325, 3, 1, "", "setIgnoreTokenIds"], [325, 3, 1, "", "setMaxOutputLength"], [325, 3, 1, "", "setMinOutputLength"], [325, 3, 1, "", "setNoRepeatNgramSize"], [325, 3, 1, "", "setRepetitionPenalty"], [325, 3, 1, "", "setTemperature"], [325, 3, 1, "", "setTopK"], [325, 3, 1, "", "setTopP"], [325, 2, 1, "", "temperature"], [325, 2, 1, "", "topK"], [325, 2, 1, "", "topP"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[326, 1, 1, "", "Gemma3ForMultiModal"]], "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal": [[326, 2, 1, "", "beamSize"], [326, 2, 1, "", "configProtoBytes"], [326, 2, 1, "", "doSample"], [326, 2, 1, "", "ignoreTokenIds"], [326, 2, 1, "", "inputAnnotatorTypes"], [326, 3, 1, "", "loadSavedModel"], [326, 2, 1, "", "maxInputLength"], [326, 2, 1, "", "maxOutputLength"], [326, 2, 1, "", "minOutputLength"], [326, 2, 1, "", "name"], [326, 2, 1, "", "noRepeatNgramSize"], [326, 2, 1, "", "outputAnnotatorType"], [326, 3, 1, "", "pretrained"], [326, 2, 1, "", "repetitionPenalty"], [326, 3, 1, "", "setBeamSize"], [326, 3, 1, "", "setConfigProtoBytes"], [326, 3, 1, "", "setDoSample"], [326, 3, 1, "", "setIgnoreTokenIds"], [326, 3, 1, "", "setMaxOutputLength"], [326, 3, 1, "", "setMaxSentenceSize"], [326, 3, 1, "", "setMinOutputLength"], [326, 3, 1, "", "setNoRepeatNgramSize"], [326, 3, 1, "", "setRepetitionPenalty"], [326, 3, 1, "", "setTemperature"], [326, 3, 1, "", "setTopK"], [326, 3, 1, "", "setTopP"], [326, 2, 1, "", "temperature"], [326, 2, 1, "", "topK"], [326, 2, 1, "", "topP"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[328, 1, 1, "", "InternVLForMultiModal"]], "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal": [[328, 2, 1, "", "beamSize"], [328, 2, 1, "", "doSample"], [328, 2, 1, "", "ignoreTokenIds"], [328, 2, 1, "", "inputAnnotatorTypes"], [328, 3, 1, "", "loadSavedModel"], [328, 2, 1, "", "maxOutputLength"], [328, 2, 1, "", "minOutputLength"], [328, 2, 1, "", "name"], [328, 2, 1, "", "noRepeatNgramSize"], [328, 2, 1, "", "outputAnnotatorType"], [328, 3, 1, "", "pretrained"], [328, 2, 1, "", "repetitionPenalty"], [328, 3, 1, "", "setBeamSize"], [328, 3, 1, "", "setDoSample"], [328, 3, 1, "", "setIgnoreTokenIds"], [328, 3, 1, "", "setMaxOutputLength"], [328, 3, 1, "", "setMaxSentenceSize"], [328, 3, 1, "", "setMinOutputLength"], [328, 3, 1, "", "setNoRepeatNgramSize"], [328, 3, 1, "", "setRepetitionPenalty"], [328, 3, 1, "", "setTemperature"], [328, 3, 1, "", "setTopK"], [328, 3, 1, "", "setTopP"], [328, 2, 1, "", "temperature"], [328, 2, 1, "", "topK"], [328, 2, 1, "", "topP"]], "sparknlp.annotator.cv.janus_for_multimodal": [[329, 1, 1, "", "JanusForMultiModal"]], "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal": [[329, 2, 1, "", "beamSize"], [329, 2, 1, "", "configProtoBytes"], [329, 2, 1, "", "doSample"], [329, 2, 1, "", "ignoreTokenIds"], [329, 2, 1, "", "imageGenerateMode"], [329, 2, 1, "", "inputAnnotatorTypes"], [329, 3, 1, "", "loadSavedModel"], [329, 2, 1, "", "maxOutputLength"], [329, 2, 1, "", "minOutputLength"], [329, 2, 1, "", "name"], [329, 2, 1, "", "noRepeatNgramSize"], [329, 2, 1, "", "numOfParallelImages"], [329, 2, 1, "", "outputAnnotatorType"], [329, 3, 1, "", "pretrained"], [329, 2, 1, "", "repetitionPenalty"], [329, 3, 1, "", "setBeamSize"], [329, 3, 1, "", "setConfigProtoBytes"], [329, 3, 1, "", "setDoSample"], [329, 3, 1, "", "setIgnoreTokenIds"], [329, 3, 1, "", "setImageGenerateMode"], [329, 3, 1, "", "setMaxOutputLength"], [329, 3, 1, "", "setMaxSentenceSize"], [329, 3, 1, "", "setMinOutputLength"], [329, 3, 1, "", "setNoRepeatNgramSize"], [329, 3, 1, "", "setNumOfParallelImages"], [329, 3, 1, "", "setRepetitionPenalty"], [329, 3, 1, "", "setTemperature"], [329, 3, 1, "", "setTopK"], [329, 3, 1, "", "setTopP"], [329, 2, 1, "", "temperature"], [329, 2, 1, "", "topK"], [329, 2, 1, "", "topP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[330, 1, 1, "", "LLAVAForMultiModal"]], "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal": [[330, 2, 1, "", "beamSize"], [330, 2, 1, "", "configProtoBytes"], [330, 2, 1, "", "doSample"], [330, 2, 1, "", "ignoreTokenIds"], [330, 2, 1, "", "inputAnnotatorTypes"], [330, 3, 1, "", "loadSavedModel"], [330, 2, 1, "", "maxOutputLength"], [330, 2, 1, "", "minOutputLength"], [330, 2, 1, "", "name"], [330, 2, 1, "", "noRepeatNgramSize"], [330, 2, 1, "", "outputAnnotatorType"], [330, 3, 1, "", "pretrained"], [330, 2, 1, "", "repetitionPenalty"], [330, 3, 1, "", "setBeamSize"], [330, 3, 1, "", "setConfigProtoBytes"], [330, 3, 1, "", "setDoSample"], [330, 3, 1, "", "setIgnoreTokenIds"], [330, 3, 1, "", "setMaxOutputLength"], [330, 3, 1, "", "setMaxSentenceSize"], [330, 3, 1, "", "setMinOutputLength"], [330, 3, 1, "", "setNoRepeatNgramSize"], [330, 3, 1, "", "setRepetitionPenalty"], [330, 3, 1, "", "setTemperature"], [330, 3, 1, "", "setTopK"], [330, 3, 1, "", "setTopP"], [330, 2, 1, "", "temperature"], [330, 2, 1, "", "topK"], [330, 2, 1, "", "topP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[331, 1, 1, "", "MLLamaForMultimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal": [[331, 2, 1, "", "beamSize"], [331, 2, 1, "", "configProtoBytes"], [331, 2, 1, "", "doSample"], [331, 2, 1, "", "ignoreTokenIds"], [331, 2, 1, "", "inputAnnotatorTypes"], [331, 3, 1, "", "loadSavedModel"], [331, 2, 1, "", "maxOutputLength"], [331, 2, 1, "", "minOutputLength"], [331, 2, 1, "", "name"], [331, 2, 1, "", "noRepeatNgramSize"], [331, 2, 1, "", "outputAnnotatorType"], [331, 3, 1, "", "pretrained"], [331, 2, 1, "", "repetitionPenalty"], [331, 3, 1, "", "setBeamSize"], [331, 3, 1, "", "setConfigProtoBytes"], [331, 3, 1, "", "setDoSample"], [331, 3, 1, "", "setIgnoreTokenIds"], [331, 3, 1, "", "setMaxOutputLength"], [331, 3, 1, "", "setMaxSentenceSize"], [331, 3, 1, "", "setMinOutputLength"], [331, 3, 1, "", "setNoRepeatNgramSize"], [331, 3, 1, "", "setRepetitionPenalty"], [331, 3, 1, "", "setTemperature"], [331, 3, 1, "", "setTopK"], [331, 3, 1, "", "setTopP"], [331, 2, 1, "", "temperature"], [331, 2, 1, "", "topK"], [331, 2, 1, "", "topP"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[332, 1, 1, "", "PaliGemmaForMultiModal"]], "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal": [[332, 2, 1, "", "beamSize"], [332, 2, 1, "", "doSample"], [332, 2, 1, "", "ignoreTokenIds"], [332, 2, 1, "", "inputAnnotatorTypes"], [332, 3, 1, "", "loadSavedModel"], [332, 2, 1, "", "maxOutputLength"], [332, 2, 1, "", "minOutputLength"], [332, 2, 1, "", "name"], [332, 2, 1, "", "noRepeatNgramSize"], [332, 2, 1, "", "outputAnnotatorType"], [332, 3, 1, "", "pretrained"], [332, 2, 1, "", "repetitionPenalty"], [332, 3, 1, "", "setBeamSize"], [332, 3, 1, "", "setDoSample"], [332, 3, 1, "", "setIgnoreTokenIds"], [332, 3, 1, "", "setMaxOutputLength"], [332, 3, 1, "", "setMaxSentenceSize"], [332, 3, 1, "", "setMinOutputLength"], [332, 3, 1, "", "setNoRepeatNgramSize"], [332, 3, 1, "", "setRepetitionPenalty"], [332, 3, 1, "", "setTemperature"], [332, 3, 1, "", "setTopK"], [332, 3, 1, "", "setTopP"], [332, 2, 1, "", "temperature"], [332, 2, 1, "", "topK"], [332, 2, 1, "", "topP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[333, 1, 1, "", "Phi3Vision"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision": [[333, 2, 1, "", "beamSize"], [333, 2, 1, "", "configProtoBytes"], [333, 2, 1, "", "doSample"], [333, 2, 1, "", "ignoreTokenIds"], [333, 2, 1, "", "inputAnnotatorTypes"], [333, 3, 1, "", "loadSavedModel"], [333, 2, 1, "", "maxOutputLength"], [333, 2, 1, "", "minOutputLength"], [333, 2, 1, "", "name"], [333, 2, 1, "", "noRepeatNgramSize"], [333, 2, 1, "", "outputAnnotatorType"], [333, 3, 1, "", "pretrained"], [333, 2, 1, "", "repetitionPenalty"], [333, 3, 1, "", "setBeamSize"], [333, 3, 1, "", "setConfigProtoBytes"], [333, 3, 1, "", "setDoSample"], [333, 3, 1, "", "setIgnoreTokenIds"], [333, 3, 1, "", "setMaxOutputLength"], [333, 3, 1, "", "setMaxSentenceSize"], [333, 3, 1, "", "setMinOutputLength"], [333, 3, 1, "", "setNoRepeatNgramSize"], [333, 3, 1, "", "setRepetitionPenalty"], [333, 3, 1, "", "setTemperature"], [333, 3, 1, "", "setTopK"], [333, 3, 1, "", "setTopP"], [333, 2, 1, "", "temperature"], [333, 2, 1, "", "topK"], [333, 2, 1, "", "topP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[334, 1, 1, "", "Qwen2VLTransformer"]], "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer": [[334, 2, 1, "", "beamSize"], [334, 2, 1, "", "configProtoBytes"], [334, 2, 1, "", "doSample"], [334, 2, 1, "", "ignoreTokenIds"], [334, 2, 1, "", "inputAnnotatorTypes"], [334, 3, 1, "", "loadSavedModel"], [334, 2, 1, "", "maxOutputLength"], [334, 2, 1, "", "minOutputLength"], [334, 2, 1, "", "name"], [334, 2, 1, "", "noRepeatNgramSize"], [334, 2, 1, "", "outputAnnotatorType"], [334, 3, 1, "", "pretrained"], [334, 2, 1, "", "repetitionPenalty"], [334, 3, 1, "", "setBeamSize"], [334, 3, 1, "", "setConfigProtoBytes"], [334, 3, 1, "", "setDoSample"], [334, 3, 1, "", "setIgnoreTokenIds"], [334, 3, 1, "", "setMaxOutputLength"], [334, 3, 1, "", "setMaxSentenceSize"], [334, 3, 1, "", "setMinOutputLength"], [334, 3, 1, "", "setNoRepeatNgramSize"], [334, 3, 1, "", "setRepetitionPenalty"], [334, 3, 1, "", "setTemperature"], [334, 3, 1, "", "setTopK"], [334, 3, 1, "", "setTopP"], [334, 2, 1, "", "temperature"], [334, 2, 1, "", "topK"], [334, 2, 1, "", "topP"]], "sparknlp.annotator.cv.smolvlm_transformer": [[335, 1, 1, "", "SmolVLMTransformer"]], "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer": [[335, 2, 1, "", "beamSize"], [335, 2, 1, "", "doImageSplitting"], [335, 2, 1, "", "doSample"], [335, 2, 1, "", "ignoreTokenIds"], [335, 2, 1, "", "imageToken"], [335, 2, 1, "", "inputAnnotatorTypes"], [335, 3, 1, "", "loadSavedModel"], [335, 2, 1, "", "maxImageSize"], [335, 2, 1, "", "maxOutputLength"], [335, 2, 1, "", "minOutputLength"], [335, 2, 1, "", "name"], [335, 2, 1, "", "noRepeatNgramSize"], [335, 2, 1, "", "numVisionTokens"], [335, 2, 1, "", "outputAnnotatorType"], [335, 2, 1, "", "paddingConstant"], [335, 2, 1, "", "patchSize"], [335, 3, 1, "", "pretrained"], [335, 2, 1, "", "repetitionPenalty"], [335, 3, 1, "", "setBeamSize"], [335, 3, 1, "", "setConfigProtoBytes"], [335, 3, 1, "", "setDoImageSplitting"], [335, 3, 1, "", "setDoSample"], [335, 3, 1, "", "setIgnoreTokenIds"], [335, 3, 1, "", "setImageToken"], [335, 3, 1, "", "setMaxImageSize"], [335, 3, 1, "", "setMaxOutputLength"], [335, 3, 1, "", "setMaxSentenceSize"], [335, 3, 1, "", "setMinOutputLength"], [335, 3, 1, "", "setNoRepeatNgramSize"], [335, 3, 1, "", "setNumVisionTokens"], [335, 3, 1, "", "setPaddingConstant"], [335, 3, 1, "", "setPatchSize"], [335, 3, 1, "", "setRepetitionPenalty"], [335, 3, 1, "", "setStopTokenIds"], [335, 3, 1, "", "setTemperature"], [335, 3, 1, "", "setTopK"], [335, 3, 1, "", "setTopP"], [335, 2, 1, "", "stopTokenIds"], [335, 2, 1, "", "temperature"], [335, 2, 1, "", "topK"], [335, 2, 1, "", "topP"]], "sparknlp.annotator.cv.swin_for_image_classification": [[336, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[336, 2, 1, "", "configProtoBytes"], [336, 3, 1, "", "getClasses"], [336, 2, 1, "", "inputAnnotatorTypes"], [336, 3, 1, "", "loadSavedModel"], [336, 2, 1, "", "name"], [336, 2, 1, "", "outputAnnotatorType"], [336, 3, 1, "", "pretrained"], [336, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[337, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[337, 2, 1, "", "configProtoBytes"], [337, 2, 1, "", "inputAnnotatorTypes"], [337, 3, 1, "", "loadSavedModel"], [337, 2, 1, "", "name"], [337, 2, 1, "", "outputAnnotatorType"], [337, 3, 1, "", "pretrained"], [337, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[338, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[338, 2, 1, "", "configProtoBytes"], [338, 3, 1, "", "getClasses"], [338, 2, 1, "", "inputAnnotatorTypes"], [338, 3, 1, "", "loadSavedModel"], [338, 2, 1, "", "name"], [338, 2, 1, "", "outputAnnotatorType"], [338, 3, 1, "", "pretrained"], [338, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.dataframe_optimizer": [[339, 1, 1, "", "DataFrameOptimizer"], [339, 5, 1, "", "toStringDict"]], "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer": [[339, 2, 1, "", "doCache"], [339, 2, 1, "", "executorCores"], [339, 2, 1, "", "numPartitions"], [339, 2, 1, "", "numWorkers"], [339, 2, 1, "", "outputOptions"], [339, 2, 1, "", "persistFormat"], [339, 2, 1, "", "persistPath"], [339, 3, 1, "", "setDoCache"], [339, 3, 1, "", "setExecutorCores"], [339, 3, 1, "", "setNumPartitions"], [339, 3, 1, "", "setNumWorkers"], [339, 3, 1, "", "setOutputOptions"], [339, 3, 1, "", "setParams"], [339, 3, 1, "", "setPersistFormat"], [339, 3, 1, "", "setPersistPath"]], "sparknlp.annotator.date2_chunk": [[340, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[340, 2, 1, "", "entityName"], [340, 2, 1, "", "inputAnnotatorTypes"], [340, 2, 1, "", "name"], [340, 2, 1, "", "outputAnnotatorType"], [340, 3, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[341, 0, 0, "-", "dependency_parser"], [343, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[341, 1, 1, "", "DependencyParserApproach"], [341, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[341, 2, 1, "", "conllU"], [341, 2, 1, "", "dependencyTreeBank"], [341, 2, 1, "", "inputAnnotatorTypes"], [341, 2, 1, "", "numberOfIterations"], [341, 2, 1, "", "outputAnnotatorType"], [341, 3, 1, "", "setConllU"], [341, 3, 1, "", "setDependencyTreeBank"], [341, 3, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[341, 2, 1, "", "inputAnnotatorTypes"], [341, 2, 1, "", "name"], [341, 2, 1, "", "outputAnnotatorType"], [341, 2, 1, "", "perceptron"], [341, 3, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[343, 1, 1, "", "TypedDependencyParserApproach"], [343, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[343, 2, 1, "", "conll2009"], [343, 2, 1, "", "conllU"], [343, 2, 1, "", "inputAnnotatorTypes"], [343, 2, 1, "", "numberOfIterations"], [343, 2, 1, "", "outputAnnotatorType"], [343, 3, 1, "", "setConll2009"], [343, 3, 1, "", "setConllU"], [343, 3, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[343, 2, 1, "", "conllFormat"], [343, 2, 1, "", "inputAnnotatorTypes"], [343, 2, 1, "", "name"], [343, 2, 1, "", "outputAnnotatorType"], [343, 3, 1, "", "pretrained"], [343, 2, 1, "", "trainDependencyPipe"], [343, 2, 1, "", "trainOptions"], [343, 2, 1, "", "trainParameters"]], "sparknlp.annotator.document_character_text_splitter": [[344, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[344, 2, 1, "", "chunkOverlap"], [344, 2, 1, "", "chunkSize"], [344, 2, 1, "", "explodeSplits"], [344, 2, 1, "", "inputAnnotatorTypes"], [344, 2, 1, "", "keepSeparators"], [344, 2, 1, "", "outputAnnotatorType"], [344, 2, 1, "", "patternsAreRegex"], [344, 3, 1, "", "setChunkOverlap"], [344, 3, 1, "", "setChunkSize"], [344, 3, 1, "", "setExplodeSplits"], [344, 3, 1, "", "setKeepSeparators"], [344, 3, 1, "", "setPatternsAreRegex"], [344, 3, 1, "", "setSplitPatterns"], [344, 3, 1, "", "setTrimWhitespace"], [344, 2, 1, "", "splitPatterns"], [344, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.document_normalizer": [[345, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[345, 2, 1, "", "action"], [345, 2, 1, "", "encoding"], [345, 2, 1, "", "inputAnnotatorTypes"], [345, 2, 1, "", "lowercase"], [345, 2, 1, "", "outputAnnotatorType"], [345, 2, 1, "", "patterns"], [345, 2, 1, "", "policy"], [345, 2, 1, "", "replacement"], [345, 3, 1, "", "setAction"], [345, 3, 1, "", "setEncoding"], [345, 3, 1, "", "setLowercase"], [345, 3, 1, "", "setPatterns"], [345, 3, 1, "", "setPolicy"], [345, 3, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[346, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[346, 2, 1, "", "explodeSplits"], [346, 2, 1, "", "inputAnnotatorTypes"], [346, 2, 1, "", "numTokens"], [346, 2, 1, "", "outputAnnotatorType"], [346, 3, 1, "", "setExplodeSplits"], [346, 3, 1, "", "setNumTokens"], [346, 3, 1, "", "setTokenOverlap"], [346, 3, 1, "", "setTrimWhitespace"], [346, 2, 1, "", "tokenOverlap"], [346, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[347, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[347, 3, 1, "", "setUp"], [347, 3, 1, "", "test_run"]], "sparknlp.annotator.embeddings": [[348, 0, 0, "-", "albert_embeddings"], [349, 0, 0, "-", "auto_gguf_embeddings"], [350, 0, 0, "-", "bert_embeddings"], [351, 0, 0, "-", "bert_sentence_embeddings"], [352, 0, 0, "-", "bge_embeddings"], [353, 0, 0, "-", "camembert_embeddings"], [354, 0, 0, "-", "chunk_embeddings"], [355, 0, 0, "-", "deberta_embeddings"], [356, 0, 0, "-", "distil_bert_embeddings"], [357, 0, 0, "-", "doc2vec"], [358, 0, 0, "-", "e5_embeddings"], [359, 0, 0, "-", "e5v_embeddings"], [360, 0, 0, "-", "elmo_embeddings"], [362, 0, 0, "-", "instructor_embeddings"], [363, 0, 0, "-", "longformer_embeddings"], [364, 0, 0, "-", "minilm_embeddings"], [365, 0, 0, "-", "mpnet_embeddings"], [366, 0, 0, "-", "mxbai_embeddings"], [367, 0, 0, "-", "nomic_embeddings"], [368, 0, 0, "-", "roberta_embeddings"], [369, 0, 0, "-", "roberta_sentence_embeddings"], [370, 0, 0, "-", "sentence_embeddings"], [371, 0, 0, "-", "snowflake_embeddings"], [372, 0, 0, "-", "uae_embeddings"], [373, 0, 0, "-", "universal_sentence_encoder"], [374, 0, 0, "-", "word2vec"], [375, 0, 0, "-", "word_embeddings"], [376, 0, 0, "-", "xlm_roberta_embeddings"], [377, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [378, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[348, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[348, 2, 1, "", "configProtoBytes"], [348, 2, 1, "", "inputAnnotatorTypes"], [348, 3, 1, "", "loadSavedModel"], [348, 2, 1, "", "name"], [348, 2, 1, "", "outputAnnotatorType"], [348, 3, 1, "", "pretrained"], [348, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[349, 1, 1, "", "AutoGGUFEmbeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings": [[349, 2, 1, "", "defragmentationThreshold"], [349, 2, 1, "", "flashAttention"], [349, 3, 1, "", "getMetadata"], [349, 2, 1, "", "gpuSplitMode"], [349, 2, 1, "", "grpAttnN"], [349, 2, 1, "", "grpAttnW"], [349, 2, 1, "", "inputAnnotatorTypes"], [349, 3, 1, "", "loadSavedModel"], [349, 2, 1, "", "mainGpu"], [349, 2, 1, "", "nBatch"], [349, 2, 1, "", "nChunks"], [349, 2, 1, "", "nCtx"], [349, 2, 1, "", "nGpuLayers"], [349, 2, 1, "", "nSequences"], [349, 2, 1, "", "nThreads"], [349, 2, 1, "", "nThreadsBatch"], [349, 2, 1, "", "nUbatch"], [349, 2, 1, "", "name"], [349, 2, 1, "", "noKvOffload"], [349, 2, 1, "", "numaStrategy"], [349, 2, 1, "", "outputAnnotatorType"], [349, 2, 1, "", "poolingType"], [349, 3, 1, "", "pretrained"], [349, 2, 1, "", "ropeFreqBase"], [349, 2, 1, "", "ropeFreqScale"], [349, 2, 1, "", "ropeScalingType"], [349, 3, 1, "", "setDefragmentationThreshold"], [349, 3, 1, "", "setFlashAttention"], [349, 3, 1, "", "setGpuSplitMode"], [349, 3, 1, "", "setGrpAttnN"], [349, 3, 1, "", "setGrpAttnW"], [349, 3, 1, "", "setMainGpu"], [349, 3, 1, "", "setNBatch"], [349, 3, 1, "", "setNChunks"], [349, 3, 1, "", "setNCtx"], [349, 3, 1, "", "setNGpuLayers"], [349, 3, 1, "", "setNParallel"], [349, 3, 1, "", "setNSequences"], [349, 3, 1, "", "setNThreads"], [349, 3, 1, "", "setNThreadsBatch"], [349, 3, 1, "", "setNUbatch"], [349, 3, 1, "", "setNoKvOffload"], [349, 3, 1, "", "setNumaStrategy"], [349, 3, 1, "", "setPoolingType"], [349, 3, 1, "", "setRopeFreqBase"], [349, 3, 1, "", "setRopeFreqScale"], [349, 3, 1, "", "setRopeScalingType"], [349, 3, 1, "", "setTensorSplit"], [349, 3, 1, "", "setUseMlock"], [349, 3, 1, "", "setUseMmap"], [349, 3, 1, "", "setYarnAttnFactor"], [349, 3, 1, "", "setYarnBetaFast"], [349, 3, 1, "", "setYarnBetaSlow"], [349, 3, 1, "", "setYarnExtFactor"], [349, 3, 1, "", "setYarnOrigCtx"], [349, 2, 1, "", "tensorSplit"], [349, 2, 1, "", "useMlock"], [349, 2, 1, "", "useMmap"], [349, 2, 1, "", "yarnAttnFactor"], [349, 2, 1, "", "yarnBetaFast"], [349, 2, 1, "", "yarnBetaSlow"], [349, 2, 1, "", "yarnExtFactor"], [349, 2, 1, "", "yarnOrigCtx"]], "sparknlp.annotator.embeddings.bert_embeddings": [[350, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[350, 2, 1, "", "configProtoBytes"], [350, 2, 1, "", "inputAnnotatorTypes"], [350, 3, 1, "", "loadSavedModel"], [350, 2, 1, "", "name"], [350, 2, 1, "", "outputAnnotatorType"], [350, 3, 1, "", "pretrained"], [350, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[351, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[351, 2, 1, "", "configProtoBytes"], [351, 2, 1, "", "inputAnnotatorTypes"], [351, 2, 1, "", "isLong"], [351, 3, 1, "", "loadSavedModel"], [351, 2, 1, "", "name"], [351, 2, 1, "", "outputAnnotatorType"], [351, 3, 1, "", "pretrained"], [351, 3, 1, "", "setConfigProtoBytes"], [351, 3, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[352, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[352, 2, 1, "", "configProtoBytes"], [352, 2, 1, "", "inputAnnotatorTypes"], [352, 3, 1, "", "loadSavedModel"], [352, 2, 1, "", "name"], [352, 2, 1, "", "outputAnnotatorType"], [352, 3, 1, "", "pretrained"], [352, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[353, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[353, 2, 1, "", "configProtoBytes"], [353, 2, 1, "", "inputAnnotatorTypes"], [353, 3, 1, "", "loadSavedModel"], [353, 2, 1, "", "name"], [353, 2, 1, "", "outputAnnotatorType"], [353, 3, 1, "", "pretrained"], [353, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[354, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[354, 2, 1, "", "inputAnnotatorTypes"], [354, 2, 1, "", "name"], [354, 2, 1, "", "outputAnnotatorType"], [354, 2, 1, "", "poolingStrategy"], [354, 3, 1, "", "setPoolingStrategy"], [354, 3, 1, "", "setSkipOOV"], [354, 2, 1, "", "skipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[355, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[355, 2, 1, "", "configProtoBytes"], [355, 2, 1, "", "inputAnnotatorTypes"], [355, 3, 1, "", "loadSavedModel"], [355, 2, 1, "", "name"], [355, 2, 1, "", "outputAnnotatorType"], [355, 3, 1, "", "pretrained"], [355, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[356, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[356, 2, 1, "", "configProtoBytes"], [356, 2, 1, "", "inputAnnotatorTypes"], [356, 3, 1, "", "loadSavedModel"], [356, 2, 1, "", "name"], [356, 2, 1, "", "outputAnnotatorType"], [356, 3, 1, "", "pretrained"], [356, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[357, 1, 1, "", "Doc2VecApproach"], [357, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[357, 2, 1, "", "inputAnnotatorTypes"], [357, 2, 1, "", "maxIter"], [357, 2, 1, "", "maxSentenceLength"], [357, 2, 1, "", "minCount"], [357, 2, 1, "", "numPartitions"], [357, 2, 1, "", "outputAnnotatorType"], [357, 2, 1, "", "seed"], [357, 3, 1, "", "setMaxIter"], [357, 3, 1, "", "setMaxSentenceLength"], [357, 3, 1, "", "setMinCount"], [357, 3, 1, "", "setNumPartitions"], [357, 3, 1, "", "setSeed"], [357, 3, 1, "", "setStepSize"], [357, 3, 1, "", "setVectorSize"], [357, 3, 1, "", "setWindowSize"], [357, 2, 1, "", "stepSize"], [357, 2, 1, "", "vectorSize"], [357, 2, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[357, 3, 1, "", "getVectors"], [357, 2, 1, "", "inputAnnotatorTypes"], [357, 2, 1, "", "name"], [357, 2, 1, "", "outputAnnotatorType"], [357, 3, 1, "", "pretrained"], [357, 3, 1, "", "setVectorSize"], [357, 2, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[358, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[358, 2, 1, "", "configProtoBytes"], [358, 2, 1, "", "inputAnnotatorTypes"], [358, 3, 1, "", "loadSavedModel"], [358, 2, 1, "", "name"], [358, 2, 1, "", "outputAnnotatorType"], [358, 3, 1, "", "pretrained"], [358, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5v_embeddings": [[359, 1, 1, "", "E5VEmbeddings"]], "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings": [[359, 2, 1, "", "inputAnnotatorTypes"], [359, 3, 1, "", "loadSavedModel"], [359, 2, 1, "", "name"], [359, 2, 1, "", "outputAnnotatorType"], [359, 3, 1, "", "pretrained"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[360, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[360, 2, 1, "", "batchSize"], [360, 2, 1, "", "configProtoBytes"], [360, 2, 1, "", "inputAnnotatorTypes"], [360, 3, 1, "", "loadSavedModel"], [360, 2, 1, "", "name"], [360, 2, 1, "", "outputAnnotatorType"], [360, 2, 1, "", "poolingLayer"], [360, 3, 1, "", "pretrained"], [360, 3, 1, "", "setBatchSize"], [360, 3, 1, "", "setConfigProtoBytes"], [360, 3, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[362, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[362, 2, 1, "", "configProtoBytes"], [362, 2, 1, "", "inputAnnotatorTypes"], [362, 2, 1, "", "instruction"], [362, 3, 1, "", "loadSavedModel"], [362, 2, 1, "", "name"], [362, 2, 1, "", "outputAnnotatorType"], [362, 3, 1, "", "pretrained"], [362, 3, 1, "", "setConfigProtoBytes"], [362, 3, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[363, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[363, 2, 1, "", "configProtoBytes"], [363, 2, 1, "", "inputAnnotatorTypes"], [363, 3, 1, "", "loadSavedModel"], [363, 2, 1, "", "name"], [363, 2, 1, "", "outputAnnotatorType"], [363, 3, 1, "", "pretrained"], [363, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.minilm_embeddings": [[364, 1, 1, "", "MiniLMEmbeddings"]], "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings": [[364, 2, 1, "", "configProtoBytes"], [364, 2, 1, "", "inputAnnotatorTypes"], [364, 3, 1, "", "loadSavedModel"], [364, 2, 1, "", "name"], [364, 2, 1, "", "outputAnnotatorType"], [364, 3, 1, "", "pretrained"], [364, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[365, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[365, 2, 1, "", "configProtoBytes"], [365, 2, 1, "", "inputAnnotatorTypes"], [365, 3, 1, "", "loadSavedModel"], [365, 2, 1, "", "name"], [365, 2, 1, "", "outputAnnotatorType"], [365, 3, 1, "", "pretrained"], [365, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[366, 1, 1, "", "MxbaiEmbeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings": [[366, 2, 1, "", "inputAnnotatorTypes"], [366, 3, 1, "", "loadSavedModel"], [366, 2, 1, "", "name"], [366, 2, 1, "", "outputAnnotatorType"], [366, 2, 1, "", "poolingStrategy"], [366, 3, 1, "", "pretrained"], [366, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[367, 1, 1, "", "NomicEmbeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings": [[367, 2, 1, "", "configProtoBytes"], [367, 2, 1, "", "inputAnnotatorTypes"], [367, 3, 1, "", "loadSavedModel"], [367, 2, 1, "", "name"], [367, 2, 1, "", "outputAnnotatorType"], [367, 3, 1, "", "pretrained"], [367, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[368, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[368, 2, 1, "", "configProtoBytes"], [368, 2, 1, "", "inputAnnotatorTypes"], [368, 3, 1, "", "loadSavedModel"], [368, 2, 1, "", "name"], [368, 2, 1, "", "outputAnnotatorType"], [368, 3, 1, "", "pretrained"], [368, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[369, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[369, 2, 1, "", "configProtoBytes"], [369, 2, 1, "", "inputAnnotatorTypes"], [369, 3, 1, "", "loadSavedModel"], [369, 2, 1, "", "name"], [369, 2, 1, "", "outputAnnotatorType"], [369, 3, 1, "", "pretrained"], [369, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[370, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[370, 2, 1, "", "inputAnnotatorTypes"], [370, 2, 1, "", "name"], [370, 2, 1, "", "outputAnnotatorType"], [370, 2, 1, "", "poolingStrategy"], [370, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[371, 1, 1, "", "SnowFlakeEmbeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings": [[371, 2, 1, "", "inputAnnotatorTypes"], [371, 3, 1, "", "loadSavedModel"], [371, 2, 1, "", "name"], [371, 2, 1, "", "outputAnnotatorType"], [371, 2, 1, "", "poolingStrategy"], [371, 3, 1, "", "pretrained"], [371, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[372, 1, 1, "", "UAEEmbeddings"]], "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings": [[372, 2, 1, "", "inputAnnotatorTypes"], [372, 3, 1, "", "loadSavedModel"], [372, 2, 1, "", "name"], [372, 2, 1, "", "outputAnnotatorType"], [372, 2, 1, "", "poolingStrategy"], [372, 3, 1, "", "pretrained"], [372, 3, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[373, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[373, 2, 1, "", "configProtoBytes"], [373, 2, 1, "", "inputAnnotatorTypes"], [373, 2, 1, "", "loadSP"], [373, 3, 1, "", "loadSavedModel"], [373, 2, 1, "", "name"], [373, 2, 1, "", "outputAnnotatorType"], [373, 3, 1, "", "pretrained"], [373, 3, 1, "", "setConfigProtoBytes"], [373, 3, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[374, 1, 1, "", "Word2VecApproach"], [374, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[374, 2, 1, "", "inputAnnotatorTypes"], [374, 2, 1, "", "maxIter"], [374, 2, 1, "", "maxSentenceLength"], [374, 2, 1, "", "minCount"], [374, 2, 1, "", "numPartitions"], [374, 2, 1, "", "outputAnnotatorType"], [374, 2, 1, "", "seed"], [374, 3, 1, "", "setMaxIter"], [374, 3, 1, "", "setMaxSentenceLength"], [374, 3, 1, "", "setMinCount"], [374, 3, 1, "", "setNumPartitions"], [374, 3, 1, "", "setSeed"], [374, 3, 1, "", "setStepSize"], [374, 3, 1, "", "setVectorSize"], [374, 3, 1, "", "setWindowSize"], [374, 2, 1, "", "stepSize"], [374, 2, 1, "", "vectorSize"], [374, 2, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[374, 3, 1, "", "getVectors"], [374, 2, 1, "", "inputAnnotatorTypes"], [374, 2, 1, "", "name"], [374, 2, 1, "", "outputAnnotatorType"], [374, 3, 1, "", "pretrained"], [374, 3, 1, "", "setVectorSize"], [374, 2, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[375, 1, 1, "", "WordEmbeddings"], [375, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[375, 2, 1, "", "inputAnnotatorTypes"], [375, 2, 1, "", "name"], [375, 2, 1, "", "outputAnnotatorType"], [375, 2, 1, "", "readCacheSize"], [375, 3, 1, "", "setReadCacheSize"], [375, 3, 1, "", "setWriteBufferSize"], [375, 2, 1, "", "writeBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[375, 2, 1, "", "databases"], [375, 2, 1, "", "inputAnnotatorTypes"], [375, 3, 1, "", "loadStorage"], [375, 2, 1, "", "name"], [375, 2, 1, "", "outputAnnotatorType"], [375, 3, 1, "", "overallCoverage"], [375, 3, 1, "", "pretrained"], [375, 2, 1, "", "readCacheSize"], [375, 3, 1, "", "setReadCacheSize"], [375, 3, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[376, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[376, 2, 1, "", "configProtoBytes"], [376, 2, 1, "", "inputAnnotatorTypes"], [376, 3, 1, "", "loadSavedModel"], [376, 2, 1, "", "name"], [376, 2, 1, "", "outputAnnotatorType"], [376, 3, 1, "", "pretrained"], [376, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[377, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[377, 2, 1, "", "configProtoBytes"], [377, 2, 1, "", "inputAnnotatorTypes"], [377, 3, 1, "", "loadSavedModel"], [377, 2, 1, "", "name"], [377, 2, 1, "", "outputAnnotatorType"], [377, 3, 1, "", "pretrained"], [377, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[378, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[378, 2, 1, "", "configProtoBytes"], [378, 2, 1, "", "inputAnnotatorTypes"], [378, 3, 1, "", "loadSavedModel"], [378, 2, 1, "", "name"], [378, 2, 1, "", "outputAnnotatorType"], [378, 3, 1, "", "pretrained"], [378, 3, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[379, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[379, 1, 1, "", "EntityRulerApproach"], [379, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[379, 2, 1, "", "alphabet"], [379, 2, 1, "", "inputAnnotatorTypes"], [379, 2, 1, "", "name"], [379, 2, 1, "", "optionalInputAnnotatorTypes"], [379, 2, 1, "", "outputAnnotatorType"], [379, 2, 1, "", "patternsResource"], [379, 2, 1, "", "sentenceMatch"], [379, 3, 1, "", "setAlphabetResource"], [379, 3, 1, "", "setPatternsResource"], [379, 3, 1, "", "setSentenceMatch"], [379, 3, 1, "", "setUseStorage"], [379, 2, 1, "", "useStorage"]], "sparknlp.annotator.er.entity_ruler.EntityRulerModel": [[379, 2, 1, "", "database"], [379, 2, 1, "", "inputAnnotatorTypes"], [379, 3, 1, "", "loadStorage"], [379, 2, 1, "", "name"], [379, 2, 1, "", "optionalInputAnnotatorTypes"], [379, 2, 1, "", "outputAnnotatorType"], [379, 3, 1, "", "pretrained"]], "sparknlp.annotator.graph_extraction": [[381, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[381, 2, 1, "", "delimiter"], [381, 2, 1, "", "dependencyParserModel"], [381, 2, 1, "", "entityTypes"], [381, 2, 1, "", "explodeEntities"], [381, 2, 1, "", "includeEdges"], [381, 2, 1, "", "inputAnnotatorTypes"], [381, 2, 1, "", "maxSentenceSize"], [381, 2, 1, "", "mergeEntities"], [381, 2, 1, "", "mergeEntitiesIOBFormat"], [381, 2, 1, "", "minSentenceSize"], [381, 2, 1, "", "name"], [381, 2, 1, "", "optionalInputAnnotatorTypes"], [381, 2, 1, "", "outputAnnotatorType"], [381, 2, 1, "", "posModel"], [381, 2, 1, "", "relationshipTypes"], [381, 2, 1, "", "rootTokens"], [381, 3, 1, "", "setDelimiter"], [381, 3, 1, "", "setDependencyParserModel"], [381, 3, 1, "", "setEntityTypes"], [381, 3, 1, "", "setExplodeEntities"], [381, 3, 1, "", "setIncludeEdges"], [381, 3, 1, "", "setMaxSentenceSize"], [381, 3, 1, "", "setMergeEntities"], [381, 3, 1, "", "setMergeEntitiesIOBFormat"], [381, 3, 1, "", "setMinSentenceSize"], [381, 3, 1, "", "setPosModel"], [381, 3, 1, "", "setRelationshipTypes"], [381, 3, 1, "", "setRootTokens"], [381, 3, 1, "", "setTypedDependencyParserModel"], [381, 2, 1, "", "typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[384, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[384, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[384, 3, 1, "", "getStopWords"], [384, 2, 1, "", "inputAnnotatorTypes"], [384, 3, 1, "", "loadDefaultStopWords"], [384, 2, 1, "", "maxNGrams"], [384, 2, 1, "", "minNGrams"], [384, 2, 1, "", "nKeywords"], [384, 2, 1, "", "name"], [384, 2, 1, "", "outputAnnotatorType"], [384, 3, 1, "", "setMaxNGrams"], [384, 3, 1, "", "setMinNGrams"], [384, 3, 1, "", "setNKeywords"], [384, 3, 1, "", "setStopWords"], [384, 3, 1, "", "setThreshold"], [384, 3, 1, "", "setWindowSize"], [384, 2, 1, "", "stopWords"], [384, 2, 1, "", "threshold"], [384, 2, 1, "", "windowSize"]], "sparknlp.annotator.ld_dl": [[386, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[386, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[386, 2, 1, "", "coalesceSentences"], [386, 2, 1, "", "configProtoBytes"], [386, 2, 1, "", "inputAnnotatorTypes"], [386, 2, 1, "", "languages"], [386, 2, 1, "", "name"], [386, 2, 1, "", "outputAnnotatorType"], [386, 3, 1, "", "pretrained"], [386, 3, 1, "", "setCoalesceSentences"], [386, 3, 1, "", "setConfigProtoBytes"], [386, 3, 1, "", "setThreshold"], [386, 3, 1, "", "setThresholdLabel"], [386, 2, 1, "", "threshold"], [386, 2, 1, "", "thresholdLabel"]], "sparknlp.annotator.lemmatizer": [[387, 1, 1, "", "Lemmatizer"], [387, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[387, 2, 1, "", "dictionary"], [387, 2, 1, "", "formCol"], [387, 2, 1, "", "inputAnnotatorTypes"], [387, 2, 1, "", "lemmaCol"], [387, 2, 1, "", "outputAnnotatorType"], [387, 3, 1, "", "setDictionary"], [387, 3, 1, "", "setFormCol"], [387, 3, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[387, 2, 1, "", "inputAnnotatorTypes"], [387, 2, 1, "", "name"], [387, 2, 1, "", "outputAnnotatorType"], [387, 3, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[388, 0, 0, "-", "big_text_matcher"], [389, 0, 0, "-", "date_matcher"], [391, 0, 0, "-", "multi_date_matcher"], [392, 0, 0, "-", "regex_matcher"], [393, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[388, 1, 1, "", "BigTextMatcher"], [388, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[388, 2, 1, "", "caseSensitive"], [388, 2, 1, "", "entities"], [388, 2, 1, "", "inputAnnotatorTypes"], [388, 2, 1, "", "mergeOverlapping"], [388, 2, 1, "", "outputAnnotatorType"], [388, 3, 1, "", "setCaseSensitive"], [388, 3, 1, "", "setEntities"], [388, 3, 1, "", "setMergeOverlapping"], [388, 3, 1, "", "setTokenizer"], [388, 2, 1, "", "tokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[388, 2, 1, "", "caseSensitive"], [388, 2, 1, "", "databases"], [388, 2, 1, "", "inputAnnotatorTypes"], [388, 3, 1, "", "loadStorage"], [388, 2, 1, "", "mergeOverlapping"], [388, 2, 1, "", "name"], [388, 2, 1, "", "outputAnnotatorType"], [388, 3, 1, "", "pretrained"], [388, 2, 1, "", "searchTrie"], [388, 3, 1, "", "setCaseSensitive"], [388, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[389, 1, 1, "", "DateMatcher"], [389, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcher": [[389, 2, 1, "", "inputAnnotatorTypes"], [389, 2, 1, "", "name"], [389, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[389, 2, 1, "", "aggressiveMatching"], [389, 2, 1, "", "anchorDateDay"], [389, 2, 1, "", "anchorDateMonth"], [389, 2, 1, "", "anchorDateYear"], [389, 2, 1, "", "defaultDayWhenMissing"], [389, 2, 1, "", "inputFormats"], [389, 2, 1, "", "outputFormat"], [389, 2, 1, "", "readMonthFirst"], [389, 2, 1, "", "relaxedFactoryStrategy"], [389, 3, 1, "", "setAggressiveMatching"], [389, 3, 1, "", "setAnchorDateDay"], [389, 3, 1, "", "setAnchorDateMonth"], [389, 3, 1, "", "setAnchorDateYear"], [389, 3, 1, "", "setDefaultDayWhenMissing"], [389, 3, 1, "", "setInputFormats"], [389, 3, 1, "", "setOutputFormat"], [389, 3, 1, "", "setReadMonthFirst"], [389, 3, 1, "", "setRelaxedFactoryStrategy"], [389, 3, 1, "", "setSourceLanguage"], [389, 2, 1, "", "sourceLanguage"]], "sparknlp.annotator.matcher.multi_date_matcher": [[391, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher": [[391, 2, 1, "", "inputAnnotatorTypes"], [391, 2, 1, "", "name"], [391, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.regex_matcher": [[392, 1, 1, "", "RegexMatcher"], [392, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[392, 2, 1, "", "delimiter"], [392, 2, 1, "", "externalRules"], [392, 2, 1, "", "inputAnnotatorTypes"], [392, 2, 1, "", "outputAnnotatorType"], [392, 2, 1, "", "rules"], [392, 3, 1, "", "setDelimiter"], [392, 3, 1, "", "setExternalRules"], [392, 3, 1, "", "setRules"], [392, 3, 1, "", "setStrategy"], [392, 2, 1, "", "strategy"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel": [[392, 2, 1, "", "inputAnnotatorTypes"], [392, 2, 1, "", "name"], [392, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.text_matcher": [[393, 1, 1, "", "TextMatcher"], [393, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[393, 2, 1, "", "buildFromTokens"], [393, 2, 1, "", "caseSensitive"], [393, 2, 1, "", "entities"], [393, 2, 1, "", "entityValue"], [393, 2, 1, "", "inputAnnotatorTypes"], [393, 2, 1, "", "mergeOverlapping"], [393, 2, 1, "", "outputAnnotatorType"], [393, 3, 1, "", "setBuildFromTokens"], [393, 3, 1, "", "setCaseSensitive"], [393, 3, 1, "", "setEntities"], [393, 3, 1, "", "setEntityValue"], [393, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[393, 2, 1, "", "buildFromTokens"], [393, 2, 1, "", "entityValue"], [393, 2, 1, "", "inputAnnotatorTypes"], [393, 2, 1, "", "mergeOverlapping"], [393, 2, 1, "", "name"], [393, 2, 1, "", "outputAnnotatorType"], [393, 3, 1, "", "pretrained"], [393, 2, 1, "", "searchTrie"], [393, 3, 1, "", "setBuildFromTokens"], [393, 3, 1, "", "setEntityValue"], [393, 3, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[394, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[394, 2, 1, "", "delimiter"], [394, 2, 1, "", "enableCumulative"], [394, 2, 1, "", "inputAnnotatorTypes"], [394, 2, 1, "", "n"], [394, 2, 1, "", "name"], [394, 2, 1, "", "outputAnnotatorType"], [394, 3, 1, "", "setDelimiter"], [394, 3, 1, "", "setEnableCumulative"], [394, 3, 1, "", "setN"]], "sparknlp.annotator.ner": [[396, 0, 0, "-", "ner_approach"], [397, 0, 0, "-", "ner_converter"], [398, 0, 0, "-", "ner_crf"], [399, 0, 0, "-", "ner_dl"], [400, 0, 0, "-", "ner_dl_graph_checker"], [401, 0, 0, "-", "ner_overwriter"], [402, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[396, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[396, 2, 1, "", "entities"], [396, 3, 1, "", "getLabelColumn"], [396, 2, 1, "", "labelColumn"], [396, 2, 1, "", "maxEpochs"], [396, 2, 1, "", "minEpochs"], [396, 2, 1, "", "randomSeed"], [396, 3, 1, "", "setEntities"], [396, 3, 1, "", "setLabelColumn"], [396, 3, 1, "", "setMaxEpochs"], [396, 3, 1, "", "setMinEpochs"], [396, 3, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[397, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[397, 2, 1, "", "inputAnnotatorTypes"], [397, 2, 1, "", "name"], [397, 2, 1, "", "nerHasNoSchema"], [397, 2, 1, "", "outputAnnotatorType"], [397, 2, 1, "", "preservePosition"], [397, 3, 1, "", "setNerHasNoSchema"], [397, 3, 1, "", "setPreservePosition"], [397, 3, 1, "", "setWhiteList"], [397, 2, 1, "", "whiteList"]], "sparknlp.annotator.ner.ner_crf": [[398, 1, 1, "", "NerCrfApproach"], [398, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[398, 2, 1, "", "c0"], [398, 2, 1, "", "externalFeatures"], [398, 2, 1, "", "includeConfidence"], [398, 2, 1, "", "inputAnnotatorTypes"], [398, 2, 1, "", "l2"], [398, 2, 1, "", "lossEps"], [398, 2, 1, "", "minW"], [398, 2, 1, "", "outputAnnotatorType"], [398, 3, 1, "", "setC0"], [398, 3, 1, "", "setExternalFeatures"], [398, 3, 1, "", "setIncludeConfidence"], [398, 3, 1, "", "setL2"], [398, 3, 1, "", "setLossEps"], [398, 3, 1, "", "setMinW"], [398, 3, 1, "", "setVerbose"], [398, 2, 1, "", "verbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[398, 2, 1, "", "includeConfidence"], [398, 2, 1, "", "inputAnnotatorTypes"], [398, 2, 1, "", "name"], [398, 2, 1, "", "outputAnnotatorType"], [398, 3, 1, "", "pretrained"], [398, 3, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[399, 1, 1, "", "NerDLApproach"], [399, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[399, 2, 1, "", "batchSize"], [399, 2, 1, "", "bestModelMetric"], [399, 2, 1, "", "configProtoBytes"], [399, 2, 1, "", "dropout"], [399, 2, 1, "", "enableMemoryOptimizer"], [399, 2, 1, "", "graphFolder"], [399, 2, 1, "", "includeAllConfidenceScores"], [399, 2, 1, "", "includeConfidence"], [399, 2, 1, "", "inputAnnotatorTypes"], [399, 2, 1, "", "lr"], [399, 2, 1, "", "outputAnnotatorType"], [399, 2, 1, "", "po"], [399, 3, 1, "", "setBatchSize"], [399, 3, 1, "", "setBestModelMetric"], [399, 3, 1, "", "setConfigProtoBytes"], [399, 3, 1, "", "setDropout"], [399, 3, 1, "", "setEnableMemoryOptimizer"], [399, 3, 1, "", "setGraphFolder"], [399, 3, 1, "", "setIncludeAllConfidenceScores"], [399, 3, 1, "", "setIncludeConfidence"], [399, 3, 1, "", "setLr"], [399, 3, 1, "", "setPo"], [399, 3, 1, "", "setUseBestModel"], [399, 3, 1, "", "setUseContrib"], [399, 2, 1, "", "useBestModel"], [399, 2, 1, "", "useContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[399, 2, 1, "", "classes"], [399, 2, 1, "", "configProtoBytes"], [399, 2, 1, "", "includeAllConfidenceScores"], [399, 2, 1, "", "includeConfidence"], [399, 2, 1, "", "inputAnnotatorTypes"], [399, 2, 1, "", "name"], [399, 2, 1, "", "outputAnnotatorType"], [399, 3, 1, "", "pretrained"], [399, 3, 1, "", "setConfigProtoBytes"], [399, 3, 1, "", "setIncludeAllConfidenceScores"], [399, 3, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl_graph_checker": [[400, 1, 1, "", "NerDLGraphChecker"], [400, 1, 1, "", "NerDLGraphCheckerModel"]], "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker": [[400, 2, 1, "", "embeddingsDim"], [400, 2, 1, "", "graphFolder"], [400, 2, 1, "", "inputAnnotatorTypes"], [400, 2, 1, "", "inputCols"], [400, 2, 1, "", "labelColumn"], [400, 3, 1, "", "setEmbeddingsDim"], [400, 3, 1, "", "setEmbeddingsModel"], [400, 3, 1, "", "setGraphFolder"], [400, 3, 1, "", "setInputCols"], [400, 3, 1, "", "setLabelColumn"]], "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphCheckerModel": [[400, 2, 1, "", "inputAnnotatorTypes"]], "sparknlp.annotator.ner.ner_overwriter": [[401, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[401, 2, 1, "", "inputAnnotatorTypes"], [401, 2, 1, "", "name"], [401, 2, 1, "", "nerWords"], [401, 2, 1, "", "newNerEntity"], [401, 2, 1, "", "outputAnnotatorType"], [401, 2, 1, "", "replaceEntities"], [401, 3, 1, "", "setNerWords"], [401, 3, 1, "", "setNewNerEntity"], [401, 3, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[402, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[402, 3, 1, "", "getClasses"], [402, 2, 1, "", "ignoreEntities"], [402, 2, 1, "", "inputAnnotatorTypes"], [402, 3, 1, "", "load"], [402, 2, 1, "", "name"], [402, 2, 1, "", "outputAnnotatorType"], [402, 2, 1, "", "predictionThreshold"], [402, 3, 1, "", "pretrained"], [402, 3, 1, "", "setEntityDefinitions"], [402, 3, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[403, 1, 1, "", "Normalizer"], [403, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[403, 2, 1, "", "cleanupPatterns"], [403, 2, 1, "", "inputAnnotatorTypes"], [403, 2, 1, "", "lowercase"], [403, 2, 1, "", "maxLength"], [403, 2, 1, "", "minLength"], [403, 2, 1, "", "outputAnnotatorType"], [403, 3, 1, "", "setCleanupPatterns"], [403, 3, 1, "", "setLowercase"], [403, 3, 1, "", "setMaxLength"], [403, 3, 1, "", "setMinLength"], [403, 3, 1, "", "setSlangDictionary"], [403, 2, 1, "", "slangDictionary"], [403, 2, 1, "", "slangMatchCase"]], "sparknlp.annotator.normalizer.NormalizerModel": [[403, 2, 1, "", "cleanupPatterns"], [403, 2, 1, "", "inputAnnotatorTypes"], [403, 2, 1, "", "lowercase"], [403, 2, 1, "", "name"], [403, 2, 1, "", "outputAnnotatorType"], [403, 2, 1, "", "slangMatchCase"]], "sparknlp.annotator.openai": [[405, 0, 0, "-", "openai_completion"], [406, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[405, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[405, 2, 1, "", "bestOf"], [405, 2, 1, "", "echo"], [405, 2, 1, "", "frequencyPenalty"], [405, 2, 1, "", "inputAnnotatorTypes"], [405, 2, 1, "", "logitBias"], [405, 2, 1, "", "logprobs"], [405, 2, 1, "", "maxTokens"], [405, 2, 1, "", "model"], [405, 2, 1, "", "name"], [405, 2, 1, "", "numberOfCompletions"], [405, 2, 1, "", "outputAnnotatorType"], [405, 2, 1, "", "presencePenalty"], [405, 3, 1, "", "setBestOf"], [405, 3, 1, "", "setEcho"], [405, 3, 1, "", "setFrequencyPenalty"], [405, 3, 1, "", "setLogitBias"], [405, 3, 1, "", "setLogprobs"], [405, 3, 1, "", "setMaxTokens"], [405, 3, 1, "", "setModel"], [405, 3, 1, "", "setNumberOfCompletions"], [405, 3, 1, "", "setPresencePenalty"], [405, 3, 1, "", "setStop"], [405, 3, 1, "", "setSuffix"], [405, 3, 1, "", "setTemperature"], [405, 3, 1, "", "setTopP"], [405, 3, 1, "", "setUser"], [405, 2, 1, "", "stop"], [405, 2, 1, "", "suffix"], [405, 2, 1, "", "temperature"], [405, 2, 1, "", "topP"], [405, 2, 1, "", "user"]], "sparknlp.annotator.openai.openai_embeddings": [[406, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[406, 2, 1, "", "inputAnnotatorTypes"], [406, 2, 1, "", "model"], [406, 2, 1, "", "name"], [406, 2, 1, "", "outputAnnotatorType"], [406, 3, 1, "", "setModel"], [406, 3, 1, "", "setUser"], [406, 2, 1, "", "user"]], "sparknlp.annotator.param": [[407, 0, 0, "-", "classifier_encoder"], [408, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[407, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[407, 2, 1, "", "batchSize"], [407, 2, 1, "", "configProtoBytes"], [407, 2, 1, "", "labelColumn"], [407, 2, 1, "", "lr"], [407, 2, 1, "", "maxEpochs"], [407, 2, 1, "", "randomSeed"], [407, 3, 1, "", "setBatchSize"], [407, 3, 1, "", "setConfigProtoBytes"], [407, 3, 1, "", "setLabelColumn"], [407, 3, 1, "", "setLr"], [407, 3, 1, "", "setMaxEpochs"], [407, 3, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[408, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[408, 2, 1, "", "enableOutputLogs"], [408, 2, 1, "", "evaluationLogExtended"], [408, 2, 1, "", "outputLogsPath"], [408, 3, 1, "", "setEnableOutputLogs"], [408, 3, 1, "", "setEvaluationLogExtended"], [408, 3, 1, "", "setOutputLogsPath"], [408, 3, 1, "", "setTestDataset"], [408, 3, 1, "", "setValidationSplit"], [408, 3, 1, "", "setVerbose"], [408, 2, 1, "", "testDataset"], [408, 2, 1, "", "validationSplit"], [408, 2, 1, "", "verbose"]], "sparknlp.annotator.pos": [[411, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[411, 1, 1, "", "PerceptronApproach"], [411, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[411, 3, 1, "", "getNIterations"], [411, 2, 1, "", "inputAnnotatorTypes"], [411, 2, 1, "", "nIterations"], [411, 2, 1, "", "outputAnnotatorType"], [411, 2, 1, "", "posCol"], [411, 3, 1, "", "setIterations"], [411, 3, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[411, 2, 1, "", "inputAnnotatorTypes"], [411, 2, 1, "", "name"], [411, 2, 1, "", "outputAnnotatorType"], [411, 3, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[413, 0, 0, "-", "sentence_detector"], [414, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[413, 1, 1, "", "SentenceDetector"], [413, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[413, 2, 1, "", "detectLists"], [413, 2, 1, "", "inputAnnotatorTypes"], [413, 2, 1, "", "name"], [413, 2, 1, "", "outputAnnotatorType"], [413, 3, 1, "", "setCustomBounds"], [413, 3, 1, "", "setCustomBoundsStrategy"], [413, 3, 1, "", "setDetectLists"], [413, 3, 1, "", "setExplodeSentences"], [413, 3, 1, "", "setMaxLength"], [413, 3, 1, "", "setMinLength"], [413, 3, 1, "", "setSplitLength"], [413, 3, 1, "", "setUseAbbreviations"], [413, 3, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams": [[413, 2, 1, "", "customBounds"], [413, 2, 1, "", "customBoundsStrategy"], [413, 2, 1, "", "explodeSentences"], [413, 2, 1, "", "maxLength"], [413, 2, 1, "", "minLength"], [413, 2, 1, "", "splitLength"], [413, 2, 1, "", "useAbbreviations"], [413, 2, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[414, 1, 1, "", "SentenceDetectorDLApproach"], [414, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[414, 2, 1, "", "epochsNumber"], [414, 2, 1, "", "explodeSentences"], [414, 2, 1, "", "impossiblePenultimates"], [414, 2, 1, "", "inputAnnotatorTypes"], [414, 2, 1, "", "modelArchitecture"], [414, 2, 1, "", "name"], [414, 2, 1, "", "outputAnnotatorType"], [414, 2, 1, "", "outputLogsPath"], [414, 3, 1, "", "setEpochsNumber"], [414, 3, 1, "", "setExplodeSentences"], [414, 3, 1, "", "setImpossiblePenultimates"], [414, 3, 1, "", "setModel"], [414, 3, 1, "", "setOutputLogsPath"], [414, 3, 1, "", "setValidationSplit"], [414, 2, 1, "", "validationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[414, 2, 1, "", "customBounds"], [414, 2, 1, "", "explodeSentences"], [414, 2, 1, "", "impossiblePenultimates"], [414, 2, 1, "", "inputAnnotatorTypes"], [414, 2, 1, "", "maxLength"], [414, 2, 1, "", "minLength"], [414, 2, 1, "", "modelArchitecture"], [414, 2, 1, "", "name"], [414, 2, 1, "", "outputAnnotatorType"], [414, 3, 1, "", "pretrained"], [414, 3, 1, "", "setCustomBounds"], [414, 3, 1, "", "setExplodeSentences"], [414, 3, 1, "", "setImpossiblePenultimates"], [414, 3, 1, "", "setMaxLength"], [414, 3, 1, "", "setMinLength"], [414, 3, 1, "", "setModel"], [414, 3, 1, "", "setSplitLength"], [414, 3, 1, "", "setUseCustomBoundsOnly"], [414, 2, 1, "", "splitLength"], [414, 2, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[416, 0, 0, "-", "sentiment_detector"], [417, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[416, 1, 1, "", "SentimentDetector"], [416, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[416, 2, 1, "", "decrementMultiplier"], [416, 2, 1, "", "dictionary"], [416, 2, 1, "", "enableScore"], [416, 2, 1, "", "incrementMultiplier"], [416, 2, 1, "", "inputAnnotatorTypes"], [416, 2, 1, "", "negativeMultiplier"], [416, 2, 1, "", "outputAnnotatorType"], [416, 2, 1, "", "positiveMultiplier"], [416, 2, 1, "", "reverseMultiplier"], [416, 3, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel": [[416, 2, 1, "", "inputAnnotatorTypes"], [416, 2, 1, "", "name"], [416, 2, 1, "", "outputAnnotatorType"], [416, 2, 1, "", "positiveMultiplier"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[417, 1, 1, "", "ViveknSentimentApproach"], [417, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[417, 2, 1, "", "featureLimit"], [417, 2, 1, "", "importantFeatureRatio"], [417, 2, 1, "", "inputAnnotatorTypes"], [417, 2, 1, "", "outputAnnotatorType"], [417, 2, 1, "", "pruneCorpus"], [417, 2, 1, "", "sentimentCol"], [417, 3, 1, "", "setPruneCorpus"], [417, 3, 1, "", "setSentimentCol"], [417, 2, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[417, 2, 1, "", "featureLimit"], [417, 2, 1, "", "importantFeatureRatio"], [417, 2, 1, "", "inputAnnotatorTypes"], [417, 2, 1, "", "name"], [417, 2, 1, "", "outputAnnotatorType"], [417, 3, 1, "", "pretrained"], [417, 2, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[418, 0, 0, "-", "auto_gguf_model"], [419, 0, 0, "-", "auto_gguf_reranker"], [420, 0, 0, "-", "auto_gguf_vision_model"], [421, 0, 0, "-", "bart_transformer"], [422, 0, 0, "-", "cohere_transformer"], [423, 0, 0, "-", "cpm_transformer"], [424, 0, 0, "-", "gpt2_transformer"], [426, 0, 0, "-", "llama2_transformer"], [427, 0, 0, "-", "llama3_transformer"], [428, 0, 0, "-", "m2m100_transformer"], [429, 0, 0, "-", "marian_transformer"], [430, 0, 0, "-", "mistral_transformer"], [431, 0, 0, "-", "nllb_transformer"], [432, 0, 0, "-", "olmo_transformer"], [433, 0, 0, "-", "phi2_transformer"], [434, 0, 0, "-", "phi3_transformer"], [435, 0, 0, "-", "phi4_transformer"], [436, 0, 0, "-", "qwen_transformer"], [437, 0, 0, "-", "starcoder_transformer"], [438, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[418, 1, 1, "", "AutoGGUFModel"]], "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel": [[418, 2, 1, "", "inputAnnotatorTypes"], [418, 3, 1, "", "loadSavedModel"], [418, 2, 1, "", "name"], [418, 2, 1, "", "outputAnnotatorType"], [418, 3, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_reranker": [[419, 1, 1, "", "AutoGGUFReranker"]], "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker": [[419, 3, 1, "", "getQuery"], [419, 2, 1, "", "inputAnnotatorTypes"], [419, 3, 1, "", "loadSavedModel"], [419, 2, 1, "", "name"], [419, 2, 1, "", "outputAnnotatorType"], [419, 3, 1, "", "pretrained"], [419, 2, 1, "", "query"], [419, 3, 1, "", "setQuery"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[420, 1, 1, "", "AutoGGUFVisionModel"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel": [[420, 2, 1, "", "inputAnnotatorTypes"], [420, 3, 1, "", "loadSavedModel"], [420, 2, 1, "", "name"], [420, 2, 1, "", "outputAnnotatorType"], [420, 3, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.bart_transformer": [[421, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[421, 2, 1, "", "beamSize"], [421, 2, 1, "", "configProtoBytes"], [421, 2, 1, "", "doSample"], [421, 2, 1, "", "ignoreTokenIds"], [421, 2, 1, "", "inputAnnotatorTypes"], [421, 3, 1, "", "loadSavedModel"], [421, 2, 1, "", "maxOutputLength"], [421, 2, 1, "", "minOutputLength"], [421, 2, 1, "", "name"], [421, 2, 1, "", "noRepeatNgramSize"], [421, 2, 1, "", "outputAnnotatorType"], [421, 3, 1, "", "pretrained"], [421, 2, 1, "", "repetitionPenalty"], [421, 3, 1, "", "setBeamSize"], [421, 3, 1, "", "setCache"], [421, 3, 1, "", "setConfigProtoBytes"], [421, 3, 1, "", "setDoSample"], [421, 3, 1, "", "setIgnoreTokenIds"], [421, 3, 1, "", "setMaxOutputLength"], [421, 3, 1, "", "setMinOutputLength"], [421, 3, 1, "", "setNoRepeatNgramSize"], [421, 3, 1, "", "setRepetitionPenalty"], [421, 3, 1, "", "setTask"], [421, 3, 1, "", "setTemperature"], [421, 3, 1, "", "setTopK"], [421, 3, 1, "", "setTopP"], [421, 2, 1, "", "task"], [421, 2, 1, "", "temperature"], [421, 2, 1, "", "topK"], [421, 2, 1, "", "topP"], [421, 2, 1, "", "useCache"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[422, 1, 1, "", "CoHereTransformer"]], "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer": [[422, 2, 1, "", "beamSize"], [422, 2, 1, "", "configProtoBytes"], [422, 2, 1, "", "doSample"], [422, 2, 1, "", "ignoreTokenIds"], [422, 2, 1, "", "inputAnnotatorTypes"], [422, 3, 1, "", "loadSavedModel"], [422, 2, 1, "", "maxOutputLength"], [422, 2, 1, "", "minOutputLength"], [422, 2, 1, "", "name"], [422, 2, 1, "", "noRepeatNgramSize"], [422, 2, 1, "", "outputAnnotatorType"], [422, 3, 1, "", "pretrained"], [422, 2, 1, "", "repetitionPenalty"], [422, 3, 1, "", "setBeamSize"], [422, 3, 1, "", "setConfigProtoBytes"], [422, 3, 1, "", "setDoSample"], [422, 3, 1, "", "setIgnoreTokenIds"], [422, 3, 1, "", "setMaxOutputLength"], [422, 3, 1, "", "setMinOutputLength"], [422, 3, 1, "", "setNoRepeatNgramSize"], [422, 3, 1, "", "setRepetitionPenalty"], [422, 3, 1, "", "setStopTokenIds"], [422, 3, 1, "", "setTemperature"], [422, 3, 1, "", "setTopK"], [422, 3, 1, "", "setTopP"], [422, 2, 1, "", "stopTokenIds"], [422, 2, 1, "", "temperature"], [422, 2, 1, "", "topK"], [422, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[423, 1, 1, "", "CPMTransformer"]], "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer": [[423, 2, 1, "", "configProtoBytes"], [423, 2, 1, "", "doSample"], [423, 2, 1, "", "ignoreTokenIds"], [423, 2, 1, "", "inputAnnotatorTypes"], [423, 3, 1, "", "loadSavedModel"], [423, 2, 1, "", "maxOutputLength"], [423, 2, 1, "", "minOutputLength"], [423, 2, 1, "", "name"], [423, 2, 1, "", "noRepeatNgramSize"], [423, 2, 1, "", "outputAnnotatorType"], [423, 3, 1, "", "pretrained"], [423, 2, 1, "", "repetitionPenalty"], [423, 3, 1, "", "setConfigProtoBytes"], [423, 3, 1, "", "setDoSample"], [423, 3, 1, "", "setIgnoreTokenIds"], [423, 3, 1, "", "setMaxOutputLength"], [423, 3, 1, "", "setMinOutputLength"], [423, 3, 1, "", "setNoRepeatNgramSize"], [423, 3, 1, "", "setRepetitionPenalty"], [423, 3, 1, "", "setTemperature"], [423, 3, 1, "", "setTopK"], [423, 3, 1, "", "setTopP"], [423, 2, 1, "", "temperature"], [423, 2, 1, "", "topK"], [423, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[424, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[424, 2, 1, "", "configProtoBytes"], [424, 2, 1, "", "doSample"], [424, 2, 1, "", "ignoreTokenIds"], [424, 2, 1, "", "inputAnnotatorTypes"], [424, 3, 1, "", "loadSavedModel"], [424, 2, 1, "", "maxOutputLength"], [424, 2, 1, "", "minOutputLength"], [424, 2, 1, "", "name"], [424, 2, 1, "", "noRepeatNgramSize"], [424, 2, 1, "", "outputAnnotatorType"], [424, 3, 1, "", "pretrained"], [424, 2, 1, "", "repetitionPenalty"], [424, 3, 1, "", "setConfigProtoBytes"], [424, 3, 1, "", "setDoSample"], [424, 3, 1, "", "setIgnoreTokenIds"], [424, 3, 1, "", "setMaxOutputLength"], [424, 3, 1, "", "setMinOutputLength"], [424, 3, 1, "", "setNoRepeatNgramSize"], [424, 3, 1, "", "setRepetitionPenalty"], [424, 3, 1, "", "setTask"], [424, 3, 1, "", "setTemperature"], [424, 3, 1, "", "setTopK"], [424, 3, 1, "", "setTopP"], [424, 2, 1, "", "task"], [424, 2, 1, "", "temperature"], [424, 2, 1, "", "topK"], [424, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[426, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[426, 2, 1, "", "configProtoBytes"], [426, 2, 1, "", "doSample"], [426, 2, 1, "", "ignoreTokenIds"], [426, 2, 1, "", "inputAnnotatorTypes"], [426, 3, 1, "", "loadSavedModel"], [426, 2, 1, "", "maxOutputLength"], [426, 2, 1, "", "minOutputLength"], [426, 2, 1, "", "name"], [426, 2, 1, "", "noRepeatNgramSize"], [426, 2, 1, "", "outputAnnotatorType"], [426, 3, 1, "", "pretrained"], [426, 2, 1, "", "repetitionPenalty"], [426, 3, 1, "", "setConfigProtoBytes"], [426, 3, 1, "", "setDoSample"], [426, 3, 1, "", "setIgnoreTokenIds"], [426, 3, 1, "", "setMaxOutputLength"], [426, 3, 1, "", "setMinOutputLength"], [426, 3, 1, "", "setNoRepeatNgramSize"], [426, 3, 1, "", "setRepetitionPenalty"], [426, 3, 1, "", "setTemperature"], [426, 3, 1, "", "setTopK"], [426, 3, 1, "", "setTopP"], [426, 2, 1, "", "temperature"], [426, 2, 1, "", "topK"], [426, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[427, 1, 1, "", "LLAMA3Transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer": [[427, 2, 1, "", "beamSize"], [427, 2, 1, "", "configProtoBytes"], [427, 2, 1, "", "doSample"], [427, 2, 1, "", "ignoreTokenIds"], [427, 2, 1, "", "inputAnnotatorTypes"], [427, 3, 1, "", "loadSavedModel"], [427, 2, 1, "", "maxOutputLength"], [427, 2, 1, "", "minOutputLength"], [427, 2, 1, "", "name"], [427, 2, 1, "", "noRepeatNgramSize"], [427, 2, 1, "", "outputAnnotatorType"], [427, 3, 1, "", "pretrained"], [427, 2, 1, "", "repetitionPenalty"], [427, 3, 1, "", "setBeamSize"], [427, 3, 1, "", "setConfigProtoBytes"], [427, 3, 1, "", "setDoSample"], [427, 3, 1, "", "setIgnoreTokenIds"], [427, 3, 1, "", "setMaxOutputLength"], [427, 3, 1, "", "setMinOutputLength"], [427, 3, 1, "", "setNoRepeatNgramSize"], [427, 3, 1, "", "setRepetitionPenalty"], [427, 3, 1, "", "setStopTokenIds"], [427, 3, 1, "", "setTemperature"], [427, 3, 1, "", "setTopK"], [427, 3, 1, "", "setTopP"], [427, 2, 1, "", "stopTokenIds"], [427, 2, 1, "", "temperature"], [427, 2, 1, "", "topK"], [427, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[428, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[428, 2, 1, "", "beamSize"], [428, 2, 1, "", "configProtoBytes"], [428, 2, 1, "", "doSample"], [428, 2, 1, "", "ignoreTokenIds"], [428, 2, 1, "", "inputAnnotatorTypes"], [428, 3, 1, "", "loadSavedModel"], [428, 2, 1, "", "maxOutputLength"], [428, 2, 1, "", "minOutputLength"], [428, 2, 1, "", "name"], [428, 2, 1, "", "noRepeatNgramSize"], [428, 2, 1, "", "outputAnnotatorType"], [428, 3, 1, "", "pretrained"], [428, 2, 1, "", "repetitionPenalty"], [428, 3, 1, "", "setBeamSize"], [428, 3, 1, "", "setConfigProtoBytes"], [428, 3, 1, "", "setDoSample"], [428, 3, 1, "", "setIgnoreTokenIds"], [428, 3, 1, "", "setMaxOutputLength"], [428, 3, 1, "", "setMinOutputLength"], [428, 3, 1, "", "setNoRepeatNgramSize"], [428, 3, 1, "", "setRepetitionPenalty"], [428, 3, 1, "", "setSrcLang"], [428, 3, 1, "", "setTemperature"], [428, 3, 1, "", "setTgtLang"], [428, 3, 1, "", "setTopK"], [428, 3, 1, "", "setTopP"], [428, 2, 1, "", "srcLang"], [428, 2, 1, "", "temperature"], [428, 2, 1, "", "tgtLang"], [428, 2, 1, "", "topK"], [428, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[429, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[429, 2, 1, "", "configProtoBytes"], [429, 2, 1, "", "doSample"], [429, 2, 1, "", "ignoreTokenIds"], [429, 2, 1, "", "inputAnnotatorTypes"], [429, 2, 1, "", "langId"], [429, 3, 1, "", "loadSavedModel"], [429, 2, 1, "", "maxInputLength"], [429, 2, 1, "", "maxOutputLength"], [429, 2, 1, "", "name"], [429, 2, 1, "", "noRepeatNgramSize"], [429, 2, 1, "", "outputAnnotatorType"], [429, 3, 1, "", "pretrained"], [429, 2, 1, "", "repetitionPenalty"], [429, 3, 1, "", "setConfigProtoBytes"], [429, 3, 1, "", "setDoSample"], [429, 3, 1, "", "setIgnoreTokenIds"], [429, 3, 1, "", "setLangId"], [429, 3, 1, "", "setMaxInputLength"], [429, 3, 1, "", "setMaxOutputLength"], [429, 3, 1, "", "setNoRepeatNgramSize"], [429, 3, 1, "", "setRandomSeed"], [429, 3, 1, "", "setRepetitionPenalty"], [429, 3, 1, "", "setTemperature"], [429, 3, 1, "", "setTopK"], [429, 3, 1, "", "setTopP"], [429, 2, 1, "", "temperature"], [429, 2, 1, "", "topK"], [429, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[430, 1, 1, "", "MistralTransformer"]], "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer": [[430, 2, 1, "", "configProtoBytes"], [430, 2, 1, "", "doSample"], [430, 2, 1, "", "ignoreTokenIds"], [430, 2, 1, "", "inputAnnotatorTypes"], [430, 3, 1, "", "loadSavedModel"], [430, 2, 1, "", "maxOutputLength"], [430, 2, 1, "", "minOutputLength"], [430, 2, 1, "", "name"], [430, 2, 1, "", "noRepeatNgramSize"], [430, 2, 1, "", "outputAnnotatorType"], [430, 3, 1, "", "pretrained"], [430, 2, 1, "", "repetitionPenalty"], [430, 3, 1, "", "setConfigProtoBytes"], [430, 3, 1, "", "setDoSample"], [430, 3, 1, "", "setIgnoreTokenIds"], [430, 3, 1, "", "setMaxOutputLength"], [430, 3, 1, "", "setMinOutputLength"], [430, 3, 1, "", "setNoRepeatNgramSize"], [430, 3, 1, "", "setRepetitionPenalty"], [430, 3, 1, "", "setTemperature"], [430, 3, 1, "", "setTopK"], [430, 3, 1, "", "setTopP"], [430, 2, 1, "", "temperature"], [430, 2, 1, "", "topK"], [430, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[431, 1, 1, "", "NLLBTransformer"]], "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer": [[431, 2, 1, "", "beamSize"], [431, 2, 1, "", "configProtoBytes"], [431, 2, 1, "", "doSample"], [431, 2, 1, "", "ignoreTokenIds"], [431, 2, 1, "", "inputAnnotatorTypes"], [431, 3, 1, "", "loadSavedModel"], [431, 2, 1, "", "maxOutputLength"], [431, 2, 1, "", "minOutputLength"], [431, 2, 1, "", "name"], [431, 2, 1, "", "noRepeatNgramSize"], [431, 2, 1, "", "outputAnnotatorType"], [431, 3, 1, "", "pretrained"], [431, 2, 1, "", "repetitionPenalty"], [431, 3, 1, "", "setBeamSize"], [431, 3, 1, "", "setConfigProtoBytes"], [431, 3, 1, "", "setDoSample"], [431, 3, 1, "", "setIgnoreTokenIds"], [431, 3, 1, "", "setMaxOutputLength"], [431, 3, 1, "", "setMinOutputLength"], [431, 3, 1, "", "setNoRepeatNgramSize"], [431, 3, 1, "", "setRepetitionPenalty"], [431, 3, 1, "", "setSrcLang"], [431, 3, 1, "", "setTemperature"], [431, 3, 1, "", "setTgtLang"], [431, 3, 1, "", "setTopK"], [431, 3, 1, "", "setTopP"], [431, 2, 1, "", "srcLang"], [431, 2, 1, "", "temperature"], [431, 2, 1, "", "tgtLang"], [431, 2, 1, "", "topK"], [431, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[432, 1, 1, "", "OLMoTransformer"]], "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer": [[432, 2, 1, "", "configProtoBytes"], [432, 2, 1, "", "doSample"], [432, 2, 1, "", "ignoreTokenIds"], [432, 2, 1, "", "inputAnnotatorTypes"], [432, 3, 1, "", "loadSavedModel"], [432, 2, 1, "", "maxOutputLength"], [432, 2, 1, "", "minOutputLength"], [432, 2, 1, "", "name"], [432, 2, 1, "", "noRepeatNgramSize"], [432, 2, 1, "", "outputAnnotatorType"], [432, 3, 1, "", "pretrained"], [432, 2, 1, "", "repetitionPenalty"], [432, 3, 1, "", "setConfigProtoBytes"], [432, 3, 1, "", "setDoSample"], [432, 3, 1, "", "setIgnoreTokenIds"], [432, 3, 1, "", "setMaxOutputLength"], [432, 3, 1, "", "setMinOutputLength"], [432, 3, 1, "", "setNoRepeatNgramSize"], [432, 3, 1, "", "setRepetitionPenalty"], [432, 3, 1, "", "setTemperature"], [432, 3, 1, "", "setTopK"], [432, 3, 1, "", "setTopP"], [432, 2, 1, "", "temperature"], [432, 2, 1, "", "topK"], [432, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[433, 1, 1, "", "Phi2Transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer": [[433, 2, 1, "", "configProtoBytes"], [433, 2, 1, "", "doSample"], [433, 2, 1, "", "ignoreTokenIds"], [433, 2, 1, "", "inputAnnotatorTypes"], [433, 3, 1, "", "loadSavedModel"], [433, 2, 1, "", "maxOutputLength"], [433, 2, 1, "", "minOutputLength"], [433, 2, 1, "", "name"], [433, 2, 1, "", "noRepeatNgramSize"], [433, 2, 1, "", "outputAnnotatorType"], [433, 3, 1, "", "pretrained"], [433, 2, 1, "", "repetitionPenalty"], [433, 3, 1, "", "setConfigProtoBytes"], [433, 3, 1, "", "setDoSample"], [433, 3, 1, "", "setIgnoreTokenIds"], [433, 3, 1, "", "setMaxOutputLength"], [433, 3, 1, "", "setMinOutputLength"], [433, 3, 1, "", "setNoRepeatNgramSize"], [433, 3, 1, "", "setRepetitionPenalty"], [433, 3, 1, "", "setTemperature"], [433, 3, 1, "", "setTopK"], [433, 3, 1, "", "setTopP"], [433, 2, 1, "", "temperature"], [433, 2, 1, "", "topK"], [433, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[434, 1, 1, "", "Phi3Transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer": [[434, 2, 1, "", "configProtoBytes"], [434, 2, 1, "", "doSample"], [434, 2, 1, "", "ignoreTokenIds"], [434, 2, 1, "", "inputAnnotatorTypes"], [434, 3, 1, "", "loadSavedModel"], [434, 2, 1, "", "maxOutputLength"], [434, 2, 1, "", "minOutputLength"], [434, 2, 1, "", "name"], [434, 2, 1, "", "noRepeatNgramSize"], [434, 2, 1, "", "outputAnnotatorType"], [434, 3, 1, "", "pretrained"], [434, 2, 1, "", "repetitionPenalty"], [434, 3, 1, "", "setConfigProtoBytes"], [434, 3, 1, "", "setDoSample"], [434, 3, 1, "", "setIgnoreTokenIds"], [434, 3, 1, "", "setMaxOutputLength"], [434, 3, 1, "", "setMinOutputLength"], [434, 3, 1, "", "setNoRepeatNgramSize"], [434, 3, 1, "", "setRepetitionPenalty"], [434, 3, 1, "", "setTemperature"], [434, 3, 1, "", "setTopK"], [434, 3, 1, "", "setTopP"], [434, 2, 1, "", "temperature"], [434, 2, 1, "", "topK"], [434, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi4_transformer": [[435, 1, 1, "", "Phi4Transformer"]], "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer": [[435, 2, 1, "", "beamSize"], [435, 2, 1, "", "configProtoBytes"], [435, 2, 1, "", "doSample"], [435, 2, 1, "", "ignoreTokenIds"], [435, 2, 1, "", "inputAnnotatorTypes"], [435, 3, 1, "", "loadSavedModel"], [435, 2, 1, "", "maxOutputLength"], [435, 2, 1, "", "minOutputLength"], [435, 2, 1, "", "name"], [435, 2, 1, "", "noRepeatNgramSize"], [435, 2, 1, "", "outputAnnotatorType"], [435, 3, 1, "", "pretrained"], [435, 2, 1, "", "repetitionPenalty"], [435, 3, 1, "", "setBeamSize"], [435, 3, 1, "", "setConfigProtoBytes"], [435, 3, 1, "", "setDoSample"], [435, 3, 1, "", "setIgnoreTokenIds"], [435, 3, 1, "", "setMaxOutputLength"], [435, 3, 1, "", "setMinOutputLength"], [435, 3, 1, "", "setNoRepeatNgramSize"], [435, 3, 1, "", "setRepetitionPenalty"], [435, 3, 1, "", "setStopTokenIds"], [435, 3, 1, "", "setTemperature"], [435, 3, 1, "", "setTopK"], [435, 3, 1, "", "setTopP"], [435, 2, 1, "", "stopTokenIds"], [435, 2, 1, "", "temperature"], [435, 2, 1, "", "topK"], [435, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[436, 1, 1, "", "QwenTransformer"]], "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer": [[436, 2, 1, "", "configProtoBytes"], [436, 2, 1, "", "doSample"], [436, 2, 1, "", "ignoreTokenIds"], [436, 2, 1, "", "inputAnnotatorTypes"], [436, 3, 1, "", "loadSavedModel"], [436, 2, 1, "", "maxOutputLength"], [436, 2, 1, "", "minOutputLength"], [436, 2, 1, "", "name"], [436, 2, 1, "", "noRepeatNgramSize"], [436, 2, 1, "", "outputAnnotatorType"], [436, 3, 1, "", "pretrained"], [436, 2, 1, "", "repetitionPenalty"], [436, 3, 1, "", "setConfigProtoBytes"], [436, 3, 1, "", "setDoSample"], [436, 3, 1, "", "setIgnoreTokenIds"], [436, 3, 1, "", "setMaxOutputLength"], [436, 3, 1, "", "setMinOutputLength"], [436, 3, 1, "", "setNoRepeatNgramSize"], [436, 3, 1, "", "setRepetitionPenalty"], [436, 3, 1, "", "setTemperature"], [436, 3, 1, "", "setTopK"], [436, 3, 1, "", "setTopP"], [436, 2, 1, "", "temperature"], [436, 2, 1, "", "topK"], [436, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[437, 1, 1, "", "StarCoderTransformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer": [[437, 2, 1, "", "configProtoBytes"], [437, 2, 1, "", "doSample"], [437, 2, 1, "", "ignoreTokenIds"], [437, 2, 1, "", "inputAnnotatorTypes"], [437, 3, 1, "", "loadSavedModel"], [437, 2, 1, "", "maxOutputLength"], [437, 2, 1, "", "minOutputLength"], [437, 2, 1, "", "name"], [437, 2, 1, "", "noRepeatNgramSize"], [437, 2, 1, "", "outputAnnotatorType"], [437, 3, 1, "", "pretrained"], [437, 2, 1, "", "repetitionPenalty"], [437, 3, 1, "", "setConfigProtoBytes"], [437, 3, 1, "", "setDoSample"], [437, 3, 1, "", "setIgnoreTokenIds"], [437, 3, 1, "", "setMaxOutputLength"], [437, 3, 1, "", "setMinOutputLength"], [437, 3, 1, "", "setNoRepeatNgramSize"], [437, 3, 1, "", "setRepetitionPenalty"], [437, 3, 1, "", "setTemperature"], [437, 3, 1, "", "setTopK"], [437, 3, 1, "", "setTopP"], [437, 2, 1, "", "temperature"], [437, 2, 1, "", "topK"], [437, 2, 1, "", "topP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[438, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[438, 2, 1, "", "configProtoBytes"], [438, 2, 1, "", "doSample"], [438, 2, 1, "", "ignoreTokenIds"], [438, 2, 1, "", "inputAnnotatorTypes"], [438, 3, 1, "", "loadSavedModel"], [438, 2, 1, "", "maxNewTokens"], [438, 2, 1, "", "maxOutputLength"], [438, 2, 1, "", "minOutputLength"], [438, 2, 1, "", "name"], [438, 2, 1, "", "noRepeatNgramSize"], [438, 2, 1, "", "outputAnnotatorType"], [438, 3, 1, "", "pretrained"], [438, 2, 1, "", "repetitionPenalty"], [438, 3, 1, "", "setConfigProtoBytes"], [438, 3, 1, "", "setDoSample"], [438, 3, 1, "", "setIgnoreTokenIds"], [438, 3, 1, "", "setMaxNewTokens"], [438, 3, 1, "", "setMaxOutputLength"], [438, 3, 1, "", "setMinOutputLength"], [438, 3, 1, "", "setNoRepeatNgramSize"], [438, 3, 1, "", "setRepetitionPenalty"], [438, 3, 1, "", "setStopAtEos"], [438, 3, 1, "", "setTask"], [438, 3, 1, "", "setTemperature"], [438, 3, 1, "", "setTopK"], [438, 3, 1, "", "setTopP"], [438, 3, 1, "", "setUseCache"], [438, 2, 1, "", "stopAtEos"], [438, 2, 1, "", "task"], [438, 2, 1, "", "temperature"], [438, 2, 1, "", "topK"], [438, 2, 1, "", "topP"], [438, 2, 1, "", "useCache"]], "sparknlp.annotator.similarity": [[439, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[439, 1, 1, "", "DocumentSimilarityRankerApproach"], [439, 1, 1, "", "DocumentSimilarityRankerFinisher"], [439, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[439, 2, 1, "", "aggregationMethod"], [439, 3, 1, "", "asRetriever"], [439, 2, 1, "", "asRetrieverQuery"], [439, 2, 1, "", "bucketLength"], [439, 2, 1, "", "identityRanking"], [439, 2, 1, "", "inputAnnotatorTypes"], [439, 2, 1, "", "numHashTables"], [439, 2, 1, "", "numberOfNeighbours"], [439, 2, 1, "", "outputAnnotatorType"], [439, 3, 1, "", "setAggregationMethod"], [439, 3, 1, "", "setBucketLength"], [439, 3, 1, "", "setIdentityRanking"], [439, 3, 1, "", "setNumHashTables"], [439, 3, 1, "", "setNumberOfNeighbours"], [439, 3, 1, "", "setSimilarityMethod"], [439, 3, 1, "", "setVisibleDistances"], [439, 2, 1, "", "similarityMethod"], [439, 2, 1, "", "visibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[439, 2, 1, "", "extractNearestNeighbor"], [439, 3, 1, "", "getInputCols"], [439, 3, 1, "", "getOutputCols"], [439, 2, 1, "", "inputCols"], [439, 2, 1, "", "name"], [439, 2, 1, "", "outputCols"], [439, 3, 1, "", "setExtractNearestNeighbor"], [439, 3, 1, "", "setInputCols"], [439, 3, 1, "", "setOutputCols"], [439, 3, 1, "", "setParams"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel": [[439, 2, 1, "", "inputAnnotatorTypes"], [439, 2, 1, "", "name"], [439, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.spell_check": [[441, 0, 0, "-", "context_spell_checker"], [443, 0, 0, "-", "norvig_sweeting"], [444, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[441, 1, 1, "", "ContextSpellCheckerApproach"], [441, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[441, 3, 1, "", "addRegexClass"], [441, 3, 1, "", "addVocabClass"], [441, 2, 1, "", "batchSize"], [441, 2, 1, "", "caseStrategy"], [441, 2, 1, "", "classCount"], [441, 2, 1, "", "compoundCount"], [441, 2, 1, "", "configProtoBytes"], [441, 2, 1, "", "epochs"], [441, 2, 1, "", "errorThreshold"], [441, 2, 1, "", "finalRate"], [441, 2, 1, "", "graphFolder"], [441, 2, 1, "", "initialRate"], [441, 2, 1, "", "inputAnnotatorTypes"], [441, 2, 1, "", "languageModelClasses"], [441, 2, 1, "", "maxCandidates"], [441, 2, 1, "", "maxSentLen"], [441, 2, 1, "", "maxWindowLen"], [441, 2, 1, "", "minCount"], [441, 2, 1, "", "name"], [441, 2, 1, "", "outputAnnotatorType"], [441, 3, 1, "", "setBatchSize"], [441, 3, 1, "", "setCaseStrategy"], [441, 3, 1, "", "setClassCount"], [441, 3, 1, "", "setCompoundCount"], [441, 3, 1, "", "setConfigProtoBytes"], [441, 3, 1, "", "setEpochs"], [441, 3, 1, "", "setErrorThreshold"], [441, 3, 1, "", "setFinalRate"], [441, 3, 1, "", "setGraphFolder"], [441, 3, 1, "", "setInitialRate"], [441, 3, 1, "", "setLanguageModelClasses"], [441, 3, 1, "", "setMaxCandidates"], [441, 3, 1, "", "setMaxSentLen"], [441, 3, 1, "", "setMaxWindowLen"], [441, 3, 1, "", "setMinCount"], [441, 3, 1, "", "setTradeoff"], [441, 3, 1, "", "setValidationFraction"], [441, 3, 1, "", "setWeightedDistPath"], [441, 3, 1, "", "setWordMaxDistance"], [441, 2, 1, "", "tradeoff"], [441, 2, 1, "", "validationFraction"], [441, 2, 1, "", "weightedDistPath"], [441, 2, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[441, 2, 1, "", "caseStrategy"], [441, 2, 1, "", "classes"], [441, 2, 1, "", "compareLowcase"], [441, 2, 1, "", "configProtoBytes"], [441, 2, 1, "", "correctSymbols"], [441, 2, 1, "", "errorThreshold"], [441, 2, 1, "", "gamma"], [441, 3, 1, "", "getWordClasses"], [441, 2, 1, "", "idsVocab"], [441, 2, 1, "", "inputAnnotatorTypes"], [441, 2, 1, "", "maxCandidates"], [441, 2, 1, "", "maxWindowLen"], [441, 2, 1, "", "name"], [441, 2, 1, "", "outputAnnotatorType"], [441, 3, 1, "", "pretrained"], [441, 3, 1, "", "setCaseStrategy"], [441, 3, 1, "", "setClasses"], [441, 3, 1, "", "setCompareLowcase"], [441, 3, 1, "", "setConfigProtoBytes"], [441, 3, 1, "", "setCorrectSymbols"], [441, 3, 1, "", "setErrorThreshold"], [441, 3, 1, "", "setGamma"], [441, 3, 1, "", "setIdsVocab"], [441, 3, 1, "", "setMaxCandidates"], [441, 3, 1, "", "setMaxWindowLen"], [441, 3, 1, "", "setTradeoff"], [441, 3, 1, "", "setVocabFreq"], [441, 3, 1, "", "setVocabIds"], [441, 3, 1, "", "setWeights"], [441, 3, 1, "", "setWordMaxDistance"], [441, 2, 1, "", "tradeoff"], [441, 3, 1, "", "updateRegexClass"], [441, 3, 1, "", "updateVocabClass"], [441, 2, 1, "", "vocabFreq"], [441, 2, 1, "", "vocabIds"], [441, 2, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[443, 1, 1, "", "NorvigSweetingApproach"], [443, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[443, 2, 1, "", "caseSensitive"], [443, 2, 1, "", "dictionary"], [443, 2, 1, "", "dictionary_path"], [443, 2, 1, "", "doubleVariants"], [443, 2, 1, "", "dupsLimit"], [443, 2, 1, "", "frequencyPriority"], [443, 2, 1, "", "inputAnnotatorTypes"], [443, 2, 1, "", "intersections"], [443, 2, 1, "", "outputAnnotatorType"], [443, 2, 1, "", "reductLimit"], [443, 3, 1, "", "setCaseSensitive"], [443, 3, 1, "", "setDictionary"], [443, 3, 1, "", "setDoubleVariants"], [443, 3, 1, "", "setFrequencyPriority"], [443, 3, 1, "", "setShortCircuit"], [443, 2, 1, "", "shortCircuit"], [443, 2, 1, "", "vowelSwapLimit"], [443, 2, 1, "", "wordSizeIgnore"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[443, 2, 1, "", "inputAnnotatorTypes"], [443, 2, 1, "", "name"], [443, 2, 1, "", "outputAnnotatorType"], [443, 3, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[444, 1, 1, "", "SymmetricDeleteApproach"], [444, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[444, 2, 1, "", "corpus"], [444, 2, 1, "", "deletesThreshold"], [444, 2, 1, "", "dictionary"], [444, 2, 1, "", "dictionary_path"], [444, 2, 1, "", "dupsLimit"], [444, 2, 1, "", "frequencyThreshold"], [444, 2, 1, "", "inputAnnotatorTypes"], [444, 2, 1, "", "maxEditDistance"], [444, 2, 1, "", "outputAnnotatorType"], [444, 3, 1, "", "setDeletesThreshold"], [444, 3, 1, "", "setDictionary"], [444, 3, 1, "", "setFrequencyThreshold"], [444, 3, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[444, 2, 1, "", "inputAnnotatorTypes"], [444, 2, 1, "", "name"], [444, 2, 1, "", "outputAnnotatorType"], [444, 3, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[445, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stemmer.Stemmer": [[445, 2, 1, "", "inputAnnotatorTypes"], [445, 2, 1, "", "language"], [445, 2, 1, "", "name"], [445, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.stop_words_cleaner": [[446, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[446, 2, 1, "", "caseSensitive"], [446, 2, 1, "", "inputAnnotatorTypes"], [446, 3, 1, "", "loadDefaultStopWords"], [446, 2, 1, "", "locale"], [446, 2, 1, "", "name"], [446, 2, 1, "", "outputAnnotatorType"], [446, 3, 1, "", "pretrained"], [446, 3, 1, "", "setCaseSensitive"], [446, 3, 1, "", "setLocale"], [446, 3, 1, "", "setStopWords"], [446, 2, 1, "", "stopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[447, 1, 1, "", "TFNerDLGraphBuilder"], [447, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[447, 3, 1, "", "getGraphFile"], [447, 3, 1, "", "getGraphFolder"], [447, 3, 1, "", "getHiddenUnitsNumber"], [447, 3, 1, "", "getInputCols"], [447, 3, 1, "", "getLabelColumn"], [447, 2, 1, "", "graphFile"], [447, 2, 1, "", "graphFolder"], [447, 2, 1, "", "hiddenUnitsNumber"], [447, 2, 1, "", "inputAnnotatorTypes"], [447, 2, 1, "", "inputCols"], [447, 3, 1, "", "inputColsValidation"], [447, 2, 1, "", "labelColumn"], [447, 3, 1, "", "setGraphFile"], [447, 3, 1, "", "setGraphFolder"], [447, 3, 1, "", "setHiddenUnitsNumber"], [447, 3, 1, "", "setInputCols"], [447, 3, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[448, 0, 0, "-", "chunk_tokenizer"], [450, 0, 0, "-", "recursive_tokenizer"], [451, 0, 0, "-", "regex_tokenizer"], [452, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[448, 1, 1, "", "ChunkTokenizer"], [448, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer": [[448, 2, 1, "", "inputAnnotatorTypes"], [448, 2, 1, "", "name"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel": [[448, 2, 1, "", "inputAnnotatorTypes"], [448, 2, 1, "", "name"]], "sparknlp.annotator.token.recursive_tokenizer": [[450, 1, 1, "", "RecursiveTokenizer"], [450, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[450, 2, 1, "", "infixes"], [450, 2, 1, "", "inputAnnotatorTypes"], [450, 2, 1, "", "name"], [450, 2, 1, "", "outputAnnotatorType"], [450, 2, 1, "", "prefixes"], [450, 3, 1, "", "setInfixes"], [450, 3, 1, "", "setPrefixes"], [450, 3, 1, "", "setSuffixes"], [450, 3, 1, "", "setWhitelist"], [450, 2, 1, "", "suffixes"], [450, 2, 1, "", "whitelist"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel": [[450, 2, 1, "", "inputAnnotatorTypes"], [450, 2, 1, "", "name"], [450, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.token.regex_tokenizer": [[451, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[451, 2, 1, "", "inputAnnotatorTypes"], [451, 2, 1, "", "maxLength"], [451, 2, 1, "", "minLength"], [451, 2, 1, "", "name"], [451, 2, 1, "", "outputAnnotatorType"], [451, 2, 1, "", "pattern"], [451, 2, 1, "", "positionalMask"], [451, 2, 1, "", "preservePosition"], [451, 3, 1, "", "setMaxLength"], [451, 3, 1, "", "setMinLength"], [451, 3, 1, "", "setPattern"], [451, 3, 1, "", "setPositionalMask"], [451, 3, 1, "", "setPreservePosition"], [451, 3, 1, "", "setToLowercase"], [451, 3, 1, "", "setTrimWhitespace"], [451, 2, 1, "", "toLowercase"], [451, 2, 1, "", "trimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[452, 1, 1, "", "Tokenizer"], [452, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[452, 3, 1, "", "addContextChars"], [452, 3, 1, "", "addException"], [452, 3, 1, "", "addInfixPattern"], [452, 3, 1, "", "addSplitChars"], [452, 2, 1, "", "caseSensitiveExceptions"], [452, 2, 1, "", "contextChars"], [452, 2, 1, "", "exceptions"], [452, 2, 1, "", "exceptionsPath"], [452, 3, 1, "", "getCaseSensitiveExceptions"], [452, 3, 1, "", "getContextChars"], [452, 3, 1, "", "getExceptions"], [452, 3, 1, "", "getInfixPatterns"], [452, 3, 1, "", "getPrefixPattern"], [452, 3, 1, "", "getSplitChars"], [452, 3, 1, "", "getSuffixPattern"], [452, 2, 1, "", "infixPatterns"], [452, 2, 1, "", "inputAnnotatorTypes"], [452, 2, 1, "", "maxLength"], [452, 2, 1, "", "minLength"], [452, 2, 1, "", "name"], [452, 2, 1, "", "outputAnnotatorType"], [452, 2, 1, "", "prefixPattern"], [452, 3, 1, "", "setCaseSensitiveExceptions"], [452, 3, 1, "", "setContextChars"], [452, 3, 1, "", "setExceptions"], [452, 3, 1, "", "setExceptionsPath"], [452, 3, 1, "", "setInfixPatterns"], [452, 3, 1, "", "setMaxLength"], [452, 3, 1, "", "setMinLength"], [452, 3, 1, "", "setPrefixPattern"], [452, 3, 1, "", "setSplitChars"], [452, 3, 1, "", "setSplitPattern"], [452, 3, 1, "", "setSuffixPattern"], [452, 3, 1, "", "setTargetPattern"], [452, 2, 1, "", "splitChars"], [452, 2, 1, "", "splitPattern"], [452, 2, 1, "", "suffixPattern"], [452, 2, 1, "", "targetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[452, 3, 1, "", "addSplitChars"], [452, 2, 1, "", "caseSensitiveExceptions"], [452, 2, 1, "", "exceptions"], [452, 2, 1, "", "inputAnnotatorTypes"], [452, 2, 1, "", "name"], [452, 2, 1, "", "outputAnnotatorType"], [452, 3, 1, "", "pretrained"], [452, 2, 1, "", "rules"], [452, 3, 1, "", "setSplitChars"], [452, 3, 1, "", "setSplitPattern"], [452, 2, 1, "", "splitChars"], [452, 2, 1, "", "splitPattern"], [452, 2, 1, "", "targetPattern"]], "sparknlp.annotator.token2_chunk": [[453, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.token2_chunk.Token2Chunk": [[453, 2, 1, "", "inputAnnotatorTypes"], [453, 2, 1, "", "name"], [453, 2, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.ws": [[455, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[455, 1, 1, "", "WordSegmenterApproach"], [455, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[455, 2, 1, "", "ambiguityThreshold"], [455, 2, 1, "", "enableRegexTokenizer"], [455, 2, 1, "", "frequencyThreshold"], [455, 3, 1, "", "getAmbiguityThreshold"], [455, 3, 1, "", "getFrequencyThreshold"], [455, 3, 1, "", "getNIterations"], [455, 2, 1, "", "inputAnnotatorTypes"], [455, 2, 1, "", "nIterations"], [455, 2, 1, "", "name"], [455, 2, 1, "", "outputAnnotatorType"], [455, 2, 1, "", "pattern"], [455, 2, 1, "", "posCol"], [455, 3, 1, "", "setAmbiguityThreshold"], [455, 3, 1, "", "setEnableRegexTokenizer"], [455, 3, 1, "", "setFrequencyThreshold"], [455, 3, 1, "", "setNIterations"], [455, 3, 1, "", "setPattern"], [455, 3, 1, "", "setPosColumn"], [455, 3, 1, "", "setToLowercase"], [455, 2, 1, "", "toLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[455, 2, 1, "", "enableRegexTokenizer"], [455, 2, 1, "", "inputAnnotatorTypes"], [455, 2, 1, "", "name"], [455, 2, 1, "", "outputAnnotatorType"], [455, 2, 1, "", "pattern"], [455, 3, 1, "", "pretrained"], [455, 3, 1, "", "setEnableRegexTokenizer"], [455, 3, 1, "", "setPattern"], [455, 3, 1, "", "setToLowercase"], [455, 2, 1, "", "toLowercase"]], "sparknlp.base": [[456, 0, 0, "-", "audio_assembler"], [457, 0, 0, "-", "doc2_chunk"], [458, 0, 0, "-", "document_assembler"], [459, 0, 0, "-", "embeddings_finisher"], [460, 0, 0, "-", "finisher"], [461, 0, 0, "-", "gguf_ranking_finisher"], [462, 0, 0, "-", "graph_finisher"], [463, 0, 0, "-", "has_recursive_fit"], [464, 0, 0, "-", "has_recursive_transform"], [465, 0, 0, "-", "image_assembler"], [467, 0, 0, "-", "light_pipeline"], [468, 0, 0, "-", "multi_document_assembler"], [469, 0, 0, "-", "prompt_assembler"], [470, 0, 0, "-", "recursive_pipeline"], [471, 0, 0, "-", "table_assembler"], [472, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[456, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[456, 3, 1, "", "getOutputCol"], [456, 2, 1, "", "inputCol"], [456, 2, 1, "", "name"], [456, 2, 1, "", "outputAnnotatorType"], [456, 2, 1, "", "outputCol"], [456, 3, 1, "", "setInputCol"], [456, 3, 1, "", "setOutputCol"], [456, 3, 1, "", "setParams"]], "sparknlp.base.doc2_chunk": [[457, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[457, 2, 1, "", "chunkCol"], [457, 2, 1, "", "failOnMissing"], [457, 2, 1, "", "inputAnnotatorTypes"], [457, 2, 1, "", "isArray"], [457, 2, 1, "", "lowerCase"], [457, 2, 1, "", "name"], [457, 2, 1, "", "outputAnnotatorType"], [457, 3, 1, "", "setChunkCol"], [457, 3, 1, "", "setFailOnMissing"], [457, 3, 1, "", "setIsArray"], [457, 3, 1, "", "setLowerCase"], [457, 3, 1, "", "setParams"], [457, 3, 1, "", "setStartCol"], [457, 3, 1, "", "setStartColByTokenIndex"], [457, 2, 1, "", "startCol"], [457, 2, 1, "", "startColByTokenIndex"]], "sparknlp.base.document_assembler": [[458, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[458, 2, 1, "", "cleanupMode"], [458, 3, 1, "", "getOutputCol"], [458, 2, 1, "", "idCol"], [458, 2, 1, "", "inputCol"], [458, 2, 1, "", "metadataCol"], [458, 2, 1, "", "name"], [458, 2, 1, "", "outputAnnotatorType"], [458, 2, 1, "", "outputCol"], [458, 3, 1, "", "setCleanupMode"], [458, 3, 1, "", "setIdCol"], [458, 3, 1, "", "setInputCol"], [458, 3, 1, "", "setMetadataCol"], [458, 3, 1, "", "setOutputCol"], [458, 3, 1, "", "setParams"]], "sparknlp.base.embeddings_finisher": [[459, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[459, 2, 1, "", "cleanAnnotations"], [459, 3, 1, "", "getInputCols"], [459, 3, 1, "", "getOutputCols"], [459, 2, 1, "", "inputCols"], [459, 2, 1, "", "name"], [459, 2, 1, "", "outputAsVector"], [459, 2, 1, "", "outputCols"], [459, 3, 1, "", "setCleanAnnotations"], [459, 3, 1, "", "setInputCols"], [459, 3, 1, "", "setOutputAsVector"], [459, 3, 1, "", "setOutputCols"], [459, 3, 1, "", "setParams"]], "sparknlp.base.finisher": [[460, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[460, 2, 1, "", "annotationSplitSymbol"], [460, 2, 1, "", "cleanAnnotations"], [460, 3, 1, "", "getInputCols"], [460, 3, 1, "", "getOutputCols"], [460, 2, 1, "", "includeMetadata"], [460, 2, 1, "", "inputCols"], [460, 2, 1, "", "name"], [460, 2, 1, "", "outputAsArray"], [460, 2, 1, "", "outputCols"], [460, 2, 1, "", "parseEmbeddingsVectors"], [460, 3, 1, "", "setAnnotationSplitSymbol"], [460, 3, 1, "", "setCleanAnnotations"], [460, 3, 1, "", "setIncludeMetadata"], [460, 3, 1, "", "setInputCols"], [460, 3, 1, "", "setOutputAsArray"], [460, 3, 1, "", "setOutputCols"], [460, 3, 1, "", "setParams"], [460, 3, 1, "", "setParseEmbeddingsVectors"], [460, 3, 1, "", "setValueSplitSymbol"], [460, 2, 1, "", "valueSplitSymbol"]], "sparknlp.base.gguf_ranking_finisher": [[461, 1, 1, "", "GGUFRankingFinisher"]], "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher": [[461, 3, 1, "", "getInputCols"], [461, 3, 1, "", "getMinMaxScaling"], [461, 3, 1, "", "getMinRelevanceScore"], [461, 3, 1, "", "getOutputCol"], [461, 3, 1, "", "getTopK"], [461, 2, 1, "", "inputCols"], [461, 2, 1, "", "minMaxScaling"], [461, 2, 1, "", "minRelevanceScore"], [461, 2, 1, "", "name"], [461, 2, 1, "", "outputCol"], [461, 3, 1, "", "setInputCols"], [461, 3, 1, "", "setMinMaxScaling"], [461, 3, 1, "", "setMinRelevanceScore"], [461, 3, 1, "", "setOutputCol"], [461, 3, 1, "", "setParams"], [461, 3, 1, "", "setTopK"], [461, 2, 1, "", "topK"]], "sparknlp.base.graph_finisher": [[462, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[462, 2, 1, "", "cleanAnnotations"], [462, 2, 1, "", "inputCol"], [462, 2, 1, "", "name"], [462, 2, 1, "", "outputAsArray"], [462, 2, 1, "", "outputCol"], [462, 3, 1, "", "setCleanAnnotations"], [462, 3, 1, "", "setInputCol"], [462, 3, 1, "", "setOutputAsArray"], [462, 3, 1, "", "setOutputCol"], [462, 3, 1, "", "setParams"]], "sparknlp.base.has_recursive_fit": [[463, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[464, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[465, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[465, 3, 1, "", "getOutputCol"], [465, 2, 1, "", "inputCol"], [465, 3, 1, "", "loadImagesAsBytes"], [465, 2, 1, "", "name"], [465, 2, 1, "", "outputAnnotatorType"], [465, 2, 1, "", "outputCol"], [465, 3, 1, "", "setInputCol"], [465, 3, 1, "", "setOutputCol"], [465, 3, 1, "", "setParams"], [465, 3, 1, "", "setTextCol"], [465, 2, 1, "", "textCol"]], "sparknlp.base.light_pipeline": [[467, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[467, 3, 1, "", "annotate"], [467, 3, 1, "", "fullAnnotate"], [467, 3, 1, "", "fullAnnotateImage"], [467, 3, 1, "", "getIgnoreUnsupported"], [467, 2, 1, "", "parse_embeddings"], [467, 2, 1, "", "pipeline_model"], [467, 3, 1, "", "setIgnoreUnsupported"], [467, 3, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[468, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[468, 2, 1, "", "cleanupMode"], [468, 3, 1, "", "getOutputCols"], [468, 2, 1, "", "idCol"], [468, 2, 1, "", "inputCols"], [468, 2, 1, "", "metadataCol"], [468, 2, 1, "", "name"], [468, 2, 1, "", "outputAnnotatorType"], [468, 2, 1, "", "outputCols"], [468, 3, 1, "", "setCleanupMode"], [468, 3, 1, "", "setIdCol"], [468, 3, 1, "", "setInputCols"], [468, 3, 1, "", "setMetadataCol"], [468, 3, 1, "", "setOutputCols"], [468, 3, 1, "", "setParams"]], "sparknlp.base.prompt_assembler": [[469, 1, 1, "", "PromptAssembler"]], "sparknlp.base.prompt_assembler.PromptAssembler": [[469, 2, 1, "", "addAssistant"], [469, 2, 1, "", "chatTemplate"], [469, 2, 1, "", "inputCol"], [469, 2, 1, "", "name"], [469, 2, 1, "", "outputAnnotatorType"], [469, 2, 1, "", "outputCol"], [469, 3, 1, "", "setAddAssistant"], [469, 3, 1, "", "setChatTemplate"], [469, 3, 1, "", "setInputCol"], [469, 3, 1, "", "setOutputCol"], [469, 3, 1, "", "setParams"]], "sparknlp.base.recursive_pipeline": [[470, 1, 1, "", "RecursivePipeline"], [470, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline.RecursivePipelineModel": [[470, 2, 1, "", "stages"]], "sparknlp.base.table_assembler": [[471, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[471, 2, 1, "", "csvDelimiter"], [471, 2, 1, "", "escapeCsvDelimiter"], [471, 2, 1, "", "inputAnnotatorTypes"], [471, 2, 1, "", "inputFormat"], [471, 2, 1, "", "name"], [471, 2, 1, "", "outputAnnotatorType"], [471, 3, 1, "", "setCsvDelimiter"], [471, 3, 1, "", "setEscapeCsvDelimiter"], [471, 3, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[472, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[472, 2, 1, "", "inputAnnotatorTypes"], [472, 2, 1, "", "name"], [472, 2, 1, "", "outputAnnotatorType"], [472, 2, 1, "", "preservePosition"], [472, 3, 1, "", "setParams"], [472, 3, 1, "", "setPreservePosition"]], "sparknlp.common": [[473, 0, 0, "-", "annotator_approach"], [474, 0, 0, "-", "annotator_model"], [475, 0, 0, "-", "annotator_properties"], [476, 0, 0, "-", "annotator_type"], [477, 0, 0, "-", "coverage_result"], [479, 0, 0, "-", "match_strategy"], [480, 0, 0, "-", "properties"], [481, 0, 0, "-", "read_as"], [482, 0, 0, "-", "recursive_annotator_approach"], [483, 0, 0, "-", "storage"], [484, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[473, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[474, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_model.AnnotatorModel": [[474, 3, 1, "", "setParams"]], "sparknlp.common.annotator_properties": [[475, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[475, 3, 1, "", "getInputCols"], [475, 3, 1, "", "getLazyAnnotator"], [475, 3, 1, "", "getOutputCol"], [475, 2, 1, "", "inputAnnotatorTypes"], [475, 2, 1, "", "inputCols"], [475, 3, 1, "", "inputColsValidation"], [475, 2, 1, "", "lazyAnnotator"], [475, 2, 1, "", "optionalInputAnnotatorTypes"], [475, 2, 1, "", "outputAnnotatorType"], [475, 2, 1, "", "outputCol"], [475, 3, 1, "", "setInputCols"], [475, 3, 1, "", "setLazyAnnotator"], [475, 3, 1, "", "setOutputCol"]], "sparknlp.common.annotator_type": [[476, 1, 1, "", "AnnotatorType"]], "sparknlp.common.annotator_type.AnnotatorType": [[476, 2, 1, "", "AUDIO"], [476, 2, 1, "", "CATEGORY"], [476, 2, 1, "", "CHUNK"], [476, 2, 1, "", "DATE"], [476, 2, 1, "", "DEPENDENCY"], [476, 2, 1, "", "DOCUMENT"], [476, 2, 1, "", "DOC_SIMILARITY_RANKINGS"], [476, 2, 1, "", "DUMMY"], [476, 2, 1, "", "ENTITY"], [476, 2, 1, "", "IMAGE"], [476, 2, 1, "", "LABELED_DEPENDENCY"], [476, 2, 1, "", "LANGUAGE"], [476, 2, 1, "", "NAMED_ENTITY"], [476, 2, 1, "", "NEGEX"], [476, 2, 1, "", "NODE"], [476, 2, 1, "", "POS"], [476, 2, 1, "", "SENTENCE_EMBEDDINGS"], [476, 2, 1, "", "SENTIMENT"], [476, 2, 1, "", "TABLE"], [476, 2, 1, "", "TOKEN"], [476, 2, 1, "", "WORDPIECE"], [476, 2, 1, "", "WORD_EMBEDDINGS"]], "sparknlp.common.coverage_result": [[477, 1, 1, "", "CoverageResult"]], "sparknlp.common.coverage_result.CoverageResult": [[477, 2, 1, "", "covered"], [477, 2, 1, "", "percentage"], [477, 2, 1, "", "total"]], "sparknlp.common.match_strategy": [[479, 1, 1, "", "MatchStrategy"]], "sparknlp.common.match_strategy.MatchStrategy": [[479, 2, 1, "", "MATCH_ALL"], [479, 2, 1, "", "MATCH_COMPLETE"], [479, 2, 1, "", "MATCH_FIRST"]], "sparknlp.common.properties": [[480, 1, 1, "", "HasAudioFeatureProperties"], [480, 1, 1, "", "HasBatchedAnnotate"], [480, 1, 1, "", "HasBatchedAnnotateAudio"], [480, 1, 1, "", "HasBatchedAnnotateImage"], [480, 1, 1, "", "HasCandidateLabelsProperties"], [480, 1, 1, "", "HasCaseSensitiveProperties"], [480, 1, 1, "", "HasClassifierActivationProperties"], [480, 1, 1, "", "HasClsTokenProperties"], [480, 1, 1, "", "HasEmbeddingsProperties"], [480, 1, 1, "", "HasEnableCachingProperties"], [480, 1, 1, "", "HasEngine"], [480, 1, 1, "", "HasGeneratorProperties"], [480, 1, 1, "", "HasImageFeatureProperties"], [480, 1, 1, "", "HasLlamaCppProperties"], [480, 1, 1, "", "HasLongMaxSentenceLengthLimit"], [480, 1, 1, "", "HasMaxSentenceLengthLimit"], [480, 1, 1, "", "HasRescaleFactor"]], "sparknlp.common.properties.HasAudioFeatureProperties": [[480, 2, 1, "", "doNormalize"], [480, 2, 1, "", "featureSize"], [480, 2, 1, "", "paddingSide"], [480, 2, 1, "", "paddingValue"], [480, 2, 1, "", "returnAttentionMask"], [480, 2, 1, "", "samplingRate"], [480, 3, 1, "", "setDoNormalize"], [480, 3, 1, "", "setFeatureSize"], [480, 3, 1, "", "setPaddingSide"], [480, 3, 1, "", "setPaddingValue"], [480, 3, 1, "", "setReturnAttentionMask"], [480, 3, 1, "", "setSamplingRate"]], "sparknlp.common.properties.HasBatchedAnnotate": [[480, 2, 1, "", "batchSize"], [480, 3, 1, "", "getBatchSize"], [480, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateAudio": [[480, 2, 1, "", "batchSize"], [480, 3, 1, "", "getBatchSize"], [480, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateImage": [[480, 2, 1, "", "batchSize"], [480, 3, 1, "", "getBatchSize"], [480, 3, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasCandidateLabelsProperties": [[480, 2, 1, "", "candidateLabels"], [480, 2, 1, "", "contradictionIdParam"], [480, 2, 1, "", "entailmentIdParam"], [480, 3, 1, "", "setCandidateLabels"], [480, 3, 1, "", "setContradictionIdParam"], [480, 3, 1, "", "setEntailmentIdParam"]], "sparknlp.common.properties.HasCaseSensitiveProperties": [[480, 2, 1, "", "caseSensitive"], [480, 3, 1, "", "getCaseSensitive"], [480, 3, 1, "", "setCaseSensitive"]], "sparknlp.common.properties.HasClassifierActivationProperties": [[480, 2, 1, "", "activation"], [480, 3, 1, "", "getActivation"], [480, 3, 1, "", "getMultilabel"], [480, 2, 1, "", "multilabel"], [480, 3, 1, "", "setActivation"], [480, 3, 1, "", "setMultilabel"], [480, 3, 1, "", "setThreshold"], [480, 2, 1, "", "threshold"]], "sparknlp.common.properties.HasClsTokenProperties": [[480, 3, 1, "", "getUseCLSToken"], [480, 3, 1, "", "setUseCLSToken"], [480, 2, 1, "", "useCLSToken"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[480, 2, 1, "", "dimension"], [480, 3, 1, "", "getDimension"], [480, 3, 1, "", "setDimension"]], "sparknlp.common.properties.HasEnableCachingProperties": [[480, 2, 1, "", "enableCaching"], [480, 3, 1, "", "getEnableCaching"], [480, 3, 1, "", "setEnableCaching"]], "sparknlp.common.properties.HasEngine": [[480, 2, 1, "", "engine"], [480, 3, 1, "", "getEngine"]], "sparknlp.common.properties.HasGeneratorProperties": [[480, 2, 1, "", "beamSize"], [480, 2, 1, "", "doSample"], [480, 2, 1, "", "maxOutputLength"], [480, 2, 1, "", "minOutputLength"], [480, 2, 1, "", "nReturnSequences"], [480, 2, 1, "", "noRepeatNgramSize"], [480, 2, 1, "", "repetitionPenalty"], [480, 3, 1, "", "setBeamSize"], [480, 3, 1, "", "setDoSample"], [480, 3, 1, "", "setMaxOutputLength"], [480, 3, 1, "", "setMinOutputLength"], [480, 3, 1, "", "setNReturnSequences"], [480, 3, 1, "", "setNoRepeatNgramSize"], [480, 3, 1, "", "setRepetitionPenalty"], [480, 3, 1, "", "setTask"], [480, 3, 1, "", "setTemperature"], [480, 3, 1, "", "setTopK"], [480, 3, 1, "", "setTopP"], [480, 2, 1, "", "task"], [480, 2, 1, "", "temperature"], [480, 2, 1, "", "topK"], [480, 2, 1, "", "topP"]], "sparknlp.common.properties.HasImageFeatureProperties": [[480, 2, 1, "", "doNormalize"], [480, 2, 1, "", "doResize"], [480, 2, 1, "", "featureExtractorType"], [480, 2, 1, "", "imageMean"], [480, 2, 1, "", "imageStd"], [480, 2, 1, "", "resample"], [480, 3, 1, "", "setDoNormalize"], [480, 3, 1, "", "setDoResize"], [480, 3, 1, "", "setFeatureExtractorType"], [480, 3, 1, "", "setImageMean"], [480, 3, 1, "", "setImageStd"], [480, 3, 1, "", "setResample"], [480, 3, 1, "", "setSize"], [480, 2, 1, "", "size"]], "sparknlp.common.properties.HasLlamaCppProperties": [[480, 2, 1, "", "cachePrompt"], [480, 2, 1, "", "chatTemplate"], [480, 2, 1, "", "defragmentationThreshold"], [480, 2, 1, "", "disableLog"], [480, 2, 1, "", "disableTokenIds"], [480, 2, 1, "", "dynamicTemperatureExponent"], [480, 2, 1, "", "dynamicTemperatureRange"], [480, 2, 1, "", "embedding"], [480, 2, 1, "", "flashAttention"], [480, 2, 1, "", "frequencyPenalty"], [480, 3, 1, "", "getMetadata"], [480, 2, 1, "", "gpuSplitMode"], [480, 2, 1, "", "grammar"], [480, 2, 1, "", "ignoreEos"], [480, 2, 1, "", "inputPrefix"], [480, 2, 1, "", "inputSuffix"], [480, 2, 1, "", "logVerbosity"], [480, 2, 1, "", "mainGpu"], [480, 2, 1, "", "minKeep"], [480, 2, 1, "", "minP"], [480, 2, 1, "", "miroStat"], [480, 2, 1, "", "miroStatEta"], [480, 2, 1, "", "miroStatTau"], [480, 2, 1, "", "modelAlias"], [480, 2, 1, "", "modelDraft"], [480, 2, 1, "", "nBatch"], [480, 2, 1, "", "nCtx"], [480, 2, 1, "", "nDraft"], [480, 2, 1, "", "nGpuLayers"], [480, 2, 1, "", "nGpuLayersDraft"], [480, 2, 1, "", "nKeep"], [480, 2, 1, "", "nPredict"], [480, 2, 1, "", "nProbs"], [480, 2, 1, "", "nThreads"], [480, 2, 1, "", "nThreadsBatch"], [480, 2, 1, "", "nUbatch"], [480, 2, 1, "", "noKvOffload"], [480, 2, 1, "", "numaStrategy"], [480, 2, 1, "", "penalizeNl"], [480, 2, 1, "", "penaltyPrompt"], [480, 2, 1, "", "poolingType"], [480, 2, 1, "", "presencePenalty"], [480, 2, 1, "", "repeatLastN"], [480, 2, 1, "", "repeatPenalty"], [480, 2, 1, "", "ropeFreqBase"], [480, 2, 1, "", "ropeFreqScale"], [480, 2, 1, "", "ropeScalingType"], [480, 2, 1, "", "samplers"], [480, 2, 1, "", "seed"], [480, 3, 1, "", "setCachePrompt"], [480, 3, 1, "", "setChatTemplate"], [480, 3, 1, "", "setDefragmentationThreshold"], [480, 3, 1, "", "setDisableLog"], [480, 3, 1, "", "setDisableTokenIds"], [480, 3, 1, "", "setDynamicTemperatureExponent"], [480, 3, 1, "", "setDynamicTemperatureRange"], [480, 3, 1, "", "setFlashAttention"], [480, 3, 1, "", "setFrequencyPenalty"], [480, 3, 1, "", "setGpuSplitMode"], [480, 3, 1, "", "setGrammar"], [480, 3, 1, "", "setIgnoreEos"], [480, 3, 1, "", "setInputPrefix"], [480, 3, 1, "", "setInputSuffix"], [480, 3, 1, "", "setLogVerbosity"], [480, 3, 1, "", "setMainGpu"], [480, 3, 1, "", "setMinKeep"], [480, 3, 1, "", "setMinP"], [480, 3, 1, "", "setMiroStat"], [480, 3, 1, "", "setMiroStatEta"], [480, 3, 1, "", "setMiroStatTau"], [480, 3, 1, "", "setModelAlias"], [480, 3, 1, "", "setModelDraft"], [480, 3, 1, "", "setNBatch"], [480, 3, 1, "", "setNCtx"], [480, 3, 1, "", "setNDraft"], [480, 3, 1, "", "setNGpuLayers"], [480, 3, 1, "", "setNGpuLayersDraft"], [480, 3, 1, "", "setNKeep"], [480, 3, 1, "", "setNParallel"], [480, 3, 1, "", "setNPredict"], [480, 3, 1, "", "setNProbs"], [480, 3, 1, "", "setNThreads"], [480, 3, 1, "", "setNThreadsBatch"], [480, 3, 1, "", "setNUbatch"], [480, 3, 1, "", "setNoKvOffload"], [480, 3, 1, "", "setNumaStrategy"], [480, 3, 1, "", "setPenalizeNl"], [480, 3, 1, "", "setPenaltyPrompt"], [480, 3, 1, "", "setPoolingType"], [480, 3, 1, "", "setPresencePenalty"], [480, 3, 1, "", "setRepeatLastN"], [480, 3, 1, "", "setRepeatPenalty"], [480, 3, 1, "", "setRopeFreqBase"], [480, 3, 1, "", "setRopeFreqScale"], [480, 3, 1, "", "setRopeScalingType"], [480, 3, 1, "", "setSamplers"], [480, 3, 1, "", "setSeed"], [480, 3, 1, "", "setStopStrings"], [480, 3, 1, "", "setSystemPrompt"], [480, 3, 1, "", "setTemperature"], [480, 3, 1, "", "setTfsZ"], [480, 3, 1, "", "setTokenBias"], [480, 3, 1, "", "setTokenIdBias"], [480, 3, 1, "", "setTopK"], [480, 3, 1, "", "setTopP"], [480, 3, 1, "", "setTypicalP"], [480, 3, 1, "", "setUseChatTemplate"], [480, 3, 1, "", "setUseMlock"], [480, 3, 1, "", "setUseMmap"], [480, 3, 1, "", "setYarnAttnFactor"], [480, 3, 1, "", "setYarnBetaFast"], [480, 3, 1, "", "setYarnBetaSlow"], [480, 3, 1, "", "setYarnExtFactor"], [480, 3, 1, "", "setYarnOrigCtx"], [480, 2, 1, "", "stopStrings"], [480, 2, 1, "", "systemPrompt"], [480, 2, 1, "", "temperature"], [480, 2, 1, "", "tfsZ"], [480, 2, 1, "", "topK"], [480, 2, 1, "", "topP"], [480, 2, 1, "", "typicalP"], [480, 2, 1, "", "useChatTemplate"], [480, 2, 1, "", "useMlock"], [480, 2, 1, "", "useMmap"], [480, 2, 1, "", "yarnAttnFactor"], [480, 2, 1, "", "yarnBetaFast"], [480, 2, 1, "", "yarnBetaSlow"], [480, 2, 1, "", "yarnExtFactor"], [480, 2, 1, "", "yarnOrigCtx"]], "sparknlp.common.properties.HasLongMaxSentenceLengthLimit": [[480, 2, 1, "", "max_length_limit"]], "sparknlp.common.properties.HasMaxSentenceLengthLimit": [[480, 3, 1, "", "getMaxSentenceLength"], [480, 2, 1, "", "maxSentenceLength"], [480, 2, 1, "", "max_length_limit"], [480, 3, 1, "", "setMaxSentenceLength"]], "sparknlp.common.properties.HasRescaleFactor": [[480, 2, 1, "", "doRescale"], [480, 2, 1, "", "rescaleFactor"], [480, 3, 1, "", "setDoRescale"], [480, 3, 1, "", "setRescaleFactor"]], "sparknlp.common.read_as": [[481, 1, 1, "", "ReadAs"]], "sparknlp.common.read_as.ReadAs": [[481, 2, 1, "", "BINARY"], [481, 2, 1, "", "SPARK"], [481, 2, 1, "", "TEXT"]], "sparknlp.common.recursive_annotator_approach": [[482, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.storage": [[483, 1, 1, "", "HasStorage"], [483, 1, 1, "", "HasStorageModel"], [483, 1, 1, "", "HasStorageOptions"], [483, 1, 1, "", "HasStorageRef"]], "sparknlp.common.storage.HasStorage": [[483, 3, 1, "", "getStoragePath"], [483, 3, 1, "", "setStoragePath"], [483, 2, 1, "", "storagePath"]], "sparknlp.common.storage.HasStorageModel": [[483, 3, 1, "", "loadStorage"], [483, 3, 1, "", "loadStorages"], [483, 3, 1, "", "saveStorage"]], "sparknlp.common.storage.HasStorageOptions": [[483, 2, 1, "", "enableInMemoryStorage"], [483, 3, 1, "", "getEnableInMemoryStorage"], [483, 3, 1, "", "getIncludeStorage"], [483, 2, 1, "", "includeStorage"], [483, 3, 1, "", "setEnableInMemoryStorage"], [483, 3, 1, "", "setIncludeStorage"]], "sparknlp.common.storage.HasStorageRef": [[483, 3, 1, "", "getStorageRef"], [483, 3, 1, "", "setStorageRef"], [483, 2, 1, "", "storageRef"]], "sparknlp.common.utils": [[484, 5, 1, "", "ExternalResource"], [484, 5, 1, "", "RegexRule"]], "sparknlp.functions": [[485, 5, 1, "", "explode_annotations_col"], [485, 5, 1, "", "filter_by_annotations_col"], [485, 5, 1, "", "map_annotations"], [485, 5, 1, "", "map_annotations_array"], [485, 5, 1, "", "map_annotations_col"], [485, 5, 1, "", "map_annotations_cols"], [485, 5, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[487, 0, 0, "-", "annotator_java_ml"], [488, 0, 0, "-", "annotator_transformer"], [489, 0, 0, "-", "extended_java_wrapper"], [491, 0, 0, "-", "params_getters_setters"], [492, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[487, 1, 1, "", "AnnotatorJavaMLReadable"], [487, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[487, 3, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[488, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer.AnnotatorTransformer": [[488, 2, 1, "", "outputAnnotatorType"]], "sparknlp.internal.extended_java_wrapper": [[489, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[489, 3, 1, "", "apply"], [489, 3, 1, "", "getDataFrame"], [489, 2, 1, "", "java_obj"], [489, 3, 1, "", "new_java_array"], [489, 3, 1, "", "new_java_array_integer"], [489, 3, 1, "", "new_java_array_string"], [489, 3, 1, "", "new_java_obj"], [489, 2, 1, "", "sc"], [489, 3, 1, "", "spark_version"]], "sparknlp.internal.params_getters_setters": [[491, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[491, 3, 1, "", "getParamValue"], [491, 2, 1, "", "getter_attrs"], [491, 3, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[492, 1, 1, "", "RecursiveEstimator"], [492, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[492, 3, 1, "", "fit"]], "sparknlp.internal.recursive.RecursiveTransformer": [[492, 3, 1, "", "transform_recursive"]], "sparknlp.logging": [[493, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[493, 1, 1, "", "CometLogger"], [493, 4, 1, "", "comet_ml"]], "sparknlp.logging.comet.CometLogger": [[493, 2, 1, "", "comet_mode"], [493, 3, 1, "", "end"], [493, 2, 1, "", "experiment"], [493, 2, 1, "", "experiment_id"], [493, 2, 1, "", "experiment_kwargs"], [493, 3, 1, "", "log_asset"], [493, 3, 1, "", "log_asset_data"], [493, 3, 1, "", "log_completed_run"], [493, 3, 1, "", "log_metrics"], [493, 3, 1, "", "log_parameters"], [493, 3, 1, "", "log_pipeline_parameters"], [493, 3, 1, "", "log_visualization"], [493, 3, 1, "", "monitor"], [493, 2, 1, "", "project_name"], [493, 2, 1, "", "thread"], [493, 2, 1, "", "workspace"]], "sparknlp.partition": [[496, 0, 0, "-", "partition"], [497, 0, 0, "-", "partition_properties"], [498, 0, 0, "-", "partition_transformer"]], "sparknlp.partition.partition": [[496, 1, 1, "", "Partition"]], "sparknlp.partition.partition.Partition": [[496, 3, 1, "", "partition"], [496, 3, 1, "", "partition_text"], [496, 3, 1, "", "partition_urls"], [496, 2, 1, "", "spark"]], "sparknlp.partition.partition_properties": [[497, 1, 1, "", "HasChunkerProperties"], [497, 1, 1, "", "HasEmailReaderProperties"], [497, 1, 1, "", "HasExcelReaderProperties"], [497, 1, 1, "", "HasHTMLReaderProperties"], [497, 1, 1, "", "HasPdfProperties"], [497, 1, 1, "", "HasPowerPointProperties"], [497, 1, 1, "", "HasReaderProperties"], [497, 1, 1, "", "HasTextReaderProperties"]], "sparknlp.partition.partition_properties.HasChunkerProperties": [[497, 2, 1, "", "chunkingStrategy"], [497, 2, 1, "", "combineTextUnderNChars"], [497, 2, 1, "", "maxCharacters"], [497, 2, 1, "", "newAfterNChars"], [497, 2, 1, "", "overlap"], [497, 2, 1, "", "overlapAll"], [497, 3, 1, "", "setChunkingStrategy"], [497, 3, 1, "", "setCombineTextUnderNChars"], [497, 3, 1, "", "setMaxCharacters"], [497, 3, 1, "", "setNewAfterNChars"], [497, 3, 1, "", "setOverlap"], [497, 3, 1, "", "setOverlapAll"]], "sparknlp.partition.partition_properties.HasEmailReaderProperties": [[497, 2, 1, "", "addAttachmentContent"], [497, 3, 1, "", "getAddAttachmentContent"], [497, 3, 1, "", "setAddAttachmentContent"]], "sparknlp.partition.partition_properties.HasExcelReaderProperties": [[497, 2, 1, "", "appendCells"], [497, 2, 1, "", "cellSeparator"], [497, 3, 1, "", "getAppendCells"], [497, 3, 1, "", "getCellSeparator"], [497, 3, 1, "", "setAppendCells"], [497, 3, 1, "", "setCellSeparator"]], "sparknlp.partition.partition_properties.HasHTMLReaderProperties": [[497, 3, 1, "", "getTimeout"], [497, 2, 1, "", "outputFormat"], [497, 3, 1, "", "setHeaders"], [497, 3, 1, "", "setOutputFormat"], [497, 3, 1, "", "setTimeout"], [497, 2, 1, "", "timeout"]], "sparknlp.partition.partition_properties.HasPdfProperties": [[497, 2, 1, "", "extractCoordinates"], [497, 2, 1, "", "normalizeLigatures"], [497, 2, 1, "", "onlyPageNum"], [497, 2, 1, "", "originCol"], [497, 2, 1, "", "pageNumCol"], [497, 2, 1, "", "partitionNum"], [497, 2, 1, "", "readAsImage"], [497, 3, 1, "", "setExtractCoordinates"], [497, 3, 1, "", "setNormalizeLigatures"], [497, 3, 1, "", "setOnlyPageNum"], [497, 3, 1, "", "setOriginCol"], [497, 3, 1, "", "setOutputCol"], [497, 3, 1, "", "setPageNumCol"], [497, 3, 1, "", "setPartitionNum"], [497, 3, 1, "", "setReadAsImage"], [497, 3, 1, "", "setSort"], [497, 3, 1, "", "setSplitPage"], [497, 3, 1, "", "setStoreSplittedPdf"], [497, 3, 1, "", "setTextStripper"], [497, 2, 1, "", "sort"], [497, 2, 1, "", "splitPage"], [497, 2, 1, "", "storeSplittedPdf"], [497, 2, 1, "", "textStripper"]], "sparknlp.partition.partition_properties.HasPowerPointProperties": [[497, 3, 1, "", "getIncludeSlideNotes"], [497, 2, 1, "", "includeSlideNotes"], [497, 3, 1, "", "setIncludeSlideNotes"]], "sparknlp.partition.partition_properties.HasReaderProperties": [[497, 2, 1, "", "contentPath"], [497, 2, 1, "", "contentType"], [497, 2, 1, "", "explodeDocs"], [497, 2, 1, "", "ignoreExceptions"], [497, 2, 1, "", "includePageBreaks"], [497, 2, 1, "", "inferTableStructure"], [497, 2, 1, "", "outputCol"], [497, 3, 1, "", "setContentPath"], [497, 3, 1, "", "setContentType"], [497, 3, 1, "", "setExplodeDocs"], [497, 3, 1, "", "setIgnoreExceptions"], [497, 3, 1, "", "setIncludePageBreaks"], [497, 3, 1, "", "setInferTableStructure"], [497, 3, 1, "", "setStoreContent"], [497, 3, 1, "", "setTitleFontSize"], [497, 2, 1, "", "storeContent"], [497, 2, 1, "", "titleFontSize"]], "sparknlp.partition.partition_properties.HasTextReaderProperties": [[497, 3, 1, "", "getGroupBrokenParagraphs"], [497, 3, 1, "", "getMaxLineCount"], [497, 3, 1, "", "getParagraphSplit"], [497, 3, 1, "", "getShortLineWordThreshold"], [497, 3, 1, "", "getThreshold"], [497, 3, 1, "", "getTitleLengthSize"], [497, 2, 1, "", "groupBrokenParagraphs"], [497, 2, 1, "", "maxLineCount"], [497, 2, 1, "", "paragraphSplit"], [497, 3, 1, "", "setGroupBrokenParagraphs"], [497, 3, 1, "", "setMaxLineCount"], [497, 3, 1, "", "setParagraphSplit"], [497, 3, 1, "", "setShortLineWordThreshold"], [497, 3, 1, "", "setThreshold"], [497, 3, 1, "", "setTitleLengthSize"], [497, 2, 1, "", "shortLineWordThreshold"], [497, 2, 1, "", "threshold"], [497, 2, 1, "", "titleLengthSize"]], "sparknlp.partition.partition_transformer": [[498, 1, 1, "", "PartitionTransformer"]], "sparknlp.partition.partition_transformer.PartitionTransformer": [[498, 2, 1, "", "contentPath"], [498, 2, 1, "", "contentType"], [498, 3, 1, "", "getContentPath"], [498, 3, 1, "", "getContentType"], [498, 3, 1, "", "getIncludePageBreaks"], [498, 3, 1, "", "getInferTableStructure"], [498, 3, 1, "", "getStoreContent"], [498, 3, 1, "", "getTitleFontSize"], [498, 2, 1, "", "includePageBreaks"], [498, 2, 1, "", "inferTableStructure"], [498, 2, 1, "", "inputAnnotatorTypes"], [498, 2, 1, "", "name"], [498, 2, 1, "", "outputAnnotatorType"], [498, 3, 1, "", "setContentPath"], [498, 3, 1, "", "setContentType"], [498, 3, 1, "", "setIncludePageBreaks"], [498, 3, 1, "", "setInferTableStructure"], [498, 3, 1, "", "setStoreContent"], [498, 3, 1, "", "setTitleFontSize"], [498, 2, 1, "", "storeContent"], [498, 2, 1, "", "titleFontSize"]], "sparknlp.pretrained": [[500, 0, 0, "-", "pretrained_pipeline"], [501, 0, 0, "-", "resource_downloader"], [502, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[500, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[500, 3, 1, "", "annotate"], [500, 3, 1, "", "from_disk"], [500, 3, 1, "", "fullAnnotate"], [500, 3, 1, "", "fullAnnotateImage"], [500, 2, 1, "", "light_model"], [500, 3, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[501, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[501, 3, 1, "", "clearCache"], [501, 3, 1, "", "downloadModel"], [501, 3, 1, "", "downloadModelDirectly"], [501, 3, 1, "", "downloadPipeline"], [501, 3, 1, "", "showAvailableAnnotators"], [501, 3, 1, "", "showPublicModels"], [501, 3, 1, "", "showPublicPipelines"], [501, 3, 1, "", "showUnCategorizedResources"]], "sparknlp.pretrained.utils": [[502, 5, 1, "", "printProgress"]], "sparknlp.reader": [[503, 0, 0, "-", "enums"], [505, 0, 0, "-", "pdf_to_text"], [506, 0, 0, "-", "reader2doc"], [507, 0, 0, "-", "reader2image"], [508, 0, 0, "-", "reader2table"], [509, 0, 0, "-", "sparknlp_reader"]], "sparknlp.reader.enums": [[503, 1, 1, "", "TextStripperType"]], "sparknlp.reader.enums.TextStripperType": [[503, 2, 1, "", "PDF_LAYOUT_TEXT_STRIPPER"], [503, 2, 1, "", "PDF_TEXT_STRIPPER"]], "sparknlp.reader.pdf_to_text": [[505, 1, 1, "", "PdfToText"]], "sparknlp.reader.pdf_to_text.PdfToText": [[505, 2, 1, "", "extractCoordinates"], [505, 2, 1, "", "normalizeLigatures"], [505, 2, 1, "", "onlyPageNum"], [505, 2, 1, "", "pageNumCol"], [505, 2, 1, "", "partitionNum"], [505, 3, 1, "", "setExtractCoordinates"], [505, 3, 1, "", "setInputCol"], [505, 3, 1, "", "setNormalizeLigatures"], [505, 3, 1, "", "setOnlyPageNum"], [505, 3, 1, "", "setOutputCol"], [505, 3, 1, "", "setPageNumCol"], [505, 3, 1, "", "setPartitionNum"], [505, 3, 1, "", "setSort"], [505, 3, 1, "", "setSplitPage"], [505, 3, 1, "", "setStoreSplittedPdf"], [505, 3, 1, "", "setTextStripper"], [505, 2, 1, "", "sort"], [505, 2, 1, "", "splitPage"], [505, 2, 1, "", "storeSplittedPdf"], [505, 2, 1, "", "textStripper"]], "sparknlp.reader.reader2doc": [[506, 1, 1, "", "Reader2Doc"]], "sparknlp.reader.reader2doc.Reader2Doc": [[506, 2, 1, "", "excludeNonText"], [506, 2, 1, "", "flattenOutput"], [506, 2, 1, "", "name"], [506, 2, 1, "", "outputAnnotatorType"], [506, 2, 1, "", "outputAsDocument"], [506, 3, 1, "", "setExcludeNonText"], [506, 3, 1, "", "setFlattenOutput"], [506, 3, 1, "", "setOutputAsDocument"], [506, 3, 1, "", "setParams"], [506, 3, 1, "", "setTitleThreshold"], [506, 2, 1, "", "titleThreshold"]], "sparknlp.reader.reader2image": [[507, 1, 1, "", "Reader2Image"]], "sparknlp.reader.reader2image.Reader2Image": [[507, 2, 1, "", "customPromptTemplate"], [507, 2, 1, "", "name"], [507, 2, 1, "", "outputAnnotatorType"], [507, 2, 1, "", "promptTemplate"], [507, 3, 1, "", "setCustomPromptTemplate"], [507, 3, 1, "", "setParams"], [507, 3, 1, "", "setPromptTemplate"], [507, 3, 1, "", "setUserMessage"], [507, 2, 1, "", "userMessage"]], "sparknlp.reader.reader2table": [[508, 1, 1, "", "Reader2Table"]], "sparknlp.reader.reader2table.Reader2Table": [[508, 2, 1, "", "flattenOutput"], [508, 2, 1, "", "name"], [508, 2, 1, "", "outputAnnotatorType"], [508, 3, 1, "", "setFlattenOutput"], [508, 3, 1, "", "setParams"], [508, 3, 1, "", "setTitleThreshold"], [508, 2, 1, "", "titleThreshold"]], "sparknlp.reader.sparknlp_reader": [[509, 1, 1, "", "SparkNLPReader"]], "sparknlp.reader.sparknlp_reader.SparkNLPReader": [[509, 3, 1, "", "csv"], [509, 3, 1, "", "doc"], [509, 3, 1, "", "email"], [509, 3, 1, "", "html"], [509, 3, 1, "", "md"], [509, 3, 1, "", "pdf"], [509, 3, 1, "", "ppt"], [509, 2, 1, "", "spark"], [509, 3, 1, "", "txt"], [509, 3, 1, "", "xls"], [509, 3, 1, "", "xml"]], "sparknlp.training": [[510, 0, 0, "-", "conll"], [511, 0, 0, "-", "conllu"], [513, 0, 0, "-", "pos"], [514, 0, 0, "-", "pub_tator"], [515, 0, 0, "-", "spacy_to_annotation"], [516, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[510, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[510, 3, 1, "", "readDataset"]], "sparknlp.training.conllu": [[511, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[511, 3, 1, "", "readDataset"]], "sparknlp.training.pos": [[513, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[513, 3, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[514, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[514, 3, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[515, 1, 1, "", "SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation.SpacyToAnnotation": [[515, 3, 1, "", "readJsonFile"]], "sparknlp.training.tfgraphs": [[516, 4, 1, "", "tf_graph"], [516, 4, 1, "", "tf_graph_1x"]], "sparknlp.upload_to_hub": [[517, 1, 1, "", "PushToHub"]], "sparknlp.upload_to_hub.PushToHub": [[517, 3, 1, "", "check_for_required_info"], [517, 3, 1, "", "create_docs"], [517, 2, 1, "", "list_of_tasks"], [517, 3, 1, "", "push_to_hub"], [517, 3, 1, "", "unzip_directory"], [517, 3, 1, "", "zip_directory"]], "sparknlp.util": [[518, 1, 1, "", "CoNLLGenerator"], [518, 1, 1, "", "EmbeddingsDataFrameUtils"], [518, 5, 1, "", "get_config_path"]], "sparknlp.util.CoNLLGenerator": [[518, 3, 1, "", "exportConllFiles"]], "sparknlp.util.EmbeddingsDataFrameUtils": [[518, 2, 1, "", "emptyImageRow"], [518, 2, 1, "", "imageSchema"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:data", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "data", "Python data"], "5": ["py", "function", "Python function"]}, "titleterms": {"sparknlp": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518], "packag": [1, 5, 6, 12, 59, 62, 64, 83, 90, 121, 124, 126, 129, 136, 145, 148, 151, 153, 156, 159, 180, 182, 189, 195, 197, 214, 227, 233, 235, 239, 243, 250, 382, 486], "subpackag": [1, 5, 382, 486], "submodul": [1, 5, 6, 12, 59, 62, 64, 83, 90, 121, 124, 126, 129, 136, 145, 148, 151, 153, 156, 159, 180, 182, 189, 195, 197, 214, 227, 233, 235, 239, 243, 250, 265, 295, 319, 320, 327, 342, 361, 380, 382, 383, 385, 390, 395, 404, 409, 410, 412, 415, 425, 440, 442, 449, 454, 466, 478, 486, 490, 494, 495, 499, 504, 512], "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 491, 492, 493, 496, 497, 498, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519], "content": [1, 5, 6, 12, 59, 62, 64, 83, 90, 121, 124, 126, 129, 136, 145, 148, 151, 153, 156, 159, 180, 182, 189, 195, 197, 214, 227, 233, 235, 239, 243, 250, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 496, 497, 498, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 523, 524, 525], "annotation_audio": [3, 262], "annotation_imag": [4, 263], "audio": [6, 7, 8, 9, 264, 265, 266, 267], "hubert_for_ctc": [7, 264], "wav2vec2_for_ctc": [8, 266], "whisper_for_ctc": [9, 267], "chunk2_doc": [10, 268], "chunker": [11, 269], "classifier_dl": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "albert_for_multiple_choic": [13, 270], "albert_for_question_answ": [14, 271], "albert_for_sequence_classif": [15, 272], "albert_for_token_classif": [16, 273], "albert_for_zero_shot_classif": [17, 274], "bart_for_zero_shot_classif": [18, 275], "bert_for_multiple_choic": [19, 276], "bert_for_question_answ": [20, 277], "bert_for_sequence_classif": [21, 278], "bert_for_token_classif": [22, 279], "bert_for_zero_shot_classif": [23, 280], "camembert_for_question_answ": [24, 281], "camembert_for_sequence_classif": [25, 282], "camembert_for_token_classif": [26, 283], "camembert_for_zero_shot_classif": [27, 284], "exampl": [27, 32, 284, 289], "deberta_for_question_answ": [29, 286], "deberta_for_sequence_classif": [30, 287], "deberta_for_token_classif": [31, 288], "deberta_for_zero_shot_classif": [32, 289], "return": [32, 70, 71, 77, 289, 328, 329, 335], "distil_bert_for_question_answ": [33, 290], "distil_bert_for_sequence_classif": [34, 291], "distil_bert_for_token_classif": [35, 292], "distil_bert_for_zero_shot_classif": [36, 293], "distilbert_for_multiple_choic": [37, 294], "longformer_for_question_answ": [38, 296], "longformer_for_sequence_classif": [39, 297], "longformer_for_token_classif": [40, 298], "mpnet_for_question_answ": [41, 299], "mpnet_for_sequence_classif": [42, 300], "mpnet_for_token_classif": [43, 301], "multi_classifier_dl": [44, 302], "roberta_for_multiple_choic": [45, 303], "roberta_for_question_answ": [46, 304], "roberta_for_sequence_classif": [47, 305], "roberta_for_token_classif": [48, 306], "roberta_for_zero_shot_classif": [49, 307], "sentiment_dl": [50, 308], "tapas_for_question_answ": [51, 309], "xlm_roberta_for_multiple_choic": [52, 310], "xlm_roberta_for_question_answ": [53, 311], "xlm_roberta_for_sequence_classif": [54, 312], "xlm_roberta_for_token_classif": [55, 313], "xlm_roberta_for_zero_shot_classif": [56, 314], "xlnet_for_sequence_classif": [57, 315], "xlnet_for_token_classif": [58, 316], "cleaner": [59, 60, 61, 317, 318, 319], "extractor": [61, 318], "coref": [62, 63, 320, 321], "spanbert_coref": [63, 321], "cv": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "blip_for_question_answ": [65, 322], "clip_for_zero_shot_classif": [66, 323], "convnext_for_image_classif": [67, 324], "florence2_transform": [68, 325], "gemma3_for_multimod": [69, 326], "internvl_for_multimod": [70, 328], "refer": [70, 71, 77, 328, 329, 335, 519], "janus_for_multimod": [71, 329], "llava_for_multimod": [72, 330], "mllama_for_multimod": [73, 331], "paligemma_for_multimod": [74, 332], "phi3_vision_for_multimod": [75, 333], "qwen2vl_transform": [76, 334], "smolvlm_transform": [77, 335], "swin_for_image_classif": [78, 336], "vision_encoder_decoder_for_image_capt": [79, 337], "vit_for_image_classif": [80, 338], "dataframe_optim": [81, 339], "date2_chunk": [82, 340], "depend": [83, 84, 85, 341, 342, 343], "dependency_pars": [84, 341], "typed_dependency_pars": [85, 343], "document_character_text_splitt": [86, 344], "document_norm": [87, 345], "document_token_splitt": [88, 346], "document_token_splitter_test": [89, 347], "embed": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "albert_embed": [91, 348], "auto_gguf_embed": [92, 349], "bert_embed": [93, 350], "bert_sentence_embed": [94, 351], "bge_embed": [95, 352], "camembert_embed": [96, 353], "chunk_embed": [97, 354], "deberta_embed": [98, 355], "distil_bert_embed": [99, 356], "doc2vec": [100, 357], "e5_embed": [101, 358], "e5v_embed": [102, 359], "elmo_embed": [103, 360], "instructor_embed": [104, 362], "longformer_embed": [105, 363], "minilm_embed": [106, 364], "mpnet_embed": [107, 365], "mxbai_embed": [108, 366], "nomic_embed": [109, 367], "roberta_embed": [110, 368], "roberta_sentence_embed": [111, 369], "sentence_embed": [112, 370], "snowflake_embed": [113, 371], "uae_embed": [114, 372], "universal_sentence_encod": [115, 373], "word2vec": [116, 374], "word_embed": [117, 375], "xlm_roberta_embed": [118, 376], "xlm_roberta_sentence_embed": [119, 377], "xlnet_embed": [120, 378], "er": [121, 122, 379, 380], "entity_rul": [122, 379], "graph_extract": [123, 381], "keyword_extract": [124, 125, 383, 384], "yake_keyword_extract": [125, 384], "ld_dl": [126, 127, 385, 386], "language_detector_dl": [127, 386], "lemmat": [128, 387], "matcher": [129, 130, 131, 132, 133, 134, 388, 389, 390, 391, 392, 393], "big_text_match": [130, 388], "date_match": [131, 389], "multi_date_match": [132, 391], "regex_match": [133, 392], "text_match": [134, 393], "n_gram_gener": [135, 394], "ner": [136, 137, 138, 139, 140, 141, 142, 143, 395, 396, 397, 398, 399, 400, 401, 402], "ner_approach": [137, 396], "ner_convert": [138, 397], "ner_crf": [139, 398], "ner_dl": [140, 399], "ner_dl_graph_check": [141, 400], "ner_overwrit": [142, 401], "zero_shot_ner_model": [143, 402], "normal": [144, 403], "openai": [145, 146, 147, 404, 405, 406], "openai_complet": [146, 405], "openai_embed": [147, 406], "param": [148, 149, 150, 407, 408, 409], "classifier_encod": [149, 407], "evaluation_dl_param": [150, 408], "po": [151, 152, 253, 410, 411, 513, 530], "perceptron": [152, 411], "sentenc": [153, 154, 155, 412, 413, 414, 525], "sentence_detector": [154, 413], "sentence_detector_dl": [155, 414], "sentiment": [156, 157, 158, 415, 416, 417], "sentiment_detector": [157, 416], "vivekn_senti": [158, 417], "seq2seq": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438], "auto_gguf_model": [160, 418], "auto_gguf_rerank": [161, 419], "auto_gguf_vision_model": [162, 420], "bart_transform": [163, 421], "cohere_transform": [164, 422], "cpm_transform": [165, 423], "gpt2_transform": [166, 424], "llama2_transform": [167, 426], "llama3_transform": [168, 427], "m2m100_transform": [169, 428], "marian_transform": [170, 429], "mistral_transform": [171, 430], "nllb_transform": [172, 431], "olmo_transform": [173, 432], "phi2_transform": [174, 433], "phi3_transform": [175, 434], "phi4_transform": [176, 435], "qwen_transform": [177, 436], "starcoder_transform": [178, 437], "t5_transform": [179, 438], "similar": [180, 181, 439, 440], "document_similarity_rank": [181, 439], "spell_check": [182, 183, 184, 185, 441, 442, 443, 444], "context_spell_check": [183, 441], "norvig_sweet": [184, 443], "symmetric_delet": [185, 444], "stemmer": [186, 445], "stop_words_clean": [187, 446], "tf_ner_dl_graph_build": [188, 447], "token": [189, 190, 191, 192, 193, 448, 449, 450, 451, 452, 525], "chunk_token": [190, 448], "recursive_token": [191, 450], "regex_token": [192, 451], "token2_chunk": [194, 453], "w": [195, 196, 454, 455], "word_segment": [196, 455], "base": [197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472], "audio_assembl": [198, 456], "doc2_chunk": [199, 457], "document_assembl": [200, 458], "embeddings_finish": [201, 459], "finish": [202, 460, 525], "gguf_ranking_finish": [203, 461], "graph_finish": [204, 462], "has_recursive_fit": [205, 463], "has_recursive_transform": [206, 464], "image_assembl": [207, 465], "light_pipelin": [208, 467], "multi_document_assembl": [209, 468], "prompt_assembl": [210, 469], "recursive_pipelin": [211, 470], "table_assembl": [212, 471], "token_assembl": [213, 472], "common": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 524], "annotator_approach": [215, 473], "annotator_model": [216, 474], "annotator_properti": [217, 475], "annotator_typ": [218, 476], "coverage_result": [219, 477], "match_strategi": [220, 479], "properti": [221, 480], "read_a": [222, 481], "recursive_annotator_approach": [223, 482], "storag": [224, 483], "util": [225, 242, 258, 484, 502, 518], "function": [226, 339, 484, 485, 486, 502, 518, 524, 526], "intern": [227, 228, 229, 230, 231, 232, 487, 488, 489, 490, 491, 492], "annotator_java_ml": [228, 487], "annotator_transform": [229, 488], "extended_java_wrapp": [230, 489], "params_getters_sett": [231, 491], "recurs": [232, 492], "log": [233, 234, 493, 494, 520, 522], "comet": [234, 493, 520], "partit": [235, 236, 237, 238, 495, 496, 497, 498], "partition_properti": [237, 497], "partition_transform": [238, 498], "pretrain": [239, 240, 241, 242, 499, 500, 501, 502, 524, 528, 529], "pretrained_pipelin": [240, 500], "resource_download": [241, 501], "reader": [243, 244, 245, 246, 247, 248, 249, 503, 504, 505, 506, 507, 508, 509], "enum": [244, 503], "pdf_to_text": [245, 505], "reader2doc": [246, 506], "parametersf": [246, 506], "reader2imag": [247, 507], "reader2t": [248, 508], "sparknlp_read": [249, 509], "train": [250, 251, 252, 253, 254, 255, 256, 510, 511, 512, 513, 514, 515, 516, 530], "conll": [251, 510, 530], "conllu": [252, 511, 530], "pub_tat": [254, 514], "spacy_to_annot": [255, 515], "tfgraph": [256, 516], "upload_to_hub": [257, 517], "get": [259, 525], "start": 259, "spark": [259, 260, 520, 525, 529], "nlp": [259, 260, 520, 529], "cheat": 259, "sheet": 259, "requir": 259, "instal": [259, 520], "us": [259, 520, 529], "conda": 259, "virtualenv": 259, "session": 259, "from": 259, "python": 259, "document": 260, "class": [261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 487, 488, 489, 491, 492, 493, 496, 497, 498, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 517, 518], "attribut": [486, 493], "api": 519, "A": 520, "meta": 520, "machin": [520, 521], "learn": [520, 521], "platform": [520, 521], "pipelin": [520, 525, 528, 529], "paramet": 520, "evalu": 520, "metric": 520, "visual": 520, "run": 520, "an": 520, "offlin": 520, "experi": 520, "mlflow": 521, "lifecycl": 521, "third": 522, "parti": 522, "project": 522, "approach": 524, "model": 524, "note": 524, "avail": [524, 529], "set": 525, "up": 525, "your": 525, "own": 525, "type": 525, "necessari": 525, "import": 525, "construct": 525, "documentassembl": 525, "data": 525, "detect": 525, "out": 525, "put": 525, "all": 525, "togeth": 525, "ml": [525, 529], "helper": 526, "user": 527, "guid": 527, "light": 528, "convert": 528, "pipelinemodel": 528, "download": 529, "As": 529, "lightpipelin": 529, "load": 530, "dataset": 530, "spell": 530, "checker": 530, "pubtat": 530}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"sparknlp": [[0, "sparknlp"], [486, "module-sparknlp"]], "sparknlp package": [[1, "sparknlp-package"]], "Subpackages": [[1, "subpackages"], [5, "subpackages"], [382, "subpackages"], [486, "subpackages"]], "Submodules": [[1, "submodules"], [5, "submodules"], [6, "submodules"], [12, "submodules"], [59, "submodules"], [62, "submodules"], [64, "submodules"], [83, "submodules"], [90, "submodules"], [121, "submodules"], [124, "submodules"], [126, "submodules"], [129, "submodules"], [136, "submodules"], [145, "submodules"], [148, "submodules"], [151, "submodules"], [153, "submodules"], [156, "submodules"], [159, "submodules"], [180, "submodules"], [182, "submodules"], [189, "submodules"], [195, "submodules"], [197, "submodules"], [214, "submodules"], [227, "submodules"], [233, "submodules"], [235, "submodules"], [239, "submodules"], [243, "submodules"], [250, "submodules"], [265, "submodules"], [295, "submodules"], [319, "submodules"], [320, "submodules"], [327, "submodules"], [342, "submodules"], [361, "submodules"], [380, "submodules"], [382, "submodules"], [383, "submodules"], [385, "submodules"], [390, "submodules"], [395, "submodules"], [404, "submodules"], [409, "submodules"], [410, "submodules"], [412, "submodules"], [415, "submodules"], [425, "submodules"], [440, "submodules"], [442, "submodules"], [449, "submodules"], [454, "submodules"], [466, "submodules"], [478, "submodules"], [486, "submodules"], [490, "submodules"], [494, "submodules"], [495, "submodules"], [499, "submodules"], [504, "submodules"], [512, "submodules"]], "Module contents": [[1, "module-sparknlp"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [12, "module-sparknlp.annotator.classifier_dl"], [59, "module-sparknlp.annotator.cleaners"], [62, "module-sparknlp.annotator.coref"], [64, "module-sparknlp.annotator.cv"], [83, "module-sparknlp.annotator.dependency"], [90, "module-sparknlp.annotator.embeddings"], [121, "module-sparknlp.annotator.er"], [124, "module-sparknlp.annotator.keyword_extraction"], [126, "module-sparknlp.annotator.ld_dl"], [129, "module-sparknlp.annotator.matcher"], [136, "module-sparknlp.annotator.ner"], [145, "module-sparknlp.annotator.openai"], [148, "module-sparknlp.annotator.param"], [151, "module-sparknlp.annotator.pos"], [153, "module-sparknlp.annotator.sentence"], [156, "module-sparknlp.annotator.sentiment"], [159, "module-sparknlp.annotator.seq2seq"], [180, "module-sparknlp.annotator.similarity"], [182, "module-sparknlp.annotator.spell_check"], [189, "module-sparknlp.annotator.token"], [195, "module-sparknlp.annotator.ws"], [197, "module-sparknlp.base"], [214, "module-sparknlp.common"], [227, "module-sparknlp.internal"], [233, "module-sparknlp.logging"], [235, "module-sparknlp.partition"], [239, "module-sparknlp.pretrained"], [243, "module-sparknlp.reader"], [250, "module-sparknlp.training"]], "sparknlp.annotation module": [[2, "module-sparknlp.annotation"]], "sparknlp.annotation_audio module": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image module": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator package": [[5, "sparknlp-annotator-package"]], "sparknlp.annotator.audio package": [[6, "sparknlp-annotator-audio-package"]], "sparknlp.annotator.audio.hubert_for_ctc module": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio.wav2vec2_for_ctc module": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc module": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc module": [[10, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker module": [[11, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl package": [[12, "sparknlp-annotator-classifier-dl-package"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering module": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification module": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering module": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification module": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering module": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification module": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "Examples": [[27, "examples"], [32, "examples"], [284, "examples"], [289, "examples"]], "sparknlp.annotator.classifier_dl.classifier_dl module": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering module": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification module": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Returns": [[32, "returns"], [32, "id1"], [70, "returns"], [70, "id1"], [71, "returns"], [71, "id1"], [77, "returns"], [77, "id1"], [289, "returns"], [289, "id1"], [328, "returns"], [328, "id1"], [329, "returns"], [329, "id1"], [335, "returns"], [335, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering module": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification module": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl module": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering module": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification module": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl module": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering module": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners package": [[59, "sparknlp-annotator-cleaners-package"]], "sparknlp.annotator.cleaners.cleaner module": [[60, "module-sparknlp.annotator.cleaners.cleaner"]], "sparknlp.annotator.cleaners.extractor module": [[61, "module-sparknlp.annotator.cleaners.extractor"]], "sparknlp.annotator.coref package": [[62, "sparknlp-annotator-coref-package"]], "sparknlp.annotator.coref.spanbert_coref module": [[63, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv package": [[64, "sparknlp-annotator-cv-package"]], "sparknlp.annotator.cv.blip_for_question_answering module": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification module": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification module": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv.florence2_transformer module": [[68, "module-sparknlp.annotator.cv.florence2_transformer"]], "sparknlp.annotator.cv.gemma3_for_multimodal module": [[69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "sparknlp.annotator.cv.internvl_for_multimodal module": [[70, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "References": [[70, "references"], [71, "references"], [77, "references"], [328, "references"], [329, "references"], [335, "references"]], "sparknlp.annotator.cv.janus_for_multimodal module": [[71, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "sparknlp.annotator.cv.llava_for_multimodal module": [[72, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal module": [[73, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "sparknlp.annotator.cv.paligemma_for_multimodal module": [[74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal module": [[75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "sparknlp.annotator.cv.qwen2vl_transformer module": [[76, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "sparknlp.annotator.cv.smolvlm_transformer module": [[77, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "sparknlp.annotator.cv.swin_for_image_classification module": [[78, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module": [[79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification module": [[80, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.dataframe_optimizer module": [[81, "module-sparknlp.annotator.dataframe_optimizer"]], "sparknlp.annotator.date2_chunk module": [[82, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency package": [[83, "sparknlp-annotator-dependency-package"]], "sparknlp.annotator.dependency.dependency_parser module": [[84, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency.typed_dependency_parser module": [[85, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter module": [[86, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer module": [[87, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter module": [[88, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test module": [[89, "sparknlp-annotator-document-token-splitter-test-module"]], "sparknlp.annotator.embeddings package": [[90, "sparknlp-annotator-embeddings-package"]], "sparknlp.annotator.embeddings.albert_embeddings module": [[91, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings module": [[92, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings module": [[93, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings module": [[94, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings module": [[95, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings module": [[96, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings module": [[97, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings module": [[98, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings module": [[99, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec module": [[100, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings module": [[101, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.e5v_embeddings module": [[102, "module-sparknlp.annotator.embeddings.e5v_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings module": [[103, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings module": [[104, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings module": [[105, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.minilm_embeddings module": [[106, "module-sparknlp.annotator.embeddings.minilm_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings module": [[107, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings module": [[108, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings module": [[109, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings module": [[110, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings module": [[111, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings module": [[112, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings module": [[113, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings module": [[114, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder module": [[115, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec module": [[116, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings module": [[117, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings module": [[118, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module": [[119, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings module": [[120, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er package": [[121, "sparknlp-annotator-er-package"]], "sparknlp.annotator.er.entity_ruler module": [[122, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.graph_extraction module": [[123, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator.keyword_extraction package": [[124, "sparknlp-annotator-keyword-extraction-package"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module": [[125, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl package": [[126, "sparknlp-annotator-ld-dl-package"]], "sparknlp.annotator.ld_dl.language_detector_dl module": [[127, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer module": [[128, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher package": [[129, "sparknlp-annotator-matcher-package"]], "sparknlp.annotator.matcher.big_text_matcher module": [[130, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher module": [[131, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher.multi_date_matcher module": [[132, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher module": [[133, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher module": [[134, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator module": [[135, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner package": [[136, "sparknlp-annotator-ner-package"]], "sparknlp.annotator.ner.ner_approach module": [[137, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter module": [[138, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf module": [[139, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl module": [[140, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_dl_graph_checker module": [[141, "module-sparknlp.annotator.ner.ner_dl_graph_checker"]], "sparknlp.annotator.ner.ner_overwriter module": [[142, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model module": [[143, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer module": [[144, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai package": [[145, "sparknlp-annotator-openai-package"]], "sparknlp.annotator.openai.openai_completion module": [[146, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings module": [[147, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param package": [[148, "sparknlp-annotator-param-package"]], "sparknlp.annotator.param.classifier_encoder module": [[149, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params module": [[150, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.pos package": [[151, "sparknlp-annotator-pos-package"]], "sparknlp.annotator.pos.perceptron module": [[152, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence package": [[153, "sparknlp-annotator-sentence-package"]], "sparknlp.annotator.sentence.sentence_detector module": [[154, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl module": [[155, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment package": [[156, "sparknlp-annotator-sentiment-package"]], "sparknlp.annotator.sentiment.sentiment_detector module": [[157, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment module": [[158, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq package": [[159, "sparknlp-annotator-seq2seq-package"]], "sparknlp.annotator.seq2seq.auto_gguf_model module": [[160, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.auto_gguf_reranker module": [[161, "module-sparknlp.annotator.seq2seq.auto_gguf_reranker"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model module": [[162, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "sparknlp.annotator.seq2seq.bart_transformer module": [[163, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cohere_transformer module": [[164, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer module": [[165, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer module": [[166, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer module": [[167, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer module": [[168, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer module": [[169, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer module": [[170, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer module": [[171, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer module": [[172, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.olmo_transformer module": [[173, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer module": [[174, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer module": [[175, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.phi4_transformer module": [[176, "module-sparknlp.annotator.seq2seq.phi4_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer module": [[177, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer module": [[178, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer module": [[179, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity package": [[180, "sparknlp-annotator-similarity-package"]], "sparknlp.annotator.similarity.document_similarity_ranker module": [[181, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.spell_check package": [[182, "sparknlp-annotator-spell-check-package"]], "sparknlp.annotator.spell_check.context_spell_checker module": [[183, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check.norvig_sweeting module": [[184, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete module": [[185, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer module": [[186, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner module": [[187, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder module": [[188, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token package": [[189, "sparknlp-annotator-token-package"]], "sparknlp.annotator.token.chunk_tokenizer module": [[190, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token.recursive_tokenizer module": [[191, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer module": [[192, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer module": [[193, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk module": [[194, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws package": [[195, "sparknlp-annotator-ws-package"]], "sparknlp.annotator.ws.word_segmenter module": [[196, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base package": [[197, "sparknlp-base-package"]], "sparknlp.base.audio_assembler module": [[198, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk module": [[199, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler module": [[200, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher module": [[201, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher module": [[202, "module-sparknlp.base.finisher"]], "sparknlp.base.gguf_ranking_finisher module": [[203, "module-sparknlp.base.gguf_ranking_finisher"]], "sparknlp.base.graph_finisher module": [[204, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit module": [[205, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform module": [[206, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler module": [[207, "module-sparknlp.base.image_assembler"]], "sparknlp.base.light_pipeline module": [[208, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler module": [[209, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler module": [[210, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline module": [[211, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler module": [[212, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler module": [[213, "module-sparknlp.base.token_assembler"]], "sparknlp.common package": [[214, "sparknlp-common-package"]], "sparknlp.common.annotator_approach module": [[215, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model module": [[216, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties module": [[217, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type module": [[218, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result module": [[219, "module-sparknlp.common.coverage_result"]], "sparknlp.common.match_strategy module": [[220, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties module": [[221, "module-sparknlp.common.properties"]], "sparknlp.common.read_as module": [[222, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach module": [[223, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage module": [[224, "module-sparknlp.common.storage"]], "sparknlp.common.utils module": [[225, "module-sparknlp.common.utils"]], "sparknlp.functions module": [[226, "module-sparknlp.functions"]], "sparknlp.internal package": [[227, "sparknlp-internal-package"]], "sparknlp.internal.annotator_java_ml module": [[228, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer module": [[229, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper module": [[230, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal.params_getters_setters module": [[231, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive module": [[232, "module-sparknlp.internal.recursive"]], "sparknlp.logging package": [[233, "sparknlp-logging-package"]], "sparknlp.logging.comet module": [[234, "module-sparknlp.logging.comet"]], "sparknlp.partition package": [[235, "sparknlp-partition-package"]], "sparknlp.partition.partition module": [[236, "module-sparknlp.partition.partition"]], "sparknlp.partition.partition_properties module": [[237, "module-sparknlp.partition.partition_properties"]], "sparknlp.partition.partition_transformer module": [[238, "module-sparknlp.partition.partition_transformer"]], "sparknlp.pretrained package": [[239, "sparknlp-pretrained-package"]], "sparknlp.pretrained.pretrained_pipeline module": [[240, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader module": [[241, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils module": [[242, "module-sparknlp.pretrained.utils"]], "sparknlp.reader package": [[243, "sparknlp-reader-package"]], "sparknlp.reader.enums module": [[244, "module-sparknlp.reader.enums"]], "sparknlp.reader.pdf_to_text module": [[245, "module-sparknlp.reader.pdf_to_text"]], "sparknlp.reader.reader2doc module": [[246, "module-sparknlp.reader.reader2doc"]], "ParametersF": [[246, "parametersf"], [506, "parametersf"]], "sparknlp.reader.reader2image module": [[247, "module-sparknlp.reader.reader2image"]], "sparknlp.reader.reader2table module": [[248, "module-sparknlp.reader.reader2table"]], "sparknlp.reader.sparknlp_reader module": [[249, "module-sparknlp.reader.sparknlp_reader"]], "sparknlp.training package": [[250, "sparknlp-training-package"]], "sparknlp.training.conll module": [[251, "module-sparknlp.training.conll"]], "sparknlp.training.conllu module": [[252, "module-sparknlp.training.conllu"]], "sparknlp.training.pos module": [[253, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator module": [[254, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation module": [[255, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs module": [[256, "sparknlp-training-tfgraphs-module"]], "sparknlp.upload_to_hub module": [[257, "module-sparknlp.upload_to_hub"]], "sparknlp.util module": [[258, "module-sparknlp.util"]], "Getting Started": [[259, "getting-started"]], "Spark NLP Cheat Sheet": [[259, "spark-nlp-cheat-sheet"]], "Requirements": [[259, "requirements"]], "Installation": [[259, "installation"], [520, "installation"]], "Using Conda": [[259, "using-conda"]], "Using Virtualenv": [[259, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[259, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[260, "spark-nlp-documentation"]], "Content": [[260, "content"]], "sparknlp.annotation": [[261, "module-sparknlp.annotation"]], "Module Contents": [[261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [381, "module-contents"], [384, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [411, "module-contents"], [413, "module-contents"], [414, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [441, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"]], "Classes": [[261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [381, "classes"], [384, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [411, "classes"], [413, "classes"], [414, "classes"], [416, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [441, "classes"], [443, "classes"], [444, "classes"], [445, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [450, "classes"], [451, "classes"], [452, "classes"], [453, "classes"], [455, "classes"], [456, "classes"], [457, "classes"], [458, "classes"], [459, "classes"], [460, "classes"], [461, "classes"], [462, "classes"], [463, "classes"], [464, "classes"], [465, "classes"], [467, "classes"], [468, "classes"], [469, "classes"], [470, "classes"], [471, "classes"], [472, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [476, "classes"], [477, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [496, "classes"], [497, "classes"], [498, "classes"], [500, "classes"], [501, "classes"], [503, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [511, "classes"], [513, "classes"], [514, "classes"], [515, "classes"], [517, "classes"], [518, "classes"]], "sparknlp.annotation_audio": [[262, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[263, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[264, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[265, "module-sparknlp.annotator.audio"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[266, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[267, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[268, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[269, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[270, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[271, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[272, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[273, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[274, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[275, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[276, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[277, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[278, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[279, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[280, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[281, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[282, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[283, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[284, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[285, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[286, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[287, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[288, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[289, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[290, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[291, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[292, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[293, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[294, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl": [[295, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[296, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[297, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[298, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[299, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[300, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[301, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[302, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[303, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[304, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[305, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[306, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[307, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[308, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[309, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[310, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[311, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[312, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[313, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[314, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[315, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[316, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners.cleaner": [[317, "module-sparknlp.annotator.cleaners.cleaner"]], "sparknlp.annotator.cleaners.extractor": [[318, "module-sparknlp.annotator.cleaners.extractor"]], "sparknlp.annotator.cleaners": [[319, "module-sparknlp.annotator.cleaners"]], "sparknlp.annotator.coref": [[320, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[321, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.blip_for_question_answering": [[322, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[323, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[324, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv.florence2_transformer": [[325, "module-sparknlp.annotator.cv.florence2_transformer"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[326, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "sparknlp.annotator.cv": [[327, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[328, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "sparknlp.annotator.cv.janus_for_multimodal": [[329, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "sparknlp.annotator.cv.llava_for_multimodal": [[330, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[331, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[332, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[333, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[334, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "sparknlp.annotator.cv.smolvlm_transformer": [[335, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "sparknlp.annotator.cv.swin_for_image_classification": [[336, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[337, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[338, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.dataframe_optimizer": [[339, "module-sparknlp.annotator.dataframe_optimizer"]], "Functions": [[339, "functions"], [484, "functions"], [485, "functions"], [486, "functions"], [502, "functions"], [518, "functions"]], "sparknlp.annotator.date2_chunk": [[340, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[341, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[342, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[343, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[344, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[345, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[346, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[347, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[348, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[349, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[350, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[351, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings": [[352, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[353, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[354, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[355, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[356, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[357, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[358, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.e5v_embeddings": [[359, "module-sparknlp.annotator.embeddings.e5v_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[360, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[361, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[362, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[363, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.minilm_embeddings": [[364, "module-sparknlp.annotator.embeddings.minilm_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[365, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[366, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[367, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[368, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[369, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[370, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[371, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings": [[372, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[373, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[374, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[375, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[376, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[377, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[378, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[379, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[380, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[381, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[382, "module-sparknlp.annotator"]], "Package Contents": [[382, "package-contents"], [486, "package-contents"]], "sparknlp.annotator.keyword_extraction": [[383, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[384, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[385, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[386, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[387, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[388, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[389, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[390, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[391, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[392, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[393, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[394, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[395, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[396, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[397, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[398, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[399, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_dl_graph_checker": [[400, "module-sparknlp.annotator.ner.ner_dl_graph_checker"]], "sparknlp.annotator.ner.ner_overwriter": [[401, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[402, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[403, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[404, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[405, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[406, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[407, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[408, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[409, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[410, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[411, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[412, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[413, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[414, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[415, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[416, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[417, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[418, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.auto_gguf_reranker": [[419, "module-sparknlp.annotator.seq2seq.auto_gguf_reranker"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[420, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "sparknlp.annotator.seq2seq.bart_transformer": [[421, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[422, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[423, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[424, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[425, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[426, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[427, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[428, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer": [[429, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[430, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[431, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[432, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[433, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[434, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.phi4_transformer": [[435, "module-sparknlp.annotator.seq2seq.phi4_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[436, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[437, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[438, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[439, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[440, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[441, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[442, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[443, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[444, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[445, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[446, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[447, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[448, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[449, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[450, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[451, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[452, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[453, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[454, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[455, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[456, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[457, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[458, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[459, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[460, "module-sparknlp.base.finisher"]], "sparknlp.base.gguf_ranking_finisher": [[461, "module-sparknlp.base.gguf_ranking_finisher"]], "sparknlp.base.graph_finisher": [[462, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[463, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[464, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[465, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[466, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[467, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[468, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler": [[469, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline": [[470, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[471, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[472, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[473, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[474, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[475, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[476, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[477, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[478, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[479, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[480, "module-sparknlp.common.properties"]], "sparknlp.common.read_as": [[481, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[482, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[483, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[484, "module-sparknlp.common.utils"]], "sparknlp.functions": [[485, "module-sparknlp.functions"]], "Attributes": [[486, "attributes"], [493, "attributes"]], "sparknlp.internal.annotator_java_ml": [[487, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[488, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[489, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[490, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[491, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[492, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[493, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[494, "module-sparknlp.logging"]], "sparknlp.partition": [[495, "module-sparknlp.partition"]], "sparknlp.partition.partition": [[496, "module-sparknlp.partition.partition"]], "sparknlp.partition.partition_properties": [[497, "module-sparknlp.partition.partition_properties"]], "sparknlp.partition.partition_transformer": [[498, "module-sparknlp.partition.partition_transformer"]], "sparknlp.pretrained": [[499, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[500, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[501, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[502, "module-sparknlp.pretrained.utils"]], "sparknlp.reader.enums": [[503, "module-sparknlp.reader.enums"]], "sparknlp.reader": [[504, "module-sparknlp.reader"]], "sparknlp.reader.pdf_to_text": [[505, "module-sparknlp.reader.pdf_to_text"]], "sparknlp.reader.reader2doc": [[506, "module-sparknlp.reader.reader2doc"]], "sparknlp.reader.reader2image": [[507, "module-sparknlp.reader.reader2image"]], "sparknlp.reader.reader2table": [[508, "module-sparknlp.reader.reader2table"]], "sparknlp.reader.sparknlp_reader": [[509, "module-sparknlp.reader.sparknlp_reader"]], "sparknlp.training.conll": [[510, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[511, "module-sparknlp.training.conllu"]], "sparknlp.training": [[512, "module-sparknlp.training"]], "sparknlp.training.pos": [[513, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[514, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[515, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[516, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[517, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[518, "module-sparknlp.util"]], "API Reference": [[519, "api-reference"]], "Modules": [[519, "modules"]], "Comet - A meta machine learning platform": [[520, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[520, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[520, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[520, "logging-evaluation-metrics"]], "Logging Visualizations": [[520, "logging-visualizations"]], "Running An Offline Experiment": [[520, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[521, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[522, "third-party-projects"]], "Logging": [[522, "logging"]], "Annotation": [[523, "annotation"]], "Annotators": [[524, "annotators"]], "Annotator Approaches": [[524, "annotator-approaches"]], "Annotator Models": [[524, "annotator-models"]], "Note": [[524, "note"]], "Pretrained Models": [[524, "pretrained-models"]], "Common Functions": [[524, "common-functions"]], "Available Annotators": [[524, "available-annotators"]], "Setting up your own pipeline": [[525, "setting-up-your-own-pipeline"]], "Annotator types": [[525, "annotator-types"]], "Necessary imports": [[525, "necessary-imports"]], "Constructing the Pipeline": [[525, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[525, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[525, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[525, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[525, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[526, "helper-functions"]], "User Guide": [[527, "user-guide"]], "Light Pipelines": [[528, "light-pipelines"]], "Converting PipelineModels": [[528, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[528, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[529, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[529, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[529, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[529, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[529, "available-pipelines"]], "Loading datasets for training": [[530, "loading-datasets-for-training"]], "POS Dataset": [[530, "pos-dataset"]], "CoNLL Dataset": [[530, "conll-dataset"]], "CoNLLU Dataset": [[530, "conllu-dataset"]], "Spell Checkers Dataset": [[530, "spell-checkers-dataset"]], "PubTator Dataset": [[530, "pubtator-dataset"]]}, "indexentries": {"module": [[1, "module-sparknlp"], [2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.hubert_for_ctc"], [8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [9, "module-sparknlp.annotator.audio.whisper_for_ctc"], [10, "module-sparknlp.annotator.chunk2_doc"], [11, "module-sparknlp.annotator.chunker"], [12, "module-sparknlp.annotator.classifier_dl"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [28, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [59, "module-sparknlp.annotator.cleaners"], [60, "module-sparknlp.annotator.cleaners.cleaner"], [61, "module-sparknlp.annotator.cleaners.extractor"], [62, "module-sparknlp.annotator.coref"], [63, "module-sparknlp.annotator.coref.spanbert_coref"], [64, "module-sparknlp.annotator.cv"], [65, "module-sparknlp.annotator.cv.blip_for_question_answering"], [66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [67, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [68, "module-sparknlp.annotator.cv.florence2_transformer"], [69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [70, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [71, "module-sparknlp.annotator.cv.janus_for_multimodal"], [72, "module-sparknlp.annotator.cv.llava_for_multimodal"], [73, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [76, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [77, "module-sparknlp.annotator.cv.smolvlm_transformer"], [78, "module-sparknlp.annotator.cv.swin_for_image_classification"], [79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [80, "module-sparknlp.annotator.cv.vit_for_image_classification"], [81, "module-sparknlp.annotator.dataframe_optimizer"], [82, "module-sparknlp.annotator.date2_chunk"], [83, "module-sparknlp.annotator.dependency"], [84, "module-sparknlp.annotator.dependency.dependency_parser"], [85, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [86, "module-sparknlp.annotator.document_character_text_splitter"], [87, "module-sparknlp.annotator.document_normalizer"], [88, "module-sparknlp.annotator.document_token_splitter"], [90, "module-sparknlp.annotator.embeddings"], [91, "module-sparknlp.annotator.embeddings.albert_embeddings"], [92, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [93, "module-sparknlp.annotator.embeddings.bert_embeddings"], [94, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [95, "module-sparknlp.annotator.embeddings.bge_embeddings"], [96, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [97, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [98, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [99, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [100, "module-sparknlp.annotator.embeddings.doc2vec"], [101, "module-sparknlp.annotator.embeddings.e5_embeddings"], [102, "module-sparknlp.annotator.embeddings.e5v_embeddings"], [103, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [104, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [105, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [106, "module-sparknlp.annotator.embeddings.minilm_embeddings"], [107, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [108, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [109, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [110, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [111, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [112, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [113, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [114, "module-sparknlp.annotator.embeddings.uae_embeddings"], [115, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [116, "module-sparknlp.annotator.embeddings.word2vec"], [117, "module-sparknlp.annotator.embeddings.word_embeddings"], [118, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [119, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [120, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [121, "module-sparknlp.annotator.er"], [122, "module-sparknlp.annotator.er.entity_ruler"], [123, "module-sparknlp.annotator.graph_extraction"], [124, "module-sparknlp.annotator.keyword_extraction"], [125, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [126, "module-sparknlp.annotator.ld_dl"], [127, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [128, "module-sparknlp.annotator.lemmatizer"], [129, "module-sparknlp.annotator.matcher"], [130, "module-sparknlp.annotator.matcher.big_text_matcher"], [131, "module-sparknlp.annotator.matcher.date_matcher"], [132, "module-sparknlp.annotator.matcher.multi_date_matcher"], [133, "module-sparknlp.annotator.matcher.regex_matcher"], [134, "module-sparknlp.annotator.matcher.text_matcher"], [135, "module-sparknlp.annotator.n_gram_generator"], [136, "module-sparknlp.annotator.ner"], [137, "module-sparknlp.annotator.ner.ner_approach"], [138, "module-sparknlp.annotator.ner.ner_converter"], [139, "module-sparknlp.annotator.ner.ner_crf"], [140, "module-sparknlp.annotator.ner.ner_dl"], [141, "module-sparknlp.annotator.ner.ner_dl_graph_checker"], [142, "module-sparknlp.annotator.ner.ner_overwriter"], [143, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [144, "module-sparknlp.annotator.normalizer"], [145, "module-sparknlp.annotator.openai"], [146, "module-sparknlp.annotator.openai.openai_completion"], [147, "module-sparknlp.annotator.openai.openai_embeddings"], [148, "module-sparknlp.annotator.param"], [149, "module-sparknlp.annotator.param.classifier_encoder"], [150, "module-sparknlp.annotator.param.evaluation_dl_params"], [151, "module-sparknlp.annotator.pos"], [152, "module-sparknlp.annotator.pos.perceptron"], [153, "module-sparknlp.annotator.sentence"], [154, "module-sparknlp.annotator.sentence.sentence_detector"], [155, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [156, "module-sparknlp.annotator.sentiment"], [157, "module-sparknlp.annotator.sentiment.sentiment_detector"], [158, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [159, "module-sparknlp.annotator.seq2seq"], [160, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [161, "module-sparknlp.annotator.seq2seq.auto_gguf_reranker"], [162, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [163, "module-sparknlp.annotator.seq2seq.bart_transformer"], [164, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [165, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [166, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [167, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [168, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [169, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [170, "module-sparknlp.annotator.seq2seq.marian_transformer"], [171, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [172, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [173, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [174, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [175, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [176, "module-sparknlp.annotator.seq2seq.phi4_transformer"], [177, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [178, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [179, "module-sparknlp.annotator.seq2seq.t5_transformer"], [180, "module-sparknlp.annotator.similarity"], [181, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [182, "module-sparknlp.annotator.spell_check"], [183, "module-sparknlp.annotator.spell_check.context_spell_checker"], [184, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [185, "module-sparknlp.annotator.spell_check.symmetric_delete"], [186, "module-sparknlp.annotator.stemmer"], [187, "module-sparknlp.annotator.stop_words_cleaner"], [188, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [189, "module-sparknlp.annotator.token"], [190, "module-sparknlp.annotator.token.chunk_tokenizer"], [191, "module-sparknlp.annotator.token.recursive_tokenizer"], [192, "module-sparknlp.annotator.token.regex_tokenizer"], [193, "module-sparknlp.annotator.token.tokenizer"], [194, "module-sparknlp.annotator.token2_chunk"], [195, "module-sparknlp.annotator.ws"], [196, "module-sparknlp.annotator.ws.word_segmenter"], [197, "module-sparknlp.base"], [198, "module-sparknlp.base.audio_assembler"], [199, "module-sparknlp.base.doc2_chunk"], [200, "module-sparknlp.base.document_assembler"], [201, "module-sparknlp.base.embeddings_finisher"], [202, "module-sparknlp.base.finisher"], [203, "module-sparknlp.base.gguf_ranking_finisher"], [204, "module-sparknlp.base.graph_finisher"], [205, "module-sparknlp.base.has_recursive_fit"], [206, "module-sparknlp.base.has_recursive_transform"], [207, "module-sparknlp.base.image_assembler"], [208, "module-sparknlp.base.light_pipeline"], [209, "module-sparknlp.base.multi_document_assembler"], [210, "module-sparknlp.base.prompt_assembler"], [211, "module-sparknlp.base.recursive_pipeline"], [212, "module-sparknlp.base.table_assembler"], [213, "module-sparknlp.base.token_assembler"], [214, "module-sparknlp.common"], [215, "module-sparknlp.common.annotator_approach"], [216, "module-sparknlp.common.annotator_model"], [217, "module-sparknlp.common.annotator_properties"], [218, "module-sparknlp.common.annotator_type"], [219, "module-sparknlp.common.coverage_result"], [220, "module-sparknlp.common.match_strategy"], [221, "module-sparknlp.common.properties"], [222, "module-sparknlp.common.read_as"], [223, "module-sparknlp.common.recursive_annotator_approach"], [224, "module-sparknlp.common.storage"], [225, "module-sparknlp.common.utils"], [226, "module-sparknlp.functions"], [227, "module-sparknlp.internal"], [228, "module-sparknlp.internal.annotator_java_ml"], [229, "module-sparknlp.internal.annotator_transformer"], [230, "module-sparknlp.internal.extended_java_wrapper"], [231, "module-sparknlp.internal.params_getters_setters"], [232, "module-sparknlp.internal.recursive"], [233, "module-sparknlp.logging"], [234, "module-sparknlp.logging.comet"], [235, "module-sparknlp.partition"], [236, "module-sparknlp.partition.partition"], [237, "module-sparknlp.partition.partition_properties"], [238, "module-sparknlp.partition.partition_transformer"], [239, "module-sparknlp.pretrained"], [240, "module-sparknlp.pretrained.pretrained_pipeline"], [241, "module-sparknlp.pretrained.resource_downloader"], [242, "module-sparknlp.pretrained.utils"], [243, "module-sparknlp.reader"], [244, "module-sparknlp.reader.enums"], [245, "module-sparknlp.reader.pdf_to_text"], [246, "module-sparknlp.reader.reader2doc"], [247, "module-sparknlp.reader.reader2image"], [248, "module-sparknlp.reader.reader2table"], [249, "module-sparknlp.reader.sparknlp_reader"], [250, "module-sparknlp.training"], [251, "module-sparknlp.training.conll"], [252, "module-sparknlp.training.conllu"], [253, "module-sparknlp.training.pos"], [254, "module-sparknlp.training.pub_tator"], [255, "module-sparknlp.training.spacy_to_annotation"], [257, "module-sparknlp.upload_to_hub"], [258, "module-sparknlp.util"], [261, "module-sparknlp.annotation"], [262, "module-sparknlp.annotation_audio"], [263, "module-sparknlp.annotation_image"], [264, "module-sparknlp.annotator.audio.hubert_for_ctc"], [265, "module-sparknlp.annotator.audio"], [266, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [267, "module-sparknlp.annotator.audio.whisper_for_ctc"], [268, "module-sparknlp.annotator.chunk2_doc"], [269, "module-sparknlp.annotator.chunker"], [270, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [271, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [272, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [273, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [274, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [275, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [276, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [277, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [278, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [279, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [280, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [281, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [282, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [283, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [284, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [285, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [286, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [287, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [288, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [289, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [290, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [291, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [292, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [293, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [294, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [295, "module-sparknlp.annotator.classifier_dl"], [296, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [297, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [298, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [299, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [300, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [301, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [302, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [303, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [304, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [305, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [306, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [307, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [308, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [309, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [310, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [311, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [312, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [313, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [314, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [315, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [316, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [317, "module-sparknlp.annotator.cleaners.cleaner"], [318, "module-sparknlp.annotator.cleaners.extractor"], [319, "module-sparknlp.annotator.cleaners"], [320, "module-sparknlp.annotator.coref"], [321, "module-sparknlp.annotator.coref.spanbert_coref"], [322, "module-sparknlp.annotator.cv.blip_for_question_answering"], [323, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [324, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [325, "module-sparknlp.annotator.cv.florence2_transformer"], [326, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [327, "module-sparknlp.annotator.cv"], [328, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [329, "module-sparknlp.annotator.cv.janus_for_multimodal"], [330, "module-sparknlp.annotator.cv.llava_for_multimodal"], [331, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [332, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [333, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [334, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [335, "module-sparknlp.annotator.cv.smolvlm_transformer"], [336, "module-sparknlp.annotator.cv.swin_for_image_classification"], [337, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [338, "module-sparknlp.annotator.cv.vit_for_image_classification"], [339, "module-sparknlp.annotator.dataframe_optimizer"], [340, "module-sparknlp.annotator.date2_chunk"], [341, "module-sparknlp.annotator.dependency.dependency_parser"], [342, "module-sparknlp.annotator.dependency"], [343, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [344, "module-sparknlp.annotator.document_character_text_splitter"], [345, "module-sparknlp.annotator.document_normalizer"], [346, "module-sparknlp.annotator.document_token_splitter"], [347, "module-sparknlp.annotator.document_token_splitter_test"], [348, "module-sparknlp.annotator.embeddings.albert_embeddings"], [349, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [350, "module-sparknlp.annotator.embeddings.bert_embeddings"], [351, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [352, "module-sparknlp.annotator.embeddings.bge_embeddings"], [353, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [354, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [355, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [356, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [357, "module-sparknlp.annotator.embeddings.doc2vec"], [358, "module-sparknlp.annotator.embeddings.e5_embeddings"], [359, "module-sparknlp.annotator.embeddings.e5v_embeddings"], [360, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [361, "module-sparknlp.annotator.embeddings"], [362, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [363, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [364, "module-sparknlp.annotator.embeddings.minilm_embeddings"], [365, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [366, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [367, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [368, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [369, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [370, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [371, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [372, "module-sparknlp.annotator.embeddings.uae_embeddings"], [373, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [374, "module-sparknlp.annotator.embeddings.word2vec"], [375, "module-sparknlp.annotator.embeddings.word_embeddings"], [376, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [377, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [378, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [379, "module-sparknlp.annotator.er.entity_ruler"], [380, "module-sparknlp.annotator.er"], [381, "module-sparknlp.annotator.graph_extraction"], [382, "module-sparknlp.annotator"], [383, "module-sparknlp.annotator.keyword_extraction"], [384, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [385, "module-sparknlp.annotator.ld_dl"], [386, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [387, "module-sparknlp.annotator.lemmatizer"], [388, "module-sparknlp.annotator.matcher.big_text_matcher"], [389, "module-sparknlp.annotator.matcher.date_matcher"], [390, "module-sparknlp.annotator.matcher"], [391, "module-sparknlp.annotator.matcher.multi_date_matcher"], [392, "module-sparknlp.annotator.matcher.regex_matcher"], [393, "module-sparknlp.annotator.matcher.text_matcher"], [394, "module-sparknlp.annotator.n_gram_generator"], [395, "module-sparknlp.annotator.ner"], [396, "module-sparknlp.annotator.ner.ner_approach"], [397, "module-sparknlp.annotator.ner.ner_converter"], [398, "module-sparknlp.annotator.ner.ner_crf"], [399, "module-sparknlp.annotator.ner.ner_dl"], [400, "module-sparknlp.annotator.ner.ner_dl_graph_checker"], [401, "module-sparknlp.annotator.ner.ner_overwriter"], [402, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [403, "module-sparknlp.annotator.normalizer"], [404, "module-sparknlp.annotator.openai"], [405, "module-sparknlp.annotator.openai.openai_completion"], [406, "module-sparknlp.annotator.openai.openai_embeddings"], [407, "module-sparknlp.annotator.param.classifier_encoder"], [408, "module-sparknlp.annotator.param.evaluation_dl_params"], [409, "module-sparknlp.annotator.param"], [410, "module-sparknlp.annotator.pos"], [411, "module-sparknlp.annotator.pos.perceptron"], [412, "module-sparknlp.annotator.sentence"], [413, "module-sparknlp.annotator.sentence.sentence_detector"], [414, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [415, "module-sparknlp.annotator.sentiment"], [416, "module-sparknlp.annotator.sentiment.sentiment_detector"], [417, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [418, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [419, "module-sparknlp.annotator.seq2seq.auto_gguf_reranker"], [420, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [421, "module-sparknlp.annotator.seq2seq.bart_transformer"], [422, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [423, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [424, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [425, "module-sparknlp.annotator.seq2seq"], [426, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [427, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [428, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [429, "module-sparknlp.annotator.seq2seq.marian_transformer"], [430, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [431, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [432, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [433, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [434, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [435, "module-sparknlp.annotator.seq2seq.phi4_transformer"], [436, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [437, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [438, "module-sparknlp.annotator.seq2seq.t5_transformer"], [439, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [440, "module-sparknlp.annotator.similarity"], [441, "module-sparknlp.annotator.spell_check.context_spell_checker"], [442, "module-sparknlp.annotator.spell_check"], [443, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [444, "module-sparknlp.annotator.spell_check.symmetric_delete"], [445, "module-sparknlp.annotator.stemmer"], [446, "module-sparknlp.annotator.stop_words_cleaner"], [447, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [448, "module-sparknlp.annotator.token.chunk_tokenizer"], [449, "module-sparknlp.annotator.token"], [450, "module-sparknlp.annotator.token.recursive_tokenizer"], [451, "module-sparknlp.annotator.token.regex_tokenizer"], [452, "module-sparknlp.annotator.token.tokenizer"], [453, "module-sparknlp.annotator.token2_chunk"], [454, "module-sparknlp.annotator.ws"], [455, "module-sparknlp.annotator.ws.word_segmenter"], [456, "module-sparknlp.base.audio_assembler"], [457, "module-sparknlp.base.doc2_chunk"], [458, "module-sparknlp.base.document_assembler"], [459, "module-sparknlp.base.embeddings_finisher"], [460, "module-sparknlp.base.finisher"], [461, "module-sparknlp.base.gguf_ranking_finisher"], [462, "module-sparknlp.base.graph_finisher"], [463, "module-sparknlp.base.has_recursive_fit"], [464, "module-sparknlp.base.has_recursive_transform"], [465, "module-sparknlp.base.image_assembler"], [466, "module-sparknlp.base"], [467, "module-sparknlp.base.light_pipeline"], [468, "module-sparknlp.base.multi_document_assembler"], [469, "module-sparknlp.base.prompt_assembler"], [470, "module-sparknlp.base.recursive_pipeline"], [471, "module-sparknlp.base.table_assembler"], [472, "module-sparknlp.base.token_assembler"], [473, "module-sparknlp.common.annotator_approach"], [474, "module-sparknlp.common.annotator_model"], [475, "module-sparknlp.common.annotator_properties"], [476, "module-sparknlp.common.annotator_type"], [477, "module-sparknlp.common.coverage_result"], [478, "module-sparknlp.common"], [479, "module-sparknlp.common.match_strategy"], [480, "module-sparknlp.common.properties"], [481, "module-sparknlp.common.read_as"], [482, "module-sparknlp.common.recursive_annotator_approach"], [483, "module-sparknlp.common.storage"], [484, "module-sparknlp.common.utils"], [485, "module-sparknlp.functions"], [486, "module-sparknlp"], [487, "module-sparknlp.internal.annotator_java_ml"], [488, "module-sparknlp.internal.annotator_transformer"], [489, "module-sparknlp.internal.extended_java_wrapper"], [490, "module-sparknlp.internal"], [491, "module-sparknlp.internal.params_getters_setters"], [492, "module-sparknlp.internal.recursive"], [493, "module-sparknlp.logging.comet"], [494, "module-sparknlp.logging"], [495, "module-sparknlp.partition"], [496, "module-sparknlp.partition.partition"], [497, "module-sparknlp.partition.partition_properties"], [498, "module-sparknlp.partition.partition_transformer"], [499, "module-sparknlp.pretrained"], [500, "module-sparknlp.pretrained.pretrained_pipeline"], [501, "module-sparknlp.pretrained.resource_downloader"], [502, "module-sparknlp.pretrained.utils"], [503, "module-sparknlp.reader.enums"], [504, "module-sparknlp.reader"], [505, "module-sparknlp.reader.pdf_to_text"], [506, "module-sparknlp.reader.reader2doc"], [507, "module-sparknlp.reader.reader2image"], [508, "module-sparknlp.reader.reader2table"], [509, "module-sparknlp.reader.sparknlp_reader"], [510, "module-sparknlp.training.conll"], [511, "module-sparknlp.training.conllu"], [512, "module-sparknlp.training"], [513, "module-sparknlp.training.pos"], [514, "module-sparknlp.training.pub_tator"], [515, "module-sparknlp.training.spacy_to_annotation"], [516, "module-sparknlp.training.tfgraphs"], [517, "module-sparknlp.upload_to_hub"], [518, "module-sparknlp.util"]], "read() (in module sparknlp)": [[1, "sparknlp.read"], [486, "sparknlp.read"]], "sparknlp": [[1, "module-sparknlp"], [486, "module-sparknlp"]], "start() (in module sparknlp)": [[1, "sparknlp.start"], [486, "sparknlp.start"]], "version() (in module sparknlp)": [[1, "sparknlp.version"], [486, "sparknlp.version"]], "annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"], [261, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"], [261, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"], [261, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"], [261, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"], [261, "sparknlp.annotation.Annotation.fromRow"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"], [261, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"], [261, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"], [262, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"], [262, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"], [262, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"], [263, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"], [263, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"], [263, "module-sparknlp.annotation_image"]], "sparknlp.annotator": [[5, "module-sparknlp.annotator"], [382, "module-sparknlp.annotator"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"], [265, "module-sparknlp.annotator.audio"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"], [264, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "configprotobytes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.configProtoBytes"], [264, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.configProtoBytes"]], "inputannotatortypes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.inputAnnotatorTypes"], [264, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"], [264, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "name (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.name"], [264, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.name"]], "outputannotatortype (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.outputAnnotatorType"], [264, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.outputAnnotatorType"]], "pretrained() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"], [264, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"], [264, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"], [264, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"], [266, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "configprotobytes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.configProtoBytes"], [266, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.configProtoBytes"]], "inputannotatortypes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.inputAnnotatorTypes"], [266, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"], [266, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "name (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.name"], [266, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.name"]], "outputannotatortype (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.outputAnnotatorType"], [266, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.outputAnnotatorType"]], "pretrained() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"], [266, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"], [266, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [266, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "configprotobytes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.configProtoBytes"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.configProtoBytes"]], "getismultilingual() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "inputannotatortypes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.inputAnnotatorTypes"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.inputAnnotatorTypes"]], "ismultilingual (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.isMultilingual"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.isMultilingual"]], "language (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.language"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.language"]], "loadsavedmodel() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "name (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.name"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.name"]], "outputannotatortype (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.outputAnnotatorType"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.outputAnnotatorType"]], "pretrained() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"], [267, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"], [267, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc"], [268, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "inputannotatortypes (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.inputAnnotatorTypes"], [268, "sparknlp.annotator.chunk2_doc.Chunk2Doc.inputAnnotatorTypes"]], "name (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.name"], [268, "sparknlp.annotator.chunk2_doc.Chunk2Doc.name"]], "outputannotatortype (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.outputAnnotatorType"], [268, "sparknlp.annotator.chunk2_doc.Chunk2Doc.outputAnnotatorType"]], "setparams() (chunk2doc method)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.setParams"], [268, "sparknlp.annotator.chunk2_doc.Chunk2Doc.setParams"]], "sparknlp.annotator.chunk2_doc": [[10, "module-sparknlp.annotator.chunk2_doc"], [268, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[11, "sparknlp.annotator.chunker.Chunker"], [269, "sparknlp.annotator.chunker.Chunker"]], "inputannotatortypes (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.inputAnnotatorTypes"], [269, "sparknlp.annotator.chunker.Chunker.inputAnnotatorTypes"]], "name (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.name"], [269, "sparknlp.annotator.chunker.Chunker.name"]], "outputannotatortype (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.outputAnnotatorType"], [269, "sparknlp.annotator.chunker.Chunker.outputAnnotatorType"]], "regexparsers (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.regexParsers"], [269, "sparknlp.annotator.chunker.Chunker.regexParsers"]], "setregexparsers() (chunker method)": [[11, "sparknlp.annotator.chunker.Chunker.setRegexParsers"], [269, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[11, "module-sparknlp.annotator.chunker"], [269, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl": [[12, "module-sparknlp.annotator.classifier_dl"], [295, "module-sparknlp.annotator.classifier_dl"]], "albertformultiplechoice (class in sparknlp.annotator.classifier_dl.albert_for_multiple_choice)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice"], [270, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice"]], "choicesdelimiter (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.choicesDelimiter"], [270, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.inputAnnotatorTypes"], [270, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.loadSavedModel"], [270, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.loadSavedModel"]], "name (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.name"], [270, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.name"]], "outputannotatortype (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.outputAnnotatorType"], [270, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.outputAnnotatorType"]], "pretrained() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.pretrained"], [270, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (albertformultiplechoice method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.setChoicesDelimiter"], [270, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [270, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"], [271, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "coalescesentences (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.coalesceSentences"], [271, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.coalesceSentences"]], "configprotobytes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.configProtoBytes"], [271, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.inputAnnotatorTypes"], [271, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"], [271, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "name (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.name"], [271, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.name"]], "outputannotatortype (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.outputAnnotatorType"], [271, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"], [271, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"], [271, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [271, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"], [272, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "coalescesentences (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.coalesceSentences"], [272, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.coalesceSentences"]], "configprotobytes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.configProtoBytes"], [272, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.configProtoBytes"]], "getclasses() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"], [272, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "inputannotatortypes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.inputAnnotatorTypes"], [272, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"], [272, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "name (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.name"], [272, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.name"]], "outputannotatortype (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.outputAnnotatorType"], [272, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.outputAnnotatorType"]], "pretrained() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"], [272, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"], [272, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"], [272, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [272, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"], [273, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "configprotobytes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.configProtoBytes"], [273, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.configProtoBytes"]], "getclasses() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"], [273, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "inputannotatortypes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.inputAnnotatorTypes"], [273, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"], [273, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "name (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.name"], [273, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.name"]], "outputannotatortype (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.outputAnnotatorType"], [273, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.outputAnnotatorType"]], "pretrained() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"], [273, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"], [273, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [273, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "albertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"], [274, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"]], "coalescesentences (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.coalesceSentences"], [274, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.coalesceSentences"]], "configprotobytes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.configProtoBytes"], [274, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.configProtoBytes"]], "getclasses() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"], [274, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"]], "inputannotatortypes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.inputAnnotatorTypes"], [274, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"], [274, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"]], "name (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.name"], [274, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.name"]], "outputannotatortype (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.outputAnnotatorType"], [274, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"], [274, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"]], "setcoalescesentences() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"], [274, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"], [274, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [274, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "coalescesentences (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.coalesceSentences"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.coalesceSentences"]], "configprotobytes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.configProtoBytes"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.configProtoBytes"]], "getclasses() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "inputannotatortypes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.inputAnnotatorTypes"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "maxsentencelength (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.maxSentenceLength"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.maxSentenceLength"]], "name (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.name"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.name"]], "outputannotatortype (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.outputAnnotatorType"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"], [275, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [275, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertformultiplechoice (class in sparknlp.annotator.classifier_dl.bert_for_multiple_choice)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"], [276, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"]], "choicesdelimiter (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.choicesDelimiter"], [276, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.inputAnnotatorTypes"], [276, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"], [276, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"]], "name (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.name"], [276, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.name"]], "outputannotatortype (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.outputAnnotatorType"], [276, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.outputAnnotatorType"]], "pretrained() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"], [276, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (bertformultiplechoice method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"], [276, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [276, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"], [277, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "coalescesentences (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.coalesceSentences"], [277, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.coalesceSentences"]], "configprotobytes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.configProtoBytes"], [277, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.inputAnnotatorTypes"], [277, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"], [277, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "name (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.name"], [277, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.name"]], "outputannotatortype (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.outputAnnotatorType"], [277, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"], [277, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"], [277, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [277, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"], [278, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "coalescesentences (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.coalesceSentences"], [278, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.coalesceSentences"]], "configprotobytes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.configProtoBytes"], [278, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.configProtoBytes"]], "getclasses() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"], [278, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "inputannotatortypes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.inputAnnotatorTypes"], [278, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"], [278, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "name (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.name"], [278, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.name"]], "outputannotatortype (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.outputAnnotatorType"], [278, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.outputAnnotatorType"]], "pretrained() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"], [278, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"], [278, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"], [278, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [278, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"], [279, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "configprotobytes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.configProtoBytes"], [279, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.configProtoBytes"]], "getclasses() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"], [279, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "inputannotatortypes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.inputAnnotatorTypes"], [279, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"], [279, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "name (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.name"], [279, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.name"]], "outputannotatortype (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.outputAnnotatorType"], [279, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.outputAnnotatorType"]], "pretrained() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"], [279, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"], [279, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [279, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"], [280, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "coalescesentences (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.coalesceSentences"], [280, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.coalesceSentences"]], "configprotobytes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.configProtoBytes"], [280, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.configProtoBytes"]], "getclasses() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"], [280, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "inputannotatortypes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.inputAnnotatorTypes"], [280, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"], [280, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "name (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.name"], [280, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.name"]], "outputannotatortype (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.outputAnnotatorType"], [280, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"], [280, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"], [280, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"], [280, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [280, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"], [281, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "coalescesentences (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.coalesceSentences"], [281, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.configProtoBytes"], [281, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.inputAnnotatorTypes"], [281, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"], [281, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "name (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.name"], [281, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.name"]], "outputannotatortype (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.outputAnnotatorType"], [281, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"], [281, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"], [281, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [281, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"], [282, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "coalescesentences (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.coalesceSentences"], [282, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.coalesceSentences"]], "configprotobytes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.configProtoBytes"], [282, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.configProtoBytes"]], "getclasses() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"], [282, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "inputannotatortypes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.inputAnnotatorTypes"], [282, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"], [282, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "name (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.name"], [282, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.name"]], "outputannotatortype (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.outputAnnotatorType"], [282, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"], [282, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"], [282, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"], [282, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [282, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"], [283, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "configprotobytes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.configProtoBytes"], [283, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.configProtoBytes"]], "getclasses() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"], [283, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "inputannotatortypes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.inputAnnotatorTypes"], [283, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"], [283, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "name (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.name"], [283, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.name"]], "outputannotatortype (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.outputAnnotatorType"], [283, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.outputAnnotatorType"]], "pretrained() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"], [283, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"], [283, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [283, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "camembertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"], [284, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"]], "coalescesentences (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.coalesceSentences"], [284, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.configProtoBytes"], [284, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.configProtoBytes"]], "getclasses() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"], [284, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"]], "inputannotatortypes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.inputAnnotatorTypes"], [284, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"], [284, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"]], "name (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.name"], [284, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.name"]], "outputannotatortype (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.outputAnnotatorType"], [284, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"], [284, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"], [284, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"], [284, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [284, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "classes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.classes"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.classes"]], "configprotobytes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.configProtoBytes"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.configProtoBytes"]], "dropout (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.dropout"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.dropout"]], "inputannotatortypes (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.inputAnnotatorTypes"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.inputAnnotatorTypes"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.inputAnnotatorTypes"]], "name (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.name"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.name"]], "outputannotatortype (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.outputAnnotatorType"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.outputAnnotatorType"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.outputAnnotatorType"]], "pretrained() (classifierdlmodel static method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"], [285, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [285, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"], [286, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "coalescesentences (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.coalesceSentences"], [286, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.configProtoBytes"], [286, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.inputAnnotatorTypes"], [286, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"], [286, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "name (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.name"], [286, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.name"]], "outputannotatortype (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.outputAnnotatorType"], [286, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"], [286, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"], [286, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [286, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"], [287, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "coalescesentences (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.coalesceSentences"], [287, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.configProtoBytes"], [287, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.configProtoBytes"]], "getclasses() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"], [287, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "inputannotatortypes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.inputAnnotatorTypes"], [287, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"], [287, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "name (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.name"], [287, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.name"]], "outputannotatortype (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.outputAnnotatorType"], [287, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"], [287, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"], [287, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"], [287, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [287, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"], [288, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "configprotobytes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.configProtoBytes"], [288, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.configProtoBytes"]], "getclasses() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"], [288, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "inputannotatortypes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.inputAnnotatorTypes"], [288, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"], [288, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "name (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.name"], [288, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.name"]], "outputannotatortype (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.outputAnnotatorType"], [288, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"], [288, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"], [288, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [288, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"], [289, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "coalescesentences (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.coalesceSentences"], [289, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.configProtoBytes"], [289, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"], [289, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.inputAnnotatorTypes"], [289, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"], [289, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "name (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.name"], [289, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.name"]], "outputannotatortype (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.outputAnnotatorType"], [289, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"], [289, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"], [289, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"], [289, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [289, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"], [290, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "coalescesentences (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.coalesceSentences"], [290, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.configProtoBytes"], [290, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.inputAnnotatorTypes"], [290, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"], [290, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "name (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.name"], [290, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.name"]], "outputannotatortype (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.outputAnnotatorType"], [290, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"], [290, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"], [290, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [290, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"], [291, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "coalescesentences (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.coalesceSentences"], [291, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.configProtoBytes"], [291, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"], [291, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.inputAnnotatorTypes"], [291, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"], [291, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "name (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.name"], [291, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.name"]], "outputannotatortype (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.outputAnnotatorType"], [291, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"], [291, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"], [291, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"], [291, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [291, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"], [292, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "configprotobytes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.configProtoBytes"], [292, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.configProtoBytes"]], "getclasses() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"], [292, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "inputannotatortypes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.inputAnnotatorTypes"], [292, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"], [292, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "name (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.name"], [292, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.name"]], "outputannotatortype (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.outputAnnotatorType"], [292, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.outputAnnotatorType"]], "pretrained() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"], [292, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"], [292, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [292, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"], [293, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "coalescesentences (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.coalesceSentences"], [293, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.configProtoBytes"], [293, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.configProtoBytes"]], "getclasses() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"], [293, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "inputannotatortypes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.inputAnnotatorTypes"], [293, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"], [293, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "name (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.name"], [293, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.name"]], "outputannotatortype (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.outputAnnotatorType"], [293, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"], [293, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"], [293, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"], [293, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [293, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "distilbertformultiplechoice (class in sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice"], [294, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice"]], "choicesdelimiter (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.choicesDelimiter"], [294, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.inputAnnotatorTypes"], [294, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.loadSavedModel"], [294, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.loadSavedModel"]], "name (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.name"], [294, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.name"]], "outputannotatortype (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.outputAnnotatorType"], [294, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.outputAnnotatorType"]], "pretrained() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.pretrained"], [294, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (distilbertformultiplechoice method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.setChoicesDelimiter"], [294, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [294, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"], [296, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "coalescesentences (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.coalesceSentences"], [296, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.coalesceSentences"]], "configprotobytes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.configProtoBytes"], [296, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.inputAnnotatorTypes"], [296, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"], [296, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "name (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.name"], [296, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.name"]], "outputannotatortype (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.outputAnnotatorType"], [296, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.outputAnnotatorType"]], "pretrained() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"], [296, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"], [296, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [296, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"], [297, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "coalescesentences (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.coalesceSentences"], [297, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.coalesceSentences"]], "configprotobytes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.configProtoBytes"], [297, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.configProtoBytes"]], "getclasses() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"], [297, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "inputannotatortypes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.inputAnnotatorTypes"], [297, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"], [297, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "name (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.name"], [297, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.name"]], "outputannotatortype (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.outputAnnotatorType"], [297, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.outputAnnotatorType"]], "pretrained() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"], [297, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"], [297, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"], [297, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [297, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"], [298, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "configprotobytes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.configProtoBytes"], [298, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.configProtoBytes"]], "getclasses() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"], [298, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "inputannotatortypes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.inputAnnotatorTypes"], [298, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"], [298, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "name (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.name"], [298, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.name"]], "outputannotatortype (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.outputAnnotatorType"], [298, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.outputAnnotatorType"]], "pretrained() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"], [298, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"], [298, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [298, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"], [299, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "inputannotatortypes (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.inputAnnotatorTypes"], [299, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"], [299, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "name (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.name"], [299, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.name"]], "outputannotatortype (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.outputAnnotatorType"], [299, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.outputAnnotatorType"]], "pretrained() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"], [299, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [299, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"], [300, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "coalescesentences (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.coalesceSentences"], [300, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.coalesceSentences"]], "getclasses() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"], [300, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "inputannotatortypes (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.inputAnnotatorTypes"], [300, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"], [300, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "name (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.name"], [300, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.name"]], "outputannotatortype (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.outputAnnotatorType"], [300, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.outputAnnotatorType"]], "pretrained() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"], [300, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"], [300, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [300, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "mpnetfortokenclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"], [301, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"]], "configprotobytes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.configProtoBytes"], [301, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.configProtoBytes"]], "getclasses() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"], [301, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"]], "inputannotatortypes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.inputAnnotatorTypes"], [301, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"], [301, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"]], "name (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.name"], [301, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.name"]], "outputannotatortype (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.outputAnnotatorType"], [301, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.outputAnnotatorType"]], "pretrained() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"], [301, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"]], "setconfigprotobytes() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"], [301, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [301, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "classes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.classes"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.classes"]], "configprotobytes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.configProtoBytes"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.configProtoBytes"]], "inputannotatortypes (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.inputAnnotatorTypes"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.inputAnnotatorTypes"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.inputAnnotatorTypes"]], "name (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.name"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.name"]], "outputannotatortype (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.outputAnnotatorType"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.outputAnnotatorType"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.outputAnnotatorType"]], "pretrained() (multiclassifierdlmodel static method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setshuffleperepoch() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setShufflePerEpoch"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setShufflePerEpoch"]], "setthreshold() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "shuffleperepoch (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.shufflePerEpoch"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.shufflePerEpoch"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [302, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "threshold (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.threshold"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.threshold"]], "threshold (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.threshold"], [302, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.threshold"]], "robertaformultiplechoice (class in sparknlp.annotator.classifier_dl.roberta_for_multiple_choice)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice"], [303, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice"]], "choicesdelimiter (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.choicesDelimiter"], [303, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.inputAnnotatorTypes"], [303, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.loadSavedModel"], [303, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.loadSavedModel"]], "name (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.name"], [303, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.name"]], "outputannotatortype (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.outputAnnotatorType"], [303, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.pretrained"], [303, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.pretrained"]], "setchoicesdelimiter() (robertaformultiplechoice method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.setChoicesDelimiter"], [303, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [303, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"], [304, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "coalescesentences (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.coalesceSentences"], [304, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.configProtoBytes"], [304, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.inputAnnotatorTypes"], [304, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"], [304, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "name (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.name"], [304, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.name"]], "outputannotatortype (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.outputAnnotatorType"], [304, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"], [304, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"], [304, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [304, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"], [305, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "coalescesentences (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.coalesceSentences"], [305, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.configProtoBytes"], [305, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"], [305, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.inputAnnotatorTypes"], [305, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"], [305, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "name (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.name"], [305, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.name"]], "outputannotatortype (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.outputAnnotatorType"], [305, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"], [305, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"], [305, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"], [305, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [305, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"], [306, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "configprotobytes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.configProtoBytes"], [306, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.configProtoBytes"]], "getclasses() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"], [306, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "inputannotatortypes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.inputAnnotatorTypes"], [306, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"], [306, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "maxsentencelength (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.maxSentenceLength"], [306, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.maxSentenceLength"]], "name (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.name"], [306, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.name"]], "outputannotatortype (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.outputAnnotatorType"], [306, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"], [306, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"], [306, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"], [306, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [306, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "coalescesentences (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.coalesceSentences"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.configProtoBytes"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.inputAnnotatorTypes"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.maxSentenceLength"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.maxSentenceLength"]], "name (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.name"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.name"]], "outputannotatortype (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.outputAnnotatorType"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"], [307, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [307, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "classes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.classes"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.classes"]], "configprotobytes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.configProtoBytes"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.configProtoBytes"]], "dropout (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.dropout"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.dropout"]], "inputannotatortypes (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.inputAnnotatorTypes"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.inputAnnotatorTypes"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.inputAnnotatorTypes"]], "name (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.name"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.name"]], "outputannotatortype (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.outputAnnotatorType"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.outputAnnotatorType"]], "outputannotatortype (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.outputAnnotatorType"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.outputAnnotatorType"]], "pretrained() (sentimentdlmodel static method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [308, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "threshold (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.threshold"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.threshold"]], "threshold (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.threshold"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.threshold"]], "thresholdlabel (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.thresholdLabel"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.thresholdLabel"]], "thresholdlabel (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.thresholdLabel"], [308, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.thresholdLabel"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"], [309, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "inputannotatortypes (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.inputAnnotatorTypes"], [309, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"], [309, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "name (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.name"], [309, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.name"]], "pretrained() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"], [309, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [309, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaformultiplechoice (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice"], [310, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice"]], "inputannotatortypes (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.inputAnnotatorTypes"], [310, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.loadSavedModel"], [310, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.loadSavedModel"]], "name (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.name"], [310, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.name"]], "outputannotatortype (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.outputAnnotatorType"], [310, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.pretrained"], [310, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [310, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"], [311, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "coalescesentences (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.coalesceSentences"], [311, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.configProtoBytes"], [311, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.inputAnnotatorTypes"], [311, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"], [311, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "name (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.name"], [311, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.name"]], "outputannotatortype (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.outputAnnotatorType"], [311, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"], [311, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"], [311, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [311, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"], [312, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "coalescesentences (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.coalesceSentences"], [312, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.configProtoBytes"], [312, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"], [312, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.inputAnnotatorTypes"], [312, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"], [312, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "name (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.name"], [312, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.name"]], "outputannotatortype (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.outputAnnotatorType"], [312, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"], [312, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"], [312, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"], [312, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [312, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"], [313, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "configprotobytes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.configProtoBytes"], [313, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.configProtoBytes"]], "getclasses() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"], [313, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "inputannotatortypes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.inputAnnotatorTypes"], [313, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"], [313, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "name (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.name"], [313, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.name"]], "outputannotatortype (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.outputAnnotatorType"], [313, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"], [313, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"], [313, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [313, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "coalescesentences (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.coalesceSentences"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.configProtoBytes"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.inputAnnotatorTypes"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.maxSentenceLength"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.maxSentenceLength"]], "name (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.name"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.name"]], "outputannotatortype (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.outputAnnotatorType"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"], [314, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [314, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"], [315, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "coalescesentences (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.coalesceSentences"], [315, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.coalesceSentences"]], "configprotobytes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.configProtoBytes"], [315, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.configProtoBytes"]], "getclasses() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"], [315, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "inputannotatortypes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.inputAnnotatorTypes"], [315, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"], [315, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "name (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.name"], [315, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.name"]], "outputannotatortype (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.outputAnnotatorType"], [315, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"], [315, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"], [315, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"], [315, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [315, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"], [316, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "configprotobytes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.configProtoBytes"], [316, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.configProtoBytes"]], "getclasses() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"], [316, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "inputannotatortypes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.inputAnnotatorTypes"], [316, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"], [316, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "name (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.name"], [316, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.name"]], "outputannotatortype (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.outputAnnotatorType"], [316, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.outputAnnotatorType"]], "pretrained() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"], [316, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"], [316, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [316, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners": [[59, "module-sparknlp.annotator.cleaners"], [319, "module-sparknlp.annotator.cleaners"]], "cleaner (class in sparknlp.annotator.cleaners.cleaner)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner"]], "bullets (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.bullets"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.bullets"]], "cleanpostfixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPostfixPattern"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPostfixPattern"]], "cleanprefixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPrefixPattern"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPrefixPattern"]], "cleanermode (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanerMode"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanerMode"]], "dashes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.dashes"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.dashes"]], "encoding (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.encoding"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.encoding"]], "extrawhitespace (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.extraWhitespace"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.extraWhitespace"]], "ignorecase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.ignoreCase"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.ignoreCase"]], "inputannotatortypes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.inputAnnotatorTypes"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.inputAnnotatorTypes"]], "lowercase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.lowercase"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.lowercase"]], "name (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.name"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.name"]], "outputannotatortype (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.outputAnnotatorType"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.outputAnnotatorType"]], "setbullets() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setBullets"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.setBullets"]], "setcleanpostfixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPostfixPattern"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPostfixPattern"]], "setcleanprefixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPrefixPattern"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPrefixPattern"]], "setcleanermode() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanerMode"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanerMode"]], "setdashes() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setDashes"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.setDashes"]], "setencoding() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setEncoding"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.setEncoding"]], "setextrawhitespace() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setExtraWhitespace"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.setExtraWhitespace"]], "setignorecase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setIgnoreCase"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.setIgnoreCase"]], "setlowercase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setLowercase"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.setLowercase"]], "setstrip() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setStrip"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.setStrip"]], "settrailingpunctuation() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setTrailingPunctuation"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.setTrailingPunctuation"]], "sparknlp.annotator.cleaners.cleaner": [[60, "module-sparknlp.annotator.cleaners.cleaner"], [317, "module-sparknlp.annotator.cleaners.cleaner"]], "strip (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.strip"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.strip"]], "trailingpunctuation (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.trailingPunctuation"], [317, "sparknlp.annotator.cleaners.cleaner.Cleaner.trailingPunctuation"]], "extractor (class in sparknlp.annotator.cleaners.extractor)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor"], [318, "sparknlp.annotator.cleaners.extractor.Extractor"]], "emailaddress (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailAddress"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.emailAddress"]], "emaildatetimetzpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailDateTimeTzPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.emailDateTimeTzPattern"]], "extractormode (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.extractorMode"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.extractorMode"]], "imageurlpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.imageUrlPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.imageUrlPattern"]], "index (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.index"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.index"]], "inputannotatortypes (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.inputAnnotatorTypes"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.inputAnnotatorTypes"]], "ipaddressnamepattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressNamePattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressNamePattern"]], "ipaddresspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressPattern"]], "mapiidpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.mapiIdPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.mapiIdPattern"]], "name (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.name"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.name"]], "outputannotatortype (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.outputAnnotatorType"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.outputAnnotatorType"]], "setemailaddress() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailAddress"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailAddress"]], "setemaildatetimetzpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailDateTimeTzPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailDateTimeTzPattern"]], "setextractormode() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setExtractorMode"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.setExtractorMode"]], "setimageurlpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setImageUrlPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.setImageUrlPattern"]], "setindex() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIndex"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.setIndex"]], "setipaddressnamepattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressNamePattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressNamePattern"]], "setipaddresspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressPattern"]], "setmapiidpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setMapiIdPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.setMapiIdPattern"]], "settextpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setTextPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.setTextPattern"]], "setusphonenumberspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setUsPhoneNumbersPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.setUsPhoneNumbersPattern"]], "sparknlp.annotator.cleaners.extractor": [[61, "module-sparknlp.annotator.cleaners.extractor"], [318, "module-sparknlp.annotator.cleaners.extractor"]], "textpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.textPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.textPattern"]], "usphonenumberspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.usPhoneNumbersPattern"], [318, "sparknlp.annotator.cleaners.extractor.Extractor.usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[62, "module-sparknlp.annotator.coref"], [320, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "configprotobytes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.configProtoBytes"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.configProtoBytes"]], "inputannotatortypes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.inputAnnotatorTypes"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.inputAnnotatorTypes"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "maxsegmentlength (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.maxSegmentLength"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.maxSegmentLength"]], "name (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.name"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.name"]], "outputannotatortype (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.outputAnnotatorType"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.outputAnnotatorType"]], "pretrained() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[63, "module-sparknlp.annotator.coref.spanbert_coref"], [321, "module-sparknlp.annotator.coref.spanbert_coref"]], "textgenre (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.textGenre"], [321, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.textGenre"]], "sparknlp.annotator.cv": [[64, "module-sparknlp.annotator.cv"], [327, "module-sparknlp.annotator.cv"]], "blipforquestionanswering (class in sparknlp.annotator.cv.blip_for_question_answering)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering"], [322, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering"]], "configprotobytes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.configProtoBytes"], [322, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.inputAnnotatorTypes"], [322, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.loadSavedModel"], [322, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.loadSavedModel"]], "maxsentencelength (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.maxSentenceLength"], [322, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.maxSentenceLength"]], "name (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.name"], [322, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.name"]], "outputannotatortype (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.outputAnnotatorType"], [322, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.outputAnnotatorType"]], "pretrained() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.pretrained"], [322, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.pretrained"]], "setmaxsentencesize() (blipforquestionanswering method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.setMaxSentenceSize"], [322, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.setMaxSentenceSize"]], "sparknlp.annotator.cv.blip_for_question_answering": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"], [322, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"], [323, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "configprotobytes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.configProtoBytes"], [323, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.configProtoBytes"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"], [323, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "inputannotatortypes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.inputAnnotatorTypes"], [323, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"], [323, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "name (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.name"], [323, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.name"]], "outputannotatortype (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.outputAnnotatorType"], [323, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.outputAnnotatorType"]], "pretrained() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"], [323, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [323, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "configprotobytes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.configProtoBytes"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.configProtoBytes"]], "croppct (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.cropPct"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.cropPct"]], "dorescale (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.doRescale"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.doRescale"]], "getclasses() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "inputannotatortypes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.inputAnnotatorTypes"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "name (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.name"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.name"]], "outputannotatortype (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.outputAnnotatorType"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.outputAnnotatorType"]], "pretrained() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "rescalefactor (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.rescaleFactor"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.rescaleFactor"]], "setconfigprotobytes() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"], [324, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [324, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "florence2transformer (class in sparknlp.annotator.cv.florence2_transformer)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer"]], "batchsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.batchSize"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.batchSize"]], "beamsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.beamSize"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.beamSize"]], "dosample (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.doSample"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.doSample"]], "ignoretokenids (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.ignoreTokenIds"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.ignoreTokenIds"]], "inputannotatortypes (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.inputAnnotatorTypes"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (florence2transformer static method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.loadSavedModel"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.loadSavedModel"]], "maxoutputlength (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.maxOutputLength"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.maxOutputLength"]], "minoutputlength (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.minOutputLength"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.minOutputLength"]], "name (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.name"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.name"]], "norepeatngramsize (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.noRepeatNgramSize"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.noRepeatNgramSize"]], "outputannotatortype (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.outputAnnotatorType"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.outputAnnotatorType"]], "pretrained() (florence2transformer static method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.pretrained"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.pretrained"]], "repetitionpenalty (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.repetitionPenalty"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.repetitionPenalty"]], "setbatchsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBatchSize"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBatchSize"]], "setbeamsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBeamSize"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setBeamSize"]], "setdosample() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setDoSample"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setDoSample"]], "setignoretokenids() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setIgnoreTokenIds"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMaxOutputLength"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMaxOutputLength"]], "setminoutputlength() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMinOutputLength"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setNoRepeatNgramSize"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setRepetitionPenalty"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setRepetitionPenalty"]], "settemperature() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTemperature"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTemperature"]], "settopk() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopK"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopK"]], "settopp() (florence2transformer method)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopP"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.setTopP"]], "sparknlp.annotator.cv.florence2_transformer": [[68, "module-sparknlp.annotator.cv.florence2_transformer"], [325, "module-sparknlp.annotator.cv.florence2_transformer"]], "temperature (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.temperature"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.temperature"]], "topk (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topK"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topK"]], "topp (florence2transformer attribute)": [[68, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topP"], [325, "sparknlp.annotator.cv.florence2_transformer.Florence2Transformer.topP"]], "gemma3formultimodal (class in sparknlp.annotator.cv.gemma3_for_multimodal)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal"]], "beamsize (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.beamSize"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.beamSize"]], "configprotobytes (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.configProtoBytes"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.configProtoBytes"]], "dosample (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.doSample"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.doSample"]], "ignoretokenids (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.ignoreTokenIds"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.ignoreTokenIds"]], "inputannotatortypes (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.inputAnnotatorTypes"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (gemma3formultimodal static method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.loadSavedModel"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.loadSavedModel"]], "maxinputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxInputLength"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxInputLength"]], "maxoutputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxOutputLength"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxOutputLength"]], "minoutputlength (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.minOutputLength"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.minOutputLength"]], "name (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.name"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.name"]], "norepeatngramsize (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.noRepeatNgramSize"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.noRepeatNgramSize"]], "outputannotatortype (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.outputAnnotatorType"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.outputAnnotatorType"]], "pretrained() (gemma3formultimodal static method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.pretrained"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.pretrained"]], "repetitionpenalty (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.repetitionPenalty"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.repetitionPenalty"]], "setbeamsize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setBeamSize"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setBeamSize"]], "setconfigprotobytes() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setConfigProtoBytes"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setConfigProtoBytes"]], "setdosample() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setDoSample"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setDoSample"]], "setignoretokenids() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setIgnoreTokenIds"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxOutputLength"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxSentenceSize"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMinOutputLength"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setNoRepeatNgramSize"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setRepetitionPenalty"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setRepetitionPenalty"]], "settemperature() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTemperature"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTemperature"]], "settopk() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopK"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopK"]], "settopp() (gemma3formultimodal method)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopP"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopP"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[69, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [326, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "temperature (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.temperature"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.temperature"]], "topk (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topK"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topK"]], "topp (gemma3formultimodal attribute)": [[69, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topP"], [326, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topP"]], "internvlformultimodal (class in sparknlp.annotator.cv.internvl_for_multimodal)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal"]], "beamsize (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.beamSize"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.beamSize"]], "dosample (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.doSample"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.doSample"]], "ignoretokenids (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.ignoreTokenIds"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.ignoreTokenIds"]], "inputannotatortypes (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.inputAnnotatorTypes"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (internvlformultimodal static method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.loadSavedModel"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.loadSavedModel"]], "maxoutputlength (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.maxOutputLength"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.maxOutputLength"]], "minoutputlength (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.minOutputLength"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.minOutputLength"]], "name (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.name"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.name"]], "norepeatngramsize (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.noRepeatNgramSize"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.noRepeatNgramSize"]], "outputannotatortype (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.outputAnnotatorType"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.outputAnnotatorType"]], "pretrained() (internvlformultimodal static method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.pretrained"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.pretrained"]], "repetitionpenalty (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.repetitionPenalty"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.repetitionPenalty"]], "setbeamsize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setBeamSize"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setBeamSize"]], "setdosample() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setDoSample"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setDoSample"]], "setignoretokenids() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setIgnoreTokenIds"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxOutputLength"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxSentenceSize"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMinOutputLength"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setNoRepeatNgramSize"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setRepetitionPenalty"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setRepetitionPenalty"]], "settemperature() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTemperature"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTemperature"]], "settopk() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopK"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopK"]], "settopp() (internvlformultimodal method)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopP"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.setTopP"]], "sparknlp.annotator.cv.internvl_for_multimodal": [[70, "module-sparknlp.annotator.cv.internvl_for_multimodal"], [328, "module-sparknlp.annotator.cv.internvl_for_multimodal"]], "temperature (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.temperature"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.temperature"]], "topk (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topK"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topK"]], "topp (internvlformultimodal attribute)": [[70, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topP"], [328, "sparknlp.annotator.cv.internvl_for_multimodal.InternVLForMultiModal.topP"]], "janusformultimodal (class in sparknlp.annotator.cv.janus_for_multimodal)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal"]], "beamsize (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.beamSize"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.beamSize"]], "configprotobytes (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.configProtoBytes"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.configProtoBytes"]], "dosample (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.doSample"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.doSample"]], "ignoretokenids (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.ignoreTokenIds"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.ignoreTokenIds"]], "imagegeneratemode (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.imageGenerateMode"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.imageGenerateMode"]], "inputannotatortypes (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.inputAnnotatorTypes"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (janusformultimodal static method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.loadSavedModel"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.loadSavedModel"]], "maxoutputlength (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.maxOutputLength"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.maxOutputLength"]], "minoutputlength (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.minOutputLength"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.minOutputLength"]], "name (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.name"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.name"]], "norepeatngramsize (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.noRepeatNgramSize"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.noRepeatNgramSize"]], "numofparallelimages (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.numOfParallelImages"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.numOfParallelImages"]], "outputannotatortype (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.outputAnnotatorType"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.outputAnnotatorType"]], "pretrained() (janusformultimodal static method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.pretrained"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.pretrained"]], "repetitionpenalty (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.repetitionPenalty"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.repetitionPenalty"]], "setbeamsize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setBeamSize"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setBeamSize"]], "setconfigprotobytes() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setConfigProtoBytes"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setConfigProtoBytes"]], "setdosample() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setDoSample"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setDoSample"]], "setignoretokenids() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setIgnoreTokenIds"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setIgnoreTokenIds"]], "setimagegeneratemode() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setImageGenerateMode"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setImageGenerateMode"]], "setmaxoutputlength() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxOutputLength"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxSentenceSize"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMinOutputLength"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNoRepeatNgramSize"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNoRepeatNgramSize"]], "setnumofparallelimages() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNumOfParallelImages"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNumOfParallelImages"]], "setrepetitionpenalty() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setRepetitionPenalty"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setRepetitionPenalty"]], "settemperature() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTemperature"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTemperature"]], "settopk() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopK"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopK"]], "settopp() (janusformultimodal method)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopP"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopP"]], "sparknlp.annotator.cv.janus_for_multimodal": [[71, "module-sparknlp.annotator.cv.janus_for_multimodal"], [329, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "temperature (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.temperature"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.temperature"]], "topk (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topK"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topK"]], "topp (janusformultimodal attribute)": [[71, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topP"], [329, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topP"]], "llavaformultimodal (class in sparknlp.annotator.cv.llava_for_multimodal)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal"]], "beamsize (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.beamSize"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.beamSize"]], "configprotobytes (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.configProtoBytes"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.configProtoBytes"]], "dosample (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.doSample"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.doSample"]], "ignoretokenids (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.ignoreTokenIds"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.ignoreTokenIds"]], "inputannotatortypes (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.inputAnnotatorTypes"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (llavaformultimodal static method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.loadSavedModel"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.loadSavedModel"]], "maxoutputlength (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.maxOutputLength"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.maxOutputLength"]], "minoutputlength (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.minOutputLength"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.minOutputLength"]], "name (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.name"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.name"]], "norepeatngramsize (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.noRepeatNgramSize"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.noRepeatNgramSize"]], "outputannotatortype (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.outputAnnotatorType"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.outputAnnotatorType"]], "pretrained() (llavaformultimodal static method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.pretrained"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.pretrained"]], "repetitionpenalty (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.repetitionPenalty"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.repetitionPenalty"]], "setbeamsize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setBeamSize"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setBeamSize"]], "setconfigprotobytes() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setConfigProtoBytes"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setConfigProtoBytes"]], "setdosample() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setDoSample"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setDoSample"]], "setignoretokenids() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setIgnoreTokenIds"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxOutputLength"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxSentenceSize"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMinOutputLength"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setNoRepeatNgramSize"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setRepetitionPenalty"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setRepetitionPenalty"]], "settemperature() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTemperature"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTemperature"]], "settopk() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopK"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopK"]], "settopp() (llavaformultimodal method)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopP"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[72, "module-sparknlp.annotator.cv.llava_for_multimodal"], [330, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "temperature (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.temperature"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.temperature"]], "topk (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topK"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topK"]], "topp (llavaformultimodal attribute)": [[72, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topP"], [330, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topP"]], "mllamaformultimodal (class in sparknlp.annotator.cv.mllama_for_multimodal)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal"]], "beamsize (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.beamSize"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.beamSize"]], "configprotobytes (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.configProtoBytes"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.configProtoBytes"]], "dosample (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.doSample"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.doSample"]], "ignoretokenids (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.ignoreTokenIds"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.ignoreTokenIds"]], "inputannotatortypes (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.inputAnnotatorTypes"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.inputAnnotatorTypes"]], "loadsavedmodel() (mllamaformultimodal static method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.loadSavedModel"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.loadSavedModel"]], "maxoutputlength (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.maxOutputLength"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.maxOutputLength"]], "minoutputlength (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.minOutputLength"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.minOutputLength"]], "name (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.name"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.name"]], "norepeatngramsize (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.noRepeatNgramSize"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.noRepeatNgramSize"]], "outputannotatortype (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.outputAnnotatorType"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.outputAnnotatorType"]], "pretrained() (mllamaformultimodal static method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.pretrained"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.pretrained"]], "repetitionpenalty (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.repetitionPenalty"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.repetitionPenalty"]], "setbeamsize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setBeamSize"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setBeamSize"]], "setconfigprotobytes() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setConfigProtoBytes"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setConfigProtoBytes"]], "setdosample() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setDoSample"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setDoSample"]], "setignoretokenids() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setIgnoreTokenIds"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setIgnoreTokenIds"]], "setmaxoutputlength() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxOutputLength"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxOutputLength"]], "setmaxsentencesize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxSentenceSize"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxSentenceSize"]], "setminoutputlength() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMinOutputLength"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMinOutputLength"]], "setnorepeatngramsize() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setNoRepeatNgramSize"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setRepetitionPenalty"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setRepetitionPenalty"]], "settemperature() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTemperature"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTemperature"]], "settopk() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopK"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopK"]], "settopp() (mllamaformultimodal method)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopP"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[73, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [331, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "temperature (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.temperature"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.temperature"]], "topk (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topK"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topK"]], "topp (mllamaformultimodal attribute)": [[73, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topP"], [331, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topP"]], "paligemmaformultimodal (class in sparknlp.annotator.cv.paligemma_for_multimodal)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal"]], "beamsize (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.beamSize"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.beamSize"]], "dosample (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.doSample"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.doSample"]], "ignoretokenids (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.ignoreTokenIds"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.ignoreTokenIds"]], "inputannotatortypes (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.inputAnnotatorTypes"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (paligemmaformultimodal static method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.loadSavedModel"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.loadSavedModel"]], "maxoutputlength (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.maxOutputLength"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.maxOutputLength"]], "minoutputlength (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.minOutputLength"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.minOutputLength"]], "name (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.name"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.name"]], "norepeatngramsize (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.noRepeatNgramSize"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.noRepeatNgramSize"]], "outputannotatortype (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.outputAnnotatorType"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.outputAnnotatorType"]], "pretrained() (paligemmaformultimodal static method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.pretrained"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.pretrained"]], "repetitionpenalty (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.repetitionPenalty"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.repetitionPenalty"]], "setbeamsize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setBeamSize"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setBeamSize"]], "setdosample() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setDoSample"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setDoSample"]], "setignoretokenids() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setIgnoreTokenIds"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxOutputLength"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxSentenceSize"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMinOutputLength"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setNoRepeatNgramSize"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setRepetitionPenalty"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setRepetitionPenalty"]], "settemperature() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTemperature"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTemperature"]], "settopk() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopK"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopK"]], "settopp() (paligemmaformultimodal method)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopP"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopP"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[74, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [332, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "temperature (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.temperature"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.temperature"]], "topk (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topK"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topK"]], "topp (paligemmaformultimodal attribute)": [[74, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topP"], [332, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topP"]], "phi3vision (class in sparknlp.annotator.cv.phi3_vision_for_multimodal)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision"]], "beamsize (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.beamSize"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.beamSize"]], "configprotobytes (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.configProtoBytes"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.configProtoBytes"]], "dosample (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.doSample"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.doSample"]], "ignoretokenids (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.ignoreTokenIds"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.ignoreTokenIds"]], "inputannotatortypes (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.inputAnnotatorTypes"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.inputAnnotatorTypes"]], "loadsavedmodel() (phi3vision static method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.loadSavedModel"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.loadSavedModel"]], "maxoutputlength (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.maxOutputLength"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.maxOutputLength"]], "minoutputlength (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.minOutputLength"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.minOutputLength"]], "name (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.name"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.name"]], "norepeatngramsize (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.noRepeatNgramSize"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.noRepeatNgramSize"]], "outputannotatortype (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.outputAnnotatorType"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.outputAnnotatorType"]], "pretrained() (phi3vision static method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.pretrained"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.pretrained"]], "repetitionpenalty (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.repetitionPenalty"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.repetitionPenalty"]], "setbeamsize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setBeamSize"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setBeamSize"]], "setconfigprotobytes() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setConfigProtoBytes"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setConfigProtoBytes"]], "setdosample() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setDoSample"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setDoSample"]], "setignoretokenids() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setIgnoreTokenIds"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxOutputLength"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxOutputLength"]], "setmaxsentencesize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxSentenceSize"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxSentenceSize"]], "setminoutputlength() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMinOutputLength"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMinOutputLength"]], "setnorepeatngramsize() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setNoRepeatNgramSize"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setRepetitionPenalty"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setRepetitionPenalty"]], "settemperature() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTemperature"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTemperature"]], "settopk() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopK"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopK"]], "settopp() (phi3vision method)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopP"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[75, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [333, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "temperature (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.temperature"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.temperature"]], "topk (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topK"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topK"]], "topp (phi3vision attribute)": [[75, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topP"], [333, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topP"]], "qwen2vltransformer (class in sparknlp.annotator.cv.qwen2vl_transformer)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer"]], "beamsize (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.beamSize"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.beamSize"]], "configprotobytes (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.configProtoBytes"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.configProtoBytes"]], "dosample (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.doSample"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.doSample"]], "ignoretokenids (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.ignoreTokenIds"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.ignoreTokenIds"]], "inputannotatortypes (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.inputAnnotatorTypes"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwen2vltransformer static method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.loadSavedModel"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.loadSavedModel"]], "maxoutputlength (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.maxOutputLength"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.maxOutputLength"]], "minoutputlength (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.minOutputLength"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.minOutputLength"]], "name (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.name"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.name"]], "norepeatngramsize (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.noRepeatNgramSize"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.noRepeatNgramSize"]], "outputannotatortype (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.outputAnnotatorType"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.outputAnnotatorType"]], "pretrained() (qwen2vltransformer static method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.pretrained"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.pretrained"]], "repetitionpenalty (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.repetitionPenalty"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.repetitionPenalty"]], "setbeamsize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setBeamSize"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setBeamSize"]], "setconfigprotobytes() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setConfigProtoBytes"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setConfigProtoBytes"]], "setdosample() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setDoSample"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setDoSample"]], "setignoretokenids() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setIgnoreTokenIds"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxOutputLength"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxOutputLength"]], "setmaxsentencesize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxSentenceSize"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxSentenceSize"]], "setminoutputlength() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMinOutputLength"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setNoRepeatNgramSize"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setRepetitionPenalty"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setRepetitionPenalty"]], "settemperature() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTemperature"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTemperature"]], "settopk() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopK"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopK"]], "settopp() (qwen2vltransformer method)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopP"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[76, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [334, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "temperature (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.temperature"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.temperature"]], "topk (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topK"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topK"]], "topp (qwen2vltransformer attribute)": [[76, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topP"], [334, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topP"]], "smolvlmtransformer (class in sparknlp.annotator.cv.smolvlm_transformer)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer"]], "beamsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.beamSize"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.beamSize"]], "doimagesplitting (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doImageSplitting"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doImageSplitting"]], "dosample (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doSample"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doSample"]], "ignoretokenids (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.ignoreTokenIds"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.ignoreTokenIds"]], "imagetoken (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.imageToken"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.imageToken"]], "inputannotatortypes (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.inputAnnotatorTypes"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (smolvlmtransformer static method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.loadSavedModel"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.loadSavedModel"]], "maximagesize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxImageSize"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxImageSize"]], "maxoutputlength (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxOutputLength"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxOutputLength"]], "minoutputlength (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.minOutputLength"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.minOutputLength"]], "name (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.name"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.name"]], "norepeatngramsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.noRepeatNgramSize"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.noRepeatNgramSize"]], "numvisiontokens (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.numVisionTokens"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.numVisionTokens"]], "outputannotatortype (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.outputAnnotatorType"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.outputAnnotatorType"]], "paddingconstant (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.paddingConstant"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.paddingConstant"]], "patchsize (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.patchSize"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.patchSize"]], "pretrained() (smolvlmtransformer static method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.pretrained"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.pretrained"]], "repetitionpenalty (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.repetitionPenalty"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.repetitionPenalty"]], "setbeamsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setBeamSize"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setBeamSize"]], "setconfigprotobytes() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setConfigProtoBytes"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setConfigProtoBytes"]], "setdoimagesplitting() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoImageSplitting"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoImageSplitting"]], "setdosample() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoSample"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoSample"]], "setignoretokenids() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setIgnoreTokenIds"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setIgnoreTokenIds"]], "setimagetoken() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setImageToken"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setImageToken"]], "setmaximagesize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxImageSize"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxImageSize"]], "setmaxoutputlength() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxOutputLength"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxOutputLength"]], "setmaxsentencesize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxSentenceSize"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxSentenceSize"]], "setminoutputlength() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMinOutputLength"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNoRepeatNgramSize"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNoRepeatNgramSize"]], "setnumvisiontokens() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNumVisionTokens"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNumVisionTokens"]], "setpaddingconstant() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPaddingConstant"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPaddingConstant"]], "setpatchsize() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPatchSize"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPatchSize"]], "setrepetitionpenalty() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setRepetitionPenalty"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setRepetitionPenalty"]], "setstoptokenids() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setStopTokenIds"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setStopTokenIds"]], "settemperature() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTemperature"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTemperature"]], "settopk() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopK"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopK"]], "settopp() (smolvlmtransformer method)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopP"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopP"]], "sparknlp.annotator.cv.smolvlm_transformer": [[77, "module-sparknlp.annotator.cv.smolvlm_transformer"], [335, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "stoptokenids (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.stopTokenIds"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.stopTokenIds"]], "temperature (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.temperature"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.temperature"]], "topk (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topK"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topK"]], "topp (smolvlmtransformer attribute)": [[77, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topP"], [335, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topP"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"], [336, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "configprotobytes (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.configProtoBytes"], [336, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.configProtoBytes"]], "getclasses() (swinforimageclassification method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"], [336, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "inputannotatortypes (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.inputAnnotatorTypes"], [336, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (swinforimageclassification static method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"], [336, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "name (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.name"], [336, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.name"]], "outputannotatortype (swinforimageclassification attribute)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.outputAnnotatorType"], [336, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.outputAnnotatorType"]], "pretrained() (swinforimageclassification static method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"], [336, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[78, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"], [336, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[78, "module-sparknlp.annotator.cv.swin_for_image_classification"], [336, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"], [337, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "configprotobytes (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.configProtoBytes"], [337, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.configProtoBytes"]], "inputannotatortypes (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.inputAnnotatorTypes"], [337, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.inputAnnotatorTypes"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"], [337, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "name (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.name"], [337, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.name"]], "outputannotatortype (visionencoderdecoderforimagecaptioning attribute)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.outputAnnotatorType"], [337, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.outputAnnotatorType"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"], [337, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[79, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"], [337, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[79, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [337, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"], [338, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "configprotobytes (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.configProtoBytes"], [338, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.configProtoBytes"]], "getclasses() (vitforimageclassification method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"], [338, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "inputannotatortypes (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.inputAnnotatorTypes"], [338, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (vitforimageclassification static method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"], [338, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "name (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.name"], [338, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.name"]], "outputannotatortype (vitforimageclassification attribute)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.outputAnnotatorType"], [338, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.outputAnnotatorType"]], "pretrained() (vitforimageclassification static method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"], [338, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[80, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"], [338, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[80, "module-sparknlp.annotator.cv.vit_for_image_classification"], [338, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "dataframeoptimizer (class in sparknlp.annotator.dataframe_optimizer)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer"]], "docache (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.doCache"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.doCache"]], "executorcores (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.executorCores"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.executorCores"]], "numpartitions (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.numPartitions"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.numPartitions"]], "numworkers (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.numWorkers"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.numWorkers"]], "outputoptions (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.outputOptions"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.outputOptions"]], "persistformat (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.persistFormat"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.persistFormat"]], "persistpath (dataframeoptimizer attribute)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.persistPath"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.persistPath"]], "setdocache() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setDoCache"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setDoCache"]], "setexecutorcores() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setExecutorCores"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setExecutorCores"]], "setnumpartitions() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setNumPartitions"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setNumPartitions"]], "setnumworkers() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setNumWorkers"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setNumWorkers"]], "setoutputoptions() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setOutputOptions"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setOutputOptions"]], "setparams() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setParams"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setParams"]], "setpersistformat() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setPersistFormat"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setPersistFormat"]], "setpersistpath() (dataframeoptimizer method)": [[81, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setPersistPath"], [339, "sparknlp.annotator.dataframe_optimizer.DataFrameOptimizer.setPersistPath"]], "sparknlp.annotator.dataframe_optimizer": [[81, "module-sparknlp.annotator.dataframe_optimizer"], [339, "module-sparknlp.annotator.dataframe_optimizer"]], "tostringdict() (in module sparknlp.annotator.dataframe_optimizer)": [[81, "sparknlp.annotator.dataframe_optimizer.toStringDict"], [339, "sparknlp.annotator.dataframe_optimizer.toStringDict"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk"], [340, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "entityname (date2chunk attribute)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk.entityName"], [340, "sparknlp.annotator.date2_chunk.Date2Chunk.entityName"]], "inputannotatortypes (date2chunk attribute)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk.inputAnnotatorTypes"], [340, "sparknlp.annotator.date2_chunk.Date2Chunk.inputAnnotatorTypes"]], "name (date2chunk attribute)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk.name"], [340, "sparknlp.annotator.date2_chunk.Date2Chunk.name"]], "outputannotatortype (date2chunk attribute)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk.outputAnnotatorType"], [340, "sparknlp.annotator.date2_chunk.Date2Chunk.outputAnnotatorType"]], "setentityname() (date2chunk method)": [[82, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"], [340, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[82, "module-sparknlp.annotator.date2_chunk"], [340, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency": [[83, "module-sparknlp.annotator.dependency"], [342, "module-sparknlp.annotator.dependency"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "conllu (dependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.conllU"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.conllU"]], "dependencytreebank (dependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.dependencyTreeBank"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.dependencyTreeBank"]], "inputannotatortypes (dependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.inputAnnotatorTypes"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (dependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.inputAnnotatorTypes"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.inputAnnotatorTypes"]], "name (dependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.name"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.name"]], "numberofiterations (dependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.numberOfIterations"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.numberOfIterations"]], "outputannotatortype (dependencyparserapproach attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.outputAnnotatorType"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (dependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.outputAnnotatorType"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.outputAnnotatorType"]], "perceptron (dependencyparsermodel attribute)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.perceptron"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.perceptron"]], "pretrained() (dependencyparsermodel static method)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[84, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"], [341, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[84, "module-sparknlp.annotator.dependency.dependency_parser"], [341, "module-sparknlp.annotator.dependency.dependency_parser"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "conll2009 (typeddependencyparserapproach attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conll2009"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conll2009"]], "conllformat (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.conllFormat"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.conllFormat"]], "conllu (typeddependencyparserapproach attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conllU"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conllU"]], "inputannotatortypes (typeddependencyparserapproach attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.inputAnnotatorTypes"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.inputAnnotatorTypes"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.inputAnnotatorTypes"]], "name (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.name"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.name"]], "numberofiterations (typeddependencyparserapproach attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.numberOfIterations"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.numberOfIterations"]], "outputannotatortype (typeddependencyparserapproach attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.outputAnnotatorType"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.outputAnnotatorType"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.outputAnnotatorType"]], "pretrained() (typeddependencyparsermodel static method)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[85, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [343, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "traindependencypipe (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainDependencyPipe"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainDependencyPipe"]], "trainoptions (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainOptions"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainOptions"]], "trainparameters (typeddependencyparsermodel attribute)": [[85, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainParameters"], [343, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainParameters"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "chunkoverlap (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkOverlap"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkOverlap"]], "chunksize (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkSize"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkSize"]], "explodesplits (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.explodeSplits"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.explodeSplits"]], "inputannotatortypes (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.inputAnnotatorTypes"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.inputAnnotatorTypes"]], "keepseparators (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.keepSeparators"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.keepSeparators"]], "outputannotatortype (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.outputAnnotatorType"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.outputAnnotatorType"]], "patternsareregex (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.patternsAreRegex"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.patternsAreRegex"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[86, "module-sparknlp.annotator.document_character_text_splitter"], [344, "module-sparknlp.annotator.document_character_text_splitter"]], "splitpatterns (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.splitPatterns"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.splitPatterns"]], "trimwhitespace (documentcharactertextsplitter attribute)": [[86, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.trimWhitespace"], [344, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.trimWhitespace"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "action (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.action"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.action"]], "encoding (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.encoding"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.encoding"]], "inputannotatortypes (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.inputAnnotatorTypes"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.inputAnnotatorTypes"]], "lowercase (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.lowercase"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.lowercase"]], "outputannotatortype (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.outputAnnotatorType"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.outputAnnotatorType"]], "patterns (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.patterns"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.patterns"]], "policy (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.policy"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.policy"]], "replacement (documentnormalizer attribute)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.replacement"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.replacement"]], "setaction() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[87, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"], [345, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[87, "module-sparknlp.annotator.document_normalizer"], [345, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"], [346, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "explodesplits (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.explodeSplits"], [346, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.explodeSplits"]], "inputannotatortypes (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.inputAnnotatorTypes"], [346, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.inputAnnotatorTypes"]], "numtokens (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.numTokens"], [346, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.numTokens"]], "outputannotatortype (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.outputAnnotatorType"], [346, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.outputAnnotatorType"]], "setexplodesplits() (documenttokensplitter method)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"], [346, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"], [346, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"], [346, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"], [346, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[88, "module-sparknlp.annotator.document_token_splitter"], [346, "module-sparknlp.annotator.document_token_splitter"]], "tokenoverlap (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.tokenOverlap"], [346, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.tokenOverlap"]], "trimwhitespace (documenttokensplitter attribute)": [[88, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.trimWhitespace"], [346, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.trimWhitespace"]], "sparknlp.annotator.embeddings": [[90, "module-sparknlp.annotator.embeddings"], [361, "module-sparknlp.annotator.embeddings"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"], [348, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "configprotobytes (albertembeddings attribute)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.configProtoBytes"], [348, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.configProtoBytes"]], "inputannotatortypes (albertembeddings attribute)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.inputAnnotatorTypes"], [348, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (albertembeddings static method)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"], [348, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "name (albertembeddings attribute)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.name"], [348, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.name"]], "outputannotatortype (albertembeddings attribute)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.outputAnnotatorType"], [348, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.outputAnnotatorType"]], "pretrained() (albertembeddings static method)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"], [348, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[91, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"], [348, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[91, "module-sparknlp.annotator.embeddings.albert_embeddings"], [348, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "autoggufembeddings (class in sparknlp.annotator.embeddings.auto_gguf_embeddings)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings"]], "defragmentationthreshold (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.defragmentationThreshold"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.defragmentationThreshold"]], "flashattention (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.flashAttention"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.flashAttention"]], "getmetadata() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.getMetadata"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.getMetadata"]], "gpusplitmode (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.gpuSplitMode"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.gpuSplitMode"]], "grpattnn (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnN"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnN"]], "grpattnw (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnW"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnW"]], "inputannotatortypes (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.inputAnnotatorTypes"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufembeddings static method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.loadSavedModel"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.loadSavedModel"]], "maingpu (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.mainGpu"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.mainGpu"]], "nbatch (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nBatch"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nBatch"]], "nchunks (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nChunks"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nChunks"]], "nctx (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nCtx"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nCtx"]], "ngpulayers (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nGpuLayers"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nGpuLayers"]], "nsequences (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nSequences"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nSequences"]], "nthreads (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreads"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreads"]], "nthreadsbatch (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreadsBatch"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreadsBatch"]], "nubatch (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nUbatch"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nUbatch"]], "name (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.name"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.name"]], "nokvoffload (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.noKvOffload"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.noKvOffload"]], "numastrategy (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.numaStrategy"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.numaStrategy"]], "outputannotatortype (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.outputAnnotatorType"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.outputAnnotatorType"]], "poolingtype (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.poolingType"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.poolingType"]], "pretrained() (autoggufembeddings static method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.pretrained"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.pretrained"]], "ropefreqbase (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqBase"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqBase"]], "ropefreqscale (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqScale"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqScale"]], "ropescalingtype (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeScalingType"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeScalingType"]], "setdefragmentationthreshold() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setDefragmentationThreshold"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setDefragmentationThreshold"]], "setflashattention() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setFlashAttention"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setFlashAttention"]], "setgpusplitmode() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGpuSplitMode"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGpuSplitMode"]], "setgrpattnn() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnN"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnN"]], "setgrpattnw() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnW"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnW"]], "setmaingpu() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setMainGpu"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setMainGpu"]], "setnbatch() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNBatch"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNBatch"]], "setnchunks() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNChunks"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNChunks"]], "setnctx() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNCtx"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNCtx"]], "setngpulayers() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNGpuLayers"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNGpuLayers"]], "setnparallel() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNParallel"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNParallel"]], "setnsequences() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNSequences"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNSequences"]], "setnthreads() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreads"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreads"]], "setnthreadsbatch() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreadsBatch"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreadsBatch"]], "setnubatch() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNUbatch"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNUbatch"]], "setnokvoffload() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNoKvOffload"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNoKvOffload"]], "setnumastrategy() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNumaStrategy"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNumaStrategy"]], "setpoolingtype() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setPoolingType"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setPoolingType"]], "setropefreqbase() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqBase"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqBase"]], "setropefreqscale() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqScale"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqScale"]], "setropescalingtype() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeScalingType"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeScalingType"]], "settensorsplit() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setTensorSplit"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setTensorSplit"]], "setusemlock() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMlock"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMlock"]], "setusemmap() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMmap"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMmap"]], "setyarnattnfactor() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnAttnFactor"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnAttnFactor"]], "setyarnbetafast() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaFast"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaFast"]], "setyarnbetaslow() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaSlow"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaSlow"]], "setyarnextfactor() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnExtFactor"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnExtFactor"]], "setyarnorigctx() (autoggufembeddings method)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnOrigCtx"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnOrigCtx"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[92, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [349, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "tensorsplit (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.tensorSplit"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.tensorSplit"]], "usemlock (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMlock"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMlock"]], "usemmap (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMmap"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMmap"]], "yarnattnfactor (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnAttnFactor"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnAttnFactor"]], "yarnbetafast (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaFast"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaFast"]], "yarnbetaslow (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaSlow"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaSlow"]], "yarnextfactor (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnExtFactor"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnExtFactor"]], "yarnorigctx (autoggufembeddings attribute)": [[92, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnOrigCtx"], [349, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnOrigCtx"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"], [350, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "configprotobytes (bertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.configProtoBytes"], [350, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.configProtoBytes"]], "inputannotatortypes (bertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.inputAnnotatorTypes"], [350, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bertembeddings static method)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"], [350, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "name (bertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.name"], [350, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.name"]], "outputannotatortype (bertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.outputAnnotatorType"], [350, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.outputAnnotatorType"]], "pretrained() (bertembeddings static method)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"], [350, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[93, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"], [350, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[93, "module-sparknlp.annotator.embeddings.bert_embeddings"], [350, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"], [351, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "configprotobytes (bertsentenceembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.configProtoBytes"], [351, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (bertsentenceembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.inputAnnotatorTypes"], [351, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.inputAnnotatorTypes"]], "islong (bertsentenceembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.isLong"], [351, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.isLong"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"], [351, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "name (bertsentenceembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.name"], [351, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.name"]], "outputannotatortype (bertsentenceembeddings attribute)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.outputAnnotatorType"], [351, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentenceembeddings static method)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"], [351, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"], [351, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[94, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"], [351, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[94, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [351, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"], [352, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "configprotobytes (bgeembeddings attribute)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.configProtoBytes"], [352, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.configProtoBytes"]], "inputannotatortypes (bgeembeddings attribute)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.inputAnnotatorTypes"], [352, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bgeembeddings static method)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"], [352, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "name (bgeembeddings attribute)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.name"], [352, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.name"]], "outputannotatortype (bgeembeddings attribute)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.outputAnnotatorType"], [352, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.outputAnnotatorType"]], "pretrained() (bgeembeddings static method)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"], [352, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[95, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"], [352, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[95, "module-sparknlp.annotator.embeddings.bge_embeddings"], [352, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"], [353, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "configprotobytes (camembertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.configProtoBytes"], [353, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.configProtoBytes"]], "inputannotatortypes (camembertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.inputAnnotatorTypes"], [353, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (camembertembeddings static method)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"], [353, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "name (camembertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.name"], [353, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.name"]], "outputannotatortype (camembertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.outputAnnotatorType"], [353, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.outputAnnotatorType"]], "pretrained() (camembertembeddings static method)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"], [353, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[96, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"], [353, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[96, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [353, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"], [354, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "inputannotatortypes (chunkembeddings attribute)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.inputAnnotatorTypes"], [354, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.inputAnnotatorTypes"]], "name (chunkembeddings attribute)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.name"], [354, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.name"]], "outputannotatortype (chunkembeddings attribute)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.outputAnnotatorType"], [354, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.outputAnnotatorType"]], "poolingstrategy (chunkembeddings attribute)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.poolingStrategy"], [354, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.poolingStrategy"]], "setpoolingstrategy() (chunkembeddings method)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"], [354, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"], [354, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "skipoov (chunkembeddings attribute)": [[97, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.skipOOV"], [354, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.skipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[97, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [354, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"], [355, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "configprotobytes (debertaembeddings attribute)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.configProtoBytes"], [355, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (debertaembeddings attribute)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.inputAnnotatorTypes"], [355, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (debertaembeddings static method)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"], [355, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "name (debertaembeddings attribute)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.name"], [355, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.name"]], "outputannotatortype (debertaembeddings attribute)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.outputAnnotatorType"], [355, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.outputAnnotatorType"]], "pretrained() (debertaembeddings static method)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"], [355, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[98, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"], [355, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[98, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [355, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"], [356, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "configprotobytes (distilbertembeddings attribute)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.configProtoBytes"], [356, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.configProtoBytes"]], "inputannotatortypes (distilbertembeddings attribute)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.inputAnnotatorTypes"], [356, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertembeddings static method)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"], [356, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "name (distilbertembeddings attribute)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.name"], [356, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.name"]], "outputannotatortype (distilbertembeddings attribute)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.outputAnnotatorType"], [356, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.outputAnnotatorType"]], "pretrained() (distilbertembeddings static method)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"], [356, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[99, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"], [356, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[99, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [356, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "inputannotatortypes (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.inputAnnotatorTypes"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (doc2vecmodel attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.inputAnnotatorTypes"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.inputAnnotatorTypes"]], "maxiter (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxIter"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxIter"]], "maxsentencelength (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxSentenceLength"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxSentenceLength"]], "mincount (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.minCount"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.minCount"]], "name (doc2vecmodel attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.name"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.name"]], "numpartitions (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.numPartitions"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.numPartitions"]], "outputannotatortype (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.outputAnnotatorType"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.outputAnnotatorType"]], "outputannotatortype (doc2vecmodel attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.outputAnnotatorType"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.outputAnnotatorType"]], "pretrained() (doc2vecmodel static method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "seed (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.seed"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.seed"]], "setmaxiter() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[100, "module-sparknlp.annotator.embeddings.doc2vec"], [357, "module-sparknlp.annotator.embeddings.doc2vec"]], "stepsize (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.stepSize"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.stepSize"]], "vectorsize (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.vectorSize"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.vectorSize"]], "vectorsize (doc2vecmodel attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.vectorSize"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.vectorSize"]], "windowsize (doc2vecapproach attribute)": [[100, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.windowSize"], [357, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.windowSize"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"], [358, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "configprotobytes (e5embeddings attribute)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.configProtoBytes"], [358, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.configProtoBytes"]], "inputannotatortypes (e5embeddings attribute)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.inputAnnotatorTypes"], [358, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.inputAnnotatorTypes"]], "loadsavedmodel() (e5embeddings static method)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"], [358, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "name (e5embeddings attribute)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.name"], [358, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.name"]], "outputannotatortype (e5embeddings attribute)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.outputAnnotatorType"], [358, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.outputAnnotatorType"]], "pretrained() (e5embeddings static method)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"], [358, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[101, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"], [358, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[101, "module-sparknlp.annotator.embeddings.e5_embeddings"], [358, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "e5vembeddings (class in sparknlp.annotator.embeddings.e5v_embeddings)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings"], [359, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings"]], "inputannotatortypes (e5vembeddings attribute)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.inputAnnotatorTypes"], [359, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (e5vembeddings static method)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.loadSavedModel"], [359, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.loadSavedModel"]], "name (e5vembeddings attribute)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.name"], [359, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.name"]], "outputannotatortype (e5vembeddings attribute)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.outputAnnotatorType"], [359, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.outputAnnotatorType"]], "pretrained() (e5vembeddings static method)": [[102, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.pretrained"], [359, "sparknlp.annotator.embeddings.e5v_embeddings.E5VEmbeddings.pretrained"]], "sparknlp.annotator.embeddings.e5v_embeddings": [[102, "module-sparknlp.annotator.embeddings.e5v_embeddings"], [359, "module-sparknlp.annotator.embeddings.e5v_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "batchsize (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.batchSize"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.batchSize"]], "configprotobytes (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.configProtoBytes"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.configProtoBytes"]], "inputannotatortypes (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.inputAnnotatorTypes"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (elmoembeddings static method)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "name (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.name"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.name"]], "outputannotatortype (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.outputAnnotatorType"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.outputAnnotatorType"]], "poolinglayer (elmoembeddings attribute)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.poolingLayer"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.poolingLayer"]], "pretrained() (elmoembeddings static method)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[103, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"], [360, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[103, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [360, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"], [362, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "configprotobytes (instructorembeddings attribute)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.configProtoBytes"], [362, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.configProtoBytes"]], "inputannotatortypes (instructorembeddings attribute)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.inputAnnotatorTypes"], [362, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.inputAnnotatorTypes"]], "instruction (instructorembeddings attribute)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.instruction"], [362, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.instruction"]], "loadsavedmodel() (instructorembeddings static method)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"], [362, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "name (instructorembeddings attribute)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.name"], [362, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.name"]], "outputannotatortype (instructorembeddings attribute)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.outputAnnotatorType"], [362, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.outputAnnotatorType"]], "pretrained() (instructorembeddings static method)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"], [362, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"], [362, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[104, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"], [362, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[104, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [362, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"], [363, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "configprotobytes (longformerembeddings attribute)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.configProtoBytes"], [363, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.configProtoBytes"]], "inputannotatortypes (longformerembeddings attribute)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.inputAnnotatorTypes"], [363, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (longformerembeddings static method)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"], [363, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "name (longformerembeddings attribute)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.name"], [363, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.name"]], "outputannotatortype (longformerembeddings attribute)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.outputAnnotatorType"], [363, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.outputAnnotatorType"]], "pretrained() (longformerembeddings static method)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"], [363, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[105, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"], [363, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[105, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [363, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "minilmembeddings (class in sparknlp.annotator.embeddings.minilm_embeddings)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings"], [364, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings"]], "configprotobytes (minilmembeddings attribute)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.configProtoBytes"], [364, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.configProtoBytes"]], "inputannotatortypes (minilmembeddings attribute)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.inputAnnotatorTypes"], [364, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (minilmembeddings static method)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.loadSavedModel"], [364, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.loadSavedModel"]], "name (minilmembeddings attribute)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.name"], [364, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.name"]], "outputannotatortype (minilmembeddings attribute)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.outputAnnotatorType"], [364, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.outputAnnotatorType"]], "pretrained() (minilmembeddings static method)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.pretrained"], [364, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.pretrained"]], "setconfigprotobytes() (minilmembeddings method)": [[106, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.setConfigProtoBytes"], [364, "sparknlp.annotator.embeddings.minilm_embeddings.MiniLMEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.minilm_embeddings": [[106, "module-sparknlp.annotator.embeddings.minilm_embeddings"], [364, "module-sparknlp.annotator.embeddings.minilm_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"], [365, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "configprotobytes (mpnetembeddings attribute)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.configProtoBytes"], [365, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.configProtoBytes"]], "inputannotatortypes (mpnetembeddings attribute)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.inputAnnotatorTypes"], [365, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetembeddings static method)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"], [365, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "name (mpnetembeddings attribute)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.name"], [365, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.name"]], "outputannotatortype (mpnetembeddings attribute)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.outputAnnotatorType"], [365, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.outputAnnotatorType"]], "pretrained() (mpnetembeddings static method)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"], [365, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[107, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"], [365, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[107, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [365, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "mxbaiembeddings (class in sparknlp.annotator.embeddings.mxbai_embeddings)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"], [366, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"]], "inputannotatortypes (mxbaiembeddings attribute)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.inputAnnotatorTypes"], [366, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mxbaiembeddings static method)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"], [366, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"]], "name (mxbaiembeddings attribute)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.name"], [366, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.name"]], "outputannotatortype (mxbaiembeddings attribute)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.outputAnnotatorType"], [366, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.outputAnnotatorType"]], "poolingstrategy (mxbaiembeddings attribute)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.poolingStrategy"], [366, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.poolingStrategy"]], "pretrained() (mxbaiembeddings static method)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"], [366, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"]], "setpoolingstrategy() (mxbaiembeddings method)": [[108, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"], [366, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[108, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [366, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "nomicembeddings (class in sparknlp.annotator.embeddings.nomic_embeddings)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"], [367, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"]], "configprotobytes (nomicembeddings attribute)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.configProtoBytes"], [367, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.configProtoBytes"]], "inputannotatortypes (nomicembeddings attribute)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.inputAnnotatorTypes"], [367, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (nomicembeddings static method)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"], [367, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"]], "name (nomicembeddings attribute)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.name"], [367, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.name"]], "outputannotatortype (nomicembeddings attribute)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.outputAnnotatorType"], [367, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.outputAnnotatorType"]], "pretrained() (nomicembeddings static method)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"], [367, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"]], "setconfigprotobytes() (nomicembeddings method)": [[109, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"], [367, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[109, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [367, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"], [368, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "configprotobytes (robertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.configProtoBytes"], [368, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (robertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.inputAnnotatorTypes"], [368, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertaembeddings static method)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"], [368, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "name (robertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.name"], [368, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.name"]], "outputannotatortype (robertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.outputAnnotatorType"], [368, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (robertaembeddings static method)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"], [368, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[110, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"], [368, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[110, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [368, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"], [369, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "configprotobytes (robertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.configProtoBytes"], [369, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (robertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.inputAnnotatorTypes"], [369, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"], [369, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "name (robertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.name"], [369, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.name"]], "outputannotatortype (robertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.outputAnnotatorType"], [369, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (robertasentenceembeddings static method)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"], [369, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[111, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"], [369, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[111, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [369, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"], [370, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "inputannotatortypes (sentenceembeddings attribute)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.inputAnnotatorTypes"], [370, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.inputAnnotatorTypes"]], "name (sentenceembeddings attribute)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.name"], [370, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.name"]], "outputannotatortype (sentenceembeddings attribute)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.outputAnnotatorType"], [370, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.outputAnnotatorType"]], "poolingstrategy (sentenceembeddings attribute)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.poolingStrategy"], [370, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.poolingStrategy"]], "setpoolingstrategy() (sentenceembeddings method)": [[112, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"], [370, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[112, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [370, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "snowflakeembeddings (class in sparknlp.annotator.embeddings.snowflake_embeddings)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"], [371, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"]], "inputannotatortypes (snowflakeembeddings attribute)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.inputAnnotatorTypes"], [371, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (snowflakeembeddings static method)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"], [371, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"]], "name (snowflakeembeddings attribute)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.name"], [371, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.name"]], "outputannotatortype (snowflakeembeddings attribute)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.outputAnnotatorType"], [371, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.outputAnnotatorType"]], "poolingstrategy (snowflakeembeddings attribute)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.poolingStrategy"], [371, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.poolingStrategy"]], "pretrained() (snowflakeembeddings static method)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"], [371, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"]], "setpoolingstrategy() (snowflakeembeddings method)": [[113, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"], [371, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[113, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [371, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "uaeembeddings (class in sparknlp.annotator.embeddings.uae_embeddings)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"], [372, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"]], "inputannotatortypes (uaeembeddings attribute)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.inputAnnotatorTypes"], [372, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (uaeembeddings static method)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"], [372, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"]], "name (uaeembeddings attribute)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.name"], [372, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.name"]], "outputannotatortype (uaeembeddings attribute)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.outputAnnotatorType"], [372, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.outputAnnotatorType"]], "poolingstrategy (uaeembeddings attribute)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.poolingStrategy"], [372, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.poolingStrategy"]], "pretrained() (uaeembeddings static method)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"], [372, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"]], "setpoolingstrategy() (uaeembeddings method)": [[114, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"], [372, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[114, "module-sparknlp.annotator.embeddings.uae_embeddings"], [372, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"], [373, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "configprotobytes (universalsentenceencoder attribute)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.configProtoBytes"], [373, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.configProtoBytes"]], "inputannotatortypes (universalsentenceencoder attribute)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.inputAnnotatorTypes"], [373, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.inputAnnotatorTypes"]], "loadsp (universalsentenceencoder attribute)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSP"], [373, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSP"]], "loadsavedmodel() (universalsentenceencoder static method)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"], [373, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "name (universalsentenceencoder attribute)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.name"], [373, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.name"]], "outputannotatortype (universalsentenceencoder attribute)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.outputAnnotatorType"], [373, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.outputAnnotatorType"]], "pretrained() (universalsentenceencoder static method)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"], [373, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"], [373, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[115, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"], [373, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[115, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [373, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "inputannotatortypes (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.inputAnnotatorTypes"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (word2vecmodel attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.inputAnnotatorTypes"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.inputAnnotatorTypes"]], "maxiter (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxIter"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxIter"]], "maxsentencelength (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxSentenceLength"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxSentenceLength"]], "mincount (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.minCount"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.minCount"]], "name (word2vecmodel attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.name"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.name"]], "numpartitions (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.numPartitions"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.numPartitions"]], "outputannotatortype (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.outputAnnotatorType"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.outputAnnotatorType"]], "outputannotatortype (word2vecmodel attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.outputAnnotatorType"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.outputAnnotatorType"]], "pretrained() (word2vecmodel static method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "seed (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.seed"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.seed"]], "setmaxiter() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[116, "module-sparknlp.annotator.embeddings.word2vec"], [374, "module-sparknlp.annotator.embeddings.word2vec"]], "stepsize (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.stepSize"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.stepSize"]], "vectorsize (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.vectorSize"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.vectorSize"]], "vectorsize (word2vecmodel attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.vectorSize"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.vectorSize"]], "windowsize (word2vecapproach attribute)": [[116, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.windowSize"], [374, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.windowSize"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "databases (wordembeddingsmodel attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.databases"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.databases"]], "inputannotatortypes (wordembeddings attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.inputAnnotatorTypes"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.inputAnnotatorTypes"]], "inputannotatortypes (wordembeddingsmodel attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.inputAnnotatorTypes"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.inputAnnotatorTypes"]], "loadstorage() (wordembeddingsmodel static method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "name (wordembeddings attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.name"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.name"]], "name (wordembeddingsmodel attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.name"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.name"]], "outputannotatortype (wordembeddings attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.outputAnnotatorType"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.outputAnnotatorType"]], "outputannotatortype (wordembeddingsmodel attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.outputAnnotatorType"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.outputAnnotatorType"]], "overallcoverage() (wordembeddingsmodel static method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "readcachesize (wordembeddings attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.readCacheSize"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.readCacheSize"]], "readcachesize (wordembeddingsmodel attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.readCacheSize"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.readCacheSize"]], "setreadcachesize() (wordembeddings method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[117, "module-sparknlp.annotator.embeddings.word_embeddings"], [375, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "writebuffersize (wordembeddings attribute)": [[117, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.writeBufferSize"], [375, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.writeBufferSize"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"], [376, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "configprotobytes (xlmrobertaembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.configProtoBytes"], [376, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertaembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.inputAnnotatorTypes"], [376, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"], [376, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "name (xlmrobertaembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.name"], [376, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.name"]], "outputannotatortype (xlmrobertaembeddings attribute)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.outputAnnotatorType"], [376, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertaembeddings static method)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"], [376, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[118, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"], [376, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[118, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [376, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"], [377, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "configprotobytes (xlmrobertasentenceembeddings attribute)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.configProtoBytes"], [377, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertasentenceembeddings attribute)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.inputAnnotatorTypes"], [377, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"], [377, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "name (xlmrobertasentenceembeddings attribute)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.name"], [377, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.name"]], "outputannotatortype (xlmrobertasentenceembeddings attribute)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.outputAnnotatorType"], [377, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"], [377, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[119, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"], [377, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[119, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [377, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"], [378, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "configprotobytes (xlnetembeddings attribute)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.configProtoBytes"], [378, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.configProtoBytes"]], "inputannotatortypes (xlnetembeddings attribute)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.inputAnnotatorTypes"], [378, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetembeddings static method)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"], [378, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "name (xlnetembeddings attribute)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.name"], [378, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.name"]], "outputannotatortype (xlnetembeddings attribute)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.outputAnnotatorType"], [378, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.outputAnnotatorType"]], "pretrained() (xlnetembeddings static method)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"], [378, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[120, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"], [378, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[120, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [378, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er": [[121, "module-sparknlp.annotator.er"], [380, "module-sparknlp.annotator.er"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "alphabet (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.alphabet"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.alphabet"]], "database (entityrulermodel attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.database"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.database"]], "inputannotatortypes (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.inputAnnotatorTypes"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.inputAnnotatorTypes"]], "inputannotatortypes (entityrulermodel attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.inputAnnotatorTypes"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.inputAnnotatorTypes"]], "loadstorage() (entityrulermodel static method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.loadStorage"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.loadStorage"]], "name (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.name"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.name"]], "name (entityrulermodel attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.name"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.name"]], "optionalinputannotatortypes (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.optionalInputAnnotatorTypes"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (entityrulermodel attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.optionalInputAnnotatorTypes"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.outputAnnotatorType"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.outputAnnotatorType"]], "outputannotatortype (entityrulermodel attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.outputAnnotatorType"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.outputAnnotatorType"]], "patternsresource (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.patternsResource"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.patternsResource"]], "pretrained() (entityrulermodel static method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.pretrained"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.pretrained"]], "sentencematch (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.sentenceMatch"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.sentenceMatch"]], "setalphabetresource() (entityrulerapproach method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[122, "module-sparknlp.annotator.er.entity_ruler"], [379, "module-sparknlp.annotator.er.entity_ruler"]], "usestorage (entityrulerapproach attribute)": [[122, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.useStorage"], [379, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.useStorage"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "delimiter (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.delimiter"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.delimiter"]], "dependencyparsermodel (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.dependencyParserModel"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.dependencyParserModel"]], "entitytypes (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.entityTypes"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.entityTypes"]], "explodeentities (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.explodeEntities"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.explodeEntities"]], "includeedges (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.includeEdges"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.includeEdges"]], "inputannotatortypes (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.inputAnnotatorTypes"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.inputAnnotatorTypes"]], "maxsentencesize (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.maxSentenceSize"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.maxSentenceSize"]], "mergeentities (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntities"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntities"]], "mergeentitiesiobformat (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntitiesIOBFormat"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntitiesIOBFormat"]], "minsentencesize (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.minSentenceSize"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.minSentenceSize"]], "name (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.name"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.name"]], "optionalinputannotatortypes (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.optionalInputAnnotatorTypes"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.optionalInputAnnotatorTypes"]], "outputannotatortype (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.outputAnnotatorType"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.outputAnnotatorType"]], "posmodel (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.posModel"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.posModel"]], "relationshiptypes (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.relationshipTypes"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.relationshipTypes"]], "roottokens (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.rootTokens"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.rootTokens"]], "setdelimiter() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[123, "module-sparknlp.annotator.graph_extraction"], [381, "module-sparknlp.annotator.graph_extraction"]], "typeddependencyparsermodel (graphextraction attribute)": [[123, "sparknlp.annotator.graph_extraction.GraphExtraction.typedDependencyParserModel"], [381, "sparknlp.annotator.graph_extraction.GraphExtraction.typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[124, "module-sparknlp.annotator.keyword_extraction"], [383, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "inputannotatortypes (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.inputAnnotatorTypes"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.inputAnnotatorTypes"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "maxngrams (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.maxNGrams"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.maxNGrams"]], "minngrams (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.minNGrams"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.minNGrams"]], "nkeywords (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.nKeywords"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.nKeywords"]], "name (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.name"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.name"]], "outputannotatortype (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.outputAnnotatorType"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.outputAnnotatorType"]], "setmaxngrams() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[125, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [384, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "stopwords (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.stopWords"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.stopWords"]], "threshold (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.threshold"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.threshold"]], "windowsize (yakekeywordextraction attribute)": [[125, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.windowSize"], [384, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.windowSize"]], "sparknlp.annotator.ld_dl": [[126, "module-sparknlp.annotator.ld_dl"], [385, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "coalescesentences (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.coalesceSentences"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.coalesceSentences"]], "configprotobytes (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.configProtoBytes"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.configProtoBytes"]], "inputannotatortypes (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.inputAnnotatorTypes"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.inputAnnotatorTypes"]], "languages (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.languages"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.languages"]], "name (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.name"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.name"]], "outputannotatortype (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.outputAnnotatorType"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.outputAnnotatorType"]], "pretrained() (languagedetectordl static method)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[127, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [386, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "threshold (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.threshold"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.threshold"]], "thresholdlabel (languagedetectordl attribute)": [[127, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.thresholdLabel"], [386, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.thresholdLabel"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer"], [387, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[128, "sparknlp.annotator.lemmatizer.LemmatizerModel"], [387, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "dictionary (lemmatizer attribute)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.dictionary"], [387, "sparknlp.annotator.lemmatizer.Lemmatizer.dictionary"]], "formcol (lemmatizer attribute)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.formCol"], [387, "sparknlp.annotator.lemmatizer.Lemmatizer.formCol"]], "inputannotatortypes (lemmatizer attribute)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.inputAnnotatorTypes"], [387, "sparknlp.annotator.lemmatizer.Lemmatizer.inputAnnotatorTypes"]], "inputannotatortypes (lemmatizermodel attribute)": [[128, "sparknlp.annotator.lemmatizer.LemmatizerModel.inputAnnotatorTypes"], [387, "sparknlp.annotator.lemmatizer.LemmatizerModel.inputAnnotatorTypes"]], "lemmacol (lemmatizer attribute)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.lemmaCol"], [387, "sparknlp.annotator.lemmatizer.Lemmatizer.lemmaCol"]], "name (lemmatizermodel attribute)": [[128, "sparknlp.annotator.lemmatizer.LemmatizerModel.name"], [387, "sparknlp.annotator.lemmatizer.LemmatizerModel.name"]], "outputannotatortype (lemmatizer attribute)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.outputAnnotatorType"], [387, "sparknlp.annotator.lemmatizer.Lemmatizer.outputAnnotatorType"]], "outputannotatortype (lemmatizermodel attribute)": [[128, "sparknlp.annotator.lemmatizer.LemmatizerModel.outputAnnotatorType"], [387, "sparknlp.annotator.lemmatizer.LemmatizerModel.outputAnnotatorType"]], "pretrained() (lemmatizermodel static method)": [[128, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"], [387, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"], [387, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"], [387, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[128, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"], [387, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[128, "module-sparknlp.annotator.lemmatizer"], [387, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher": [[129, "module-sparknlp.annotator.matcher"], [390, "module-sparknlp.annotator.matcher"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "casesensitive (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.caseSensitive"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.caseSensitive"]], "casesensitive (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.caseSensitive"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.caseSensitive"]], "databases (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.databases"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.databases"]], "entities (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.entities"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.entities"]], "inputannotatortypes (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.inputAnnotatorTypes"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.inputAnnotatorTypes"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.inputAnnotatorTypes"]], "loadstorage() (bigtextmatchermodel static method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "mergeoverlapping (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.mergeOverlapping"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.mergeOverlapping"]], "mergeoverlapping (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.mergeOverlapping"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.mergeOverlapping"]], "name (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.name"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.name"]], "outputannotatortype (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.outputAnnotatorType"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.outputAnnotatorType"]], "outputannotatortype (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.outputAnnotatorType"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.outputAnnotatorType"]], "pretrained() (bigtextmatchermodel static method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "searchtrie (bigtextmatchermodel attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.searchTrie"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.searchTrie"]], "setcasesensitive() (bigtextmatcher method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[130, "module-sparknlp.annotator.matcher.big_text_matcher"], [388, "module-sparknlp.annotator.matcher.big_text_matcher"]], "tokenizer (bigtextmatcher attribute)": [[130, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.tokenizer"], [388, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.tokenizer"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcher"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "aggressivematching (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.aggressiveMatching"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.aggressiveMatching"]], "anchordateday (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateDay"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateDay"]], "anchordatemonth (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateMonth"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateMonth"]], "anchordateyear (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateYear"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateYear"]], "defaultdaywhenmissing (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.defaultDayWhenMissing"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.defaultDayWhenMissing"]], "inputannotatortypes (datematcher attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcher.inputAnnotatorTypes"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcher.inputAnnotatorTypes"]], "inputformats (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.inputFormats"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.inputFormats"]], "name (datematcher attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcher.name"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcher.name"]], "outputannotatortype (datematcher attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcher.outputAnnotatorType"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcher.outputAnnotatorType"]], "outputformat (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.outputFormat"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.outputFormat"]], "readmonthfirst (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.readMonthFirst"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.readMonthFirst"]], "relaxedfactorystrategy (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.relaxedFactoryStrategy"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.relaxedFactoryStrategy"]], "setaggressivematching() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"]], "setanchordateday() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "setsourcelanguage() (datematcherutils method)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setSourceLanguage"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setSourceLanguage"]], "sourcelanguage (datematcherutils attribute)": [[131, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.sourceLanguage"], [389, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.sourceLanguage"]], "sparknlp.annotator.matcher.date_matcher": [[131, "module-sparknlp.annotator.matcher.date_matcher"], [389, "module-sparknlp.annotator.matcher.date_matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[132, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"], [391, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "inputannotatortypes (multidatematcher attribute)": [[132, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.inputAnnotatorTypes"], [391, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.inputAnnotatorTypes"]], "name (multidatematcher attribute)": [[132, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.name"], [391, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.name"]], "outputannotatortype (multidatematcher attribute)": [[132, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.outputAnnotatorType"], [391, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.outputAnnotatorType"]], "sparknlp.annotator.matcher.multi_date_matcher": [[132, "module-sparknlp.annotator.matcher.multi_date_matcher"], [391, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "delimiter (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.delimiter"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.delimiter"]], "externalrules (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.externalRules"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.externalRules"]], "inputannotatortypes (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.inputAnnotatorTypes"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.inputAnnotatorTypes"]], "inputannotatortypes (regexmatchermodel attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.inputAnnotatorTypes"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.inputAnnotatorTypes"]], "name (regexmatchermodel attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.name"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.name"]], "outputannotatortype (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.outputAnnotatorType"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.outputAnnotatorType"]], "outputannotatortype (regexmatchermodel attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.outputAnnotatorType"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.outputAnnotatorType"]], "rules (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.rules"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.rules"]], "setdelimiter() (regexmatcher method)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[133, "module-sparknlp.annotator.matcher.regex_matcher"], [392, "module-sparknlp.annotator.matcher.regex_matcher"]], "strategy (regexmatcher attribute)": [[133, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.strategy"], [392, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.strategy"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "buildfromtokens (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.buildFromTokens"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.buildFromTokens"]], "buildfromtokens (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.buildFromTokens"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.buildFromTokens"]], "casesensitive (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.caseSensitive"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.caseSensitive"]], "entities (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entities"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entities"]], "entityvalue (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entityValue"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entityValue"]], "entityvalue (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.entityValue"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.entityValue"]], "inputannotatortypes (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.inputAnnotatorTypes"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.inputAnnotatorTypes"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.inputAnnotatorTypes"]], "mergeoverlapping (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.mergeOverlapping"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.mergeOverlapping"]], "mergeoverlapping (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.mergeOverlapping"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.mergeOverlapping"]], "name (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.name"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.name"]], "outputannotatortype (textmatcher attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.outputAnnotatorType"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.outputAnnotatorType"]], "outputannotatortype (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.outputAnnotatorType"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.outputAnnotatorType"]], "pretrained() (textmatchermodel static method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "searchtrie (textmatchermodel attribute)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.searchTrie"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.searchTrie"]], "setbuildfromtokens() (textmatcher method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[134, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"], [393, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[134, "module-sparknlp.annotator.matcher.text_matcher"], [393, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator"], [394, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "delimiter (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.delimiter"], [394, "sparknlp.annotator.n_gram_generator.NGramGenerator.delimiter"]], "enablecumulative (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.enableCumulative"], [394, "sparknlp.annotator.n_gram_generator.NGramGenerator.enableCumulative"]], "inputannotatortypes (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.inputAnnotatorTypes"], [394, "sparknlp.annotator.n_gram_generator.NGramGenerator.inputAnnotatorTypes"]], "n (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.n"], [394, "sparknlp.annotator.n_gram_generator.NGramGenerator.n"]], "name (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.name"], [394, "sparknlp.annotator.n_gram_generator.NGramGenerator.name"]], "outputannotatortype (ngramgenerator attribute)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.outputAnnotatorType"], [394, "sparknlp.annotator.n_gram_generator.NGramGenerator.outputAnnotatorType"]], "setdelimiter() (ngramgenerator method)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"], [394, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"], [394, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[135, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"], [394, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[135, "module-sparknlp.annotator.n_gram_generator"], [394, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[136, "module-sparknlp.annotator.ner"], [395, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "entities (nerapproach attribute)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.entities"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach.entities"]], "getlabelcolumn() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "labelcolumn (nerapproach attribute)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.labelColumn"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach.labelColumn"]], "maxepochs (nerapproach attribute)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.maxEpochs"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach.maxEpochs"]], "minepochs (nerapproach attribute)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.minEpochs"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach.minEpochs"]], "randomseed (nerapproach attribute)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.randomSeed"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach.randomSeed"]], "setentities() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[137, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"], [396, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[137, "module-sparknlp.annotator.ner.ner_approach"], [396, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter"], [397, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "inputannotatortypes (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.inputAnnotatorTypes"], [397, "sparknlp.annotator.ner.ner_converter.NerConverter.inputAnnotatorTypes"]], "name (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.name"], [397, "sparknlp.annotator.ner.ner_converter.NerConverter.name"]], "nerhasnoschema (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.nerHasNoSchema"], [397, "sparknlp.annotator.ner.ner_converter.NerConverter.nerHasNoSchema"]], "outputannotatortype (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.outputAnnotatorType"], [397, "sparknlp.annotator.ner.ner_converter.NerConverter.outputAnnotatorType"]], "preserveposition (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.preservePosition"], [397, "sparknlp.annotator.ner.ner_converter.NerConverter.preservePosition"]], "setnerhasnoschema() (nerconverter method)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"], [397, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"], [397, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"], [397, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[138, "module-sparknlp.annotator.ner.ner_converter"], [397, "module-sparknlp.annotator.ner.ner_converter"]], "whitelist (nerconverter attribute)": [[138, "sparknlp.annotator.ner.ner_converter.NerConverter.whiteList"], [397, "sparknlp.annotator.ner.ner_converter.NerConverter.whiteList"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "c0 (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.c0"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.c0"]], "externalfeatures (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.externalFeatures"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.externalFeatures"]], "includeconfidence (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.includeConfidence"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.includeConfidence"]], "includeconfidence (nercrfmodel attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.includeConfidence"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfModel.includeConfidence"]], "inputannotatortypes (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.inputAnnotatorTypes"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.inputAnnotatorTypes"]], "inputannotatortypes (nercrfmodel attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.inputAnnotatorTypes"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfModel.inputAnnotatorTypes"]], "l2 (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.l2"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.l2"]], "losseps (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.lossEps"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.lossEps"]], "minw (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.minW"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.minW"]], "name (nercrfmodel attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.name"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfModel.name"]], "outputannotatortype (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.outputAnnotatorType"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.outputAnnotatorType"]], "outputannotatortype (nercrfmodel attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.outputAnnotatorType"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfModel.outputAnnotatorType"]], "pretrained() (nercrfmodel static method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[139, "module-sparknlp.annotator.ner.ner_crf"], [398, "module-sparknlp.annotator.ner.ner_crf"]], "verbose (nercrfapproach attribute)": [[139, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.verbose"], [398, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.verbose"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "batchsize (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.batchSize"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.batchSize"]], "bestmodelmetric (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.bestModelMetric"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.bestModelMetric"]], "classes (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.classes"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel.classes"]], "configprotobytes (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.configProtoBytes"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.configProtoBytes"]], "configprotobytes (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.configProtoBytes"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel.configProtoBytes"]], "dropout (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.dropout"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.dropout"]], "enablememoryoptimizer (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.enableMemoryOptimizer"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.enableMemoryOptimizer"]], "graphfolder (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.graphFolder"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.graphFolder"]], "includeallconfidencescores (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeAllConfidenceScores"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeAllConfidenceScores"]], "includeallconfidencescores (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeAllConfidenceScores"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeAllConfidenceScores"]], "includeconfidence (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeConfidence"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeConfidence"]], "includeconfidence (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeConfidence"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeConfidence"]], "inputannotatortypes (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.inputAnnotatorTypes"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.inputAnnotatorTypes"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel.inputAnnotatorTypes"]], "lr (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.lr"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.lr"]], "name (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.name"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel.name"]], "outputannotatortype (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.outputAnnotatorType"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.outputAnnotatorType"]], "outputannotatortype (nerdlmodel attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.outputAnnotatorType"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel.outputAnnotatorType"]], "po (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.po"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.po"]], "pretrained() (nerdlmodel static method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"], [399, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[140, "module-sparknlp.annotator.ner.ner_dl"], [399, "module-sparknlp.annotator.ner.ner_dl"]], "usebestmodel (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useBestModel"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useBestModel"]], "usecontrib (nerdlapproach attribute)": [[140, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useContrib"], [399, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useContrib"]], "nerdlgraphchecker (class in sparknlp.annotator.ner.ner_dl_graph_checker)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker"]], "nerdlgraphcheckermodel (class in sparknlp.annotator.ner.ner_dl_graph_checker)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphCheckerModel"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphCheckerModel"]], "embeddingsdim (nerdlgraphchecker attribute)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.embeddingsDim"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.embeddingsDim"]], "graphfolder (nerdlgraphchecker attribute)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.graphFolder"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.graphFolder"]], "inputannotatortypes (nerdlgraphchecker attribute)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.inputAnnotatorTypes"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.inputAnnotatorTypes"]], "inputannotatortypes (nerdlgraphcheckermodel attribute)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphCheckerModel.inputAnnotatorTypes"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphCheckerModel.inputAnnotatorTypes"]], "inputcols (nerdlgraphchecker attribute)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.inputCols"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.inputCols"]], "labelcolumn (nerdlgraphchecker attribute)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.labelColumn"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.labelColumn"]], "setembeddingsdim() (nerdlgraphchecker method)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.setEmbeddingsDim"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.setEmbeddingsDim"]], "setembeddingsmodel() (nerdlgraphchecker method)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.setEmbeddingsModel"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.setEmbeddingsModel"]], "setgraphfolder() (nerdlgraphchecker method)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.setGraphFolder"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.setGraphFolder"]], "setinputcols() (nerdlgraphchecker method)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.setInputCols"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.setInputCols"]], "setlabelcolumn() (nerdlgraphchecker method)": [[141, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.setLabelColumn"], [400, "sparknlp.annotator.ner.ner_dl_graph_checker.NerDLGraphChecker.setLabelColumn"]], "sparknlp.annotator.ner.ner_dl_graph_checker": [[141, "module-sparknlp.annotator.ner.ner_dl_graph_checker"], [400, "module-sparknlp.annotator.ner.ner_dl_graph_checker"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[142, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"], [401, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "inputannotatortypes (neroverwriter attribute)": [[142, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.inputAnnotatorTypes"], [401, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.inputAnnotatorTypes"]], "name (neroverwriter attribute)": [[142, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.name"], [401, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.name"]], "nerwords (neroverwriter attribute)": [[142, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.nerWords"], [401, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.nerWords"]], "newnerentity (neroverwriter attribute)": [[142, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.newNerEntity"], [401, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.newNerEntity"]], "outputannotatortype (neroverwriter attribute)": [[142, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.outputAnnotatorType"], [401, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.outputAnnotatorType"]], "replaceentities (neroverwriter attribute)": [[142, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.replaceEntities"], [401, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.replaceEntities"]], "setnerwords() (neroverwriter method)": [[142, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"], [401, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[142, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"], [401, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[142, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"], [401, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[142, "module-sparknlp.annotator.ner.ner_overwriter"], [401, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[143, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"], [402, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[143, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"], [402, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[143, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.ignoreEntities"], [402, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[143, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.inputAnnotatorTypes"], [402, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[143, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"], [402, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[143, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.name"], [402, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[143, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.outputAnnotatorType"], [402, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[143, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.predictionThreshold"], [402, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[143, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"], [402, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[143, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"], [402, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[143, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"], [402, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[143, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [402, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[144, "sparknlp.annotator.normalizer.Normalizer"], [403, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[144, "sparknlp.annotator.normalizer.NormalizerModel"], [403, "sparknlp.annotator.normalizer.NormalizerModel"]], "cleanuppatterns (normalizer attribute)": [[144, "sparknlp.annotator.normalizer.Normalizer.cleanupPatterns"], [403, "sparknlp.annotator.normalizer.Normalizer.cleanupPatterns"]], "cleanuppatterns (normalizermodel attribute)": [[144, "sparknlp.annotator.normalizer.NormalizerModel.cleanupPatterns"], [403, "sparknlp.annotator.normalizer.NormalizerModel.cleanupPatterns"]], "inputannotatortypes (normalizer attribute)": [[144, "sparknlp.annotator.normalizer.Normalizer.inputAnnotatorTypes"], [403, "sparknlp.annotator.normalizer.Normalizer.inputAnnotatorTypes"]], "inputannotatortypes (normalizermodel attribute)": [[144, "sparknlp.annotator.normalizer.NormalizerModel.inputAnnotatorTypes"], [403, "sparknlp.annotator.normalizer.NormalizerModel.inputAnnotatorTypes"]], "lowercase (normalizer attribute)": [[144, "sparknlp.annotator.normalizer.Normalizer.lowercase"], [403, "sparknlp.annotator.normalizer.Normalizer.lowercase"]], "lowercase (normalizermodel attribute)": [[144, "sparknlp.annotator.normalizer.NormalizerModel.lowercase"], [403, "sparknlp.annotator.normalizer.NormalizerModel.lowercase"]], "maxlength (normalizer attribute)": [[144, "sparknlp.annotator.normalizer.Normalizer.maxLength"], [403, "sparknlp.annotator.normalizer.Normalizer.maxLength"]], "minlength (normalizer attribute)": [[144, "sparknlp.annotator.normalizer.Normalizer.minLength"], [403, "sparknlp.annotator.normalizer.Normalizer.minLength"]], "name (normalizermodel attribute)": [[144, "sparknlp.annotator.normalizer.NormalizerModel.name"], [403, "sparknlp.annotator.normalizer.NormalizerModel.name"]], "outputannotatortype (normalizer attribute)": [[144, "sparknlp.annotator.normalizer.Normalizer.outputAnnotatorType"], [403, "sparknlp.annotator.normalizer.Normalizer.outputAnnotatorType"]], "outputannotatortype (normalizermodel attribute)": [[144, "sparknlp.annotator.normalizer.NormalizerModel.outputAnnotatorType"], [403, "sparknlp.annotator.normalizer.NormalizerModel.outputAnnotatorType"]], "setcleanuppatterns() (normalizer method)": [[144, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"], [403, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[144, "sparknlp.annotator.normalizer.Normalizer.setLowercase"], [403, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[144, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"], [403, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[144, "sparknlp.annotator.normalizer.Normalizer.setMinLength"], [403, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[144, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"], [403, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "slangdictionary (normalizer attribute)": [[144, "sparknlp.annotator.normalizer.Normalizer.slangDictionary"], [403, "sparknlp.annotator.normalizer.Normalizer.slangDictionary"]], "slangmatchcase (normalizer attribute)": [[144, "sparknlp.annotator.normalizer.Normalizer.slangMatchCase"], [403, "sparknlp.annotator.normalizer.Normalizer.slangMatchCase"]], "slangmatchcase (normalizermodel attribute)": [[144, "sparknlp.annotator.normalizer.NormalizerModel.slangMatchCase"], [403, "sparknlp.annotator.normalizer.NormalizerModel.slangMatchCase"]], "sparknlp.annotator.normalizer": [[144, "module-sparknlp.annotator.normalizer"], [403, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[145, "module-sparknlp.annotator.openai"], [404, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "bestof (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.bestOf"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.bestOf"]], "echo (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.echo"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.echo"]], "frequencypenalty (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.frequencyPenalty"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.frequencyPenalty"]], "inputannotatortypes (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.inputAnnotatorTypes"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.inputAnnotatorTypes"]], "logitbias (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logitBias"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logitBias"]], "logprobs (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logprobs"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logprobs"]], "maxtokens (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.maxTokens"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.maxTokens"]], "model (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.model"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.model"]], "name (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.name"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.name"]], "numberofcompletions (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.numberOfCompletions"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.numberOfCompletions"]], "outputannotatortype (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.outputAnnotatorType"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.outputAnnotatorType"]], "presencepenalty (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.presencePenalty"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.presencePenalty"]], "setbestof() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[146, "module-sparknlp.annotator.openai.openai_completion"], [405, "module-sparknlp.annotator.openai.openai_completion"]], "stop (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.stop"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.stop"]], "suffix (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.suffix"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.suffix"]], "temperature (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.temperature"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.temperature"]], "topp (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.topP"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.topP"]], "user (openaicompletion attribute)": [[146, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.user"], [405, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.user"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[147, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"], [406, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "inputannotatortypes (openaiembeddings attribute)": [[147, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.inputAnnotatorTypes"], [406, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.inputAnnotatorTypes"]], "model (openaiembeddings attribute)": [[147, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.model"], [406, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.model"]], "name (openaiembeddings attribute)": [[147, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.name"], [406, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.name"]], "outputannotatortype (openaiembeddings attribute)": [[147, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.outputAnnotatorType"], [406, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.outputAnnotatorType"]], "setmodel() (openaiembeddings method)": [[147, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"], [406, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[147, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"], [406, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[147, "module-sparknlp.annotator.openai.openai_embeddings"], [406, "module-sparknlp.annotator.openai.openai_embeddings"]], "user (openaiembeddings attribute)": [[147, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.user"], [406, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.user"]], "sparknlp.annotator.param": [[148, "module-sparknlp.annotator.param"], [409, "module-sparknlp.annotator.param"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "batchsize (classifierencoder attribute)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.batchSize"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.batchSize"]], "configprotobytes (classifierencoder attribute)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.configProtoBytes"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.configProtoBytes"]], "labelcolumn (classifierencoder attribute)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.labelColumn"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.labelColumn"]], "lr (classifierencoder attribute)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.lr"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.lr"]], "maxepochs (classifierencoder attribute)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.maxEpochs"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.maxEpochs"]], "randomseed (classifierencoder attribute)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.randomSeed"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.randomSeed"]], "setbatchsize() (classifierencoder method)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[149, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"], [407, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[149, "module-sparknlp.annotator.param.classifier_encoder"], [407, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "enableoutputlogs (evaluationdlparams attribute)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.enableOutputLogs"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.enableOutputLogs"]], "evaluationlogextended (evaluationdlparams attribute)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.evaluationLogExtended"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.evaluationLogExtended"]], "outputlogspath (evaluationdlparams attribute)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.outputLogsPath"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.outputLogsPath"]], "setenableoutputlogs() (evaluationdlparams method)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[150, "module-sparknlp.annotator.param.evaluation_dl_params"], [408, "module-sparknlp.annotator.param.evaluation_dl_params"]], "testdataset (evaluationdlparams attribute)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.testDataset"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.testDataset"]], "validationsplit (evaluationdlparams attribute)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.validationSplit"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.validationSplit"]], "verbose (evaluationdlparams attribute)": [[150, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.verbose"], [408, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.verbose"]], "sparknlp.annotator.pos": [[151, "module-sparknlp.annotator.pos"], [410, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronApproach"], [411, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronModel"], [411, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"], [411, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "inputannotatortypes (perceptronapproach attribute)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronApproach.inputAnnotatorTypes"], [411, "sparknlp.annotator.pos.perceptron.PerceptronApproach.inputAnnotatorTypes"]], "inputannotatortypes (perceptronmodel attribute)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronModel.inputAnnotatorTypes"], [411, "sparknlp.annotator.pos.perceptron.PerceptronModel.inputAnnotatorTypes"]], "niterations (perceptronapproach attribute)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronApproach.nIterations"], [411, "sparknlp.annotator.pos.perceptron.PerceptronApproach.nIterations"]], "name (perceptronmodel attribute)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronModel.name"], [411, "sparknlp.annotator.pos.perceptron.PerceptronModel.name"]], "outputannotatortype (perceptronapproach attribute)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronApproach.outputAnnotatorType"], [411, "sparknlp.annotator.pos.perceptron.PerceptronApproach.outputAnnotatorType"]], "outputannotatortype (perceptronmodel attribute)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronModel.outputAnnotatorType"], [411, "sparknlp.annotator.pos.perceptron.PerceptronModel.outputAnnotatorType"]], "poscol (perceptronapproach attribute)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronApproach.posCol"], [411, "sparknlp.annotator.pos.perceptron.PerceptronApproach.posCol"]], "pretrained() (perceptronmodel static method)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"], [411, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"], [411, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[152, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"], [411, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[152, "module-sparknlp.annotator.pos.perceptron"], [411, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[153, "module-sparknlp.annotator.sentence"], [412, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "custombounds (sentencedetectorparams attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBounds"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBounds"]], "customboundsstrategy (sentencedetectorparams attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBoundsStrategy"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBoundsStrategy"]], "detectlists (sentencedetector attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.detectLists"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.detectLists"]], "explodesentences (sentencedetectorparams attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.explodeSentences"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.explodeSentences"]], "inputannotatortypes (sentencedetector attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.inputAnnotatorTypes"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.inputAnnotatorTypes"]], "maxlength (sentencedetectorparams attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.maxLength"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.maxLength"]], "minlength (sentencedetectorparams attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.minLength"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.minLength"]], "name (sentencedetector attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.name"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.name"]], "outputannotatortype (sentencedetector attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.outputAnnotatorType"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.outputAnnotatorType"]], "setcustombounds() (sentencedetector method)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[154, "module-sparknlp.annotator.sentence.sentence_detector"], [413, "module-sparknlp.annotator.sentence.sentence_detector"]], "splitlength (sentencedetectorparams attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.splitLength"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.splitLength"]], "useabbreviations (sentencedetectorparams attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useAbbreviations"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useAbbreviations"]], "usecustomboundsonly (sentencedetectorparams attribute)": [[154, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useCustomBoundsOnly"], [413, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useCustomBoundsOnly"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "custombounds (sentencedetectordlmodel attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.customBounds"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.customBounds"]], "epochsnumber (sentencedetectordlapproach attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.epochsNumber"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.epochsNumber"]], "explodesentences (sentencedetectordlapproach attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.explodeSentences"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.explodeSentences"]], "explodesentences (sentencedetectordlmodel attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.explodeSentences"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.explodeSentences"]], "impossiblepenultimates (sentencedetectordlapproach attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.impossiblePenultimates"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.impossiblePenultimates"]], "impossiblepenultimates (sentencedetectordlmodel attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.impossiblePenultimates"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.impossiblePenultimates"]], "inputannotatortypes (sentencedetectordlapproach attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.inputAnnotatorTypes"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentencedetectordlmodel attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.inputAnnotatorTypes"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.inputAnnotatorTypes"]], "maxlength (sentencedetectordlmodel attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.maxLength"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.maxLength"]], "minlength (sentencedetectordlmodel attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.minLength"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.minLength"]], "modelarchitecture (sentencedetectordlapproach attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.modelArchitecture"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.modelArchitecture"]], "modelarchitecture (sentencedetectordlmodel attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.modelArchitecture"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.modelArchitecture"]], "name (sentencedetectordlapproach attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.name"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.name"]], "name (sentencedetectordlmodel attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.name"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.name"]], "outputannotatortype (sentencedetectordlapproach attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputAnnotatorType"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputAnnotatorType"]], "outputannotatortype (sentencedetectordlmodel attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.outputAnnotatorType"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.outputAnnotatorType"]], "outputlogspath (sentencedetectordlapproach attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputLogsPath"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputLogsPath"]], "pretrained() (sentencedetectordlmodel static method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[155, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [414, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "splitlength (sentencedetectordlmodel attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.splitLength"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.splitLength"]], "usecustomboundsonly (sentencedetectordlmodel attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.useCustomBoundsOnly"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.useCustomBoundsOnly"]], "validationsplit (sentencedetectordlapproach attribute)": [[155, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.validationSplit"], [414, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.validationSplit"]], "sparknlp.annotator.sentiment": [[156, "module-sparknlp.annotator.sentiment"], [415, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "decrementmultiplier (sentimentdetector attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.decrementMultiplier"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.decrementMultiplier"]], "dictionary (sentimentdetector attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.dictionary"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.dictionary"]], "enablescore (sentimentdetector attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.enableScore"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.enableScore"]], "incrementmultiplier (sentimentdetector attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.incrementMultiplier"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.incrementMultiplier"]], "inputannotatortypes (sentimentdetector attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.inputAnnotatorTypes"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdetectormodel attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.inputAnnotatorTypes"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.inputAnnotatorTypes"]], "name (sentimentdetectormodel attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.name"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.name"]], "negativemultiplier (sentimentdetector attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.negativeMultiplier"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.negativeMultiplier"]], "outputannotatortype (sentimentdetector attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.outputAnnotatorType"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.outputAnnotatorType"]], "outputannotatortype (sentimentdetectormodel attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.outputAnnotatorType"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.outputAnnotatorType"]], "positivemultiplier (sentimentdetector attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.positiveMultiplier"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.positiveMultiplier"]], "positivemultiplier (sentimentdetectormodel attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.positiveMultiplier"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.positiveMultiplier"]], "reversemultiplier (sentimentdetector attribute)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.reverseMultiplier"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.reverseMultiplier"]], "setdictionary() (sentimentdetector method)": [[157, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"], [416, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[157, "module-sparknlp.annotator.sentiment.sentiment_detector"], [416, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "featurelimit (viveknsentimentapproach attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.featureLimit"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.featureLimit"]], "featurelimit (viveknsentimentmodel attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.featureLimit"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.featureLimit"]], "importantfeatureratio (viveknsentimentapproach attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.importantFeatureRatio"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.importantFeatureRatio"]], "importantfeatureratio (viveknsentimentmodel attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.importantFeatureRatio"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.importantFeatureRatio"]], "inputannotatortypes (viveknsentimentapproach attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.inputAnnotatorTypes"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.inputAnnotatorTypes"]], "inputannotatortypes (viveknsentimentmodel attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.inputAnnotatorTypes"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.inputAnnotatorTypes"]], "name (viveknsentimentmodel attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.name"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.name"]], "outputannotatortype (viveknsentimentapproach attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.outputAnnotatorType"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.outputAnnotatorType"]], "outputannotatortype (viveknsentimentmodel attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.outputAnnotatorType"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.outputAnnotatorType"]], "pretrained() (viveknsentimentmodel static method)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "prunecorpus (viveknsentimentapproach attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.pruneCorpus"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.pruneCorpus"]], "sentimentcol (viveknsentimentapproach attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.sentimentCol"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.sentimentCol"]], "setprunecorpus() (viveknsentimentapproach method)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[158, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [417, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "unimportantfeaturestep (viveknsentimentapproach attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.unimportantFeatureStep"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.unimportantFeatureStep"]], "unimportantfeaturestep (viveknsentimentmodel attribute)": [[158, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.unimportantFeatureStep"], [417, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[159, "module-sparknlp.annotator.seq2seq"], [425, "module-sparknlp.annotator.seq2seq"]], "autoggufmodel (class in sparknlp.annotator.seq2seq.auto_gguf_model)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"], [418, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"]], "inputannotatortypes (autoggufmodel attribute)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.inputAnnotatorTypes"], [418, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufmodel static method)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"], [418, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"]], "name (autoggufmodel attribute)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.name"], [418, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.name"]], "outputannotatortype (autoggufmodel attribute)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.outputAnnotatorType"], [418, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.outputAnnotatorType"]], "pretrained() (autoggufmodel static method)": [[160, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"], [418, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[160, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [418, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "autoggufreranker (class in sparknlp.annotator.seq2seq.auto_gguf_reranker)": [[161, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker"], [419, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker"]], "getquery() (autoggufreranker method)": [[161, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.getQuery"], [419, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.getQuery"]], "inputannotatortypes (autoggufreranker attribute)": [[161, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.inputAnnotatorTypes"], [419, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufreranker static method)": [[161, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.loadSavedModel"], [419, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.loadSavedModel"]], "name (autoggufreranker attribute)": [[161, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.name"], [419, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.name"]], "outputannotatortype (autoggufreranker attribute)": [[161, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.outputAnnotatorType"], [419, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.outputAnnotatorType"]], "pretrained() (autoggufreranker static method)": [[161, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.pretrained"], [419, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.pretrained"]], "query (autoggufreranker attribute)": [[161, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.query"], [419, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.query"]], "setquery() (autoggufreranker method)": [[161, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.setQuery"], [419, "sparknlp.annotator.seq2seq.auto_gguf_reranker.AutoGGUFReranker.setQuery"]], "sparknlp.annotator.seq2seq.auto_gguf_reranker": [[161, "module-sparknlp.annotator.seq2seq.auto_gguf_reranker"], [419, "module-sparknlp.annotator.seq2seq.auto_gguf_reranker"]], "autoggufvisionmodel (class in sparknlp.annotator.seq2seq.auto_gguf_vision_model)": [[162, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel"], [420, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel"]], "inputannotatortypes (autoggufvisionmodel attribute)": [[162, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.inputAnnotatorTypes"], [420, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufvisionmodel static method)": [[162, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.loadSavedModel"], [420, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.loadSavedModel"]], "name (autoggufvisionmodel attribute)": [[162, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.name"], [420, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.name"]], "outputannotatortype (autoggufvisionmodel attribute)": [[162, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.outputAnnotatorType"], [420, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.outputAnnotatorType"]], "pretrained() (autoggufvisionmodel static method)": [[162, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.pretrained"], [420, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[162, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [420, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "beamsize (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.beamSize"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.beamSize"]], "configprotobytes (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.configProtoBytes"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.configProtoBytes"]], "dosample (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.doSample"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.doSample"]], "ignoretokenids (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.ignoreTokenIds"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.ignoreTokenIds"]], "inputannotatortypes (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.inputAnnotatorTypes"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (barttransformer static method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "maxoutputlength (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.maxOutputLength"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.maxOutputLength"]], "minoutputlength (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.minOutputLength"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.minOutputLength"]], "name (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.name"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.name"]], "norepeatngramsize (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.noRepeatNgramSize"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.noRepeatNgramSize"]], "outputannotatortype (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.outputAnnotatorType"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.outputAnnotatorType"]], "pretrained() (barttransformer static method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "repetitionpenalty (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.repetitionPenalty"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.repetitionPenalty"]], "setbeamsize() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[163, "module-sparknlp.annotator.seq2seq.bart_transformer"], [421, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "task (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.task"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.task"]], "temperature (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.temperature"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.temperature"]], "topk (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topK"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topK"]], "topp (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topP"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topP"]], "usecache (barttransformer attribute)": [[163, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.useCache"], [421, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.useCache"]], "coheretransformer (class in sparknlp.annotator.seq2seq.cohere_transformer)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer"]], "beamsize (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.beamSize"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.beamSize"]], "configprotobytes (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.configProtoBytes"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.configProtoBytes"]], "dosample (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.doSample"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.doSample"]], "ignoretokenids (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.ignoreTokenIds"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.ignoreTokenIds"]], "inputannotatortypes (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.inputAnnotatorTypes"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (coheretransformer static method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.loadSavedModel"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.loadSavedModel"]], "maxoutputlength (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.maxOutputLength"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.maxOutputLength"]], "minoutputlength (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.minOutputLength"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.minOutputLength"]], "name (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.name"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.name"]], "norepeatngramsize (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.noRepeatNgramSize"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.noRepeatNgramSize"]], "outputannotatortype (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.outputAnnotatorType"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.outputAnnotatorType"]], "pretrained() (coheretransformer static method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.pretrained"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.pretrained"]], "repetitionpenalty (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.repetitionPenalty"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.repetitionPenalty"]], "setbeamsize() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setBeamSize"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setBeamSize"]], "setconfigprotobytes() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setConfigProtoBytes"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setConfigProtoBytes"]], "setdosample() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setDoSample"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setDoSample"]], "setignoretokenids() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setIgnoreTokenIds"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMaxOutputLength"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMaxOutputLength"]], "setminoutputlength() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMinOutputLength"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMinOutputLength"]], "setnorepeatngramsize() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setNoRepeatNgramSize"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setRepetitionPenalty"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setRepetitionPenalty"]], "setstoptokenids() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setStopTokenIds"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setStopTokenIds"]], "settemperature() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTemperature"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTemperature"]], "settopk() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopK"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopK"]], "settopp() (coheretransformer method)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopP"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[164, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [422, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "stoptokenids (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.stopTokenIds"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.stopTokenIds"]], "temperature (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.temperature"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.temperature"]], "topk (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topK"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topK"]], "topp (coheretransformer attribute)": [[164, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topP"], [422, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topP"]], "cpmtransformer (class in sparknlp.annotator.seq2seq.cpm_transformer)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"]], "configprotobytes (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.configProtoBytes"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.configProtoBytes"]], "dosample (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.doSample"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.doSample"]], "ignoretokenids (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.ignoreTokenIds"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.ignoreTokenIds"]], "inputannotatortypes (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.inputAnnotatorTypes"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (cpmtransformer static method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"]], "maxoutputlength (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.maxOutputLength"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.maxOutputLength"]], "minoutputlength (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.minOutputLength"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.minOutputLength"]], "name (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.name"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.name"]], "norepeatngramsize (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.noRepeatNgramSize"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.noRepeatNgramSize"]], "outputannotatortype (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.outputAnnotatorType"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.outputAnnotatorType"]], "pretrained() (cpmtransformer static method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"]], "repetitionpenalty (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.repetitionPenalty"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.repetitionPenalty"]], "setconfigprotobytes() (cpmtransformer method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"]], "setdosample() (cpmtransformer method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"]], "setignoretokenids() (cpmtransformer method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (cpmtransformer method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"]], "setminoutputlength() (cpmtransformer method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (cpmtransformer method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (cpmtransformer method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"]], "settemperature() (cpmtransformer method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"]], "settopk() (cpmtransformer method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"]], "settopp() (cpmtransformer method)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[165, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [423, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "temperature (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.temperature"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.temperature"]], "topk (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topK"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topK"]], "topp (cpmtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topP"], [423, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topP"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "configprotobytes (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.configProtoBytes"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.configProtoBytes"]], "dosample (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.doSample"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.doSample"]], "ignoretokenids (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.ignoreTokenIds"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.ignoreTokenIds"]], "inputannotatortypes (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.inputAnnotatorTypes"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (gpt2transformer static method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "maxoutputlength (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.maxOutputLength"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.maxOutputLength"]], "minoutputlength (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.minOutputLength"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.minOutputLength"]], "name (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.name"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.name"]], "norepeatngramsize (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.noRepeatNgramSize"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.noRepeatNgramSize"]], "outputannotatortype (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.outputAnnotatorType"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.outputAnnotatorType"]], "pretrained() (gpt2transformer static method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "repetitionpenalty (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.repetitionPenalty"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.repetitionPenalty"]], "setconfigprotobytes() (gpt2transformer method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[166, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [424, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "task (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.task"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.task"]], "temperature (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.temperature"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.temperature"]], "topk (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topK"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topK"]], "topp (gpt2transformer attribute)": [[166, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topP"], [424, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topP"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "configprotobytes (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.configProtoBytes"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.configProtoBytes"]], "dosample (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.doSample"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.doSample"]], "ignoretokenids (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.ignoreTokenIds"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.ignoreTokenIds"]], "inputannotatortypes (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.inputAnnotatorTypes"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama2transformer static method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "maxoutputlength (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.maxOutputLength"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.maxOutputLength"]], "minoutputlength (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.minOutputLength"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.minOutputLength"]], "name (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.name"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.name"]], "norepeatngramsize (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.noRepeatNgramSize"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.noRepeatNgramSize"]], "outputannotatortype (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.outputAnnotatorType"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.outputAnnotatorType"]], "pretrained() (llama2transformer static method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "repetitionpenalty (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.repetitionPenalty"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.repetitionPenalty"]], "setconfigprotobytes() (llama2transformer method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[167, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [426, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "temperature (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.temperature"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.temperature"]], "topk (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topK"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topK"]], "topp (llama2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topP"], [426, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topP"]], "llama3transformer (class in sparknlp.annotator.seq2seq.llama3_transformer)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"]], "beamsize (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.beamSize"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.beamSize"]], "configprotobytes (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.configProtoBytes"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.configProtoBytes"]], "dosample (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.doSample"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.doSample"]], "ignoretokenids (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.ignoreTokenIds"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.ignoreTokenIds"]], "inputannotatortypes (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.inputAnnotatorTypes"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama3transformer static method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"]], "maxoutputlength (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.maxOutputLength"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.maxOutputLength"]], "minoutputlength (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.minOutputLength"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.minOutputLength"]], "name (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.name"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.name"]], "norepeatngramsize (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.noRepeatNgramSize"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.noRepeatNgramSize"]], "outputannotatortype (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.outputAnnotatorType"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.outputAnnotatorType"]], "pretrained() (llama3transformer static method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"]], "repetitionpenalty (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.repetitionPenalty"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.repetitionPenalty"]], "setbeamsize() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"]], "setconfigprotobytes() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"]], "setdosample() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"]], "setignoretokenids() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"]], "setminoutputlength() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"]], "setstoptokenids() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"]], "settemperature() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"]], "settopk() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"]], "settopp() (llama3transformer method)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[168, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [427, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "stoptokenids (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.stopTokenIds"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.stopTokenIds"]], "temperature (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.temperature"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.temperature"]], "topk (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topK"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topK"]], "topp (llama3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topP"], [427, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topP"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "beamsize (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.beamSize"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.beamSize"]], "configprotobytes (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.configProtoBytes"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.configProtoBytes"]], "dosample (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.doSample"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.doSample"]], "ignoretokenids (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.ignoreTokenIds"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.ignoreTokenIds"]], "inputannotatortypes (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.inputAnnotatorTypes"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (m2m100transformer static method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "maxoutputlength (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.maxOutputLength"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.maxOutputLength"]], "minoutputlength (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.minOutputLength"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.minOutputLength"]], "name (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.name"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.name"]], "norepeatngramsize (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.noRepeatNgramSize"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.noRepeatNgramSize"]], "outputannotatortype (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.outputAnnotatorType"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.outputAnnotatorType"]], "pretrained() (m2m100transformer static method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "repetitionpenalty (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.repetitionPenalty"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.repetitionPenalty"]], "setbeamsize() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[169, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [428, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "srclang (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.srcLang"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.srcLang"]], "temperature (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.temperature"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.temperature"]], "tgtlang (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.tgtLang"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.tgtLang"]], "topk (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topK"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topK"]], "topp (m2m100transformer attribute)": [[169, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topP"], [428, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topP"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "configprotobytes (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.configProtoBytes"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.configProtoBytes"]], "dosample (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.doSample"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.doSample"]], "ignoretokenids (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.ignoreTokenIds"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.ignoreTokenIds"]], "inputannotatortypes (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.inputAnnotatorTypes"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.inputAnnotatorTypes"]], "langid (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.langId"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.langId"]], "loadsavedmodel() (mariantransformer static method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "maxinputlength (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxInputLength"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxInputLength"]], "maxoutputlength (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxOutputLength"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxOutputLength"]], "name (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.name"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.name"]], "norepeatngramsize (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.noRepeatNgramSize"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.noRepeatNgramSize"]], "outputannotatortype (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.outputAnnotatorType"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.outputAnnotatorType"]], "pretrained() (mariantransformer static method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "repetitionpenalty (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.repetitionPenalty"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.repetitionPenalty"]], "setconfigprotobytes() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[170, "module-sparknlp.annotator.seq2seq.marian_transformer"], [429, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "temperature (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.temperature"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.temperature"]], "topk (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topK"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topK"]], "topp (mariantransformer attribute)": [[170, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topP"], [429, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topP"]], "mistraltransformer (class in sparknlp.annotator.seq2seq.mistral_transformer)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"]], "configprotobytes (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.configProtoBytes"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.configProtoBytes"]], "dosample (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.doSample"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.doSample"]], "ignoretokenids (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.ignoreTokenIds"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.ignoreTokenIds"]], "inputannotatortypes (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.inputAnnotatorTypes"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (mistraltransformer static method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"]], "maxoutputlength (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.maxOutputLength"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.maxOutputLength"]], "minoutputlength (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.minOutputLength"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.minOutputLength"]], "name (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.name"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.name"]], "norepeatngramsize (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.noRepeatNgramSize"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.noRepeatNgramSize"]], "outputannotatortype (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.outputAnnotatorType"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.outputAnnotatorType"]], "pretrained() (mistraltransformer static method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"]], "repetitionpenalty (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.repetitionPenalty"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.repetitionPenalty"]], "setconfigprotobytes() (mistraltransformer method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"]], "setdosample() (mistraltransformer method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"]], "setignoretokenids() (mistraltransformer method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (mistraltransformer method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"]], "setminoutputlength() (mistraltransformer method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"]], "setnorepeatngramsize() (mistraltransformer method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mistraltransformer method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"]], "settemperature() (mistraltransformer method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"]], "settopk() (mistraltransformer method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"]], "settopp() (mistraltransformer method)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[171, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [430, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "temperature (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.temperature"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.temperature"]], "topk (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topK"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topK"]], "topp (mistraltransformer attribute)": [[171, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topP"], [430, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topP"]], "nllbtransformer (class in sparknlp.annotator.seq2seq.nllb_transformer)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"]], "beamsize (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.beamSize"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.beamSize"]], "configprotobytes (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.configProtoBytes"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.configProtoBytes"]], "dosample (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.doSample"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.doSample"]], "ignoretokenids (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.ignoreTokenIds"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.ignoreTokenIds"]], "inputannotatortypes (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.inputAnnotatorTypes"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (nllbtransformer static method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"]], "maxoutputlength (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.maxOutputLength"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.maxOutputLength"]], "minoutputlength (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.minOutputLength"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.minOutputLength"]], "name (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.name"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.name"]], "norepeatngramsize (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.noRepeatNgramSize"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.noRepeatNgramSize"]], "outputannotatortype (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.outputAnnotatorType"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.outputAnnotatorType"]], "pretrained() (nllbtransformer static method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"]], "repetitionpenalty (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.repetitionPenalty"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.repetitionPenalty"]], "setbeamsize() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"]], "setconfigprotobytes() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"]], "setdosample() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"]], "setignoretokenids() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"]], "setminoutputlength() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"]], "setnorepeatngramsize() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"]], "setsrclang() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"]], "settemperature() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"]], "settgtlang() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"]], "settopk() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"]], "settopp() (nllbtransformer method)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[172, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [431, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "srclang (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.srcLang"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.srcLang"]], "temperature (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.temperature"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.temperature"]], "tgtlang (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.tgtLang"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.tgtLang"]], "topk (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topK"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topK"]], "topp (nllbtransformer attribute)": [[172, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topP"], [431, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topP"]], "olmotransformer (class in sparknlp.annotator.seq2seq.olmo_transformer)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer"]], "configprotobytes (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.configProtoBytes"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.configProtoBytes"]], "dosample (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.doSample"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.doSample"]], "ignoretokenids (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.ignoreTokenIds"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.ignoreTokenIds"]], "inputannotatortypes (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.inputAnnotatorTypes"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (olmotransformer static method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.loadSavedModel"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.loadSavedModel"]], "maxoutputlength (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.maxOutputLength"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.maxOutputLength"]], "minoutputlength (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.minOutputLength"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.minOutputLength"]], "name (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.name"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.name"]], "norepeatngramsize (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.noRepeatNgramSize"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.noRepeatNgramSize"]], "outputannotatortype (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.outputAnnotatorType"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.outputAnnotatorType"]], "pretrained() (olmotransformer static method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.pretrained"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.pretrained"]], "repetitionpenalty (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.repetitionPenalty"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.repetitionPenalty"]], "setconfigprotobytes() (olmotransformer method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setConfigProtoBytes"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setConfigProtoBytes"]], "setdosample() (olmotransformer method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setDoSample"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setDoSample"]], "setignoretokenids() (olmotransformer method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setIgnoreTokenIds"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (olmotransformer method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMaxOutputLength"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMaxOutputLength"]], "setminoutputlength() (olmotransformer method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMinOutputLength"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMinOutputLength"]], "setnorepeatngramsize() (olmotransformer method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setNoRepeatNgramSize"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (olmotransformer method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setRepetitionPenalty"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setRepetitionPenalty"]], "settemperature() (olmotransformer method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTemperature"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTemperature"]], "settopk() (olmotransformer method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopK"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopK"]], "settopp() (olmotransformer method)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopP"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[173, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [432, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "temperature (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.temperature"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.temperature"]], "topk (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topK"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topK"]], "topp (olmotransformer attribute)": [[173, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topP"], [432, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topP"]], "phi2transformer (class in sparknlp.annotator.seq2seq.phi2_transformer)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"]], "configprotobytes (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.configProtoBytes"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.configProtoBytes"]], "dosample (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.doSample"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.doSample"]], "ignoretokenids (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.ignoreTokenIds"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.ignoreTokenIds"]], "inputannotatortypes (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.inputAnnotatorTypes"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi2transformer static method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"]], "maxoutputlength (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.maxOutputLength"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.maxOutputLength"]], "minoutputlength (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.minOutputLength"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.minOutputLength"]], "name (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.name"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.name"]], "norepeatngramsize (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.noRepeatNgramSize"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.noRepeatNgramSize"]], "outputannotatortype (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.outputAnnotatorType"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.outputAnnotatorType"]], "pretrained() (phi2transformer static method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"]], "repetitionpenalty (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.repetitionPenalty"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi2transformer method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"]], "setdosample() (phi2transformer method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"]], "setignoretokenids() (phi2transformer method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi2transformer method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"]], "setminoutputlength() (phi2transformer method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi2transformer method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi2transformer method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"]], "settemperature() (phi2transformer method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"]], "settopk() (phi2transformer method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"]], "settopp() (phi2transformer method)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[174, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [433, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "temperature (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.temperature"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.temperature"]], "topk (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topK"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topK"]], "topp (phi2transformer attribute)": [[174, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topP"], [433, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topP"]], "phi3transformer (class in sparknlp.annotator.seq2seq.phi3_transformer)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"]], "configprotobytes (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.configProtoBytes"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.configProtoBytes"]], "dosample (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.doSample"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.doSample"]], "ignoretokenids (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.ignoreTokenIds"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.ignoreTokenIds"]], "inputannotatortypes (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.inputAnnotatorTypes"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi3transformer static method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"]], "maxoutputlength (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.maxOutputLength"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.maxOutputLength"]], "minoutputlength (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.minOutputLength"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.minOutputLength"]], "name (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.name"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.name"]], "norepeatngramsize (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.noRepeatNgramSize"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.noRepeatNgramSize"]], "outputannotatortype (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.outputAnnotatorType"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.outputAnnotatorType"]], "pretrained() (phi3transformer static method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"]], "repetitionpenalty (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.repetitionPenalty"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi3transformer method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"]], "setdosample() (phi3transformer method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"]], "setignoretokenids() (phi3transformer method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3transformer method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"]], "setminoutputlength() (phi3transformer method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi3transformer method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3transformer method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"]], "settemperature() (phi3transformer method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"]], "settopk() (phi3transformer method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"]], "settopp() (phi3transformer method)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[175, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [434, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "temperature (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.temperature"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.temperature"]], "topk (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topK"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topK"]], "topp (phi3transformer attribute)": [[175, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topP"], [434, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topP"]], "phi4transformer (class in sparknlp.annotator.seq2seq.phi4_transformer)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer"]], "beamsize (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.beamSize"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.beamSize"]], "configprotobytes (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.configProtoBytes"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.configProtoBytes"]], "dosample (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.doSample"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.doSample"]], "ignoretokenids (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.ignoreTokenIds"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.ignoreTokenIds"]], "inputannotatortypes (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.inputAnnotatorTypes"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi4transformer static method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.loadSavedModel"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.loadSavedModel"]], "maxoutputlength (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.maxOutputLength"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.maxOutputLength"]], "minoutputlength (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.minOutputLength"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.minOutputLength"]], "name (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.name"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.name"]], "norepeatngramsize (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.noRepeatNgramSize"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.noRepeatNgramSize"]], "outputannotatortype (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.outputAnnotatorType"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.outputAnnotatorType"]], "pretrained() (phi4transformer static method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.pretrained"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.pretrained"]], "repetitionpenalty (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.repetitionPenalty"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.repetitionPenalty"]], "setbeamsize() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setBeamSize"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setBeamSize"]], "setconfigprotobytes() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setConfigProtoBytes"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setConfigProtoBytes"]], "setdosample() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setDoSample"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setDoSample"]], "setignoretokenids() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setIgnoreTokenIds"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setMaxOutputLength"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setMaxOutputLength"]], "setminoutputlength() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setMinOutputLength"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setNoRepeatNgramSize"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setRepetitionPenalty"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setRepetitionPenalty"]], "setstoptokenids() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setStopTokenIds"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setStopTokenIds"]], "settemperature() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTemperature"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTemperature"]], "settopk() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTopK"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTopK"]], "settopp() (phi4transformer method)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTopP"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi4_transformer": [[176, "module-sparknlp.annotator.seq2seq.phi4_transformer"], [435, "module-sparknlp.annotator.seq2seq.phi4_transformer"]], "stoptokenids (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.stopTokenIds"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.stopTokenIds"]], "temperature (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.temperature"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.temperature"]], "topk (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.topK"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.topK"]], "topp (phi4transformer attribute)": [[176, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.topP"], [435, "sparknlp.annotator.seq2seq.phi4_transformer.Phi4Transformer.topP"]], "qwentransformer (class in sparknlp.annotator.seq2seq.qwen_transformer)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"]], "configprotobytes (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.configProtoBytes"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.configProtoBytes"]], "dosample (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.doSample"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.doSample"]], "ignoretokenids (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.ignoreTokenIds"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.ignoreTokenIds"]], "inputannotatortypes (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.inputAnnotatorTypes"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwentransformer static method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"]], "maxoutputlength (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.maxOutputLength"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.maxOutputLength"]], "minoutputlength (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.minOutputLength"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.minOutputLength"]], "name (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.name"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.name"]], "norepeatngramsize (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.noRepeatNgramSize"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.noRepeatNgramSize"]], "outputannotatortype (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.outputAnnotatorType"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.outputAnnotatorType"]], "pretrained() (qwentransformer static method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"]], "repetitionpenalty (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.repetitionPenalty"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.repetitionPenalty"]], "setconfigprotobytes() (qwentransformer method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"]], "setdosample() (qwentransformer method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"]], "setignoretokenids() (qwentransformer method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwentransformer method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"]], "setminoutputlength() (qwentransformer method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwentransformer method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwentransformer method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"]], "settemperature() (qwentransformer method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"]], "settopk() (qwentransformer method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"]], "settopp() (qwentransformer method)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[177, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [436, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "temperature (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.temperature"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.temperature"]], "topk (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topK"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topK"]], "topp (qwentransformer attribute)": [[177, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topP"], [436, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topP"]], "starcodertransformer (class in sparknlp.annotator.seq2seq.starcoder_transformer)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"]], "configprotobytes (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.configProtoBytes"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.configProtoBytes"]], "dosample (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.doSample"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.doSample"]], "ignoretokenids (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.ignoreTokenIds"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.ignoreTokenIds"]], "inputannotatortypes (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.inputAnnotatorTypes"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (starcodertransformer static method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"]], "maxoutputlength (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.maxOutputLength"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.maxOutputLength"]], "minoutputlength (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.minOutputLength"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.minOutputLength"]], "name (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.name"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.name"]], "norepeatngramsize (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.noRepeatNgramSize"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.noRepeatNgramSize"]], "outputannotatortype (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.outputAnnotatorType"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.outputAnnotatorType"]], "pretrained() (starcodertransformer static method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"]], "repetitionpenalty (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.repetitionPenalty"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.repetitionPenalty"]], "setconfigprotobytes() (starcodertransformer method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"]], "setdosample() (starcodertransformer method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"]], "setignoretokenids() (starcodertransformer method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (starcodertransformer method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"]], "setminoutputlength() (starcodertransformer method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"]], "setnorepeatngramsize() (starcodertransformer method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (starcodertransformer method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"]], "settemperature() (starcodertransformer method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"]], "settopk() (starcodertransformer method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"]], "settopp() (starcodertransformer method)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[178, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [437, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "temperature (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.temperature"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.temperature"]], "topk (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topK"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topK"]], "topp (starcodertransformer attribute)": [[178, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topP"], [437, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topP"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "configprotobytes (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.configProtoBytes"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.configProtoBytes"]], "dosample (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.doSample"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.doSample"]], "ignoretokenids (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.ignoreTokenIds"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.ignoreTokenIds"]], "inputannotatortypes (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.inputAnnotatorTypes"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (t5transformer static method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "maxnewtokens (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxNewTokens"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxNewTokens"]], "maxoutputlength (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxOutputLength"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxOutputLength"]], "minoutputlength (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.minOutputLength"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.minOutputLength"]], "name (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.name"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.name"]], "norepeatngramsize (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.noRepeatNgramSize"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.noRepeatNgramSize"]], "outputannotatortype (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.outputAnnotatorType"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.outputAnnotatorType"]], "pretrained() (t5transformer static method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "repetitionpenalty (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.repetitionPenalty"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.repetitionPenalty"]], "setconfigprotobytes() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[179, "module-sparknlp.annotator.seq2seq.t5_transformer"], [438, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "stopateos (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.stopAtEos"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.stopAtEos"]], "task (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.task"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.task"]], "temperature (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.temperature"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.temperature"]], "topk (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topK"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topK"]], "topp (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topP"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topP"]], "usecache (t5transformer attribute)": [[179, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.useCache"], [438, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.useCache"]], "sparknlp.annotator.similarity": [[180, "module-sparknlp.annotator.similarity"], [440, "module-sparknlp.annotator.similarity"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "aggregationmethod (documentsimilarityrankerapproach attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.aggregationMethod"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.aggregationMethod"]], "asretriever() (documentsimilarityrankerapproach method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "asretrieverquery (documentsimilarityrankerapproach attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetrieverQuery"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetrieverQuery"]], "bucketlength (documentsimilarityrankerapproach attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.bucketLength"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.bucketLength"]], "extractnearestneighbor (documentsimilarityrankerfinisher attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.extractNearestNeighbor"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.extractNearestNeighbor"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "identityranking (documentsimilarityrankerapproach attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.identityRanking"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.identityRanking"]], "inputannotatortypes (documentsimilarityrankerapproach attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.inputAnnotatorTypes"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentsimilarityrankermodel attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.inputAnnotatorTypes"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.inputAnnotatorTypes"]], "inputcols (documentsimilarityrankerfinisher attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.inputCols"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.inputCols"]], "name (documentsimilarityrankerfinisher attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.name"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.name"]], "name (documentsimilarityrankermodel attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.name"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.name"]], "numhashtables (documentsimilarityrankerapproach attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numHashTables"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numHashTables"]], "numberofneighbours (documentsimilarityrankerapproach attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numberOfNeighbours"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numberOfNeighbours"]], "outputannotatortype (documentsimilarityrankerapproach attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.outputAnnotatorType"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.outputAnnotatorType"]], "outputannotatortype (documentsimilarityrankermodel attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.outputAnnotatorType"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.outputAnnotatorType"]], "outputcols (documentsimilarityrankerfinisher attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.outputCols"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.outputCols"]], "setaggregationmethod() (documentsimilarityrankerapproach method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setparams() (documentsimilarityrankerfinisher method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setParams"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setParams"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "similaritymethod (documentsimilarityrankerapproach attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.similarityMethod"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.similarityMethod"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[181, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [439, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "visibledistances (documentsimilarityrankerapproach attribute)": [[181, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.visibleDistances"], [439, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.visibleDistances"]], "sparknlp.annotator.spell_check": [[182, "module-sparknlp.annotator.spell_check"], [442, "module-sparknlp.annotator.spell_check"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "batchsize (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.batchSize"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.batchSize"]], "casestrategy (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.caseStrategy"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.caseStrategy"]], "casestrategy (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.caseStrategy"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.caseStrategy"]], "classcount (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.classCount"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.classCount"]], "classes (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.classes"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.classes"]], "comparelowcase (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.compareLowcase"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.compareLowcase"]], "compoundcount (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.compoundCount"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.compoundCount"]], "configprotobytes (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.configProtoBytes"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.configProtoBytes"]], "configprotobytes (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.configProtoBytes"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.configProtoBytes"]], "correctsymbols (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.correctSymbols"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.correctSymbols"]], "epochs (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.epochs"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.epochs"]], "errorthreshold (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.errorThreshold"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.errorThreshold"]], "errorthreshold (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.errorThreshold"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.errorThreshold"]], "finalrate (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.finalRate"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.finalRate"]], "gamma (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.gamma"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.gamma"]], "getwordclasses() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "graphfolder (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.graphFolder"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.graphFolder"]], "idsvocab (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.idsVocab"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.idsVocab"]], "initialrate (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.initialRate"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.initialRate"]], "inputannotatortypes (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.inputAnnotatorTypes"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.inputAnnotatorTypes"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.inputAnnotatorTypes"]], "languagemodelclasses (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.languageModelClasses"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.languageModelClasses"]], "maxcandidates (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxCandidates"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxCandidates"]], "maxcandidates (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxCandidates"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxCandidates"]], "maxsentlen (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxSentLen"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxSentLen"]], "maxwindowlen (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxWindowLen"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxWindowLen"]], "maxwindowlen (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxWindowLen"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxWindowLen"]], "mincount (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.minCount"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.minCount"]], "name (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.name"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.name"]], "name (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.name"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.name"]], "outputannotatortype (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.outputAnnotatorType"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.outputAnnotatorType"]], "outputannotatortype (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.outputAnnotatorType"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.outputAnnotatorType"]], "pretrained() (contextspellcheckermodel static method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[183, "module-sparknlp.annotator.spell_check.context_spell_checker"], [441, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "tradeoff (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.tradeoff"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.tradeoff"]], "tradeoff (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.tradeoff"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.tradeoff"]], "updateregexclass() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "validationfraction (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.validationFraction"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.validationFraction"]], "vocabfreq (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabFreq"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabFreq"]], "vocabids (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabIds"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabIds"]], "weighteddistpath (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.weightedDistPath"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.weightedDistPath"]], "wordmaxdistance (contextspellcheckerapproach attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.wordMaxDistance"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.wordMaxDistance"]], "wordmaxdistance (contextspellcheckermodel attribute)": [[183, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.wordMaxDistance"], [441, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.wordMaxDistance"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "casesensitive (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.caseSensitive"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.caseSensitive"]], "dictionary (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary"]], "doublevariants (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.doubleVariants"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.doubleVariants"]], "dupslimit (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dupsLimit"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dupsLimit"]], "frequencypriority (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.frequencyPriority"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.frequencyPriority"]], "inputannotatortypes (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.inputAnnotatorTypes"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.inputAnnotatorTypes"]], "inputannotatortypes (norvigsweetingmodel attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.inputAnnotatorTypes"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.inputAnnotatorTypes"]], "intersections (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.intersections"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.intersections"]], "name (norvigsweetingmodel attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.name"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.name"]], "outputannotatortype (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.outputAnnotatorType"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.outputAnnotatorType"]], "outputannotatortype (norvigsweetingmodel attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.outputAnnotatorType"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.outputAnnotatorType"]], "pretrained() (norvigsweetingmodel static method)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "reductlimit (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.reductLimit"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.reductLimit"]], "setcasesensitive() (norvigsweetingapproach method)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "shortcircuit (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.shortCircuit"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.shortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[184, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [443, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "vowelswaplimit (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.vowelSwapLimit"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.vowelSwapLimit"]], "wordsizeignore (norvigsweetingapproach attribute)": [[184, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.wordSizeIgnore"], [443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.wordSizeIgnore"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "corpus (symmetricdeleteapproach attribute)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.corpus"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.corpus"]], "deletesthreshold (symmetricdeleteapproach attribute)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.deletesThreshold"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.deletesThreshold"]], "dictionary (symmetricdeleteapproach attribute)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary"]], "dupslimit (symmetricdeleteapproach attribute)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dupsLimit"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dupsLimit"]], "frequencythreshold (symmetricdeleteapproach attribute)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.frequencyThreshold"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.frequencyThreshold"]], "inputannotatortypes (symmetricdeleteapproach attribute)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.inputAnnotatorTypes"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.inputAnnotatorTypes"]], "inputannotatortypes (symmetricdeletemodel attribute)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.inputAnnotatorTypes"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.inputAnnotatorTypes"]], "maxeditdistance (symmetricdeleteapproach attribute)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.maxEditDistance"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.maxEditDistance"]], "name (symmetricdeletemodel attribute)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.name"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.name"]], "outputannotatortype (symmetricdeleteapproach attribute)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.outputAnnotatorType"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.outputAnnotatorType"]], "outputannotatortype (symmetricdeletemodel attribute)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.outputAnnotatorType"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.outputAnnotatorType"]], "pretrained() (symmetricdeletemodel static method)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[185, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"], [444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[185, "module-sparknlp.annotator.spell_check.symmetric_delete"], [444, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[186, "sparknlp.annotator.stemmer.Stemmer"], [445, "sparknlp.annotator.stemmer.Stemmer"]], "inputannotatortypes (stemmer attribute)": [[186, "sparknlp.annotator.stemmer.Stemmer.inputAnnotatorTypes"], [445, "sparknlp.annotator.stemmer.Stemmer.inputAnnotatorTypes"]], "language (stemmer attribute)": [[186, "sparknlp.annotator.stemmer.Stemmer.language"], [445, "sparknlp.annotator.stemmer.Stemmer.language"]], "name (stemmer attribute)": [[186, "sparknlp.annotator.stemmer.Stemmer.name"], [445, "sparknlp.annotator.stemmer.Stemmer.name"]], "outputannotatortype (stemmer attribute)": [[186, "sparknlp.annotator.stemmer.Stemmer.outputAnnotatorType"], [445, "sparknlp.annotator.stemmer.Stemmer.outputAnnotatorType"]], "sparknlp.annotator.stemmer": [[186, "module-sparknlp.annotator.stemmer"], [445, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "casesensitive (stopwordscleaner attribute)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.caseSensitive"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.caseSensitive"]], "inputannotatortypes (stopwordscleaner attribute)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.inputAnnotatorTypes"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.inputAnnotatorTypes"]], "loaddefaultstopwords() (stopwordscleaner method)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "locale (stopwordscleaner attribute)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.locale"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.locale"]], "name (stopwordscleaner attribute)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.name"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.name"]], "outputannotatortype (stopwordscleaner attribute)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.outputAnnotatorType"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.outputAnnotatorType"]], "pretrained() (stopwordscleaner static method)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[187, "module-sparknlp.annotator.stop_words_cleaner"], [446, "module-sparknlp.annotator.stop_words_cleaner"]], "stopwords (stopwordscleaner attribute)": [[187, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.stopWords"], [446, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.stopWords"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "graphfile (tfnerdlgraphbuilder attribute)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFile"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFile"]], "graphfolder (tfnerdlgraphbuilder attribute)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFolder"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFolder"]], "hiddenunitsnumber (tfnerdlgraphbuilder attribute)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.hiddenUnitsNumber"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.hiddenUnitsNumber"]], "inputannotatortypes (tfnerdlgraphbuilder attribute)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputAnnotatorTypes"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputAnnotatorTypes"]], "inputcols (tfnerdlgraphbuilder attribute)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputCols"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputCols"]], "inputcolsvalidation() (tfnerdlgraphbuilder method)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputColsValidation"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputColsValidation"]], "labelcolumn (tfnerdlgraphbuilder attribute)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.labelColumn"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.labelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[188, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"], [447, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[188, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [447, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token": [[189, "module-sparknlp.annotator.token"], [449, "module-sparknlp.annotator.token"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[190, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"], [448, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[190, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"], [448, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "inputannotatortypes (chunktokenizer attribute)": [[190, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.inputAnnotatorTypes"], [448, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (chunktokenizermodel attribute)": [[190, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.inputAnnotatorTypes"], [448, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.inputAnnotatorTypes"]], "name (chunktokenizer attribute)": [[190, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.name"], [448, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.name"]], "name (chunktokenizermodel attribute)": [[190, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.name"], [448, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.name"]], "sparknlp.annotator.token.chunk_tokenizer": [[190, "module-sparknlp.annotator.token.chunk_tokenizer"], [448, "module-sparknlp.annotator.token.chunk_tokenizer"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "infixes (recursivetokenizer attribute)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.infixes"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.infixes"]], "inputannotatortypes (recursivetokenizer attribute)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.inputAnnotatorTypes"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (recursivetokenizermodel attribute)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.inputAnnotatorTypes"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.inputAnnotatorTypes"]], "name (recursivetokenizer attribute)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.name"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.name"]], "name (recursivetokenizermodel attribute)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.name"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.name"]], "outputannotatortype (recursivetokenizer attribute)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.outputAnnotatorType"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.outputAnnotatorType"]], "outputannotatortype (recursivetokenizermodel attribute)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.outputAnnotatorType"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.outputAnnotatorType"]], "prefixes (recursivetokenizer attribute)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.prefixes"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.prefixes"]], "setinfixes() (recursivetokenizer method)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[191, "module-sparknlp.annotator.token.recursive_tokenizer"], [450, "module-sparknlp.annotator.token.recursive_tokenizer"]], "suffixes (recursivetokenizer attribute)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.suffixes"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.suffixes"]], "whitelist (recursivetokenizer attribute)": [[191, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.whitelist"], [450, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.whitelist"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "inputannotatortypes (regextokenizer attribute)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.inputAnnotatorTypes"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.inputAnnotatorTypes"]], "maxlength (regextokenizer attribute)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.maxLength"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.maxLength"]], "minlength (regextokenizer attribute)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.minLength"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.minLength"]], "name (regextokenizer attribute)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.name"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.name"]], "outputannotatortype (regextokenizer attribute)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.outputAnnotatorType"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.outputAnnotatorType"]], "pattern (regextokenizer attribute)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.pattern"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.pattern"]], "positionalmask (regextokenizer attribute)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.positionalMask"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.positionalMask"]], "preserveposition (regextokenizer attribute)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.preservePosition"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.preservePosition"]], "setmaxlength() (regextokenizer method)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[192, "module-sparknlp.annotator.token.regex_tokenizer"], [451, "module-sparknlp.annotator.token.regex_tokenizer"]], "tolowercase (regextokenizer attribute)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.toLowercase"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.toLowercase"]], "trimwhitespace (regextokenizer attribute)": [[192, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.trimWhitespace"], [451, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.trimWhitespace"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "casesensitiveexceptions (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.caseSensitiveExceptions"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.caseSensitiveExceptions"]], "casesensitiveexceptions (tokenizermodel attribute)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.caseSensitiveExceptions"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.caseSensitiveExceptions"]], "contextchars (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.contextChars"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.contextChars"]], "exceptions (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptions"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptions"]], "exceptions (tokenizermodel attribute)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.exceptions"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.exceptions"]], "exceptionspath (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptionsPath"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptionsPath"]], "getcasesensitiveexceptions() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "infixpatterns (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.infixPatterns"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.infixPatterns"]], "inputannotatortypes (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.inputAnnotatorTypes"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.inputAnnotatorTypes"]], "inputannotatortypes (tokenizermodel attribute)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.inputAnnotatorTypes"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.inputAnnotatorTypes"]], "maxlength (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.maxLength"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.maxLength"]], "minlength (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.minLength"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.minLength"]], "name (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.name"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.name"]], "name (tokenizermodel attribute)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.name"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.name"]], "outputannotatortype (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.outputAnnotatorType"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.outputAnnotatorType"]], "outputannotatortype (tokenizermodel attribute)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.outputAnnotatorType"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.outputAnnotatorType"]], "prefixpattern (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.prefixPattern"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.prefixPattern"]], "pretrained() (tokenizermodel static method)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "rules (tokenizermodel attribute)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.rules"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.rules"]], "setcasesensitiveexceptions() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[193, "module-sparknlp.annotator.token.tokenizer"], [452, "module-sparknlp.annotator.token.tokenizer"]], "splitchars (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.splitChars"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.splitChars"]], "splitchars (tokenizermodel attribute)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitChars"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitChars"]], "splitpattern (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.splitPattern"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.splitPattern"]], "splitpattern (tokenizermodel attribute)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitPattern"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitPattern"]], "suffixpattern (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.suffixPattern"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.suffixPattern"]], "targetpattern (tokenizer attribute)": [[193, "sparknlp.annotator.token.tokenizer.Tokenizer.targetPattern"], [452, "sparknlp.annotator.token.tokenizer.Tokenizer.targetPattern"]], "targetpattern (tokenizermodel attribute)": [[193, "sparknlp.annotator.token.tokenizer.TokenizerModel.targetPattern"], [452, "sparknlp.annotator.token.tokenizer.TokenizerModel.targetPattern"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[194, "sparknlp.annotator.token2_chunk.Token2Chunk"], [453, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "inputannotatortypes (token2chunk attribute)": [[194, "sparknlp.annotator.token2_chunk.Token2Chunk.inputAnnotatorTypes"], [453, "sparknlp.annotator.token2_chunk.Token2Chunk.inputAnnotatorTypes"]], "name (token2chunk attribute)": [[194, "sparknlp.annotator.token2_chunk.Token2Chunk.name"], [453, "sparknlp.annotator.token2_chunk.Token2Chunk.name"]], "outputannotatortype (token2chunk attribute)": [[194, "sparknlp.annotator.token2_chunk.Token2Chunk.outputAnnotatorType"], [453, "sparknlp.annotator.token2_chunk.Token2Chunk.outputAnnotatorType"]], "sparknlp.annotator.token2_chunk": [[194, "module-sparknlp.annotator.token2_chunk"], [453, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[195, "module-sparknlp.annotator.ws"], [454, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "ambiguitythreshold (wordsegmenterapproach attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.ambiguityThreshold"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.ambiguityThreshold"]], "enableregextokenizer (wordsegmenterapproach attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.enableRegexTokenizer"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.enableRegexTokenizer"]], "enableregextokenizer (wordsegmentermodel attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.enableRegexTokenizer"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.enableRegexTokenizer"]], "frequencythreshold (wordsegmenterapproach attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.frequencyThreshold"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.frequencyThreshold"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "inputannotatortypes (wordsegmenterapproach attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.inputAnnotatorTypes"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.inputAnnotatorTypes"]], "inputannotatortypes (wordsegmentermodel attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.inputAnnotatorTypes"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.inputAnnotatorTypes"]], "niterations (wordsegmenterapproach attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.nIterations"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.nIterations"]], "name (wordsegmenterapproach attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.name"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.name"]], "name (wordsegmentermodel attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.name"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.name"]], "outputannotatortype (wordsegmenterapproach attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.outputAnnotatorType"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.outputAnnotatorType"]], "outputannotatortype (wordsegmentermodel attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.outputAnnotatorType"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.outputAnnotatorType"]], "pattern (wordsegmenterapproach attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.pattern"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.pattern"]], "pattern (wordsegmentermodel attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pattern"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pattern"]], "poscol (wordsegmenterapproach attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.posCol"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.posCol"]], "pretrained() (wordsegmentermodel static method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[196, "module-sparknlp.annotator.ws.word_segmenter"], [455, "module-sparknlp.annotator.ws.word_segmenter"]], "tolowercase (wordsegmenterapproach attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.toLowercase"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.toLowercase"]], "tolowercase (wordsegmentermodel attribute)": [[196, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.toLowercase"], [455, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.toLowercase"]], "sparknlp.base": [[197, "module-sparknlp.base"], [466, "module-sparknlp.base"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[198, "sparknlp.base.audio_assembler.AudioAssembler"], [456, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[198, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"], [456, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "inputcol (audioassembler attribute)": [[198, "sparknlp.base.audio_assembler.AudioAssembler.inputCol"], [456, "sparknlp.base.audio_assembler.AudioAssembler.inputCol"]], "name (audioassembler attribute)": [[198, "sparknlp.base.audio_assembler.AudioAssembler.name"], [456, "sparknlp.base.audio_assembler.AudioAssembler.name"]], "outputannotatortype (audioassembler attribute)": [[198, "sparknlp.base.audio_assembler.AudioAssembler.outputAnnotatorType"], [456, "sparknlp.base.audio_assembler.AudioAssembler.outputAnnotatorType"]], "outputcol (audioassembler attribute)": [[198, "sparknlp.base.audio_assembler.AudioAssembler.outputCol"], [456, "sparknlp.base.audio_assembler.AudioAssembler.outputCol"]], "setinputcol() (audioassembler method)": [[198, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"], [456, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[198, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"], [456, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "setparams() (audioassembler method)": [[198, "sparknlp.base.audio_assembler.AudioAssembler.setParams"], [456, "sparknlp.base.audio_assembler.AudioAssembler.setParams"]], "sparknlp.base.audio_assembler": [[198, "module-sparknlp.base.audio_assembler"], [456, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "chunkcol (doc2chunk attribute)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.chunkCol"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.chunkCol"]], "failonmissing (doc2chunk attribute)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.failOnMissing"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.failOnMissing"]], "inputannotatortypes (doc2chunk attribute)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.inputAnnotatorTypes"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.inputAnnotatorTypes"]], "isarray (doc2chunk attribute)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.isArray"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.isArray"]], "lowercase (doc2chunk attribute)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.lowerCase"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.lowerCase"]], "name (doc2chunk attribute)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.name"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.name"]], "outputannotatortype (doc2chunk attribute)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.outputAnnotatorType"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.outputAnnotatorType"]], "setchunkcol() (doc2chunk method)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setparams() (doc2chunk method)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.setParams"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.setParams"]], "setstartcol() (doc2chunk method)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[199, "module-sparknlp.base.doc2_chunk"], [457, "module-sparknlp.base.doc2_chunk"]], "startcol (doc2chunk attribute)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.startCol"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.startCol"]], "startcolbytokenindex (doc2chunk attribute)": [[199, "sparknlp.base.doc2_chunk.Doc2Chunk.startColByTokenIndex"], [457, "sparknlp.base.doc2_chunk.Doc2Chunk.startColByTokenIndex"]], "documentassembler (class in sparknlp.base.document_assembler)": [[200, "sparknlp.base.document_assembler.DocumentAssembler"], [458, "sparknlp.base.document_assembler.DocumentAssembler"]], "cleanupmode (documentassembler attribute)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.cleanupMode"], [458, "sparknlp.base.document_assembler.DocumentAssembler.cleanupMode"]], "getoutputcol() (documentassembler method)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"], [458, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "idcol (documentassembler attribute)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.idCol"], [458, "sparknlp.base.document_assembler.DocumentAssembler.idCol"]], "inputcol (documentassembler attribute)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.inputCol"], [458, "sparknlp.base.document_assembler.DocumentAssembler.inputCol"]], "metadatacol (documentassembler attribute)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.metadataCol"], [458, "sparknlp.base.document_assembler.DocumentAssembler.metadataCol"]], "name (documentassembler attribute)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.name"], [458, "sparknlp.base.document_assembler.DocumentAssembler.name"]], "outputannotatortype (documentassembler attribute)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.outputAnnotatorType"], [458, "sparknlp.base.document_assembler.DocumentAssembler.outputAnnotatorType"]], "outputcol (documentassembler attribute)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.outputCol"], [458, "sparknlp.base.document_assembler.DocumentAssembler.outputCol"]], "setcleanupmode() (documentassembler method)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"], [458, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"], [458, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"], [458, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"], [458, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"], [458, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "setparams() (documentassembler method)": [[200, "sparknlp.base.document_assembler.DocumentAssembler.setParams"], [458, "sparknlp.base.document_assembler.DocumentAssembler.setParams"]], "sparknlp.base.document_assembler": [[200, "module-sparknlp.base.document_assembler"], [458, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "cleanannotations (embeddingsfinisher attribute)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.cleanAnnotations"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.cleanAnnotations"]], "getinputcols() (embeddingsfinisher method)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "inputcols (embeddingsfinisher attribute)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.inputCols"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.inputCols"]], "name (embeddingsfinisher attribute)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.name"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.name"]], "outputasvector (embeddingsfinisher attribute)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputAsVector"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputAsVector"]], "outputcols (embeddingsfinisher attribute)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputCols"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "setparams() (embeddingsfinisher method)": [[201, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setParams"], [459, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setParams"]], "sparknlp.base.embeddings_finisher": [[201, "module-sparknlp.base.embeddings_finisher"], [459, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[202, "sparknlp.base.finisher.Finisher"], [460, "sparknlp.base.finisher.Finisher"]], "annotationsplitsymbol (finisher attribute)": [[202, "sparknlp.base.finisher.Finisher.annotationSplitSymbol"], [460, "sparknlp.base.finisher.Finisher.annotationSplitSymbol"]], "cleanannotations (finisher attribute)": [[202, "sparknlp.base.finisher.Finisher.cleanAnnotations"], [460, "sparknlp.base.finisher.Finisher.cleanAnnotations"]], "getinputcols() (finisher method)": [[202, "sparknlp.base.finisher.Finisher.getInputCols"], [460, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[202, "sparknlp.base.finisher.Finisher.getOutputCols"], [460, "sparknlp.base.finisher.Finisher.getOutputCols"]], "includemetadata (finisher attribute)": [[202, "sparknlp.base.finisher.Finisher.includeMetadata"], [460, "sparknlp.base.finisher.Finisher.includeMetadata"]], "inputcols (finisher attribute)": [[202, "sparknlp.base.finisher.Finisher.inputCols"], [460, "sparknlp.base.finisher.Finisher.inputCols"]], "name (finisher attribute)": [[202, "sparknlp.base.finisher.Finisher.name"], [460, "sparknlp.base.finisher.Finisher.name"]], "outputasarray (finisher attribute)": [[202, "sparknlp.base.finisher.Finisher.outputAsArray"], [460, "sparknlp.base.finisher.Finisher.outputAsArray"]], "outputcols (finisher attribute)": [[202, "sparknlp.base.finisher.Finisher.outputCols"], [460, "sparknlp.base.finisher.Finisher.outputCols"]], "parseembeddingsvectors (finisher attribute)": [[202, "sparknlp.base.finisher.Finisher.parseEmbeddingsVectors"], [460, "sparknlp.base.finisher.Finisher.parseEmbeddingsVectors"]], "setannotationsplitsymbol() (finisher method)": [[202, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"], [460, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[202, "sparknlp.base.finisher.Finisher.setCleanAnnotations"], [460, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[202, "sparknlp.base.finisher.Finisher.setIncludeMetadata"], [460, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[202, "sparknlp.base.finisher.Finisher.setInputCols"], [460, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[202, "sparknlp.base.finisher.Finisher.setOutputAsArray"], [460, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[202, "sparknlp.base.finisher.Finisher.setOutputCols"], [460, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparams() (finisher method)": [[202, "sparknlp.base.finisher.Finisher.setParams"], [460, "sparknlp.base.finisher.Finisher.setParams"]], "setparseembeddingsvectors() (finisher method)": [[202, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"], [460, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[202, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"], [460, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[202, "module-sparknlp.base.finisher"], [460, "module-sparknlp.base.finisher"]], "valuesplitsymbol (finisher attribute)": [[202, "sparknlp.base.finisher.Finisher.valueSplitSymbol"], [460, "sparknlp.base.finisher.Finisher.valueSplitSymbol"]], "ggufrankingfinisher (class in sparknlp.base.gguf_ranking_finisher)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher"]], "getinputcols() (ggufrankingfinisher method)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.getInputCols"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.getInputCols"]], "getminmaxscaling() (ggufrankingfinisher method)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.getMinMaxScaling"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.getMinMaxScaling"]], "getminrelevancescore() (ggufrankingfinisher method)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.getMinRelevanceScore"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.getMinRelevanceScore"]], "getoutputcol() (ggufrankingfinisher method)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.getOutputCol"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.getOutputCol"]], "gettopk() (ggufrankingfinisher method)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.getTopK"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.getTopK"]], "inputcols (ggufrankingfinisher attribute)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.inputCols"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.inputCols"]], "minmaxscaling (ggufrankingfinisher attribute)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.minMaxScaling"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.minMaxScaling"]], "minrelevancescore (ggufrankingfinisher attribute)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.minRelevanceScore"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.minRelevanceScore"]], "name (ggufrankingfinisher attribute)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.name"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.name"]], "outputcol (ggufrankingfinisher attribute)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.outputCol"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.outputCol"]], "setinputcols() (ggufrankingfinisher method)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setInputCols"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setInputCols"]], "setminmaxscaling() (ggufrankingfinisher method)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setMinMaxScaling"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setMinMaxScaling"]], "setminrelevancescore() (ggufrankingfinisher method)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setMinRelevanceScore"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setMinRelevanceScore"]], "setoutputcol() (ggufrankingfinisher method)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setOutputCol"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setOutputCol"]], "setparams() (ggufrankingfinisher method)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setParams"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setParams"]], "settopk() (ggufrankingfinisher method)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setTopK"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.setTopK"]], "sparknlp.base.gguf_ranking_finisher": [[203, "module-sparknlp.base.gguf_ranking_finisher"], [461, "module-sparknlp.base.gguf_ranking_finisher"]], "topk (ggufrankingfinisher attribute)": [[203, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.topK"], [461, "sparknlp.base.gguf_ranking_finisher.GGUFRankingFinisher.topK"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[204, "sparknlp.base.graph_finisher.GraphFinisher"], [462, "sparknlp.base.graph_finisher.GraphFinisher"]], "cleanannotations (graphfinisher attribute)": [[204, "sparknlp.base.graph_finisher.GraphFinisher.cleanAnnotations"], [462, "sparknlp.base.graph_finisher.GraphFinisher.cleanAnnotations"]], "inputcol (graphfinisher attribute)": [[204, "sparknlp.base.graph_finisher.GraphFinisher.inputCol"], [462, "sparknlp.base.graph_finisher.GraphFinisher.inputCol"]], "name (graphfinisher attribute)": [[204, "sparknlp.base.graph_finisher.GraphFinisher.name"], [462, "sparknlp.base.graph_finisher.GraphFinisher.name"]], "outputasarray (graphfinisher attribute)": [[204, "sparknlp.base.graph_finisher.GraphFinisher.outputAsArray"], [462, "sparknlp.base.graph_finisher.GraphFinisher.outputAsArray"]], "outputcol (graphfinisher attribute)": [[204, "sparknlp.base.graph_finisher.GraphFinisher.outputCol"], [462, "sparknlp.base.graph_finisher.GraphFinisher.outputCol"]], "setcleanannotations() (graphfinisher method)": [[204, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"], [462, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[204, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"], [462, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[204, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"], [462, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[204, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"], [462, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "setparams() (graphfinisher method)": [[204, "sparknlp.base.graph_finisher.GraphFinisher.setParams"], [462, "sparknlp.base.graph_finisher.GraphFinisher.setParams"]], "sparknlp.base.graph_finisher": [[204, "module-sparknlp.base.graph_finisher"], [462, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[205, "sparknlp.base.has_recursive_fit.HasRecursiveFit"], [463, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[205, "module-sparknlp.base.has_recursive_fit"], [463, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[206, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"], [464, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[206, "module-sparknlp.base.has_recursive_transform"], [464, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[207, "sparknlp.base.image_assembler.ImageAssembler"], [465, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[207, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"], [465, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "inputcol (imageassembler attribute)": [[207, "sparknlp.base.image_assembler.ImageAssembler.inputCol"], [465, "sparknlp.base.image_assembler.ImageAssembler.inputCol"]], "loadimagesasbytes() (imageassembler class method)": [[207, "sparknlp.base.image_assembler.ImageAssembler.loadImagesAsBytes"], [465, "sparknlp.base.image_assembler.ImageAssembler.loadImagesAsBytes"]], "name (imageassembler attribute)": [[207, "sparknlp.base.image_assembler.ImageAssembler.name"], [465, "sparknlp.base.image_assembler.ImageAssembler.name"]], "outputannotatortype (imageassembler attribute)": [[207, "sparknlp.base.image_assembler.ImageAssembler.outputAnnotatorType"], [465, "sparknlp.base.image_assembler.ImageAssembler.outputAnnotatorType"]], "outputcol (imageassembler attribute)": [[207, "sparknlp.base.image_assembler.ImageAssembler.outputCol"], [465, "sparknlp.base.image_assembler.ImageAssembler.outputCol"]], "setinputcol() (imageassembler method)": [[207, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"], [465, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[207, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"], [465, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "setparams() (imageassembler method)": [[207, "sparknlp.base.image_assembler.ImageAssembler.setParams"], [465, "sparknlp.base.image_assembler.ImageAssembler.setParams"]], "settextcol() (imageassembler method)": [[207, "sparknlp.base.image_assembler.ImageAssembler.setTextCol"], [465, "sparknlp.base.image_assembler.ImageAssembler.setTextCol"]], "sparknlp.base.image_assembler": [[207, "module-sparknlp.base.image_assembler"], [465, "module-sparknlp.base.image_assembler"]], "textcol (imageassembler attribute)": [[207, "sparknlp.base.image_assembler.ImageAssembler.textCol"], [465, "sparknlp.base.image_assembler.ImageAssembler.textCol"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[208, "sparknlp.base.light_pipeline.LightPipeline"], [467, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[208, "sparknlp.base.light_pipeline.LightPipeline.annotate"], [467, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[208, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"], [467, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[208, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"], [467, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[208, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"], [467, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[208, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"], [467, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[208, "module-sparknlp.base.light_pipeline"], [467, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[208, "sparknlp.base.light_pipeline.LightPipeline.transform"], [467, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "cleanupmode (multidocumentassembler attribute)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.cleanupMode"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.cleanupMode"]], "getoutputcols() (multidocumentassembler method)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "idcol (multidocumentassembler attribute)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.idCol"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.idCol"]], "inputcols (multidocumentassembler attribute)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.inputCols"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.inputCols"]], "metadatacol (multidocumentassembler attribute)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.metadataCol"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.metadataCol"]], "name (multidocumentassembler attribute)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.name"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.name"]], "outputannotatortype (multidocumentassembler attribute)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputAnnotatorType"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputAnnotatorType"]], "outputcols (multidocumentassembler attribute)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputCols"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputCols"]], "setcleanupmode() (multidocumentassembler method)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "setparams() (multidocumentassembler method)": [[209, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setParams"], [468, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setParams"]], "sparknlp.base.multi_document_assembler": [[209, "module-sparknlp.base.multi_document_assembler"], [468, "module-sparknlp.base.multi_document_assembler"]], "promptassembler (class in sparknlp.base.prompt_assembler)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler"], [469, "sparknlp.base.prompt_assembler.PromptAssembler"]], "addassistant (promptassembler attribute)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler.addAssistant"], [469, "sparknlp.base.prompt_assembler.PromptAssembler.addAssistant"]], "chattemplate (promptassembler attribute)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler.chatTemplate"], [469, "sparknlp.base.prompt_assembler.PromptAssembler.chatTemplate"]], "inputcol (promptassembler attribute)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler.inputCol"], [469, "sparknlp.base.prompt_assembler.PromptAssembler.inputCol"]], "name (promptassembler attribute)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler.name"], [469, "sparknlp.base.prompt_assembler.PromptAssembler.name"]], "outputannotatortype (promptassembler attribute)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler.outputAnnotatorType"], [469, "sparknlp.base.prompt_assembler.PromptAssembler.outputAnnotatorType"]], "outputcol (promptassembler attribute)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler.outputCol"], [469, "sparknlp.base.prompt_assembler.PromptAssembler.outputCol"]], "setaddassistant() (promptassembler method)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"], [469, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"]], "setchattemplate() (promptassembler method)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"], [469, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"]], "setinputcol() (promptassembler method)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"], [469, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"]], "setoutputcol() (promptassembler method)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"], [469, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"]], "setparams() (promptassembler method)": [[210, "sparknlp.base.prompt_assembler.PromptAssembler.setParams"], [469, "sparknlp.base.prompt_assembler.PromptAssembler.setParams"]], "sparknlp.base.prompt_assembler": [[210, "module-sparknlp.base.prompt_assembler"], [469, "module-sparknlp.base.prompt_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[211, "sparknlp.base.recursive_pipeline.RecursivePipeline"], [470, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[211, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"], [470, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[211, "module-sparknlp.base.recursive_pipeline"], [470, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[212, "sparknlp.base.table_assembler.TableAssembler"], [471, "sparknlp.base.table_assembler.TableAssembler"]], "csvdelimiter (tableassembler attribute)": [[212, "sparknlp.base.table_assembler.TableAssembler.csvDelimiter"], [471, "sparknlp.base.table_assembler.TableAssembler.csvDelimiter"]], "escapecsvdelimiter (tableassembler attribute)": [[212, "sparknlp.base.table_assembler.TableAssembler.escapeCsvDelimiter"], [471, "sparknlp.base.table_assembler.TableAssembler.escapeCsvDelimiter"]], "inputannotatortypes (tableassembler attribute)": [[212, "sparknlp.base.table_assembler.TableAssembler.inputAnnotatorTypes"], [471, "sparknlp.base.table_assembler.TableAssembler.inputAnnotatorTypes"]], "inputformat (tableassembler attribute)": [[212, "sparknlp.base.table_assembler.TableAssembler.inputFormat"], [471, "sparknlp.base.table_assembler.TableAssembler.inputFormat"]], "name (tableassembler attribute)": [[212, "sparknlp.base.table_assembler.TableAssembler.name"], [471, "sparknlp.base.table_assembler.TableAssembler.name"]], "outputannotatortype (tableassembler attribute)": [[212, "sparknlp.base.table_assembler.TableAssembler.outputAnnotatorType"], [471, "sparknlp.base.table_assembler.TableAssembler.outputAnnotatorType"]], "setcsvdelimiter() (tableassembler method)": [[212, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"], [471, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[212, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"], [471, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[212, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"], [471, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[212, "module-sparknlp.base.table_assembler"], [471, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[213, "sparknlp.base.token_assembler.TokenAssembler"], [472, "sparknlp.base.token_assembler.TokenAssembler"]], "inputannotatortypes (tokenassembler attribute)": [[213, "sparknlp.base.token_assembler.TokenAssembler.inputAnnotatorTypes"], [472, "sparknlp.base.token_assembler.TokenAssembler.inputAnnotatorTypes"]], "name (tokenassembler attribute)": [[213, "sparknlp.base.token_assembler.TokenAssembler.name"], [472, "sparknlp.base.token_assembler.TokenAssembler.name"]], "outputannotatortype (tokenassembler attribute)": [[213, "sparknlp.base.token_assembler.TokenAssembler.outputAnnotatorType"], [472, "sparknlp.base.token_assembler.TokenAssembler.outputAnnotatorType"]], "preserveposition (tokenassembler attribute)": [[213, "sparknlp.base.token_assembler.TokenAssembler.preservePosition"], [472, "sparknlp.base.token_assembler.TokenAssembler.preservePosition"]], "setparams() (tokenassembler method)": [[213, "sparknlp.base.token_assembler.TokenAssembler.setParams"], [472, "sparknlp.base.token_assembler.TokenAssembler.setParams"]], "setpreserveposition() (tokenassembler method)": [[213, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"], [472, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[213, "module-sparknlp.base.token_assembler"], [472, "module-sparknlp.base.token_assembler"]], "sparknlp.common": [[214, "module-sparknlp.common"], [478, "module-sparknlp.common"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[215, "sparknlp.common.annotator_approach.AnnotatorApproach"], [473, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[215, "module-sparknlp.common.annotator_approach"], [473, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[216, "sparknlp.common.annotator_model.AnnotatorModel"], [474, "sparknlp.common.annotator_model.AnnotatorModel"]], "setparams() (annotatormodel method)": [[216, "sparknlp.common.annotator_model.AnnotatorModel.setParams"], [474, "sparknlp.common.annotator_model.AnnotatorModel.setParams"]], "sparknlp.common.annotator_model": [[216, "module-sparknlp.common.annotator_model"], [474, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "inputannotatortypes (annotatorproperties attribute)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.inputAnnotatorTypes"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.inputAnnotatorTypes"]], "inputcols (annotatorproperties attribute)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.inputCols"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.inputCols"]], "inputcolsvalidation() (annotatorproperties method)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.inputColsValidation"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.inputColsValidation"]], "lazyannotator (annotatorproperties attribute)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.lazyAnnotator"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.lazyAnnotator"]], "optionalinputannotatortypes (annotatorproperties attribute)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.optionalInputAnnotatorTypes"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorproperties attribute)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.outputAnnotatorType"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.outputAnnotatorType"]], "outputcol (annotatorproperties attribute)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.outputCol"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.outputCol"]], "setinputcols() (annotatorproperties method)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[217, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"], [475, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[217, "module-sparknlp.common.annotator_properties"], [475, "module-sparknlp.common.annotator_properties"]], "audio (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.AUDIO"], [476, "sparknlp.common.annotator_type.AnnotatorType.AUDIO"]], "annotatortype (class in sparknlp.common.annotator_type)": [[218, "sparknlp.common.annotator_type.AnnotatorType"], [476, "sparknlp.common.annotator_type.AnnotatorType"]], "category (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.CATEGORY"], [476, "sparknlp.common.annotator_type.AnnotatorType.CATEGORY"]], "chunk (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.CHUNK"], [476, "sparknlp.common.annotator_type.AnnotatorType.CHUNK"]], "date (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.DATE"], [476, "sparknlp.common.annotator_type.AnnotatorType.DATE"]], "dependency (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.DEPENDENCY"], [476, "sparknlp.common.annotator_type.AnnotatorType.DEPENDENCY"]], "document (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.DOCUMENT"], [476, "sparknlp.common.annotator_type.AnnotatorType.DOCUMENT"]], "doc_similarity_rankings (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.DOC_SIMILARITY_RANKINGS"], [476, "sparknlp.common.annotator_type.AnnotatorType.DOC_SIMILARITY_RANKINGS"]], "dummy (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.DUMMY"], [476, "sparknlp.common.annotator_type.AnnotatorType.DUMMY"]], "entity (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.ENTITY"], [476, "sparknlp.common.annotator_type.AnnotatorType.ENTITY"]], "image (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.IMAGE"], [476, "sparknlp.common.annotator_type.AnnotatorType.IMAGE"]], "labeled_dependency (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.LABELED_DEPENDENCY"], [476, "sparknlp.common.annotator_type.AnnotatorType.LABELED_DEPENDENCY"]], "language (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.LANGUAGE"], [476, "sparknlp.common.annotator_type.AnnotatorType.LANGUAGE"]], "named_entity (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.NAMED_ENTITY"], [476, "sparknlp.common.annotator_type.AnnotatorType.NAMED_ENTITY"]], "negex (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.NEGEX"], [476, "sparknlp.common.annotator_type.AnnotatorType.NEGEX"]], "node (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.NODE"], [476, "sparknlp.common.annotator_type.AnnotatorType.NODE"]], "pos (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.POS"], [476, "sparknlp.common.annotator_type.AnnotatorType.POS"]], "sentence_embeddings (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.SENTENCE_EMBEDDINGS"], [476, "sparknlp.common.annotator_type.AnnotatorType.SENTENCE_EMBEDDINGS"]], "sentiment (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.SENTIMENT"], [476, "sparknlp.common.annotator_type.AnnotatorType.SENTIMENT"]], "table (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.TABLE"], [476, "sparknlp.common.annotator_type.AnnotatorType.TABLE"]], "token (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.TOKEN"], [476, "sparknlp.common.annotator_type.AnnotatorType.TOKEN"]], "wordpiece (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.WORDPIECE"], [476, "sparknlp.common.annotator_type.AnnotatorType.WORDPIECE"]], "word_embeddings (annotatortype attribute)": [[218, "sparknlp.common.annotator_type.AnnotatorType.WORD_EMBEDDINGS"], [476, "sparknlp.common.annotator_type.AnnotatorType.WORD_EMBEDDINGS"]], "sparknlp.common.annotator_type": [[218, "module-sparknlp.common.annotator_type"], [476, "module-sparknlp.common.annotator_type"]], "coverageresult (class in sparknlp.common.coverage_result)": [[219, "sparknlp.common.coverage_result.CoverageResult"], [477, "sparknlp.common.coverage_result.CoverageResult"]], "sparknlp.common.coverage_result": [[219, "module-sparknlp.common.coverage_result"], [477, "module-sparknlp.common.coverage_result"]], "match_all (matchstrategy attribute)": [[220, "sparknlp.common.match_strategy.MatchStrategy.MATCH_ALL"], [479, "sparknlp.common.match_strategy.MatchStrategy.MATCH_ALL"]], "match_complete (matchstrategy attribute)": [[220, "sparknlp.common.match_strategy.MatchStrategy.MATCH_COMPLETE"], [479, "sparknlp.common.match_strategy.MatchStrategy.MATCH_COMPLETE"]], "match_first (matchstrategy attribute)": [[220, "sparknlp.common.match_strategy.MatchStrategy.MATCH_FIRST"], [479, "sparknlp.common.match_strategy.MatchStrategy.MATCH_FIRST"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[220, "sparknlp.common.match_strategy.MatchStrategy"], [479, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[220, "module-sparknlp.common.match_strategy"], [479, "module-sparknlp.common.match_strategy"]], "hasaudiofeatureproperties (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties"], [480, "sparknlp.common.properties.HasAudioFeatureProperties"]], "hasbatchedannotate (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasBatchedAnnotate"], [480, "sparknlp.common.properties.HasBatchedAnnotate"]], "hasbatchedannotateaudio (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasBatchedAnnotateAudio"], [480, "sparknlp.common.properties.HasBatchedAnnotateAudio"]], "hasbatchedannotateimage (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasBatchedAnnotateImage"], [480, "sparknlp.common.properties.HasBatchedAnnotateImage"]], "hascandidatelabelsproperties (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasCandidateLabelsProperties"], [480, "sparknlp.common.properties.HasCandidateLabelsProperties"]], "hascasesensitiveproperties (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasCaseSensitiveProperties"], [480, "sparknlp.common.properties.HasCaseSensitiveProperties"]], "hasclassifieractivationproperties (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasClassifierActivationProperties"], [480, "sparknlp.common.properties.HasClassifierActivationProperties"]], "hasclstokenproperties (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasClsTokenProperties"], [480, "sparknlp.common.properties.HasClsTokenProperties"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasEmbeddingsProperties"], [480, "sparknlp.common.properties.HasEmbeddingsProperties"]], "hasenablecachingproperties (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasEnableCachingProperties"], [480, "sparknlp.common.properties.HasEnableCachingProperties"]], "hasengine (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasEngine"], [480, "sparknlp.common.properties.HasEngine"]], "hasgeneratorproperties (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasGeneratorProperties"], [480, "sparknlp.common.properties.HasGeneratorProperties"]], "hasimagefeatureproperties (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasImageFeatureProperties"], [480, "sparknlp.common.properties.HasImageFeatureProperties"]], "hasllamacppproperties (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasLlamaCppProperties"], [480, "sparknlp.common.properties.HasLlamaCppProperties"]], "haslongmaxsentencelengthlimit (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit"], [480, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit"]], "hasmaxsentencelengthlimit (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasMaxSentenceLengthLimit"], [480, "sparknlp.common.properties.HasMaxSentenceLengthLimit"]], "hasrescalefactor (class in sparknlp.common.properties)": [[221, "sparknlp.common.properties.HasRescaleFactor"], [480, "sparknlp.common.properties.HasRescaleFactor"]], "activation (hasclassifieractivationproperties attribute)": [[221, "sparknlp.common.properties.HasClassifierActivationProperties.activation"], [480, "sparknlp.common.properties.HasClassifierActivationProperties.activation"]], "batchsize (hasbatchedannotate attribute)": [[221, "sparknlp.common.properties.HasBatchedAnnotate.batchSize"], [480, "sparknlp.common.properties.HasBatchedAnnotate.batchSize"]], "batchsize (hasbatchedannotateaudio attribute)": [[221, "sparknlp.common.properties.HasBatchedAnnotateAudio.batchSize"], [480, "sparknlp.common.properties.HasBatchedAnnotateAudio.batchSize"]], "batchsize (hasbatchedannotateimage attribute)": [[221, "sparknlp.common.properties.HasBatchedAnnotateImage.batchSize"], [480, "sparknlp.common.properties.HasBatchedAnnotateImage.batchSize"]], "beamsize (hasgeneratorproperties attribute)": [[221, "sparknlp.common.properties.HasGeneratorProperties.beamSize"], [480, "sparknlp.common.properties.HasGeneratorProperties.beamSize"]], "cacheprompt (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.cachePrompt"], [480, "sparknlp.common.properties.HasLlamaCppProperties.cachePrompt"]], "candidatelabels (hascandidatelabelsproperties attribute)": [[221, "sparknlp.common.properties.HasCandidateLabelsProperties.candidateLabels"], [480, "sparknlp.common.properties.HasCandidateLabelsProperties.candidateLabels"]], "casesensitive (hascasesensitiveproperties attribute)": [[221, "sparknlp.common.properties.HasCaseSensitiveProperties.caseSensitive"], [480, "sparknlp.common.properties.HasCaseSensitiveProperties.caseSensitive"]], "chattemplate (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.chatTemplate"], [480, "sparknlp.common.properties.HasLlamaCppProperties.chatTemplate"]], "contradictionidparam (hascandidatelabelsproperties attribute)": [[221, "sparknlp.common.properties.HasCandidateLabelsProperties.contradictionIdParam"], [480, "sparknlp.common.properties.HasCandidateLabelsProperties.contradictionIdParam"]], "defragmentationthreshold (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.defragmentationThreshold"], [480, "sparknlp.common.properties.HasLlamaCppProperties.defragmentationThreshold"]], "dimension (hasembeddingsproperties attribute)": [[221, "sparknlp.common.properties.HasEmbeddingsProperties.dimension"], [480, "sparknlp.common.properties.HasEmbeddingsProperties.dimension"]], "disablelog (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.disableLog"], [480, "sparknlp.common.properties.HasLlamaCppProperties.disableLog"]], "disabletokenids (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.disableTokenIds"], [480, "sparknlp.common.properties.HasLlamaCppProperties.disableTokenIds"]], "donormalize (hasaudiofeatureproperties attribute)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.doNormalize"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.doNormalize"]], "donormalize (hasimagefeatureproperties attribute)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.doNormalize"], [480, "sparknlp.common.properties.HasImageFeatureProperties.doNormalize"]], "dorescale (hasrescalefactor attribute)": [[221, "sparknlp.common.properties.HasRescaleFactor.doRescale"], [480, "sparknlp.common.properties.HasRescaleFactor.doRescale"]], "doresize (hasimagefeatureproperties attribute)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.doResize"], [480, "sparknlp.common.properties.HasImageFeatureProperties.doResize"]], "dosample (hasgeneratorproperties attribute)": [[221, "sparknlp.common.properties.HasGeneratorProperties.doSample"], [480, "sparknlp.common.properties.HasGeneratorProperties.doSample"]], "dynamictemperatureexponent (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureExponent"], [480, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureExponent"]], "dynamictemperaturerange (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureRange"], [480, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureRange"]], "embedding (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.embedding"], [480, "sparknlp.common.properties.HasLlamaCppProperties.embedding"]], "enablecaching (hasenablecachingproperties attribute)": [[221, "sparknlp.common.properties.HasEnableCachingProperties.enableCaching"], [480, "sparknlp.common.properties.HasEnableCachingProperties.enableCaching"]], "engine (hasengine attribute)": [[221, "sparknlp.common.properties.HasEngine.engine"], [480, "sparknlp.common.properties.HasEngine.engine"]], "entailmentidparam (hascandidatelabelsproperties attribute)": [[221, "sparknlp.common.properties.HasCandidateLabelsProperties.entailmentIdParam"], [480, "sparknlp.common.properties.HasCandidateLabelsProperties.entailmentIdParam"]], "featureextractortype (hasimagefeatureproperties attribute)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.featureExtractorType"], [480, "sparknlp.common.properties.HasImageFeatureProperties.featureExtractorType"]], "featuresize (hasaudiofeatureproperties attribute)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.featureSize"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.featureSize"]], "flashattention (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.flashAttention"], [480, "sparknlp.common.properties.HasLlamaCppProperties.flashAttention"]], "frequencypenalty (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.frequencyPenalty"], [480, "sparknlp.common.properties.HasLlamaCppProperties.frequencyPenalty"]], "getactivation() (hasclassifieractivationproperties method)": [[221, "sparknlp.common.properties.HasClassifierActivationProperties.getActivation"], [480, "sparknlp.common.properties.HasClassifierActivationProperties.getActivation"]], "getbatchsize() (hasbatchedannotate method)": [[221, "sparknlp.common.properties.HasBatchedAnnotate.getBatchSize"], [480, "sparknlp.common.properties.HasBatchedAnnotate.getBatchSize"]], "getbatchsize() (hasbatchedannotateaudio method)": [[221, "sparknlp.common.properties.HasBatchedAnnotateAudio.getBatchSize"], [480, "sparknlp.common.properties.HasBatchedAnnotateAudio.getBatchSize"]], "getbatchsize() (hasbatchedannotateimage method)": [[221, "sparknlp.common.properties.HasBatchedAnnotateImage.getBatchSize"], [480, "sparknlp.common.properties.HasBatchedAnnotateImage.getBatchSize"]], "getcasesensitive() (hascasesensitiveproperties method)": [[221, "sparknlp.common.properties.HasCaseSensitiveProperties.getCaseSensitive"], [480, "sparknlp.common.properties.HasCaseSensitiveProperties.getCaseSensitive"]], "getdimension() (hasembeddingsproperties method)": [[221, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"], [480, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "getenablecaching() (hasenablecachingproperties method)": [[221, "sparknlp.common.properties.HasEnableCachingProperties.getEnableCaching"], [480, "sparknlp.common.properties.HasEnableCachingProperties.getEnableCaching"]], "getengine() (hasengine method)": [[221, "sparknlp.common.properties.HasEngine.getEngine"], [480, "sparknlp.common.properties.HasEngine.getEngine"]], "getmaxsentencelength() (hasmaxsentencelengthlimit method)": [[221, "sparknlp.common.properties.HasMaxSentenceLengthLimit.getMaxSentenceLength"], [480, "sparknlp.common.properties.HasMaxSentenceLengthLimit.getMaxSentenceLength"]], "getmetadata() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.getMetadata"], [480, "sparknlp.common.properties.HasLlamaCppProperties.getMetadata"]], "getmultilabel() (hasclassifieractivationproperties method)": [[221, "sparknlp.common.properties.HasClassifierActivationProperties.getMultilabel"], [480, "sparknlp.common.properties.HasClassifierActivationProperties.getMultilabel"]], "getuseclstoken() (hasclstokenproperties method)": [[221, "sparknlp.common.properties.HasClsTokenProperties.getUseCLSToken"], [480, "sparknlp.common.properties.HasClsTokenProperties.getUseCLSToken"]], "gpusplitmode (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.gpuSplitMode"], [480, "sparknlp.common.properties.HasLlamaCppProperties.gpuSplitMode"]], "grammar (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.grammar"], [480, "sparknlp.common.properties.HasLlamaCppProperties.grammar"]], "ignoreeos (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.ignoreEos"], [480, "sparknlp.common.properties.HasLlamaCppProperties.ignoreEos"]], "imagemean (hasimagefeatureproperties attribute)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.imageMean"], [480, "sparknlp.common.properties.HasImageFeatureProperties.imageMean"]], "imagestd (hasimagefeatureproperties attribute)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.imageStd"], [480, "sparknlp.common.properties.HasImageFeatureProperties.imageStd"]], "inputprefix (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefix"], [480, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefix"]], "inputsuffix (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.inputSuffix"], [480, "sparknlp.common.properties.HasLlamaCppProperties.inputSuffix"]], "logverbosity (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.logVerbosity"], [480, "sparknlp.common.properties.HasLlamaCppProperties.logVerbosity"]], "maingpu (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.mainGpu"], [480, "sparknlp.common.properties.HasLlamaCppProperties.mainGpu"]], "maxoutputlength (hasgeneratorproperties attribute)": [[221, "sparknlp.common.properties.HasGeneratorProperties.maxOutputLength"], [480, "sparknlp.common.properties.HasGeneratorProperties.maxOutputLength"]], "maxsentencelength (hasmaxsentencelengthlimit attribute)": [[221, "sparknlp.common.properties.HasMaxSentenceLengthLimit.maxSentenceLength"], [480, "sparknlp.common.properties.HasMaxSentenceLengthLimit.maxSentenceLength"]], "max_length_limit (haslongmaxsentencelengthlimit attribute)": [[221, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit.max_length_limit"], [480, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit.max_length_limit"]], "max_length_limit (hasmaxsentencelengthlimit attribute)": [[221, "sparknlp.common.properties.HasMaxSentenceLengthLimit.max_length_limit"], [480, "sparknlp.common.properties.HasMaxSentenceLengthLimit.max_length_limit"]], "minkeep (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.minKeep"], [480, "sparknlp.common.properties.HasLlamaCppProperties.minKeep"]], "minoutputlength (hasgeneratorproperties attribute)": [[221, "sparknlp.common.properties.HasGeneratorProperties.minOutputLength"], [480, "sparknlp.common.properties.HasGeneratorProperties.minOutputLength"]], "minp (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.minP"], [480, "sparknlp.common.properties.HasLlamaCppProperties.minP"]], "mirostat (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.miroStat"], [480, "sparknlp.common.properties.HasLlamaCppProperties.miroStat"]], "mirostateta (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.miroStatEta"], [480, "sparknlp.common.properties.HasLlamaCppProperties.miroStatEta"]], "mirostattau (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.miroStatTau"], [480, "sparknlp.common.properties.HasLlamaCppProperties.miroStatTau"]], "modelalias (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.modelAlias"], [480, "sparknlp.common.properties.HasLlamaCppProperties.modelAlias"]], "modeldraft (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.modelDraft"], [480, "sparknlp.common.properties.HasLlamaCppProperties.modelDraft"]], "multilabel (hasclassifieractivationproperties attribute)": [[221, "sparknlp.common.properties.HasClassifierActivationProperties.multilabel"], [480, "sparknlp.common.properties.HasClassifierActivationProperties.multilabel"]], "nbatch (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.nBatch"], [480, "sparknlp.common.properties.HasLlamaCppProperties.nBatch"]], "nctx (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.nCtx"], [480, "sparknlp.common.properties.HasLlamaCppProperties.nCtx"]], "ndraft (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.nDraft"], [480, "sparknlp.common.properties.HasLlamaCppProperties.nDraft"]], "ngpulayers (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayers"], [480, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayers"]], "ngpulayersdraft (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayersDraft"], [480, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayersDraft"]], "nkeep (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.nKeep"], [480, "sparknlp.common.properties.HasLlamaCppProperties.nKeep"]], "npredict (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.nPredict"], [480, "sparknlp.common.properties.HasLlamaCppProperties.nPredict"]], "nprobs (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.nProbs"], [480, "sparknlp.common.properties.HasLlamaCppProperties.nProbs"]], "nreturnsequences (hasgeneratorproperties attribute)": [[221, "sparknlp.common.properties.HasGeneratorProperties.nReturnSequences"], [480, "sparknlp.common.properties.HasGeneratorProperties.nReturnSequences"]], "nthreads (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.nThreads"], [480, "sparknlp.common.properties.HasLlamaCppProperties.nThreads"]], "nthreadsbatch (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatch"], [480, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatch"]], "nubatch (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.nUbatch"], [480, "sparknlp.common.properties.HasLlamaCppProperties.nUbatch"]], "nokvoffload (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.noKvOffload"], [480, "sparknlp.common.properties.HasLlamaCppProperties.noKvOffload"]], "norepeatngramsize (hasgeneratorproperties attribute)": [[221, "sparknlp.common.properties.HasGeneratorProperties.noRepeatNgramSize"], [480, "sparknlp.common.properties.HasGeneratorProperties.noRepeatNgramSize"]], "numastrategy (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.numaStrategy"], [480, "sparknlp.common.properties.HasLlamaCppProperties.numaStrategy"]], "paddingside (hasaudiofeatureproperties attribute)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.paddingSide"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.paddingSide"]], "paddingvalue (hasaudiofeatureproperties attribute)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.paddingValue"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.paddingValue"]], "penalizenl (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.penalizeNl"], [480, "sparknlp.common.properties.HasLlamaCppProperties.penalizeNl"]], "penaltyprompt (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.penaltyPrompt"], [480, "sparknlp.common.properties.HasLlamaCppProperties.penaltyPrompt"]], "poolingtype (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.poolingType"], [480, "sparknlp.common.properties.HasLlamaCppProperties.poolingType"]], "presencepenalty (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.presencePenalty"], [480, "sparknlp.common.properties.HasLlamaCppProperties.presencePenalty"]], "repeatlastn (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.repeatLastN"], [480, "sparknlp.common.properties.HasLlamaCppProperties.repeatLastN"]], "repeatpenalty (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.repeatPenalty"], [480, "sparknlp.common.properties.HasLlamaCppProperties.repeatPenalty"]], "repetitionpenalty (hasgeneratorproperties attribute)": [[221, "sparknlp.common.properties.HasGeneratorProperties.repetitionPenalty"], [480, "sparknlp.common.properties.HasGeneratorProperties.repetitionPenalty"]], "resample (hasimagefeatureproperties attribute)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.resample"], [480, "sparknlp.common.properties.HasImageFeatureProperties.resample"]], "rescalefactor (hasrescalefactor attribute)": [[221, "sparknlp.common.properties.HasRescaleFactor.rescaleFactor"], [480, "sparknlp.common.properties.HasRescaleFactor.rescaleFactor"]], "returnattentionmask (hasaudiofeatureproperties attribute)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.returnAttentionMask"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.returnAttentionMask"]], "ropefreqbase (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqBase"], [480, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqBase"]], "ropefreqscale (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqScale"], [480, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqScale"]], "ropescalingtype (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.ropeScalingType"], [480, "sparknlp.common.properties.HasLlamaCppProperties.ropeScalingType"]], "samplers (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.samplers"], [480, "sparknlp.common.properties.HasLlamaCppProperties.samplers"]], "samplingrate (hasaudiofeatureproperties attribute)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.samplingRate"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.samplingRate"]], "seed (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.seed"], [480, "sparknlp.common.properties.HasLlamaCppProperties.seed"]], "setactivation() (hasclassifieractivationproperties method)": [[221, "sparknlp.common.properties.HasClassifierActivationProperties.setActivation"], [480, "sparknlp.common.properties.HasClassifierActivationProperties.setActivation"]], "setbatchsize() (hasbatchedannotate method)": [[221, "sparknlp.common.properties.HasBatchedAnnotate.setBatchSize"], [480, "sparknlp.common.properties.HasBatchedAnnotate.setBatchSize"]], "setbatchsize() (hasbatchedannotateaudio method)": [[221, "sparknlp.common.properties.HasBatchedAnnotateAudio.setBatchSize"], [480, "sparknlp.common.properties.HasBatchedAnnotateAudio.setBatchSize"]], "setbatchsize() (hasbatchedannotateimage method)": [[221, "sparknlp.common.properties.HasBatchedAnnotateImage.setBatchSize"], [480, "sparknlp.common.properties.HasBatchedAnnotateImage.setBatchSize"]], "setbeamsize() (hasgeneratorproperties method)": [[221, "sparknlp.common.properties.HasGeneratorProperties.setBeamSize"], [480, "sparknlp.common.properties.HasGeneratorProperties.setBeamSize"]], "setcacheprompt() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setCachePrompt"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setCachePrompt"]], "setcandidatelabels() (hascandidatelabelsproperties method)": [[221, "sparknlp.common.properties.HasCandidateLabelsProperties.setCandidateLabels"], [480, "sparknlp.common.properties.HasCandidateLabelsProperties.setCandidateLabels"]], "setcasesensitive() (hascasesensitiveproperties method)": [[221, "sparknlp.common.properties.HasCaseSensitiveProperties.setCaseSensitive"], [480, "sparknlp.common.properties.HasCaseSensitiveProperties.setCaseSensitive"]], "setchattemplate() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setChatTemplate"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setChatTemplate"]], "setcontradictionidparam() (hascandidatelabelsproperties method)": [[221, "sparknlp.common.properties.HasCandidateLabelsProperties.setContradictionIdParam"], [480, "sparknlp.common.properties.HasCandidateLabelsProperties.setContradictionIdParam"]], "setdefragmentationthreshold() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setDefragmentationThreshold"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setDefragmentationThreshold"]], "setdimension() (hasembeddingsproperties method)": [[221, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"], [480, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdisablelog() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setDisableLog"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setDisableLog"]], "setdisabletokenids() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setDisableTokenIds"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setDisableTokenIds"]], "setdonormalize() (hasaudiofeatureproperties method)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.setDoNormalize"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.setDoNormalize"]], "setdonormalize() (hasimagefeatureproperties method)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.setDoNormalize"], [480, "sparknlp.common.properties.HasImageFeatureProperties.setDoNormalize"]], "setdorescale() (hasrescalefactor method)": [[221, "sparknlp.common.properties.HasRescaleFactor.setDoRescale"], [480, "sparknlp.common.properties.HasRescaleFactor.setDoRescale"]], "setdoresize() (hasimagefeatureproperties method)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.setDoResize"], [480, "sparknlp.common.properties.HasImageFeatureProperties.setDoResize"]], "setdosample() (hasgeneratorproperties method)": [[221, "sparknlp.common.properties.HasGeneratorProperties.setDoSample"], [480, "sparknlp.common.properties.HasGeneratorProperties.setDoSample"]], "setdynamictemperatureexponent() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureExponent"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureRange"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureRange"]], "setenablecaching() (hasenablecachingproperties method)": [[221, "sparknlp.common.properties.HasEnableCachingProperties.setEnableCaching"], [480, "sparknlp.common.properties.HasEnableCachingProperties.setEnableCaching"]], "setentailmentidparam() (hascandidatelabelsproperties method)": [[221, "sparknlp.common.properties.HasCandidateLabelsProperties.setEntailmentIdParam"], [480, "sparknlp.common.properties.HasCandidateLabelsProperties.setEntailmentIdParam"]], "setfeatureextractortype() (hasimagefeatureproperties method)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.setFeatureExtractorType"], [480, "sparknlp.common.properties.HasImageFeatureProperties.setFeatureExtractorType"]], "setfeaturesize() (hasaudiofeatureproperties method)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.setFeatureSize"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.setFeatureSize"]], "setflashattention() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setFlashAttention"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setFlashAttention"]], "setfrequencypenalty() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setFrequencyPenalty"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setFrequencyPenalty"]], "setgpusplitmode() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setGpuSplitMode"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setGpuSplitMode"]], "setgrammar() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setGrammar"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setGrammar"]], "setignoreeos() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setIgnoreEos"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setIgnoreEos"]], "setimagemean() (hasimagefeatureproperties method)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.setImageMean"], [480, "sparknlp.common.properties.HasImageFeatureProperties.setImageMean"]], "setimagestd() (hasimagefeatureproperties method)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.setImageStd"], [480, "sparknlp.common.properties.HasImageFeatureProperties.setImageStd"]], "setinputprefix() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefix"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefix"]], "setinputsuffix() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setInputSuffix"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setInputSuffix"]], "setlogverbosity() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setLogVerbosity"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setLogVerbosity"]], "setmaingpu() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setMainGpu"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setMainGpu"]], "setmaxoutputlength() (hasgeneratorproperties method)": [[221, "sparknlp.common.properties.HasGeneratorProperties.setMaxOutputLength"], [480, "sparknlp.common.properties.HasGeneratorProperties.setMaxOutputLength"]], "setmaxsentencelength() (hasmaxsentencelengthlimit method)": [[221, "sparknlp.common.properties.HasMaxSentenceLengthLimit.setMaxSentenceLength"], [480, "sparknlp.common.properties.HasMaxSentenceLengthLimit.setMaxSentenceLength"]], "setminkeep() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setMinKeep"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setMinKeep"]], "setminoutputlength() (hasgeneratorproperties method)": [[221, "sparknlp.common.properties.HasGeneratorProperties.setMinOutputLength"], [480, "sparknlp.common.properties.HasGeneratorProperties.setMinOutputLength"]], "setminp() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setMinP"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setMinP"]], "setmirostat() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStat"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStat"]], "setmirostateta() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatEta"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatEta"]], "setmirostattau() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatTau"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatTau"]], "setmodelalias() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setModelAlias"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setModelAlias"]], "setmodeldraft() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setModelDraft"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setModelDraft"]], "setmultilabel() (hasclassifieractivationproperties method)": [[221, "sparknlp.common.properties.HasClassifierActivationProperties.setMultilabel"], [480, "sparknlp.common.properties.HasClassifierActivationProperties.setMultilabel"]], "setnbatch() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNBatch"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNBatch"]], "setnctx() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNCtx"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNCtx"]], "setndraft() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNDraft"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNDraft"]], "setngpulayers() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayers"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayers"]], "setngpulayersdraft() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayersDraft"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayersDraft"]], "setnkeep() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNKeep"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNKeep"]], "setnparallel() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNParallel"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNParallel"]], "setnpredict() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNPredict"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNPredict"]], "setnprobs() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNProbs"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNProbs"]], "setnreturnsequences() (hasgeneratorproperties method)": [[221, "sparknlp.common.properties.HasGeneratorProperties.setNReturnSequences"], [480, "sparknlp.common.properties.HasGeneratorProperties.setNReturnSequences"]], "setnthreads() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNThreads"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNThreads"]], "setnthreadsbatch() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatch"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatch"]], "setnubatch() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNUbatch"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNUbatch"]], "setnokvoffload() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNoKvOffload"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNoKvOffload"]], "setnorepeatngramsize() (hasgeneratorproperties method)": [[221, "sparknlp.common.properties.HasGeneratorProperties.setNoRepeatNgramSize"], [480, "sparknlp.common.properties.HasGeneratorProperties.setNoRepeatNgramSize"]], "setnumastrategy() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setNumaStrategy"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setNumaStrategy"]], "setpaddingside() (hasaudiofeatureproperties method)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingSide"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingSide"]], "setpaddingvalue() (hasaudiofeatureproperties method)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingValue"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingValue"]], "setpenalizenl() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setPenalizeNl"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setPenalizeNl"]], "setpenaltyprompt() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setPenaltyPrompt"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setPenaltyPrompt"]], "setpoolingtype() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setPoolingType"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setPoolingType"]], "setpresencepenalty() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setPresencePenalty"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setPresencePenalty"]], "setrepeatlastn() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatLastN"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatLastN"]], "setrepeatpenalty() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatPenalty"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatPenalty"]], "setrepetitionpenalty() (hasgeneratorproperties method)": [[221, "sparknlp.common.properties.HasGeneratorProperties.setRepetitionPenalty"], [480, "sparknlp.common.properties.HasGeneratorProperties.setRepetitionPenalty"]], "setresample() (hasimagefeatureproperties method)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.setResample"], [480, "sparknlp.common.properties.HasImageFeatureProperties.setResample"]], "setrescalefactor() (hasrescalefactor method)": [[221, "sparknlp.common.properties.HasRescaleFactor.setRescaleFactor"], [480, "sparknlp.common.properties.HasRescaleFactor.setRescaleFactor"]], "setreturnattentionmask() (hasaudiofeatureproperties method)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.setReturnAttentionMask"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.setReturnAttentionMask"]], "setropefreqbase() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqBase"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqBase"]], "setropefreqscale() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqScale"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqScale"]], "setropescalingtype() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setRopeScalingType"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setRopeScalingType"]], "setsamplers() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setSamplers"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setSamplers"]], "setsamplingrate() (hasaudiofeatureproperties method)": [[221, "sparknlp.common.properties.HasAudioFeatureProperties.setSamplingRate"], [480, "sparknlp.common.properties.HasAudioFeatureProperties.setSamplingRate"]], "setseed() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setSeed"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setSeed"]], "setsize() (hasimagefeatureproperties method)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.setSize"], [480, "sparknlp.common.properties.HasImageFeatureProperties.setSize"]], "setstopstrings() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setStopStrings"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setStopStrings"]], "setsystemprompt() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setSystemPrompt"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setSystemPrompt"]], "settask() (hasgeneratorproperties method)": [[221, "sparknlp.common.properties.HasGeneratorProperties.setTask"], [480, "sparknlp.common.properties.HasGeneratorProperties.setTask"]], "settemperature() (hasgeneratorproperties method)": [[221, "sparknlp.common.properties.HasGeneratorProperties.setTemperature"], [480, "sparknlp.common.properties.HasGeneratorProperties.setTemperature"]], "settemperature() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setTemperature"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setTemperature"]], "settfsz() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setTfsZ"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setTfsZ"]], "setthreshold() (hasclassifieractivationproperties method)": [[221, "sparknlp.common.properties.HasClassifierActivationProperties.setThreshold"], [480, "sparknlp.common.properties.HasClassifierActivationProperties.setThreshold"]], "settokenbias() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setTokenBias"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setTokenBias"]], "settokenidbias() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setTokenIdBias"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setTokenIdBias"]], "settopk() (hasgeneratorproperties method)": [[221, "sparknlp.common.properties.HasGeneratorProperties.setTopK"], [480, "sparknlp.common.properties.HasGeneratorProperties.setTopK"]], "settopk() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setTopK"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setTopK"]], "settopp() (hasgeneratorproperties method)": [[221, "sparknlp.common.properties.HasGeneratorProperties.setTopP"], [480, "sparknlp.common.properties.HasGeneratorProperties.setTopP"]], "settopp() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setTopP"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setTopP"]], "settypicalp() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setTypicalP"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setTypicalP"]], "setuseclstoken() (hasclstokenproperties method)": [[221, "sparknlp.common.properties.HasClsTokenProperties.setUseCLSToken"], [480, "sparknlp.common.properties.HasClsTokenProperties.setUseCLSToken"]], "setusechattemplate() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setUseChatTemplate"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setUseChatTemplate"]], "setusemlock() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setUseMlock"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setUseMlock"]], "setusemmap() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setUseMmap"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setUseMmap"]], "setyarnattnfactor() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setYarnAttnFactor"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setYarnAttnFactor"]], "setyarnbetafast() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaFast"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaFast"]], "setyarnbetaslow() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaSlow"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaSlow"]], "setyarnextfactor() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setYarnExtFactor"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setYarnExtFactor"]], "setyarnorigctx() (hasllamacppproperties method)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.setYarnOrigCtx"], [480, "sparknlp.common.properties.HasLlamaCppProperties.setYarnOrigCtx"]], "size (hasimagefeatureproperties attribute)": [[221, "sparknlp.common.properties.HasImageFeatureProperties.size"], [480, "sparknlp.common.properties.HasImageFeatureProperties.size"]], "sparknlp.common.properties": [[221, "module-sparknlp.common.properties"], [480, "module-sparknlp.common.properties"]], "stopstrings (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.stopStrings"], [480, "sparknlp.common.properties.HasLlamaCppProperties.stopStrings"]], "systemprompt (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.systemPrompt"], [480, "sparknlp.common.properties.HasLlamaCppProperties.systemPrompt"]], "task (hasgeneratorproperties attribute)": [[221, "sparknlp.common.properties.HasGeneratorProperties.task"], [480, "sparknlp.common.properties.HasGeneratorProperties.task"]], "temperature (hasgeneratorproperties attribute)": [[221, "sparknlp.common.properties.HasGeneratorProperties.temperature"], [480, "sparknlp.common.properties.HasGeneratorProperties.temperature"]], "temperature (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.temperature"], [480, "sparknlp.common.properties.HasLlamaCppProperties.temperature"]], "tfsz (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.tfsZ"], [480, "sparknlp.common.properties.HasLlamaCppProperties.tfsZ"]], "threshold (hasclassifieractivationproperties attribute)": [[221, "sparknlp.common.properties.HasClassifierActivationProperties.threshold"], [480, "sparknlp.common.properties.HasClassifierActivationProperties.threshold"]], "topk (hasgeneratorproperties attribute)": [[221, "sparknlp.common.properties.HasGeneratorProperties.topK"], [480, "sparknlp.common.properties.HasGeneratorProperties.topK"]], "topk (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.topK"], [480, "sparknlp.common.properties.HasLlamaCppProperties.topK"]], "topp (hasgeneratorproperties attribute)": [[221, "sparknlp.common.properties.HasGeneratorProperties.topP"], [480, "sparknlp.common.properties.HasGeneratorProperties.topP"]], "topp (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.topP"], [480, "sparknlp.common.properties.HasLlamaCppProperties.topP"]], "typicalp (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.typicalP"], [480, "sparknlp.common.properties.HasLlamaCppProperties.typicalP"]], "useclstoken (hasclstokenproperties attribute)": [[221, "sparknlp.common.properties.HasClsTokenProperties.useCLSToken"], [480, "sparknlp.common.properties.HasClsTokenProperties.useCLSToken"]], "usechattemplate (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.useChatTemplate"], [480, "sparknlp.common.properties.HasLlamaCppProperties.useChatTemplate"]], "usemlock (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.useMlock"], [480, "sparknlp.common.properties.HasLlamaCppProperties.useMlock"]], "usemmap (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.useMmap"], [480, "sparknlp.common.properties.HasLlamaCppProperties.useMmap"]], "yarnattnfactor (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.yarnAttnFactor"], [480, "sparknlp.common.properties.HasLlamaCppProperties.yarnAttnFactor"]], "yarnbetafast (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaFast"], [480, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaFast"]], "yarnbetaslow (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaSlow"], [480, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaSlow"]], "yarnextfactor (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.yarnExtFactor"], [480, "sparknlp.common.properties.HasLlamaCppProperties.yarnExtFactor"]], "yarnorigctx (hasllamacppproperties attribute)": [[221, "sparknlp.common.properties.HasLlamaCppProperties.yarnOrigCtx"], [480, "sparknlp.common.properties.HasLlamaCppProperties.yarnOrigCtx"]], "binary (readas attribute)": [[222, "sparknlp.common.read_as.ReadAs.BINARY"], [481, "sparknlp.common.read_as.ReadAs.BINARY"]], "readas (class in sparknlp.common.read_as)": [[222, "sparknlp.common.read_as.ReadAs"], [481, "sparknlp.common.read_as.ReadAs"]], "spark (readas attribute)": [[222, "sparknlp.common.read_as.ReadAs.SPARK"], [481, "sparknlp.common.read_as.ReadAs.SPARK"]], "text (readas attribute)": [[222, "sparknlp.common.read_as.ReadAs.TEXT"], [481, "sparknlp.common.read_as.ReadAs.TEXT"]], "sparknlp.common.read_as": [[222, "module-sparknlp.common.read_as"], [481, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[223, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"], [482, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[223, "module-sparknlp.common.recursive_annotator_approach"], [482, "module-sparknlp.common.recursive_annotator_approach"]], "hasstorage (class in sparknlp.common.storage)": [[224, "sparknlp.common.storage.HasStorage"], [483, "sparknlp.common.storage.HasStorage"]], "hasstoragemodel (class in sparknlp.common.storage)": [[224, "sparknlp.common.storage.HasStorageModel"], [483, "sparknlp.common.storage.HasStorageModel"]], "hasstorageoptions (class in sparknlp.common.storage)": [[224, "sparknlp.common.storage.HasStorageOptions"], [483, "sparknlp.common.storage.HasStorageOptions"]], "hasstorageref (class in sparknlp.common.storage)": [[224, "sparknlp.common.storage.HasStorageRef"], [483, "sparknlp.common.storage.HasStorageRef"]], "enableinmemorystorage (hasstorageoptions attribute)": [[224, "sparknlp.common.storage.HasStorageOptions.enableInMemoryStorage"], [483, "sparknlp.common.storage.HasStorageOptions.enableInMemoryStorage"]], "getenableinmemorystorage() (hasstorageoptions method)": [[224, "sparknlp.common.storage.HasStorageOptions.getEnableInMemoryStorage"], [483, "sparknlp.common.storage.HasStorageOptions.getEnableInMemoryStorage"]], "getincludestorage() (hasstorageoptions method)": [[224, "sparknlp.common.storage.HasStorageOptions.getIncludeStorage"], [483, "sparknlp.common.storage.HasStorageOptions.getIncludeStorage"]], "getstoragepath() (hasstorage method)": [[224, "sparknlp.common.storage.HasStorage.getStoragePath"], [483, "sparknlp.common.storage.HasStorage.getStoragePath"]], "getstorageref() (hasstorageref method)": [[224, "sparknlp.common.storage.HasStorageRef.getStorageRef"], [483, "sparknlp.common.storage.HasStorageRef.getStorageRef"]], "includestorage (hasstorageoptions attribute)": [[224, "sparknlp.common.storage.HasStorageOptions.includeStorage"], [483, "sparknlp.common.storage.HasStorageOptions.includeStorage"]], "loadstorage() (hasstoragemodel static method)": [[224, "sparknlp.common.storage.HasStorageModel.loadStorage"], [483, "sparknlp.common.storage.HasStorageModel.loadStorage"]], "loadstorages() (hasstoragemodel static method)": [[224, "sparknlp.common.storage.HasStorageModel.loadStorages"], [483, "sparknlp.common.storage.HasStorageModel.loadStorages"]], "savestorage() (hasstoragemodel method)": [[224, "sparknlp.common.storage.HasStorageModel.saveStorage"], [483, "sparknlp.common.storage.HasStorageModel.saveStorage"]], "setenableinmemorystorage() (hasstorageoptions method)": [[224, "sparknlp.common.storage.HasStorageOptions.setEnableInMemoryStorage"], [483, "sparknlp.common.storage.HasStorageOptions.setEnableInMemoryStorage"]], "setincludestorage() (hasstorageoptions method)": [[224, "sparknlp.common.storage.HasStorageOptions.setIncludeStorage"], [483, "sparknlp.common.storage.HasStorageOptions.setIncludeStorage"]], "setstoragepath() (hasstorage method)": [[224, "sparknlp.common.storage.HasStorage.setStoragePath"], [483, "sparknlp.common.storage.HasStorage.setStoragePath"]], "setstorageref() (hasstorageref method)": [[224, "sparknlp.common.storage.HasStorageRef.setStorageRef"], [483, "sparknlp.common.storage.HasStorageRef.setStorageRef"]], "sparknlp.common.storage": [[224, "module-sparknlp.common.storage"], [483, "module-sparknlp.common.storage"]], "storagepath (hasstorage attribute)": [[224, "sparknlp.common.storage.HasStorage.storagePath"], [483, "sparknlp.common.storage.HasStorage.storagePath"]], "storageref (hasstorageref attribute)": [[224, "sparknlp.common.storage.HasStorageRef.storageRef"], [483, "sparknlp.common.storage.HasStorageRef.storageRef"]], "externalresource() (in module sparknlp.common.utils)": [[225, "sparknlp.common.utils.ExternalResource"], [484, "sparknlp.common.utils.ExternalResource"]], "regexrule() (in module sparknlp.common.utils)": [[225, "sparknlp.common.utils.RegexRule"], [484, "sparknlp.common.utils.RegexRule"]], "sparknlp.common.utils": [[225, "module-sparknlp.common.utils"], [484, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[226, "sparknlp.functions.explode_annotations_col"], [485, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[226, "sparknlp.functions.filter_by_annotations_col"], [485, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[226, "sparknlp.functions.map_annotations"], [485, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[226, "sparknlp.functions.map_annotations_array"], [485, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[226, "sparknlp.functions.map_annotations_col"], [485, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[226, "sparknlp.functions.map_annotations_cols"], [485, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[226, "sparknlp.functions.map_annotations_strict"], [485, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[226, "module-sparknlp.functions"], [485, "module-sparknlp.functions"]], "sparknlp.internal": [[227, "module-sparknlp.internal"], [490, "module-sparknlp.internal"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[228, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"], [487, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[228, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"], [487, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[228, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"], [487, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[228, "module-sparknlp.internal.annotator_java_ml"], [487, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[229, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"], [488, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "outputannotatortype (annotatortransformer attribute)": [[229, "sparknlp.internal.annotator_transformer.AnnotatorTransformer.outputAnnotatorType"], [488, "sparknlp.internal.annotator_transformer.AnnotatorTransformer.outputAnnotatorType"]], "sparknlp.internal.annotator_transformer": [[229, "module-sparknlp.internal.annotator_transformer"], [488, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[230, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"], [489, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "apply() (extendedjavawrapper method)": [[230, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.apply"], [489, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.apply"]], "getdataframe() (extendedjavawrapper method)": [[230, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.getDataFrame"], [489, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.getDataFrame"]], "new_java_array() (extendedjavawrapper method)": [[230, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"], [489, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "new_java_array_integer() (extendedjavawrapper method)": [[230, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_integer"], [489, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_integer"]], "new_java_array_string() (extendedjavawrapper method)": [[230, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_string"], [489, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_string"]], "new_java_obj() (extendedjavawrapper method)": [[230, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_obj"], [489, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_obj"]], "spark_version() (extendedjavawrapper method)": [[230, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.spark_version"], [489, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.spark_version"]], "sparknlp.internal.extended_java_wrapper": [[230, "module-sparknlp.internal.extended_java_wrapper"], [489, "module-sparknlp.internal.extended_java_wrapper"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[231, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"], [491, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[231, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"], [491, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "getter_attrs (paramsgetterssetters attribute)": [[231, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getter_attrs"], [491, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getter_attrs"]], "setparamvalue() (paramsgetterssetters method)": [[231, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"], [491, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[231, "module-sparknlp.internal.params_getters_setters"], [491, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[232, "sparknlp.internal.recursive.RecursiveEstimator"], [492, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[232, "sparknlp.internal.recursive.RecursiveTransformer"], [492, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[232, "sparknlp.internal.recursive.RecursiveEstimator.fit"], [492, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[232, "module-sparknlp.internal.recursive"], [492, "module-sparknlp.internal.recursive"]], "transform_recursive() (recursivetransformer method)": [[232, "sparknlp.internal.recursive.RecursiveTransformer.transform_recursive"], [492, "sparknlp.internal.recursive.RecursiveTransformer.transform_recursive"]], "sparknlp.logging": [[233, "module-sparknlp.logging"], [494, "module-sparknlp.logging"]], "cometlogger (class in sparknlp.logging.comet)": [[234, "sparknlp.logging.comet.CometLogger"], [493, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[234, "sparknlp.logging.comet.CometLogger.end"], [493, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[234, "sparknlp.logging.comet.CometLogger.log_asset"], [493, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[234, "sparknlp.logging.comet.CometLogger.log_asset_data"], [493, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[234, "sparknlp.logging.comet.CometLogger.log_completed_run"], [493, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[234, "sparknlp.logging.comet.CometLogger.log_metrics"], [493, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[234, "sparknlp.logging.comet.CometLogger.log_parameters"], [493, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[234, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"], [493, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[234, "sparknlp.logging.comet.CometLogger.log_visualization"], [493, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[234, "sparknlp.logging.comet.CometLogger.monitor"], [493, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[234, "module-sparknlp.logging.comet"], [493, "module-sparknlp.logging.comet"]], "sparknlp.partition": [[235, "module-sparknlp.partition"], [495, "module-sparknlp.partition"]], "partition (class in sparknlp.partition.partition)": [[236, "sparknlp.partition.partition.Partition"], [496, "sparknlp.partition.partition.Partition"]], "partition() (partition method)": [[236, "sparknlp.partition.partition.Partition.partition"], [496, "sparknlp.partition.partition.Partition.partition"]], "partition_text() (partition method)": [[236, "sparknlp.partition.partition.Partition.partition_text"], [496, "sparknlp.partition.partition.Partition.partition_text"]], "partition_urls() (partition method)": [[236, "sparknlp.partition.partition.Partition.partition_urls"], [496, "sparknlp.partition.partition.Partition.partition_urls"]], "sparknlp.partition.partition": [[236, "module-sparknlp.partition.partition"], [496, "module-sparknlp.partition.partition"]], "haschunkerproperties (class in sparknlp.partition.partition_properties)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties"]], "hasemailreaderproperties (class in sparknlp.partition.partition_properties)": [[237, "sparknlp.partition.partition_properties.HasEmailReaderProperties"], [497, "sparknlp.partition.partition_properties.HasEmailReaderProperties"]], "hasexcelreaderproperties (class in sparknlp.partition.partition_properties)": [[237, "sparknlp.partition.partition_properties.HasExcelReaderProperties"], [497, "sparknlp.partition.partition_properties.HasExcelReaderProperties"]], "hashtmlreaderproperties (class in sparknlp.partition.partition_properties)": [[237, "sparknlp.partition.partition_properties.HasHTMLReaderProperties"], [497, "sparknlp.partition.partition_properties.HasHTMLReaderProperties"]], "haspdfproperties (class in sparknlp.partition.partition_properties)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties"], [497, "sparknlp.partition.partition_properties.HasPdfProperties"]], "haspowerpointproperties (class in sparknlp.partition.partition_properties)": [[237, "sparknlp.partition.partition_properties.HasPowerPointProperties"], [497, "sparknlp.partition.partition_properties.HasPowerPointProperties"]], "hasreaderproperties (class in sparknlp.partition.partition_properties)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties"], [497, "sparknlp.partition.partition_properties.HasReaderProperties"]], "hastextreaderproperties (class in sparknlp.partition.partition_properties)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties"]], "addattachmentcontent (hasemailreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasEmailReaderProperties.addAttachmentContent"], [497, "sparknlp.partition.partition_properties.HasEmailReaderProperties.addAttachmentContent"]], "appendcells (hasexcelreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasExcelReaderProperties.appendCells"], [497, "sparknlp.partition.partition_properties.HasExcelReaderProperties.appendCells"]], "cellseparator (hasexcelreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasExcelReaderProperties.cellSeparator"], [497, "sparknlp.partition.partition_properties.HasExcelReaderProperties.cellSeparator"]], "chunkingstrategy (haschunkerproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.chunkingStrategy"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.chunkingStrategy"]], "combinetextundernchars (haschunkerproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.combineTextUnderNChars"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.combineTextUnderNChars"]], "contentpath (hasreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.contentPath"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.contentPath"]], "contenttype (hasreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.contentType"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.contentType"]], "explodedocs (hasreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.explodeDocs"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.explodeDocs"]], "extractcoordinates (haspdfproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.extractCoordinates"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.extractCoordinates"]], "getaddattachmentcontent() (hasemailreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasEmailReaderProperties.getAddAttachmentContent"], [497, "sparknlp.partition.partition_properties.HasEmailReaderProperties.getAddAttachmentContent"]], "getappendcells() (hasexcelreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getAppendCells"], [497, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getAppendCells"]], "getcellseparator() (hasexcelreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getCellSeparator"], [497, "sparknlp.partition.partition_properties.HasExcelReaderProperties.getCellSeparator"]], "getgroupbrokenparagraphs() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.getGroupBrokenParagraphs"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.getGroupBrokenParagraphs"]], "getincludeslidenotes() (haspowerpointproperties method)": [[237, "sparknlp.partition.partition_properties.HasPowerPointProperties.getIncludeSlideNotes"], [497, "sparknlp.partition.partition_properties.HasPowerPointProperties.getIncludeSlideNotes"]], "getmaxlinecount() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.getMaxLineCount"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.getMaxLineCount"]], "getparagraphsplit() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.getParagraphSplit"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.getParagraphSplit"]], "getshortlinewordthreshold() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.getShortLineWordThreshold"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.getShortLineWordThreshold"]], "getthreshold() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.getThreshold"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.getThreshold"]], "gettimeout() (hashtmlreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.getTimeout"], [497, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.getTimeout"]], "gettitlelengthsize() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.getTitleLengthSize"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.getTitleLengthSize"]], "groupbrokenparagraphs (hastextreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.groupBrokenParagraphs"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.groupBrokenParagraphs"]], "ignoreexceptions (hasreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.ignoreExceptions"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.ignoreExceptions"]], "includepagebreaks (hasreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.includePageBreaks"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.includePageBreaks"]], "includeslidenotes (haspowerpointproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPowerPointProperties.includeSlideNotes"], [497, "sparknlp.partition.partition_properties.HasPowerPointProperties.includeSlideNotes"]], "infertablestructure (hasreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.inferTableStructure"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.inferTableStructure"]], "maxcharacters (haschunkerproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.maxCharacters"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.maxCharacters"]], "maxlinecount (hastextreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.maxLineCount"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.maxLineCount"]], "newafternchars (haschunkerproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.newAfterNChars"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.newAfterNChars"]], "normalizeligatures (haspdfproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.normalizeLigatures"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.normalizeLigatures"]], "onlypagenum (haspdfproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.onlyPageNum"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.onlyPageNum"]], "origincol (haspdfproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.originCol"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.originCol"]], "outputcol (hasreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.outputCol"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.outputCol"]], "outputformat (hashtmlreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.outputFormat"], [497, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.outputFormat"]], "overlap (haschunkerproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.overlap"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.overlap"]], "overlapall (haschunkerproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.overlapAll"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.overlapAll"]], "pagenumcol (haspdfproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.pageNumCol"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.pageNumCol"]], "paragraphsplit (hastextreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.paragraphSplit"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.paragraphSplit"]], "partitionnum (haspdfproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.partitionNum"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.partitionNum"]], "readasimage (haspdfproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.readAsImage"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.readAsImage"]], "setaddattachmentcontent() (hasemailreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasEmailReaderProperties.setAddAttachmentContent"], [497, "sparknlp.partition.partition_properties.HasEmailReaderProperties.setAddAttachmentContent"]], "setappendcells() (hasexcelreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setAppendCells"], [497, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setAppendCells"]], "setcellseparator() (hasexcelreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setCellSeparator"], [497, "sparknlp.partition.partition_properties.HasExcelReaderProperties.setCellSeparator"]], "setchunkingstrategy() (haschunkerproperties method)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.setChunkingStrategy"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.setChunkingStrategy"]], "setcombinetextundernchars() (haschunkerproperties method)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.setCombineTextUnderNChars"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.setCombineTextUnderNChars"]], "setcontentpath() (hasreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.setContentPath"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.setContentPath"]], "setcontenttype() (hasreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.setContentType"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.setContentType"]], "setexplodedocs() (hasreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.setExplodeDocs"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.setExplodeDocs"]], "setextractcoordinates() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setExtractCoordinates"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setExtractCoordinates"]], "setgroupbrokenparagraphs() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.setGroupBrokenParagraphs"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.setGroupBrokenParagraphs"]], "setheaders() (hashtmlreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setHeaders"], [497, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setHeaders"]], "setignoreexceptions() (hasreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.setIgnoreExceptions"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.setIgnoreExceptions"]], "setincludepagebreaks() (hasreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.setIncludePageBreaks"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.setIncludePageBreaks"]], "setincludeslidenotes() (haspowerpointproperties method)": [[237, "sparknlp.partition.partition_properties.HasPowerPointProperties.setIncludeSlideNotes"], [497, "sparknlp.partition.partition_properties.HasPowerPointProperties.setIncludeSlideNotes"]], "setinfertablestructure() (hasreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.setInferTableStructure"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.setInferTableStructure"]], "setmaxcharacters() (haschunkerproperties method)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.setMaxCharacters"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.setMaxCharacters"]], "setmaxlinecount() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.setMaxLineCount"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.setMaxLineCount"]], "setnewafternchars() (haschunkerproperties method)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.setNewAfterNChars"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.setNewAfterNChars"]], "setnormalizeligatures() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setNormalizeLigatures"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setNormalizeLigatures"]], "setonlypagenum() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setOnlyPageNum"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setOnlyPageNum"]], "setorigincol() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setOriginCol"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setOriginCol"]], "setoutputcol() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setOutputCol"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setOutputCol"]], "setoutputformat() (hashtmlreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setOutputFormat"], [497, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setOutputFormat"]], "setoverlap() (haschunkerproperties method)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlap"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlap"]], "setoverlapall() (haschunkerproperties method)": [[237, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlapAll"], [497, "sparknlp.partition.partition_properties.HasChunkerProperties.setOverlapAll"]], "setpagenumcol() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setPageNumCol"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setPageNumCol"]], "setparagraphsplit() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.setParagraphSplit"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.setParagraphSplit"]], "setpartitionnum() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setPartitionNum"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setPartitionNum"]], "setreadasimage() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setReadAsImage"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setReadAsImage"]], "setshortlinewordthreshold() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.setShortLineWordThreshold"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.setShortLineWordThreshold"]], "setsort() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setSort"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setSort"]], "setsplitpage() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setSplitPage"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setSplitPage"]], "setstorecontent() (hasreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.setStoreContent"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.setStoreContent"]], "setstoresplittedpdf() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setStoreSplittedPdf"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setStoreSplittedPdf"]], "settextstripper() (haspdfproperties method)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.setTextStripper"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.setTextStripper"]], "setthreshold() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.setThreshold"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.setThreshold"]], "settimeout() (hashtmlreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setTimeout"], [497, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.setTimeout"]], "settitlefontsize() (hasreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.setTitleFontSize"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.setTitleFontSize"]], "settitlelengthsize() (hastextreaderproperties method)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.setTitleLengthSize"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.setTitleLengthSize"]], "shortlinewordthreshold (hastextreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.shortLineWordThreshold"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.shortLineWordThreshold"]], "sort (haspdfproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.sort"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.sort"]], "sparknlp.partition.partition_properties": [[237, "module-sparknlp.partition.partition_properties"], [497, "module-sparknlp.partition.partition_properties"]], "splitpage (haspdfproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.splitPage"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.splitPage"]], "storecontent (hasreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.storeContent"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.storeContent"]], "storesplittedpdf (haspdfproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.storeSplittedPdf"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.storeSplittedPdf"]], "textstripper (haspdfproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasPdfProperties.textStripper"], [497, "sparknlp.partition.partition_properties.HasPdfProperties.textStripper"]], "threshold (hastextreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.threshold"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.threshold"]], "timeout (hashtmlreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.timeout"], [497, "sparknlp.partition.partition_properties.HasHTMLReaderProperties.timeout"]], "titlefontsize (hasreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasReaderProperties.titleFontSize"], [497, "sparknlp.partition.partition_properties.HasReaderProperties.titleFontSize"]], "titlelengthsize (hastextreaderproperties attribute)": [[237, "sparknlp.partition.partition_properties.HasTextReaderProperties.titleLengthSize"], [497, "sparknlp.partition.partition_properties.HasTextReaderProperties.titleLengthSize"]], "partitiontransformer (class in sparknlp.partition.partition_transformer)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer"]], "contentpath (partitiontransformer attribute)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.contentPath"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.contentPath"]], "contenttype (partitiontransformer attribute)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.contentType"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.contentType"]], "getcontentpath() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentPath"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentPath"]], "getcontenttype() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentType"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.getContentType"]], "getincludepagebreaks() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.getIncludePageBreaks"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.getIncludePageBreaks"]], "getinfertablestructure() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.getInferTableStructure"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.getInferTableStructure"]], "getstorecontent() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.getStoreContent"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.getStoreContent"]], "gettitlefontsize() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.getTitleFontSize"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.getTitleFontSize"]], "includepagebreaks (partitiontransformer attribute)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.includePageBreaks"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.includePageBreaks"]], "infertablestructure (partitiontransformer attribute)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.inferTableStructure"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.inferTableStructure"]], "inputannotatortypes (partitiontransformer attribute)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.inputAnnotatorTypes"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.inputAnnotatorTypes"]], "name (partitiontransformer attribute)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.name"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.name"]], "outputannotatortype (partitiontransformer attribute)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.outputAnnotatorType"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.outputAnnotatorType"]], "setcontentpath() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentPath"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentPath"]], "setcontenttype() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentType"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.setContentType"]], "setincludepagebreaks() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.setIncludePageBreaks"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.setIncludePageBreaks"]], "setinfertablestructure() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.setInferTableStructure"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.setInferTableStructure"]], "setstorecontent() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.setStoreContent"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.setStoreContent"]], "settitlefontsize() (partitiontransformer method)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.setTitleFontSize"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.setTitleFontSize"]], "sparknlp.partition.partition_transformer": [[238, "module-sparknlp.partition.partition_transformer"], [498, "module-sparknlp.partition.partition_transformer"]], "storecontent (partitiontransformer attribute)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.storeContent"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.storeContent"]], "titlefontsize (partitiontransformer attribute)": [[238, "sparknlp.partition.partition_transformer.PartitionTransformer.titleFontSize"], [498, "sparknlp.partition.partition_transformer.PartitionTransformer.titleFontSize"]], "sparknlp.pretrained": [[239, "module-sparknlp.pretrained"], [499, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[240, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"], [500, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[240, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"], [500, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "from_disk() (pretrainedpipeline static method)": [[240, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.from_disk"], [500, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.from_disk"]], "fullannotate() (pretrainedpipeline method)": [[240, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"], [500, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[240, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"], [500, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[240, "module-sparknlp.pretrained.pretrained_pipeline"], [500, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[240, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"], [500, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[241, "sparknlp.pretrained.resource_downloader.ResourceDownloader"], [501, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[241, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"], [501, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[241, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"], [501, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[241, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"], [501, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[241, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"], [501, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[241, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"], [501, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[241, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"], [501, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[241, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"], [501, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[241, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"], [501, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[241, "module-sparknlp.pretrained.resource_downloader"], [501, "module-sparknlp.pretrained.resource_downloader"]], "printprogress() (in module sparknlp.pretrained.utils)": [[242, "sparknlp.pretrained.utils.printProgress"], [502, "sparknlp.pretrained.utils.printProgress"]], "sparknlp.pretrained.utils": [[242, "module-sparknlp.pretrained.utils"], [502, "module-sparknlp.pretrained.utils"]], "sparknlp.reader": [[243, "module-sparknlp.reader"], [504, "module-sparknlp.reader"]], "pdf_layout_text_stripper (textstrippertype attribute)": [[244, "sparknlp.reader.enums.TextStripperType.PDF_LAYOUT_TEXT_STRIPPER"], [503, "sparknlp.reader.enums.TextStripperType.PDF_LAYOUT_TEXT_STRIPPER"]], "pdf_text_stripper (textstrippertype attribute)": [[244, "sparknlp.reader.enums.TextStripperType.PDF_TEXT_STRIPPER"], [503, "sparknlp.reader.enums.TextStripperType.PDF_TEXT_STRIPPER"]], "textstrippertype (class in sparknlp.reader.enums)": [[244, "sparknlp.reader.enums.TextStripperType"], [503, "sparknlp.reader.enums.TextStripperType"]], "sparknlp.reader.enums": [[244, "module-sparknlp.reader.enums"], [503, "module-sparknlp.reader.enums"]], "pdftotext (class in sparknlp.reader.pdf_to_text)": [[245, "sparknlp.reader.pdf_to_text.PdfToText"], [505, "sparknlp.reader.pdf_to_text.PdfToText"]], "extractcoordinates (pdftotext attribute)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.extractCoordinates"], [505, "sparknlp.reader.pdf_to_text.PdfToText.extractCoordinates"]], "normalizeligatures (pdftotext attribute)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.normalizeLigatures"], [505, "sparknlp.reader.pdf_to_text.PdfToText.normalizeLigatures"]], "onlypagenum (pdftotext attribute)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.onlyPageNum"], [505, "sparknlp.reader.pdf_to_text.PdfToText.onlyPageNum"]], "pagenumcol (pdftotext attribute)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.pageNumCol"], [505, "sparknlp.reader.pdf_to_text.PdfToText.pageNumCol"]], "partitionnum (pdftotext attribute)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.partitionNum"], [505, "sparknlp.reader.pdf_to_text.PdfToText.partitionNum"]], "setextractcoordinates() (pdftotext method)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.setExtractCoordinates"], [505, "sparknlp.reader.pdf_to_text.PdfToText.setExtractCoordinates"]], "setinputcol() (pdftotext method)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.setInputCol"], [505, "sparknlp.reader.pdf_to_text.PdfToText.setInputCol"]], "setnormalizeligatures() (pdftotext method)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.setNormalizeLigatures"], [505, "sparknlp.reader.pdf_to_text.PdfToText.setNormalizeLigatures"]], "setonlypagenum() (pdftotext method)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.setOnlyPageNum"], [505, "sparknlp.reader.pdf_to_text.PdfToText.setOnlyPageNum"]], "setoutputcol() (pdftotext method)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.setOutputCol"], [505, "sparknlp.reader.pdf_to_text.PdfToText.setOutputCol"]], "setpagenumcol() (pdftotext method)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.setPageNumCol"], [505, "sparknlp.reader.pdf_to_text.PdfToText.setPageNumCol"]], "setpartitionnum() (pdftotext method)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.setPartitionNum"], [505, "sparknlp.reader.pdf_to_text.PdfToText.setPartitionNum"]], "setsort() (pdftotext method)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.setSort"], [505, "sparknlp.reader.pdf_to_text.PdfToText.setSort"]], "setsplitpage() (pdftotext method)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.setSplitPage"], [505, "sparknlp.reader.pdf_to_text.PdfToText.setSplitPage"]], "setstoresplittedpdf() (pdftotext method)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.setStoreSplittedPdf"], [505, "sparknlp.reader.pdf_to_text.PdfToText.setStoreSplittedPdf"]], "settextstripper() (pdftotext method)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.setTextStripper"], [505, "sparknlp.reader.pdf_to_text.PdfToText.setTextStripper"]], "sort (pdftotext attribute)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.sort"], [505, "sparknlp.reader.pdf_to_text.PdfToText.sort"]], "sparknlp.reader.pdf_to_text": [[245, "module-sparknlp.reader.pdf_to_text"], [505, "module-sparknlp.reader.pdf_to_text"]], "splitpage (pdftotext attribute)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.splitPage"], [505, "sparknlp.reader.pdf_to_text.PdfToText.splitPage"]], "storesplittedpdf (pdftotext attribute)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.storeSplittedPdf"], [505, "sparknlp.reader.pdf_to_text.PdfToText.storeSplittedPdf"]], "textstripper (pdftotext attribute)": [[245, "sparknlp.reader.pdf_to_text.PdfToText.textStripper"], [505, "sparknlp.reader.pdf_to_text.PdfToText.textStripper"]], "reader2doc (class in sparknlp.reader.reader2doc)": [[246, "sparknlp.reader.reader2doc.Reader2Doc"], [506, "sparknlp.reader.reader2doc.Reader2Doc"]], "excludenontext (reader2doc attribute)": [[246, "sparknlp.reader.reader2doc.Reader2Doc.excludeNonText"], [506, "sparknlp.reader.reader2doc.Reader2Doc.excludeNonText"]], "flattenoutput (reader2doc attribute)": [[246, "sparknlp.reader.reader2doc.Reader2Doc.flattenOutput"], [506, "sparknlp.reader.reader2doc.Reader2Doc.flattenOutput"]], "name (reader2doc attribute)": [[246, "sparknlp.reader.reader2doc.Reader2Doc.name"], [506, "sparknlp.reader.reader2doc.Reader2Doc.name"]], "outputannotatortype (reader2doc attribute)": [[246, "sparknlp.reader.reader2doc.Reader2Doc.outputAnnotatorType"], [506, "sparknlp.reader.reader2doc.Reader2Doc.outputAnnotatorType"]], "outputasdocument (reader2doc attribute)": [[246, "sparknlp.reader.reader2doc.Reader2Doc.outputAsDocument"], [506, "sparknlp.reader.reader2doc.Reader2Doc.outputAsDocument"]], "setexcludenontext() (reader2doc method)": [[246, "sparknlp.reader.reader2doc.Reader2Doc.setExcludeNonText"], [506, "sparknlp.reader.reader2doc.Reader2Doc.setExcludeNonText"]], "setflattenoutput() (reader2doc method)": [[246, "sparknlp.reader.reader2doc.Reader2Doc.setFlattenOutput"], [506, "sparknlp.reader.reader2doc.Reader2Doc.setFlattenOutput"]], "setoutputasdocument() (reader2doc method)": [[246, "sparknlp.reader.reader2doc.Reader2Doc.setOutputAsDocument"], [506, "sparknlp.reader.reader2doc.Reader2Doc.setOutputAsDocument"]], "setparams() (reader2doc method)": [[246, "sparknlp.reader.reader2doc.Reader2Doc.setParams"], [506, "sparknlp.reader.reader2doc.Reader2Doc.setParams"]], "settitlethreshold() (reader2doc method)": [[246, "sparknlp.reader.reader2doc.Reader2Doc.setTitleThreshold"], [506, "sparknlp.reader.reader2doc.Reader2Doc.setTitleThreshold"]], "sparknlp.reader.reader2doc": [[246, "module-sparknlp.reader.reader2doc"], [506, "module-sparknlp.reader.reader2doc"]], "titlethreshold (reader2doc attribute)": [[246, "sparknlp.reader.reader2doc.Reader2Doc.titleThreshold"], [506, "sparknlp.reader.reader2doc.Reader2Doc.titleThreshold"]], "reader2image (class in sparknlp.reader.reader2image)": [[247, "sparknlp.reader.reader2image.Reader2Image"], [507, "sparknlp.reader.reader2image.Reader2Image"]], "customprompttemplate (reader2image attribute)": [[247, "sparknlp.reader.reader2image.Reader2Image.customPromptTemplate"], [507, "sparknlp.reader.reader2image.Reader2Image.customPromptTemplate"]], "name (reader2image attribute)": [[247, "sparknlp.reader.reader2image.Reader2Image.name"], [507, "sparknlp.reader.reader2image.Reader2Image.name"]], "outputannotatortype (reader2image attribute)": [[247, "sparknlp.reader.reader2image.Reader2Image.outputAnnotatorType"], [507, "sparknlp.reader.reader2image.Reader2Image.outputAnnotatorType"]], "prompttemplate (reader2image attribute)": [[247, "sparknlp.reader.reader2image.Reader2Image.promptTemplate"], [507, "sparknlp.reader.reader2image.Reader2Image.promptTemplate"]], "setcustomprompttemplate() (reader2image method)": [[247, "sparknlp.reader.reader2image.Reader2Image.setCustomPromptTemplate"], [507, "sparknlp.reader.reader2image.Reader2Image.setCustomPromptTemplate"]], "setparams() (reader2image method)": [[247, "sparknlp.reader.reader2image.Reader2Image.setParams"], [507, "sparknlp.reader.reader2image.Reader2Image.setParams"]], "setprompttemplate() (reader2image method)": [[247, "sparknlp.reader.reader2image.Reader2Image.setPromptTemplate"], [507, "sparknlp.reader.reader2image.Reader2Image.setPromptTemplate"]], "setusermessage() (reader2image method)": [[247, "sparknlp.reader.reader2image.Reader2Image.setUserMessage"], [507, "sparknlp.reader.reader2image.Reader2Image.setUserMessage"]], "sparknlp.reader.reader2image": [[247, "module-sparknlp.reader.reader2image"], [507, "module-sparknlp.reader.reader2image"]], "usermessage (reader2image attribute)": [[247, "sparknlp.reader.reader2image.Reader2Image.userMessage"], [507, "sparknlp.reader.reader2image.Reader2Image.userMessage"]], "reader2table (class in sparknlp.reader.reader2table)": [[248, "sparknlp.reader.reader2table.Reader2Table"], [508, "sparknlp.reader.reader2table.Reader2Table"]], "flattenoutput (reader2table attribute)": [[248, "sparknlp.reader.reader2table.Reader2Table.flattenOutput"], [508, "sparknlp.reader.reader2table.Reader2Table.flattenOutput"]], "name (reader2table attribute)": [[248, "sparknlp.reader.reader2table.Reader2Table.name"], [508, "sparknlp.reader.reader2table.Reader2Table.name"]], "outputannotatortype (reader2table attribute)": [[248, "sparknlp.reader.reader2table.Reader2Table.outputAnnotatorType"], [508, "sparknlp.reader.reader2table.Reader2Table.outputAnnotatorType"]], "setflattenoutput() (reader2table method)": [[248, "sparknlp.reader.reader2table.Reader2Table.setFlattenOutput"], [508, "sparknlp.reader.reader2table.Reader2Table.setFlattenOutput"]], "setparams() (reader2table method)": [[248, "sparknlp.reader.reader2table.Reader2Table.setParams"], [508, "sparknlp.reader.reader2table.Reader2Table.setParams"]], "settitlethreshold() (reader2table method)": [[248, "sparknlp.reader.reader2table.Reader2Table.setTitleThreshold"], [508, "sparknlp.reader.reader2table.Reader2Table.setTitleThreshold"]], "sparknlp.reader.reader2table": [[248, "module-sparknlp.reader.reader2table"], [508, "module-sparknlp.reader.reader2table"]], "titlethreshold (reader2table attribute)": [[248, "sparknlp.reader.reader2table.Reader2Table.titleThreshold"], [508, "sparknlp.reader.reader2table.Reader2Table.titleThreshold"]], "sparknlpreader (class in sparknlp.reader.sparknlp_reader)": [[249, "sparknlp.reader.sparknlp_reader.SparkNLPReader"], [509, "sparknlp.reader.sparknlp_reader.SparkNLPReader"]], "csv() (sparknlpreader method)": [[249, "sparknlp.reader.sparknlp_reader.SparkNLPReader.csv"], [509, "sparknlp.reader.sparknlp_reader.SparkNLPReader.csv"]], "doc() (sparknlpreader method)": [[249, "sparknlp.reader.sparknlp_reader.SparkNLPReader.doc"], [509, "sparknlp.reader.sparknlp_reader.SparkNLPReader.doc"]], "email() (sparknlpreader method)": [[249, "sparknlp.reader.sparknlp_reader.SparkNLPReader.email"], [509, "sparknlp.reader.sparknlp_reader.SparkNLPReader.email"]], "html() (sparknlpreader method)": [[249, "sparknlp.reader.sparknlp_reader.SparkNLPReader.html"], [509, "sparknlp.reader.sparknlp_reader.SparkNLPReader.html"]], "md() (sparknlpreader method)": [[249, "sparknlp.reader.sparknlp_reader.SparkNLPReader.md"], [509, "sparknlp.reader.sparknlp_reader.SparkNLPReader.md"]], "pdf() (sparknlpreader method)": [[249, "sparknlp.reader.sparknlp_reader.SparkNLPReader.pdf"], [509, "sparknlp.reader.sparknlp_reader.SparkNLPReader.pdf"]], "ppt() (sparknlpreader method)": [[249, "sparknlp.reader.sparknlp_reader.SparkNLPReader.ppt"], [509, "sparknlp.reader.sparknlp_reader.SparkNLPReader.ppt"]], "sparknlp.reader.sparknlp_reader": [[249, "module-sparknlp.reader.sparknlp_reader"], [509, "module-sparknlp.reader.sparknlp_reader"]], "txt() (sparknlpreader method)": [[249, "sparknlp.reader.sparknlp_reader.SparkNLPReader.txt"], [509, "sparknlp.reader.sparknlp_reader.SparkNLPReader.txt"]], "xls() (sparknlpreader method)": [[249, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xls"], [509, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xls"]], "xml() (sparknlpreader method)": [[249, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xml"], [509, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xml"]], "sparknlp.training": [[250, "module-sparknlp.training"], [512, "module-sparknlp.training"]], "conll (class in sparknlp.training.conll)": [[251, "sparknlp.training.conll.CoNLL"], [510, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[251, "sparknlp.training.conll.CoNLL.readDataset"], [510, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[251, "module-sparknlp.training.conll"], [510, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[252, "sparknlp.training.conllu.CoNLLU"], [511, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[252, "sparknlp.training.conllu.CoNLLU.readDataset"], [511, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[252, "module-sparknlp.training.conllu"], [511, "module-sparknlp.training.conllu"]], "pos (class in sparknlp.training.pos)": [[253, "sparknlp.training.pos.POS"], [513, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[253, "sparknlp.training.pos.POS.readDataset"], [513, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[253, "module-sparknlp.training.pos"], [513, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[254, "sparknlp.training.pub_tator.PubTator"], [514, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[254, "sparknlp.training.pub_tator.PubTator.readDataset"], [514, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[254, "module-sparknlp.training.pub_tator"], [514, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[255, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"], [515, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "readjsonfile() (spacytoannotation method)": [[255, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation.readJsonFile"], [515, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation.readJsonFile"]], "sparknlp.training.spacy_to_annotation": [[255, "module-sparknlp.training.spacy_to_annotation"], [515, "module-sparknlp.training.spacy_to_annotation"]], "pushtohub (class in sparknlp.upload_to_hub)": [[257, "sparknlp.upload_to_hub.PushToHub"], [517, "sparknlp.upload_to_hub.PushToHub"]], "check_for_required_info() (pushtohub method)": [[257, "sparknlp.upload_to_hub.PushToHub.check_for_required_info"], [517, "sparknlp.upload_to_hub.PushToHub.check_for_required_info"]], "create_docs() (pushtohub method)": [[257, "sparknlp.upload_to_hub.PushToHub.create_docs"], [517, "sparknlp.upload_to_hub.PushToHub.create_docs"]], "list_of_tasks (pushtohub attribute)": [[257, "sparknlp.upload_to_hub.PushToHub.list_of_tasks"], [517, "sparknlp.upload_to_hub.PushToHub.list_of_tasks"]], "push_to_hub() (pushtohub method)": [[257, "sparknlp.upload_to_hub.PushToHub.push_to_hub"], [517, "sparknlp.upload_to_hub.PushToHub.push_to_hub"]], "sparknlp.upload_to_hub": [[257, "module-sparknlp.upload_to_hub"], [517, "module-sparknlp.upload_to_hub"]], "unzip_directory() (pushtohub method)": [[257, "sparknlp.upload_to_hub.PushToHub.unzip_directory"], [517, "sparknlp.upload_to_hub.PushToHub.unzip_directory"]], "zip_directory() (pushtohub method)": [[257, "sparknlp.upload_to_hub.PushToHub.zip_directory"], [517, "sparknlp.upload_to_hub.PushToHub.zip_directory"]], "conllgenerator (class in sparknlp.util)": [[258, "sparknlp.util.CoNLLGenerator"], [518, "sparknlp.util.CoNLLGenerator"]], "embeddingsdataframeutils (class in sparknlp.util)": [[258, "sparknlp.util.EmbeddingsDataFrameUtils"], [518, "sparknlp.util.EmbeddingsDataFrameUtils"]], "emptyimagerow (embeddingsdataframeutils attribute)": [[258, "sparknlp.util.EmbeddingsDataFrameUtils.emptyImageRow"], [518, "sparknlp.util.EmbeddingsDataFrameUtils.emptyImageRow"]], "exportconllfiles() (conllgenerator static method)": [[258, "sparknlp.util.CoNLLGenerator.exportConllFiles"], [518, "sparknlp.util.CoNLLGenerator.exportConllFiles"]], "get_config_path() (in module sparknlp.util)": [[258, "sparknlp.util.get_config_path"], [518, "sparknlp.util.get_config_path"]], "imageschema (embeddingsdataframeutils attribute)": [[258, "sparknlp.util.EmbeddingsDataFrameUtils.imageSchema"], [518, "sparknlp.util.EmbeddingsDataFrameUtils.imageSchema"]], "sparknlp.util": [[258, "module-sparknlp.util"], [518, "module-sparknlp.util"]], "annotatortype (annotation attribute)": [[261, "sparknlp.annotation.Annotation.annotatorType"]], "begin (annotation attribute)": [[261, "sparknlp.annotation.Annotation.begin"]], "embeddings (annotation attribute)": [[261, "sparknlp.annotation.Annotation.embeddings"]], "end (annotation attribute)": [[261, "sparknlp.annotation.Annotation.end"]], "metadata (annotation attribute)": [[261, "sparknlp.annotation.Annotation.metadata"]], "result (annotation attribute)": [[261, "sparknlp.annotation.Annotation.result"]], "annotatortype (annotationaudio attribute)": [[262, "sparknlp.annotation_audio.AnnotationAudio.annotatorType"]], "metadata (annotationaudio attribute)": [[262, "sparknlp.annotation_audio.AnnotationAudio.metadata"]], "result (annotationaudio attribute)": [[262, "sparknlp.annotation_audio.AnnotationAudio.result"]], "annotatortype (annotationimage attribute)": [[263, "sparknlp.annotation_image.AnnotationImage.annotatorType"]], "height (annotationimage attribute)": [[263, "sparknlp.annotation_image.AnnotationImage.height"]], "metadata (annotationimage attribute)": [[263, "sparknlp.annotation_image.AnnotationImage.metadata"]], "mode (annotationimage attribute)": [[263, "sparknlp.annotation_image.AnnotationImage.mode"]], "nchannels (annotationimage attribute)": [[263, "sparknlp.annotation_image.AnnotationImage.nChannels"]], "origin (annotationimage attribute)": [[263, "sparknlp.annotation_image.AnnotationImage.origin"]], "result (annotationimage attribute)": [[263, "sparknlp.annotation_image.AnnotationImage.result"]], "width (annotationimage attribute)": [[263, "sparknlp.annotation_image.AnnotationImage.width"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[347, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[347, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[347, "module-sparknlp.annotator.document_token_splitter_test"]], "test_run() (documenttokensplittertestspec method)": [[347, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.test_run"]], "annotators (in module sparknlp.annotator)": [[382, "sparknlp.annotator.annotators"]], "audio (in module sparknlp.annotator)": [[382, "sparknlp.annotator.audio"]], "classifier (in module sparknlp.annotator)": [[382, "sparknlp.annotator.classifier"]], "coref (in module sparknlp.annotator)": [[382, "sparknlp.annotator.coref"]], "cv (in module sparknlp.annotator)": [[382, "sparknlp.annotator.cv"]], "embeddings (in module sparknlp.annotator)": [[382, "sparknlp.annotator.embeddings"]], "er (in module sparknlp.annotator)": [[382, "sparknlp.annotator.er"]], "keyword (in module sparknlp.annotator)": [[382, "sparknlp.annotator.keyword"]], "ld (in module sparknlp.annotator)": [[382, "sparknlp.annotator.ld"]], "ner (in module sparknlp.annotator)": [[382, "sparknlp.annotator.ner"]], "parser (in module sparknlp.annotator)": [[382, "sparknlp.annotator.parser"]], "pos (in module sparknlp.annotator)": [[382, "sparknlp.annotator.pos"]], "regex (in module sparknlp.annotator)": [[382, "sparknlp.annotator.regex"]], "sbd (in module sparknlp.annotator)": [[382, "sparknlp.annotator.sbd"]], "sda (in module sparknlp.annotator)": [[382, "sparknlp.annotator.sda"]], "sentence_detector_dl (in module sparknlp.annotator)": [[382, "sparknlp.annotator.sentence_detector_dl"]], "seq2seq (in module sparknlp.annotator)": [[382, "sparknlp.annotator.seq2seq"]], "spell (in module sparknlp.annotator)": [[382, "sparknlp.annotator.spell"]], "ws (in module sparknlp.annotator)": [[382, "sparknlp.annotator.ws"]], "dictionary_path (norvigsweetingapproach attribute)": [[443, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary_path"]], "dictionary_path (symmetricdeleteapproach attribute)": [[444, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary_path"]], "parse_embeddings (lightpipeline attribute)": [[467, "sparknlp.base.light_pipeline.LightPipeline.parse_embeddings"]], "pipeline_model (lightpipeline attribute)": [[467, "sparknlp.base.light_pipeline.LightPipeline.pipeline_model"]], "stages (recursivepipelinemodel attribute)": [[470, "sparknlp.base.recursive_pipeline.RecursivePipelineModel.stages"]], "covered (coverageresult attribute)": [[477, "sparknlp.common.coverage_result.CoverageResult.covered"]], "percentage (coverageresult attribute)": [[477, "sparknlp.common.coverage_result.CoverageResult.percentage"]], "total (coverageresult attribute)": [[477, "sparknlp.common.coverage_result.CoverageResult.total"]], "annotators (in module sparknlp)": [[486, "sparknlp.annotators"]], "embeddings (in module sparknlp)": [[486, "sparknlp.embeddings"]], "java_obj (extendedjavawrapper attribute)": [[489, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.java_obj"]], "sc (extendedjavawrapper attribute)": [[489, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.sc"]], "comet_ml (in module sparknlp.logging.comet)": [[493, "sparknlp.logging.comet.comet_ml"]], "comet_mode (cometlogger attribute)": [[493, "sparknlp.logging.comet.CometLogger.comet_mode"]], "experiment (cometlogger attribute)": [[493, "sparknlp.logging.comet.CometLogger.experiment"]], "experiment_id (cometlogger attribute)": [[493, "sparknlp.logging.comet.CometLogger.experiment_id"]], "experiment_kwargs (cometlogger attribute)": [[493, "sparknlp.logging.comet.CometLogger.experiment_kwargs"]], "project_name (cometlogger attribute)": [[493, "sparknlp.logging.comet.CometLogger.project_name"]], "thread (cometlogger attribute)": [[493, "sparknlp.logging.comet.CometLogger.thread"]], "workspace (cometlogger attribute)": [[493, "sparknlp.logging.comet.CometLogger.workspace"]], "spark (partition attribute)": [[496, "sparknlp.partition.partition.Partition.spark"]], "light_model (pretrainedpipeline attribute)": [[500, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.light_model"]], "spark (sparknlpreader attribute)": [[509, "sparknlp.reader.sparknlp_reader.SparkNLPReader.spark"]], "sparknlp.training.tfgraphs": [[516, "module-sparknlp.training.tfgraphs"]], "tf_graph (in module sparknlp.training.tfgraphs)": [[516, "sparknlp.training.tfgraphs.tf_graph"]], "tf_graph_1x (in module sparknlp.training.tfgraphs)": [[516, "sparknlp.training.tfgraphs.tf_graph_1x"]]}})