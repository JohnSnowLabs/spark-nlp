Search.setIndex({"docnames": ["_api/modules", "_api/sparknlp", "_api/sparknlp.annotation", "_api/sparknlp.annotation_audio", "_api/sparknlp.annotation_image", "_api/sparknlp.annotator", "_api/sparknlp.annotator.audio", "_api/sparknlp.annotator.audio.hubert_for_ctc", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc", "_api/sparknlp.annotator.audio.whisper_for_ctc", "_api/sparknlp.annotator.chunk2_doc", "_api/sparknlp.annotator.chunker", "_api/sparknlp.annotator.classifier_dl", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.classifier_dl", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.sentiment_dl", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification", "_api/sparknlp.annotator.cleaners", "_api/sparknlp.annotator.cleaners.cleaner", "_api/sparknlp.annotator.cleaners.extractor", "_api/sparknlp.annotator.coref", "_api/sparknlp.annotator.coref.spanbert_coref", "_api/sparknlp.annotator.cv", "_api/sparknlp.annotator.cv.blip_for_question_answering", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification", "_api/sparknlp.annotator.cv.convnext_for_image_classification", "_api/sparknlp.annotator.cv.gemma3_for_multimodal", "_api/sparknlp.annotator.cv.janus_for_multimodal", "_api/sparknlp.annotator.cv.llava_for_multimodal", "_api/sparknlp.annotator.cv.mllama_for_multimodal", "_api/sparknlp.annotator.cv.paligemma_for_multimodal", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal", "_api/sparknlp.annotator.cv.qwen2vl_transformer", "_api/sparknlp.annotator.cv.smolvlm_transformer", "_api/sparknlp.annotator.cv.swin_for_image_classification", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning", "_api/sparknlp.annotator.cv.vit_for_image_classification", "_api/sparknlp.annotator.date2_chunk", "_api/sparknlp.annotator.dependency", "_api/sparknlp.annotator.dependency.dependency_parser", "_api/sparknlp.annotator.dependency.typed_dependency_parser", "_api/sparknlp.annotator.document_character_text_splitter", "_api/sparknlp.annotator.document_normalizer", "_api/sparknlp.annotator.document_token_splitter", "_api/sparknlp.annotator.document_token_splitter_test", "_api/sparknlp.annotator.embeddings", "_api/sparknlp.annotator.embeddings.albert_embeddings", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings", "_api/sparknlp.annotator.embeddings.bert_embeddings", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings", "_api/sparknlp.annotator.embeddings.bge_embeddings", "_api/sparknlp.annotator.embeddings.camembert_embeddings", "_api/sparknlp.annotator.embeddings.chunk_embeddings", "_api/sparknlp.annotator.embeddings.deberta_embeddings", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings", "_api/sparknlp.annotator.embeddings.doc2vec", "_api/sparknlp.annotator.embeddings.e5_embeddings", "_api/sparknlp.annotator.embeddings.elmo_embeddings", "_api/sparknlp.annotator.embeddings.instructor_embeddings", "_api/sparknlp.annotator.embeddings.longformer_embeddings", "_api/sparknlp.annotator.embeddings.mpnet_embeddings", "_api/sparknlp.annotator.embeddings.mxbai_embeddings", "_api/sparknlp.annotator.embeddings.nomic_embeddings", "_api/sparknlp.annotator.embeddings.roberta_embeddings", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.sentence_embeddings", "_api/sparknlp.annotator.embeddings.snowflake_embeddings", "_api/sparknlp.annotator.embeddings.uae_embeddings", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder", "_api/sparknlp.annotator.embeddings.word2vec", "_api/sparknlp.annotator.embeddings.word_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.xlnet_embeddings", "_api/sparknlp.annotator.er", "_api/sparknlp.annotator.er.entity_ruler", "_api/sparknlp.annotator.graph_extraction", "_api/sparknlp.annotator.keyword_extraction", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction", "_api/sparknlp.annotator.ld_dl", "_api/sparknlp.annotator.ld_dl.language_detector_dl", "_api/sparknlp.annotator.lemmatizer", "_api/sparknlp.annotator.matcher", "_api/sparknlp.annotator.matcher.big_text_matcher", "_api/sparknlp.annotator.matcher.date_matcher", "_api/sparknlp.annotator.matcher.multi_date_matcher", "_api/sparknlp.annotator.matcher.regex_matcher", "_api/sparknlp.annotator.matcher.text_matcher", "_api/sparknlp.annotator.n_gram_generator", "_api/sparknlp.annotator.ner", "_api/sparknlp.annotator.ner.ner_approach", "_api/sparknlp.annotator.ner.ner_converter", "_api/sparknlp.annotator.ner.ner_crf", "_api/sparknlp.annotator.ner.ner_dl", "_api/sparknlp.annotator.ner.ner_overwriter", "_api/sparknlp.annotator.ner.zero_shot_ner_model", "_api/sparknlp.annotator.normalizer", "_api/sparknlp.annotator.openai", "_api/sparknlp.annotator.openai.openai_completion", "_api/sparknlp.annotator.openai.openai_embeddings", "_api/sparknlp.annotator.param", "_api/sparknlp.annotator.param.classifier_encoder", "_api/sparknlp.annotator.param.evaluation_dl_params", "_api/sparknlp.annotator.pos", "_api/sparknlp.annotator.pos.perceptron", "_api/sparknlp.annotator.sentence", "_api/sparknlp.annotator.sentence.sentence_detector", "_api/sparknlp.annotator.sentence.sentence_detector_dl", "_api/sparknlp.annotator.sentiment", "_api/sparknlp.annotator.sentiment.sentiment_detector", "_api/sparknlp.annotator.sentiment.vivekn_sentiment", "_api/sparknlp.annotator.seq2seq", "_api/sparknlp.annotator.seq2seq.auto_gguf_model", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model", "_api/sparknlp.annotator.seq2seq.bart_transformer", "_api/sparknlp.annotator.seq2seq.cohere_transformer", "_api/sparknlp.annotator.seq2seq.cpm_transformer", "_api/sparknlp.annotator.seq2seq.gpt2_transformer", "_api/sparknlp.annotator.seq2seq.llama2_transformer", "_api/sparknlp.annotator.seq2seq.llama3_transformer", "_api/sparknlp.annotator.seq2seq.m2m100_transformer", "_api/sparknlp.annotator.seq2seq.marian_transformer", "_api/sparknlp.annotator.seq2seq.mistral_transformer", "_api/sparknlp.annotator.seq2seq.nllb_transformer", "_api/sparknlp.annotator.seq2seq.olmo_transformer", "_api/sparknlp.annotator.seq2seq.phi2_transformer", "_api/sparknlp.annotator.seq2seq.phi3_transformer", "_api/sparknlp.annotator.seq2seq.qwen_transformer", "_api/sparknlp.annotator.seq2seq.starcoder_transformer", "_api/sparknlp.annotator.seq2seq.t5_transformer", "_api/sparknlp.annotator.similarity", "_api/sparknlp.annotator.similarity.document_similarity_ranker", "_api/sparknlp.annotator.spell_check", "_api/sparknlp.annotator.spell_check.context_spell_checker", "_api/sparknlp.annotator.spell_check.norvig_sweeting", "_api/sparknlp.annotator.spell_check.symmetric_delete", "_api/sparknlp.annotator.stemmer", "_api/sparknlp.annotator.stop_words_cleaner", "_api/sparknlp.annotator.tf_ner_dl_graph_builder", "_api/sparknlp.annotator.token", "_api/sparknlp.annotator.token.chunk_tokenizer", "_api/sparknlp.annotator.token.recursive_tokenizer", "_api/sparknlp.annotator.token.regex_tokenizer", "_api/sparknlp.annotator.token.tokenizer", "_api/sparknlp.annotator.token2_chunk", "_api/sparknlp.annotator.ws", "_api/sparknlp.annotator.ws.word_segmenter", "_api/sparknlp.base", "_api/sparknlp.base.audio_assembler", "_api/sparknlp.base.doc2_chunk", "_api/sparknlp.base.document_assembler", "_api/sparknlp.base.embeddings_finisher", "_api/sparknlp.base.finisher", "_api/sparknlp.base.graph_finisher", "_api/sparknlp.base.has_recursive_fit", "_api/sparknlp.base.has_recursive_transform", "_api/sparknlp.base.image_assembler", "_api/sparknlp.base.light_pipeline", "_api/sparknlp.base.multi_document_assembler", "_api/sparknlp.base.prompt_assembler", "_api/sparknlp.base.recursive_pipeline", "_api/sparknlp.base.table_assembler", "_api/sparknlp.base.token_assembler", "_api/sparknlp.common", "_api/sparknlp.common.annotator_approach", "_api/sparknlp.common.annotator_model", "_api/sparknlp.common.annotator_properties", "_api/sparknlp.common.annotator_type", "_api/sparknlp.common.coverage_result", "_api/sparknlp.common.match_strategy", "_api/sparknlp.common.properties", "_api/sparknlp.common.read_as", "_api/sparknlp.common.recursive_annotator_approach", "_api/sparknlp.common.storage", "_api/sparknlp.common.utils", "_api/sparknlp.functions", "_api/sparknlp.internal", "_api/sparknlp.internal.annotator_java_ml", "_api/sparknlp.internal.annotator_transformer", "_api/sparknlp.internal.extended_java_wrapper", "_api/sparknlp.internal.params_getters_setters", "_api/sparknlp.internal.recursive", "_api/sparknlp.logging", "_api/sparknlp.logging.comet", "_api/sparknlp.pretrained", "_api/sparknlp.pretrained.pretrained_pipeline", "_api/sparknlp.pretrained.resource_downloader", "_api/sparknlp.pretrained.utils", "_api/sparknlp.reader", "_api/sparknlp.reader.enums", "_api/sparknlp.reader.pdf_to_text", "_api/sparknlp.reader.sparknlp_reader", "_api/sparknlp.training", "_api/sparknlp.training.conll", "_api/sparknlp.training.conllu", "_api/sparknlp.training.pos", "_api/sparknlp.training.pub_tator", "_api/sparknlp.training.spacy_to_annotation", "_api/sparknlp.training.tfgraphs", "_api/sparknlp.upload_to_hub", "_api/sparknlp.util", "getting_started/index", "index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["_api/modules.rst", "_api/sparknlp.rst", "_api/sparknlp.annotation.rst", "_api/sparknlp.annotation_audio.rst", "_api/sparknlp.annotation_image.rst", "_api/sparknlp.annotator.rst", "_api/sparknlp.annotator.audio.rst", "_api/sparknlp.annotator.audio.hubert_for_ctc.rst", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc.rst", "_api/sparknlp.annotator.audio.whisper_for_ctc.rst", "_api/sparknlp.annotator.chunk2_doc.rst", "_api/sparknlp.annotator.chunker.rst", "_api/sparknlp.annotator.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.sentiment_dl.rst", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification.rst", "_api/sparknlp.annotator.cleaners.rst", "_api/sparknlp.annotator.cleaners.cleaner.rst", "_api/sparknlp.annotator.cleaners.extractor.rst", "_api/sparknlp.annotator.coref.rst", "_api/sparknlp.annotator.coref.spanbert_coref.rst", "_api/sparknlp.annotator.cv.rst", "_api/sparknlp.annotator.cv.blip_for_question_answering.rst", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification.rst", "_api/sparknlp.annotator.cv.convnext_for_image_classification.rst", "_api/sparknlp.annotator.cv.gemma3_for_multimodal.rst", "_api/sparknlp.annotator.cv.janus_for_multimodal.rst", "_api/sparknlp.annotator.cv.llava_for_multimodal.rst", "_api/sparknlp.annotator.cv.mllama_for_multimodal.rst", "_api/sparknlp.annotator.cv.paligemma_for_multimodal.rst", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal.rst", "_api/sparknlp.annotator.cv.qwen2vl_transformer.rst", "_api/sparknlp.annotator.cv.smolvlm_transformer.rst", "_api/sparknlp.annotator.cv.swin_for_image_classification.rst", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.rst", "_api/sparknlp.annotator.cv.vit_for_image_classification.rst", "_api/sparknlp.annotator.date2_chunk.rst", "_api/sparknlp.annotator.dependency.rst", "_api/sparknlp.annotator.dependency.dependency_parser.rst", "_api/sparknlp.annotator.dependency.typed_dependency_parser.rst", "_api/sparknlp.annotator.document_character_text_splitter.rst", "_api/sparknlp.annotator.document_normalizer.rst", "_api/sparknlp.annotator.document_token_splitter.rst", "_api/sparknlp.annotator.document_token_splitter_test.rst", "_api/sparknlp.annotator.embeddings.rst", "_api/sparknlp.annotator.embeddings.albert_embeddings.rst", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.bge_embeddings.rst", "_api/sparknlp.annotator.embeddings.camembert_embeddings.rst", "_api/sparknlp.annotator.embeddings.chunk_embeddings.rst", "_api/sparknlp.annotator.embeddings.deberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.doc2vec.rst", "_api/sparknlp.annotator.embeddings.e5_embeddings.rst", "_api/sparknlp.annotator.embeddings.elmo_embeddings.rst", "_api/sparknlp.annotator.embeddings.instructor_embeddings.rst", "_api/sparknlp.annotator.embeddings.longformer_embeddings.rst", "_api/sparknlp.annotator.embeddings.mpnet_embeddings.rst", "_api/sparknlp.annotator.embeddings.mxbai_embeddings.rst", "_api/sparknlp.annotator.embeddings.nomic_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.snowflake_embeddings.rst", "_api/sparknlp.annotator.embeddings.uae_embeddings.rst", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder.rst", "_api/sparknlp.annotator.embeddings.word2vec.rst", "_api/sparknlp.annotator.embeddings.word_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlnet_embeddings.rst", "_api/sparknlp.annotator.er.rst", "_api/sparknlp.annotator.er.entity_ruler.rst", "_api/sparknlp.annotator.graph_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction.rst", "_api/sparknlp.annotator.ld_dl.rst", "_api/sparknlp.annotator.ld_dl.language_detector_dl.rst", "_api/sparknlp.annotator.lemmatizer.rst", "_api/sparknlp.annotator.matcher.rst", "_api/sparknlp.annotator.matcher.big_text_matcher.rst", "_api/sparknlp.annotator.matcher.date_matcher.rst", "_api/sparknlp.annotator.matcher.multi_date_matcher.rst", "_api/sparknlp.annotator.matcher.regex_matcher.rst", "_api/sparknlp.annotator.matcher.text_matcher.rst", "_api/sparknlp.annotator.n_gram_generator.rst", "_api/sparknlp.annotator.ner.rst", "_api/sparknlp.annotator.ner.ner_approach.rst", "_api/sparknlp.annotator.ner.ner_converter.rst", "_api/sparknlp.annotator.ner.ner_crf.rst", "_api/sparknlp.annotator.ner.ner_dl.rst", "_api/sparknlp.annotator.ner.ner_overwriter.rst", "_api/sparknlp.annotator.ner.zero_shot_ner_model.rst", "_api/sparknlp.annotator.normalizer.rst", "_api/sparknlp.annotator.openai.rst", "_api/sparknlp.annotator.openai.openai_completion.rst", "_api/sparknlp.annotator.openai.openai_embeddings.rst", "_api/sparknlp.annotator.param.rst", "_api/sparknlp.annotator.param.classifier_encoder.rst", "_api/sparknlp.annotator.param.evaluation_dl_params.rst", "_api/sparknlp.annotator.pos.rst", "_api/sparknlp.annotator.pos.perceptron.rst", "_api/sparknlp.annotator.sentence.rst", "_api/sparknlp.annotator.sentence.sentence_detector.rst", "_api/sparknlp.annotator.sentence.sentence_detector_dl.rst", "_api/sparknlp.annotator.sentiment.rst", "_api/sparknlp.annotator.sentiment.sentiment_detector.rst", "_api/sparknlp.annotator.sentiment.vivekn_sentiment.rst", "_api/sparknlp.annotator.seq2seq.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_model.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model.rst", "_api/sparknlp.annotator.seq2seq.bart_transformer.rst", "_api/sparknlp.annotator.seq2seq.cohere_transformer.rst", "_api/sparknlp.annotator.seq2seq.cpm_transformer.rst", "_api/sparknlp.annotator.seq2seq.gpt2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama3_transformer.rst", "_api/sparknlp.annotator.seq2seq.m2m100_transformer.rst", "_api/sparknlp.annotator.seq2seq.marian_transformer.rst", "_api/sparknlp.annotator.seq2seq.mistral_transformer.rst", "_api/sparknlp.annotator.seq2seq.nllb_transformer.rst", "_api/sparknlp.annotator.seq2seq.olmo_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi2_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi3_transformer.rst", "_api/sparknlp.annotator.seq2seq.qwen_transformer.rst", "_api/sparknlp.annotator.seq2seq.starcoder_transformer.rst", "_api/sparknlp.annotator.seq2seq.t5_transformer.rst", "_api/sparknlp.annotator.similarity.rst", "_api/sparknlp.annotator.similarity.document_similarity_ranker.rst", "_api/sparknlp.annotator.spell_check.rst", "_api/sparknlp.annotator.spell_check.context_spell_checker.rst", "_api/sparknlp.annotator.spell_check.norvig_sweeting.rst", "_api/sparknlp.annotator.spell_check.symmetric_delete.rst", "_api/sparknlp.annotator.stemmer.rst", "_api/sparknlp.annotator.stop_words_cleaner.rst", "_api/sparknlp.annotator.tf_ner_dl_graph_builder.rst", "_api/sparknlp.annotator.token.rst", "_api/sparknlp.annotator.token.chunk_tokenizer.rst", "_api/sparknlp.annotator.token.recursive_tokenizer.rst", "_api/sparknlp.annotator.token.regex_tokenizer.rst", "_api/sparknlp.annotator.token.tokenizer.rst", "_api/sparknlp.annotator.token2_chunk.rst", "_api/sparknlp.annotator.ws.rst", "_api/sparknlp.annotator.ws.word_segmenter.rst", "_api/sparknlp.base.rst", "_api/sparknlp.base.audio_assembler.rst", "_api/sparknlp.base.doc2_chunk.rst", "_api/sparknlp.base.document_assembler.rst", "_api/sparknlp.base.embeddings_finisher.rst", "_api/sparknlp.base.finisher.rst", "_api/sparknlp.base.graph_finisher.rst", "_api/sparknlp.base.has_recursive_fit.rst", "_api/sparknlp.base.has_recursive_transform.rst", "_api/sparknlp.base.image_assembler.rst", "_api/sparknlp.base.light_pipeline.rst", "_api/sparknlp.base.multi_document_assembler.rst", "_api/sparknlp.base.prompt_assembler.rst", "_api/sparknlp.base.recursive_pipeline.rst", "_api/sparknlp.base.table_assembler.rst", "_api/sparknlp.base.token_assembler.rst", "_api/sparknlp.common.rst", "_api/sparknlp.common.annotator_approach.rst", "_api/sparknlp.common.annotator_model.rst", "_api/sparknlp.common.annotator_properties.rst", "_api/sparknlp.common.annotator_type.rst", "_api/sparknlp.common.coverage_result.rst", "_api/sparknlp.common.match_strategy.rst", "_api/sparknlp.common.properties.rst", "_api/sparknlp.common.read_as.rst", "_api/sparknlp.common.recursive_annotator_approach.rst", "_api/sparknlp.common.storage.rst", "_api/sparknlp.common.utils.rst", "_api/sparknlp.functions.rst", "_api/sparknlp.internal.rst", "_api/sparknlp.internal.annotator_java_ml.rst", "_api/sparknlp.internal.annotator_transformer.rst", "_api/sparknlp.internal.extended_java_wrapper.rst", "_api/sparknlp.internal.params_getters_setters.rst", "_api/sparknlp.internal.recursive.rst", "_api/sparknlp.logging.rst", "_api/sparknlp.logging.comet.rst", "_api/sparknlp.pretrained.rst", "_api/sparknlp.pretrained.pretrained_pipeline.rst", "_api/sparknlp.pretrained.resource_downloader.rst", "_api/sparknlp.pretrained.utils.rst", "_api/sparknlp.reader.rst", "_api/sparknlp.reader.enums.rst", "_api/sparknlp.reader.pdf_to_text.rst", "_api/sparknlp.reader.sparknlp_reader.rst", "_api/sparknlp.training.rst", "_api/sparknlp.training.conll.rst", "_api/sparknlp.training.conllu.rst", "_api/sparknlp.training.pos.rst", "_api/sparknlp.training.pub_tator.rst", "_api/sparknlp.training.spacy_to_annotation.rst", "_api/sparknlp.training.tfgraphs.rst", "_api/sparknlp.upload_to_hub.rst", "_api/sparknlp.util.rst", "getting_started/index.rst", "index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["sparknlp", "sparknlp package", "sparknlp.annotation module", "sparknlp.annotation_audio module", "sparknlp.annotation_image module", "sparknlp.annotator package", "sparknlp.annotator.audio package", "sparknlp.annotator.audio.hubert_for_ctc module", "sparknlp.annotator.audio.wav2vec2_for_ctc module", "sparknlp.annotator.audio.whisper_for_ctc module", "sparknlp.annotator.chunk2_doc module", "sparknlp.annotator.chunker module", "sparknlp.annotator.classifier_dl package", "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.albert_for_question_answering module", "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.albert_for_token_classification module", "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.bert_for_question_answering module", "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.bert_for_token_classification module", "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.camembert_for_question_answering module", "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.camembert_for_token_classification module", "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.classifier_dl module", "sparknlp.annotator.classifier_dl.deberta_for_question_answering module", "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.deberta_for_token_classification module", "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module", "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.longformer_for_question_answering module", "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module", "sparknlp.annotator.classifier_dl.longformer_for_token_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module", "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module", "sparknlp.annotator.classifier_dl.multi_classifier_dl module", "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.sentiment_dl module", "sparknlp.annotator.classifier_dl.tapas_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module", "sparknlp.annotator.cleaners package", "sparknlp.annotator.cleaners.cleaner module", "sparknlp.annotator.cleaners.extractor module", "sparknlp.annotator.coref package", "sparknlp.annotator.coref.spanbert_coref module", "sparknlp.annotator.cv package", "sparknlp.annotator.cv.blip_for_question_answering module", "sparknlp.annotator.cv.clip_for_zero_shot_classification module", "sparknlp.annotator.cv.convnext_for_image_classification module", "sparknlp.annotator.cv.gemma3_for_multimodal module", "sparknlp.annotator.cv.janus_for_multimodal module", "sparknlp.annotator.cv.llava_for_multimodal module", "sparknlp.annotator.cv.mllama_for_multimodal module", "sparknlp.annotator.cv.paligemma_for_multimodal module", "sparknlp.annotator.cv.phi3_vision_for_multimodal module", "sparknlp.annotator.cv.qwen2vl_transformer module", "sparknlp.annotator.cv.smolvlm_transformer module", "sparknlp.annotator.cv.swin_for_image_classification module", "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module", "sparknlp.annotator.cv.vit_for_image_classification module", "sparknlp.annotator.date2_chunk module", "sparknlp.annotator.dependency package", "sparknlp.annotator.dependency.dependency_parser module", "sparknlp.annotator.dependency.typed_dependency_parser module", "sparknlp.annotator.document_character_text_splitter module", "sparknlp.annotator.document_normalizer module", "sparknlp.annotator.document_token_splitter module", "sparknlp.annotator.document_token_splitter_test module", "sparknlp.annotator.embeddings package", "sparknlp.annotator.embeddings.albert_embeddings module", "sparknlp.annotator.embeddings.auto_gguf_embeddings module", "sparknlp.annotator.embeddings.bert_embeddings module", "sparknlp.annotator.embeddings.bert_sentence_embeddings module", "sparknlp.annotator.embeddings.bge_embeddings module", "sparknlp.annotator.embeddings.camembert_embeddings module", "sparknlp.annotator.embeddings.chunk_embeddings module", "sparknlp.annotator.embeddings.deberta_embeddings module", "sparknlp.annotator.embeddings.distil_bert_embeddings module", "sparknlp.annotator.embeddings.doc2vec module", "sparknlp.annotator.embeddings.e5_embeddings module", "sparknlp.annotator.embeddings.elmo_embeddings module", "sparknlp.annotator.embeddings.instructor_embeddings module", "sparknlp.annotator.embeddings.longformer_embeddings module", "sparknlp.annotator.embeddings.mpnet_embeddings module", "sparknlp.annotator.embeddings.mxbai_embeddings module", "sparknlp.annotator.embeddings.nomic_embeddings module", "sparknlp.annotator.embeddings.roberta_embeddings module", "sparknlp.annotator.embeddings.roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.sentence_embeddings module", "sparknlp.annotator.embeddings.snowflake_embeddings module", "sparknlp.annotator.embeddings.uae_embeddings module", "sparknlp.annotator.embeddings.universal_sentence_encoder module", "sparknlp.annotator.embeddings.word2vec module", "sparknlp.annotator.embeddings.word_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.xlnet_embeddings module", "sparknlp.annotator.er package", "sparknlp.annotator.er.entity_ruler module", "sparknlp.annotator.graph_extraction module", "sparknlp.annotator.keyword_extraction package", "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module", "sparknlp.annotator.ld_dl package", "sparknlp.annotator.ld_dl.language_detector_dl module", "sparknlp.annotator.lemmatizer module", "sparknlp.annotator.matcher package", "sparknlp.annotator.matcher.big_text_matcher module", "sparknlp.annotator.matcher.date_matcher module", "sparknlp.annotator.matcher.multi_date_matcher module", "sparknlp.annotator.matcher.regex_matcher module", "sparknlp.annotator.matcher.text_matcher module", "sparknlp.annotator.n_gram_generator module", "sparknlp.annotator.ner package", "sparknlp.annotator.ner.ner_approach module", "sparknlp.annotator.ner.ner_converter module", "sparknlp.annotator.ner.ner_crf module", "sparknlp.annotator.ner.ner_dl module", "sparknlp.annotator.ner.ner_overwriter module", "sparknlp.annotator.ner.zero_shot_ner_model module", "sparknlp.annotator.normalizer module", "sparknlp.annotator.openai package", "sparknlp.annotator.openai.openai_completion module", "sparknlp.annotator.openai.openai_embeddings module", "sparknlp.annotator.param package", "sparknlp.annotator.param.classifier_encoder module", "sparknlp.annotator.param.evaluation_dl_params module", "sparknlp.annotator.pos package", "sparknlp.annotator.pos.perceptron module", "sparknlp.annotator.sentence package", "sparknlp.annotator.sentence.sentence_detector module", "sparknlp.annotator.sentence.sentence_detector_dl module", "sparknlp.annotator.sentiment package", "sparknlp.annotator.sentiment.sentiment_detector module", "sparknlp.annotator.sentiment.vivekn_sentiment module", "sparknlp.annotator.seq2seq package", "sparknlp.annotator.seq2seq.auto_gguf_model module", "sparknlp.annotator.seq2seq.auto_gguf_vision_model module", "sparknlp.annotator.seq2seq.bart_transformer module", "sparknlp.annotator.seq2seq.cohere_transformer module", "sparknlp.annotator.seq2seq.cpm_transformer module", "sparknlp.annotator.seq2seq.gpt2_transformer module", "sparknlp.annotator.seq2seq.llama2_transformer module", "sparknlp.annotator.seq2seq.llama3_transformer module", "sparknlp.annotator.seq2seq.m2m100_transformer module", "sparknlp.annotator.seq2seq.marian_transformer module", "sparknlp.annotator.seq2seq.mistral_transformer module", "sparknlp.annotator.seq2seq.nllb_transformer module", "sparknlp.annotator.seq2seq.olmo_transformer module", "sparknlp.annotator.seq2seq.phi2_transformer module", "sparknlp.annotator.seq2seq.phi3_transformer module", "sparknlp.annotator.seq2seq.qwen_transformer module", "sparknlp.annotator.seq2seq.starcoder_transformer module", "sparknlp.annotator.seq2seq.t5_transformer module", "sparknlp.annotator.similarity package", "sparknlp.annotator.similarity.document_similarity_ranker module", "sparknlp.annotator.spell_check package", "sparknlp.annotator.spell_check.context_spell_checker module", "sparknlp.annotator.spell_check.norvig_sweeting module", "sparknlp.annotator.spell_check.symmetric_delete module", "sparknlp.annotator.stemmer module", "sparknlp.annotator.stop_words_cleaner module", "sparknlp.annotator.tf_ner_dl_graph_builder module", "sparknlp.annotator.token package", "sparknlp.annotator.token.chunk_tokenizer module", "sparknlp.annotator.token.recursive_tokenizer module", "sparknlp.annotator.token.regex_tokenizer module", "sparknlp.annotator.token.tokenizer module", "sparknlp.annotator.token2_chunk module", "sparknlp.annotator.ws package", "sparknlp.annotator.ws.word_segmenter module", "sparknlp.base package", "sparknlp.base.audio_assembler module", "sparknlp.base.doc2_chunk module", "sparknlp.base.document_assembler module", "sparknlp.base.embeddings_finisher module", "sparknlp.base.finisher module", "sparknlp.base.graph_finisher module", "sparknlp.base.has_recursive_fit module", "sparknlp.base.has_recursive_transform module", "sparknlp.base.image_assembler module", "sparknlp.base.light_pipeline module", "sparknlp.base.multi_document_assembler module", "sparknlp.base.prompt_assembler module", "sparknlp.base.recursive_pipeline module", "sparknlp.base.table_assembler module", "sparknlp.base.token_assembler module", "sparknlp.common package", "sparknlp.common.annotator_approach module", "sparknlp.common.annotator_model module", "sparknlp.common.annotator_properties module", "sparknlp.common.annotator_type module", "sparknlp.common.coverage_result module", "sparknlp.common.match_strategy module", "sparknlp.common.properties module", "sparknlp.common.read_as module", "sparknlp.common.recursive_annotator_approach module", "sparknlp.common.storage module", "sparknlp.common.utils module", "sparknlp.functions module", "sparknlp.internal package", "sparknlp.internal.annotator_java_ml module", "sparknlp.internal.annotator_transformer module", "sparknlp.internal.extended_java_wrapper module", "sparknlp.internal.params_getters_setters module", "sparknlp.internal.recursive module", "sparknlp.logging package", "sparknlp.logging.comet module", "sparknlp.pretrained package", "sparknlp.pretrained.pretrained_pipeline module", "sparknlp.pretrained.resource_downloader module", "sparknlp.pretrained.utils module", "sparknlp.reader package", "sparknlp.reader.enums module", "sparknlp.reader.pdf_to_text module", "sparknlp.reader.sparknlp_reader module", "sparknlp.training package", "sparknlp.training.conll module", "sparknlp.training.conllu module", "sparknlp.training.pos module", "sparknlp.training.pub_tator module", "sparknlp.training.spacy_to_annotation module", "sparknlp.training.tfgraphs module", "sparknlp.upload_to_hub module", "sparknlp.util module", "Getting Started", "Spark NLP Documentation", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"6": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "packag": [0, 88, 89, 95, 154, 155, 225, 243, 247, 248], "subpackag": 0, "annot": [0, 1, 3, 4, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 216, 217, 218, 219, 220, 223, 225, 226, 227, 228, 229, 237, 239, 244, 246, 247, 252, 253, 254, 255, 256], "submodul": 0, "modul": [0, 244], "content": [0, 65, 70, 71, 72, 73, 74, 75, 95, 112, 152, 191, 233, 237, 249, 255], "base": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 225, 227, 228, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 246, 250, 251, 254], "common": [0, 1, 50, 109, 117, 126, 141, 167, 168, 170, 182, 191, 253], "intern": [0, 1, 99, 168, 171, 175, 185, 188, 203], "log": [0, 1, 28, 44, 50, 135, 140, 144, 149, 159, 166, 244], "pretrain": [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 129, 131, 134, 135, 136, 137, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 181, 185, 187, 188, 193, 194, 199, 217, 225, 244, 246, 249, 253], "reader": [0, 1, 228], "train": [0, 1, 7, 9, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 69, 76, 78, 81, 82, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 106, 110, 111, 113, 114, 115, 120, 122, 123, 125, 128, 129, 132, 134, 135, 138, 143, 144, 146, 149, 151, 152, 156, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 173, 175, 176, 177, 182, 183, 188, 191, 199, 212, 215, 225, 227, 244, 246, 250, 251, 253, 254], "annotation_audio": [0, 1], "annotationaudio": [0, 1, 3], "annotation_imag": [0, 1], "annotationimag": [0, 1, 4, 155, 199, 227], "function": [0, 1, 71, 75, 99, 109, 112, 155, 156, 171, 193, 228, 244, 245, 253], "explode_annotations_col": [0, 1, 217], "filter_by_annotations_col": [0, 1, 217], "map_annot": [0, 1, 217], "map_annotations_arrai": [0, 1, 217], "map_annotations_col": [0, 1, 217], "map_annotations_strict": [0, 1, 217], "upload_to_hub": [0, 1], "pushtohub": [0, 1, 241], "util": [0, 1, 7, 69, 94, 134, 137, 148, 149, 164, 177, 202, 205, 210, 213, 215, 219, 222, 226], "conllgener": [0, 1, 242], "get_config_path": [0, 1, 242], "read": [0, 1, 28, 50, 65, 66, 67, 71, 76, 77, 78, 81, 82, 97, 111, 120, 123, 125, 126, 127, 128, 129, 134, 137, 138, 144, 149, 151, 159, 175, 176, 177, 185, 188, 190, 192, 198, 200, 213, 215, 216, 218, 219, 225, 228, 230, 233, 235, 236, 237, 238, 246, 250, 256], "start": [0, 1, 7, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 101, 118, 120, 134, 135, 149, 154, 155, 191, 212, 225, 244, 246, 249, 251, 254, 255], "version": [0, 1, 9, 84, 92, 96, 98, 102, 161, 168, 169, 201, 223, 227, 228, 243, 250, 255], "audio": [1, 3, 5, 190, 205, 209, 225], "classifier_dl": [1, 5], "cleaner": [1, 5], "coref": [1, 5], "cv": [1, 5], "depend": [1, 2, 5, 63, 93, 102, 107, 115, 117, 118, 120, 122, 135, 163, 175, 188, 205, 209, 212, 241, 243], "embed": [1, 2, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 68, 72, 75, 118, 134, 135, 136, 141, 154, 155, 158, 173, 192, 193, 194, 199, 200, 205, 212, 217, 223, 227, 241, 249], "er": [1, 5], "keyword_extract": [1, 5], "ld_dl": [1, 5], "matcher": [1, 5], "ner": [1, 5, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 113, 114, 118, 182, 199, 217, 225, 227, 246], "openai": [1, 5, 104, 159], "param": [1, 5, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 183, 184, 185, 188, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 208, 212, 215, 222, 223, 232, 233, 239], "po": [1, 2, 5, 11, 15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 81, 82, 118, 131, 134, 135, 183, 188, 199, 205, 209, 217, 227, 234, 235, 249, 253, 254, 255], "sentenc": [1, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 79, 81, 82, 84, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 141, 146, 152, 156, 163, 171, 173, 175, 179, 182, 184, 186, 188, 192, 194, 199, 200, 203, 204, 212, 227, 235, 236, 237, 238, 239, 241, 250, 254, 255], "sentiment": [1, 2, 5, 28, 44, 50, 99, 115, 171, 205, 209, 241, 250, 251], "seq2seq": [1, 5], "similar": [1, 5, 66, 88, 100, 109, 110, 120, 122, 155, 170], "spell_check": [1, 5], "token": [1, 2, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 68, 69, 70, 71, 72, 73, 74, 75, 77, 81, 82, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 123, 124, 125, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 143, 144, 146, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 186, 188, 191, 193, 199, 202, 204, 205, 209, 212, 227, 235, 238, 239, 241, 250, 254, 255], "w": [1, 5, 117, 128, 134, 138, 183, 185], "chunk2_doc": [1, 5], "chunk2doc": [1, 5, 10, 191], "chunker": [1, 5, 94], "date2_chunk": [1, 5], "date2chunk": [1, 5, 79], "document_character_text_splitt": [1, 5], "documentcharactertextsplitt": [1, 5, 83], "document_norm": [1, 5], "documentnorm": [1, 5, 83, 84, 85], "document_token_splitt": [1, 5], "documenttokensplitt": [1, 5, 85], "document_token_splitter_test": [1, 5], "graph_extract": [1, 5], "graphextract": [1, 5, 118, 195], "lemmat": [1, 5, 151, 179, 202, 204, 241], "lemmatizermodel": [1, 5, 123], "n_gram_gener": [1, 5], "ngramgener": [1, 5, 94, 130], "normal": [1, 5, 28, 67, 76, 77, 78, 84, 125, 149, 152, 179, 193, 202, 204, 212, 250, 251], "normalizermodel": [1, 5, 138], "stemmer": [1, 5, 179], "stop_words_clean": [1, 5], "stopwordsclean": [1, 5, 179, 193, 204], "tf_ner_dl_graph_build": [1, 5], "tfnerdlgraphbuild": [1, 5, 180], "tfnerdlgraphbuildermodel": [1, 5, 180], "token2_chunk": [1, 5], "token2chunk": [1, 5, 186], "audio_assembl": [1, 7, 8, 9, 189], "audioassembl": [1, 7, 8, 9, 189, 190], "doc2_chunk": [1, 189], "doc2chunk": [1, 10, 189, 191], "document_assembl": [1, 51, 137, 173, 189, 203], "documentassembl": [1, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 200, 202, 203, 204, 225, 235, 246, 250], "embeddings_finish": [1, 189], "embeddingsfinish": [1, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 189, 193], "finish": [1, 152, 173, 189, 193, 195, 200, 202], "graph_finish": [1, 189], "graphfinish": [1, 118, 189, 195], "has_recursive_fit": [1, 189], "hasrecursivefit": [1, 189, 196, 197], "has_recursive_transform": [1, 189], "hasrecursivetransform": [1, 189, 197], "image_assembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 155, 189], "imageassembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 155, 189, 198], "light_pipelin": [1, 189], "lightpipelin": [1, 189, 199, 227, 254], "multi_document_assembl": [1, 189], "multidocumentassembl": [1, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 189, 200], "prompt_assembl": [1, 189], "promptassembl": [1, 189, 201], "recursive_pipelin": [1, 189, 223], "recursivepipelin": [1, 189, 196, 197, 202, 208], "recursivepipelinemodel": [1, 189, 202], "table_assembl": [1, 51, 189], "tableassembl": [1, 51, 189, 203], "token_assembl": [1, 189], "tokenassembl": [1, 189, 204], "annotator_approach": [1, 205], "annotatorapproach": [1, 28, 44, 50, 81, 82, 97, 111, 112, 117, 123, 125, 128, 129, 134, 135, 138, 146, 149, 151, 152, 173, 175, 176, 177, 183, 185, 188, 205, 206, 214, 225], "annotator_model": [1, 205], "annotatormodel": [1, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 138, 140, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 183, 184, 185, 186, 188, 199, 203, 205, 207, 208, 228], "annotator_properti": [1, 205], "annotatorproperti": [1, 10, 191, 204, 205, 206, 207, 208, 214], "annotator_typ": [1, 2, 3, 4, 205], "annotatortyp": [1, 2, 3, 4, 22, 94, 130, 191, 192, 198, 200, 205, 209, 217, 249], "coverage_result": [1, 205], "coverageresult": [1, 112, 205, 210], "match_strategi": [1, 205], "matchstrategi": [1, 126, 205, 211], "properti": [1, 88, 168, 196, 197, 205, 208], "hasaudiofeatureproperti": [1, 7, 8, 9, 205, 212], "hasbatchedannot": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 135, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "hasbatchedannotateaudio": [1, 7, 8, 9, 205, 212], "hasbatchedannotateimag": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 205, 212], "hascandidatelabelsproperti": [1, 17, 18, 23, 27, 32, 36, 49, 56, 65, 66, 69, 70, 71, 72, 73, 74, 75, 205, 212], "hascasesensitiveproperti": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 205, 212, 215], "hasclassifieractivationproperti": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 205, 212], "hasclstokenproperti": [1, 92, 205, 212], "hasembeddingsproperti": [1, 63, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 173, 205, 212], "hasenablecachingproperti": [1, 97, 111, 173, 205, 212], "hasengin": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 88, 91, 93, 95, 96, 99, 101, 105, 106, 110, 113, 114, 115, 122, 135, 137, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 205, 212], "hasgeneratorproperti": [1, 9, 68, 77, 205, 212], "hasimagefeatureproperti": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 205, 212], "hasllamacppproperti": [1, 154, 155, 205, 212], "haslongmaxsentencelengthlimit": [1, 38, 39, 40, 101, 205, 212], "hasmaxsentencelengthlimit": [1, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 47, 52, 53, 54, 55, 57, 58, 63, 88, 90, 91, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 205, 212], "hasrescalefactor": [1, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 205, 212], "read_a": [1, 81, 82, 117, 123, 125, 128, 129, 134, 138, 144, 151, 176, 177, 185, 205, 215, 216, 235, 236], "reada": [1, 81, 82, 112, 117, 123, 125, 128, 129, 134, 138, 144, 151, 176, 177, 182, 185, 205, 213, 215, 216, 235, 236], "recursive_annotator_approach": [1, 205], "recursiveannotatorapproach": [1, 205, 214], "storag": [1, 112, 117, 125, 205], "hasstorag": [1, 112, 117, 125, 205, 215], "hasstoragemodel": [1, 112, 117, 125, 205, 215], "hasstorageopt": [1, 205, 215], "hasstorageref": [1, 28, 44, 50, 63, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 122, 135, 205, 215], "externalresourc": [1, 125, 129, 205, 216], "regexrul": [1, 205, 216], "annotator_java_ml": [1, 218], "annotatorjavamlread": [1, 206, 207, 214, 218, 219, 220], "annotator_transform": [1, 218], "annotatortransform": [1, 10, 173, 190, 191, 192, 193, 194, 195, 198, 200, 201, 204, 218, 220], "extended_java_wrapp": [1, 218], "extendedjavawrapp": [1, 218, 221, 233, 235, 236, 237, 238, 239], "params_getters_sett": [1, 218], "paramsgetterssett": [1, 143, 144, 206, 207, 214, 218, 220, 222], "recurs": [1, 183, 202, 214, 218], "recursiveestim": [1, 196, 214, 218, 223], "recursivetransform": [1, 197, 218, 223], "comet": [1, 224, 248], "cometlogg": [1, 224, 225, 246], "pretrained_pipelin": [1, 226], "pretrainedpipelin": [1, 10, 194, 199, 217, 226, 227, 249, 254, 255], "resource_download": [1, 226], "resourcedownload": [1, 226, 228, 250, 255], "printprogress": [1, 226, 229], "enum": [1, 230], "textstrippertyp": [1, 230, 231], "pdf_to_text": [1, 230], "pdftotext": [1, 230, 232], "sparknlp_read": [1, 230], "sparknlpread": [1, 230, 233], "conll": [1, 81, 82, 134, 135, 234, 236, 253], "conllu": [1, 80, 81, 82, 123, 234, 253], "pub_tat": [1, 234], "pubtat": [1, 234, 238, 253], "spacy_to_annot": [1, 234], "spacytoannot": [1, 234, 239], "tfgraph": [1, 234], "arraytyp": [1, 2, 191, 217], "copi": [1, 2, 3, 4, 228], "datatyp": [1, 2, 217], "fromrow": [1, 2], "torow": [1, 2], "check_for_required_info": [1, 241], "create_doc": [1, 241], "list_of_task": [1, 241], "push_to_hub": [1, 241], "unzip_directori": [1, 241], "zip_directori": [1, 241], "exportconllfil": [1, 242], "none": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 128, 129, 134, 135, 137, 138, 140, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 185, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 207, 208, 220, 223, 225, 227, 228, 233, 239, 241, 251], "sourc": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 247], "gpu": [1, 77, 88, 89, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 212], "fals": [1, 2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 191, 192, 193, 194, 195, 199, 200, 203, 204, 212, 217, 225, 227, 233, 235, 236, 237, 239, 246, 249, 250, 251, 256], "apple_silicon": 1, "aarch64": 1, "memori": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 88, 89, 99, 112, 154, 155, 212, 215, 243], "16g": [1, 243], "cache_fold": 1, "log_fold": 1, "cluster_tmp_dir": 1, "real_time_output": 1, "output_level": 1, "pyspark": [1, 2, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 134, 135, 136, 138, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 198, 199, 200, 203, 204, 215, 217, 221, 223, 225, 227, 233, 235, 236, 237, 238, 243, 250, 251], "instanc": [1, 44, 137, 219], "default": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 143, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 180, 183, 184, 185, 188, 191, 192, 193, 194, 195, 198, 199, 200, 203, 208, 212, 216, 217, 225, 227, 228, 235, 236, 237, 238, 250], "paramet": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 208, 212, 215, 216, 217, 222, 223, 225, 227, 228, 233, 235, 236, 237, 238], "spark": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 141, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 213, 215, 217, 218, 220, 221, 225, 227, 228, 233, 235, 236, 237, 238, 239, 245, 247, 248, 249, 250, 252, 253, 254, 256], "nlp": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 128, 129, 134, 135, 136, 137, 138, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 182, 183, 185, 188, 189, 191, 192, 193, 194, 198, 199, 200, 202, 203, 204, 205, 218, 225, 227, 228, 235, 236, 237, 238, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256], "The": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 140, 141, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 182, 184, 185, 188, 192, 194, 198, 199, 200, 201, 203, 212, 215, 217, 225, 227, 228, 235, 236, 237, 238, 239, 241, 246, 249, 250, 251, 253, 254, 256], "would": [1, 28, 63, 83, 94, 107, 126, 149, 250], "result": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 203, 204, 212, 217, 225, 227, 235, 236, 239, 241, 246, 247, 249, 250, 251, 254, 255], "equival": [1, 17, 18, 23, 27, 32, 36, 49, 56, 199, 254], "sparksess": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 125, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 198, 215, 235, 236, 237, 238, 243], "builder": [1, 180, 243], "appnam": [1, 243], "master": [1, 243], "local": [1, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 120, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 179, 199, 212, 227, 243, 254], "config": [1, 243, 247], "driver": [1, 155, 243], "serial": [1, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 117, 122, 135, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 243], "org": [1, 68, 69, 70, 71, 72, 73, 74, 75, 133, 134, 135, 136, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 188, 199, 212, 217, 227, 233, 235, 243, 247, 256], "apach": [1, 104, 200, 243], "kryoseri": [1, 243], "buffer": [1, 91, 112, 243], "max": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 70, 72, 73, 74, 88, 90, 91, 92, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 120, 173, 177, 212, 243], "2000m": [1, 243], "maxresults": [1, 243], "jar": [1, 243], "com": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 128, 129, 134, 135, 137, 138, 140, 141, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 182, 183, 185, 188, 203, 233, 243], "johnsnowlab": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 128, 129, 134, 135, 137, 138, 140, 141, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 182, 183, 185, 188, 193, 194, 203, 233, 243], "nlp_2": [1, 243], "12": [1, 88, 113, 114, 115, 120, 126, 127, 133, 146, 175, 186, 199, 217, 227, 237, 239, 243, 249], "releas": [1, 9, 84, 88, 93, 95, 104, 105, 106, 113, 114, 156, 157, 160, 161, 166, 167, 169, 170, 171], "getorcr": [1, 243], "bool": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 60, 68, 69, 70, 71, 72, 73, 74, 75, 83, 84, 85, 89, 90, 91, 94, 98, 105, 110, 113, 117, 118, 122, 125, 126, 129, 130, 133, 134, 135, 138, 144, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 179, 184, 185, 188, 191, 193, 194, 195, 199, 201, 203, 208, 212, 215, 225, 227, 228, 235], "option": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 122, 123, 125, 128, 129, 134, 135, 137, 138, 144, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 185, 188, 190, 192, 198, 199, 200, 212, 215, 216, 217, 223, 225, 227, 228, 233, 235, 236, 237, 238, 250], "whether": [1, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 117, 118, 125, 126, 127, 129, 130, 133, 134, 135, 138, 140, 144, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 179, 184, 185, 188, 191, 193, 194, 195, 199, 201, 203, 204, 208, 212, 215, 227, 235, 238, 251], "enabl": [1, 89, 115, 135, 154, 155, 160, 166, 167, 173, 176, 193, 212, 232], "acceler": [1, 77, 99, 115, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171], "must": [1, 89, 97, 111, 123, 125, 128, 129, 140, 144, 151, 152, 154, 155, 176, 177, 191, 212, 217, 225, 235], "set": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 180, 183, 184, 185, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 208, 212, 215, 216, 222, 225, 228, 232, 235, 243, 244, 246, 250, 253, 254], "up": [1, 7, 9, 28, 44, 68, 69, 70, 71, 72, 73, 74, 75, 77, 92, 97, 98, 101, 102, 107, 109, 111, 120, 140, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212, 243, 244, 246, 250, 253, 254], "correctli": 1, "appl": [1, 7, 8, 91, 106, 114], "silicon": [1, 7, 8], "support": [1, 7, 8, 9, 28, 44, 68, 69, 85, 88, 89, 92, 98, 101, 102, 120, 135, 138, 149, 154, 155, 162, 163, 165, 168, 169, 170, 179, 198, 201, 203, 212, 247], "maco": 1, "linux": 1, "str": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 180, 183, 184, 185, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 208, 212, 215, 216, 217, 222, 225, 227, 228, 233, 235, 236, 237, 238, 241], "how": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 81, 82, 83, 85, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 101, 104, 105, 107, 109, 113, 115, 117, 118, 122, 123, 125, 128, 129, 133, 134, 135, 138, 140, 144, 148, 151, 154, 155, 157, 162, 176, 177, 184, 185, 188, 192, 195, 200, 201, 211, 212, 213, 215, 216, 235, 236, 239, 243, 244, 246, 250, 255], "much": [1, 17, 18, 23, 27, 28, 32, 36, 49, 51, 56, 88, 92, 98, 104, 105, 106, 138, 160, 162, 188, 250], "alloc": 1, "locat": [1, 10, 13, 19, 37, 45, 117, 148, 227, 250], "download": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 125, 129, 134, 135, 136, 137, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188, 227, 228, 249, 250, 253, 254], "extract": [1, 10, 11, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 61, 67, 76, 77, 78, 81, 83, 85, 94, 112, 116, 117, 118, 119, 120, 125, 126, 127, 129, 133, 134, 135, 136, 148, 149, 151, 173, 175, 177, 182, 186, 193, 194, 195, 199, 212, 225, 227, 232, 246], "model": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 128, 129, 133, 134, 135, 137, 138, 139, 140, 141, 144, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 180, 182, 183, 185, 188, 201, 207, 212, 215, 223, 225, 227, 228, 241, 244, 246, 247, 249, 253, 255, 256], "pipelin": [1, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 198, 199, 200, 202, 203, 204, 223, 225, 226, 227, 228, 229, 241, 244, 247, 249, 250, 253], "If": [1, 9, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 107, 112, 117, 122, 126, 127, 133, 134, 135, 138, 144, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 180, 199, 212, 223, 225, 228, 243, 246, 248, 250], "user": [1, 71, 74, 133, 134, 139, 140, 141, 154, 155, 158, 161, 164, 185, 201, 202, 212, 225, 233, 244, 246], "home": [1, 120, 233], "directori": [1, 155, 228, 233, 246], "under": [1, 2, 96, 102, 104, 115, 120, 170], "cache_pretrain": 1, "us": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 137, 140, 141, 144, 146, 148, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 180, 184, 185, 186, 188, 191, 192, 193, 194, 199, 200, 201, 202, 203, 204, 211, 212, 217, 225, 227, 228, 232, 233, 235, 236, 237, 238, 244, 247, 248, 249, 250, 251, 253], "cluster": [1, 7, 92, 98, 100, 110, 233], "temporarili": [1, 169], "file": [1, 3, 7, 8, 28, 44, 50, 65, 70, 71, 72, 73, 74, 81, 82, 84, 110, 112, 117, 123, 125, 128, 129, 134, 135, 138, 144, 149, 151, 155, 175, 176, 177, 180, 185, 190, 203, 213, 215, 225, 230, 233, 235, 236, 237, 238, 241, 246, 256], "unpack": 1, "index": [1, 2, 59, 61, 103, 108, 109, 120, 125, 184, 215, 235], "wordembed": [1, 5, 87, 94, 107, 112, 135, 193], "By": [1, 109, 151, 156, 171, 179, 184, 193, 225, 246], "thi": [1, 2, 3, 4, 7, 8, 9, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 123, 125, 126, 128, 129, 130, 133, 134, 135, 136, 138, 140, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 182, 183, 184, 185, 186, 188, 190, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 208, 211, 212, 219, 223, 225, 227, 228, 233, 237, 239, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255], "i": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 180, 182, 183, 184, 185, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 212, 216, 217, 223, 225, 228, 232, 233, 235, 237, 238, 239, 243, 246, 247, 249, 250, 251, 253, 254, 255, 256], "hadoop": 1, "tmp": [1, 190, 198, 246], "dir": [1, 233], "via": [1, 9, 15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 110, 198, 212], "configur": [1, 67, 107, 185, 233, 243], "note": [1, 7, 8, 9, 17, 18, 23, 28, 36, 44, 49, 50, 56, 77, 85, 88, 89, 92, 96, 98, 99, 102, 105, 107, 112, 113, 115, 120, 135, 140, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 199, 212, 215, 233, 243, 255], "s3": [1, 228], "hdf": 1, "dbf": 1, "dict": [1, 2, 3, 4, 81, 82, 117, 123, 125, 128, 129, 134, 136, 137, 138, 140, 144, 151, 175, 176, 177, 185, 199, 212, 216, 223, 225, 227, 233, 241], "custom": [1, 83, 112, 134, 135, 148, 149, 185, 225, 233], "save": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 135, 144, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 215, 225, 246, 250], "from": [1, 2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 202, 203, 204, 212, 217, 221, 225, 227, 228, 232, 233, 235, 236, 237, 238, 239, 244, 246, 249, 250, 251, 254, 255, 256], "dure": [1, 7, 28, 44, 50, 66, 89, 96, 100, 134, 135, 144, 148, 154, 155, 173, 175, 212, 225, 246], "annotator_log": 1, "print": [1, 84, 228], "jvm": [1, 179], "output": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 208, 212, 217, 225, 232, 237, 246, 249, 250, 251], "real": [1, 135, 164, 166, 167, 168, 169, 225, 246], "time": [1, 28, 44, 50, 61, 88, 97, 111, 113, 114, 120, 126, 144, 152, 155, 175, 188, 249, 250, 254, 255], "int": [1, 2, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 118, 120, 122, 126, 130, 132, 134, 135, 138, 140, 143, 144, 146, 148, 149, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 177, 180, 184, 185, 188, 212, 225, 235], "level": [1, 16, 28, 44, 50, 90, 91, 101, 105, 106, 110, 112, 114, 117, 134, 135, 144, 175, 233, 235], "return": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 123, 125, 129, 130, 132, 134, 135, 137, 140, 146, 148, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 183, 185, 188, 191, 198, 199, 212, 215, 216, 217, 219, 223, 227, 228, 233, 235, 236, 237, 238], "initi": [1, 97, 111, 154, 155, 168, 175, 184, 202, 212, 235, 236, 237, 238, 246], "session": [1, 233, 235, 236, 237, 238, 244], "sinc": [1, 84, 102, 120, 159, 160, 243, 250, 251, 255], "python": [1, 122, 233, 244], "deprec": [1, 243], "you": [1, 17, 18, 23, 36, 49, 56, 68, 74, 81, 82, 83, 85, 92, 94, 96, 98, 104, 105, 107, 118, 126, 136, 140, 157, 161, 163, 167, 193, 195, 199, 201, 212, 225, 228, 233, 237, 239, 243, 246, 248, 250, 251, 254, 255, 256], "ar": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 88, 89, 90, 93, 95, 96, 99, 100, 101, 103, 105, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 123, 126, 128, 130, 133, 135, 136, 137, 138, 140, 146, 148, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 178, 188, 193, 198, 199, 201, 202, 203, 211, 212, 213, 217, 225, 228, 238, 239, 243, 246, 247, 248, 249, 250, 251, 254, 255, 256], "consid": [1, 83, 112, 118, 120, 140, 152, 154, 155, 157, 161, 163, 175, 176, 177, 179, 183, 212, 228, 243], "stick": [1, 243], "lower": [1, 84, 88, 120, 140, 173, 175, 191, 243], "current": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 120, 125, 126, 127, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 180, 199, 203, 208, 212, 215, 249, 250, 251], "contain": [2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 63, 66, 67, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 233, 235, 236, 237, 238, 241, 242, 244, 246, 249, 250], "data": [2, 3, 4, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 143, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 198, 199, 200, 202, 203, 204, 217, 225, 227, 233, 234, 235, 236, 237, 238, 241, 247, 249, 250, 254, 255, 256], "format": [2, 3, 4, 9, 61, 65, 66, 67, 71, 76, 77, 78, 81, 82, 117, 118, 123, 125, 126, 127, 128, 129, 134, 135, 138, 144, 151, 156, 168, 171, 176, 177, 185, 188, 190, 192, 194, 195, 198, 200, 203, 232, 233, 235, 236, 237, 238, 239, 247, 256], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 225, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 245, 246, 254, 256], "begin": [2, 63, 133, 159, 183, 185, 191, 192, 200, 217, 249], "end": [2, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 63, 73, 135, 140, 141, 149, 154, 155, 156, 158, 166, 171, 183, 185, 188, 192, 200, 201, 212, 217, 224, 225, 235, 246, 249, 251], "metadata": [2, 3, 4, 51, 63, 79, 89, 120, 129, 134, 135, 137, 146, 192, 194, 198, 199, 200, 212, 217, 225, 228, 233, 249, 251], "object": [2, 3, 4, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 134, 135, 137, 140, 146, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 188, 199, 209, 210, 211, 212, 213, 215, 225, 227, 228, 241, 242, 249, 250], "repres": [2, 3, 4, 81, 82, 88, 95, 100, 103, 108, 109, 115, 117, 118, 125, 129, 130, 140, 141, 158, 164, 185, 225, 227, 250], "detail": [2, 3, 4, 9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 113, 114, 120, 137, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "type": [2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 212, 217, 219, 227, 230, 231, 232, 233, 237, 249, 250, 253], "possibl": [2, 3, 4, 60, 61, 94, 96, 113, 114, 117, 148, 175, 177, 192, 200, 201, 211, 213, 225, 246], "valu": [2, 3, 4, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 91, 94, 99, 100, 103, 108, 109, 110, 113, 117, 118, 120, 122, 123, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 179, 180, 184, 185, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 208, 211, 212, 213, 215, 222, 225, 231, 232, 233, 246, 256], "document": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 141, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 191, 192, 193, 194, 195, 199, 200, 201, 203, 204, 205, 209, 225, 227, 232, 233, 235, 236, 237, 239, 243, 246, 250, 251, 253, 254, 255], "wordpiec": [2, 205, 209], "word_embed": [2, 5, 87, 88, 90, 93, 94, 95, 96, 99, 101, 105, 107, 111, 113, 115, 134, 135, 144, 180, 205, 209], "sentence_embed": [2, 5, 28, 44, 50, 87, 89, 91, 92, 97, 98, 100, 102, 103, 104, 106, 108, 109, 110, 114, 141, 173, 205, 209, 225, 246, 250], "categori": [2, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 66, 67, 76, 78, 205, 209, 225, 246, 250], "date": [2, 61, 79, 126, 127, 128, 205, 209], "entiti": [2, 10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 63, 76, 79, 93, 116, 117, 118, 124, 125, 129, 131, 132, 133, 134, 135, 136, 137, 182, 186, 194, 199, 205, 209, 227, 241], "chunk": [2, 10, 11, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 60, 61, 79, 83, 85, 89, 94, 97, 111, 117, 120, 125, 128, 129, 130, 133, 154, 155, 182, 186, 191, 194, 205, 209, 212, 217, 225, 238, 241, 246, 256], "named_ent": [2, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 118, 133, 134, 135, 136, 137, 144, 199, 205, 209, 227], "negex": [2, 205, 209], "labeled_depend": [2, 82, 118, 205, 209], "languag": [2, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 121, 122, 123, 125, 126, 129, 134, 135, 137, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 185, 188, 191, 200, 201, 204, 205, 209, 212, 228, 241, 250], "keyword": [2, 119, 120, 151, 241], "dummi": [2, 84, 205, 209], "first": [2, 95, 97, 98, 99, 100, 104, 111, 113, 114, 120, 128, 134, 135, 136, 148, 156, 163, 164, 165, 166, 170, 171, 173, 175, 179, 184, 193, 201, 204, 211, 212, 233, 243, 246, 250, 251, 255], "charact": [2, 13, 19, 37, 45, 84, 99, 101, 117, 122, 128, 130, 138, 148, 149, 175, 176, 177, 184, 185, 188, 194], "last": [2, 89, 103, 108, 109, 126, 127, 154, 155, 182, 212, 239, 254], "string": [2, 9, 13, 19, 28, 37, 44, 45, 50, 60, 63, 81, 84, 117, 128, 130, 136, 138, 149, 151, 154, 155, 171, 173, 177, 179, 183, 191, 192, 194, 198, 199, 200, 201, 212, 232, 233, 254], "associ": [2, 3, 4, 44, 110, 117, 128, 133, 140, 225], "list": [2, 3, 4, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 110, 113, 114, 115, 117, 118, 120, 122, 126, 128, 132, 133, 135, 136, 137, 138, 140, 143, 148, 149, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 179, 180, 183, 185, 193, 194, 199, 200, 208, 212, 217, 223, 225, 227, 228, 233, 239, 241, 245, 250], "vector": [2, 44, 90, 91, 92, 94, 95, 97, 98, 99, 110, 111, 112, 173, 193, 194, 249], "where": [2, 44, 95, 99, 117, 120, 123, 125, 128, 129, 130, 140, 146, 149, 151, 156, 159, 171, 173, 176, 177, 188, 191, 237], "applic": [2, 75, 78, 109, 120, 156, 160, 161, 164, 166, 167, 168, 169, 211, 224, 225, 246, 248], "static": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 122, 123, 125, 129, 134, 135, 137, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188, 212, 215, 227, 228, 242, 250], "sql": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 125, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 199, 215, 217, 223, 227, 233, 235, 236, 237, 238], "creat": [2, 3, 4, 28, 44, 50, 68, 75, 85, 90, 91, 97, 105, 108, 111, 112, 118, 135, 140, 141, 144, 146, 154, 162, 165, 182, 188, 199, 202, 217, 235, 236, 237, 238, 241, 243, 250, 251, 254, 256], "new": [2, 3, 4, 10, 50, 63, 76, 79, 88, 90, 91, 95, 99, 100, 101, 112, 115, 136, 137, 140, 154, 156, 159, 161, 166, 167, 171, 175, 194, 223, 243, 249, 250], "differ": [2, 3, 4, 67, 76, 81, 82, 99, 100, 105, 106, 113, 115, 120, 126, 148, 149, 158, 165, 169, 175, 185, 188, 199, 225, 230, 254], "all": [2, 3, 4, 5, 9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 88, 90, 91, 93, 103, 107, 108, 109, 112, 115, 117, 122, 126, 130, 135, 138, 140, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 179, 184, 188, 193, 195, 211, 212, 225, 228, 243, 245, 250, 255], "should": [2, 3, 4, 11, 28, 44, 50, 67, 76, 77, 78, 83, 89, 92, 97, 98, 104, 111, 113, 120, 122, 129, 130, 134, 135, 140, 144, 148, 149, 154, 155, 163, 175, 184, 199, 201, 208, 212, 227, 235, 236, 243], "newli": [2, 3, 4, 109], "structtyp": [2, 217], "schema": [2, 133, 225, 246], "look": [2, 135, 155, 166, 167, 168, 169, 176, 249], "like": [2, 7, 14, 20, 24, 28, 29, 33, 38, 41, 46, 52, 53, 63, 77, 84, 88, 92, 94, 96, 101, 107, 115, 118, 120, 128, 133, 140, 149, 152, 154, 155, 158, 159, 162, 165, 175, 185, 188, 212, 225, 246, 248, 249], "struct": [2, 192, 198, 200, 233], "containsnul": [2, 44, 190, 192, 198, 200, 233], "true": [2, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 66, 67, 75, 76, 77, 78, 83, 84, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 125, 126, 127, 129, 133, 135, 138, 148, 149, 151, 154, 159, 162, 173, 175, 176, 179, 184, 185, 188, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 212, 217, 225, 228, 233, 235, 236, 238, 239, 246, 250, 251], "nullabl": [2, 44, 190, 192, 198, 200, 233], "integ": [2, 67, 76, 77, 78, 103, 108, 109, 192, 198, 200, 212], "map": [2, 11, 44, 89, 92, 112, 117, 140, 146, 154, 155, 175, 192, 198, 200, 212, 217, 223, 233, 241, 249], "kei": [2, 7, 67, 81, 82, 105, 106, 113, 114, 123, 137, 165, 192, 198, 199, 200, 225, 227, 233, 241, 246], "valuecontainsnul": [2, 192, 198, 200, 233], "arrai": [2, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 122, 123, 130, 135, 143, 146, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 182, 183, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 217, 233, 251, 254], "element": [2, 44, 130, 140, 173, 190, 192, 198, 200, 201, 233], "float": [2, 3, 7, 8, 9, 28, 44, 50, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 89, 122, 134, 135, 137, 140, 143, 144, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 188, 190, 192, 193, 199, 200, 212], "row": [2, 51, 83, 85, 112, 148, 149, 152, 192, 200, 201, 203, 217, 232, 235], "column": [2, 10, 28, 44, 50, 84, 112, 123, 132, 134, 135, 143, 144, 146, 152, 155, 173, 180, 185, 188, 190, 191, 192, 193, 194, 195, 198, 200, 201, 204, 208, 217, 227, 232, 235, 237, 250], "transform": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 141, 144, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 203, 204, 212, 217, 220, 223, 225, 226, 227, 246, 249, 250, 251, 254, 255, 256], "an": [2, 7, 8, 9, 11, 28, 44, 50, 51, 66, 67, 76, 77, 78, 81, 83, 84, 89, 93, 95, 99, 100, 101, 102, 103, 104, 108, 109, 115, 117, 120, 122, 125, 126, 127, 128, 129, 130, 134, 135, 137, 140, 144, 146, 148, 149, 151, 152, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 182, 185, 188, 191, 192, 193, 194, 195, 198, 199, 200, 201, 204, 212, 216, 217, 219, 223, 225, 233, 235, 236, 237, 238, 245, 247, 249, 250, 251, 253, 254], "alreadi": [3, 118, 120, 134, 135, 136, 185, 186, 199, 227, 254], "load": [3, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 123, 125, 129, 131, 134, 135, 137, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188, 198, 212, 215, 227, 228, 239, 243, 244, 250, 253], "process": [3, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 78, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 118, 120, 122, 133, 134, 135, 144, 149, 154, 155, 156, 159, 164, 168, 171, 173, 185, 188, 190, 191, 192, 193, 194, 198, 200, 202, 204, 212, 225, 233, 246, 249, 250, 251, 252], "byte": [3, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 122, 135, 143, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 198, 225], "origin": [4, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 88, 89, 97, 101, 105, 111, 133, 149, 154, 155, 156, 198, 212], "height": [4, 67, 76, 77, 78, 198, 212], "width": [4, 67, 76, 77, 78, 89, 154, 155, 198, 212], "nchannel": [4, 198], "mode": [4, 28, 44, 50, 60, 69, 135, 144, 176, 192, 198, 200, 225], "imag": [4, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 155, 168, 198, 199, 205, 209, 212, 227], "uri": [4, 228], "pixel": [4, 76], "number": [4, 9, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 61, 68, 69, 70, 71, 72, 73, 74, 75, 77, 81, 82, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 130, 132, 134, 135, 140, 143, 146, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 180, 188, 212, 232, 235, 236], "color": [4, 233], "channel": [4, 67, 76, 77, 78, 175, 212], "opencv": [4, 198], "hubert_for_ctc": [5, 6], "hubertforctc": [5, 6, 7], "wav2vec2_for_ctc": [5, 6], "wav2vec2forctc": [5, 6, 8], "whisper_for_ctc": [5, 6], "whisperforctc": [5, 6, 9], "albert_for_multiple_choic": [5, 12], "albertformultiplechoic": [5, 12, 13], "albert_for_question_answ": [5, 12], "albertforquestionansw": [5, 12, 14], "albert_for_sequence_classif": [5, 12], "albertforsequenceclassif": [5, 12, 15, 30], "albert_for_token_classif": [5, 12], "albertfortokenclassif": [5, 12, 16, 88], "albert_for_zero_shot_classif": [5, 12], "albertforzeroshotclassif": [5, 12, 17], "bart_for_zero_shot_classif": [5, 12], "bartforzeroshotclassif": [5, 12, 17, 18], "bert_for_multiple_choic": [5, 12], "bertformultiplechoic": [5, 12, 19], "bert_for_question_answ": [5, 12], "bertforquestionansw": [5, 12, 13, 20, 51], "bert_for_sequence_classif": [5, 12], "bertforsequenceclassif": [5, 12, 21, 23], "bert_for_token_classif": [5, 12], "bertfortokenclassif": [5, 12, 22], "bert_for_zero_shot_classif": [5, 12], "bertforzeroshotclassif": [5, 12, 23], "camembert_for_question_answ": [5, 12], "camembertforquestionansw": [5, 12, 24], "camembert_for_sequence_classif": [5, 12], "camembertforsequenceclassif": [5, 12, 25, 27], "camembert_for_token_classif": [5, 12], "camembertfortokenclassif": [5, 12, 26], "camembert_for_zero_shot_classif": [5, 12], "camembertforzeroshotclassif": [5, 12, 27], "classifierdlapproach": [5, 12, 28, 44, 250], "classifierdlmodel": [5, 12, 28, 44, 250], "deberta_for_question_answ": [5, 12], "debertaforquestionansw": [5, 12, 29], "deberta_for_sequence_classif": [5, 12], "debertaforsequenceclassif": [5, 12, 27, 30, 32], "deberta_for_token_classif": [5, 12], "debertafortokenclassif": [5, 12, 31], "deberta_for_zero_shot_classif": [5, 12], "debertaforzeroshotclassif": [5, 12, 32], "distil_bert_for_question_answ": [5, 12], "distilbertforquestionansw": [5, 12, 33], "distil_bert_for_sequence_classif": [5, 12], "distilbertforsequenceclassif": [5, 12, 17, 34, 36], "distil_bert_for_token_classif": [5, 12], "distilbertfortokenclassif": [5, 12, 35], "distil_bert_for_zero_shot_classif": [5, 12], "distilbertforzeroshotclassif": [5, 12, 36], "distilbert_for_multiple_choic": [5, 12], "distilbertformultiplechoic": [5, 12, 37], "longformer_for_question_answ": [5, 12], "longformerforquestionansw": [5, 12, 38], "longformer_for_sequence_classif": [5, 12], "longformerforsequenceclassif": [5, 12, 39], "longformer_for_token_classif": [5, 12], "longformerfortokenclassif": [5, 12, 40], "mpnet_for_question_answ": [5, 12], "mpnetforquestionansw": [5, 12, 41], "mpnet_for_sequence_classif": [5, 12], "mpnetforsequenceclassif": [5, 12, 42], "mpnet_for_token_classif": [5, 12], "mpnetfortokenclassif": [5, 12, 43], "multi_classifier_dl": [5, 12], "multiclassifierdlapproach": [5, 12, 28, 44, 225, 246], "multiclassifierdlmodel": [5, 12, 28, 44], "roberta_for_multiple_choic": [5, 12], "robertaformultiplechoic": [5, 12, 45], "roberta_for_question_answ": [5, 12], "robertaforquestionansw": [5, 12, 45, 46, 137], "roberta_for_sequence_classif": [5, 12], "robertaforsequenceclassif": [5, 12, 47, 49], "roberta_for_token_classif": [5, 12], "robertafortokenclassif": [5, 12, 48], "roberta_for_zero_shot_classif": [5, 12], "robertaforzeroshotclassif": [5, 12, 49], "sentiment_dl": [5, 12], "sentimentdlapproach": [5, 12, 28, 44, 50], "sentimentdlmodel": [5, 12, 28, 44, 50], "tapas_for_question_answ": [5, 12], "tapasforquestionansw": [5, 12, 51], "xlm_roberta_for_multiple_choic": [5, 12], "xlmrobertaformultiplechoic": [5, 12, 52], "xlm_roberta_for_question_answ": [5, 12], "xlmrobertaforquestionansw": [5, 12, 53], "xlm_roberta_for_sequence_classif": [5, 12], "xlmrobertaforsequenceclassif": [5, 12, 54, 56], "xlm_roberta_for_token_classif": [5, 12], "xlmrobertafortokenclassif": [5, 12, 43, 55], "xlm_roberta_for_zero_shot_classif": [5, 12], "xlmrobertaforzeroshotclassif": [5, 12, 56], "xlnet_for_sequence_classif": [5, 12], "xlnetforsequenceclassif": [5, 12, 57], "xlnet_for_token_classif": [5, 12], "xlnetfortokenclassif": [5, 12, 58], "extractor": [5, 59, 125, 129, 182], "spanbert_coref": [5, 62], "spanbertcorefmodel": [5, 62, 63], "blip_for_question_answ": [5, 64], "blipforquestionansw": [5, 64, 65], "clip_for_zero_shot_classif": [5, 64], "clipforzeroshotclassif": [5, 64, 65, 66, 69, 70, 71, 73, 74], "convnext_for_image_classif": [5, 64], "convnextforimageclassif": [5, 64, 67], "gemma3_for_multimod": [5, 64], "gemma3formultimod": [5, 64, 68], "janus_for_multimod": [5, 64], "janusformultimod": [5, 64, 69], "llava_for_multimod": [5, 64], "llavaformultimod": [5, 64, 70], "mllama_for_multimod": [5, 64], "mllamaformultimod": [5, 64, 71], "paligemma_for_multimod": [5, 64], "paligemmaformultimod": [5, 64, 72], "phi3_vision_for_multimod": [5, 64], "phi3vis": [5, 64, 73], "qwen2vl_transform": [5, 64], "qwen2vltransform": [5, 64, 74], "smolvlm_transform": [5, 64], "smolvlmtransform": [5, 64, 75], "swin_for_image_classif": [5, 64], "swinforimageclassif": [5, 64, 76], "vision_encoder_decoder_for_image_capt": [5, 64], "visionencoderdecoderforimagecapt": [5, 64, 77], "vit_for_image_classif": [5, 64], "vitforimageclassif": [5, 64, 78], "dependency_pars": [5, 80, 228, 255], "dependencyparserapproach": [5, 80, 81, 236, 256], "dependencyparsermodel": [5, 80, 81, 82, 118], "typed_dependency_pars": [5, 80], "typeddependencyparserapproach": [5, 80, 81, 82], "typeddependencyparsermodel": [5, 80, 82, 118], "albert_embed": [5, 87], "albertembed": [5, 16, 87, 88], "auto_gguf_embed": [5, 87], "autoggufembed": [5, 87, 89], "bert_embed": [5, 87], "bertembed": [5, 87, 90, 94, 100, 107, 135, 193], "bert_sentence_embed": [5, 87], "bertsentenceembed": [5, 44, 50, 87, 91, 106, 114], "bge_embed": [5, 87], "bgeembed": [5, 87, 92], "camembert_embed": [5, 87], "camembertembed": [5, 87, 93], "chunk_embed": [5, 87], "chunkembed": [5, 87, 94, 193], "deberta_embed": [5, 87], "debertaembed": [5, 87, 95], "distil_bert_embed": [5, 87], "distilbertembed": [5, 87, 96], "doc2vec": [5, 87], "doc2vecapproach": [5, 87, 97], "doc2vecmodel": [5, 87, 97], "e5_embed": [5, 87], "e5embed": [5, 87, 98, 102, 104, 173], "elmo_embed": [5, 87], "elmoembed": [5, 87, 99], "instructor_embed": [5, 87], "instructorembed": [5, 87, 100], "longformer_embed": [5, 87], "longformerembed": [5, 87, 101], "mpnet_embed": [5, 87], "mpnetembed": [5, 87, 102], "mxbai_embed": [5, 87], "mxbaiembed": [5, 87, 103], "nomic_embed": [5, 87], "nomicembed": [5, 87, 104], "roberta_embed": [5, 87], "robertaembed": [5, 87, 105, 113], "roberta_sentence_embed": [5, 87], "robertasentenceembed": [5, 87, 106], "sentenceembed": [5, 28, 44, 50, 87, 107, 112, 193], "snowflake_embed": [5, 87], "snowflakeembed": [5, 87, 108], "uae_embed": [5, 87], "uaeembed": [5, 87, 109], "universal_sentence_encod": [5, 87], "universalsentenceencod": [5, 28, 44, 50, 87, 110, 225, 246, 250], "word2vec": [5, 87, 97], "word2vecapproach": [5, 87, 111], "word2vecmodel": [5, 87, 111], "wordembeddingsmodel": [5, 87, 94, 107, 112, 118, 134, 135, 136, 193], "xlm_roberta_embed": [5, 87], "xlmrobertaembed": [5, 87, 113], "xlm_roberta_sentence_embed": [5, 87], "xlmrobertasentenceembed": [5, 87, 114], "xlnet_embed": [5, 87], "xlnetembed": [5, 87, 115], "entity_rul": [5, 116], "entityrulerapproach": [5, 116, 117], "entityrulermodel": [5, 116, 117], "yake_keyword_extract": [5, 119], "yakekeywordextract": [5, 119, 120], "language_detector_dl": [5, 121], "languagedetectordl": [5, 121, 122], "big_text_match": [5, 124], "bigtextmatch": [5, 124, 125, 129], "bigtextmatchermodel": [5, 124, 125], "date_match": [5, 124], "datematch": [5, 79, 124, 126], "datematcherutil": [5, 124, 126, 127], "multi_date_match": [5, 124], "multidatematch": [5, 79, 124, 126, 127], "regex_match": [5, 124], "regexmatch": [5, 124, 128], "regexmatchermodel": [5, 124, 128], "text_match": [5, 124], "textmatch": [5, 124, 125, 129, 182], "textmatchermodel": [5, 124, 125, 129], "ner_approach": [5, 131], "nerapproach": [5, 131, 132, 134, 135], "ner_convert": [5, 131], "nerconvert": [5, 94, 131, 133, 134, 135, 225, 246], "ner_crf": [5, 131], "nercrfapproach": [5, 131, 134, 135], "nercrfmodel": [5, 131, 134, 135], "ner_dl": [5, 131], "nerdlapproach": [5, 131, 134, 135, 235, 256], "nerdlmodel": [5, 118, 131, 133, 134, 135, 136, 225, 228, 246], "ner_overwrit": [5, 131], "neroverwrit": [5, 131, 136], "zero_shot_ner_model": [5, 131], "zeroshotnermodel": [5, 131, 137], "openai_complet": [5, 139], "openaicomplet": [5, 139, 140], "openai_embed": [5, 139], "openaiembed": [5, 139, 141], "classifier_encod": [5, 142], "classifierencod": [5, 28, 44, 50, 142, 143], "evaluation_dl_param": [5, 142], "evaluationdlparam": [5, 28, 44, 50, 135, 142, 144], "perceptron": [5, 80, 81, 145], "perceptronapproach": [5, 145, 146, 237, 256], "perceptronmodel": [5, 11, 81, 82, 118, 134, 145, 146, 235], "sentence_detector": [5, 51, 137, 147], "sentencedetector": [5, 11, 28, 51, 63, 81, 82, 91, 94, 106, 110, 114, 118, 120, 123, 128, 130, 134, 135, 136, 137, 146, 147, 148, 149, 179, 182, 202, 204, 212, 235, 250, 251], "sentencedetectorparam": [5, 147, 148], "sentence_detector_dl": [5, 147, 163], "sentencedetectordlapproach": [5, 147, 149], "sentencedetectordlmodel": [5, 147, 149, 163], "sentiment_detector": [5, 150], "sentimentdetector": [5, 150, 151], "sentimentdetectormodel": [5, 150, 151], "vivekn_senti": [5, 150], "viveknsentimentapproach": [5, 150, 151, 152], "viveknsentimentmodel": [5, 150, 152], "auto_gguf_model": [5, 89, 153], "autoggufmodel": [5, 153, 154], "auto_gguf_vision_model": [5, 153], "autoggufvisionmodel": [5, 153, 155], "bart_transform": [5, 153], "barttransform": [5, 153, 156], "cohere_transform": [5, 153], "coheretransform": [5, 153, 157], "cpm_transform": [5, 153], "cpmtransform": [5, 153, 158], "gpt2_transform": [5, 153], "gpt2transform": [5, 153, 159], "llama2_transform": [5, 153], "llama2transform": [5, 153, 160], "llama3_transform": [5, 153], "llama3transform": [5, 153, 161], "m2m100_transform": [5, 153], "m2m100transform": [5, 153, 162], "marian_transform": [5, 153], "mariantransform": [5, 60, 153, 163], "mistral_transform": [5, 153], "mistraltransform": [5, 153, 164], "nllb_transform": [5, 153], "nllbtransform": [5, 153, 165], "olmo_transform": [5, 153], "olmotransform": [5, 153, 166], "phi2_transform": [5, 153], "phi2transform": [5, 153, 167], "phi3_transform": [5, 153], "phi3transform": [5, 153, 168], "qwen_transform": [5, 153], "qwentransform": [5, 153, 169], "starcoder_transform": [5, 153], "starcodertransform": [5, 153, 170], "t5_transform": [5, 153], "t5transform": [5, 153, 171], "document_similarity_rank": [5, 172], "documentsimilarityrankerapproach": [5, 172, 173], "documentsimilarityrankerfinish": [5, 172, 173], "documentsimilarityrankermodel": [5, 172, 173], "context_spell_check": [5, 174], "contextspellcheckerapproach": [5, 174, 175, 176, 177], "contextspellcheckermodel": [5, 174, 175, 176, 177], "norvig_sweet": [5, 174], "norvigsweetingapproach": [5, 174, 175, 176, 177, 256], "norvigsweetingmodel": [5, 174, 175, 176, 177], "symmetric_delet": [5, 174], "symmetricdeleteapproach": [5, 174, 175, 176, 177, 256], "symmetricdeletemodel": [5, 174, 175, 176, 177], "chunk_token": [5, 181], "chunktoken": [5, 181, 182], "chunktokenizermodel": [5, 181, 182], "recursive_token": [5, 181], "recursivetoken": [5, 181, 183], "recursivetokenizermodel": [5, 181, 183], "regex_token": [5, 181], "regextoken": [5, 181, 184, 188, 251], "tokenizermodel": [5, 125, 181, 182, 185], "word_segment": [5, 187], "wordsegmenterapproach": [5, 187, 188], "wordsegmentermodel": [5, 187, 188], "inputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 203, 204, 205, 208], "name": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 208, 212, 215, 217, 222, 225, 227, 228, 232, 233, 235, 237, 241, 246, 250], "outputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 200, 201, 203, 204, 205, 208, 218, 220], "setparam": [5, 10, 172, 173, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 204, 205, 207], "regexpars": [5, 11], "setregexpars": [5, 11], "entitynam": [5, 79], "setentitynam": [5, 79], "chunkoverlap": [5, 83], "chunksiz": [5, 83], "explodesplit": [5, 83, 85], "keepsepar": [5, 83], "patternsareregex": [5, 83], "setchunkoverlap": [5, 83], "setchunks": [5, 83], "setexplodesplit": [5, 83, 85], "setkeepsepar": [5, 83], "setpatternsareregex": [5, 83], "setsplitpattern": [5, 83, 181, 185], "settrimwhitespac": [5, 83, 85, 181, 184], "splitpattern": [5, 83, 181, 185], "trimwhitespac": [5, 83, 85, 181, 184], "action": [5, 84], "encod": [5, 28, 59, 60, 65, 68, 69, 70, 71, 72, 73, 74, 75, 77, 84, 90, 91, 95, 100, 101, 104, 110, 137, 156, 162, 163, 165, 225], "lowercas": [5, 59, 60, 84, 138, 184, 188, 189, 191], "pattern": [5, 11, 60, 61, 83, 84, 117, 126, 128, 138, 176, 177, 181, 184, 185, 187, 188, 201], "polici": [5, 84], "replac": [5, 78, 84, 95, 101, 122, 123, 136, 149, 156, 176, 177, 211, 250], "setact": [5, 84], "setencod": [5, 59, 60, 84], "setlowercas": [5, 59, 60, 84, 138, 189, 191, 204], "setpattern": [5, 84, 181, 184, 187, 188], "setpolici": [5, 84], "setreplac": [5, 84], "numtoken": [5, 85], "setnumtoken": [5, 85], "settokenoverlap": [5, 85], "tokenoverlap": [5, 85], "delimit": [5, 13, 19, 37, 45, 112, 117, 118, 123, 124, 128, 130, 134, 138, 151, 184, 203, 235, 237], "entitytyp": [5, 118], "explodeent": [5, 118], "includeedg": [5, 118], "maxsentences": [5, 118], "mergeent": [5, 118], "mergeentitiesiobformat": [5, 118], "minsentences": [5, 118], "optionalinputannotatortyp": [5, 116, 117, 118, 205, 208], "posmodel": [5, 118], "relationshiptyp": [5, 118], "roottoken": [5, 118], "setdelimit": [5, 118, 124, 128, 130], "setdependencyparsermodel": [5, 118], "setentitytyp": [5, 118], "setexplodeent": [5, 118], "setincludeedg": [5, 118], "setmaxsentences": [5, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 118], "setmergeent": [5, 118], "setmergeentitiesiobformat": [5, 118], "setminsentences": [5, 118], "setposmodel": [5, 118], "setrelationshiptyp": [5, 118], "setroottoken": [5, 118], "settypeddependencyparsermodel": [5, 118], "dictionari": [5, 112, 120, 123, 128, 134, 136, 137, 138, 150, 151, 174, 176, 177, 225, 241], "formcol": [5, 123, 236], "lemmacol": [5, 123, 236], "setdictionari": [5, 123, 150, 151, 174, 176, 177], "setformcol": [5, 123], "setlemmacol": [5, 123], "enablecumul": [5, 130], "n": [5, 68, 69, 70, 71, 72, 73, 74, 75, 89, 114, 120, 130, 133, 134, 135, 140, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 183, 199, 203, 212, 217, 227, 243], "setenablecumul": [5, 130], "setn": [5, 94, 130], "cleanuppattern": [5, 84, 138], "maxlength": [5, 138, 147, 148, 149, 181, 184, 185], "minlength": [5, 138, 147, 148, 149, 181, 184, 185], "setcleanuppattern": [5, 138], "setmaxlength": [5, 138, 147, 148, 149, 181, 184, 185], "setminlength": [5, 138, 147, 148, 149, 181, 184, 185], "setslangdictionari": [5, 138], "slangdictionari": [5, 138], "slangmatchcas": [5, 138], "casesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 124, 125, 129, 174, 176, 179, 205, 212], "loaddefaultstopword": [5, 119, 120, 179], "setcasesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 94, 96, 101, 105, 113, 124, 125, 129, 134, 174, 176, 179, 193, 204, 205, 212], "setlocal": [5, 179], "setstopword": [5, 119, 120, 136, 179], "stopword": [5, 119, 120, 136, 179], "getgraphfil": [5, 180], "getgraphfold": [5, 180], "gethiddenunitsnumb": [5, 180], "getinputcol": [5, 172, 173, 180, 189, 193, 194, 205, 208], "getlabelcolumn": [5, 131, 132, 180], "graphfil": [5, 180], "graphfold": [5, 131, 135, 174, 175, 180], "hiddenunitsnumb": [5, 180], "inputcol": [5, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 42, 44, 46, 47, 49, 50, 53, 54, 56, 57, 107, 122, 172, 173, 180, 189, 190, 192, 193, 194, 195, 198, 200, 201, 205, 208, 232], "inputcolsvalid": [5, 180, 205, 208], "labelcolumn": [5, 28, 44, 50, 131, 132, 134, 135, 142, 143, 180], "setgraphfil": [5, 180], "setgraphfold": [5, 131, 135, 174, 175, 180], "sethiddenunitsnumb": [5, 180], "setinputcol": [5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 205, 208, 225, 230, 232, 246, 250, 251], "setlabelcolumn": [5, 28, 44, 50, 131, 132, 134, 135, 142, 143, 180, 225, 246, 250], "avail": [5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 120, 122, 123, 126, 128, 134, 135, 146, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 188, 212, 227, 228, 246, 253], "configprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 87, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 121, 122, 131, 135, 142, 143, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175], "loadsavedmodel": [6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "setconfigprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 62, 63, 64, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 87, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 110, 113, 114, 115, 121, 122, 131, 135, 142, 143, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175], "getismultilingu": [6, 9], "getlanguag": [6, 9], "ismultilingu": [6, 9], "setlanguag": [6, 9], "settask": [6, 9, 153, 156, 159, 171, 205, 212], "concern": [7, 8, 9, 15, 66, 67, 76, 77, 78, 79, 88], "classnam": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 128, 129, 134, 135, 137, 138, 140, 141, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 182, 183, 185, 188, 203, 206, 207, 214, 220], "java_model": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 128, 129, 134, 135, 137, 138, 140, 141, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 182, 183, 185, 188, 197, 203, 207, 223], "hubert": 7, "head": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 63, 83, 88, 115, 133, 134, 135, 155, 199, 217, 227, 233, 250], "top": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 88, 120, 140, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 200, 212, 233, 243], "connectionist": [7, 8, 9], "tempor": [7, 8, 9], "classif": [7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 66, 67, 76, 78, 88, 92, 98, 100, 110, 152, 156, 171, 212, 233, 241, 250], "ctc": [7, 8, 9], "wa": [7, 8, 15, 16, 18, 21, 22, 23, 28, 30, 31, 32, 34, 35, 36, 39, 40, 43, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 76, 83, 84, 85, 93, 95, 96, 101, 105, 106, 112, 113, 114, 120, 140, 141, 152, 156, 159, 160, 162, 164, 167, 170, 175, 227, 250, 251], "propos": [7, 8, 67, 76, 88, 93, 95, 96, 102, 105, 106, 109, 113, 114, 115, 165], "self": [7, 8, 76, 88, 101, 163], "supervis": [7, 8, 9, 88, 98, 99, 104, 110, 120, 156, 159, 162, 168], "speech": [7, 8, 9, 11, 93, 145, 146, 188, 237, 241, 256], "represent": [7, 8, 76, 88, 90, 91, 96, 97, 98, 99, 111, 112, 113, 114, 115, 133, 171, 173, 203, 216, 232], "learn": [7, 8, 28, 44, 50, 69, 71, 75, 79, 88, 96, 97, 99, 105, 106, 110, 111, 113, 114, 115, 120, 134, 135, 143, 149, 154, 155, 156, 158, 159, 160, 161, 166, 167, 168, 169, 171, 175, 212, 225, 233, 248], "mask": [7, 76, 95, 102, 113, 114, 115, 156, 184], "predict": [7, 9, 66, 76, 95, 102, 135, 154, 155, 159, 171, 212, 225, 246], "hidden": [7, 14, 16, 20, 22, 24, 26, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 88, 99, 115, 180], "unit": [7, 159, 160, 180], "wei": [7, 76], "ning": 7, "hsu": 7, "benjamin": [7, 93], "bolt": 7, "yao": 7, "hung": 7, "tsai": 7, "kushal": 7, "lakhotia": 7, "ruslan": 7, "salakhutdinov": 7, "abdelrahman": [7, 8], "moham": [7, 8], "take": [7, 8, 17, 18, 23, 36, 49, 51, 56, 83, 85, 93, 102, 118, 129, 155, 165, 176, 179, 185, 202, 235, 249, 250, 254, 255], "transcrib": [7, 8, 9], "text": [7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 140, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 188, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 211, 212, 213, 216, 217, 225, 231, 232, 233, 235, 236, 237, 238, 241, 246, 249, 250, 251, 255, 256], "need": [7, 8, 9, 11, 17, 81, 82, 92, 96, 98, 104, 105, 112, 117, 118, 120, 123, 126, 128, 134, 135, 138, 144, 146, 149, 152, 154, 155, 159, 162, 165, 167, 175, 176, 177, 184, 185, 190, 198, 199, 201, 225, 228, 235, 236, 237, 243, 246, 248, 250, 251, 254, 256], "provid": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 122, 123, 125, 126, 127, 128, 129, 134, 135, 138, 146, 149, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 188, 199, 212, 217, 227, 233, 251], "pre": [7, 8, 9, 28, 44, 50, 66, 78, 90, 91, 95, 96, 98, 99, 102, 104, 110, 135, 144, 156, 171, 185, 192, 194, 200, 204, 236, 250], "processor": [7, 8], "m1": [7, 8], "due": [7, 8, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 88, 101, 109, 156], "instruct": [7, 8, 71, 74, 87, 100, 158, 161, 168], "xla": [7, 8], "can": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 128, 133, 134, 135, 136, 137, 140, 141, 146, 148, 149, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 186, 188, 192, 193, 200, 201, 202, 203, 208, 212, 216, 225, 227, 228, 233, 235, 236, 237, 243, 246, 248, 250, 251, 253, 254, 255, 256], "companion": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 134, 135, 137, 146, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 188], "speechtotext": [7, 8, 9], "setoutputcol": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 205, 208, 225, 230, 232, 246, 250, 251], "asr_hubert_large_ls960": [7, 9], "For": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 134, 135, 137, 138, 140, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 185, 188, 192, 193, 194, 200, 201, 204, 212, 225, 227, 228, 238, 243, 246, 247, 249, 250, 251, 252, 253, 254], "pleas": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 70, 72, 73, 74, 76, 77, 78, 81, 82, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 122, 123, 125, 126, 128, 129, 134, 135, 138, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 182, 183, 188, 192, 200, 202, 228, 243, 247, 248, 252, 255], "see": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 137, 138, 140, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 185, 188, 192, 193, 194, 195, 200, 201, 204, 212, 215, 225, 227, 228, 238, 246, 247, 248, 253, 255, 256], "hub": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 122, 123, 134, 135, 146, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 188, 228, 241, 244], "To": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 88, 89, 90, 93, 95, 96, 101, 105, 109, 113, 115, 120, 126, 128, 146, 148, 154, 155, 156, 159, 166, 171, 188, 195, 199, 202, 225, 246, 254], "which": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 88, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 105, 107, 108, 109, 110, 111, 113, 115, 118, 120, 126, 127, 128, 135, 137, 138, 140, 141, 148, 149, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 176, 184, 188, 193, 199, 212, 217, 228, 235, 236, 250, 251], "compat": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 88, 90, 93, 95, 96, 101, 105, 110, 113, 115, 135, 193, 198, 228], "import": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 134, 135, 136, 138, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 198, 199, 200, 202, 203, 204, 217, 225, 227, 233, 235, 236, 237, 238, 239, 243, 246, 249, 250, 253, 254, 255, 256], "them": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 88, 90, 93, 95, 96, 101, 105, 113, 115, 117, 118, 120, 126, 128, 149, 161, 163, 170, 175, 179, 188, 198, 202, 204, 243, 250, 251], "5669": [7, 8, 9, 66, 67, 76, 77, 78, 93], "more": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 93, 96, 98, 99, 100, 107, 113, 114, 118, 120, 126, 130, 133, 137, 140, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 176, 184, 185, 192, 193, 194, 200, 201, 204, 212, 225, 227, 233, 238, 246, 247, 248, 250, 253, 256], "extend": [7, 8, 9, 11, 28, 44, 50, 63, 66, 67, 69, 71, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 88, 89, 90, 91, 93, 94, 96, 99, 105, 107, 110, 112, 113, 115, 120, 122, 123, 126, 127, 128, 129, 130, 134, 135, 137, 138, 144, 146, 148, 149, 151, 152, 154, 155, 156, 163, 171, 173, 175, 176, 178, 179, 183, 185, 188, 192, 193, 194, 200, 201, 204, 227], "exampl": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 141, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 217, 225, 227, 228, 233, 235, 236, 237, 238, 239, 244, 246, 249, 250, 251, 253, 254, 255, 256], "hubertforctctestspec": 7, "paper": [7, 9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 88, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 120, 149, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 188, 212, 238, 256], "abstract": [7, 9, 67, 76, 78, 88, 90, 91, 93, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 113, 114, 115, 120, 156, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 238, 256], "approach": [7, 9, 67, 76, 105, 106, 109, 115, 120, 132, 134, 135, 137, 149, 151, 156, 159, 160, 161, 164, 167, 171, 175, 176, 177, 206, 253], "challeng": [7, 44, 76, 96, 99, 100, 105, 106, 109, 120, 164, 165, 167], "three": [7, 175, 186], "uniqu": [7, 140, 141, 156, 215], "problem": [7, 17, 44, 88, 99, 102, 109, 156, 171, 175, 188], "multipl": [7, 9, 13, 19, 37, 44, 45, 75, 78, 93, 117, 120, 126, 148, 156, 161, 165, 169, 170, 173, 185, 217, 225, 235], "sound": [7, 83], "each": [7, 8, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 67, 76, 77, 78, 83, 92, 95, 97, 98, 102, 104, 107, 111, 112, 117, 118, 120, 123, 125, 126, 128, 129, 130, 132, 134, 135, 137, 138, 140, 141, 143, 144, 146, 148, 149, 151, 155, 156, 169, 173, 175, 176, 177, 184, 185, 188, 192, 200, 211, 212, 217, 223, 232, 237, 251], "input": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 141, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 208, 212, 217, 223, 227, 232, 235, 236, 237, 238, 250, 251, 254, 256], "utter": 7, "lexicon": 7, "phase": [7, 96, 156], "have": [7, 17, 18, 23, 28, 36, 44, 49, 50, 56, 85, 88, 93, 96, 100, 105, 106, 112, 120, 128, 130, 133, 134, 135, 136, 140, 146, 148, 149, 155, 157, 158, 159, 160, 161, 165, 166, 167, 168, 169, 177, 186, 204, 243, 250, 251, 254], "variabl": [7, 97, 111], "length": [7, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 77, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 130, 138, 140, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 184, 185, 212], "explicit": [7, 126, 148, 159], "segment": [7, 63, 67, 76, 96, 105, 187, 188, 241], "deal": [7, 199, 254], "we": [7, 8, 9, 28, 44, 67, 76, 78, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 120, 134, 135, 138, 140, 149, 154, 155, 156, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 185, 199, 217, 243, 246, 249, 250, 251, 254, 255, 256], "bert": [7, 15, 19, 20, 21, 22, 23, 25, 27, 30, 34, 35, 39, 42, 47, 51, 54, 57, 77, 88, 90, 91, 95, 96, 101, 102, 105, 106, 113, 114, 115, 135, 136, 137, 156, 171], "offlin": [7, 225], "step": [7, 28, 44, 50, 97, 111, 135, 144, 225, 246, 250], "align": [7, 168, 169], "target": [7, 110, 123, 154, 155, 156, 162, 163, 165, 185, 191, 199, 212, 227], "label": [7, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 76, 78, 81, 82, 98, 109, 117, 122, 132, 133, 134, 135, 137, 143, 144, 151, 152, 171, 175, 180, 188, 212, 225, 235, 246, 250], "loss": [7, 88, 96, 100, 135, 171, 246], "A": [7, 8, 50, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 88, 105, 106, 112, 117, 120, 123, 125, 128, 129, 130, 137, 138, 140, 141, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 184, 185, 198, 212, 225, 233, 237, 243, 248, 250, 256], "ingredi": 7, "our": [7, 88, 93, 96, 97, 98, 99, 100, 101, 105, 106, 110, 111, 113, 114, 120, 149, 156, 159, 160, 161, 162, 165, 167, 168, 170, 171, 217, 227, 255], "appli": [7, 10, 28, 44, 50, 67, 78, 83, 84, 117, 118, 135, 136, 144, 148, 154, 155, 171, 175, 176, 194, 201, 212, 217, 218, 221, 235], "over": [7, 68, 83, 96, 102, 113, 114, 115, 156, 160, 164, 165, 176, 179, 185, 217, 225, 246], "region": 7, "onli": [7, 9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 92, 98, 99, 102, 110, 115, 126, 128, 138, 140, 148, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 183, 188, 202, 211, 212, 232, 235], "forc": [7, 89, 154, 155, 212, 232], "combin": [7, 17, 18, 23, 27, 32, 36, 49, 56, 77, 96, 101, 112, 120, 156, 162, 165, 171, 175, 176, 188], "acoust": 7, "continu": [7, 133, 154, 155, 159, 173, 195, 212, 246], "reli": [7, 81, 82, 115, 120], "primarili": [7, 109], "consist": [7, 65, 68, 69, 70, 71, 72, 73, 74, 75, 88, 95, 101, 128, 146, 152, 167, 188, 203, 237], "unsupervis": [7, 113, 114, 115, 120, 156, 159], "rather": [7, 67, 89, 154, 155, 212], "than": [7, 44, 50, 67, 89, 96, 97, 100, 111, 113, 114, 115, 120, 122, 130, 134, 140, 154, 155, 158, 159, 160, 161, 162, 163, 167, 168, 170, 176, 177, 212, 250], "intrins": [7, 67], "qualiti": [7, 76, 108, 109, 159, 161, 162, 165, 168, 170], "assign": [7, 44, 117, 136, 151], "simpl": [7, 60, 90, 91, 117, 159, 251], "k": [7, 9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 193, 212], "mean": [7, 9, 11, 17, 18, 23, 27, 32, 36, 44, 49, 56, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 89, 103, 108, 109, 113, 120, 122, 126, 127, 140, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 184, 193, 199, 201, 212, 250, 251, 254], "teacher": 7, "100": [7, 28, 44, 51, 78, 97, 111, 113, 120, 140, 149, 162, 203], "two": [7, 44, 70, 71, 73, 74, 76, 81, 82, 88, 95, 97, 110, 111, 112, 113, 114, 118, 155, 168, 186, 201, 233, 235, 250], "iter": [7, 81, 82, 88, 97, 111, 146, 161, 188, 225, 246], "either": [7, 9, 28, 50, 78, 82, 93, 94, 107, 117, 120, 122, 128, 151, 152, 171, 188, 191, 199, 200, 203, 227, 251], "match": [7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 69, 84, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 117, 124, 125, 126, 127, 128, 129, 138, 146, 148, 156, 159, 161, 170, 185, 188, 191, 201, 211, 212, 249], "improv": [7, 88, 90, 91, 93, 95, 99, 100, 105, 106, 109, 113, 114, 134, 135, 159, 160, 161, 165, 166, 167, 168, 169, 171, 173, 255], "upon": [7, 85, 120, 154, 155, 170, 212], "state": [7, 14, 16, 20, 22, 24, 26, 28, 29, 31, 33, 35, 38, 40, 41, 43, 44, 46, 48, 50, 52, 53, 55, 58, 67, 68, 76, 78, 88, 90, 91, 93, 98, 99, 100, 101, 102, 105, 106, 109, 115, 120, 135, 156, 159, 160, 165, 166, 167, 168, 171, 200, 247, 250], "art": [7, 28, 44, 67, 68, 76, 78, 88, 90, 91, 93, 98, 99, 100, 101, 102, 105, 106, 109, 115, 120, 135, 156, 159, 165, 166, 167, 168, 171, 200], "wav2vec": [7, 8], "perform": [7, 67, 69, 75, 76, 78, 84, 88, 93, 95, 96, 98, 99, 100, 104, 105, 106, 108, 110, 112, 113, 114, 115, 135, 152, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 173, 176], "librispeech": 7, "960h": 7, "libri": 7, "light": [7, 96, 115, 120, 199, 244, 253, 255], "60": [7, 96, 148, 157, 161], "000h": 7, "benchmark": [7, 9, 71, 78, 88, 95, 96, 98, 99, 113, 114, 156, 158, 160, 161, 164, 165, 167, 168, 170, 171, 241], "10min": 7, "1h": 7, "10h": 7, "100h": 7, "fine": [7, 9, 63, 90, 91, 96, 98, 102, 137, 156, 160, 161, 167, 168, 171, 239], "tune": [7, 9, 63, 71, 90, 91, 96, 98, 102, 137, 156, 160, 161, 167, 168, 171], "subset": [7, 165], "1b": 7, "show": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 198, 200, 203, 204, 217, 228, 233, 235, 236, 237, 238, 239, 246, 249, 250, 251, 255], "19": [7, 79, 92, 98, 104, 130, 237, 239], "13": [7, 10, 11, 63, 113, 114, 118, 146, 167, 170, 194, 239], "rel": [7, 93, 95, 113, 126, 127, 134, 158, 165, 175, 249], "wer": 7, "reduct": [7, 88, 176], "dev": [7, 76, 88, 99, 110], "other": [7, 10, 44, 67, 77, 85, 93, 103, 104, 107, 108, 109, 110, 118, 120, 138, 151, 156, 159, 162, 170, 171, 175, 182, 183, 193, 194, 243, 250], "test": [7, 28, 44, 50, 66, 67, 69, 71, 74, 75, 76, 77, 78, 81, 82, 90, 91, 110, 112, 123, 125, 128, 129, 134, 135, 144, 146, 155, 159, 160, 167, 168, 176, 177, 182, 188, 233, 235, 236, 237, 238, 239, 250, 256], "evalu": [7, 28, 44, 50, 93, 98, 100, 101, 109, 113, 114, 144, 156, 157, 160, 162, 165, 166, 167, 170, 208, 225], "batchsiz": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 87, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 131, 135, 142, 143, 156, 163, 174, 175, 205, 212], "size": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 118, 120, 135, 143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 205, 212, 233, 249, 254, 255], "batch": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 135, 143, 154, 155, 156, 163, 175, 212], "4": [7, 9, 68, 69, 70, 71, 72, 73, 74, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 104, 112, 128, 134, 136, 140, 141, 146, 154, 155, 156, 159, 162, 165, 168, 170, 186, 236, 239, 243], "refer": [7, 9, 63, 67, 68, 70, 71, 72, 73, 74, 76, 78, 88, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 120, 137, 140, 141, 148, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 188, 191, 192, 200, 212, 215, 243, 244, 250, 252, 253], "ml": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 71, 76, 77, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 140, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 198, 199, 200, 202, 203, 204, 225, 246, 250, 254], "audio_cont": [7, 8, 9, 190], "setstag": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 141, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 191, 193, 203, 204, 250, 251], "processedaudiofloat": [7, 8, 9], "createdatafram": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 141, 146, 148, 149, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 191, 192, 193, 194, 200, 203, 204, 217, 225, 246, 249, 250, 251, 255], "rawfloat": [7, 8, 9], "todf": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 141, 146, 148, 149, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 191, 192, 193, 194, 198, 200, 203, 204, 217, 249, 250, 251, 255], "fit": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 191, 193, 199, 202, 203, 204, 218, 223, 225, 246, 250, 251, 254], "select": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 79, 89, 94, 96, 112, 118, 120, 122, 134, 135, 137, 140, 141, 152, 154, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 183, 188, 190, 192, 194, 195, 198, 200, 203, 204, 217, 225, 246, 251], "truncat": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 66, 67, 68, 69, 71, 75, 76, 77, 78, 79, 81, 82, 84, 89, 112, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 191, 192, 194, 195, 200, 203, 204, 217, 233, 237, 249, 250, 251], "mister": [7, 8], "quilter": [7, 8, 9], "THE": [7, 8, 84], "apostl": [7, 8, 9], "OF": [7, 8, 88], "midl": [7, 8], "clase": [7, 8], "AND": [7, 8], "glad": [7, 8, 9], "TO": [7, 8, 235, 256], "welcom": [7, 8, 9, 244], "hi": [7, 8, 9, 85, 137, 149, 162], "gospel": [7, 8, 9], "parent": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 183, 184, 185, 188, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 208, 212, 215, 232], "undefin": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 183, 184, 185, 188, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 208, 212, 215, 232], "doc": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 183, 184, 185, 188, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 208, 212, 215, 230, 232, 233, 238, 256], "configproto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 122, 135, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175], "tensorflow": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 120, 122, 135, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175], "get": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 110, 113, 114, 115, 120, 122, 132, 135, 143, 146, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 180, 185, 188, 190, 192, 193, 194, 198, 199, 200, 208, 212, 215, 222, 244, 246, 250, 255, 256], "config_proto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 110, 113, 114, 115, 122, 135, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175], "serializetostr": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 110, 113, 114, 115, 122, 135, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175], "folder": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 135, 144, 149, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 177, 180, 228, 235, 241], "spark_sess": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "restor": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 125, 129, 134, 135, 137, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188], "lang": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 129, 134, 135, 137, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188, 227, 228, 250, 255], "en": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 115, 117, 118, 122, 123, 125, 129, 134, 135, 137, 146, 149, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188, 227, 228, 236, 250, 255, 256], "remote_loc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 122, 123, 125, 129, 134, 135, 137, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188, 227, 228], "remot": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 125, 129, 134, 135, 137, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188, 227, 228], "address": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 125, 129, 134, 135, 137, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188], "resourc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 122, 123, 125, 128, 129, 134, 135, 137, 138, 144, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 182, 185, 188, 202, 213, 216, 226, 228, 235, 236, 237, 238, 239, 250, 256], "Will": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 125, 129, 134, 135, 137, 146, 148, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188], "repositori": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 125, 129, 134, 135, 137, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188, 227, 247], "otherwis": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 125, 129, 134, 135, 137, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 179, 185, 188, 191, 212, 225], "b": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 110, 113, 114, 115, 122, 125, 129, 133, 134, 135, 136, 137, 143, 148, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 188, 199, 217, 227, 235, 238, 256], "wav2vec2": 8, "framework": [8, 69, 156, 163, 166, 171, 243], "alexei": 8, "baevski": 8, "henri": 8, "zhou": 8, "michael": [8, 182], "auli": 8, "asr_wav2vec2_base_960h": 8, "wav2vec2forctctestspec": 8, "whisper": 9, "automat": [9, 118, 120, 137, 163, 176, 249, 250], "recognit": [9, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 67, 71, 78, 93, 131, 134, 135, 137, 241], "asr": 9, "system": [9, 89, 120, 154, 155, 156, 159, 161, 162, 165, 201, 212], "680": 9, "000": [9, 51, 120, 159, 165, 188, 203], "hour": [9, 85, 126, 127], "multilingu": [9, 68, 113, 114, 157, 162, 165, 169, 188], "multitask": [9, 100, 159], "collect": [9, 71, 109, 120, 160, 167, 225, 246], "web": [9, 63, 84, 93, 159, 168, 225, 246], "It": [9, 15, 17, 18, 21, 23, 27, 28, 30, 32, 34, 36, 39, 44, 47, 49, 50, 51, 54, 56, 57, 66, 67, 68, 69, 76, 77, 83, 84, 90, 91, 93, 95, 96, 97, 101, 105, 106, 111, 113, 114, 117, 120, 130, 152, 155, 156, 158, 163, 167, 169, 173, 175, 176, 177, 183, 194, 199, 228, 233, 243, 249, 254], "well": [9, 65, 70, 73, 75, 78, 81, 82, 83, 98, 110, 113, 114, 120, 140, 156, 157, 170, 203], "translat": [9, 126, 156, 159, 162, 163, 165, 171, 188, 241], "those": [9, 93, 118, 136, 250, 251], "english": [9, 50, 93, 104, 120, 162, 164, 165, 176, 179, 188, 228], "moment": [9, 155, 201], "greedi": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "search": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 92, 126, 156, 157, 161, 162, 165, 173, 176, 212], "task": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 67, 69, 75, 76, 78, 88, 90, 91, 92, 93, 95, 96, 98, 100, 101, 102, 104, 109, 110, 113, 114, 115, 120, 137, 153, 156, 158, 159, 163, 164, 165, 170, 171, 202, 205, 212, 241], "asr_whisper_tiny_opt": 9, "whisperforctctestspec": 9, "robust": [9, 100, 168], "larg": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 83, 85, 88, 89, 95, 96, 98, 99, 102, 109, 113, 114, 115, 120, 122, 125, 129, 135, 154, 155, 156, 157, 158, 159, 160, 161, 162, 167, 169, 170, 177, 201], "scale": [9, 67, 76, 77, 78, 88, 89, 96, 98, 101, 102, 113, 114, 154, 155, 156, 158, 159, 160, 161, 162, 165, 167, 168, 171, 212], "weak": [9, 98], "studi": [9, 96, 105, 106, 156, 166, 171], "capabl": [9, 66, 68, 76, 96, 115, 157, 159, 161, 164, 168], "simpli": [9, 84, 100, 251], "amount": [9, 78, 110, 120, 129, 154, 155, 159, 169, 188, 199, 212, 254], "transcript": 9, "internet": 9, "when": [9, 10, 11, 15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 67, 76, 77, 78, 83, 84, 88, 89, 98, 118, 126, 127, 130, 135, 140, 154, 155, 156, 159, 162, 167, 168, 171, 175, 176, 179, 183, 188, 199, 212, 235, 250, 251, 254], "gener": [9, 28, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 88, 89, 92, 94, 96, 98, 100, 101, 104, 107, 109, 115, 118, 120, 134, 135, 137, 140, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 180, 194, 195, 201, 212, 225, 232, 241, 246, 249, 250, 251], "standard": [9, 67, 71, 76, 77, 78, 84, 101, 126, 127, 156, 165, 176, 177, 185, 212], "often": [9, 88, 105, 106, 115], "competit": [9, 113, 114, 120, 162], "prior": [9, 67, 96, 100, 101, 140, 166, 175, 233], "fulli": [9, 104, 227], "zero": [9, 66, 98, 112, 137, 159], "shot": [9, 66, 98, 137, 159], "transfer": [9, 78, 96, 98, 110, 113, 114, 156, 159, 171], "without": [9, 66, 75, 90, 91, 98, 100, 113, 114, 120, 155, 159, 164, 188, 233], "ani": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 92, 97, 98, 100, 110, 111, 117, 120, 135, 159, 162, 171, 175, 193, 194, 228, 241, 247, 250, 251, 256], "compar": [9, 76, 78, 88, 95, 96, 99, 100, 102, 115, 120, 149, 156, 158, 160, 170, 171, 175, 225, 246], "human": [9, 95, 120, 158, 160, 161, 165, 167], "accuraci": [9, 67, 76, 81, 82, 90, 91, 97, 110, 111, 113, 114, 134, 135, 146, 164, 176, 188, 246], "infer": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 75, 89, 90, 91, 93, 96, 115, 154, 155, 158, 160, 164, 166, 198], "code": [9, 63, 66, 95, 97, 100, 101, 104, 105, 106, 111, 113, 114, 120, 122, 156, 158, 164, 166, 168, 169, 170, 171, 233, 247, 255], "serv": [9, 76, 247], "foundat": [9, 160, 161], "further": [9, 10, 88, 100, 120, 134, 135, 140, 168, 204], "work": [9, 67, 96, 100, 101, 109, 122, 140, 154, 156, 160, 162, 163, 167, 171, 182, 212, 243, 249, 251, 255], "e": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 82, 84, 98, 99, 100, 101, 102, 117, 118, 134, 135, 156, 159, 162, 163, 168, 171, 173, 175, 179, 203, 212, 225, 246], "g": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 82, 84, 98, 99, 100, 102, 118, 134, 135, 156, 159, 163, 168, 171, 175, 179, 203, 212, 225, 246], "check": [9, 69, 71, 75, 92, 98, 104, 135, 148, 174, 175, 176, 177, 199, 204, 227, 241, 250, 255], "descript": [9, 82, 100, 107, 120, 126, 160, 167, 176, 183, 211, 213, 241], "minoutputlength": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 153, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "minimum": [9, 44, 50, 68, 69, 70, 71, 72, 73, 74, 75, 77, 97, 111, 118, 120, 122, 132, 134, 135, 138, 148, 149, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 176, 177, 184, 185, 212, 235], "sequenc": [9, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 89, 101, 103, 108, 109, 140, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 179, 201, 212], "maxoutputlength": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "maximum": [9, 28, 44, 50, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 77, 97, 111, 118, 120, 132, 134, 135, 138, 140, 143, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 184, 185, 212], "dosampl": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "sampl": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 140, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "decod": [9, 60, 65, 68, 69, 70, 71, 72, 73, 74, 75, 77, 89, 95, 101, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "temperatur": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 139, 140, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "next": [9, 42, 68, 69, 70, 71, 72, 73, 74, 75, 77, 105, 106, 120, 126, 127, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "probabl": [9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 77, 120, 140, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 212], "topk": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "highest": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 140, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 176, 212], "vocabulari": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 97, 111, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 212], "keep": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 83, 89, 120, 138, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "filter": [9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 113, 114, 120, 133, 134, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 179, 212, 217, 228], "topp": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 139, 140, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "most": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 83, 85, 93, 96, 101, 102, 120, 135, 140, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "add": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 112, 126, 127, 148, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 185, 201, 212, 241, 250], "top_p": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 140, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "higher": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 112, 120, 140, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "kept": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "repetitionpenalti": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "repetit": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "penalti": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "norepeatngrams": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "ngram": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 94, 130, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "occur": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "onc": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "beamsiz": [9, 64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 153, 156, 157, 161, 162, 165, 205, 212], "beam": [9, 68, 69, 70, 71, 72, 73, 74, 75, 77, 156, 157, 161, 162, 165, 212], "mr": [9, 162], "middl": [9, 183, 188], "langaug": [9, 227], "xx": [9, 23, 56, 113, 114, 122, 158, 162, 163, 165], "do": [9, 10, 85, 110, 120, 133, 157, 179, 185, 199, 246, 250, 254], "convert": [10, 60, 77, 79, 84, 94, 102, 107, 112, 126, 127, 130, 133, 138, 140, 156, 171, 184, 186, 188, 191, 194, 195, 225, 246, 253], "back": [10, 85, 140, 156], "try": [10, 175, 235], "re": [10, 92, 98, 104, 250], "analysi": [10, 28, 44, 50, 99, 100, 115, 150, 151, 171, 210, 241, 251], "york": [10, 137, 194], "jersei": [10, 194], "aren": [10, 194], "t": [10, 17, 18, 23, 27, 32, 36, 49, 56, 85, 89, 96, 105, 123, 138, 149, 151, 154, 155, 167, 185, 194, 212], "far": [10, 140, 159, 194], "apart": [10, 81, 82, 194], "actual": [10, 130, 194, 204], "id": [10, 44, 61, 68, 69, 70, 71, 72, 73, 74, 75, 84, 113, 117, 140, 141, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 191, 192, 194, 200, 204, 212, 225, 235], "defin": [10, 11, 133, 134, 135, 175, 179, 183, 194, 217, 225, 227, 246, 250, 254], "amongst": [10, 194], "thing": [10, 161, 175, 194], "explain_document_dl": [10, 194, 199, 217, 227], "chunktodoc": 10, "chunkconvert": 10, "explainresult": [10, 194], "selectexpr": [10, 11, 28, 51, 63, 66, 67, 76, 77, 78, 81, 82, 84, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 123, 125, 126, 127, 128, 129, 130, 133, 136, 137, 138, 146, 148, 149, 151, 155, 163, 178, 179, 182, 184, 185, 186, 191, 193, 194, 217, 235, 236, 237, 249, 250, 255], "explod": [10, 11, 28, 51, 63, 81, 82, 83, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 125, 127, 128, 129, 130, 133, 136, 137, 146, 148, 149, 163, 186, 193, 194, 217, 232, 235, 237, 249, 250, 255], "col": [10, 81, 82, 117, 125, 133, 136, 173, 191, 193, 194, 195, 200, 217, 249], "7": [10, 50, 76, 90, 91, 95, 126, 127, 141, 146, 159, 160, 164, 167, 168, 194, 237, 239, 243, 249], "loc": [10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 118, 133, 134, 135, 194, 199, 217, 227, 235], "22": [10, 194, 235, 249], "part": [11, 93, 120, 123, 145, 146, 154, 155, 160, 178, 188, 191, 212, 237, 241, 256], "tag": [11, 28, 44, 50, 84, 93, 132, 133, 134, 135, 136, 145, 146, 188, 217, 225, 235, 237, 238, 241, 256], "order": [11, 83, 100, 115, 117, 120, 126, 154, 155, 156, 160, 167, 176, 177, 199, 204, 212, 217, 250, 251, 254, 256], "meaning": [11, 178], "phrase": [11, 93, 97, 111, 125, 129], "onto": [11, 217, 251], "pars": [11, 80, 81, 82, 93, 117, 123, 126, 127, 175, 176, 177, 199, 201, 203, 227, 233, 235, 237], "regular": [11, 83, 128, 134, 148], "express": [11, 50, 63, 83, 126, 128, 148], "wrap": 11, "angl": [11, 109], "bracket": 11, "easili": [11, 99, 146, 193, 246], "distinguish": 11, "itself": [11, 120, 165, 171, 188, 202, 251], "form": [11, 28, 44, 50, 112, 117, 123, 125, 126, 128, 129, 149, 151, 176, 177, 188, 193, 225, 235, 236, 250], "peter": [11, 101, 123, 138, 146, 149, 176, 178, 235], "piper": [11, 123, 146, 178], "employe": [11, 123, 146, 178], "pick": [11, 123, 146, 178], "peck": [11, 123, 146, 178], "pickl": [11, 123, 146, 178], "pepper": [11, 123, 146, 178], "nnp": [11, 146, 199, 217, 235, 236, 237, 238, 249, 254, 255, 256], "nn": [11, 146, 235, 236, 237, 238, 256], "vbp": [11, 146, 199, 236, 249, 254, 255], "vbg": [11, 146], "IN": [11, 146, 199, 217, 236, 237, 238, 249, 254, 255], "jj": [11, 146, 199, 217, 235, 237, 249, 254, 255, 256], "enclos": 11, "treat": [11, 175, 188], "group": [11, 89, 154, 155, 160, 164, 169, 185, 212], "so": [11, 17, 18, 23, 28, 36, 49, 50, 56, 85, 120, 133, 140, 149, 162, 202, 225, 246], "here": [11, 123, 217, 233, 250], "specif": [11, 51, 69, 81, 82, 84, 90, 91, 96, 109, 110, 118, 120, 135, 156, 159, 161, 162, 165, 170, 173, 180, 199, 202, 225, 254], "noun": [11, 236], "success": [11, 93, 102, 159], "grammar": [11, 154, 155, 205, 212], "parser": [11, 81, 82, 118, 241], "Of": [11, 88, 188], "postag": 11, "11": [11, 79, 113, 114, 126, 127, 130, 146, 239], "21": [11, 126, 127, 136, 146, 239], "35": [11, 146, 157, 239], "39": [11, 136, 141, 146, 237, 239], "52": [11, 136, 146, 237], "58": [11, 76, 146], "choicesdelimit": [12, 13, 19, 37, 45], "setchoicesdelimit": [12, 13, 19, 37, 45], "coalescesent": [12, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 121, 122], "getclass": [12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 54, 55, 56, 57, 58, 64, 67, 76, 78, 131, 137], "setcoalescesent": [12, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 121, 122], "maxsentencelength": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 205, 212], "setmaxsentencelength": [12, 18, 48, 49, 56, 87, 97, 111, 205, 212], "dropout": [12, 28, 50, 131, 135], "setdropout": [12, 28, 50, 131, 135, 250], "setshuffleperepoch": [12, 44, 225, 246], "setthreshold": [12, 44, 50, 119, 120, 121, 122, 205, 212, 225, 246], "setverbos": [12, 44, 131, 134, 135, 142, 144], "shuffleperepoch": [12, 44], "threshold": [12, 44, 50, 89, 97, 111, 119, 120, 121, 122, 134, 137, 154, 155, 175, 188, 205, 212], "setthresholdlabel": [12, 50, 121, 122], "thresholdlabel": [12, 50, 121, 122], "classifi": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 67, 76, 120, 193, 250], "dl": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 122, 135, 137, 176, 177], "albert": [13, 14, 15, 16, 88], "choic": [13, 19, 37, 45, 105, 106, 128, 161, 164], "linear": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 76, 89, 154, 155, 159, 212], "layer": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 88, 89, 90, 91, 95, 99, 115, 154, 155, 212], "pool": [13, 15, 19, 21, 25, 30, 34, 37, 39, 42, 45, 47, 54, 57, 89, 94, 99, 103, 107, 108, 109, 154, 155, 212], "softmax": [13, 15, 17, 18, 19, 21, 23, 25, 27, 32, 34, 36, 37, 39, 42, 45, 47, 49, 54, 56, 57, 95, 97, 111, 175, 212], "rocstori": [13, 19, 37, 45], "swag": [13, 19, 37, 45], "spanclassifi": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53], "document_quest": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53], "document_context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53], "answer": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 68, 69, 70, 71, 72, 73, 74, 75, 81, 82, 83, 90, 91, 99, 115, 137, 156, 157, 159, 164, 171, 199, 241], "albert_base_uncased_multiple_choic": 13, "allow": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 99, 104, 110, 134, 135, 138, 148, 149, 156, 170, 184, 185, 202, 211], "faster": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 89, 96, 99, 154, 155, 176, 177, 212], "requir": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 81, 82, 88, 91, 92, 95, 98, 99, 104, 110, 113, 114, 120, 135, 138, 152, 175, 186, 188, 191, 193, 198, 204, 241, 244, 249, 250, 251], "8": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 67, 81, 82, 84, 88, 90, 91, 92, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 126, 130, 135, 136, 140, 141, 144, 159, 168, 175, 186, 188, 235, 239, 243], "ignor": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 68, 69, 70, 71, 72, 73, 74, 75, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 125, 130, 133, 137, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 176, 179, 199, 212], "case": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 82, 83, 84, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 117, 122, 125, 129, 138, 157, 160, 167, 175, 176, 179, 185, 191, 212, 235, 236, 250], "512": [13, 15, 17, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36, 37, 39, 42, 45, 47, 49, 51, 54, 56, 57, 85, 92, 98, 99, 102, 103, 104, 108, 109, 163, 212], "question": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 68, 69, 70, 71, 72, 73, 74, 75, 81, 82, 90, 91, 99, 105, 106, 115, 137, 146, 156, 157, 159, 164, 171, 199, 241], "context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 68, 89, 90, 91, 97, 99, 104, 111, 115, 140, 152, 154, 155, 160, 168, 169, 175, 185, 212], "questionansw": [13, 19, 20, 37, 45], "eiffel": [13, 19, 37, 45], "tower": [13, 19, 37, 45], "countri": [13, 19, 37, 45, 175], "germani": [13, 19, 37, 45], "franc": [13, 19, 27, 37, 45, 163], "itali": [13, 19, 37, 45], "split": [13, 19, 37, 45, 66, 67, 75, 76, 77, 78, 83, 85, 89, 148, 149, 154, 155, 163, 182, 183, 184, 188, 212, 232], "bert_base_uncased_multiple_choic": [13, 19, 37], "span": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 156, 170, 171, 233], "squad": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 88, 90, 91, 95, 102, 105, 106, 156], "comput": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 67, 76, 78, 88, 95, 96, 100, 110, 159, 163, 164, 165, 173, 177, 188, 199, 254], "logit": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 32, 33, 34, 36, 38, 39, 41, 42, 46, 47, 49, 52, 53, 54, 56, 57, 140, 154, 155, 212], "albert_base_qa_squad2": 14, "128": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 88, 90, 91, 93, 95, 96, 100, 105, 106, 113, 114, 115, 225, 246], "what": [14, 20, 24, 29, 33, 38, 41, 46, 50, 52, 53, 65, 67, 71, 73, 81, 82, 120, 122, 137, 140, 163, 165, 175, 183, 236, 247], "": [14, 17, 18, 20, 23, 24, 27, 29, 32, 33, 36, 38, 41, 46, 49, 52, 53, 56, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 88, 92, 93, 95, 96, 97, 98, 101, 104, 105, 106, 110, 111, 113, 114, 117, 120, 128, 135, 138, 140, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 183, 184, 185, 188, 190, 194, 199, 212, 217, 223, 225, 233, 243, 244, 246, 249, 250, 251, 254], "my": [14, 16, 17, 20, 22, 24, 28, 29, 31, 33, 35, 38, 40, 41, 42, 43, 46, 48, 50, 52, 53, 55, 58, 83, 84, 85, 128, 130, 137, 140, 148, 158, 159, 160, 162, 166, 167, 168, 169, 179, 182, 184, 201, 250], "clara": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 137], "live": [14, 16, 20, 22, 24, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 137, 159, 160, 225, 246], "berkelei": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 166, 167, 168, 169], "instead": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 91, 120, 122, 126, 127, 171, 193, 194, 198, 199, 254], "per": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 92, 98, 104, 113, 114, 122, 126, 130, 132, 133, 134, 135, 140, 143, 188, 199, 201, 217, 227, 232, 235], "averag": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 92, 94, 98, 100, 104, 107, 113, 114, 122, 135, 146, 173, 212], "regress": [15, 21, 25, 30, 34, 39, 42, 47, 54, 57, 156, 171, 233], "multi": [15, 21, 25, 28, 30, 34, 39, 42, 44, 47, 50, 54, 57, 88, 110, 113, 114, 120, 122, 163, 212], "sequenceclassifi": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57], "albert_base_sequence_classifier_imdb": 15, "activ": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 120, 169, 198, 205, 212, 243], "calcul": [15, 17, 18, 21, 23, 25, 27, 28, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 112, 130, 135, 144, 151, 173, 212], "sigmoid": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 212], "love": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 91, 106, 114, 149, 152, 250], "movi": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 152, 158, 250], "child": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57], "pretti": [15, 18, 21, 23, 30, 32, 34, 36, 39, 44, 47, 49, 54, 56, 57, 120], "bore": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57], "neg": [15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 151, 152, 173, 212, 225, 246], "limit": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 68, 76, 78, 85, 88, 93, 101, 102, 109, 112, 115, 120, 152, 171, 176, 212], "almost": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57], "help": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 68, 74, 81, 82, 83, 88, 89, 140, 141, 154, 155, 157, 160, 161, 163, 167, 185, 201, 212, 225, 246, 251, 255], "feed": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57], "entir": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 103, 108, 109, 163, 168], "one": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 44, 47, 49, 54, 56, 57, 63, 67, 76, 77, 78, 81, 82, 84, 90, 91, 102, 107, 113, 114, 115, 120, 122, 126, 128, 133, 140, 149, 155, 168, 176, 182, 201, 204, 212, 233, 246, 250], "token_classifi": [16, 26, 40, 43, 48, 55, 58], "albert_base_token_classifier_conll03": 16, "tokenclassifi": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58], "john": [16, 22, 31, 35, 40, 43, 48, 55, 58, 63, 91, 106, 114, 117, 118, 136, 138, 149, 195, 239], "lenon": [16, 22, 31, 35, 40, 43, 48, 55, 58], "born": [16, 22, 31, 35, 40, 43, 48, 55, 58, 159, 160], "london": [16, 22, 31, 35, 40, 43, 48, 55, 58], "pari": [16, 22, 31, 35, 40, 43, 48, 55, 58, 137], "sarah": [16, 22, 31, 35, 40, 43, 48, 55, 58], "o": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 133, 134, 135, 136, 199, 217, 227, 235, 238, 256], "modelforsequenceclassif": [17, 18, 23, 27, 32, 36, 49, 56], "nli": [17, 18, 23, 27, 32, 36, 49, 56], "natur": [17, 18, 23, 27, 32, 36, 49, 50, 56, 78, 88, 89, 90, 91, 93, 95, 96, 97, 102, 110, 111, 115, 122, 156, 159, 164, 169, 171, 191, 200, 204], "don": [17, 18, 23, 27, 32, 36, 49, 56, 96, 105, 138], "hardcod": [17, 18, 23, 27, 32, 36, 49, 56], "potenti": [17, 18, 23, 27, 32, 36, 49, 56, 76, 158, 162, 166, 168, 175], "thei": [17, 18, 23, 27, 32, 36, 49, 51, 56, 81, 82, 83, 135, 138, 140, 155, 159, 202, 236, 250], "chosen": [17, 18, 23, 27, 32, 36, 49, 56, 81, 82, 135, 140], "runtim": [17, 18, 23, 27, 32, 36, 49, 56], "usual": [17, 18, 23, 27, 32, 36, 49, 56, 78, 204, 228], "slower": [17, 18, 23, 27, 32, 36, 49, 56], "flexibl": [17, 18, 23, 27, 32, 36, 49, 56, 66, 69, 76], "loop": [17, 18, 23, 36, 49, 56], "through": [17, 18, 23, 36, 49, 56, 88, 102, 118, 120, 130, 162, 165, 167, 195, 251], "longer": [17, 18, 23, 36, 49, 56, 88, 97, 101, 111, 122, 160, 163, 164, 255], "pass": [17, 18, 23, 27, 32, 36, 49, 56, 140], "pose": [17, 18, 23, 27, 32, 36, 49, 56], "premis": [17, 18, 23, 27, 32, 36, 49, 56], "hypothesi": [17, 18, 23, 27, 32, 36, 49, 56], "pair": [17, 18, 23, 27, 32, 36, 49, 56, 66, 98, 104, 118, 162, 225], "albert_base_zero_shot_classifier_onnx": 17, "iphon": 17, "resolv": 17, "asap": 17, "urgent": 17, "albert_zero_shot_classifier_onnx": 17, "bart": [17, 18, 156], "bartforsequenceclassif": 18, "bart_large_zero_shot_classifier_mnli": 18, "bert_base_cased_qa_squad2": 20, "bert_base_sequence_classifier_imdb": 21, "bert_base_token_classifier_conll03": 22, "bert_zero_shot_classifier_mnli": 23, "camembert": [24, 25, 26, 93], "camembert_base_qa_fquad": 24, "fr": [24, 25, 27, 93, 122, 162, 165], "sequence_classifi": 25, "camembert_base_sequence_classifier_allocin": 25, "j": [25, 117], "ai": [25, 140, 141, 156, 161, 225, 246], "ador\u00e9": 25, "ce": 25, "film": 25, "lorsqu": 25, "\u00e9tai": 25, "enfant": 25, "je": 25, "d\u00e9test": 25, "\u00e7a": 25, "camembert_base_token_classifier_wikin": 26, "georg": 26, "washington": 26, "est": [26, 93, 122, 163], "all\u00e9": 26, "\u00e0": 26, "camembert_zero_shot_classifier_xnli_onnx": 27, "multi_class": 27, "setcandidatelabel": [27, 66, 205, 212], "sport": 27, "politiqu": 27, "scienc": [27, 100, 120, 166, 170, 247], "l": [27, 69], "\u00e9quip": 27, "de": [27, 78, 93, 120, 122, 162, 163], "joue": 27, "aujourd": 27, "hui": 27, "au": 27, "parc": 27, "princ": 27, "classifierdl": [28, 250], "univers": [28, 81, 82, 109, 110, 158, 163, 165, 166, 167, 168, 169], "deep": [28, 90, 91, 99, 120, 134, 149, 175, 212], "dnn": 28, "built": [28, 44, 68, 158, 200, 243], "insid": [28, 44, 133, 146, 185, 235], "instanti": [28, 44, 50, 81, 82, 97, 111, 112, 117, 123, 125, 128, 129, 134, 135, 138, 146, 149, 151, 152, 173, 175, 176, 177, 182, 183, 188, 233, 235, 236], "dataset": [28, 44, 50, 81, 82, 93, 97, 98, 100, 101, 102, 105, 106, 109, 111, 112, 120, 122, 134, 135, 144, 149, 159, 161, 162, 165, 166, 168, 170, 175, 188, 223, 227, 235, 236, 237, 238, 244, 253], "monitor": [28, 44, 50, 135, 140, 141, 224, 225, 246], "metric": [28, 44, 50, 135, 177, 225], "done": [28, 44, 50, 105, 106, 134, 135, 251], "settestdataset": [28, 44, 50, 135, 142, 144], "method": [28, 44, 50, 88, 89, 96, 97, 100, 102, 111, 115, 120, 135, 154, 155, 173, 212, 228, 245], "expect": [28, 44, 50, 92, 98, 104, 115, 135, 155, 185, 201, 217], "path": [28, 44, 50, 65, 71, 81, 82, 97, 111, 112, 117, 118, 123, 125, 128, 129, 134, 135, 137, 138, 144, 149, 151, 154, 155, 159, 175, 176, 177, 180, 185, 198, 199, 212, 215, 216, 225, 227, 233, 235, 236, 237, 238, 241, 246], "parquet": [28, 44, 50, 135, 144, 190], "datafram": [28, 44, 50, 97, 111, 112, 135, 144, 146, 173, 188, 198, 199, 212, 213, 217, 223, 225, 227, 233, 235, 236, 237, 238, 246, 250, 254, 256], "ha": [28, 44, 50, 51, 66, 67, 76, 77, 78, 83, 84, 85, 88, 95, 96, 99, 105, 106, 109, 112, 120, 123, 128, 135, 144, 149, 151, 155, 156, 157, 162, 165, 166, 168, 171, 176, 177, 188, 190, 191, 198, 199, 212, 225, 228, 237, 246, 250, 251], "same": [28, 44, 50, 63, 68, 88, 102, 105, 112, 113, 117, 118, 135, 140, 144, 158, 167, 168, 171, 173, 202, 225, 251], "also": [28, 44, 50, 66, 67, 69, 71, 74, 75, 76, 77, 78, 84, 88, 99, 101, 112, 113, 114, 117, 118, 120, 126, 128, 133, 134, 135, 144, 149, 152, 156, 158, 168, 170, 179, 199, 203, 233, 243, 246, 250, 251, 252, 253, 255], "follow": [28, 44, 50, 63, 74, 79, 84, 99, 101, 112, 120, 126, 127, 128, 133, 135, 138, 148, 168, 186, 203, 246, 248, 251], "preprocessingpipelin": [28, 44, 50, 135, 144], "randomsplit": [28, 44, 50, 135, 144], "write": [28, 44, 50, 112, 135, 144, 158, 170, 176, 177, 251], "overwrit": [28, 44, 50, 135, 136, 144, 225], "test_data": [28, 44, 50, 135, 144], "usag": [28, 44, 50, 63, 81, 82, 83, 84, 85, 88, 89, 90, 91, 93, 94, 96, 99, 105, 110, 112, 113, 115, 117, 120, 122, 123, 126, 127, 128, 129, 134, 135, 138, 146, 148, 149, 151, 152, 154, 155, 156, 163, 171, 173, 175, 176, 178, 179, 183, 185, 188], "64": [28, 44, 50, 88, 135, 143, 250], "coeffici": [28, 50, 134, 135], "5": [28, 44, 50, 63, 76, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 126, 127, 130, 133, 135, 140, 141, 146, 152, 159, 167, 168, 169, 188, 193, 199, 212, 217, 225, 227, 236, 237, 238, 239, 246, 249, 250, 256], "enableoutputlog": [28, 44, 50, 135, 142, 144], "stdout": [28, 44, 50, 135, 144], "addit": [28, 44, 50, 81, 82, 90, 91, 117, 134, 135, 140, 144, 148, 155, 159, 170, 185, 225, 233, 249, 250], "evaluationlogextend": [28, 44, 50, 135, 142, 144], "valid": [28, 44, 50, 126, 135, 144, 149, 175, 246], "displai": [28, 44, 50, 144, 159, 225, 233, 246], "lr": [28, 44, 50, 131, 135, 142, 143, 188], "rate": [28, 44, 50, 69, 79, 97, 105, 106, 111, 112, 135, 143, 154, 155, 173, 175, 212], "005": [28, 50, 135, 143], "maxepoch": [28, 44, 50, 131, 132, 134, 135, 142, 143], "epoch": [28, 44, 50, 132, 134, 135, 143, 144, 149, 174, 175, 225], "30": [28, 50, 120, 126, 127, 133, 143, 163, 199, 217, 227, 239, 249], "outputlogspath": [28, 44, 50, 135, 142, 144, 147, 149], "randomse": [28, 44, 50, 131, 132, 134, 135, 142, 143], "random": [28, 44, 50, 97, 111, 132, 134, 135, 140, 143, 163, 173, 193], "seed": [28, 44, 50, 87, 97, 111, 132, 134, 135, 143, 154, 155, 163, 205, 212], "shuffl": [28, 44, 132, 143, 156], "testdataset": [28, 44, 50, 135, 142, 144, 225, 246], "statist": [28, 44, 50, 112, 120, 135, 144], "validationsplit": [28, 44, 50, 135, 142, 144, 147, 149], "choos": [28, 44, 50, 94, 107, 135, 140, 144, 149, 176, 212], "proport": [28, 44, 50, 135, 144, 149, 152], "against": [28, 44, 50, 117, 120, 125, 129, 135, 144, 149, 167, 168, 202], "between": [28, 44, 50, 69, 76, 81, 82, 83, 85, 102, 105, 106, 110, 113, 114, 115, 118, 135, 140, 144, 148, 149, 162, 164, 165, 175, 212], "off": [28, 44, 50, 110, 113, 114, 135, 144, 149, 166], "verbos": [28, 44, 50, 131, 134, 135, 142, 144], "accept": [28, 44, 50, 75, 140], "singl": [28, 44, 50, 69, 98, 100, 112, 118, 120, 156, 162, 173, 182, 183, 185, 201, 212, 232, 235], "item": [28, 50, 112, 140, 225, 235, 246], "doubl": [28, 50, 151, 190, 203], "In": [28, 44, 50, 67, 78, 85, 93, 95, 96, 101, 102, 104, 112, 115, 117, 120, 122, 123, 125, 128, 129, 148, 149, 151, 155, 156, 159, 160, 162, 164, 165, 167, 169, 170, 171, 176, 177, 188, 225, 237, 246, 250, 251, 255, 256], "csv": [28, 50, 117, 144, 203, 250], "best": [28, 50, 88, 93, 98, 100, 105, 106, 120, 122, 135, 140, 156, 158, 162, 170, 250], "wach": [28, 250], "ever": [28, 50, 84, 250], "opinion": [28, 50, 250], "win": [28, 50, 250], "award": [28, 50, 250], "terribl": [28, 50, 250], "act": [28, 50, 208, 250], "bad": [28, 50, 151, 225, 246, 250], "realli": [28, 50, 140, 152, 250], "Then": [28, 44, 134, 135, 162, 165, 204, 225, 243, 250], "trane": 28, "smallcorpu": [28, 50, 250], "header": [28, 50, 51, 201, 203, 250], "src": [28, 50, 66, 67, 76, 77, 78, 81, 82, 112, 123, 125, 128, 129, 134, 135, 146, 155, 176, 177, 182, 188, 235, 236, 237, 238, 239, 250, 256], "useembed": [28, 44, 50, 110, 250], "docclassifi": [28, 44, 50, 250], "setbatchs": [28, 44, 50, 87, 89, 99, 131, 135, 142, 143, 154, 155, 174, 175, 205, 212, 225, 246, 250], "setmaxepoch": [28, 44, 50, 131, 132, 134, 135, 142, 143, 225, 246, 250], "20": [28, 42, 51, 67, 68, 75, 83, 115, 133, 154, 156, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 170, 199, 203, 217, 227, 250], "setlr": [28, 44, 50, 131, 135, 142, 143, 225, 246, 250], "5e": [28, 50, 250], "pipelinemodel": [28, 42, 44, 50, 81, 82, 84, 97, 111, 134, 135, 152, 175, 176, 177, 188, 199, 202, 225, 228, 250, 253], "v": [28, 44, 50, 79, 95, 102, 112, 120, 122, 125, 135, 143, 144, 158, 177, 212, 217], "your": [28, 44, 50, 81, 85, 89, 96, 97, 105, 107, 111, 123, 125, 128, 129, 133, 134, 135, 138, 140, 141, 146, 151, 152, 154, 155, 175, 176, 182, 183, 188, 193, 243, 244, 248, 250, 253, 254, 256], "own": [28, 44, 50, 81, 97, 111, 123, 125, 128, 129, 134, 135, 138, 146, 151, 152, 175, 176, 182, 183, 188, 244, 253, 254, 256], "classifierdl_use_trec6": [28, 250], "trec": 28, "sarcasmdl": [28, 250], "classifierdl_use_sarcasm": [28, 250], "sarcasm": [28, 250], "m": [28, 85, 126, 127, 157, 162, 233, 239, 250], "readi": [28, 227, 243, 250], "could": [28, 96, 120, 128, 144, 175, 249, 250, 251], "put": [28, 217, 250], "word": [28, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 82, 88, 94, 95, 97, 99, 105, 107, 110, 111, 112, 115, 117, 118, 120, 123, 130, 133, 136, 137, 138, 146, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 183, 185, 187, 188, 199, 217, 227, 233, 237, 238, 241, 249, 250], "wake": [28, 250], "am": [28, 83, 126, 127, 154, 158, 159, 160, 161, 162, 166, 167, 168, 169, 182, 250], "mondai": [28, 250], "arrays_zip": [28, 81, 82, 120, 250], "out": [28, 68, 69, 70, 71, 72, 73, 74, 75, 89, 92, 98, 104, 120, 123, 138, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 178, 179, 250], "deberta": [29, 30, 31, 32, 95], "deberta_v3_xsmall_qa_squad2": 29, "v2": [30, 31, 90, 91, 95, 170], "v3": [30, 31], "deberta_v3_xsmall_sequence_classifier_imdb": 30, "deberta_base_sequence_classifier_imdb": 30, "deberta_v3_xsmall_token_classifier_conll03": 31, "deberta_base_zero_shot_classifier_mnli_anli_v3": 32, "distilbert": [33, 34, 36, 37, 96], "distilbert_base_cased_qa_squad2": 33, "distilbert_base_sequence_classifier_imdb": 34, "distilbert_base_token_classifier_conll03": 35, "distilbert_base_zero_shot_classifier_uncased_mnli": 36, "distilbert_base_uncased_multiple_choic": 37, "longform": [38, 39, 40, 101], "longformer_base_base_qa_squad2": 38, "longformer_base_sequence_classifier_imdb": 39, "4096": [39, 68, 88, 101, 155, 212], "xlnet_base_token_classifier_conll03": [40, 58], "longformer_base_token_classifier_conll03": 40, "mpnet": [41, 42, 102], "mpnet_base_question_answering_squad2": 41, "mpnet_sequence_classifier_ukr_messag": 42, "drive": 42, "car": 42, "bu": 42, "arriv": 42, "minut": [42, 44], "pineappl": 42, "pizza": 42, "worst": 42, "transport": 42, "movement": 42, "food": [42, 140, 141, 155], "mpnet_base_sequence_classifier_imdb": 42, "xlm": [43, 52, 53, 54, 55, 113, 114], "roberta": [43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 77, 93, 95, 101, 102, 105, 106, 113, 114, 137, 156], "mpnet_base_token_classifi": [43, 55], "multiclassifierdl": 44, "bidirect": [44, 90, 91, 99, 115, 156], "gru": 44, "convolut": [44, 67, 78], "machin": [44, 67, 83, 85, 97, 111, 120, 134, 156, 159, 162, 163, 165, 171, 225, 233, 248], "strongli": 44, "relat": [44, 81, 82, 118, 255], "variant": [44, 79, 101, 110, 168], "mai": [44, 85, 89, 140, 154, 155, 160, 162, 167, 191, 212, 233, 249, 250, 251, 254, 255], "multiclass": [44, 212], "categor": [44, 228], "precis": [44, 81, 82, 85, 212], "constraint": 44, "mani": [44, 71, 95, 105, 106, 120, 140, 156, 158, 159, 160, 162, 163, 165, 171, 188], "formal": 44, "find": [44, 81, 82, 104, 105, 106, 109, 110, 117, 118, 123, 126, 156, 159, 170, 233], "x": [44, 69, 217, 235, 243, 256], "binari": [44, 198, 205, 213, 225, 232, 233], "y": [44, 85, 243], "multiclassifi": [44, 225, 246], "001": [44, 79, 134, 135], "10": [44, 63, 81, 120, 126, 127, 136, 140, 157, 162, 173, 176, 225, 239, 249], "44": [44, 97, 111, 146, 165], "ed58abb40640f983": 44, "pn": 44, "newsyou": 44, "toxic": [44, 165, 167], "a1237f726b5f5d89": 44, "dude": 44, "place": [44, 78, 155], "obscen": 44, "insult": 44, "24b0d6c8733c2abe": 44, "thank": [44, 115, 120, 157, 239], "8c4478fb239bcfc0": 44, "gee": 44, "traindataset": [44, 225, 246], "printschema": [44, 190, 192, 198, 200, 233], "root": [44, 63, 81, 82, 118, 190, 192, 198, 200, 233, 236], "setcleanupmod": [44, 189, 192, 200], "shrink": [44, 192, 200], "1e": [44, 225, 246], "setvalidationsplit": [44, 142, 144, 147, 149], "multiclassifierdl_use_tox": 44, "comment": [44, 120], "jigsaw": 44, "good": [44, 93, 96, 110, 152], "stuff": 44, "wtf": 44, "kind": [44, 120, 126, 127], "crap": 44, "roberta_base_uncased_multiple_choic": 45, "roberta_base_qa_squad2": [46, 137], "roberta_base_sequence_classifier_imdb": 47, "roberta_base_token_classifier_conll03": 48, "roberta_base_zero_shot_classifier_nli": 49, "sentimentdl": 50, "affect": [50, 185, 212], "subject": [50, 81, 82], "view": 50, "product": [50, 166], "review": [50, 140, 221], "tweet": 50, "interpret": [50, 83, 117, 215], "posit": [50, 95, 96, 102, 113, 114, 115, 120, 133, 140, 151, 152, 155, 173, 184, 188, 204, 212, 225, 246], "final": [50, 83, 101, 105, 106, 113, 114, 122, 135, 162, 175, 250], "otheriws": [50, 122], "neutral": [50, 122], "score": [50, 90, 91, 113, 114, 120, 122, 134, 135, 137, 151, 152, 159], "less": [50, 96, 122, 126, 130, 134, 163, 167, 176], "watch": [50, 152, 158], "32": [50, 88, 89, 99, 154, 155, 212, 239, 249, 255], "p": [50, 84, 97, 111, 122, 135, 144, 154, 155, 162, 183, 212, 233], "sentimentdl_use_imdb": 50, "imdb": 50, "sentimentdl_use_twitt": 50, "wow": 50, "video": [50, 120], "awesom": 50, "bruh": 50, "damn": 50, "wast": [50, 152], "implement": [51, 97, 111, 113, 137, 149, 175, 196, 197], "tapa": 51, "design": [51, 67, 75, 76, 79, 90, 91, 105, 106, 109, 125, 156, 161, 163, 166, 170, 225, 246], "about": [51, 65, 71, 75, 81, 82, 105, 106, 112, 120, 137, 140, 148, 158, 177, 199, 202, 241, 249, 251, 254, 255], "tabular": [51, 203], "tabl": [51, 173, 203, 205, 209], "tri": 51, "share": [51, 120, 251], "its": [51, 78, 95, 96, 101, 115, 120, 146, 151, 155, 156, 163, 164, 166, 167, 168, 169, 170, 179, 225, 237], "table_qa_tapas_base_finetuned_wtq": 51, "table_json": 51, "document_t": [51, 203], "stage": [51, 173, 199, 202, 225, 246, 250, 251, 254], "json_data": 51, "monei": [51, 203], "ag": [51, 92, 98, 104, 203], "donald": [51, 203], "trump": [51, 203], "75": [51, 120, 168, 203], "elon": [51, 203], "musk": [51, 203], "55": [51, 136, 203, 239], "AS": [51, 63, 137], "who": [51, 83, 85, 161, 183, 250], "earn": 51, "count": [51, 140, 175], "old": [51, 63, 237], "xlm_roberta_base_qa_squad2": [52, 53], "xlm_roberta_base_mc": 52, "xlm_roberta_base_sequence_classifier_imdb": 54, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 56, "xlmroberta": 56, "xlnet": [57, 58, 102, 115], "xlnet_base_sequence_classifier_imdb": 57, "bullet": [59, 60, 61, 233], "cleanpostfixpattern": [59, 60], "cleanprefixpattern": [59, 60], "cleanermod": [59, 60], "dash": [59, 60], "extrawhitespac": [59, 60], "ignorecas": [59, 60], "setbullet": [59, 60], "setcleanpostfixpattern": [59, 60], "setcleanprefixpattern": [59, 60], "setcleanermod": [59, 60], "setdash": [59, 60], "setextrawhitespac": [59, 60], "setignorecas": [59, 60], "setstrip": [59, 60], "settrailingpunctu": [59, 60], "strip": [59, 60], "trailingpunctu": [59, 60], "emailaddress": [59, 61], "emaildatetimetzpattern": [59, 61], "extractormod": [59, 61], "imageurlpattern": [59, 61], "ipaddressnamepattern": [59, 61], "ipaddresspattern": [59, 61], "mapiidpattern": [59, 61], "setemailaddress": [59, 61], "setemaildatetimetzpattern": [59, 61], "setextractormod": [59, 61], "setimageurlpattern": [59, 61], "setindex": [59, 61], "setipaddressnamepattern": [59, 61], "setipaddresspattern": [59, 61], "setmapiidpattern": [59, 61], "settextpattern": [59, 61], "setusphonenumberspattern": [59, 61], "textpattern": [59, 61], "usphonenumberspattern": [59, 61], "handl": [60, 68, 156, 164, 215, 234], "postfix": 60, "regex": [60, 83, 84, 117, 126, 128, 138, 175, 176, 177, 184, 185, 188], "prefix": [60, 133, 154, 155, 181, 183, 185, 212, 225, 246], "clean": [60, 84, 138, 156, 171, 204, 251], "bytes_string_to_str": 60, "clean_non_ascii_char": 60, "clean_ordered_bullet": 60, "clean_postfix": 60, "clean_prefix": 60, "remove_punctu": 60, "replace_unicode_quot": 60, "utf": [60, 84], "remov": [60, 84, 105, 106, 138, 152, 184, 193, 194, 195, 241], "extra": [60, 175, 176, 250], "whitespac": [60, 83, 85, 184, 188, 191], "oper": [60, 96, 101, 175, 183, 249], "lead": [60, 88, 93, 103, 108, 109, 113, 114, 161], "trail": 60, "punctuat": [60, 138, 148], "specifi": [61, 67, 89, 136, 137, 140, 149, 154, 155, 173, 212, 235, 236], "email": [61, 230, 233], "timestamp": 61, "includ": [61, 76, 84, 90, 91, 97, 99, 109, 111, 113, 114, 115, 118, 120, 126, 133, 134, 135, 140, 156, 157, 159, 160, 166, 168, 169, 170, 171, 173, 175, 194, 198, 215, 225, 233, 238, 243, 247, 249, 250, 251, 256], "zone": [61, 109], "email_d": 61, "email_address": 61, "ip_address": 61, "ip_address_nam": 61, "mapi_id": 61, "us_phone_numb": 61, "image_url": 61, "text_aft": 61, "text_befor": 61, "url": [61, 100, 233], "after": [61, 79, 81, 82, 97, 105, 106, 110, 111, 126, 127, 133, 140, 158, 164, 183, 204, 225, 243, 249, 250], "befor": [61, 84, 112, 126, 127, 156, 171, 176, 184, 188, 243, 246], "ip": 61, "mapi": 61, "u": [61, 81, 82, 95, 96, 120, 127, 133, 134, 135, 199, 217, 227, 236, 248, 251, 256], "phone": [61, 120, 168], "maxsegmentlength": [62, 63], "setmaxsegmentlength": [62, 63], "settextgenr": [62, 63], "textgenr": [62, 63], "corefer": 63, "resolut": [63, 76], "spanbert": 63, "identifi": [63, 112, 120, 125, 128, 140, 141, 170, 184, 185, 216, 225, 251], "given": [63, 67, 76, 77, 78, 83, 85, 100, 117, 120, 137, 154, 155, 156, 159, 166, 171, 175, 176, 177, 179, 198, 211, 212, 223, 225, 241], "told": [63, 127], "mari": [63, 91, 106, 114, 149], "he": [63, 83, 85, 95, 127, 162, 183, 239], "borrow": 63, "book": [63, 84, 159, 175, 236], "her": [63, 137], "link": [63, 227], "ontonot": 63, "corefresolut": 63, "spanbert_base_coref": 63, "genr": 63, "One": [63, 100, 120, 155, 183, 186], "bc": 63, "broadcast": 63, "convers": 63, "bn": [63, 162], "nw": 63, "wire": 63, "pt": [63, 162], "pivot": [63, 109], "testament": 63, "tc": 63, "telephon": 63, "wb": 63, "mz": 63, "getcandidatelabel": [64, 66], "croppct": [64, 67], "dorescal": [64, 67, 76, 77, 205, 212], "rescalefactor": [64, 67, 76, 77, 205, 212], "setcroppct": [64, 67], "setdorescal": [64, 67, 205, 212], "setrescalefactor": [64, 67, 205, 212], "ignoretokenid": [64, 68, 69, 70, 71, 72, 73, 74, 75, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "maxinputlength": [64, 68, 153, 163], "setbeams": [64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 153, 156, 157, 161, 162, 165, 205, 212], "setdosampl": [64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "setignoretokenid": [64, 68, 69, 70, 71, 72, 73, 74, 75, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "setmaxoutputlength": [64, 68, 69, 70, 71, 72, 73, 74, 75, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "setminoutputlength": [64, 68, 69, 70, 71, 72, 73, 74, 75, 153, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "setnorepeatngrams": [64, 68, 69, 70, 71, 72, 73, 74, 75, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "setrepetitionpenalti": [64, 68, 69, 70, 71, 72, 73, 74, 75, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "settemperatur": [64, 68, 69, 70, 71, 72, 73, 74, 75, 139, 140, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "settopk": [64, 68, 69, 70, 71, 72, 73, 74, 75, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "settopp": [64, 68, 69, 70, 71, 72, 73, 74, 75, 139, 140, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 205, 212], "imagegeneratemod": [64, 69], "numofparallelimag": [64, 69], "setimagegeneratemod": [64, 69], "setnumofparallelimag": [64, 69], "doimagesplit": [64, 75], "imagetoken": [64, 75], "maximages": [64, 75], "numvisiontoken": [64, 75], "paddingconst": [64, 75], "patchsiz": [64, 75], "setdoimagesplit": [64, 75], "setimagetoken": [64, 75], "setmaximages": [64, 75], "setnumvisiontoken": [64, 75], "setpaddingconst": [64, 75], "setpatchs": [64, 75], "setstoptokenid": [64, 75, 153, 157, 161], "stoptokenid": [64, 75, 153, 157, 161], "blip": 65, "visual": [65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 225], "vision": [65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 168], "togeth": [65, 70, 73, 75, 100, 155], "visualqaclassifi": [65, 69, 70, 71, 72, 73, 74, 75], "blip_vqa_bas": 65, "50": [65, 68, 69, 70, 71, 72, 73, 74, 135, 136, 146, 156, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 170, 239], "image_df": [65, 71], "sparksessionfortest": [65, 71], "images_path": [65, 71], "test_df": [65, 69, 70, 71, 72, 73, 74], "withcolumn": [65, 71, 155], "lit": [65, 71, 155], "pictur": [65, 70, 71, 73], "setsiz": [65, 205, 212], "384": [65, 69, 75], "cat_imag": [65, 70, 71, 73, 74], "jpg": [65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 78, 155], "cat": [65, 66, 67, 70, 71, 73, 74, 76, 77, 78, 155], "abov": [65, 112, 118, 237], "skip": [65, 97, 111, 118, 175], "blip_vqa_tf": 65, "clip": [66, 155], "contrast": [66, 98, 100, 101, 104, 125, 171], "neural": [66, 78, 90, 91, 95, 135, 149, 156, 163], "network": [66, 78, 90, 91, 99, 135, 149], "abil": [66, 109, 120, 156, 158, 159, 164], "hard": [66, 178], "make": [66, 67, 75, 76, 84, 89, 93, 101, 102, 113, 114, 120, 140, 141, 149, 152, 154, 155, 156, 161, 164, 170, 176, 243, 252, 256], "veri": [66, 77, 78, 83, 93, 99, 113, 114, 115, 152, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 199, 249, 251, 254, 255], "gpt": [66, 105, 140, 156, 159, 168], "imageclassifi": [66, 67, 76, 77, 78], "zero_shot_classifier_clip_vit_base_patch32": 66, "huggingfac": [66, 67, 69, 71, 74, 75, 76, 77, 78, 93, 167, 168], "librari": [66, 67, 69, 71, 74, 75, 76, 77, 78, 89, 122, 154, 155, 191, 192, 193, 200, 204, 244, 255], "clipforzeroshotclassificationtestspec": 66, "candidatelabel": [66, 205, 212], "imagedf": [66, 67, 76, 77, 78], "dropinvalid": [66, 67, 76, 77, 78], "photo": 66, "bird": [66, 77, 155], "dog": [66, 72, 77, 155], "hen": [66, 67, 76, 77, 78, 155], "hippo": [66, 67, 76, 78, 155], "room": [66, 77, 155, 201], "tractor": [66, 67, 76, 77, 78, 155], "ostrich": [66, 67, 76, 77, 78, 155], "ox": [66, 67, 76, 77, 78, 155], "pipelinedf": [66, 67, 76, 77, 78], "revers": [66, 67, 76, 77, 78, 155], "image_nam": [66, 67, 76, 77, 78, 155], "palac": [66, 67, 76, 77, 78, 155], "jpeg": [66, 67, 76, 77, 78, 155, 198], "egyptian_cat": [66, 67, 76, 77, 78, 155], "hippopotamu": [66, 67, 76, 77, 78, 155], "junco": [66, 67, 76, 77, 78, 155], "bluetick": [66, 67, 72, 76, 77, 78, 155], "chihuahua": [66, 67, 76, 77, 78, 155], "image_classifier_vit_base_patch16_224": [66, 78], "convnet": 67, "convnext": 67, "2020": [67, 120, 126, 127, 149], "zhuang": 67, "liu": [67, 76, 95, 105, 106], "hanzi": 67, "mao": 67, "chao": 67, "yuan": 67, "wu": 67, "christoph": 67, "feichtenhof": 67, "trevor": 67, "darrel": 67, "sain": 67, "xie": 67, "pure": [67, 75, 78, 163], "inspir": [67, 152, 166, 176, 177, 221], "claim": 67, "outperform": [67, 71, 98, 101, 102, 104, 109, 110, 113, 114, 115, 120, 158, 159, 160, 161, 167, 170], "convnextforimageclassificationtestspec": 67, "roar": 67, "began": 67, "introduct": 67, "vit": [67, 77, 78], "quickli": [67, 140], "supersed": 67, "vanilla": 67, "hand": [67, 183], "face": [67, 109], "difficulti": 67, "detect": [67, 76, 110, 121, 122, 140, 141, 147, 148, 149, 241], "semant": [67, 76, 92, 99, 100, 109, 110, 173, 188], "hierarch": [67, 76, 97, 111], "swin": [67, 76], "reintroduc": 67, "sever": [67, 155, 170, 232, 256], "practic": [67, 93, 156, 164, 171], "viabl": 67, "backbon": [67, 76, 115], "demonstr": [67, 76, 96, 101, 109, 120, 159, 161, 162, 163], "remark": [67, 161], "wide": [67, 84, 90, 91, 95, 96, 98, 113, 114, 156, 160, 170], "varieti": [67, 101, 102, 113, 114, 157, 255], "howev": [67, 88, 102, 107, 109, 115, 120, 138, 160, 162, 165, 228, 249], "effect": [67, 76, 77, 78, 101, 109, 140, 148, 156, 162, 164, 165, 171, 212], "hybrid": 67, "still": [67, 159, 225], "credit": 67, "superior": [67, 161], "inher": 67, "induct": [67, 96], "bias": [67, 96, 166, 167], "reexamin": 67, "space": [67, 97, 109, 111, 112, 130, 155, 173, 204], "achiev": [67, 95, 98, 100, 101, 102, 105, 106, 113, 114, 115, 135, 156, 158, 159, 160, 163, 165, 168, 171, 199, 254], "gradual": 67, "modern": [67, 165], "resnet": 67, "toward": [67, 155, 159, 165], "discov": [67, 247], "compon": [67, 78, 109, 190, 198, 254], "contribut": [67, 160, 167], "along": [67, 118, 198], "wai": [67, 81, 82, 117, 118, 166, 167, 168, 169, 202, 227], "outcom": 67, "explor": [67, 109, 156, 162, 167, 171], "famili": [67, 68, 84, 98, 160, 161, 168, 233], "dub": [67, 113, 114], "construct": [67, 97, 111, 185, 227, 253], "compet": 67, "favor": 67, "term": [67, 120], "scalabl": [67, 233], "87": [67, 76], "imagenet": [67, 76, 78], "coco": [67, 76], "ade20k": [67, 76], "while": [67, 69, 75, 76, 78, 88, 96, 100, 112, 120, 140, 144, 155, 159, 162, 165, 225, 246, 251], "maintain": [67, 75], "simplic": [67, 156], "effici": [67, 75, 76, 95, 97, 110, 111, 161, 163, 164, 170, 249], "dores": [67, 76, 77, 78, 205, 212], "resiz": [67, 76, 77, 78, 212], "certain": [67, 76, 77, 78, 175, 212], "donorm": [67, 76, 77, 78, 205, 212], "deviat": [67, 76, 77, 78, 212], "featureextractortyp": [67, 76, 77, 78, 205, 212], "architectur": [67, 69, 75, 76, 77, 78, 88, 90, 91, 95, 105, 122, 135, 149, 156, 165, 166, 169, 171, 212], "featur": [67, 68, 74, 76, 77, 78, 81, 97, 103, 108, 109, 111, 120, 130, 134, 144, 152, 155, 164, 173, 212, 225, 253], "imagemean": [67, 76, 77, 78, 205, 212], "imagestd": [67, 76, 77, 78, 205, 212], "resampl": [67, 76, 77, 78, 205, 212], "pil": [67, 76, 77, 78, 212], "nearest": [67, 76, 77, 78, 173, 212], "bilinear": [67, 76, 77, 78, 212], "bicub": [67, 76, 77, 78, 212], "do_res": [67, 76, 77, 78, 212], "tupl": [67, 76, 77, 78, 201, 212, 223], "rescal": [67, 76, 77, 212], "factor": [67, 76, 77, 89, 113, 114, 115, 154, 155, 156, 171, 175, 212], "percentag": [67, 112, 175, 188], "crop": 67, "tabbi": [67, 76], "river": [67, 76, 78], "hors": [67, 76, 78], "amphibiu": [67, 76, 78], "snowbird": [67, 76, 78], "struthio": [67, 76, 78], "camelu": [67, 76, 78], "thresher": 67, "thrasher": 67, "thresh": 67, "image_classifier_convnext_tiny_224_loc": 67, "determin": [67, 113, 201, 212], "smaller": [67, 85, 96, 97, 111], "224": 67, "256": [67, 155], "edg": [67, 96, 118, 158, 161], "afterward": 67, "boolean": [67, 126, 212], "255": [67, 212], "gemma": 68, "merger": [68, 72], "merg": [68, 72, 118, 125, 129], "lightweight": [68, 75, 168], "open": [68, 71, 75, 104, 122, 157, 158, 160, 161, 162, 166, 167, 168, 170, 185, 191, 192, 193, 200, 204, 247], "googl": [68, 88, 90, 91, 95, 97, 99, 105, 106, 110, 111, 120, 171, 236], "research": [68, 88, 90, 91, 95, 97, 111, 157, 163, 165, 166, 167, 171], "technologi": [68, 120], "gemini": 68, "128k": [68, 168], "window": [68, 76, 77, 97, 101, 110, 111, 120, 135, 164, 169, 175], "140": [68, 122], "multimod": [68, 69, 71, 74, 75, 155, 158, 198], "both": [68, 90, 91, 98, 99, 104, 110, 118, 140, 156, 161, 166, 168, 169, 250, 251], "optim": [68, 71, 89, 97, 105, 106, 108, 109, 111, 135, 137, 149, 154, 155, 157, 160, 161, 167, 168, 212], "deploy": 68, "laptop": 68, "desktop": [68, 84], "cloud": [68, 120], "visualqa": [68, 75], "gemma3_4b_it_int4": 68, "9": [68, 95, 113, 114, 130, 141, 154, 158, 162, 168, 249, 254, 255], "assist": [68, 69, 71, 72, 73, 74, 75, 157, 161, 170, 201, 217], "start_of_imag": 68, "describ": [68, 72, 74, 75, 81, 82, 104, 118, 120, 163], "end_of_turn": 68, "start_of_turn": 68, "testdf": [68, 75], "use_openvino": [68, 69, 70, 71, 72, 73, 74, 75, 90, 91, 98, 104, 105, 113, 157, 158, 160, 161, 162, 164, 165, 167, 168, 169, 170], "http": [68, 69, 70, 71, 72, 73, 74, 75, 88, 93, 95, 97, 99, 100, 104, 110, 111, 140, 141, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 188, 212, 233, 247], "arxiv": [68, 69, 70, 71, 72, 73, 74, 75, 101, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "pdf": [68, 69, 70, 71, 72, 73, 74, 75, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212, 230, 232, 233], "1909": [68, 69, 70, 71, 72, 73, 74, 75, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "05858": [68, 69, 70, 71, 72, 73, 74, 75, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "__": [68, 69, 70, 71, 72, 73, 74, 75, 84, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 193, 194, 212], "gram": [68, 69, 70, 71, 72, 73, 74, 75, 92, 97, 98, 104, 111, 120, 130, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "ctrl": [68, 69, 70, 71, 72, 73, 74, 75, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "condit": [68, 69, 70, 71, 72, 73, 74, 75, 90, 91, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "control": [68, 69, 70, 71, 72, 73, 74, 75, 140, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 212], "cumul": [68, 69, 70, 71, 72, 73, 74, 75, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 212], "janu": 69, "alongsid": [69, 71, 170], "novel": [69, 95, 102, 109, 115, 120, 156, 165], "autoregress": [69, 115], "unifi": [69, 156, 171], "understand": [69, 90, 91, 96, 102, 113, 115, 120, 156, 161, 167, 168, 170, 171, 188, 249], "decoupl": 69, "separ": [69, 83, 85, 96, 105, 128, 130, 148, 149, 176, 185, 188, 194, 217, 232, 235, 248], "pathwai": 69, "allevi": 69, "conflict": 69, "role": [69, 201], "enhanc": [69, 95, 152, 156, 161, 164, 167], "surpass": [69, 76, 95, 104, 158, 164], "previou": [69, 76, 100, 102, 113, 114, 159, 161, 165, 169, 208, 250], "exce": [69, 105, 106, 140], "deepseek": 69, "llm": [69, 71, 109, 160, 161, 167, 170], "3b": [69, 170], "approxim": [69, 173], "500b": 69, "emploi": [69, 85, 115], "siglip": 69, "downsampl": 69, "16": [69, 88, 115, 136, 237, 249], "janus_1_3b_int4": 69, "suit": [69, 71, 74, 75, 108], "larger": [69, 71, 75, 77, 89, 93, 96, 105, 106, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 173], "parallel": [69, 89, 148, 149, 199, 212, 235, 254], "llava": 70, "llava_1_5_7b_hf": 70, "unusu": [70, 71, 73, 74], "aspect": [70, 71, 73, 164], "presenc": [70, 71, 73, 154, 155, 212], "ly": [70, 71, 73, 74, 155], "pink": [70, 71, 73, 74, 155], "couch": [70, 71, 73, 74, 77], "llama": [71, 89, 154, 155, 160, 161, 164, 167, 198, 201], "compris": [71, 140], "11b": 71, "90b": 71, "These": [71, 76, 88, 105, 106, 109, 115, 120, 134, 159, 161, 201, 227, 248], "reason": [71, 83, 85, 140, 157, 167, 168, 170], "caption": [71, 77, 155], "proprietari": [71, 166], "industri": [71, 84], "llama_3_2_11b_vision_instruct_int4": 71, "begin_of_text": 71, "start_header_id": [71, 161, 201], "end_header_id": [71, 161, 201], "eot_id": [71, 201], "paligemma": 72, "paligemma_3b_pt_224_int4": 72, "stand": [72, 77, 90, 91, 155, 164], "grassi": [72, 155], "field": [72, 77, 97, 111, 112, 117, 129, 155, 166, 167, 168, 169, 241], "phi_3_vision_128k_instruct": 73, "phi3v": 73, "qwen2": [74, 169], "integr": [74, 115, 120, 139, 163, 225, 246, 248], "respons": [74, 140, 149, 160, 161, 167, 170], "queri": [74, 92, 98, 104, 160, 164, 169, 173, 247], "qwen2_vl_2b_instruct_int4": 74, "im_end": 74, "im_start": 74, "vision_start": 74, "image_pad": 74, "vision_end": 74, "becaus": [74, 140, 151, 243], "smolvlm": 75, "compact": 75, "arbitrari": [75, 156], "produc": [75, 250], "stori": 75, "ground": [75, 77], "Its": [75, 76, 82, 137, 156], "suitabl": [75, 160, 167], "devic": [75, 96], "strong": [75, 98, 113, 114, 166, 167, 168, 169], "smolvlm_instruct_int4": 75, "49153": 75, "81": [75, 237], "patch": [75, 78], "14": [75, 133, 146, 186, 199, 217, 227, 237], "pad": [75, 238], "constant": [75, 211, 213], "openvino": [75, 90, 91, 98, 105, 113], "stop": [75, 120, 134, 139, 140, 154, 155, 157, 161, 171, 179, 212, 229, 241], "termin": 75, "swinimageclassif": 76, "shift": 76, "ze": 76, "yutong": 76, "lin": 76, "yue": [76, 165], "cao": 76, "han": 76, "hu": [76, 162], "yixuan": 76, "zheng": 76, "zhang": 76, "stephen": 76, "bain": 76, "guo": 76, "basic": [76, 120, 148, 201, 243, 249], "whose": [76, 168], "scheme": [76, 105, 156], "bring": [76, 162, 250], "greater": [76, 120, 140, 154, 155, 212], "attent": [76, 78, 89, 95, 101, 140, 154, 155, 160, 164, 169, 212], "non": [76, 158, 162, 167, 185, 188], "overlap": [76, 83, 85, 125, 129], "cross": [76, 113, 114, 136], "connect": 76, "image_classifier_swin_base_patch4_window7_224": 76, "swinforimageclassificationtest": 76, "present": [76, 88, 98, 99, 101, 105, 106, 110, 113, 114, 118, 140, 144, 149, 156, 163, 173], "call": [76, 90, 91, 96, 98, 109, 120, 140, 159, 160, 167, 168, 223, 228, 235, 250, 256], "purpos": [76, 96, 98, 149], "adapt": [76, 169], "aris": 76, "domain": [76, 100, 109, 120, 159, 233], "variat": 76, "high": [76, 89, 108, 109, 110, 113, 114, 154, 155, 156, 162, 163, 165, 168, 170, 212, 233], "variou": [76, 109, 115, 164, 167, 170, 233, 242], "complex": [76, 99, 109, 110, 120, 164, 176, 177], "respect": [76, 95, 112, 134, 135, 168, 237], "broad": [76, 83, 159], "rang": [76, 90, 91, 95, 96, 98, 100, 113, 114, 154, 155, 156, 160, 161, 167, 212], "1k": 76, "dens": [76, 90, 91, 92, 162, 168, 173], "box": [76, 162, 165, 233], "ap": 76, "51": [76, 192, 200, 237], "53": [76, 125, 129], "miou": 76, "val": 76, "margin": [76, 102, 115, 233], "prove": 76, "benefici": [76, 120], "mlp": 76, "visionencoderdecod": 77, "auto": [77, 156, 180], "beit": 77, "deit": 77, "gpt2": [77, 159], "image_captioning_vit_gpt2": 77, "visionencoderdecodertestspec": 77, "nreturnsequ": [77, 205, 212], "computation": [77, 99, 105, 106, 115, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171], "expens": [77, 99, 105, 106, 115, 151, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 176], "especi": [77, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171], "recommend": [77, 89, 99, 115, 140, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 243], "imagecapt": 77, "fill": [77, 156, 241], "furnitur": 77, "lai": [77, 165], "anoth": [77, 155, 212, 251], "brown": [77, 155], "bear": 77, "bodi": [77, 155, 233], "water": [77, 155], "flock": 77, "chicken": [77, 155], "lush": 77, "green": [77, 155], "small": [77, 78, 84, 88, 89, 93, 96, 97, 104, 111, 123, 146, 154, 155, 165, 167, 168, 170, 199, 212, 237, 254], "wet": 77, "wooden": 77, "floor": [77, 155], "wear": [77, 155], "blue": 77, "sweater": [77, 155], "man": [77, 89, 155, 159, 160], "cow": 77, "altern": [78, 120, 140, 151, 175, 176, 177, 199, 203, 250, 255], "vitimageclassificationtestspec": 78, "becom": [78, 88, 96, 120, 166], "facto": [78, 120], "remain": [78, 84, 88, 96, 120, 241], "conjunct": 78, "overal": [78, 112, 115, 158, 168], "structur": [78, 137, 185, 204, 249], "relianc": [78, 109], "cnn": [78, 122, 135, 149], "necessari": [78, 96, 246, 253], "directli": [78, 162, 165, 199, 225, 228, 246], "mid": 78, "cifar": 78, "vtab": 78, "etc": [78, 94, 98, 100, 102, 158, 169, 193, 204, 246], "attain": 78, "excel": [78, 115, 164, 233], "substanti": [78, 90, 91], "fewer": [78, 88, 100, 173], "worth": 78, "16x16": 78, "egyptian": [78, 165], "date_chunk": 79, "omicron": 79, "covid": 79, "world": [79, 83, 84, 85, 103, 108, 109, 164, 166, 167, 168, 169, 182, 225, 239, 246], "health": 79, "organ": [79, 120, 163, 201], "nov": [79, 126, 127, 237], "26": [79, 133, 199, 217, 227, 239], "2021": [79, 126, 127], "118": [79, 203], "121": 79, "01": [79, 126, 127, 128], "dependencytreebank": [80, 81], "numberofiter": [80, 81, 82], "setconllu": [80, 81, 82], "setdependencytreebank": [80, 81], "setnumberofiter": [80, 81, 82], "conll2009": [80, 82], "setconll2009": [80, 82], "conllformat": [80, 82], "traindependencypip": [80, 82], "trainopt": [80, 82], "trainparamet": [80, 82], "dependencypars": [81, 82, 118], "unlabel": [81, 90, 91, 156, 159, 171], "grammat": [81, 82], "inform": [81, 82, 100, 102, 112, 113, 120, 126, 133, 154, 155, 156, 175, 192, 200, 233, 238, 244, 246, 247, 248, 249, 250, 256], "relationship": [81, 82, 110, 118], "tell": [81, 82, 120, 217], "verb": [81, 82, 236], "modifi": [81, 82, 105, 106, 133, 140, 149], "particular": [81, 82, 120, 228, 250], "treebank": 81, "penn": 81, "converg": [81, 82, 146, 188], "better": [81, 82, 88, 95, 102, 115, 120, 134, 146, 148, 149, 152, 156, 158, 160, 188], "postagg": [81, 82, 118, 134, 146], "dependency_treebank": 81, "emptydataset": [81, 82], "tree": [81, 118], "bank": 81, "dep": 81, "dependency_conllu": [81, 118], "typeddependencyparsermdoel": 81, "union": [81, 82], "worker": [81, 82], "turner": [81, 82], "newal": [81, 82], "sai": [81, 82, 120, 185], "disappoint": [81, 82], "talk": [81, 82, 140], "stricken": [81, 82], "firm": [81, 82], "feder": [81, 82], "mogul": [81, 82], "typeddependencypars": [82, 118], "beforehand": 82, "2009": 82, "dependency_typ": [82, 118], "train_smal": 82, "txt": [82, 97, 111, 112, 123, 125, 128, 129, 146, 149, 151, 175, 176, 177, 182, 185, 230, 233, 237, 238, 256], "typdep": 82, "dependency_typed_conllu": [82, 118], "amod": 82, "flat": [82, 118, 195], "nsubj": [82, 118, 195, 236], "parataxi": 82, "pipe": 82, "roughli": 83, "subtext": 83, "perfect": [83, 85], "observ": [83, 85, 110], "seen": [83, 85, 156], "addition": [83, 85, 115, 135, 146, 164, 169, 192, 200, 227], "trim": [83, 85], "individu": [83, 85, 120, 175], "documentcharactertextsplittertest": 83, "decreas": [83, 140, 173], "prioriti": [83, 176, 185], "brioni": 83, "lodg": 83, "serpentin": 83, "aven": 83, "19798": 83, "39395": 83, "19597": 83, "did": [83, 120, 164, 169], "woman": 83, "think": 83, "39371": 83, "59242": 83, "19871": 83, "But": [83, 85, 92, 98, 104], "said": [83, 85], "million": [83, 104, 120, 136, 159], "red": [83, 155], "men": 83, "59166": 83, "77833": 83, "18667": 83, "friend": 83, "enthusiast": 83, "musician": 83, "being": [83, 96, 135, 140, 144, 156, 160, 163, 168, 171, 173], "himself": 83, "capab": 83, "77835": 83, "97769": 83, "19934": 83, "And": 83, "yet": [83, 228], "convinc": 83, "come": [83, 120, 133, 140, 160, 166], "li": [83, 168], "97771": 83, "117248": 83, "19477": 83, "she": [83, 183], "had": [83, 120, 140], "slate": 83, "colour": 83, "brim": 83, "straw": 83, "hat": 83, "feather": 83, "117250": 83, "137242": 83, "19992": 83, "That": [83, 120, 183, 225, 246, 251], "littl": [83, 149, 255], "paradox": 83, "profoundli": 83, "singulari": 83, "137244": 83, "157171": 83, "19927": 83, "raw": [84, 155, 159, 183, 185, 188, 198, 249, 251], "scrape": 84, "page": [84, 159, 166, 227, 232, 244, 245, 253, 255], "xml": 84, "dirti": [84, 138], "want": [84, 85, 117, 136, 228, 251], "pretty_al": 84, "normalizeddocu": 84, "div": [84, 233], "theworldsgreatest": 84, "right": [84, 90, 91, 156, 188], "hide": 84, "toptext": 84, "style": [84, 122, 171, 233], "font": [84, 233], "sego": 84, "ui": 84, "arial": 84, "san": [84, 120, 233], "serif": [84, 233], "largest": [84, 120, 159], "develop": [84, 120, 160, 161, 163, 165, 166, 167, 170, 218], "site": [84, 120, 158], "h1": 84, "300": 84, "160": 84, "lorem": [84, 125, 129], "ipsum": [84, 125, 129], "typeset": 84, "been": [84, 93, 159, 160, 161, 167, 186, 204, 228], "1500": [84, 162], "unknown": [84, 85, 122], "printer": 84, "took": [84, 165], "gallei": 84, "scrambl": 84, "specimen": 84, "surviv": 84, "five": [84, 136, 155], "centuri": [84, 164, 188], "leap": 84, "electron": 84, "essenti": [84, 159, 166], "unchang": 84, "popularis": 84, "1960": 84, "letraset": 84, "sheet": [84, 244], "passag": [84, 92, 98, 104], "recent": [84, 90, 91, 95, 105, 106, 120, 140, 156], "publish": [84, 105, 106], "softwar": [84, 170], "aldu": 84, "pagemak": 84, "measur": [85, 96, 105, 106, 156, 168, 225], "futur": [85, 149, 156, 171], "techniqu": [85, 88, 95, 156, 159, 161, 165, 171, 173], "documenttokensplittertest": 85, "immens": 85, "faculti": 85, "extraordinari": 85, "power": [85, 90, 91, 156, 166, 171, 233], "2950": 85, "5707": 85, "2757": 85, "chang": [85, 100, 212, 221], "cloth": 85, "imagin": 85, "deduc": 85, "As": [85, 88, 90, 91, 92, 96, 98, 104, 120, 140, 166, 232], "5659": 85, "8483": 85, "2824": 85, "quarter": 85, "receiv": [85, 237, 256], "Be": 85, "chamber": 85, "8427": 85, "11241": 85, "2814": 85, "piti": 85, "miss": [85, 126, 127, 191], "client": 85, "never": [85, 152, 250], "mind": [85, 165], "him": [85, 127], "11188": 85, "13970": 85, "2782": 85, "person": [85, 117, 236], "me": [85, 127, 161], "wish": 85, "agent": 85, "conf": 85, "13918": 85, "16898": 85, "2980": 85, "letter": [85, 138, 159, 160, 175, 237, 256], "secret": 85, "marriag": 85, "16836": 85, "19744": 85, "2908": 85, "seven": 85, "hundr": [85, 113, 114], "holm": [85, 175], "scribbl": 85, "receipt": 85, "shee": 85, "19683": 85, "22551": 85, "2868": 85, "defragmentationthreshold": [87, 89, 154, 155, 205, 212], "flashattent": [87, 89, 154, 155, 205, 212], "getmetadata": [87, 89, 205, 212], "gpusplitmod": [87, 89, 154, 155, 205, 212], "grpattnn": [87, 89, 154, 155, 205, 212], "grpattnw": [87, 89, 154, 155, 205, 212], "maingpu": [87, 89, 154, 155, 205, 212], "nbatch": [87, 89, 154, 155, 205, 212], "nchunk": [87, 89, 154, 155, 205, 212], "nctx": [87, 89, 154, 155, 205, 212], "ngpulay": [87, 89, 154, 155, 205, 212], "nsequenc": [87, 89, 154, 155, 205, 212], "nthread": [87, 89, 154, 155, 205, 212], "nthreadsbatch": [87, 89, 154, 155, 205, 212], "nubatch": [87, 89, 154, 155, 205, 212], "nokvoffload": [87, 89, 154, 155, 205, 212], "numastrategi": [87, 89, 154, 155, 205, 212], "poolingtyp": [87, 89, 154, 155, 205, 212], "ropefreqbas": [87, 89, 154, 155, 205, 212], "ropefreqscal": [87, 89, 154, 155, 205, 212], "ropescalingtyp": [87, 89, 154, 155, 205, 212], "setdefragmentationthreshold": [87, 89, 205, 212], "setflashattent": [87, 89, 205, 212], "setgpusplitmod": [87, 89, 205, 212], "setgrpattnn": [87, 89, 205, 212], "setgrpattnw": [87, 89, 205, 212], "setmaingpu": [87, 89, 205, 212], "setnbatch": [87, 89, 205, 212], "setnchunk": [87, 89, 205, 212], "setnctx": [87, 89, 154, 155, 205, 212], "setngpulay": [87, 89, 154, 155, 205, 212], "setnparallel": [87, 89, 205, 212], "setnsequ": [87, 89, 205, 212], "setnthread": [87, 89, 205, 212], "setnthreadsbatch": [87, 89, 205, 212], "setnubatch": [87, 89, 205, 212], "setnokvoffload": [87, 89, 205, 212], "setnumastrategi": [87, 89, 205, 212], "setpoolingtyp": [87, 89, 205, 212], "setropefreqbas": [87, 89, 205, 212], "setropefreqscal": [87, 89, 205, 212], "setropescalingtyp": [87, 89, 205, 212], "settensorsplit": [87, 89, 205, 212], "setusemlock": [87, 89, 205, 212], "setusemmap": [87, 89, 205, 212], "setyarnattnfactor": [87, 89, 205, 212], "setyarnbetafast": [87, 89, 205, 212], "setyarnbetaslow": [87, 89, 205, 212], "setyarnextfactor": [87, 89, 205, 212], "setyarnorigctx": [87, 89, 205, 212], "tensorsplit": [87, 89, 154, 155, 205, 212], "usemlock": [87, 89, 154, 155, 205, 212], "usemmap": [87, 89, 154, 155, 205, 212], "yarnattnfactor": [87, 89, 154, 155, 205, 212], "yarnbetafast": [87, 89, 154, 155, 205, 212], "yarnbetaslow": [87, 89, 154, 155, 205, 212], "yarnextfactor": [87, 89, 154, 155, 205, 212], "yarnorigctx": [87, 89, 154, 155, 205, 212], "islong": [87, 91], "setislong": [87, 91], "poolingstrategi": [87, 94, 103, 107, 108, 109], "setpoolingstrategi": [87, 94, 103, 107, 108, 109], "setskipoov": [87, 94], "skipoov": [87, 94], "maxit": [87, 97, 111], "mincount": [87, 97, 111, 174, 175], "numpartit": [87, 97, 111], "setmaxit": [87, 97, 111], "setmincount": [87, 97, 111, 174, 175], "setnumpartit": [87, 97, 111], "setse": [87, 97, 111, 205, 212], "setsteps": [87, 97, 111], "setvectors": [87, 97, 111], "setwindows": [87, 97, 111, 119, 120], "stepsiz": [87, 97, 111], "vectors": [87, 97, 111], "windows": [87, 97, 111, 119, 120], "getvector": [87, 97, 111], "poolinglay": [87, 99], "setpoolinglay": [87, 99], "setinstruct": [87, 100], "loadsp": [87, 110], "setloadsp": [87, 110], "readcaches": [87, 112], "setreadcaches": [87, 112], "setwritebuffers": [87, 112], "writebuffers": [87, 112], "databas": [87, 112, 116, 117, 124, 125, 215], "loadstorag": [87, 112, 116, 117, 124, 125, 205, 215], "overallcoverag": [87, 112], "withcoveragecolumn": [87, 112], "lite": 88, "toyota": 88, "technolog": 88, "institut": 88, "chicago": 88, "offici": [88, 120, 133, 134, 135, 199, 217, 227, 247], "tf": [88, 110], "wrapper": 88, "port": 88, "albert_base_uncas": 88, "albert_bas": 88, "768": [88, 90, 91, 92, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115], "emb": [88, 104, 108], "dim": [88, 89, 154, 155, 212], "12m": 88, "albert_large_uncas": 88, "albert_larg": 88, "1024": [88, 99, 101, 115], "24": [88, 115, 125, 129, 133, 175, 199, 217, 227, 249], "18m": 88, "albert_xlarge_uncas": 88, "albert_xlarg": 88, "2048": 88, "60m": 88, "albert_xxlarge_uncas": 88, "albert_xxlarg": 88, "235m": 88, "sentencepiec": [88, 95, 110], "everi": [88, 90, 91, 92, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 135, 152, 163, 175, 192, 200, 202, 212, 251], "dimens": [88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 205, 212], "repeat": [88, 140, 154, 155, 212], "footprint": 88, "cost": [88, 164, 175, 176], "FOR": 88, "tfhub": [88, 99, 110], "q": 88, "increas": [88, 89, 92, 98, 104, 112, 120, 140, 154, 155, 156, 159, 162, 173, 176, 177, 212], "downstream": [88, 93, 95, 99, 100, 101, 115, 156, 159, 171], "some": [88, 89, 91, 113, 120, 135, 149, 154, 155, 158, 159, 161, 168, 202, 212, 225, 233, 239, 249, 250, 254, 255], "point": [88, 90, 91, 148, 149, 192, 200, 233, 235], "harder": 88, "tpu": 88, "consumpt": [88, 110, 112], "speed": [88, 134, 158, 163, 164], "devlin": [88, 105, 106], "et": [88, 105, 106, 122, 162], "al": [88, 105, 106], "2019": [88, 93, 95, 105, 106, 113, 114, 156], "comprehens": [88, 109, 156, 158, 159, 161, 164, 169, 170], "empir": [88, 90, 91, 113, 114, 115], "evid": 88, "focus": [88, 108, 120, 140, 155, 170], "inter": 88, "coher": [88, 157, 159], "establish": 88, "glue": [88, 90, 91, 96, 102, 105, 106, 113, 114, 156], "race": [88, 95, 105, 106], "finished_embed": [88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "setoutputasvector": [88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 189, 193], "setcleanannot": [88, 95, 96, 99, 101, 105, 107, 110, 112, 113, 115, 189, 193, 194, 195], "80": [88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 128, 193, 204], "1342473030090332": [88, 95], "3855540752410889": [88, 95], "9818322062492371": [88, 95], "784737348556518": [88, 95], "847029983997345": [88, 95], "047153353691101": [88, 95], "1520637571811676": [88, 95], "6245765686035156": [88, 95], "009860038757324219": [88, 95], "13450059294700623": [88, 95], "707749128341675": [88, 95], "2916892766952": [88, 95], "04192575812339783": [88, 95], "5764210224151611": [88, 95], "3196685314178467": [88, 95], "527840495109": [88, 95], "15583214163780212": [88, 95], "1614152491092682": [88, 95], "28423872590065": [88, 95], "135491415858268": [88, 95], "cpp": [89, 154, 155, 198, 201], "cl": [89, 92, 103, 108, 109, 212], "nomic_embed_text_v1": 89, "q8_0": 89, "gguf": 89, "autoggufembeddingstest": 89, "notebook": [89, 154, 155, 170, 173, 201, 225, 243, 246], "thread": [89, 154, 155, 212], "prompt": [89, 140, 154, 155, 168, 201, 212], "logic": [89, 154, 155, 167, 168, 212], "bla": [89, 154, 155, 212], "physic": [89, 154, 155, 212], "maxim": [89, 115, 154, 155, 175, 212], "store": [89, 118, 154, 155, 203, 212, 227, 232, 239, 247], "vram": [89, 154, 155, 212], "across": [89, 99, 154, 155, 159, 160, 161, 164, 173, 212], "main": [89, 117, 154, 155, 173, 185, 212, 244, 249, 253, 256], "scratch": [89, 154, 155, 212], "tensor": [89, 99, 154, 155, 212], "distribut": [89, 97, 111, 154, 155, 212], "rope": [89, 154, 155, 212], "frequenc": [89, 140, 152, 154, 155, 175, 176, 177, 188, 212], "ntk": [89, 154, 155, 212], "awar": [89, 154, 155, 175, 212], "expand": [89, 154, 155, 164, 212], "yarn": [89, 154, 155, 212], "extrapol": [89, 154, 155, 212], "mix": [89, 99, 154, 155, 212], "sqrt": [89, 154, 155, 212], "magnitud": [89, 100, 154, 155, 176, 177, 212], "low": [89, 92, 113, 114, 154, 155, 165, 170, 175, 212], "correct": [89, 113, 154, 155, 175, 176, 177, 188, 212], "beta": [89, 154, 155, 169, 212], "alpha": [89, 154, 155, 158, 175, 212], "kv": [89, 154, 155, 212], "cach": [89, 112, 154, 155, 156, 171, 173, 212, 228], "defragment": [89, 154, 155, 212], "strategi": [89, 94, 103, 107, 108, 109, 124, 126, 128, 148, 154, 155, 175, 211, 212], "numa": [89, 154, 155, 212], "unless": [89, 154, 155, 212], "unspecifi": [89, 154, 155, 212], "flash": [89, 154, 155, 212], "pageout": [89, 154, 155, 212], "mlock": [89, 154, 155, 212], "ram": [89, 154, 155, 212], "swap": [89, 154, 155, 176, 212], "compress": [89, 154, 155, 212], "disabl": [89, 152, 154, 155, 192, 200, 212, 232], "offload": [89, 154, 155, 212], "sure": [89, 152, 154, 155, 243], "adjust": [89, 154, 155, 212], "accord": [89, 120, 154, 155, 160, 175, 235], "hardwar": [89, 154, 155], "avoid": [89, 102, 151, 154, 155, 212], "error": [89, 154, 155, 175], "99": [89, 154, 155], "moon": [89, 103, 108, 109], "jupit": 89, "77": 89, "total": [89, 149, 155, 188], "79": [89, 126, 127], "confirm": 89, "satellit": 89, "made": [89, 95, 110, 246], "ones": [89, 155], "034486726": 89, "07770534": 89, "15982522": 89, "017873349": 89, "013914132": 89, "0365736": 89, "nparallel": [89, 212], "alia": [89, 154, 155, 212, 217], "small_bert_l2_768": 90, "introduc": [90, 91, 96, 99, 100, 101, 102, 109, 156, 160, 161, 164, 168, 170, 171], "unlik": [90, 91, 100, 113, 120, 166, 183], "jointli": [90, 91], "left": [90, 91, 155, 156, 165, 188, 208], "just": [90, 91, 96, 105, 130, 135], "modif": [90, 91], "conceptu": [90, 91], "obtain": [90, 91, 93, 98, 110, 165], "eleven": [90, 91], "push": [90, 91, 241], "absolut": [90, 91], "multinli": [90, 91], "86": [90, 91, 95], "v1": [90, 91, 104], "f1": [90, 91, 113, 114, 135, 159], "93": [90, 91], "83": [90, 91, 95, 237, 238, 256], "small_bert_l2_128": 90, "3497989177703857": [90, 100], "480538547039032": [90, 100], "3238905668258667": [90, 100], "612930893898010": [90, 100], "1357314586639404": 90, "32984697818756104": 90, "6032363176345825": 90, "6791689395904": 90, "8244884014129639": 90, "27088963985443115": 90, "059438943862915": 90, "9817547798156": 90, "1648050546646118": 90, "4725411534309387": 90, "5938255786895752": 90, "5780693292617": 90, "9125322699546814": 90, "4563939869403839": 90, "3975459933280945": 90, "81611204147338": 90, "backend": [90, 91, 98, 105, 113, 201], "sentence_bert_embed": 91, "sent_small_bert_l2_768": 91, "long": [91, 101, 104, 109, 115, 155, 164, 168, 212], "sent_small_bert_l2_128": 91, "orang": [91, 106, 114], "8951074481010437": [91, 106, 114], "13753940165042877": [91, 106, 114], "3108254075050354": [91, 106, 114], "65693199634552": [91, 106, 114], "6180210709571838": [91, 106, 114], "12179657071828842": [91, 106, 114], "191165953874588": [91, 106, 114], "4497021436691": [91, 106, 114], "822715163230896": [91, 106, 114], "7568016648292542": [91, 106, 114], "1165061742067337": [91, 106, 114], "59048593044281": [91, 106, 114], "bge": 92, "baai": 92, "dimension": [92, 110], "retriev": [92, 98, 100, 108, 112, 123, 173, 176, 177, 178, 225, 227, 243, 246, 250, 251], "bge_bas": 92, "useclstoken": [92, 205, 212], "protein": [92, 98, 104], "femal": [92, 98, 104], "eat": [92, 98, 104], "guidelin": [92, 98, 104], "cdc": [92, 98, 104], "women": [92, 98, 104], "70": [92, 98, 100, 104, 160, 161, 167], "46": [92, 98, 104, 239], "dai": [92, 98, 104, 126, 127, 175], "chart": [92, 98, 104, 225, 246], "ll": [92, 98, 104, 188], "marathon": [92, 98, 104], "below": [92, 98, 104, 118, 255], "0190285e": [92, 98, 104], "005974853": [92, 98, 104], "072875895": [92, 98, 104], "007944068": [92, 98, 104], "026059335": [92, 98, 104], "0080": [92, 98, 104], "050514214": [92, 98, 104], "010061974": [92, 98, 104], "04340176": [92, 98, 104], "020937217": [92, 98, 104], "05170225": [92, 98, 104], "01157857": [92, 98, 104], "bge_small_en_v1": 92, "tasti": 93, "french": [93, 120, 162, 163, 165, 179], "loui": 93, "martin": 93, "muller": 93, "pedro": 93, "javier": 93, "ortiz": 93, "su\u00e1rez": 93, "yoann": 93, "dupont": 93, "laurent": 93, "romari": 93, "\u00e9ric": 93, "villemont": 93, "la": [93, 140, 163], "clergeri": 93, "djam\u00e9": 93, "seddah": 93, "beno\u00eet": 93, "sagot": 93, "facebook": [93, 95, 113, 114, 156], "138gb": 93, "camembert_bas": 93, "camembertembeddingstestspec": 93, "co": [93, 120, 167, 168], "now": [93, 149, 199, 243, 251], "ubiquit": [93, 166], "despit": [93, 156, 168], "concaten": [93, 188], "except": [93, 130, 135, 181, 185], "investig": [93, 96, 110], "feasibl": 93, "monolingu": [93, 113, 114], "crawl": [93, 156, 171], "prefer": [93, 118, 168, 195], "wikipedia": [93, 122, 159, 233], "surprisingli": [93, 110], "4gb": 93, "130": 93, "gb": 93, "reach": [93, 120, 159, 188], "four": [93, 149, 155, 186, 188], "c": [93, 97, 111, 120, 162, 163, 188, 243], "un": [93, 122], "08442357927560806": 93, "12863239645957947": 93, "03835778683423996": 93, "200479581952": 93, "048462312668561935": 93, "12637358903884888": 93, "27429091930389404": 93, "07516729831": 93, "02690504491329193": 93, "12104076147079468": 93, "012526623904705048": 93, "031543646007": 93, "05877285450696945": 93, "08773420006036758": 93, "06381352990865707": 93, "122621834278": 93, "aggreg": [94, 107, 173], "sum": [94, 99, 107, 212], "discard": [94, 137], "oov": 94, "55661": 94, "42829502": 94, "86661": 94, "409785": 94, "06316501": 94, "120775": 94, "0732005": 94, "40674996": 94, "22938299": 94, "50597": 94, "288195": 94, "555655": 94, "465145": 94, "140118": 94, "17417": 94, "095253006": 94, "0530925": 94, "218465": 94, "714395": 94, "79860497": 94, "0129999": 94, "139705": 94, "177955": 94, "1887775": 94, "45545": 94, "20030999": 94, "461557": 94, "07891501": 94, "disentangl": 95, "pengcheng": 95, "xiaodong": 95, "jianfeng": 95, "gao": 95, "weizhu": 95, "chen": [95, 105, 106], "2018": [95, 105, 106], "build": [95, 96, 105, 106, 118, 120, 125, 159, 160, 162, 166, 167, 170, 225, 243, 246], "half": [95, 120], "deberta_v3_bas": 95, "microsoft": [95, 98, 102, 104, 163, 167, 168], "www": [95, 233], "blog": 95, "superglu": 95, "progress": [95, 149, 184], "significantli": [95, 99, 105, 106, 113, 114, 120, 168, 170], "mechan": [95, 101], "weight": [95, 99, 104, 120, 134, 136, 157, 166, 170, 175], "among": [95, 102, 158, 167, 168], "matric": 95, "second": [95, 99, 128, 148, 179, 184, 201, 250], "mnli": 95, "90": 95, "91": 95, "88": 95, "publicli": [95, 113, 114, 168], "github": [95, 100, 104, 105, 109, 163, 166, 170, 227, 244], "fast": [96, 152, 160, 163, 199, 254], "cheap": 96, "distil": 96, "40": [96, 98, 136, 154, 155, 157, 160, 161, 163, 165], "uncas": 96, "run": [96, 120, 173, 225, 228, 243, 247, 255], "preserv": [96, 133, 184, 204], "95": [96, 155], "distilbert_base_cas": 96, "doesn": [96, 105], "token_type_id": [96, 105], "indic": [96, 105, 184, 188], "belong": [96, 105, 168], "sep_token": [96, 105], "sep": 96, "position_id": 96, "ad": [96, 99, 140, 175, 201, 233], "though": [96, 120], "let": [96, 140, 183, 243, 250], "know": [96, 163, 202], "cheaper": 96, "lighter": 96, "preval": 96, "constrain": [96, 154, 155, 212], "budget": 96, "counterpart": 96, "leverag": [96, 102, 225, 246], "knowledg": [96, 120, 166, 167, 168, 169, 195, 243], "reduc": [96, 102, 164, 167, 176, 177, 204], "retain": 96, "97": [96, 126, 127, 188], "tripl": [96, 118], "cosin": [96, 109], "distanc": [96, 155, 173, 175, 176, 177], "proof": 96, "concept": [96, 251], "experi": [96, 109, 115, 140, 156, 158, 164, 225, 247], "1127224713563919": 96, "1982710212469101": 96, "5360898375511169": 96, "272536993026733": 96, "35534414649009705": 96, "13215228915214539": 96, "40981462597846985": 96, "14036104083061": 96, "328085333108902": 96, "06269335001707077": 96, "017595693469047546": 96, "024373905733": 96, "15617232024669647": 96, "2967822253704071": 96, "22324979305267334": 96, "04568954557180": 96, "45411425828933716": 96, "01173491682857275": 96, "190129816532135": 96, "1178255230188369": 96, "corpu": [97, 99, 111, 120, 123, 146, 156, 171, 174, 175, 177, 237, 256], "algorithm": [97, 111, 120, 134, 152, 175, 176, 177, 178, 233], "partit": [97, 111, 232, 235], "appear": [97, 111, 140, 155, 175], "divid": [97, 111], "1000": [97, 111, 118, 134], "025": [97, 111, 152], "estim": [97, 111, 180, 196, 223, 250], "composition": [97, 111], "sherlockholm": [97, 111, 175, 256], "numiter": [97, 111], "equal": [97, 111], "doc2vec_gigaword_300": 97, "06222493574023247": [97, 111], "011579325422644615": [97, 111], "009919632226228714": [97, 111], "109361454844": [97, 111], "doc2vec_wiki": 97, "e5": 98, "weakli": [98, 104], "tailor": [98, 100, 165], "e5_smal": 98, "unilm": [98, 104], "manner": [98, 120], "signal": [98, 99], "curat": [98, 104], "ccpair": 98, "readili": 98, "conduct": [98, 109], "extens": [98, 109, 164, 170, 221], "56": [98, 237], "beir": 98, "mteb": 98, "bm25": 98, "baselin": [98, 110, 159], "beat": 98, "exist": [98, 99, 109, 140, 158, 162, 175, 193, 195, 212, 225, 241], "elmo": 99, "billion": [99, 157, 159, 160, 161, 164, 167, 168, 170], "lookup": [99, 112, 115, 125, 154, 155, 176, 177, 212, 215], "word_emb": 99, "shape": 99, "batch_siz": 99, "max_length": 99, "lstm_outputs1": 99, "lstm": [99, 135], "lstm_outputs2": 99, "trainabl": 99, "contextu": [99, 156, 161, 165, 175], "characterist": 99, "syntax": 99, "vari": [99, 140], "linguist": [99, 188], "polysemi": 99, "bilm": 99, "six": [99, 176, 177], "textual": [99, 100, 109, 164], "entail": 99, "expos": 99, "crucial": [99, 109], "semi": 99, "662458181381226e": 99, "2541114091873169": 99, "6275503039360046": 99, "5787073969841": 99, "19154725968837738": 99, "22998669743537903": 99, "2894386649131775": 99, "21524395048618": 99, "10400570929050446": 99, "12288510054349899": 99, "07056470215320587": 99, "246389418840": 99, "49932169914245605": 99, "12706467509269714": 99, "30969417095184326": 99, "2643227577209": 99, "8871506452560425": 99, "20039963722229004": 99, "0601330995559692": 99, "0348707810044": 99, "instructor": 100, "finetun": [100, 101, 115], "financ": 100, "sota": [100, 109, 115], "divers": [100, 110, 156, 159, 161, 170, 171, 247], "medicin": 100, "instructor_bas": 100, "summar": [100, 101, 120, 156, 157, 159, 163, 171, 212, 241], "embedd": 100, "hkunlp": 100, "explain": [100, 225, 246, 253, 255], "special": [100, 175, 188, 251], "330": 100, "mixtur": [100, 165, 169], "66": [100, 136], "unseen": 100, "suggest": [100, 159], "mitig": [100, 109], "io": 100, "dynam": [100, 154, 155, 163, 212], "scalar": 100, "degre": 100, "freedom": 100, "horava": 100, "lifshitz": 100, "graviti": 100, "iz": 101, "beltagi": 101, "matthew": 101, "arman": 101, "cohan": 101, "checkpoint": [101, 166], "mlm": [101, 102], "096": 101, "longformer_base_4096": 101, "unabl": 101, "quadrat": 101, "linearli": 101, "easi": 101, "thousand": [101, 162, 165], "drop": [101, 179], "motiv": 101, "global": [101, 165], "text8": 101, "enwik8": 101, "wikihop": 101, "triviaqa": 101, "led": [101, 105, 106, 120], "found": [101, 112, 120, 176, 183, 191, 235, 253], "18792399764060974": [101, 105], "14591649174690247": [101, 105], "20547787845134735": [101, 105], "1468472778797": [101, 105], "22845706343650818": [101, 105], "18073144555091858": [101, 105], "09725798666477203": [101, 105], "0417917296290": [101, 105], "07037967443466187": [101, 105], "14801117777824402": [101, 105], "03603338822722435": [101, 105], "17893412709": [101, 105], "08734266459941864": [101, 105], "2486150562763214": [101, 105], "009067727252840996": [101, 105], "24408400058": [101, 105], "22409197688102722": [101, 105], "4312366545200348": [101, 105], "1401449590921402": [101, 105], "356410235166549": [101, 105], "adopt": [102, 164], "permut": [102, 115], "inherit": 102, "advantag": [102, 202], "all_mpnet_base_v2": 102, "neglect": [102, 115], "plm": 102, "doe": [102, 113, 120, 133, 162, 163, 165, 199, 202, 228, 251, 254, 255], "full": [102, 104, 115, 169, 170, 250], "thu": [102, 120], "suffer": [102, 115], "discrep": [102, 115], "auxiliari": 102, "160gb": 102, "corpora": [102, 120, 125], "down": [102, 135, 250, 251], "stream": [102, 140, 154, 155, 158, 212], "experiment": [102, 120], "022502584": 102, "078291744": 102, "023030775": 102, "0051000593": 102, "080340415": 102, "039": 102, "041702367": 102, "0010974605": 102, "015534201": 102, "07092203": 102, "0017729357": 102, "04661": 102, "mxbai": 103, "mxbai_large_v1": 103, "hello": [103, 108, 109, 125, 129, 154, 157, 182, 201, 239], "50387806": [103, 108, 109], "5861606": [103, 108, 109], "35129607": [103, 108, 109], "76046336": [103, 108, 109], "32446072": [103, 108, 109], "117674336": [103, 108, 109], "6660665": [103, 108, 109], "961762": [103, 108, 109], "24854276": [103, 108, 109], "1018044": [103, 108, 109], "6569202": [103, 108, 109], "027635604": [103, 108, 109], "1915": [103, 108, 109], "cls_avg": [103, 108, 109], "avg": [103, 108, 109], "nomic": 104, "8192": 104, "ada": [104, 141], "002": [104, 141], "short": [104, 109], "nomic_embed_v1": 104, "technic": [104, 166], "report": [104, 105, 106, 110, 156, 166, 225, 246], "reproduc": [104, 162, 225, 246, 247], "opendata": 104, "licens": [104, 170], "loader": 104, "235": 104, "replic": [104, 105, 106, 156], "embedtext": 104, "nomicai": 104, "contrastor": 104, "robustli": [105, 106, 137], "yinhan": [105, 106], "myle": [105, 106, 113, 114], "ott": [105, 106, 113, 114], "naman": [105, 106, 113, 114], "goyal": [105, 106, 113, 114], "jingfei": [105, 106], "du": [105, 106, 122], "mandar": [105, 106], "joshi": [105, 106], "danqi": [105, 106], "omer": [105, 106], "levi": [105, 106], "mike": [105, 106], "lewi": [105, 106], "luke": [105, 106, 113, 114], "zettlemoy": [105, 106, 113, 114], "veselin": [105, 106, 113, 114], "stoyanov": [105, 106, 113, 114], "hyperparamet": [105, 106], "mini": [105, 106, 168], "roberta_bas": 105, "bpe": 105, "signific": [105, 106, 113, 114, 120, 123, 160, 169], "gain": [105, 106, 113, 114, 156, 162], "care": [105, 106, 185], "comparison": [105, 106, 110, 169, 179], "privat": [105, 106], "impact": [105, 106], "carefulli": [105, 106, 140, 170], "undertrain": [105, 106], "highlight": [105, 106], "previous": [105, 106, 120], "overlook": [105, 106], "rais": [105, 106, 120, 130, 135, 225], "sent_roberta_bas": 106, "embeddingssent": 107, "22093398869037628": 107, "25130119919776917": 107, "41810303926467896": 107, "380883991718": 107, "snowflak": 108, "arctic": 108, "snowflake_artic_m": 108, "uae": 109, "satur": 109, "uae_large_v1": 109, "st": 109, "vanish": 109, "gradient": [109, 134], "issu": [109, 188, 244], "core": 109, "idea": [109, 115], "advers": 109, "imped": 109, "hinder": 109, "furthermor": [109, 115], "examin": 109, "scenario": [109, 152], "were": [109, 112, 135, 225, 246], "uae_smal": 109, "tfhub_us": 110, "op": 110, "lingual": [110, 113, 114, 120, 122, 163], "accur": [110, 152, 156, 176], "trade": [110, 113, 114], "tend": 110, "With": [110, 115, 120, 170], "minim": [110, 137, 163], "encourag": [110, 161], "weat": 110, "bia": [110, 140, 154, 155, 169, 212], "freeli": 110, "04616805538535118": 110, "022307956591248512": 110, "044395286589860916": 110, "0016493503": 110, "changeabl": 110, "nor": [110, 120], "word2vec_gigaword_300": 111, "word2vec_wiki": 111, "setstoragepath": [112, 125, 205, 215], "line": [112, 117, 125, 129, 140, 149, 151, 175, 227, 232, 233, 235, 237], "39658191506190343": 112, "630968081620067": 112, "5393722253731201": 112, "8428180123359783": 112, "7535235923631415": 112, "9699218875629833": 112, "10397182122983872": 112, "11833962569383116": 112, "stress": 112, "0492683418305907": 112, "9415954572751959": 112, "47624463167525755": 112, "16790967216778263": 112, "induc": 112, "1535748762292387": 112, "33498936903209897": 112, "9235178224122094": 112, "1158772920395934": 112, "dump": 112, "disk": [112, 250, 251], "10000": 112, "random_embeddings_dim4": 112, "setstorageref": [112, 205, 215], "glove_4d": 112, "setdimens": [112, 205, 212], "patient": 112, "diagnos": 112, "diabet": 112, "9439099431037903": 112, "4707513153553009": 112, "806300163269043": 112, "16176554560661316": 112, "7966810464859009": 112, "5551124811172485": 112, "8861005902290344": 112, "28284206986427307": 112, "025029370561242104": 112, "35177749395370483": 112, "052506182342767715": 112, "1887107789516449": 112, "08617766946554184": 112, "8399239182472229": 112, "5395117998123169": 112, "7864698767662048": 112, "6599600911140442": 112, "16109347343444824": 112, "6041093468666077": 112, "8913561105728149": 112, "5955275893211365": 112, "01899011991918087": 112, "4397728443145752": 112, "8911281824111938": 112, "9840458631515503": 112, "7599489092826843": 112, "9417727589607239": 112, "8624503016471863": 112, "glove_100d": [112, 135], "There": [112, 117, 118, 155, 183, 248, 250, 251, 256], "conveni": 112, "coverag": [112, 210], "stat": 112, "whole": [112, 166, 215, 227], "570580005645752": 112, "44183000922203064": 112, "7010200023651123": 112, "417129993438720": 112, "542639970779419": 112, "4147599935531616": 112, "0321999788284302": 112, "4024400115013122": 112, "2708599865436554": 112, "04400600120425224": 112, "020260000601410866": 112, "17395000159": 112, "6191999912261963": 112, "14650000631809235": 112, "08592499792575836": 112, "2629800140857": 112, "3397899866104126": 112, "20940999686717987": 112, "46347999572753906": 112, "6479200124740": 112, "storage_ref": [112, 117, 125, 215], "embeddings_col": 112, "coverateresult": 112, "wordsoverallcoverag": 112, "resultdf": 112, "output_col": 112, "wordscoverag": 112, "cov_embed": 112, "alexi": [113, 114], "conneau": [113, 114], "kartikai": [113, 114], "khandelw": [113, 114], "vishrav": [113, 114], "chaudhari": [113, 114], "guillaum": [113, 114], "wenzek": [113, 114], "francisco": [113, 114, 120], "guzman": 113, "edouard": [113, 114], "grave": [113, 114], "5tb": [113, 114], "commoncrawl": [113, 114], "xlm_roberta_bas": 113, "abl": [113, 162, 171, 225, 249], "terabyt": [113, 114], "r": [113, 114, 120, 157, 233], "mbert": [113, 114], "xnli": [113, 114], "mlqa": [113, 114], "particularli": [113, 114, 156], "swahili": [113, 114, 162, 165], "urdu": [113, 114, 162, 165], "capac": [113, 114, 159, 162], "dilut": [113, 114], "sacrif": [113, 114], "ri": [113, 114], "05969233065843582": 113, "030789051204919815": 113, "04443822056055069": 113, "09564960747": 113, "038839809596538544": 113, "011712731793522835": 113, "019954433664679527": 113, "0667808502": 113, "03952755779027939": 113, "03455188870429993": 113, "019103847444057465": 113, "04311436787": 113, "09579929709434509": 113, "02494969218969345": 113, "014753809198737144": 113, "10259044915": 113, "004710011184215546": 113, "022148698568344116": 113, "011723337695002556": 113, "013356896": 113, "guzm\u00e3": 114, "sent_xlm_roberta_bas": 114, "xl": [115, 230, 233], "exhibit": 115, "involv": [115, 149, 166], "rank": [115, 158, 173, 175], "xlnet_large_cas": 115, "xlnet_base_cas": 115, "zihangdai": 115, "denois": [115, 156], "autoencod": [115, 156], "corrupt": [115, 156], "pro": 115, "con": 115, "likelihood": [115, 140], "overcom": 115, "formul": 115, "6287205219268799": 115, "4865287244319916": 115, "186111718416214": 115, "234187275171279": 115, "1967450380325317": 115, "2746637463569641": 115, "9481253027915955": 115, "3431355059146881": 115, "0777631998062134": 115, "092679977416992": 115, "5331977605819702": 115, "11190271377563": 115, "8349916934967041": 115, "45627787709236145": 115, "7890847325325012": 115, "028069257736": 115, "134845569729805": 115, "11672890186309814": 115, "4945235550403595": 115, "66587203741073": 115, "alphabet": [116, 117, 138], "patternsresourc": [116, 117], "sentencematch": [116, 117], "setalphabetresourc": [116, 117], "setpatternsresourc": [116, 117], "setsentencematch": [116, 117], "setusestorag": [116, 117], "usestorag": [116, 117], "entityrul": 117, "exact": [117, 125, 129, 140], "definit": [117, 137, 235], "json": [117, 140, 203, 225, 239], "jsonl": 117, "might": [117, 135, 188, 255], "rule": [117, 124, 126, 128, 151, 181, 183, 185, 211, 216], "winterfel": 117, "jon": 117, "snow": [117, 136, 155, 175], "stark": 117, "eddard": 117, "rocksdb": 117, "lord": 117, "29": [117, 136, 188, 237, 239], "38": [117, 168, 239], "plain": [117, 233, 256], "entity_pattern": 117, "graph": [118, 135, 163, 175, 180, 195], "node": [118, 205, 209], "relev": [118, 120, 140, 152], "taken": 118, "implicitli": 118, "public": [118, 228, 241, 250], "travers": 118, "neighbor": [118, 173], "symbol": [118, 175, 188], "coordin": [118, 148, 233], "remoteloc": 118, "rdf": [118, 195], "nertagg": [118, 134, 135, 136], "morn": [118, 195], "flight": [118, 195], "denver": [118, 195], "18": [118, 126, 127, 130, 133, 136, 155, 199, 217, 227, 249], "path1": 118, "iob": [118, 133, 134, 135], "iob2": [118, 133], "getstopword": [119, 120], "maxngram": [119, 120], "minngram": [119, 120], "nkeyword": [119, 120], "setmaxngram": [119, 120], "setminngram": [119, 120], "setnkeyword": [119, 120], "yake": 120, "independ": [120, 176, 177, 183], "grow": 120, "autom": 120, "adequ": 120, "emerg": [120, 156, 171], "tool": [120, 140, 156, 170, 233], "thesauri": 120, "neither": 120, "written": [120, 163], "plethora": 120, "situat": [120, 149], "access": [120, 166], "restrict": [120, 167], "therefor": [120, 254], "sent": 120, "boundari": [120, 148, 149, 152, 185, 188], "detector": [120, 126, 151], "section": [120, 192, 200, 246, 248, 254], "tweakabl": 120, "upper": 120, "bound": [120, 148, 149, 152], "occurr": [120, 211], "campo": 120, "mangaravit": 120, "pasquali": 120, "jatowt": 120, "jorg": 120, "nune": 120, "journal": [120, 188], "elsevi": 120, "vol": 120, "509": 120, "pp": [120, 188], "257": 120, "289": 120, "turn": [120, 204, 250], "fly": 120, "demand": 120, "within": [120, 146, 152, 156, 159, 185, 191], "resort": 120, "alwai": [120, 140, 161, 166, 167, 168, 169, 171], "solut": [120, 164], "articl": [120, 175], "rest": [120, 133], "extern": [120, 123, 128, 129, 134, 135, 175, 180, 202, 216, 235, 236, 237, 238, 243], "merit": 120, "ten": 120, "carri": 120, "twenti": 120, "setcontextchar": [120, 181, 185], "acquir": 120, "kaggl": [120, 170], "platform": [120, 140, 141, 225, 248], "host": 120, "transact": 120, "somewhat": 120, "vagu": 120, "confer": 120, "week": [120, 126, 127, 182], "announc": [120, 136], "earli": 120, "tomorrow": [120, 126, 127], "founder": 120, "ceo": 120, "anthoni": 120, "goldbloom": 120, "declin": 120, "deni": 120, "acquisit": 120, "happen": 120, "rumor": 120, "scientist": 120, "ben": 120, "hamner": 120, "2010": 120, "servic": [120, 140, 163], "got": 120, "even": [120, 126, 158, 161, 171], "few": [120, 185, 237, 256], "competitor": 120, "drivendata": 120, "topcod": 120, "hackerrank": 120, "manag": [120, 228, 243, 247], "stai": 120, "ahead": 120, "nich": 120, "bui": [120, 236], "commun": [120, 160, 161, 166, 167], "mindshar": 120, "too": [120, 151, 249], "plenti": 120, "project": [120, 154, 163, 166, 170, 173, 225, 244, 247], "bit": [120, 149, 255], "histori": [120, 149, 175], "earlier": 120, "month": [120, 126, 127, 237, 256], "team": [120, 163, 225, 246], "around": [120, 155, 165], "youtub": 120, "interest": [120, 166, 167, 168, 169], "kernel": 120, "On": [120, 158, 159, 163], "analyz": [120, 152], "compani": [120, 163], "script": [120, 162, 165], "centric": [120, 162, 165], "job": [120, 191], "board": [120, 146, 237], "unclear": 120, "crunchbas": 120, "pitchbook": 120, "launch": 120, "investor": 120, "ventur": 120, "sv": [120, 162], "angel": [120, 158], "levchin": 120, "naravik": 120, "chie": 120, "economist": 120, "hal": 120, "varian": 120, "khosla": 120, "yuri": 120, "milner": 120, "resulttupl": 120, "ascend": 120, "orderbi": 120, "32051516486864573": 120, "37786450577630676": 120, "39922830978423146": 120, "40224744669493756": 120, "41584827825302534": 120, "danish": [120, 162, 165, 179], "dutch": [120, 162, 165, 179], "finnish": [120, 162, 165, 179], "german": [120, 162, 165, 179, 235, 256], "hungarian": [120, 162, 165, 179], "italian": [120, 140, 162, 165, 175, 179], "norwegian": [120, 162, 165, 179], "portugues": [120, 162, 165, 179], "russian": [120, 162, 165, 179], "spanish": [120, 162, 165, 179], "swedish": [120, 162, 165, 179], "turkish": [120, 162, 165, 179], "ld": 122, "identif": [122, 215], "rnn": 122, "tatoeba": 122, "wiki": 122, "languagedetector": 122, "ld_wiki_tatoeba_cnn_21": 122, "advanc": [122, 161, 164, 170, 191, 201, 204], "java": [122, 228, 233, 243], "scala": [122, 233], "program": [122, 170], "biblioth\u00e8qu": 122, "traitement": 122, "pour": 122, "le": [122, 163], "avanc\u00e9": 122, "langag": 122, "naturel": 122, "programm": 122, "ist": 122, "ein": 122, "textverarbeitungsbibliothek": 122, "f\u00fcr": 122, "fortgeschritten": 122, "nat\u00fcrlich": 122, "sprachverarbeitung": 122, "die": 122, "programmiersprachen": 122, "und": 122, "lemma": [123, 151, 199, 227, 236, 251, 254, 255], "predefin": [123, 125, 128, 129, 151], "lemmas_smal": [123, 151], "keydelimit": 123, "valuedelimit": 123, "correspend": 123, "key_delimit": 123, "value_delimit": 123, "fromlemma": 123, "lemma_antbnc": 123, "mergeoverlap": [124, 125, 129], "setent": [124, 125, 129, 131, 132, 182], "setmergeoverlap": [124, 125, 129], "settoken": [124, 125], "searchtri": [124, 125, 129], "aggressivematch": [124, 126], "anchordatedai": [124, 126, 127], "anchordatemonth": [124, 126, 127], "anchordateyear": [124, 126, 127], "defaultdaywhenmiss": [124, 126, 127], "inputformat": [124, 126, 189, 203], "outputformat": [124, 126], "readmonthfirst": [124, 126, 127], "relaxedfactorystrategi": [124, 126], "setaggressivematch": [124, 126], "setanchordatedai": [124, 126, 127], "setanchordatemonth": [124, 126, 127], "setanchordateyear": [124, 126, 127], "setdefaultdaywhenmiss": [124, 126], "setinputformat": [124, 126, 189, 203], "setoutputformat": [124, 126, 127], "setreadmonthfirst": [124, 126], "setrelaxedfactorystrategi": [124, 126], "setsourcelanguag": [124, 126], "sourcelanguag": [124, 126], "externalrul": [124, 128], "setexternalrul": [124, 128], "setrul": [124, 128], "setstrategi": [124, 128], "buildfromtoken": [124, 129], "entityvalu": [124, 129], "setbuildfromtoken": [124, 129], "setentityvalu": [124, 129], "trie": 125, "dolor": [125, 129], "magna": [125, 129], "aliqua": [125, 129], "sit": [125, 129, 155], "laborum": [125, 129], "entityextractor": [125, 129, 182], "59": [125, 126, 127, 129], "tokenizer_model": 125, "btm": 125, "tmvocab": 125, "tmedg": 125, "tmnode": 125, "1978": [126, 127], "28": [126, 127, 133, 199, 217, 227, 239, 249], "1984": [126, 127], "04": [126, 127], "02": [126, 127], "1980": [126, 127], "31st": [126, 127], "april": [126, 127], "year": [126, 127, 159, 160, 182, 237], "2008": [126, 127], "fri": [126, 127], "1997": [126, 127], "jan": [126, 127], "sun": [126, 127], "1st": [126, 127], "thursdai": [126, 127], "wednesdai": [126, 127], "todai": [126, 127, 157, 165, 239], "yesterdai": [126, 127], "0600h": [126, 127], "06": [126, 127], "00": [126, 127], "6pm": [126, 127], "23": [126, 127, 128, 136, 146, 237, 238, 239, 256], "1988": [126, 127], "31": [126, 127, 128, 136, 146, 237], "dateformat": [126, 127], "desir": [126, 127], "yyyi": [126, 127], "mm": [126, 127, 188], "dd": [126, 127, 128], "anchor": [126, 127], "januari": [126, 127], "15": [126, 239], "aggress": 126, "attempt": [126, 176], "ambigu": 126, "juli": 126, "07": 126, "05": [126, 155], "2015": 126, "relax": [126, 155], "Not": [126, 135, 202], "5th": 126, "match_first": [126, 128, 205, 211], "exhaust": 126, "saw": 127, "visit": [127, 140], "57": [127, 136], "65": [127, 136], "d": [128, 138, 185, 248], "1970": 128, "match_al": [128, 205, 211], "match_complet": [128, 205, 211], "ceremoni": 128, "71": 128, "short_dat": 128, "regardless": 129, "27": [129, 146, 148, 237], "48": [129, 188, 239], "null": 130, "empti": [130, 155, 173, 180, 191, 199], "join": [130, 146, 203, 237], "minepoch": [131, 132, 134, 135], "setminepoch": [131, 132, 134], "setrandomse": [131, 132, 135, 142, 143, 153, 163], "nerhasnoschema": [131, 133], "preserveposit": [131, 133, 181, 184, 189, 204], "setnerhasnoschema": [131, 133], "setpreserveposit": [131, 133, 181, 184, 189, 204], "setwhitelist": [131, 133, 181, 183], "whitelist": [131, 133, 181, 183], "c0": [131, 134], "externalfeatur": [131, 134], "includeconfid": [131, 134, 135], "l2": [131, 134], "lossep": [131, 134], "minw": [131, 134], "setc0": [131, 134], "setexternalfeatur": [131, 134], "setincludeconfid": [131, 134, 135], "setl2": [131, 134], "setlossep": [131, 134], "setminw": [131, 134], "bestmodelmetr": [131, 135], "enablememoryoptim": [131, 135], "includeallconfidencescor": [131, 135], "setbestmodelmetr": [131, 135], "setenablememoryoptim": [131, 135], "setincludeallconfidencescor": [131, 135], "setpo": [131, 135], "setusebestmodel": [131, 135], "setusecontrib": [131, 135], "usebestmodel": [131, 135], "usecontrib": [131, 135], "nerword": [131, 136], "newnerent": [131, 136], "replaceent": [131, 136], "setnerword": [131, 136], "setnewnerent": [131, 136], "setreplaceent": [131, 136], "ignoreent": [131, 137], "predictionthreshold": [131, 137], "setentitydefinit": [131, 137], "setpredictionthreshold": [131, 137], "recogn": [132, 133, 134, 135, 136, 137, 175], "friendli": [133, 140, 163], "outsid": 133, "ekeu": [133, 134, 135, 199, 217, 227], "36": [133, 146, 199, 217, 227, 237, 239], "baghdad": [133, 134, 135, 199, 217, 227], "37": [133, 199, 217, 227], "nercrf": 134, "crf": [134, 135], "2003": [134, 135, 188, 235, 256], "exclud": [134, 135], "decai": [134, 135], "2250000": 134, "ep": 134, "confid": [134, 135, 137], "trainingdata": [134, 135, 149, 176, 177, 235], "readdataset": [134, 135, 146, 188, 234, 235, 236, 237, 238, 239, 256], "conll2003": [134, 135, 235, 256], "eng": [134, 135, 235, 256], "c0valu": 134, "l2valu": 134, "verbosevalu": 134, "prerequisit": [134, 135, 136, 250], "nerdl": 135, "char": [135, 138, 149], "bilstm": 135, "tagger": [135, 237, 256], "rage": 135, "contrib": 135, "cell": [135, 203], "slightli": [135, 149], "slow": 135, "micro": 135, "macro": 135, "nermodel": 135, "setnewresult": 136, "overwritten": 136, "lab": 136, "42": [136, 146], "45": [136, 146, 237, 239], "47": [136, 237, 239], "ner_overwritten": 136, "cardin": 136, "rw": 136, "zeroshotn": 137, "zer_shot_n": 137, "entitydefinit": 137, "citi": 137, "town": 137, "01f": 137, "zero_shot_n": 137, "hellen": 137, "5328949": 137, "9360068": 137, "83294415": 137, "45366877": 137, "shortcut": 137, "zero_shot_ner_roberta": 137, "stem": [138, 178, 199, 227, 254, 255], "henc": 138, "pl": [138, 162], "slang": 138, "alphanumer": 138, "za": 138, "z": [138, 154, 155, 185, 212], "brother": 138, "dont": [138, 152], "sensit": [138, 176, 179, 185], "bestof": [139, 140], "echo": [139, 140], "frequencypenalti": [139, 140, 154, 155, 205, 212], "logitbia": [139, 140], "logprob": [139, 140], "maxtoken": [139, 140], "numberofcomplet": [139, 140], "presencepenalti": [139, 140, 154, 155, 205, 212], "setbestof": [139, 140], "setecho": [139, 140], "setfrequencypenalti": [139, 140, 205, 212], "setlogitbia": [139, 140], "setlogprob": [139, 140], "setmaxtoken": [139, 140], "setmodel": [139, 140, 141, 147, 149], "setnumberofcomplet": [139, 140], "setpresencepenalti": [139, 140, 205, 212], "setstop": [139, 140], "setsuffix": [139, 140, 181, 183], "setus": [139, 140, 141], "suffix": [139, 140, 154, 155, 181, 183, 185, 212, 250], "request": [140, 141, 170], "complet": [140, 154, 155, 170, 212, 225, 247, 250], "api": [140, 141, 233, 244, 246, 250, 253], "executor": [140, 141], "insert": [140, 176, 177, 250], "nucleu": 140, "mass": 140, "penal": [140, 154, 155, 212], "topic": 140, "verbatim": 140, "best_of": 140, "server": [140, 154, 155, 255], "side": [140, 155, 158, 188], "abus": [140, 141], "pleasur": 140, "dine": 140, "fiorita": 140, "truli": [140, 166], "delight": 140, "menu": 140, "boast": 140, "wonder": 140, "classic": 140, "dish": 140, "exquisit": 140, "prepar": [140, 190, 192, 198, 200], "staff": [140, 151], "227": 140, "barbecu": 140, "joe": 140, "dinner": 140, "amaz": 140, "pull": [140, 170], "pork": 140, "smoke": 140, "turkei": 140, "brisket": 140, "rib": 140, "sandwich": 140, "opt": 140, "172": 140, "overallr": 140, "reviewbodi": 140, "enjoi": [140, 155, 158], "meal": 140, "restaur": [140, 151], "flavour": 140, "beautifulli": [140, 155], "cannot": 140, "candid": [140, 175, 176, 177, 185], "consum": 140, "quota": 140, "ensur": [140, 164, 165, 170], "max_token": 140, "mathemat": [140, 158], "ban": 140, "exclus": 140, "50256": 140, "prevent": 140, "endoftext": 140, "plu": [140, 159], "determinist": 140, "alter": 140, "empty_df": 141, "sample_text": 141, "delici": 141, "waiter": 141, "sample_df": 141, "002297497": 141, "009297881": 141, "015739758": 141, "0076794787": 141, "004737794": 141, "01487661": 141, "009856389": 141, "03823238": 141, "0069305706": 141, "028610818": 141, "025208998": 141, "018138802": 141, "0036271256": 141, "025539026": 141, "204275e": 141, "016374426": 141, "02828079": 141, "0054073683": 141, "009710415": 141, "016399812": 141, "015397037": 141, "00427766": 141, "006987691": 141, "0072859847": 141, "003874646": 141, "018544989": 141, "008752067": 141, "022657635": 141, "011493831": 141, "023901584": 141, "015638212": 141, "0035192322": 141, "034932107": 141, "0041919798": 141, "02612292": 141, "021515233": 141, "005715182": 141, "011754045": 141, "008453773": 141, "004080913": 141, "019179657": 141, "014419649": 141, "00893612": 141, "0063911034": 141, "045670684": 141, "017884934": 141, "005610462": 141, "219344e": 141, "02211182": 141, "0039539794": 141, "021007499": 141, "017631067": 141, "011696924": 141, "02260686": 141, "016336346": 141, "017174106": 141, "008466466": 141, "0015922225": 141, "025094759": 141, "024967825": 141, "007806412": 141, "005794516": 141, "022187982": 141, "0029162979": 141, "0060959826": 141, "025564414": 141, "008104706": 141, "0010178483": 141, "9823447e": 141, "0046425937": 141, "02074094": 141, "013467647": 141, "004626727": 141, "016006319": 141, "0166156": 141, "008948814": 141, "007616012": 141, "013619968": 141, "0069749975": 141, "0052677416": 141, "009881775": 141, "04592455": 141, "0030464048": 141, "024003131": 141, "02301305": 141, "006981344": 141, "023571556": 141, "009938896": 141, "006537077": 141, "033332746": 141, "002690991": 141, "019928563": 141, "0017596161": 141, "001090835": 141, "022683023": 141, "005007528": 141, "01540973": 141, "031530287": 141, "0054676617": 141, "015980931": 141, "0051471544": 141, "019890483": 141, "009386734": 141, "0062133963": 141, "031174876": 141, "009405775": 141, "015270104": 141, "028864685": 141, "021020193": 141, "018303815": 141, "0029210579": 141, "012693353": 141, "005102728": 141, "049580235": 141, "04300508": 141, "1293065e": 141, "0215787": 141, "016894853": 141, "0065434235": 141, "041431103": 141, "662815e": 141, "03351045": 141, "0128901": 141, "010510096": 141, "807209e": 141, "01835459": 141, "2869726e": 141, "01309954": 141, "011982525": 141, "005813556": 141, "0070194243": 141, "008637827": 141, "018456135": 141, "5521466e": 141, "019141577": 141, "021896034": 141, "02975322": 141, "0043220865": 141, "0015160623": 141, "0052074483": 141, "0149527695": 141, "0213883": 141, "018836936": 141, "01105591": 141, "0074636918": 141, "022632249": 141, "0036810723": 141, "006286383": 141, "025678653": 141, "027773056": 141, "03668379": 141, "00445854": 141, "013911915": 141, "008015852": 141, "0056739287": 141, "010281616": 141, "0057659554": 141, "00872668": 141, "010649723": 141, "0787844e": 141, "032164957": 141, "023838118": 141, "002641804": 141, "030387888": 141, "029626286": 141, "016602905": 141, "0021784967": 141, "0010519617": 141, "0116524985": 141, "018519603": 141, "007552545": 141, "007419265": 141, "0011090817": 141, "0044331537": 141, "009989669": 141, "007533505": 141, "0061943564": 141, "0057088356": 141, "028230017": 141, "0042554466": 141, "029321646": 141, "024790118": 141, "015676292": 141, "018202268": 141, "0075017717": 141, "00865052": 141, "0063942764": 141, "0020118963": 141, "036963046": 141, "002335577": 141, "020804405": 141, "6888937": 141, "019598536": 141, "0034748053": 141, "0067401705": 141, "02835695": 141, "023393849": 141, "0071527045": 141, "010586256": 141, "0096088685": 141, "009488282": 141, "021337526": 141, "6766098e": 141, "019801632": 141, "0022705235": 141, "009558095": 141, "0020753632": 141, "708839e": 141, "0066449703": 141, "04130417": 141, "011220924": 141, "013391487": 141, "027722282": 141, "011366897": 141, "4434706e": 141, "015460504": 141, "549375e": 141, "01449581": 141, "008529933": 141, "018875016": 141, "017745307": 141, "009437508": 141, "024587024": 141, "013010687": 141, "008993241": 141, "005093208": 141, "024218917": 141, "024066597": 141, "0037857925": 141, "031047942": 141, "015003543": 141, "023266915": 141, "03021018": 141, "0069115306": 141, "010154682": 141, "011430364": 141, "030311726": 141, "01764376": 141, "0020975766": 141, "006746517": 141, "009748495": 141, "01665368": 141, "003658859": 141, "02789999": 141, "0040682196": 141, "0031289116": 141, "029905539": 141, "016882159": 141, "0021689767": 141, "023228835": 141, "011773085": 141, "014292715": 141, "019827018": 141, "029575512": 141, "0015803224": 141, "018405361": 141, "002776671": 141, "019370057": 141, "027569963": 141, "008460119": 141, "012445833": 141, "0028322043": 141, "0052804346": 141, "006422837": 141, "009335961": 141, "02354617": 141, "0010345082": 141, "018900402": 141, "0029908712": 141, "0068544107": 141, "010148335": 141, "007939693": 141, "0072796377": 141, "020537846": 141, "010928977": 141, "029880153": 141, "0038492593": 141, "002795711": 141, "01892579": 141, "029956313": 141, "024612412": 141, "00446806": 141, "026452947": 141, "017605681": 141, "041177236": 141, "02018243": 141, "014648129": 141, "021553313": 141, "0015017823": 141, "0034874987": 141, "034170505": 141, "036125284": 141, "02805231": 141, "018430749": 141, "003404992": 141, "009329614": 141, "020766325": 141, "012560072": 141, "01707256": 141, "011538258": 141, "007711212": 141, "01332802": 141, "007412918": 141, "022492621": 141, "0059055826": 141, "025754813": 141, "01904003": 141, "013353407": 141, "0026005507": 141, "022530701": 141, "007895266": 141, "842112e": 141, "028103083": 141, "013962688": 141, "019979337": 141, "02115982": 141, "0029305778": 141, "01340418": 141, "01609517": 141, "011880978": 141, "016793307": 141, "0048837676": 141, "013036073": 141, "025767507": 141, "030337114": 141, "022454541": 141, "018824242": 141, "0019785764": 141, "006146756": 141, "0021055099": 141, "0014525956": 141, "011157458": 141, "005293128": 141, "011468444": 141, "021591393": 141, "0051535014": 141, "005597769": 141, "1935701e": 141, "012731433": 141, "0034208586": 141, "024688572": 141, "0018103895": 141, "001299482": 141, "005461315": 141, "024878971": 141, "030565593": 141, "016717145": 141, "013226474": 141, "008764761": 141, "007355798": 141, "0070638508": 141, "005734222": 141, "012084072": 141, "023749264": 141, "028813912": 141, "015892077": 141, "0033573918": 141, "0052201413": 141, "01672984": 141, "0014105488": 141, "02184526": 141, "019560456": 141, "0063752364": 141, "008777454": 141, "00418246": 141, "013861141": 141, "012877407": 141, "009500975": 141, "005804036": 141, "0013859555": 141, "025335932": 141, "01779608": 141, "01537165": 141, "0019722297": 141, "011081297": 141, "0073875315": 141, "0015795291": 141, "015968239": 141, "013454954": 141, "0026592575": 141, "0020944031": 141, "014140395": 141, "0023339903": 141, "0064989966": 141, "0030828982": 141, "0046870206": 141, "013239168": 141, "017491441": 141, "011106684": 141, "029702445": 141, "003696939": 141, "013784981": 141, "017250266": 141, "0037762725": 141, "021413686": 141, "017047172": 141, "019268509": 141, "006898837": 141, "013924608": 141, "009266147": 141, "0023577902": 141, "020905953": 141, "005264568": 141, "0014875022": 141, "0064513967": 141, "003044818": 141, "0073431046": 141, "0012431552": 141, "0021166166": 141, "0019404964": 141, "018646536": 141, "6913787e": 141, "01518125": 141, "0013581888": 141, "016755225": 141, "5418405e": 141, "0076921717": 141, "016780613": 141, "56008e": 141, "010948017": 141, "956349e": 141, "006108676": 141, "011290737": 141, "027443029": 141, "008910734": 141, "012858367": 141, "016844079": 141, "017592987": 141, "01476237": 141, "0039793663": 141, "008066626": 141, "0018421229": 141, "03422128": 141, "016526746": 141, "022200674": 141, "0010051549": 141, "004474407": 141, "6767073e": 141, "007749292": 141, "026249854": 141, "006670357": 141, "014775063": 141, "02589444": 141, "0023530303": 141, "0066068904": 141, "0067147836": 141, "0012542619": 141, "018671922": 141, "0022498968": 141, "0048552076": 141, "0031463648": 141, "0217691": 141, "011849245": 141, "0026735375": 141, "011024177": 141, "01733912": 141, "0073621445": 141, "012407753": 141, "0032939252": 141, "0072288644": 141, "014457729": 141, "0011781019": 141, "009615215": 141, "0141150085": 141, "025376e": 141, "04615303": 141, "031631835": 141, "005131288": 141, "006594197": 141, "025386706": 141, "028204631": 141, "023482703": 141, "013086847": 141, "022314915": 141, "2082416e": 141, "023457317": 141, "006013476": 141, "0125029525": 141, "0021404168": 141, "023977743": 141, "0033542186": 141, "029423192": 141, "0019960299": 141, "0076477453": 141, "080113e": 141, "030413274": 141, "008790147": 141, "013493034": 141, "078089505": 141, "004842514": 141, "015232024": 141, "00825068": 141, "036785338": 141, "335175e": 141, "03891782": 141, "004680674": 141, "005451795": 141, "012134845": 141, "02490436": 141, "007101931": 141, "026351402": 141, "0043093935": 141, "0059595294": 141, "024561638": 141, "019331977": 141, "02385081": 141, "008206253": 141, "015942851": 141, "027138388": 141, "01521933": 141, "0043728603": 141, "025500946": 141, "026173694": 141, "0011558884": 141, "023381157": 141, "0016207825": 141, "001237602": 141, "0049916613": 141, "0024085636": 141, "015587438": 141, "0048203007": 141, "35144e": 141, "012255432": 141, "0048742476": 141, "0062546497": 141, "04051718": 141, "0051090745": 141, "016932933": 141, "0016660026": 141, "02774767": 141, "050976507": 141, "03043866": 141, "0028655245": 141, "0023292303": 141, "0104275895": 141, "004360167": 141, "011144764": 141, "024282385": 141, "013988075": 141, "016234798": 141, "014698903": 141, "037673872": 141, "0054644886": 141, "020461684": 141, "012598153": 141, "012363326": 141, "002833791": 141, "0029274046": 141, "01243314": 141, "0037413659": 141, "012820287": 141, "0070511578": 141, "017364508": 141, "0025545373": 141, "0034843255": 141, "009773882": 141, "0010368882": 141, "009894469": 141, "330013e": 141, "008237986": 141, "0013804021": 141, "0035890455": 141, "029194713": 141, "022721102": 141, "026605267": 141, "011151111": 141, "0054200618": 141, "0043919003": 141, "0022181633": 141, "0025402573": 141, "015562051": 141, "021984888": 141, "025145533": 141, "008422039": 141, "0032590183": 141, "008130092": 141, "0019309763": 141, "009278841": 141, "981743e": 141, "04363975": 141, "008510893": 141, "011360551": 141, "025069373": 141, "004252273": 141, "011132071": 141, "020474378": 141, "014889303": 141, "01896387": 141, "0075461986": 141, "012096765": 141, "030489434": 141, "012166579": 141, "032393437": 141, "0035763523": 141, "009018627": 141, "007438305": 141, "0064196633": 141, "025056679": 141, "012230045": 141, "821482e": 141, "0124839125": 141, "0014454556": 141, "012744127": 141, "007159051": 141, "010402203": 141, "010053135": 141, "0042808335": 141, "0025307373": 141, "004128513": 141, "010890896": 141, "025716733": 141, "024155451": 141, "04023793": 141, "015257411": 141, "0129154865": 141, "013264554": 141, "028636204": 141, "023520783": 141, "004890114": 141, "008022199": 141, "016184025": 141, "051535014": 141, "011792125": 141, "009291534": 141, "031707995": 141, "039476328": 141, "004699714": 141, "014216555": 141, "01480045": 141, "0065053436": 141, "0044997935": 141, "021705633": 141, "0904366e": 141, "019585844": 141, "0036842457": 141, "455769e": 141, "006727477": 141, "0108718565": 141, "0046076872": 141, "0303625": 141, "02967706": 141, "026554495": 141, "014825836": 141, "009786575": 141, "009285187": 141, "020931339": 141, "003630299": 141, "004693367": 141, "009589829": 141, "013886528": 141, "017694535": 141, "027493803": 141, "004982141": 141, "0071717445": 141, "03297733": 141, "007571585": 141, "006276863": 141, "016069785": 141, "0464047e": 141, "0025450173": 141, "015358957": 141, "018494215": 141, "7068556e": 141, "027646123": 141, "0011114617": 141, "013429567": 141, "007920653": 141, "0050011813": 141, "013543808": 141, "014381569": 141, "0047346205": 141, "018798856": 141, "019674698": 141, "012629886": 141, "029803993": 141, "009862735": 141, "0033732585": 141, "013048767": 141, "009456548": 141, "03815622": 141, "286778e": 141, "0040301397": 141, "014254635": 141, "0038809928": 141, "016666373": 141, "6997105e": 141, "017351814": 141, "015549357": 141, "02952474": 141, "00431574": 141, "009818309": 141, "470635e": 141, "011404978": 141, "025082065": 141, "021908727": 141, "018951176": 141, "022936888": 141, "013658048": 141, "004671154": 141, "0296009": 141, "0127949": 141, "018341895": 141, "6842424e": 141, "01292818": 141, "0036429923": 141, "030083247": 141, "00215311": 141, "024206225": 141, "02619908": 141, "009837349": 141, "010256229": 141, "008168173": 141, "0100340955": 141, "013150314": 141, "02188334": 141, "010935323": 141, "008371267": 141, "00857436": 141, "0036144322": 141, "009697721": 141, "007863532": 141, "018100722": 141, "019446217": 141, "023495397": 141, "0037032857": 141, "009380388": 141, "027265321": 141, "007140011": 141, "015193944": 141, "004556914": 141, "013632661": 141, "0056358487": 141, "01040855": 141, "0050519546": 141, "008155479": 141, "9020106e": 141, "032571144": 141, "0048076073": 141, "0060293428": 141, "016031705": 141, "021781793": 141, "0015866691": 141, "0016088824": 141, "024752038": 141, "0019547765": 141, "012369673": 141, "015320877": 141, "012706046": 141, "009082094": 141, "010249883": 141, "019128883": 141, "02543748": 141, "0084982": 141, "0032970984": 141, "012991647": 141, "022479929": 141, "02316537": 141, "0012312552": 141, "0042840065": 141, "018227655": 141, "005731049": 141, "02604676": 141, "006689397": 141, "006305423": 141, "018075334": 141, "019484296": 141, "01783416": 141, "0012130085": 141, "015866691": 141, "020626698": 141, "039882515": 141, "008682254": 141, "0022546567": 141, "009323268": 141, "035871416": 141, "014330796": 141, "0145465825": 141, "023216143": 141, "011531911": 141, "020372832": 141, "00641649": 141, "013531114": 141, "016437892": 141, "013124927": 141, "019814324": 141, "0015136823": 141, "016247492": 141, "004753661": 141, "013823061": 141, "007907959": 141, "027113002": 141, "009932549": 141, "009659641": 141, "0044807536": 141, "009850042": 141, "014191168": 141, "042954307": 141, "024701266": 141, "01059895": 141, "0047885673": 141, "021629473": 141, "006651317": 141, "031098714": 141, "0058262493": 141, "0051249415": 141, "0065180366": 141, "0519563e": 141, "009792922": 141, "0423958": 141, "010992444": 141, "008739374": 141, "002449817": 141, "012045992": 141, "014089622": 141, "0018310162": 141, "014406956": 141, "033180423": 141, "0052709146": 141, "0016802826": 141, "012750473": 141, "018329201": 141, "005750089": 141, "048234742": 141, "01771992": 141, "009240761": 141, "789961e": 141, "017669147": 141, "01730104": 141, "0026529108": 141, "022543395": 141, "017288346": 141, "007971426": 141, "019065415": 141, "007857186": 141, "0481933e": 141, "016488666": 141, "709636e": 141, "009348654": 141, "0049281945": 141, "0059436625": 141, "020956725": 141, "003538272": 141, "0038905127": 141, "0016485492": 141, "0044141137": 141, "01271874": 141, "01483853": 141, "01245218": 141, "0023657237": 141, "0037794458": 141, "5497736e": 141, "00882188": 141, "015815917": 141, "016767919": 141, "005185235": 141, "018049948": 141, "007685825": 141, "21934114": 141, "012007912": 141, "005039261": 141, "037445392": 141, "4307736e": 141, "031403355": 141, "0018468829": 141, "0024656837": 141, "01722488": 141, "013213781": 141, "011512871": 141, "0015811158": 141, "0035287521": 141, "0062419563": 141, "0048456877": 141, "025120145": 141, "023800036": 141, "0269697e": 141, "03554139": 141, "01071319": 141, "2110125e": 141, "017313734": 141, "03777542": 141, "0019944431": 141, "04402055": 141, "02442201": 141, "018976564": 141, "005873849": 141, "006924224": 141, "003865126": 141, "0057437425": 141, "0038206992": 141, "013163007": 141, "01646328": 141, "02446009": 141, "018748082": 141, "027239935": 141, "0032479118": 141, "03653147": 141, "015206637": 141, "018773468": 141, "00643553": 141, "010141989": 141, "009183641": 141, "02025859": 141, "019852404": 141, "006054729": 141, "010630683": 141, "009481935": 141, "059881e": 141, "03005786": 141, "014851223": 141, "014280022": 141, "003274885": 141, "0014168955": 141, "025005905": 141, "9089613e": 141, "022302222": 141, "008999587": 141, "010097562": 141, "024942439": 141, "012807593": 141, "019547764": 141, "034957495": 141, "026833748": 141, "7683392e": 141, "0068417173": 141, "011182844": 141, "016907547": 141, "03013402": 141, "0041062995": 141, "014571969": 141, "02070286": 141, "011335164": 141, "012725086": 141, "8341785e": 141, "0013653288": 141, "017859548": 141, "0056802756": 141, "006556117": 141, "0033002717": 141, "011398631": 141, "010954363": 141, "055139925": 141, "009424815": 141, "004959928": 141, "028788524": 141, "0031241516": 141, "0027465243": 141, "036810722": 141, "0031828582": 141, "005543822": 141, "0026053106": 141, "6973375e": 141, "017935708": 141, "0015406557": 141, "0023911104": 141, "016945627": 141, "0035636588": 141, "02396505": 141, "01911619": 141, "0029448578": 141, "033408906": 141, "020550538": 141, "01294722": 141, "011500178": 141, "011988872": 141, "025424786": 141, "011887325": 141, "038587794": 141, "003395472": 141, "007946039": 141, "019966645": 141, "033713546": 141, "018189576": 141, "026859134": 141, "012223699": 141, "024802811": 141, "099946e": 141, "0010448216": 141, "005020221": 141, "012356979": 141, "007590625": 141, "03089562": 141, "014521196": 141, "017212186": 141, "024917051": 141, "020169739": 141, "044680603": 141, "005658062": 141, "013835755": 141, "3776127e": 141, "0028496578": 141, "006467263": 141, "053007443": 141, "011614418": 141, "0056453687": 141, "16145945": 141, "0091963345": 141, "024548944": 141, "016425198": 141, "015701678": 141, "862344e": 141, "023190755": 141, "0074509983": 141, "018088028": 141, "010205456": 141, "010383163": 141, "033028103": 141, "0023324036": 141, "019052723": 141, "016590212": 141, "4408938e": 141, "02324153": 141, "019623924": 141, "0383847": 141, "002686231": 141, "0010852817": 141, "0076223584": 141, "002762391": 141, "030540207": 141, "0037667525": 141, "011005137": 141, "0017850028": 141, "005984916": 141, "0029353378": 141, "02555172": 141, "00855532": 141, "010287963": 141, "2544602e": 141, "0065624635": 141, "017808774": 141, "03528752": 141, "013188394": 141, "027925376": 141, "0014248289": 141, "009342308": 141, "0017247093": 141, "023596942": 141, "004709234": 141, "037369233": 141, "016082479": 141, "0011963486": 141, "00222451": 141, "014165782": 141, "0014414889": 141, "0058865426": 141, "2633766e": 141, "012274472": 141, "011328817": 141, "0020372833": 141, "0013026553": 141, "00635937": 141, "00651169": 141, "0024672705": 141, "0026640175": 141, "0033669118": 141, "0074763848": 141, "311968e": 141, "023444623": 141, "017656455": 141, "0065243836": 141, "021832567": 141, "02320345": 141, "015092397": 141, "034119733": 141, "025983294": 141, "021324834": 141, "015663598": 141, "00417294": 141, "014965463": 141, "014203862": 141, "0074319583": 141, "007381185": 141, "0035446188": 141, "009310574": 141, "02562788": 141, "01101783": 141, "009050361": 141, "010484709": 141, "005835769": 141, "0036620323": 141, "0055565154": 141, "028712364": 141, "033586614": 141, "027087616": 141, "019509684": 141, "005166195": 141, "020042805": 141, "019903177": 141, "010738577": 141, "038816273": 141, "014990849": 141, "025412092": 141, "030464048": 141, "009158255": 141, "046609994": 141, "9095457e": 141, "0016675893": 141, "012921833": 141, "2828116e": 141, "0033288319": 141, "10784273": 141, "022898808": 141, "020563232": 141, "020487072": 141, "0063117696": 141, "005299475": 141, "013442261": 141, "0112590045": 141, "015282797": 141, "013581888": 141, "023723876": 141, "00847916": 141, "025221692": 141, "028686978": 141, "8655227e": 141, "005169368": 141, "0765446e": 141, "011436711": 141, "004963101": 141, "0067592105": 141, "007527158": 141, "029854767": 141, "0072098244": 141, "011246311": 141, "009945242": 141, "017326428": 141, "004052353": 141, "011684231": 141, "311375e": 141, "026986068": 141, "012801247": 141, "0023815904": 141, "047600072": 141, "006886144": 141, "004464887": 141, "9809546e": 141, "018684616": 141, "022924196": 141, "0070575043": 141, "0037730993": 141, "025830973": 141, "029651672": 141, "0046140337": 141, "041710358": 141, "0058960626": 141, "0018706829": 141, "0065878504": 141, "0067338236": 141, "0011431951": 141, "020233205": 141, "008218946": 141, "015930157": 141, "0024022171": 141, "0051439814": 141, "0120777255": 141, "00895516": 141, "010116602": 141, "038638566": 141, "0056231553": 141, "840722e": 141, "009754842": 141, "0074256114": 141, "0011773085": 141, "7314436e": 141, "02014435": 141, "010186416": 141, "0067211306": 141, "015828611": 141, "0043665133": 141, "0112526575": 141, "031073328": 141, "018126108": 141, "014432343": 141, "0021118566": 141, "017389894": 141, "023635022": 141, "0062736897": 141, "040187154": 141, "006905184": 141, "0068163304": 141, "0087838005": 141, "010072175": 141, "00832684": 141, "01061799": 141, "01268066": 141, "0137088215": 141, "007926999": 141, "01711064": 141, "00885996": 141, "015422424": 141, "0052011013": 141, "022327607": 141, "0092280675": 141, "022251448": 141, "0045251804": 141, "5886433e": 141, "020360138": 141, "021870647": 141, "013251861": 141, "027595349": 141, "01094167": 141, "011550951": 141, "0033034452": 141, "026072146": 141, "030032473": 141, "00411582": 141, "012185619": 141, "0096215615": 141, "002618004": 141, "006575157": 141, "03675995": 141, "010986097": 141, "023673104": 141, "011900018": 141, "016044399": 141, "0040206197": 141, "018722696": 141, "0038873393": 141, "011163804": 141, "01919235": 141, "015790531": 141, "0013692954": 141, "011836552": 141, "005096381": 141, "031200262": 141, "0358968": 141, "009126521": 141, "013696128": 141, "014711596": 141, "018608455": 141, "03922246": 141, "0179484": 141, "0069178776": 141, "010909937": 141, "013569194": 141, "019839711": 141, "024447398": 141, "01086551": 141, "010294309": 141, "024726652": 141, "016679065": 141, "0013145554": 141, "004617207": 141, "004690194": 141, "013315327": 141, "0112653505": 141, "0016009491": 141, "003998406": 141, "025272466": 141, "0030051514": 141, "007869879": 141, "031251036": 141, "005375635": 141, "0046203807": 141, "0030099114": 141, "0071273176": 141, "012020606": 141, "016285572": 141, "033865865": 141, "04290353": 141, "009107481": 141, "007400225": 141, "018253041": 141, "016704453": 141, "003957153": 141, "022644943": 141, "0074446513": 141, "012122152": 141, "0013796088": 141, "019014644": 141, "026909908": 141, "003035298": 141, "012153885": 141, "020499766": 141, "006010303": 141, "004026966": 141, "3466855e": 141, "001078935": 141, "0051725414": 141, "0014906756": 141, "009526362": 141, "016310958": 141, "010357776": 141, "0145338895": 141, "015993625": 141, "025259772": 141, "036937658": 141, "0044014202": 141, "008713987": 141, "003931766": 141, "0053597684": 141, "02797615": 141, "020093577": 141, "004550567": 141, "024434704": 141, "0029956312": 141, "6632223e": 141, "51248e": 141, "028915457": 141, "023470009": 141, "008675907": 141, "014013462": 141, "0031527115": 141, "0018865496": 141, "0033986452": 141, "040974144": 141, "002589444": 141, "0018516429": 141, "049504075": 141, "00884092": 141, "004541047": 141, "014076929": 141, "015473197": 141, "0027211376": 141, "031327195": 141, "041126464": 141, "018595763": 141, "0104593225": 141, "01938275": 141, "0027592175": 141, "setenableoutputlog": [142, 144, 225, 246], "setevaluationlogextend": [142, 144], "setoutputlogspath": [142, 144, 147, 149, 225, 246], "assum": 144, "getniter": [145, 146, 187, 188], "niter": [145, 146, 187, 188], "poscol": [145, 146, 187, 188, 235], "setiter": [145, 146], "setposcolumn": [145, 146, 187, 188], "member": [146, 227], "helper": [146, 155, 188, 195, 217, 237, 238, 239, 244, 253, 256], "datasetpath": 146, "pierr": [146, 237], "vinken": [146, 237], "34": [146, 237, 239], "md": [146, 237], "vb": [146, 235, 237, 256], "41": [146, 148, 237, 239], "43": [146, 148, 237, 239], "dt": [146, 237, 238, 256], "49": [146, 237], "anc": [146, 237, 256], "trainingperceptrondf": 146, "trainedpo": 146, "cd": [146, 235, 237], "pos_anc": 146, "25": [146, 148, 237, 239], "33": [146, 239], "detectlist": [147, 148], "setcustombound": [147, 148, 149], "setcustomboundsstrategi": [147, 148], "setdetectlist": [147, 148], "setexplodesent": [147, 148, 149], "setsplitlength": [147, 148, 149], "setuseabbrevi": [147, 148], "setusecustomboundsonli": [147, 148, 149], "custombound": [147, 148, 149], "customboundsstrategi": [147, 148], "explodesent": [147, 148, 149, 235, 236], "splitlength": [147, 148, 149], "useabbrevi": [147, 148], "usecustomboundsonli": [147, 148, 149], "epochsnumb": [147, 149], "impossiblepenultim": [147, 149], "modelarchitectur": [147, 149], "setepochsnumb": [147, 149], "setimpossiblepenultim": [147, 149], "ii": 148, "abbrevi": 148, "period": 148, "geo": 148, "1026": 148, "253": 148, "553": 148, "ellipsi": 148, "quotat": 148, "mark": [148, 149, 188], "exclam": 148, "breaker": 148, "pragmaticcontentformatt": 148, "explicitli": [148, 149, 179, 217, 250], "prepend": [148, 191], "break": [148, 165], "append": [148, 175, 250], "forcibli": [148, 149], "99999": [148, 149, 185], "nhow": 148, "third": [148, 179, 224, 235, 244], "sentencedetectordl": [149, 163], "imposs": [149, 188], "penultim": 149, "eo": 149, "stefan": 149, "schweter": 149, "sajawel": 149, "ahm": 149, "cover": [149, 156, 162, 165, 171, 188], "broken": 149, "moder": 149, "lack": 149, "easier": [149, 194, 252, 256], "polit": 149, "successor": 149, "great": 149, "heritag": [149, 170], "bequeath": 149, "nelson": 149, "mandela": 149, "epochs_numb": 149, "impossible_penultim": 149, "model_architectur": 149, "output_logs_path": 149, "validation_split": 149, "sentencedl": 149, "sentencesdl": 149, "helen": 149, "peopl": 149, "decrementmultipli": [150, 151], "enablescor": [150, 151], "incrementmultipli": [150, 151], "negativemultipli": [150, 151], "positivemultipli": [150, 151], "reversemultipli": [150, 151], "featurelimit": [150, 152], "importantfeatureratio": [150, 152], "prunecorpu": [150, 152], "sentimentcol": [150, 152], "setprunecorpu": [150, 152], "setsentimentcol": [150, 152], "unimportantfeaturestep": [150, 152], "els": 151, "cool": 151, "superb": 151, "uninspir": 151, "sentimentscor": 151, "nice": [151, 225, 246], "multipli": 151, "decrement": 151, "increment": [151, 184], "revert": 151, "entri": [151, 192, 200, 228], "sttr": 151, "sda": [151, 152], "pragmat": 151, "viveknsenti": 152, "analys": 152, "vivek": 152, "narayanan": 152, "give": 152, "transit": [152, 175], "unfrequ": 152, "scope": 152, "naiv": 152, "bay": 152, "vivekn": 152, "train_senti": 152, "result_senti": 152, "final_senti": 152, "cast": [152, 190], "horribl": 152, "go": [152, 250], "again": [152, 183], "anyon": 152, "protagonist": 152, "music": 152, "boost": 152, "dirt": 152, "lookahead": 152, "unimport": 152, "sentiment_vivekn": 152, "setcach": [153, 156], "usecach": [153, 156, 171], "setsrclang": [153, 162, 165], "settgtlang": [153, 162, 165], "srclang": [153, 162, 165], "tgtlang": [153, 162, 165], "langid": [153, 163], "setlangid": [153, 163], "setmaxinputlength": [153, 163], "maxnewtoken": [153, 171], "setmaxnewtoken": [153, 171], "setstopateo": [153, 171], "setusecach": [153, 171], "stopateo": [153, 171], "settabl": [154, 155], "explan": [154, 155, 175, 253], "phi3": [154, 168], "5_mini_4k_instruct_q4_gguf": 154, "autoggufmodeltest": 154, "nthreadsdraft": [154, 155, 205, 212], "draft": [154, 155, 212], "nthreadsbatchdraft": [154, 155, 205, 212], "ndraft": [154, 155, 205, 212], "specul": [154, 155, 212], "psplit": [154, 155, 205, 212], "ngpulayersdraft": [154, 155, 205, 212], "modeldraft": [154, 155, 205, 212], "modelalia": [154, 155, 205, 212], "lookupcachestaticfilepath": [154, 155, 205, 212], "updat": [154, 155, 175, 212], "lookupcachedynamicfilepath": [154, 155, 205, 212], "inputprefixbo": [154, 155, 205, 212], "bo": [154, 155, 212], "preced": [154, 155, 212, 250], "systemprompt": [154, 155, 205, 212], "chattempl": [154, 155, 189, 201, 205, 212], "chat": [154, 155, 158, 160, 161, 167, 168, 169, 201, 212], "templat": [154, 155, 201, 212], "inputprefix": [154, 155, 205, 212], "inputsuffix": [154, 155, 205, 212], "infil": [154, 155, 212], "cacheprompt": [154, 155, 205, 212], "rememb": [154, 155, 175, 212], "reprocess": [154, 155, 212], "npredict": [154, 155, 205, 212], "minp": [154, 155, 205, 212], "min": [154, 155, 175, 212], "tfsz": [154, 155, 205, 212], "tail": [154, 155, 212], "free": [154, 155, 163, 212], "typicalp": [154, 155, 205, 212], "typic": [154, 155, 159, 212], "dynatemprang": [154, 155, 212], "dynatempexpon": [154, 155, 212], "expon": [154, 155, 212], "repeatlastn": [154, 155, 205, 212], "repeatpenalti": [154, 155, 205, 212], "mirostat": [154, 155, 205, 212], "mirostattau": [154, 155, 205, 212], "entropi": [154, 155, 212], "tau": [154, 155, 212], "mirostateta": [154, 155, 205, 212], "eta": [154, 155, 212], "penalizenl": [154, 155, 205, 212], "newlin": [154, 155, 175, 212], "nkeep": [154, 155, 205, 212], "rng": [154, 155, 212], "nprob": [154, 155, 205, 212], "minkeep": [154, 155, 205, 212], "sampler": [154, 155, 205, 212], "least": [154, 155, 188, 212], "bnf": [154, 155, 212], "penaltyprompt": [154, 155, 205, 212], "overrid": [154, 155, 212, 223], "ignoreeo": [154, 155, 205, 212], "impli": [154, 155, 212], "inf": [154, 155, 212], "disabletokenid": [154, 155, 205, 212], "stopstr": [154, 155, 205, 212], "usechattempl": [154, 155, 205, 212], "setnpredict": [154, 155, 205, 212], "setpenalizenl": [154, 155, 205, 212], "78": [154, 168, 237], "ingest": 155, "At": [155, 201, 251], "hasllamacppinferenceproperti": 155, "hasllamacppmodelproperti": 155, "preprocess": [155, 225, 246], "loadimagesasbyt": [155, 189, 198], "llava_v1": 155, "5_7b_q4_0_gguf": 155, "autoggufvisionmodeltest": 155, "caption_docu": 155, "imagespath": 155, "setminkeep": [155, 205, 212], "setminp": [155, 205, 212], "setnprob": [155, 205, 212], "setrepeatlastn": [155, 205, 212], "setrepeatpenalti": [155, 205, 212], "setstopstr": [155, 205, 212], "settfsz": [155, 205, 212], "settypicalp": [155, 205, 212], "depict": 155, "ornat": 155, "ceil": 155, "decor": 155, "wall": 155, "chair": 155, "throughout": 155, "cushion": 155, "surfac": 155, "possibli": 155, "bed": 155, "sofa": 155, "scene": 155, "sleep": 155, "hold": [155, 199, 254], "swim": 155, "aquarium": 155, "seem": 155, "babi": 155, "adult": 155, "young": 155, "gather": [155, 227], "neck": 155, "grass": 155, "speci": 155, "held": 155, "black": 155, "white": [155, 175], "chest": 155, "someth": 155, "anim": 155, "vicin": 155, "collar": 155, "stare": 155, "front": 155, "owner": 155, "comfort": 155, "seat": 155, "yellow": 155, "wheel": 155, "tire": 155, "park": 155, "bull": 155, "horn": 155, "modelpath": 155, "mmprojpath": 155, "captur": [156, 173], "past": [156, 163, 228], "incorpor": [156, 168], "versatil": [156, 164, 170], "valuabl": [156, 170], "summari": [156, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 171], "distilbart_xsum_12_6": 156, "barttestspec": 156, "ab": 156, "1910": 156, "13461": 156, "pytorch": [156, 162, 165], "fairseq": [156, 162, 165], "nois": 156, "reconstruct": [156, 204], "tranform": 156, "randomli": 156, "dialogu": [156, 160, 161, 167], "roug": 156, "bleu": [156, 162, 165], "ablat": 156, "influenc": [156, 175], "200": [156, 165, 171], "rich": [156, 171], "rise": [156, 171], "methodologi": [156, 171], "landscap": [156, 171], "systemat": [156, 171], "dozen": [156, 171], "insight": [156, 171], "coloss": [156, 171], "facilit": [156, 171], "use_cach": 156, "command": 157, "c4ai": 157, "highli": 157, "rag": [157, 173], "c4ai_command_r_v01_int4": 157, "bos_token": 157, "start_of_turn_token": 157, "user_token": 157, "end_of_turn_token": 157, "chatbot_token": 157, "ask": [157, 233], "excit": [157, 160], "whatev": 157, "minicpm": 158, "unveil": 158, "seri": [158, 166, 169], "2b": 158, "4b": [158, 169], "close": [158, 160, 161, 166, 167], "mistral": [158, 164], "7b": [158, 160, 164, 166, 167, 168, 169, 170], "chines": [158, 162, 165, 188], "llama2": [158, 160], "13b": [158, 160, 164, 169, 170], "mpt": 158, "30b": 158, "falcon": 158, "40b": 158, "mtbench": 158, "closest": 158, "70b": [158, 160, 161], "vicuna": 158, "33b": [158, 170], "v0": 158, "zephyr": 158, "dpo": 158, "multimodel": 158, "phi": [158, 167, 168], "6b": 158, "qwen": [158, 169], "vl": 158, "deploi": [158, 163, 168, 247], "smartphon": 158, "verbal": 158, "cpm": 158, "mini_cpm_2b_8bit": 158, "shengdinghu": 158, "notion": 158, "d4d3a8c426424654a4e80e42a711cb20": 158, "openbmb": 158, "leonardo": [158, 159, 160, 164, 166, 167, 168, 169], "student": [158, 166, 167, 168, 169], "california": [158, 166, 167, 168, 169], "lo": [158, 162], "passion": [158, 166, 167, 168, 169], "cultur": 158, "plai": 158, "basketbal": 158, "caus": [159, 185], "goal": [159, 165, 188], "direct": [159, 162, 165, 168], "10x": 159, "synthet": [159, 167, 168], "unpreced": 159, "prime": 159, "lengthi": 159, "benefit": 159, "suffici": 159, "learner": 159, "taskspecif": 159, "webpag": [159, 247], "webtext": 159, "coqa": 159, "exceed": [159, 161], "127": 159, "fashion": [159, 173], "5b": [159, 169], "underfit": 159, "reflect": [159, 162], "paragraph": [159, 175, 233], "promis": 159, "1776": [159, 160], "came": [159, 160], "kingdom": [159, 160], "4k": [160, 168], "reinforc": [160, 161, 167], "feedback": [160, 161, 167], "rlhf": [160, 161], "safeti": [160, 161, 165, 167, 168], "chatgpt": 160, "llam2": [160, 167], "facebookresearch": [160, 161], "substitut": [160, 167], "llama_2_7b_chat_hf_int4": 160, "cut": 161, "8b": [161, 169], "expans": 161, "offer": [161, 164, 166, 250, 252, 255], "known": 161, "llama3": 161, "llama_3_7b_instruct_hf_int4": 161, "latest": 161, "meta": [161, 225, 233, 248], "commerci": [161, 163, 166], "aim": [161, 165, 173], "foster": 161, "collabor": [161, 170], "minion": 161, "chatbot": 161, "respond": 161, "speak": 161, "oooh": 161, "yeah": 161, "bana": 161, "na": 161, "m2m100": 162, "seq": [162, 165], "900": 162, "m2m100_418m": 162, "afrikaan": [162, 165], "af": 162, "amhar": [162, 165], "arab": [162, 165], "asturian": [162, 165], "ast": 162, "azerbaijani": [162, 165], "az": 162, "bashkir": [162, 165], "ba": 162, "belarusian": [162, 165], "bulgarian": [162, 165], "bg": 162, "bengali": [162, 165], "breton": 162, "br": [162, 233], "bosnian": [162, 165], "catalan": [162, 165], "valencian": 162, "ca": 162, "cebuano": [162, 165], "ceb": 162, "czech": [162, 165], "welsh": [162, 165], "cy": 162, "da": [162, 164], "greeek": 162, "el": 162, "estonian": [162, 165], "persian": [162, 165], "fa": 162, "fulah": 162, "ff": 162, "fi": 162, "western": [162, 165], "frisian": 162, "fy": 162, "irish": [162, 165], "ga": 162, "gaelic": [162, 165], "scottish": [162, 165], "gd": 162, "galician": [162, 165], "gl": 162, "gujarati": [162, 165], "gu": 162, "hausa": [162, 165], "hebrew": [162, 165], "hindi": [162, 165], "croatian": [162, 165], "hr": 162, "haitian": [162, 165], "creol": [162, 165], "ht": 162, "armenian": [162, 165], "hy": 162, "indonesian": [162, 165], "igbo": [162, 165], "ig": 162, "iloko": 162, "ilo": 162, "iceland": [162, 165], "japanes": [162, 165, 188], "ja": 162, "javanes": [162, 165], "jv": 162, "georgian": [162, 165], "ka": 162, "kazakh": [162, 165], "kk": 162, "central": [162, 165, 247], "khmer": [162, 165], "km": 162, "kannada": [162, 165], "kn": 162, "korean": [162, 165, 188], "ko": 162, "luxembourgish": [162, 165], "letzeburgesch": 162, "lb": 162, "ganda": [162, 165], "lg": 162, "lingala": [162, 165], "ln": 162, "lao": [162, 165], "lithuanian": [162, 165], "lt": 162, "latvian": [162, 165], "lv": 162, "malagasi": [162, 165], "mg": 162, "macedonian": [162, 165], "mk": 162, "malayalam": [162, 165], "mongolian": [162, 165], "mn": 162, "marathi": [162, 165], "malai": [162, 165], "burmes": [162, 165], "nepali": [162, 165], "ne": 162, "flemish": 162, "nl": 162, "northern": [162, 165], "sotho": [162, 165], "occitan": [162, 165], "post": [162, 168], "oc": 162, "oriya": 162, "panjabi": [162, 165], "punjabi": 162, "pa": [162, 238, 256], "polish": [162, 165], "pushto": 162, "pashto": [162, 165], "romanian": [162, 165], "moldavian": 162, "moldovan": 162, "ro": 162, "ru": 162, "sindhi": [162, 165], "sd": 162, "sinhala": [162, 165], "sinhales": 162, "si": 162, "slovak": [162, 165], "sk": 162, "slovenian": [162, 165], "sl": 162, "somali": [162, 165], "albanian": [162, 165], "sq": 162, "serbian": [162, 165], "sr": 162, "swati": [162, 165], "ss": 162, "sundanes": [162, 165], "su": 162, "sw": 162, "tamil": [162, 165], "ta": [162, 165], "thai": [162, 165], "th": 162, "tagalog": [162, 165], "tl": 162, "tswana": [162, 165], "tn": 162, "tr": 162, "ukrainian": [162, 165], "uk": 162, "ur": 162, "uzbek": [162, 165], "uz": 162, "vietnames": [162, 165], "vi": 162, "wolof": [162, 165], "wo": 162, "xhosa": [162, 165], "xh": 162, "yiddish": [162, 165], "yi": 162, "yoruba": [162, 165], "yo": 162, "zh": [162, 188], "zulu": [162, 165], "zu": 162, "beyond": [162, 165], "massiv": 162, "worldwid": 162, "mine": [162, 165], "spars": [162, 165], "focu": [162, 165, 168], "wmt": 162, "m2m": 162, "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": [162, 165], "life": [162, 165], "chocol": [162, 165], "marian": 163, "mainli": 163, "academ": [163, 168], "notabl": [163, 164], "edinburgh": 163, "adam": 163, "mickiewicz": 163, "pozna\u0144": 163, "contributor": 163, "mariannmt": 163, "engin": [163, 182, 205, 212], "behind": [163, 165, 166, 167], "opus_mt_en_fr": 163, "differenti": 163, "toolkit": 163, "capit": [163, 175], "quell": 163, "capital": 163, "devrait": 163, "savoir": 163, "fran\u00e7ai": 163, "34b": [164, 170], "strike": 164, "balanc": [164, 212], "rival": [164, 168], "codellama": [164, 170], "latter": 164, "gqa": [164, 169], "quicker": 164, "compromis": 164, "streamlin": [164, 225, 246], "smoother": 164, "slide": [164, 169, 233], "swa": [164, 169], "reliabl": [164, 225, 246], "mistral_7b": 164, "vinci": 164, "invent": 164, "microscop": 164, "No": [164, 165, 236, 249], "late": 164, "16th": 164, "nllb": 165, "nllb_distilled_600m_8int": 165, "acehnes": 165, "ace_arab": 165, "latin": 165, "ace_latn": 165, "mesopotamian": 165, "acm_arab": 165, "izzi": 165, "adeni": 165, "acq_arab": 165, "tunisian": 165, "aeb_arab": 165, "afr_latn": 165, "south": 165, "levantin": 165, "ajp_arab": 165, "akan": 165, "aka_latn": 165, "amh_ethi": 165, "north": 165, "apc_arab": 165, "arb_arab": 165, "roman": 165, "arb_latn": 165, "najdi": 165, "ars_arab": 165, "moroccan": 165, "ary_arab": 165, "arz_arab": 165, "assames": 165, "asm_beng": 165, "ast_latn": 165, "awadhi": 165, "awa_deva": 165, "aymara": 165, "ayr_latn": 165, "azb_arab": 165, "azj_latn": 165, "bak_cyrl": 165, "bambara": 165, "bam_latn": 165, "balines": 165, "ban_latn": 165, "bel_cyrl": 165, "bemba": 165, "bem_latn": 165, "ben_beng": 165, "bhojpuri": 165, "bho_deva": 165, "banjar": 165, "bjn_arab": 165, "bjn_latn": 165, "tibetan": 165, "bod_tibt": 165, "bos_latn": 165, "bugines": 165, "bug_latn": 165, "bul_cyrl": 165, "cat_latn": 165, "ceb_latn": 165, "ces_latn": 165, "chokw": 165, "cjk_latn": 165, "kurdish": 165, "ckb_arab": 165, "crimean": 165, "tatar": 165, "crh_latn": 165, "cym_latn": 165, "dan_latn": 165, "deu_latn": 165, "southwestern": 165, "dinka": 165, "dik_latn": 165, "dyula": 165, "dyu_latn": 165, "dzongkha": 165, "dzo_tibt": 165, "greek": 165, "ell_grek": 165, "eng_latn": 165, "esperanto": 165, "epo_latn": 165, "est_latn": 165, "basqu": 165, "eus_latn": 165, "ew": 165, "ewe_latn": 165, "faroes": 165, "fao_latn": 165, "fijian": 165, "fij_latn": 165, "fin_latn": 165, "fon": 165, "fon_latn": 165, "fra_latn": 165, "friulian": 165, "fur_latn": 165, "nigerian": 165, "fulfuld": 165, "fuv_latn": 165, "gla_latn": 165, "gle_latn": 165, "glg_latn": 165, "guarani": 165, "grn_latn": 165, "guj_gujr": 165, "hat_latn": 165, "hau_latn": 165, "heb_hebr": 165, "hin_deva": 165, "chhattisgarhi": 165, "hne_deva": 165, "hrv_latn": 165, "hun_latn": 165, "hye_armn": 165, "ibo_latn": 165, "ilocano": 165, "ilo_latn": 165, "ind_latn": 165, "isl_latn": 165, "ita_latn": 165, "jav_latn": 165, "jpn_jpan": 165, "kabyl": 165, "kab_latn": 165, "jingpho": 165, "kac_latn": 165, "kamba": 165, "kam_latn": 165, "kan_knda": 165, "kashmiri": 165, "kas_arab": 165, "devanagari": 165, "kas_deva": 165, "kat_geor": 165, "kanuri": 165, "knc_arab": 165, "knc_latn": 165, "kaz_cyrl": 165, "kabiy\u00e8": 165, "kbp_latn": 165, "kabuverdianu": 165, "kea_latn": 165, "khm_khmr": 165, "kikuyu": 165, "kik_latn": 165, "kinyarwanda": 165, "kin_latn": 165, "kyrgyz": 165, "kir_cyrl": 165, "kimbundu": 165, "kmb_latn": 165, "kmr_latn": 165, "kikongo": 165, "kon_latn": 165, "kor_hang": 165, "lao_laoo": 165, "ligurian": 165, "lij_latn": 165, "limburgish": 165, "lim_latn": 165, "lin_latn": 165, "lit_latn": 165, "lombard": 165, "lmo_latn": 165, "latgalian": 165, "ltg_latn": 165, "ltz_latn": 165, "luba": 165, "kasai": 165, "lua_latn": 165, "lug_latn": 165, "luo": 165, "luo_latn": 165, "mizo": 165, "lus_latn": 165, "lvs_latn": 165, "magahi": 165, "mag_deva": 165, "maithili": 165, "mai_deva": 165, "mal_mlym": 165, "mar_deva": 165, "minangkabau": 165, "min_arab": 165, "min_latn": 165, "mkd_cyrl": 165, "plateau": 165, "plt_latn": 165, "maltes": 165, "mlt_latn": 165, "meitei": 165, "mni_beng": 165, "halh": 165, "khk_cyrl": 165, "mossi": 165, "mos_latn": 165, "maori": 165, "mri_latn": 165, "mya_mymr": 165, "nld_latn": 165, "nynorsk": 165, "nno_latn": 165, "bokm\u00e5l": 165, "nob_latn": 165, "npi_deva": 165, "nso_latn": 165, "nuer": 165, "nus_latn": 165, "nyanja": 165, "nya_latn": 165, "oci_latn": 165, "west": 165, "oromo": 165, "gaz_latn": 165, "odia": 165, "ory_orya": 165, "pangasinan": 165, "pag_latn": 165, "eastern": 165, "pan_guru": 165, "papiamento": 165, "pap_latn": 165, "pes_arab": 165, "pol_latn": 165, "por_latn": 165, "dari": 165, "prs_arab": 165, "southern": 165, "pbt_arab": 165, "ayacucho": 165, "quechua": 165, "quy_latn": 165, "ron_latn": 165, "rundi": 165, "run_latn": 165, "rus_cyrl": 165, "sango": 165, "sag_latn": 165, "sanskrit": 165, "san_deva": 165, "santali": 165, "sat_olck": 165, "sicilian": 165, "scn_latn": 165, "shan": 165, "shn_mymr": 165, "sin_sinh": 165, "slk_latn": 165, "slv_latn": 165, "samoan": 165, "smo_latn": 165, "shona": 165, "sna_latn": 165, "snd_arab": 165, "som_latn": 165, "sot_latn": 165, "spa_latn": 165, "tosk": 165, "als_latn": 165, "sardinian": 165, "srd_latn": 165, "srp_cyrl": 165, "ssw_latn": 165, "sun_latn": 165, "swe_latn": 165, "swh_latn": 165, "silesian": 165, "szl_latn": 165, "tam_taml": 165, "tat_cyrl": 165, "telugu": 165, "tel_telu": 165, "tajik": 165, "tgk_cyrl": 165, "tgl_latn": 165, "tha_thai": 165, "tigrinya": 165, "tir_ethi": 165, "tamasheq": 165, "taq_latn": 165, "tifinagh": 165, "taq_tfng": 165, "tok": 165, "pisin": 165, "tpi_latn": 165, "tsn_latn": 165, "tsonga": 165, "tso_latn": 165, "turkmen": 165, "tuk_latn": 165, "tumbuka": 165, "tum_latn": 165, "tur_latn": 165, "twi": 165, "twi_latn": 165, "atla": 165, "tamazight": 165, "tzm_tfng": 165, "uyghur": 165, "uig_arab": 165, "ukr_cyrl": 165, "umbundu": 165, "umb_latn": 165, "urd_arab": 165, "uzn_latn": 165, "venetian": 165, "vec_latn": 165, "vie_latn": 165, "warai": 165, "war_latn": 165, "wol_latn": 165, "xho_latn": 165, "ydd_hebr": 165, "yor_latn": 165, "yue_hant": 165, "simplifi": [165, 233], "zho_han": 165, "tradit": 165, "zho_hant": 165, "zsm_latn": 165, "zul_latn": 165, "driven": 165, "erad": 165, "barrier": 165, "solidifi": 165, "artifici": [165, 166, 167, 168, 169], "intellig": [165, 166, 167, 168, 169], "effort": [165, 166], "coalesc": 165, "leav": 165, "vast": 165, "major": 165, "mostli": 165, "safe": 165, "ethic": 165, "consider": 165, "exploratori": 165, "interview": 165, "nativ": [165, 247], "speaker": 165, "narrow": 165, "gap": 165, "gate": [165, 166], "expert": 165, "counteract": 165, "overfit": 165, "critic": 165, "flore": 165, "assess": [165, 167, 168], "groundwork": 165, "realiz": 165, "olmo": 166, "dolma": 166, "soon": 166, "olmo_1b_int4": 166, "lm": [166, 175], "surg": 166, "interfac": [166, 225, 246, 254], "undisclos": 166, "scientif": [166, 170], "risk": 166, "believ": 166, "hope": 166, "empow": 166, "strengthen": 166, "wave": 166, "innov": [166, 168], "skill": [166, 167, 168, 169], "textbook": 167, "augment": 167, "websit": [167, 168], "educ": 167, "sens": [167, 168, 255], "showcas": [167, 168], "nearli": 167, "hasn": 167, "intent": [167, 202], "craft": 167, "vital": 167, "societ": 167, "phi2": 167, "medium": 168, "14b": [168, 169], "underw": 168, "math": [168, 170], "phi_3_mini_128k_instruct": 168, "big": 168, "trillion": [168, 170], "mixtral": 168, "8x7b": 168, "69": [168, 237], "mmlu": 168, "mt": 168, "bench": 168, "enough": 168, "compos": 168, "heavili": 168, "8t": 168, "moreov": 168, "qwen1": 169, "72b": 169, "stabl": 169, "32k": 169, "swiglu": 169, "qkv": 169, "qwen_7": 169, "5b_chat": 169, "starcoder2": 170, "predecessor": 170, "starcoder2transform": 170, "bigcod": 170, "starcod": 170, "partnership": 170, "swh": 170, "stack": 170, "digit": 170, "archiv": 170, "619": 170, "15b": 170, "thoroughli": 170, "starcoderbas": 170, "twice": 170, "although": 170, "deepseekcod": 170, "openrail": 170, "transpar": 170, "regard": [170, 211], "persist": [170, 235], "swhid": 170, "def": [170, 217], "t5": 171, "reconsid": 171, "hyper": 171, "t5_small": 171, "encount": 171, "aggregationmethod": [172, 173], "asretriev": [172, 173], "asretrieverqueri": [172, 173], "bucketlength": [172, 173], "identityrank": [172, 173], "numhasht": [172, 173], "numberofneighbour": [172, 173], "setaggregationmethod": [172, 173], "setbucketlength": [172, 173], "setidentityrank": [172, 173], "setnumhasht": [172, 173], "setnumberofneighbour": [172, 173], "setsimilaritymethod": [172, 173], "setvisibledist": [172, 173], "similaritymethod": [172, 173], "visibledist": [172, 173], "extractnearestneighbor": [172, 173], "getoutputcol": [172, 173, 189, 190, 192, 193, 194, 198, 200, 205, 208], "outputcol": [172, 173, 189, 190, 192, 193, 194, 195, 198, 200, 201, 205, 208, 232], "setextractnearestneighbor": [172, 173], "documentsimilarityrank": 173, "lsh": 173, "lib": 173, "execut": [173, 199, 250, 254], "ranker": 173, "jupyt": [173, 225, 243, 246], "doc_similarity_rank": [173, 205, 209], "enablecach": [173, 205, 212], "rdd": [173, 212], "neighbour": 173, "brp": 173, "bucket": 173, "euclidean": 173, "hash": 173, "ident": 173, "debug": 173, "document_similarity_ranker_finish": 173, "finished_doc_similarity_rankings_id": 173, "finished_doc_similarity_rankings_neighbor": 173, "docsimrankerpipelin": 173, "1510101612": 173, "1634839239": 173, "12448559591306324": 173, "612640902": 173, "1274183715": 173, "1220122862046063": 173, "1320876223": 173, "1293373212": 173, "17848855164122393": 173, "1548374770": 173, "1719102856": 173, "23297156732534166": 173, "wise": 173, "inclus": 173, "visibl": 173, "addregexclass": [174, 175], "addvocabclass": [174, 175], "casestrategi": [174, 175], "classcount": [174, 175], "compoundcount": [174, 175], "errorthreshold": [174, 175], "finalr": [174, 175], "initialr": [174, 175], "languagemodelclass": [174, 175], "maxcandid": [174, 175], "maxsentlen": [174, 175], "maxwindowlen": [174, 175], "setcasestrategi": [174, 175], "setclasscount": [174, 175], "setcompoundcount": [174, 175], "setepoch": [174, 175], "seterrorthreshold": [174, 175], "setfinalr": [174, 175], "setinitialr": [174, 175], "setlanguagemodelclass": [174, 175], "setmaxcandid": [174, 175], "setmaxsentlen": [174, 175], "setmaxwindowlen": [174, 175], "settradeoff": [174, 175], "setvalidationfract": [174, 175], "setweighteddistpath": [174, 175], "setwordmaxdist": [174, 175], "tradeoff": [174, 175], "validationfract": [174, 175], "weighteddistpath": [174, 175], "wordmaxdist": [174, 175], "comparelowcas": [174, 175], "correctsymbol": [174, 175], "gamma": [174, 175], "getwordclass": [174, 175], "idsvocab": [174, 175], "setclass": [174, 175], "setcomparelowcas": [174, 175], "setcorrectsymbol": [174, 175], "setgamma": [174, 175], "setidsvocab": [174, 175], "setvocabfreq": [174, 175], "setvocabid": [174, 175], "setweight": [174, 175], "updateregexclass": [174, 175], "updatevocabclass": [174, 175], "vocabfreq": [174, 175], "vocabid": [174, 175], "doublevari": [174, 176], "dupslimit": [174, 176, 177], "frequencyprior": [174, 176], "intersect": [174, 176], "reductlimit": [174, 176], "setdoublevari": [174, 176], "setfrequencyprior": [174, 176], "setshortcircuit": [174, 176], "shortcircuit": [174, 176], "vowelswaplimit": [174, 176], "wordsizeignor": [174, 176], "deletesthreshold": [174, 177], "frequencythreshold": [174, 177, 187, 188], "maxeditdist": [174, 177], "setdeletesthreshold": [174, 177], "setfrequencythreshold": [174, 177, 187, 188], "setmaxeditdist": [174, 177], "spell": [174, 175, 176, 177, 199, 204, 241, 253, 254, 255], "contextspellcheck": 175, "noisi": 175, "surround": [175, 203], "edit": [175, 176, 177], "subword": 175, "checker": [175, 176, 177, 253], "uppercas": 175, "perplex": 175, "nlm": 175, "datapoint": 175, "vocab": 175, "compound": 175, "levenshtein": [175, 176, 177], "depth": [175, 253], "sherlock": 175, "spellcheck": [175, 176, 177], "1650": 175, "_name_": 175, "userdist": 175, "sentlen": 175, "fraction": 175, "dist": 175, "spellcheck_dl": 175, "decis": 175, "usenewlin": 175, "cold": 175, "dreari": 175, "smow": 175, "norvigsweet": 176, "norvig": 176, "bayesian": 176, "tokenpattern": 176, "ham": 176, "duplic": [176, 177], "vowel": 176, "corrector": 176, "gummi": [176, 177], "gummic": [176, 177], "gummier": [176, 177], "gummiest": [176, 177], "gummifer": [176, 177], "basi": [176, 177], "sensitivti": 176, "token_pattern": [176, 177], "symmetr": [176, 177], "delet": [176, 177, 250], "damerau": [176, 177], "transpos": [176, 177], "spellcheck_norvig": 176, "symspel": [176, 177], "somtim": 176, "wrrite": [176, 177], "wordz": [176, 177], "erong": [176, 177], "sometim": [176, 177, 250], "wrong": [176, 177], "symmetricdelet": 177, "deriv": 177, "teach": 177, "patttern": 177, "spellcheck_sd": 177, "spmetim": 177, "employ": 178, "mllib": [179, 233, 247], "stopwordsremov": 179, "cleantoken": [179, 193, 204], "stopwords_en": 179, "forth": 179, "defaultparamswrit": 180, "defaultparamsread": 180, "assertiondlapproach": 180, "medicalnerapproach": 180, "srt": 180, "greaph": 180, "infix": [181, 183, 185], "setinfix": [181, 183], "setprefix": [181, 183], "positionalmask": [181, 184], "setpositionalmask": [181, 184], "settolowercas": [181, 184, 187, 188], "tolowercas": [181, 184, 187, 188], "addcontextchar": [181, 185], "addexcept": [181, 185], "addinfixpattern": [181, 185], "addsplitchar": [181, 185], "casesensitiveexcept": [181, 185], "contextchar": [181, 185], "exceptionspath": [181, 185], "getcasesensitiveexcept": [181, 185], "getcontextchar": [181, 185], "getexcept": [181, 185], "getinfixpattern": [181, 185], "getprefixpattern": [181, 185], "getsplitchar": [181, 185], "getsuffixpattern": [181, 185], "infixpattern": [181, 185], "prefixpattern": [181, 185], "setcasesensitiveexcept": [181, 185], "setexcept": [181, 185], "setexceptionspath": [181, 185], "setinfixpattern": [181, 185], "setprefixpattern": [181, 185], "setsplitchar": [181, 185], "setsuffixpattern": [181, 185], "settargetpattern": [181, 185], "splitchar": [181, 185], "suffixpattern": [181, 185], "targetpattern": [181, 185], "flatten": 182, "artist": 182, "benezar": 182, "robert": 182, "farendel": 182, "graduat": 182, "luca": 182, "qam": 183, "guarante": 184, "flag": 184, "eventu": 184, "nthi": 184, "tokenizedsent": 185, "rulefactori": [185, 211], "grab": 185, "sub": 185, "won": 185, "didn": 185, "jane": 185, "boyfriend": 185, "piec": 185, "token_rul": 185, "factori": 185, "17": [186, 237, 239], "ambiguitythreshold": [187, 188], "enableregextoken": [187, 188], "getambiguitythreshold": [187, 188], "getfrequencythreshold": [187, 188], "setambiguitythreshold": [187, 188], "setenableregextoken": [187, 188], "setniter": [187, 188], "wordsegment": 188, "correspond": [188, 225], "rr": 188, "likewis": 188, "themselv": 188, "\u4e0a\u6d77": 188, "\u8ba1\u5212": 188, "\u5230": 188, "\u672c": 188, "\u4e16\u7eaa": 188, "\u672b": 188, "\u5b9e\u73b0": 188, "\u4eba\u5747": 188, "\u56fd\u5185": 188, "\u751f\u4ea7": 188, "\u603b\u503c": 188, "\u4e94\u5343": 188, "\u7f8e\u5143": 188, "\u4e0a": 188, "\u6d77": 188, "\u8ba1": 188, "\u5212": 188, "\u4e16": 188, "\u7eaa": 188, "\u5b9e": 188, "\u73b0": 188, "\u4eba": 188, "\u5747": 188, "\u56fd": 188, "\u5185": 188, "\u751f": 188, "\u4ea7": 188, "\u603b": 188, "ll\u503c": 188, "\u4e94": 188, "\u5343": 188, "\u7f8e": 188, "\u5143": 188, "shanghai": 188, "plan": 188, "dollar": 188, "capita": 188, "gdp": 188, "tip": 188, "frame": 188, "frequent": 188, "xue": 188, "nianwen": 188, "volum": 188, "februari": 188, "aclweb": 188, "aclanthologi": 188, "o03": 188, "4002": 188, "chinese_train": 188, "utf8": 188, "\u5341": 188, "\u56db": 188, "\u4e0d": 188, "\u662f": 188, "trainingdataset": 188, "plit": 188, "words_seg": 188, "wordseg_pku": 188, "\u7136\u800c": 188, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 188, "\u9019\u6a23": 188, "\u7684": 188, "\u8655\u7406": 188, "\u4e5f": 188, "\u884d\u751f": 188, "\u4e86": 188, "\u4e00\u4e9b": 188, "\u554f\u984c": 188, "chunkcol": [189, 191], "failonmiss": [189, 191], "isarrai": [189, 191], "setchunkcol": [189, 191], "setfailonmiss": [189, 191], "setisarrai": [189, 191], "setstartcol": [189, 191], "setstartcolbytokenindex": [189, 191], "startcol": [189, 191], "startcolbytokenindex": [189, 191], "cleanupmod": [189, 192, 200], "idcol": [189, 192, 200], "metadatacol": [189, 192, 200], "setidcol": [189, 192, 200], "setmetadatacol": [189, 192, 200], "cleanannot": [189, 193, 194, 195], "outputasvector": [189, 193], "annotationsplitsymbol": [189, 194], "includemetadata": [189, 194], "outputasarrai": [189, 194, 195], "parseembeddingsvector": [189, 194], "setannotationsplitsymbol": [189, 194], "setincludemetadata": [189, 194, 251], "setoutputasarrai": [189, 194, 195], "setparseembeddingsvector": [189, 194], "setvaluesplitsymbol": [189, 194], "valuesplitsymbol": [189, 194], "settextcol": [189, 198], "textcol": [189, 198, 235, 236], "fullannot": [189, 199, 226, 227], "fullannotateimag": [189, 199, 226, 227], "getignoreunsupport": [189, 199], "setignoreunsupport": [189, 199], "addassist": [189, 201], "setaddassist": [189, 201], "setchattempl": [189, 201, 205, 212], "csvdelimit": [189, 203], "escapecsvdelimit": [189, 203], "setcsvdelimit": [189, 203], "setescapecsvdelimit": [189, 203], "inferschema": 190, "librispeech_asr_dummy_clean_audio_array_parquet": 190, "float_arrai": 190, "stringtyp": [191, 217], "fail": 191, "chunkassembl": 191, "cleanup": [192, 200], "inplac": [192, 200], "inplace_ful": [192, 200], "shrink_ful": [192, 200], "each_ful": [192, 200], "delete_ful": [192, 200], "usabl": 193, "lda": 193, "forest": 193, "featurecol": 193, "gloveembed": 193, "finished_sentence_embed": 193, "resultwiths": 193, "1619900017976761": 193, "045552998781204224": 193, "03229299932718277": 193, "685609996318": 193, "42416998744010925": 193, "1378999948501587": 193, "5717899799346924": 193, "5078899860382": 193, "08621499687433243": 193, "15772999823093414": 193, "06067200005054474": 193, "395359992980": 193, "4970499873161316": 193, "7164199948310852": 193, "40119001269340515": 193, "05761000141501": 193, "08170200139284134": 193, "7159299850463867": 193, "20677000284194946": 193, "0295659992843": 193, "ouput": 193, "finishedresult": 195, "java_obj": [196, 221, 223], "javaobject": [196, 197, 223], "abc": [196, 223], "classmethod": [198, 219], "png": 198, "gif": 198, "bmp": 198, "parse_embed": [199, 227], "principl": [199, 254], "everyth": [199, 254, 255], "happi": [199, 249, 251, 254, 255], "prp": [199, 236, 237, 249, 254, 255, 256], "rb": [199, 237, 249, 254, 255, 256], "optional_target": [199, 227], "explain_document_pipelin": [199, 217, 227, 249, 254, 255], "dict_kei": [199, 227], "path_to_imag": [199, 227], "unsupport": 199, "text2": 200, "document1": 200, "document2": 200, "assembl": 201, "messag": [201, 248], "arg": [202, 219, 221, 242], "kwarg": 202, "javaestim": [202, 206, 223], "decid": 202, "behav": 202, "exactli": 202, "pipeline_model": [202, 225, 246], "intend": 202, "tab": [203, 225, 246], "escap": 203, "quot": 203, "defailt": 203, "comma": 203, "table_csv": 203, "csv_data": 203, "input_format": 203, "cleantext": 204, "opensourc": 204, "getlazyannot": [205, 208], "lazyannot": [205, 208], "setlazyannot": [205, 208], "features": [205, 212], "paddingsid": [205, 212], "paddingvalu": [205, 212], "returnattentionmask": [205, 212], "samplingr": [205, 212], "setdonorm": [205, 212], "setfeatures": [205, 212], "setpaddingsid": [205, 212], "setpaddingvalu": [205, 212], "setreturnattentionmask": [205, 212], "setsamplingr": [205, 212], "getbatchs": [205, 212], "contradictionidparam": [205, 212], "entailmentidparam": [205, 212], "setcontradictionidparam": [205, 212], "setentailmentidparam": [205, 212], "getcasesensit": [205, 212], "getactiv": [205, 212], "getmultilabel": [205, 212], "multilabel": [205, 212], "setactiv": [205, 212], "setmultilabel": [205, 212], "getuseclstoken": [205, 212], "setuseclstoken": [205, 212], "getdimens": [205, 212], "getenablecach": [205, 212], "setenablecach": [205, 212], "getengin": [205, 212], "setnreturnsequ": [205, 212], "setdores": [205, 212], "setfeatureextractortyp": [205, 212], "setimagemean": [205, 212], "setimagestd": [205, 212], "setresampl": [205, 212], "dynamictemperatureexpon": [205, 212], "dynamictemperaturerang": [205, 212], "setcacheprompt": [205, 212], "setdisabletokenid": [205, 212], "setdynamictemperatureexpon": [205, 212], "setdynamictemperaturerang": [205, 212], "setembed": [205, 212], "setgrammar": [205, 212], "setignoreeo": [205, 212], "setinputprefix": [205, 212], "setinputprefixbo": [205, 212], "setinputsuffix": [205, 212], "setlookupcachedynamicfilepath": [205, 212], "setlookupcachestaticfilepath": [205, 212], "setloraadapt": [205, 212], "setmirostat": [205, 212], "setmirostateta": [205, 212], "setmirostattau": [205, 212], "setmodelalia": [205, 212], "setmodeldraft": [205, 212], "setndraft": [205, 212], "setngpulayersdraft": [205, 212], "setnkeep": [205, 212], "setnthreadsbatchdraft": [205, 212], "setnthreadsdraft": [205, 212], "setpsplit": [205, 212], "setpenaltyprompt": [205, 212], "setsampl": [205, 212], "setsystemprompt": [205, 212], "settokenbia": [205, 212], "settokenidbia": [205, 212], "setusechattempl": [205, 212], "max_length_limit": [205, 212], "getmaxsentencelength": [205, 212], "getstoragepath": [205, 215], "storagepath": [205, 215], "savestorag": [205, 215], "enableinmemorystorag": [205, 215], "getenableinmemorystorag": [205, 215], "getincludestorag": [205, 215], "includestorag": [205, 215], "setenableinmemorystorag": [205, 215], "setincludestorag": [205, 215], "getstorageref": [205, 215], "storageref": [205, 215], "javamlwrit": [206, 207, 214, 220, 232], "javamodel": [207, 223], "lazili": 208, "renam": 208, "lazi": 208, "cov_obj": 210, "recal": 212, "loraadapt": 212, "tokenbia": 212, "tokenidbia": 212, "fo": 216, "output_column": 217, "vbz": [217, 235, 256], "f": [217, 225, 246], "filter_po": 217, "epeu": 217, "output_typ": 217, "udf": 217, "userdefinedfunct": 217, "nnp_token": 217, "lambda": 217, "annotatyon_typ": 217, "structfield": 217, "integertyp": 217, "maptyp": 217, "floattyp": 217, "chunks_df": 217, "pos_chunk": 217, "getdatafram": [218, 221], "new_java_arrai": [218, 221], "new_java_array_integ": [218, 221], "new_java_array_str": [218, 221], "new_java_obj": [218, 221], "spark_vers": [218, 221], "getparamvalu": [218, 222], "getter_attr": [218, 222], "setparamvalu": [218, 222], "transform_recurs": [218, 223], "kwd": 219, "javamlread": [219, 232], "mlreader": 219, "clazz": 219, "rl": 219, "javatransform": [220, 232], "javawrapp": 221, "jdf": 221, "pylist": 221, "java_class": 221, "todo": 221, "paramnam": 222, "log_asset": [224, 225], "log_asset_data": [224, 225], "log_completed_run": [224, 225], "log_metr": [224, 225, 246], "log_paramet": [224, 225], "log_pipeline_paramet": [224, 225, 246], "log_visu": [224, 225, 246], "parti": [224, 244], "workspac": 225, "project_nam": [225, 246], "comet_mod": [225, 246], "experiment_id": 225, "experiment_kwarg": 225, "logger": [225, 246], "practition": [225, 246], "lifecycl": [225, 246, 248], "track": [225, 246, 247], "outputlogpath": [225, 246], "onlin": [225, 246], "reus": 225, "importerror": 225, "instal": [225, 244, 248], "output_log_path": [225, 246], "embd": [225, 246], "logdir": [225, 246], "attribut": 225, "comet_ml": [225, 246], "submit": [225, 243, 246], "outstand": 225, "asset_path": 225, "upload": [225, 241], "asset": 225, "attach": [225, 233], "log_file_path": 225, "sklearn": [225, 246], "multilabelbinar": [225, 246], "classification_report": [225, 246], "preds_df": [225, 246], "topanda": [225, 246], "mlb": [225, 246], "y_true": [225, 246], "fit_transform": [225, 246], "y_pred": [225, 246], "output_dict": [225, 246], "html": [225, 230, 233, 246], "viz": [225, 246], "colum": [225, 246], "ner_chunk": [225, 246], "sparknlp_displai": [225, 246], "nervisu": [225, 246], "idx": [225, 246], "enumer": [225, 246], "label_col": [225, 246], "document_col": [225, 246], "return_html": [225, 246], "interv": 225, "refresh": 225, "from_disk": [226, 227], "clearcach": [226, 228], "downloadmodel": [226, 228], "downloadmodeldirectli": [226, 228], "downloadpipelin": [226, 228], "showavailableannot": [226, 228], "showpublicmodel": [226, 228, 250], "showpublicpipelin": [226, 228, 255], "showuncategorizedresourc": [226, 228], "disk_loc": 227, "light_model": 227, "onto_100": 228, "onto_300": 228, "ner_dl_bert": 228, "similarli": 228, "check_spel": [228, 255], "match_datetim": [228, 255], "clear": 228, "j_dwn": 228, "pythonresourcedownload": 228, "obj": [228, 236], "unzip": [228, 241], "argument": [228, 241], "filer": 228, "pdf_layout_text_stripp": [230, 231], "pdf_text_stripp": [230, 231], "onlypagenum": [230, 232], "pagenumcol": [230, 232], "partitionnum": [230, 232], "setonlypagenum": [230, 232], "setpagenumcol": [230, 232], "setpartitionnum": [230, 232], "setsort": [230, 232], "setsplitpag": [230, 232], "setstoresplittedpdf": [230, 232], "settextstripp": [230, 232], "sort": [230, 232], "splitpag": [230, 232], "storesplittedpdf": [230, 232], "textstripp": [230, 232], "ppt": [230, 233], "stripper": [231, 232], "pdflayouttextstripp": 231, "pdftextstripp": 231, "hasinputcol": 232, "hasoutputcol": 232, "layout": [232, 233], "powerpoint": 233, "html_df": 233, "Or": 233, "shorthand": 233, "pdf_df": 233, "email_df": 233, "docpath": 233, "doc_df": 233, "docsdf": 233, "elementtyp": 233, "filepath": 233, "cheer": 233, "sent_to": 233, "danilo": 233, "burbano": 233, "sent_from": 233, "mimetyp": 233, "narrativetext": 233, "equiv": 233, "charset": 233, "iso": 233, "8859": 233, "css": 233, "bottom": 233, "ltr": 233, "apto": 233, "aptos_embeddedfont": 233, "aptos_msfontservic": 233, "calibri": 233, "helvetica": 233, "12pt": 233, "rgb": 233, "nbsp": 233, "elementtoproof": 233, "filenam": 233, "contenttyp": 233, "filename2": 233, "htmlpath": 233, "titl": [233, 238, 241, 256], "pagenumb": 233, "illustr": 233, "literatur": 233, "permiss": 233, "pdfpath": 233, "pptdf": 233, "listitem": 233, "_textfram": 233, "add_paragraph": 233, "subsequ": 233, "lot": 233, "xlsdf": 233, "readjsonfil": [234, 239], "documentcol": [235, 236], "sentencecol": [235, 236], "tokencol": 235, "conlllabelindex": 235, "conllposindex": 235, "conlldocidcol": 235, "doc_id": [235, 238], "labelcol": 235, "includedocid": 235, "docstart": [235, 256], "eu": [235, 256], "np": [235, 256], "reject": [235, 256], "vp": [235, 256], "misc": [235, 256], "boycott": [235, 256], "british": [235, 256], "lamb": [235, 256], "blackburn": 235, "brussel": 235, "1996": 235, "08": 235, "storage_level": 235, "storagelevel": 235, "lift": 235, "disk_onli": 235, "uposcol": 236, "upo": 236, "xposcol": 236, "xpo": 236, "sent_id": 236, "sell": 236, "pron": 236, "nom": 236, "plur": 236, "_": 236, "tens": 236, "conj": 236, "cc": 236, "spaceaft": 236, "punct": 236, "conllufil": [236, 256], "conlldataset": [236, 256], "morph": 236, "Into": 236, "googleo": 236, "sconj": 236, "propn": 236, "adp": 236, "wp": 236, "vbd": [236, 237, 256], "ago": [237, 256], "posdf": 237, "61": 237, "67": [237, 238, 256], "nonexecut": 237, "76": 237, "director": 237, "84": 237, "outputposcol": 237, "outputdocumentcol": 237, "outputtextcol": 237, "medic": [238, 256], "medment": [238, 256], "25763772": [238, 256], "dctn4": [238, 256], "t116": [238, 256], "t123": [238, 256], "c4308010": [238, 256], "63": [238, 256], "chronic": [238, 256], "pseudomona": [238, 256], "aeruginosa": [238, 256], "infect": [238, 256], "t047": [238, 256], "c0854135": [238, 256], "82": [238, 256], "cystic": [238, 256], "fibrosi": [238, 256], "c0010674": [238, 256], "120": [238, 256], "124": [238, 256], "139": [238, 256], "pubtatorfil": 238, "corpus_pubtator_sampl": 238, "pubtatordataset": 238, "finished_token": [238, 251], "finished_po": 238, "finished_n": 238, "finished_token_metadata": 238, "finished_pos_metadata": 238, "finished_label_metadata": 238, "mo": 238, "ispaddedtoken": 238, "token_spac": 239, "sentence_end": 239, "spaci": 239, "multi_doc_token": 239, "went": 239, "night": 239, "bought": 239, "bread": 239, "54": 239, "jsonfilepath": 239, "model_data": 241, "dictionary_for_upload": 241, "model_zip_path": 241, "pythoncod": 241, "git_token": 241, "predictedent": 241, "sparknlpvers": 241, "howtous": 241, "livedemo": 241, "runincolab": 241, "scalacod": 241, "nlucod": 241, "datasourc": 241, "includedmodel": 241, "info": 241, "zip_path": 241, "zip": 241, "folder_path": 241, "quick": [243, 246, 251], "environ": [243, 247], "pypi": 243, "pip": 243, "anaconda": 243, "shell": 243, "compil": 243, "sbt": 243, "assembli": 243, "oracl": 243, "openjdk": 243, "0_292": 243, "sparknlp": [243, 246, 249, 250, 251, 252, 254, 255, 256], "python3": 243, "bin": 243, "manual": [243, 249], "cheat": 244, "guid": [244, 247], "overview": [245, 253], "workflow": 246, "dedic": 246, "account": 246, "inspect": 246, "init": 246, "sparknlp_experi": 246, "offline_directori": 246, "later": 246, "record": 247, "registri": 247, "send": 248, "mlflow": 248, "clearli": 249, "explain_document_ml": [249, 254, 255], "approx": [249, 254, 255], "mb": [249, 254, 255], "ok": [249, 254, 255], "spearhead": 250, "declar": 250, "accordingli": 250, "extra_loc": 250, "classifierdl_use_trec50": 250, "classifierdl_use_spam": 250, "column_nam": 250, "interchang": 251, "road": 251, "proce": 251, "constantli": 255, "train_po": 256, "training_conl": 256, "train_corpu": 256, "withcolumnrenam": 256, "trainingpubtatordf": 256, "corpus_pubt": 256}, "objects": {"": [[1, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [5, 0, 0, "-", "annotator"], [189, 0, 0, "-", "base"], [205, 0, 0, "-", "common"], [217, 0, 0, "-", "functions"], [218, 0, 0, "-", "internal"], [224, 0, 0, "-", "logging"], [226, 0, 0, "-", "pretrained"], [1, 4, 1, "", "read"], [230, 0, 0, "-", "reader"], [1, 4, 1, "", "start"], [234, 0, 0, "-", "training"], [241, 0, 0, "-", "upload_to_hub"], [242, 0, 0, "-", "util"], [1, 4, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [10, 0, 0, "-", "chunk2_doc"], [11, 0, 0, "-", "chunker"], [12, 0, 0, "-", "classifier_dl"], [59, 0, 0, "-", "cleaners"], [62, 0, 0, "-", "coref"], [64, 0, 0, "-", "cv"], [79, 0, 0, "-", "date2_chunk"], [80, 0, 0, "-", "dependency"], [83, 0, 0, "-", "document_character_text_splitter"], [84, 0, 0, "-", "document_normalizer"], [85, 0, 0, "-", "document_token_splitter"], [87, 0, 0, "-", "embeddings"], [116, 0, 0, "-", "er"], [118, 0, 0, "-", "graph_extraction"], [119, 0, 0, "-", "keyword_extraction"], [121, 0, 0, "-", "ld_dl"], [123, 0, 0, "-", "lemmatizer"], [124, 0, 0, "-", "matcher"], [130, 0, 0, "-", "n_gram_generator"], [131, 0, 0, "-", "ner"], [138, 0, 0, "-", "normalizer"], [139, 0, 0, "-", "openai"], [142, 0, 0, "-", "param"], [145, 0, 0, "-", "pos"], [147, 0, 0, "-", "sentence"], [150, 0, 0, "-", "sentiment"], [153, 0, 0, "-", "seq2seq"], [172, 0, 0, "-", "similarity"], [174, 0, 0, "-", "spell_check"], [178, 0, 0, "-", "stemmer"], [179, 0, 0, "-", "stop_words_cleaner"], [180, 0, 0, "-", "tf_ner_dl_graph_builder"], [181, 0, 0, "-", "token"], [186, 0, 0, "-", "token2_chunk"], [187, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[7, 0, 0, "-", "hubert_for_ctc"], [8, 0, 0, "-", "wav2vec2_for_ctc"], [9, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[7, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[7, 3, 1, "", "configProtoBytes"], [7, 3, 1, "", "inputAnnotatorTypes"], [7, 2, 1, "", "loadSavedModel"], [7, 3, 1, "", "name"], [7, 3, 1, "", "outputAnnotatorType"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[8, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[8, 3, 1, "", "configProtoBytes"], [8, 3, 1, "", "inputAnnotatorTypes"], [8, 2, 1, "", "loadSavedModel"], [8, 3, 1, "", "name"], [8, 3, 1, "", "outputAnnotatorType"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[9, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[9, 3, 1, "", "configProtoBytes"], [9, 2, 1, "", "getIsMultilingual"], [9, 2, 1, "", "getLanguage"], [9, 3, 1, "", "inputAnnotatorTypes"], [9, 3, 1, "", "isMultilingual"], [9, 3, 1, "", "language"], [9, 2, 1, "", "loadSavedModel"], [9, 3, 1, "", "name"], [9, 3, 1, "", "outputAnnotatorType"], [9, 2, 1, "", "pretrained"], [9, 2, 1, "", "setConfigProtoBytes"], [9, 2, 1, "", "setLanguage"], [9, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[10, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunk2_doc.Chunk2Doc": [[10, 3, 1, "", "inputAnnotatorTypes"], [10, 3, 1, "", "name"], [10, 3, 1, "", "outputAnnotatorType"], [10, 2, 1, "", "setParams"]], "sparknlp.annotator.chunker": [[11, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[11, 3, 1, "", "inputAnnotatorTypes"], [11, 3, 1, "", "name"], [11, 3, 1, "", "outputAnnotatorType"], [11, 3, 1, "", "regexParsers"], [11, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[13, 0, 0, "-", "albert_for_multiple_choice"], [14, 0, 0, "-", "albert_for_question_answering"], [15, 0, 0, "-", "albert_for_sequence_classification"], [16, 0, 0, "-", "albert_for_token_classification"], [17, 0, 0, "-", "albert_for_zero_shot_classification"], [18, 0, 0, "-", "bart_for_zero_shot_classification"], [19, 0, 0, "-", "bert_for_multiple_choice"], [20, 0, 0, "-", "bert_for_question_answering"], [21, 0, 0, "-", "bert_for_sequence_classification"], [22, 0, 0, "-", "bert_for_token_classification"], [23, 0, 0, "-", "bert_for_zero_shot_classification"], [24, 0, 0, "-", "camembert_for_question_answering"], [25, 0, 0, "-", "camembert_for_sequence_classification"], [26, 0, 0, "-", "camembert_for_token_classification"], [27, 0, 0, "-", "camembert_for_zero_shot_classification"], [28, 0, 0, "-", "classifier_dl"], [29, 0, 0, "-", "deberta_for_question_answering"], [30, 0, 0, "-", "deberta_for_sequence_classification"], [31, 0, 0, "-", "deberta_for_token_classification"], [32, 0, 0, "-", "deberta_for_zero_shot_classification"], [33, 0, 0, "-", "distil_bert_for_question_answering"], [34, 0, 0, "-", "distil_bert_for_sequence_classification"], [35, 0, 0, "-", "distil_bert_for_token_classification"], [36, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [37, 0, 0, "-", "distilbert_for_multiple_choice"], [38, 0, 0, "-", "longformer_for_question_answering"], [39, 0, 0, "-", "longformer_for_sequence_classification"], [40, 0, 0, "-", "longformer_for_token_classification"], [41, 0, 0, "-", "mpnet_for_question_answering"], [42, 0, 0, "-", "mpnet_for_sequence_classification"], [43, 0, 0, "-", "mpnet_for_token_classification"], [44, 0, 0, "-", "multi_classifier_dl"], [45, 0, 0, "-", "roberta_for_multiple_choice"], [46, 0, 0, "-", "roberta_for_question_answering"], [47, 0, 0, "-", "roberta_for_sequence_classification"], [48, 0, 0, "-", "roberta_for_token_classification"], [49, 0, 0, "-", "roberta_for_zero_shot_classification"], [50, 0, 0, "-", "sentiment_dl"], [51, 0, 0, "-", "tapas_for_question_answering"], [52, 0, 0, "-", "xlm_roberta_for_multiple_choice"], [53, 0, 0, "-", "xlm_roberta_for_question_answering"], [54, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [55, 0, 0, "-", "xlm_roberta_for_token_classification"], [56, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [57, 0, 0, "-", "xlnet_for_sequence_classification"], [58, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[13, 1, 1, "", "AlbertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice": [[13, 3, 1, "", "choicesDelimiter"], [13, 3, 1, "", "inputAnnotatorTypes"], [13, 2, 1, "", "loadSavedModel"], [13, 3, 1, "", "name"], [13, 3, 1, "", "outputAnnotatorType"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[14, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[14, 3, 1, "", "coalesceSentences"], [14, 3, 1, "", "configProtoBytes"], [14, 3, 1, "", "inputAnnotatorTypes"], [14, 2, 1, "", "loadSavedModel"], [14, 3, 1, "", "name"], [14, 3, 1, "", "outputAnnotatorType"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[15, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[15, 3, 1, "", "coalesceSentences"], [15, 3, 1, "", "configProtoBytes"], [15, 2, 1, "", "getClasses"], [15, 3, 1, "", "inputAnnotatorTypes"], [15, 2, 1, "", "loadSavedModel"], [15, 3, 1, "", "name"], [15, 3, 1, "", "outputAnnotatorType"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setCoalesceSentences"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[16, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[16, 3, 1, "", "configProtoBytes"], [16, 2, 1, "", "getClasses"], [16, 3, 1, "", "inputAnnotatorTypes"], [16, 2, 1, "", "loadSavedModel"], [16, 3, 1, "", "name"], [16, 3, 1, "", "outputAnnotatorType"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[17, 1, 1, "", "AlbertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification": [[17, 3, 1, "", "coalesceSentences"], [17, 3, 1, "", "configProtoBytes"], [17, 2, 1, "", "getClasses"], [17, 3, 1, "", "inputAnnotatorTypes"], [17, 2, 1, "", "loadSavedModel"], [17, 3, 1, "", "name"], [17, 3, 1, "", "outputAnnotatorType"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setCoalesceSentences"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[18, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[18, 3, 1, "", "coalesceSentences"], [18, 3, 1, "", "configProtoBytes"], [18, 2, 1, "", "getClasses"], [18, 3, 1, "", "inputAnnotatorTypes"], [18, 2, 1, "", "loadSavedModel"], [18, 3, 1, "", "maxSentenceLength"], [18, 3, 1, "", "name"], [18, 3, 1, "", "outputAnnotatorType"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"], [18, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[19, 1, 1, "", "BertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice": [[19, 3, 1, "", "choicesDelimiter"], [19, 3, 1, "", "inputAnnotatorTypes"], [19, 2, 1, "", "loadSavedModel"], [19, 3, 1, "", "name"], [19, 3, 1, "", "outputAnnotatorType"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[20, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[20, 3, 1, "", "coalesceSentences"], [20, 3, 1, "", "configProtoBytes"], [20, 3, 1, "", "inputAnnotatorTypes"], [20, 2, 1, "", "loadSavedModel"], [20, 3, 1, "", "name"], [20, 3, 1, "", "outputAnnotatorType"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[21, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[21, 3, 1, "", "coalesceSentences"], [21, 3, 1, "", "configProtoBytes"], [21, 2, 1, "", "getClasses"], [21, 3, 1, "", "inputAnnotatorTypes"], [21, 2, 1, "", "loadSavedModel"], [21, 3, 1, "", "name"], [21, 3, 1, "", "outputAnnotatorType"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setCoalesceSentences"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[22, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[22, 3, 1, "", "configProtoBytes"], [22, 2, 1, "", "getClasses"], [22, 3, 1, "", "inputAnnotatorTypes"], [22, 2, 1, "", "loadSavedModel"], [22, 3, 1, "", "name"], [22, 3, 1, "", "outputAnnotatorType"], [22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[23, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[23, 3, 1, "", "coalesceSentences"], [23, 3, 1, "", "configProtoBytes"], [23, 2, 1, "", "getClasses"], [23, 3, 1, "", "inputAnnotatorTypes"], [23, 2, 1, "", "loadSavedModel"], [23, 3, 1, "", "name"], [23, 3, 1, "", "outputAnnotatorType"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setCoalesceSentences"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[24, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[24, 3, 1, "", "coalesceSentences"], [24, 3, 1, "", "configProtoBytes"], [24, 3, 1, "", "inputAnnotatorTypes"], [24, 2, 1, "", "loadSavedModel"], [24, 3, 1, "", "name"], [24, 3, 1, "", "outputAnnotatorType"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[25, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[25, 3, 1, "", "coalesceSentences"], [25, 3, 1, "", "configProtoBytes"], [25, 2, 1, "", "getClasses"], [25, 3, 1, "", "inputAnnotatorTypes"], [25, 2, 1, "", "loadSavedModel"], [25, 3, 1, "", "name"], [25, 3, 1, "", "outputAnnotatorType"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setCoalesceSentences"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[26, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[26, 3, 1, "", "configProtoBytes"], [26, 2, 1, "", "getClasses"], [26, 3, 1, "", "inputAnnotatorTypes"], [26, 2, 1, "", "loadSavedModel"], [26, 3, 1, "", "name"], [26, 3, 1, "", "outputAnnotatorType"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[27, 1, 1, "", "CamemBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification": [[27, 3, 1, "", "coalesceSentences"], [27, 3, 1, "", "configProtoBytes"], [27, 2, 1, "", "getClasses"], [27, 3, 1, "", "inputAnnotatorTypes"], [27, 2, 1, "", "loadSavedModel"], [27, 3, 1, "", "name"], [27, 3, 1, "", "outputAnnotatorType"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[28, 1, 1, "", "ClassifierDLApproach"], [28, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[28, 3, 1, "", "dropout"], [28, 3, 1, "", "inputAnnotatorTypes"], [28, 3, 1, "", "outputAnnotatorType"], [28, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[28, 3, 1, "", "classes"], [28, 3, 1, "", "configProtoBytes"], [28, 3, 1, "", "inputAnnotatorTypes"], [28, 3, 1, "", "name"], [28, 3, 1, "", "outputAnnotatorType"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[29, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[29, 3, 1, "", "coalesceSentences"], [29, 3, 1, "", "configProtoBytes"], [29, 3, 1, "", "inputAnnotatorTypes"], [29, 2, 1, "", "loadSavedModel"], [29, 3, 1, "", "name"], [29, 3, 1, "", "outputAnnotatorType"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[30, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[30, 3, 1, "", "coalesceSentences"], [30, 3, 1, "", "configProtoBytes"], [30, 2, 1, "", "getClasses"], [30, 3, 1, "", "inputAnnotatorTypes"], [30, 2, 1, "", "loadSavedModel"], [30, 3, 1, "", "name"], [30, 3, 1, "", "outputAnnotatorType"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setCoalesceSentences"], [30, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[31, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[31, 3, 1, "", "configProtoBytes"], [31, 2, 1, "", "getClasses"], [31, 3, 1, "", "inputAnnotatorTypes"], [31, 2, 1, "", "loadSavedModel"], [31, 3, 1, "", "name"], [31, 3, 1, "", "outputAnnotatorType"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[32, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[32, 3, 1, "", "coalesceSentences"], [32, 3, 1, "", "configProtoBytes"], [32, 2, 1, "", "getClasses"], [32, 3, 1, "", "inputAnnotatorTypes"], [32, 2, 1, "", "loadSavedModel"], [32, 3, 1, "", "name"], [32, 3, 1, "", "outputAnnotatorType"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setCoalesceSentences"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[33, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[33, 3, 1, "", "coalesceSentences"], [33, 3, 1, "", "configProtoBytes"], [33, 3, 1, "", "inputAnnotatorTypes"], [33, 2, 1, "", "loadSavedModel"], [33, 3, 1, "", "name"], [33, 3, 1, "", "outputAnnotatorType"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[34, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[34, 3, 1, "", "coalesceSentences"], [34, 3, 1, "", "configProtoBytes"], [34, 2, 1, "", "getClasses"], [34, 3, 1, "", "inputAnnotatorTypes"], [34, 2, 1, "", "loadSavedModel"], [34, 3, 1, "", "name"], [34, 3, 1, "", "outputAnnotatorType"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setCoalesceSentences"], [34, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[35, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[35, 3, 1, "", "configProtoBytes"], [35, 2, 1, "", "getClasses"], [35, 3, 1, "", "inputAnnotatorTypes"], [35, 2, 1, "", "loadSavedModel"], [35, 3, 1, "", "name"], [35, 3, 1, "", "outputAnnotatorType"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[36, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[36, 3, 1, "", "coalesceSentences"], [36, 3, 1, "", "configProtoBytes"], [36, 2, 1, "", "getClasses"], [36, 3, 1, "", "inputAnnotatorTypes"], [36, 2, 1, "", "loadSavedModel"], [36, 3, 1, "", "name"], [36, 3, 1, "", "outputAnnotatorType"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"], [36, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[37, 1, 1, "", "DistilBertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice": [[37, 3, 1, "", "choicesDelimiter"], [37, 3, 1, "", "inputAnnotatorTypes"], [37, 2, 1, "", "loadSavedModel"], [37, 3, 1, "", "name"], [37, 3, 1, "", "outputAnnotatorType"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[38, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[38, 3, 1, "", "coalesceSentences"], [38, 3, 1, "", "configProtoBytes"], [38, 3, 1, "", "inputAnnotatorTypes"], [38, 2, 1, "", "loadSavedModel"], [38, 3, 1, "", "name"], [38, 3, 1, "", "outputAnnotatorType"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[39, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[39, 3, 1, "", "coalesceSentences"], [39, 3, 1, "", "configProtoBytes"], [39, 2, 1, "", "getClasses"], [39, 3, 1, "", "inputAnnotatorTypes"], [39, 2, 1, "", "loadSavedModel"], [39, 3, 1, "", "name"], [39, 3, 1, "", "outputAnnotatorType"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setCoalesceSentences"], [39, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[40, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[40, 3, 1, "", "configProtoBytes"], [40, 2, 1, "", "getClasses"], [40, 3, 1, "", "inputAnnotatorTypes"], [40, 2, 1, "", "loadSavedModel"], [40, 3, 1, "", "name"], [40, 3, 1, "", "outputAnnotatorType"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[41, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[41, 3, 1, "", "inputAnnotatorTypes"], [41, 2, 1, "", "loadSavedModel"], [41, 3, 1, "", "name"], [41, 3, 1, "", "outputAnnotatorType"], [41, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[42, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[42, 3, 1, "", "coalesceSentences"], [42, 2, 1, "", "getClasses"], [42, 3, 1, "", "inputAnnotatorTypes"], [42, 2, 1, "", "loadSavedModel"], [42, 3, 1, "", "name"], [42, 3, 1, "", "outputAnnotatorType"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[43, 1, 1, "", "MPNetForTokenClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification": [[43, 3, 1, "", "configProtoBytes"], [43, 2, 1, "", "getClasses"], [43, 3, 1, "", "inputAnnotatorTypes"], [43, 2, 1, "", "loadSavedModel"], [43, 3, 1, "", "name"], [43, 3, 1, "", "outputAnnotatorType"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[44, 1, 1, "", "MultiClassifierDLApproach"], [44, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[44, 3, 1, "", "inputAnnotatorTypes"], [44, 3, 1, "", "outputAnnotatorType"], [44, 2, 1, "", "setShufflePerEpoch"], [44, 2, 1, "", "setThreshold"], [44, 2, 1, "", "setVerbose"], [44, 3, 1, "", "shufflePerEpoch"], [44, 3, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[44, 3, 1, "", "classes"], [44, 3, 1, "", "configProtoBytes"], [44, 3, 1, "", "inputAnnotatorTypes"], [44, 3, 1, "", "name"], [44, 3, 1, "", "outputAnnotatorType"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setConfigProtoBytes"], [44, 2, 1, "", "setThreshold"], [44, 3, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[45, 1, 1, "", "RoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice": [[45, 3, 1, "", "choicesDelimiter"], [45, 3, 1, "", "inputAnnotatorTypes"], [45, 2, 1, "", "loadSavedModel"], [45, 3, 1, "", "name"], [45, 3, 1, "", "outputAnnotatorType"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[46, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[46, 3, 1, "", "coalesceSentences"], [46, 3, 1, "", "configProtoBytes"], [46, 3, 1, "", "inputAnnotatorTypes"], [46, 2, 1, "", "loadSavedModel"], [46, 3, 1, "", "name"], [46, 3, 1, "", "outputAnnotatorType"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[47, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[47, 3, 1, "", "coalesceSentences"], [47, 3, 1, "", "configProtoBytes"], [47, 2, 1, "", "getClasses"], [47, 3, 1, "", "inputAnnotatorTypes"], [47, 2, 1, "", "loadSavedModel"], [47, 3, 1, "", "name"], [47, 3, 1, "", "outputAnnotatorType"], [47, 2, 1, "", "pretrained"], [47, 2, 1, "", "setCoalesceSentences"], [47, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[48, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[48, 3, 1, "", "configProtoBytes"], [48, 2, 1, "", "getClasses"], [48, 3, 1, "", "inputAnnotatorTypes"], [48, 2, 1, "", "loadSavedModel"], [48, 3, 1, "", "maxSentenceLength"], [48, 3, 1, "", "name"], [48, 3, 1, "", "outputAnnotatorType"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"], [48, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[49, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[49, 3, 1, "", "coalesceSentences"], [49, 3, 1, "", "configProtoBytes"], [49, 2, 1, "", "getClasses"], [49, 3, 1, "", "inputAnnotatorTypes"], [49, 2, 1, "", "loadSavedModel"], [49, 3, 1, "", "maxSentenceLength"], [49, 3, 1, "", "name"], [49, 3, 1, "", "outputAnnotatorType"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setCoalesceSentences"], [49, 2, 1, "", "setConfigProtoBytes"], [49, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[50, 1, 1, "", "SentimentDLApproach"], [50, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[50, 3, 1, "", "dropout"], [50, 3, 1, "", "inputAnnotatorTypes"], [50, 3, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "setDropout"], [50, 2, 1, "", "setThreshold"], [50, 2, 1, "", "setThresholdLabel"], [50, 3, 1, "", "threshold"], [50, 3, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[50, 3, 1, "", "classes"], [50, 3, 1, "", "configProtoBytes"], [50, 3, 1, "", "inputAnnotatorTypes"], [50, 3, 1, "", "name"], [50, 3, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "pretrained"], [50, 2, 1, "", "setConfigProtoBytes"], [50, 2, 1, "", "setThreshold"], [50, 2, 1, "", "setThresholdLabel"], [50, 3, 1, "", "threshold"], [50, 3, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[51, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[51, 3, 1, "", "inputAnnotatorTypes"], [51, 2, 1, "", "loadSavedModel"], [51, 3, 1, "", "name"], [51, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[52, 1, 1, "", "XlmRoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice": [[52, 3, 1, "", "inputAnnotatorTypes"], [52, 2, 1, "", "loadSavedModel"], [52, 3, 1, "", "name"], [52, 3, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[53, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[53, 3, 1, "", "coalesceSentences"], [53, 3, 1, "", "configProtoBytes"], [53, 3, 1, "", "inputAnnotatorTypes"], [53, 2, 1, "", "loadSavedModel"], [53, 3, 1, "", "name"], [53, 3, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "pretrained"], [53, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[54, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[54, 3, 1, "", "coalesceSentences"], [54, 3, 1, "", "configProtoBytes"], [54, 2, 1, "", "getClasses"], [54, 3, 1, "", "inputAnnotatorTypes"], [54, 2, 1, "", "loadSavedModel"], [54, 3, 1, "", "name"], [54, 3, 1, "", "outputAnnotatorType"], [54, 2, 1, "", "pretrained"], [54, 2, 1, "", "setCoalesceSentences"], [54, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[55, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[55, 3, 1, "", "configProtoBytes"], [55, 2, 1, "", "getClasses"], [55, 3, 1, "", "inputAnnotatorTypes"], [55, 2, 1, "", "loadSavedModel"], [55, 3, 1, "", "name"], [55, 3, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "pretrained"], [55, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[56, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[56, 3, 1, "", "coalesceSentences"], [56, 3, 1, "", "configProtoBytes"], [56, 2, 1, "", "getClasses"], [56, 3, 1, "", "inputAnnotatorTypes"], [56, 2, 1, "", "loadSavedModel"], [56, 3, 1, "", "maxSentenceLength"], [56, 3, 1, "", "name"], [56, 3, 1, "", "outputAnnotatorType"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setCoalesceSentences"], [56, 2, 1, "", "setConfigProtoBytes"], [56, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[57, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[57, 3, 1, "", "coalesceSentences"], [57, 3, 1, "", "configProtoBytes"], [57, 2, 1, "", "getClasses"], [57, 3, 1, "", "inputAnnotatorTypes"], [57, 2, 1, "", "loadSavedModel"], [57, 3, 1, "", "name"], [57, 3, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setCoalesceSentences"], [57, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[58, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[58, 3, 1, "", "configProtoBytes"], [58, 2, 1, "", "getClasses"], [58, 3, 1, "", "inputAnnotatorTypes"], [58, 2, 1, "", "loadSavedModel"], [58, 3, 1, "", "name"], [58, 3, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cleaners": [[60, 0, 0, "-", "cleaner"], [61, 0, 0, "-", "extractor"]], "sparknlp.annotator.cleaners.cleaner": [[60, 1, 1, "", "Cleaner"]], "sparknlp.annotator.cleaners.cleaner.Cleaner": [[60, 3, 1, "", "bullets"], [60, 3, 1, "", "cleanPostfixPattern"], [60, 3, 1, "", "cleanPrefixPattern"], [60, 3, 1, "", "cleanerMode"], [60, 3, 1, "", "dashes"], [60, 3, 1, "", "encoding"], [60, 3, 1, "", "extraWhitespace"], [60, 3, 1, "", "ignoreCase"], [60, 3, 1, "", "inputAnnotatorTypes"], [60, 3, 1, "", "lowercase"], [60, 3, 1, "", "name"], [60, 3, 1, "", "outputAnnotatorType"], [60, 2, 1, "", "setBullets"], [60, 2, 1, "", "setCleanPostfixPattern"], [60, 2, 1, "", "setCleanPrefixPattern"], [60, 2, 1, "", "setCleanerMode"], [60, 2, 1, "", "setDashes"], [60, 2, 1, "", "setEncoding"], [60, 2, 1, "", "setExtraWhitespace"], [60, 2, 1, "", "setIgnoreCase"], [60, 2, 1, "", "setLowercase"], [60, 2, 1, "", "setStrip"], [60, 2, 1, "", "setTrailingPunctuation"], [60, 3, 1, "", "strip"], [60, 3, 1, "", "trailingPunctuation"]], "sparknlp.annotator.cleaners.extractor": [[61, 1, 1, "", "Extractor"]], "sparknlp.annotator.cleaners.extractor.Extractor": [[61, 3, 1, "", "emailAddress"], [61, 3, 1, "", "emailDateTimeTzPattern"], [61, 3, 1, "", "extractorMode"], [61, 3, 1, "", "imageUrlPattern"], [61, 3, 1, "", "index"], [61, 3, 1, "", "inputAnnotatorTypes"], [61, 3, 1, "", "ipAddressNamePattern"], [61, 3, 1, "", "ipAddressPattern"], [61, 3, 1, "", "mapiIdPattern"], [61, 3, 1, "", "name"], [61, 3, 1, "", "outputAnnotatorType"], [61, 2, 1, "", "setEmailAddress"], [61, 2, 1, "", "setEmailDateTimeTzPattern"], [61, 2, 1, "", "setExtractorMode"], [61, 2, 1, "", "setImageUrlPattern"], [61, 2, 1, "", "setIndex"], [61, 2, 1, "", "setIpAddressNamePattern"], [61, 2, 1, "", "setIpAddressPattern"], [61, 2, 1, "", "setMapiIdPattern"], [61, 2, 1, "", "setTextPattern"], [61, 2, 1, "", "setUsPhoneNumbersPattern"], [61, 3, 1, "", "textPattern"], [61, 3, 1, "", "usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[63, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[63, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[63, 3, 1, "", "configProtoBytes"], [63, 3, 1, "", "inputAnnotatorTypes"], [63, 2, 1, "", "loadSavedModel"], [63, 3, 1, "", "maxSegmentLength"], [63, 3, 1, "", "name"], [63, 3, 1, "", "outputAnnotatorType"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setConfigProtoBytes"], [63, 2, 1, "", "setMaxSegmentLength"], [63, 2, 1, "", "setTextGenre"], [63, 3, 1, "", "textGenre"]], "sparknlp.annotator.cv": [[65, 0, 0, "-", "blip_for_question_answering"], [66, 0, 0, "-", "clip_for_zero_shot_classification"], [67, 0, 0, "-", "convnext_for_image_classification"], [68, 0, 0, "-", "gemma3_for_multimodal"], [69, 0, 0, "-", "janus_for_multimodal"], [70, 0, 0, "-", "llava_for_multimodal"], [71, 0, 0, "-", "mllama_for_multimodal"], [72, 0, 0, "-", "paligemma_for_multimodal"], [73, 0, 0, "-", "phi3_vision_for_multimodal"], [74, 0, 0, "-", "qwen2vl_transformer"], [75, 0, 0, "-", "smolvlm_transformer"], [76, 0, 0, "-", "swin_for_image_classification"], [77, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [78, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.blip_for_question_answering": [[65, 1, 1, "", "BLIPForQuestionAnswering"]], "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering": [[65, 3, 1, "", "configProtoBytes"], [65, 3, 1, "", "inputAnnotatorTypes"], [65, 2, 1, "", "loadSavedModel"], [65, 3, 1, "", "maxSentenceLength"], [65, 3, 1, "", "name"], [65, 3, 1, "", "outputAnnotatorType"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setMaxSentenceSize"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[66, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[66, 3, 1, "", "configProtoBytes"], [66, 2, 1, "", "getCandidateLabels"], [66, 3, 1, "", "inputAnnotatorTypes"], [66, 2, 1, "", "loadSavedModel"], [66, 3, 1, "", "name"], [66, 3, 1, "", "outputAnnotatorType"], [66, 2, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[67, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[67, 3, 1, "", "configProtoBytes"], [67, 3, 1, "", "cropPct"], [67, 3, 1, "", "doRescale"], [67, 2, 1, "", "getClasses"], [67, 3, 1, "", "inputAnnotatorTypes"], [67, 2, 1, "", "loadSavedModel"], [67, 3, 1, "", "name"], [67, 3, 1, "", "outputAnnotatorType"], [67, 2, 1, "", "pretrained"], [67, 3, 1, "", "rescaleFactor"], [67, 2, 1, "", "setConfigProtoBytes"], [67, 2, 1, "", "setCropPct"], [67, 2, 1, "", "setDoRescale"], [67, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[68, 1, 1, "", "Gemma3ForMultiModal"]], "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal": [[68, 3, 1, "", "beamSize"], [68, 3, 1, "", "configProtoBytes"], [68, 3, 1, "", "doSample"], [68, 3, 1, "", "ignoreTokenIds"], [68, 3, 1, "", "inputAnnotatorTypes"], [68, 2, 1, "", "loadSavedModel"], [68, 3, 1, "", "maxInputLength"], [68, 3, 1, "", "maxOutputLength"], [68, 3, 1, "", "minOutputLength"], [68, 3, 1, "", "name"], [68, 3, 1, "", "noRepeatNgramSize"], [68, 3, 1, "", "outputAnnotatorType"], [68, 2, 1, "", "pretrained"], [68, 3, 1, "", "repetitionPenalty"], [68, 2, 1, "", "setBeamSize"], [68, 2, 1, "", "setConfigProtoBytes"], [68, 2, 1, "", "setDoSample"], [68, 2, 1, "", "setIgnoreTokenIds"], [68, 2, 1, "", "setMaxOutputLength"], [68, 2, 1, "", "setMaxSentenceSize"], [68, 2, 1, "", "setMinOutputLength"], [68, 2, 1, "", "setNoRepeatNgramSize"], [68, 2, 1, "", "setRepetitionPenalty"], [68, 2, 1, "", "setTemperature"], [68, 2, 1, "", "setTopK"], [68, 2, 1, "", "setTopP"], [68, 3, 1, "", "temperature"], [68, 3, 1, "", "topK"], [68, 3, 1, "", "topP"]], "sparknlp.annotator.cv.janus_for_multimodal": [[69, 1, 1, "", "JanusForMultiModal"]], "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal": [[69, 3, 1, "", "beamSize"], [69, 3, 1, "", "configProtoBytes"], [69, 3, 1, "", "doSample"], [69, 3, 1, "", "ignoreTokenIds"], [69, 3, 1, "", "imageGenerateMode"], [69, 3, 1, "", "inputAnnotatorTypes"], [69, 2, 1, "", "loadSavedModel"], [69, 3, 1, "", "maxOutputLength"], [69, 3, 1, "", "minOutputLength"], [69, 3, 1, "", "name"], [69, 3, 1, "", "noRepeatNgramSize"], [69, 3, 1, "", "numOfParallelImages"], [69, 3, 1, "", "outputAnnotatorType"], [69, 2, 1, "", "pretrained"], [69, 3, 1, "", "repetitionPenalty"], [69, 2, 1, "", "setBeamSize"], [69, 2, 1, "", "setConfigProtoBytes"], [69, 2, 1, "", "setDoSample"], [69, 2, 1, "", "setIgnoreTokenIds"], [69, 2, 1, "", "setImageGenerateMode"], [69, 2, 1, "", "setMaxOutputLength"], [69, 2, 1, "", "setMaxSentenceSize"], [69, 2, 1, "", "setMinOutputLength"], [69, 2, 1, "", "setNoRepeatNgramSize"], [69, 2, 1, "", "setNumOfParallelImages"], [69, 2, 1, "", "setRepetitionPenalty"], [69, 2, 1, "", "setTemperature"], [69, 2, 1, "", "setTopK"], [69, 2, 1, "", "setTopP"], [69, 3, 1, "", "temperature"], [69, 3, 1, "", "topK"], [69, 3, 1, "", "topP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[70, 1, 1, "", "LLAVAForMultiModal"]], "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal": [[70, 3, 1, "", "beamSize"], [70, 3, 1, "", "configProtoBytes"], [70, 3, 1, "", "doSample"], [70, 3, 1, "", "ignoreTokenIds"], [70, 3, 1, "", "inputAnnotatorTypes"], [70, 2, 1, "", "loadSavedModel"], [70, 3, 1, "", "maxOutputLength"], [70, 3, 1, "", "minOutputLength"], [70, 3, 1, "", "name"], [70, 3, 1, "", "noRepeatNgramSize"], [70, 3, 1, "", "outputAnnotatorType"], [70, 2, 1, "", "pretrained"], [70, 3, 1, "", "repetitionPenalty"], [70, 2, 1, "", "setBeamSize"], [70, 2, 1, "", "setConfigProtoBytes"], [70, 2, 1, "", "setDoSample"], [70, 2, 1, "", "setIgnoreTokenIds"], [70, 2, 1, "", "setMaxOutputLength"], [70, 2, 1, "", "setMaxSentenceSize"], [70, 2, 1, "", "setMinOutputLength"], [70, 2, 1, "", "setNoRepeatNgramSize"], [70, 2, 1, "", "setRepetitionPenalty"], [70, 2, 1, "", "setTemperature"], [70, 2, 1, "", "setTopK"], [70, 2, 1, "", "setTopP"], [70, 3, 1, "", "temperature"], [70, 3, 1, "", "topK"], [70, 3, 1, "", "topP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[71, 1, 1, "", "MLLamaForMultimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal": [[71, 3, 1, "", "beamSize"], [71, 3, 1, "", "configProtoBytes"], [71, 3, 1, "", "doSample"], [71, 3, 1, "", "ignoreTokenIds"], [71, 3, 1, "", "inputAnnotatorTypes"], [71, 2, 1, "", "loadSavedModel"], [71, 3, 1, "", "maxOutputLength"], [71, 3, 1, "", "minOutputLength"], [71, 3, 1, "", "name"], [71, 3, 1, "", "noRepeatNgramSize"], [71, 3, 1, "", "outputAnnotatorType"], [71, 2, 1, "", "pretrained"], [71, 3, 1, "", "repetitionPenalty"], [71, 2, 1, "", "setBeamSize"], [71, 2, 1, "", "setConfigProtoBytes"], [71, 2, 1, "", "setDoSample"], [71, 2, 1, "", "setIgnoreTokenIds"], [71, 2, 1, "", "setMaxOutputLength"], [71, 2, 1, "", "setMaxSentenceSize"], [71, 2, 1, "", "setMinOutputLength"], [71, 2, 1, "", "setNoRepeatNgramSize"], [71, 2, 1, "", "setRepetitionPenalty"], [71, 2, 1, "", "setTemperature"], [71, 2, 1, "", "setTopK"], [71, 2, 1, "", "setTopP"], [71, 3, 1, "", "temperature"], [71, 3, 1, "", "topK"], [71, 3, 1, "", "topP"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[72, 1, 1, "", "PaliGemmaForMultiModal"]], "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal": [[72, 3, 1, "", "beamSize"], [72, 3, 1, "", "doSample"], [72, 3, 1, "", "ignoreTokenIds"], [72, 3, 1, "", "inputAnnotatorTypes"], [72, 2, 1, "", "loadSavedModel"], [72, 3, 1, "", "maxOutputLength"], [72, 3, 1, "", "minOutputLength"], [72, 3, 1, "", "name"], [72, 3, 1, "", "noRepeatNgramSize"], [72, 3, 1, "", "outputAnnotatorType"], [72, 2, 1, "", "pretrained"], [72, 3, 1, "", "repetitionPenalty"], [72, 2, 1, "", "setBeamSize"], [72, 2, 1, "", "setDoSample"], [72, 2, 1, "", "setIgnoreTokenIds"], [72, 2, 1, "", "setMaxOutputLength"], [72, 2, 1, "", "setMaxSentenceSize"], [72, 2, 1, "", "setMinOutputLength"], [72, 2, 1, "", "setNoRepeatNgramSize"], [72, 2, 1, "", "setRepetitionPenalty"], [72, 2, 1, "", "setTemperature"], [72, 2, 1, "", "setTopK"], [72, 2, 1, "", "setTopP"], [72, 3, 1, "", "temperature"], [72, 3, 1, "", "topK"], [72, 3, 1, "", "topP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[73, 1, 1, "", "Phi3Vision"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision": [[73, 3, 1, "", "beamSize"], [73, 3, 1, "", "configProtoBytes"], [73, 3, 1, "", "doSample"], [73, 3, 1, "", "ignoreTokenIds"], [73, 3, 1, "", "inputAnnotatorTypes"], [73, 2, 1, "", "loadSavedModel"], [73, 3, 1, "", "maxOutputLength"], [73, 3, 1, "", "minOutputLength"], [73, 3, 1, "", "name"], [73, 3, 1, "", "noRepeatNgramSize"], [73, 3, 1, "", "outputAnnotatorType"], [73, 2, 1, "", "pretrained"], [73, 3, 1, "", "repetitionPenalty"], [73, 2, 1, "", "setBeamSize"], [73, 2, 1, "", "setConfigProtoBytes"], [73, 2, 1, "", "setDoSample"], [73, 2, 1, "", "setIgnoreTokenIds"], [73, 2, 1, "", "setMaxOutputLength"], [73, 2, 1, "", "setMaxSentenceSize"], [73, 2, 1, "", "setMinOutputLength"], [73, 2, 1, "", "setNoRepeatNgramSize"], [73, 2, 1, "", "setRepetitionPenalty"], [73, 2, 1, "", "setTemperature"], [73, 2, 1, "", "setTopK"], [73, 2, 1, "", "setTopP"], [73, 3, 1, "", "temperature"], [73, 3, 1, "", "topK"], [73, 3, 1, "", "topP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[74, 1, 1, "", "Qwen2VLTransformer"]], "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer": [[74, 3, 1, "", "beamSize"], [74, 3, 1, "", "configProtoBytes"], [74, 3, 1, "", "doSample"], [74, 3, 1, "", "ignoreTokenIds"], [74, 3, 1, "", "inputAnnotatorTypes"], [74, 2, 1, "", "loadSavedModel"], [74, 3, 1, "", "maxOutputLength"], [74, 3, 1, "", "minOutputLength"], [74, 3, 1, "", "name"], [74, 3, 1, "", "noRepeatNgramSize"], [74, 3, 1, "", "outputAnnotatorType"], [74, 2, 1, "", "pretrained"], [74, 3, 1, "", "repetitionPenalty"], [74, 2, 1, "", "setBeamSize"], [74, 2, 1, "", "setConfigProtoBytes"], [74, 2, 1, "", "setDoSample"], [74, 2, 1, "", "setIgnoreTokenIds"], [74, 2, 1, "", "setMaxOutputLength"], [74, 2, 1, "", "setMaxSentenceSize"], [74, 2, 1, "", "setMinOutputLength"], [74, 2, 1, "", "setNoRepeatNgramSize"], [74, 2, 1, "", "setRepetitionPenalty"], [74, 2, 1, "", "setTemperature"], [74, 2, 1, "", "setTopK"], [74, 2, 1, "", "setTopP"], [74, 3, 1, "", "temperature"], [74, 3, 1, "", "topK"], [74, 3, 1, "", "topP"]], "sparknlp.annotator.cv.smolvlm_transformer": [[75, 1, 1, "", "SmolVLMTransformer"]], "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer": [[75, 3, 1, "", "beamSize"], [75, 3, 1, "", "doImageSplitting"], [75, 3, 1, "", "doSample"], [75, 3, 1, "", "ignoreTokenIds"], [75, 3, 1, "", "imageToken"], [75, 3, 1, "", "inputAnnotatorTypes"], [75, 2, 1, "", "loadSavedModel"], [75, 3, 1, "", "maxImageSize"], [75, 3, 1, "", "maxOutputLength"], [75, 3, 1, "", "minOutputLength"], [75, 3, 1, "", "name"], [75, 3, 1, "", "noRepeatNgramSize"], [75, 3, 1, "", "numVisionTokens"], [75, 3, 1, "", "outputAnnotatorType"], [75, 3, 1, "", "paddingConstant"], [75, 3, 1, "", "patchSize"], [75, 2, 1, "", "pretrained"], [75, 3, 1, "", "repetitionPenalty"], [75, 2, 1, "", "setBeamSize"], [75, 2, 1, "", "setConfigProtoBytes"], [75, 2, 1, "", "setDoImageSplitting"], [75, 2, 1, "", "setDoSample"], [75, 2, 1, "", "setIgnoreTokenIds"], [75, 2, 1, "", "setImageToken"], [75, 2, 1, "", "setMaxImageSize"], [75, 2, 1, "", "setMaxOutputLength"], [75, 2, 1, "", "setMaxSentenceSize"], [75, 2, 1, "", "setMinOutputLength"], [75, 2, 1, "", "setNoRepeatNgramSize"], [75, 2, 1, "", "setNumVisionTokens"], [75, 2, 1, "", "setPaddingConstant"], [75, 2, 1, "", "setPatchSize"], [75, 2, 1, "", "setRepetitionPenalty"], [75, 2, 1, "", "setStopTokenIds"], [75, 2, 1, "", "setTemperature"], [75, 2, 1, "", "setTopK"], [75, 2, 1, "", "setTopP"], [75, 3, 1, "", "stopTokenIds"], [75, 3, 1, "", "temperature"], [75, 3, 1, "", "topK"], [75, 3, 1, "", "topP"]], "sparknlp.annotator.cv.swin_for_image_classification": [[76, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[76, 3, 1, "", "configProtoBytes"], [76, 2, 1, "", "getClasses"], [76, 3, 1, "", "inputAnnotatorTypes"], [76, 2, 1, "", "loadSavedModel"], [76, 3, 1, "", "name"], [76, 3, 1, "", "outputAnnotatorType"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[77, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[77, 3, 1, "", "configProtoBytes"], [77, 3, 1, "", "inputAnnotatorTypes"], [77, 2, 1, "", "loadSavedModel"], [77, 3, 1, "", "name"], [77, 3, 1, "", "outputAnnotatorType"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[78, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[78, 3, 1, "", "configProtoBytes"], [78, 2, 1, "", "getClasses"], [78, 3, 1, "", "inputAnnotatorTypes"], [78, 2, 1, "", "loadSavedModel"], [78, 3, 1, "", "name"], [78, 3, 1, "", "outputAnnotatorType"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[79, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[79, 3, 1, "", "entityName"], [79, 3, 1, "", "inputAnnotatorTypes"], [79, 3, 1, "", "name"], [79, 3, 1, "", "outputAnnotatorType"], [79, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[81, 0, 0, "-", "dependency_parser"], [82, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[81, 1, 1, "", "DependencyParserApproach"], [81, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[81, 3, 1, "", "conllU"], [81, 3, 1, "", "dependencyTreeBank"], [81, 3, 1, "", "inputAnnotatorTypes"], [81, 3, 1, "", "numberOfIterations"], [81, 3, 1, "", "outputAnnotatorType"], [81, 2, 1, "", "setConllU"], [81, 2, 1, "", "setDependencyTreeBank"], [81, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[81, 3, 1, "", "inputAnnotatorTypes"], [81, 3, 1, "", "name"], [81, 3, 1, "", "outputAnnotatorType"], [81, 3, 1, "", "perceptron"], [81, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[82, 1, 1, "", "TypedDependencyParserApproach"], [82, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[82, 3, 1, "", "conll2009"], [82, 3, 1, "", "conllU"], [82, 3, 1, "", "inputAnnotatorTypes"], [82, 3, 1, "", "numberOfIterations"], [82, 3, 1, "", "outputAnnotatorType"], [82, 2, 1, "", "setConll2009"], [82, 2, 1, "", "setConllU"], [82, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[82, 3, 1, "", "conllFormat"], [82, 3, 1, "", "inputAnnotatorTypes"], [82, 3, 1, "", "name"], [82, 3, 1, "", "outputAnnotatorType"], [82, 2, 1, "", "pretrained"], [82, 3, 1, "", "trainDependencyPipe"], [82, 3, 1, "", "trainOptions"], [82, 3, 1, "", "trainParameters"]], "sparknlp.annotator.document_character_text_splitter": [[83, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[83, 3, 1, "", "chunkOverlap"], [83, 3, 1, "", "chunkSize"], [83, 3, 1, "", "explodeSplits"], [83, 3, 1, "", "inputAnnotatorTypes"], [83, 3, 1, "", "keepSeparators"], [83, 3, 1, "", "outputAnnotatorType"], [83, 3, 1, "", "patternsAreRegex"], [83, 2, 1, "", "setChunkOverlap"], [83, 2, 1, "", "setChunkSize"], [83, 2, 1, "", "setExplodeSplits"], [83, 2, 1, "", "setKeepSeparators"], [83, 2, 1, "", "setPatternsAreRegex"], [83, 2, 1, "", "setSplitPatterns"], [83, 2, 1, "", "setTrimWhitespace"], [83, 3, 1, "", "splitPatterns"], [83, 3, 1, "", "trimWhitespace"]], "sparknlp.annotator.document_normalizer": [[84, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[84, 3, 1, "", "action"], [84, 3, 1, "", "encoding"], [84, 3, 1, "", "inputAnnotatorTypes"], [84, 3, 1, "", "lowercase"], [84, 3, 1, "", "outputAnnotatorType"], [84, 3, 1, "", "patterns"], [84, 3, 1, "", "policy"], [84, 3, 1, "", "replacement"], [84, 2, 1, "", "setAction"], [84, 2, 1, "", "setEncoding"], [84, 2, 1, "", "setLowercase"], [84, 2, 1, "", "setPatterns"], [84, 2, 1, "", "setPolicy"], [84, 2, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[85, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[85, 3, 1, "", "explodeSplits"], [85, 3, 1, "", "inputAnnotatorTypes"], [85, 3, 1, "", "numTokens"], [85, 3, 1, "", "outputAnnotatorType"], [85, 2, 1, "", "setExplodeSplits"], [85, 2, 1, "", "setNumTokens"], [85, 2, 1, "", "setTokenOverlap"], [85, 2, 1, "", "setTrimWhitespace"], [85, 3, 1, "", "tokenOverlap"], [85, 3, 1, "", "trimWhitespace"]], "sparknlp.annotator.embeddings": [[88, 0, 0, "-", "albert_embeddings"], [89, 0, 0, "-", "auto_gguf_embeddings"], [90, 0, 0, "-", "bert_embeddings"], [91, 0, 0, "-", "bert_sentence_embeddings"], [92, 0, 0, "-", "bge_embeddings"], [93, 0, 0, "-", "camembert_embeddings"], [94, 0, 0, "-", "chunk_embeddings"], [95, 0, 0, "-", "deberta_embeddings"], [96, 0, 0, "-", "distil_bert_embeddings"], [97, 0, 0, "-", "doc2vec"], [98, 0, 0, "-", "e5_embeddings"], [99, 0, 0, "-", "elmo_embeddings"], [100, 0, 0, "-", "instructor_embeddings"], [101, 0, 0, "-", "longformer_embeddings"], [102, 0, 0, "-", "mpnet_embeddings"], [103, 0, 0, "-", "mxbai_embeddings"], [104, 0, 0, "-", "nomic_embeddings"], [105, 0, 0, "-", "roberta_embeddings"], [106, 0, 0, "-", "roberta_sentence_embeddings"], [107, 0, 0, "-", "sentence_embeddings"], [108, 0, 0, "-", "snowflake_embeddings"], [109, 0, 0, "-", "uae_embeddings"], [110, 0, 0, "-", "universal_sentence_encoder"], [111, 0, 0, "-", "word2vec"], [112, 0, 0, "-", "word_embeddings"], [113, 0, 0, "-", "xlm_roberta_embeddings"], [114, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [115, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[88, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[88, 3, 1, "", "configProtoBytes"], [88, 3, 1, "", "inputAnnotatorTypes"], [88, 2, 1, "", "loadSavedModel"], [88, 3, 1, "", "name"], [88, 3, 1, "", "outputAnnotatorType"], [88, 2, 1, "", "pretrained"], [88, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[89, 1, 1, "", "AutoGGUFEmbeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings": [[89, 3, 1, "", "defragmentationThreshold"], [89, 3, 1, "", "embedding"], [89, 3, 1, "", "flashAttention"], [89, 2, 1, "", "getMetadata"], [89, 3, 1, "", "gpuSplitMode"], [89, 3, 1, "", "grpAttnN"], [89, 3, 1, "", "grpAttnW"], [89, 3, 1, "", "inputAnnotatorTypes"], [89, 2, 1, "", "loadSavedModel"], [89, 3, 1, "", "mainGpu"], [89, 3, 1, "", "nBatch"], [89, 3, 1, "", "nChunks"], [89, 3, 1, "", "nCtx"], [89, 3, 1, "", "nGpuLayers"], [89, 3, 1, "", "nSequences"], [89, 3, 1, "", "nThreads"], [89, 3, 1, "", "nThreadsBatch"], [89, 3, 1, "", "nUbatch"], [89, 3, 1, "", "name"], [89, 3, 1, "", "noKvOffload"], [89, 3, 1, "", "numaStrategy"], [89, 3, 1, "", "outputAnnotatorType"], [89, 3, 1, "", "poolingType"], [89, 2, 1, "", "pretrained"], [89, 3, 1, "", "ropeFreqBase"], [89, 3, 1, "", "ropeFreqScale"], [89, 3, 1, "", "ropeScalingType"], [89, 2, 1, "", "setDefragmentationThreshold"], [89, 2, 1, "", "setFlashAttention"], [89, 2, 1, "", "setGpuSplitMode"], [89, 2, 1, "", "setGrpAttnN"], [89, 2, 1, "", "setGrpAttnW"], [89, 2, 1, "", "setMainGpu"], [89, 2, 1, "", "setNBatch"], [89, 2, 1, "", "setNChunks"], [89, 2, 1, "", "setNCtx"], [89, 2, 1, "", "setNGpuLayers"], [89, 2, 1, "", "setNParallel"], [89, 2, 1, "", "setNSequences"], [89, 2, 1, "", "setNThreads"], [89, 2, 1, "", "setNThreadsBatch"], [89, 2, 1, "", "setNUbatch"], [89, 2, 1, "", "setNoKvOffload"], [89, 2, 1, "", "setNumaStrategy"], [89, 2, 1, "", "setPoolingType"], [89, 2, 1, "", "setRopeFreqBase"], [89, 2, 1, "", "setRopeFreqScale"], [89, 2, 1, "", "setRopeScalingType"], [89, 2, 1, "", "setTensorSplit"], [89, 2, 1, "", "setUseMlock"], [89, 2, 1, "", "setUseMmap"], [89, 2, 1, "", "setYarnAttnFactor"], [89, 2, 1, "", "setYarnBetaFast"], [89, 2, 1, "", "setYarnBetaSlow"], [89, 2, 1, "", "setYarnExtFactor"], [89, 2, 1, "", "setYarnOrigCtx"], [89, 3, 1, "", "tensorSplit"], [89, 3, 1, "", "useMlock"], [89, 3, 1, "", "useMmap"], [89, 3, 1, "", "yarnAttnFactor"], [89, 3, 1, "", "yarnBetaFast"], [89, 3, 1, "", "yarnBetaSlow"], [89, 3, 1, "", "yarnExtFactor"], [89, 3, 1, "", "yarnOrigCtx"]], "sparknlp.annotator.embeddings.bert_embeddings": [[90, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[90, 3, 1, "", "configProtoBytes"], [90, 3, 1, "", "inputAnnotatorTypes"], [90, 2, 1, "", "loadSavedModel"], [90, 3, 1, "", "name"], [90, 3, 1, "", "outputAnnotatorType"], [90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[91, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[91, 3, 1, "", "configProtoBytes"], [91, 3, 1, "", "inputAnnotatorTypes"], [91, 3, 1, "", "isLong"], [91, 2, 1, "", "loadSavedModel"], [91, 3, 1, "", "name"], [91, 3, 1, "", "outputAnnotatorType"], [91, 2, 1, "", "pretrained"], [91, 2, 1, "", "setConfigProtoBytes"], [91, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[92, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[92, 3, 1, "", "configProtoBytes"], [92, 3, 1, "", "inputAnnotatorTypes"], [92, 2, 1, "", "loadSavedModel"], [92, 3, 1, "", "name"], [92, 3, 1, "", "outputAnnotatorType"], [92, 2, 1, "", "pretrained"], [92, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[93, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[93, 3, 1, "", "configProtoBytes"], [93, 3, 1, "", "inputAnnotatorTypes"], [93, 2, 1, "", "loadSavedModel"], [93, 3, 1, "", "name"], [93, 3, 1, "", "outputAnnotatorType"], [93, 2, 1, "", "pretrained"], [93, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[94, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[94, 3, 1, "", "inputAnnotatorTypes"], [94, 3, 1, "", "name"], [94, 3, 1, "", "outputAnnotatorType"], [94, 3, 1, "", "poolingStrategy"], [94, 2, 1, "", "setPoolingStrategy"], [94, 2, 1, "", "setSkipOOV"], [94, 3, 1, "", "skipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[95, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[95, 3, 1, "", "configProtoBytes"], [95, 3, 1, "", "inputAnnotatorTypes"], [95, 2, 1, "", "loadSavedModel"], [95, 3, 1, "", "name"], [95, 3, 1, "", "outputAnnotatorType"], [95, 2, 1, "", "pretrained"], [95, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[96, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[96, 3, 1, "", "configProtoBytes"], [96, 3, 1, "", "inputAnnotatorTypes"], [96, 2, 1, "", "loadSavedModel"], [96, 3, 1, "", "name"], [96, 3, 1, "", "outputAnnotatorType"], [96, 2, 1, "", "pretrained"], [96, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[97, 1, 1, "", "Doc2VecApproach"], [97, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[97, 3, 1, "", "inputAnnotatorTypes"], [97, 3, 1, "", "maxIter"], [97, 3, 1, "", "maxSentenceLength"], [97, 3, 1, "", "minCount"], [97, 3, 1, "", "numPartitions"], [97, 3, 1, "", "outputAnnotatorType"], [97, 3, 1, "", "seed"], [97, 2, 1, "", "setMaxIter"], [97, 2, 1, "", "setMaxSentenceLength"], [97, 2, 1, "", "setMinCount"], [97, 2, 1, "", "setNumPartitions"], [97, 2, 1, "", "setSeed"], [97, 2, 1, "", "setStepSize"], [97, 2, 1, "", "setVectorSize"], [97, 2, 1, "", "setWindowSize"], [97, 3, 1, "", "stepSize"], [97, 3, 1, "", "vectorSize"], [97, 3, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[97, 2, 1, "", "getVectors"], [97, 3, 1, "", "inputAnnotatorTypes"], [97, 3, 1, "", "name"], [97, 3, 1, "", "outputAnnotatorType"], [97, 2, 1, "", "pretrained"], [97, 2, 1, "", "setVectorSize"], [97, 3, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[98, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[98, 3, 1, "", "configProtoBytes"], [98, 3, 1, "", "inputAnnotatorTypes"], [98, 2, 1, "", "loadSavedModel"], [98, 3, 1, "", "name"], [98, 3, 1, "", "outputAnnotatorType"], [98, 2, 1, "", "pretrained"], [98, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[99, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[99, 3, 1, "", "batchSize"], [99, 3, 1, "", "configProtoBytes"], [99, 3, 1, "", "inputAnnotatorTypes"], [99, 2, 1, "", "loadSavedModel"], [99, 3, 1, "", "name"], [99, 3, 1, "", "outputAnnotatorType"], [99, 3, 1, "", "poolingLayer"], [99, 2, 1, "", "pretrained"], [99, 2, 1, "", "setBatchSize"], [99, 2, 1, "", "setConfigProtoBytes"], [99, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[100, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[100, 3, 1, "", "configProtoBytes"], [100, 3, 1, "", "inputAnnotatorTypes"], [100, 3, 1, "", "instruction"], [100, 2, 1, "", "loadSavedModel"], [100, 3, 1, "", "name"], [100, 3, 1, "", "outputAnnotatorType"], [100, 2, 1, "", "pretrained"], [100, 2, 1, "", "setConfigProtoBytes"], [100, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[101, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[101, 3, 1, "", "configProtoBytes"], [101, 3, 1, "", "inputAnnotatorTypes"], [101, 2, 1, "", "loadSavedModel"], [101, 3, 1, "", "name"], [101, 3, 1, "", "outputAnnotatorType"], [101, 2, 1, "", "pretrained"], [101, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[102, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[102, 3, 1, "", "configProtoBytes"], [102, 3, 1, "", "inputAnnotatorTypes"], [102, 2, 1, "", "loadSavedModel"], [102, 3, 1, "", "name"], [102, 3, 1, "", "outputAnnotatorType"], [102, 2, 1, "", "pretrained"], [102, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[103, 1, 1, "", "MxbaiEmbeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings": [[103, 3, 1, "", "inputAnnotatorTypes"], [103, 2, 1, "", "loadSavedModel"], [103, 3, 1, "", "name"], [103, 3, 1, "", "outputAnnotatorType"], [103, 3, 1, "", "poolingStrategy"], [103, 2, 1, "", "pretrained"], [103, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[104, 1, 1, "", "NomicEmbeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings": [[104, 3, 1, "", "configProtoBytes"], [104, 3, 1, "", "inputAnnotatorTypes"], [104, 2, 1, "", "loadSavedModel"], [104, 3, 1, "", "name"], [104, 3, 1, "", "outputAnnotatorType"], [104, 2, 1, "", "pretrained"], [104, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[105, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[105, 3, 1, "", "configProtoBytes"], [105, 3, 1, "", "inputAnnotatorTypes"], [105, 2, 1, "", "loadSavedModel"], [105, 3, 1, "", "name"], [105, 3, 1, "", "outputAnnotatorType"], [105, 2, 1, "", "pretrained"], [105, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[106, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[106, 3, 1, "", "configProtoBytes"], [106, 3, 1, "", "inputAnnotatorTypes"], [106, 2, 1, "", "loadSavedModel"], [106, 3, 1, "", "name"], [106, 3, 1, "", "outputAnnotatorType"], [106, 2, 1, "", "pretrained"], [106, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[107, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[107, 3, 1, "", "inputAnnotatorTypes"], [107, 3, 1, "", "name"], [107, 3, 1, "", "outputAnnotatorType"], [107, 3, 1, "", "poolingStrategy"], [107, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[108, 1, 1, "", "SnowFlakeEmbeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings": [[108, 3, 1, "", "inputAnnotatorTypes"], [108, 2, 1, "", "loadSavedModel"], [108, 3, 1, "", "name"], [108, 3, 1, "", "outputAnnotatorType"], [108, 3, 1, "", "poolingStrategy"], [108, 2, 1, "", "pretrained"], [108, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[109, 1, 1, "", "UAEEmbeddings"]], "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings": [[109, 3, 1, "", "inputAnnotatorTypes"], [109, 2, 1, "", "loadSavedModel"], [109, 3, 1, "", "name"], [109, 3, 1, "", "outputAnnotatorType"], [109, 3, 1, "", "poolingStrategy"], [109, 2, 1, "", "pretrained"], [109, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[110, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[110, 3, 1, "", "configProtoBytes"], [110, 3, 1, "", "inputAnnotatorTypes"], [110, 3, 1, "", "loadSP"], [110, 2, 1, "", "loadSavedModel"], [110, 3, 1, "", "name"], [110, 3, 1, "", "outputAnnotatorType"], [110, 2, 1, "", "pretrained"], [110, 2, 1, "", "setConfigProtoBytes"], [110, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[111, 1, 1, "", "Word2VecApproach"], [111, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[111, 3, 1, "", "inputAnnotatorTypes"], [111, 3, 1, "", "maxIter"], [111, 3, 1, "", "maxSentenceLength"], [111, 3, 1, "", "minCount"], [111, 3, 1, "", "numPartitions"], [111, 3, 1, "", "outputAnnotatorType"], [111, 3, 1, "", "seed"], [111, 2, 1, "", "setMaxIter"], [111, 2, 1, "", "setMaxSentenceLength"], [111, 2, 1, "", "setMinCount"], [111, 2, 1, "", "setNumPartitions"], [111, 2, 1, "", "setSeed"], [111, 2, 1, "", "setStepSize"], [111, 2, 1, "", "setVectorSize"], [111, 2, 1, "", "setWindowSize"], [111, 3, 1, "", "stepSize"], [111, 3, 1, "", "vectorSize"], [111, 3, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[111, 2, 1, "", "getVectors"], [111, 3, 1, "", "inputAnnotatorTypes"], [111, 3, 1, "", "name"], [111, 3, 1, "", "outputAnnotatorType"], [111, 2, 1, "", "pretrained"], [111, 2, 1, "", "setVectorSize"], [111, 3, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[112, 1, 1, "", "WordEmbeddings"], [112, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[112, 3, 1, "", "inputAnnotatorTypes"], [112, 3, 1, "", "name"], [112, 3, 1, "", "outputAnnotatorType"], [112, 3, 1, "", "readCacheSize"], [112, 2, 1, "", "setReadCacheSize"], [112, 2, 1, "", "setWriteBufferSize"], [112, 3, 1, "", "writeBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[112, 3, 1, "", "databases"], [112, 3, 1, "", "inputAnnotatorTypes"], [112, 2, 1, "", "loadStorage"], [112, 3, 1, "", "name"], [112, 3, 1, "", "outputAnnotatorType"], [112, 2, 1, "", "overallCoverage"], [112, 2, 1, "", "pretrained"], [112, 3, 1, "", "readCacheSize"], [112, 2, 1, "", "setReadCacheSize"], [112, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[113, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[113, 3, 1, "", "configProtoBytes"], [113, 3, 1, "", "inputAnnotatorTypes"], [113, 2, 1, "", "loadSavedModel"], [113, 3, 1, "", "name"], [113, 3, 1, "", "outputAnnotatorType"], [113, 2, 1, "", "pretrained"], [113, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[114, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[114, 3, 1, "", "configProtoBytes"], [114, 3, 1, "", "inputAnnotatorTypes"], [114, 2, 1, "", "loadSavedModel"], [114, 3, 1, "", "name"], [114, 3, 1, "", "outputAnnotatorType"], [114, 2, 1, "", "pretrained"], [114, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[115, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[115, 3, 1, "", "configProtoBytes"], [115, 3, 1, "", "inputAnnotatorTypes"], [115, 2, 1, "", "loadSavedModel"], [115, 3, 1, "", "name"], [115, 3, 1, "", "outputAnnotatorType"], [115, 2, 1, "", "pretrained"], [115, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[117, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[117, 1, 1, "", "EntityRulerApproach"], [117, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[117, 3, 1, "", "alphabet"], [117, 3, 1, "", "inputAnnotatorTypes"], [117, 3, 1, "", "name"], [117, 3, 1, "", "optionalInputAnnotatorTypes"], [117, 3, 1, "", "outputAnnotatorType"], [117, 3, 1, "", "patternsResource"], [117, 3, 1, "", "sentenceMatch"], [117, 2, 1, "", "setAlphabetResource"], [117, 2, 1, "", "setPatternsResource"], [117, 2, 1, "", "setSentenceMatch"], [117, 2, 1, "", "setUseStorage"], [117, 3, 1, "", "useStorage"]], "sparknlp.annotator.er.entity_ruler.EntityRulerModel": [[117, 3, 1, "", "database"], [117, 3, 1, "", "inputAnnotatorTypes"], [117, 2, 1, "", "loadStorage"], [117, 3, 1, "", "name"], [117, 3, 1, "", "optionalInputAnnotatorTypes"], [117, 3, 1, "", "outputAnnotatorType"], [117, 2, 1, "", "pretrained"]], "sparknlp.annotator.graph_extraction": [[118, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[118, 3, 1, "", "delimiter"], [118, 3, 1, "", "dependencyParserModel"], [118, 3, 1, "", "entityTypes"], [118, 3, 1, "", "explodeEntities"], [118, 3, 1, "", "includeEdges"], [118, 3, 1, "", "inputAnnotatorTypes"], [118, 3, 1, "", "maxSentenceSize"], [118, 3, 1, "", "mergeEntities"], [118, 3, 1, "", "mergeEntitiesIOBFormat"], [118, 3, 1, "", "minSentenceSize"], [118, 3, 1, "", "name"], [118, 3, 1, "", "optionalInputAnnotatorTypes"], [118, 3, 1, "", "outputAnnotatorType"], [118, 3, 1, "", "posModel"], [118, 3, 1, "", "relationshipTypes"], [118, 3, 1, "", "rootTokens"], [118, 2, 1, "", "setDelimiter"], [118, 2, 1, "", "setDependencyParserModel"], [118, 2, 1, "", "setEntityTypes"], [118, 2, 1, "", "setExplodeEntities"], [118, 2, 1, "", "setIncludeEdges"], [118, 2, 1, "", "setMaxSentenceSize"], [118, 2, 1, "", "setMergeEntities"], [118, 2, 1, "", "setMergeEntitiesIOBFormat"], [118, 2, 1, "", "setMinSentenceSize"], [118, 2, 1, "", "setPosModel"], [118, 2, 1, "", "setRelationshipTypes"], [118, 2, 1, "", "setRootTokens"], [118, 2, 1, "", "setTypedDependencyParserModel"], [118, 3, 1, "", "typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[120, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[120, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[120, 2, 1, "", "getStopWords"], [120, 3, 1, "", "inputAnnotatorTypes"], [120, 2, 1, "", "loadDefaultStopWords"], [120, 3, 1, "", "maxNGrams"], [120, 3, 1, "", "minNGrams"], [120, 3, 1, "", "nKeywords"], [120, 3, 1, "", "name"], [120, 3, 1, "", "outputAnnotatorType"], [120, 2, 1, "", "setMaxNGrams"], [120, 2, 1, "", "setMinNGrams"], [120, 2, 1, "", "setNKeywords"], [120, 2, 1, "", "setStopWords"], [120, 2, 1, "", "setThreshold"], [120, 2, 1, "", "setWindowSize"], [120, 3, 1, "", "stopWords"], [120, 3, 1, "", "threshold"], [120, 3, 1, "", "windowSize"]], "sparknlp.annotator.ld_dl": [[122, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[122, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[122, 3, 1, "", "coalesceSentences"], [122, 3, 1, "", "configProtoBytes"], [122, 3, 1, "", "inputAnnotatorTypes"], [122, 3, 1, "", "languages"], [122, 3, 1, "", "name"], [122, 3, 1, "", "outputAnnotatorType"], [122, 2, 1, "", "pretrained"], [122, 2, 1, "", "setCoalesceSentences"], [122, 2, 1, "", "setConfigProtoBytes"], [122, 2, 1, "", "setThreshold"], [122, 2, 1, "", "setThresholdLabel"], [122, 3, 1, "", "threshold"], [122, 3, 1, "", "thresholdLabel"]], "sparknlp.annotator.lemmatizer": [[123, 1, 1, "", "Lemmatizer"], [123, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[123, 3, 1, "", "dictionary"], [123, 3, 1, "", "formCol"], [123, 3, 1, "", "inputAnnotatorTypes"], [123, 3, 1, "", "lemmaCol"], [123, 3, 1, "", "outputAnnotatorType"], [123, 2, 1, "", "setDictionary"], [123, 2, 1, "", "setFormCol"], [123, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[123, 3, 1, "", "inputAnnotatorTypes"], [123, 3, 1, "", "name"], [123, 3, 1, "", "outputAnnotatorType"], [123, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[125, 0, 0, "-", "big_text_matcher"], [126, 0, 0, "-", "date_matcher"], [127, 0, 0, "-", "multi_date_matcher"], [128, 0, 0, "-", "regex_matcher"], [129, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[125, 1, 1, "", "BigTextMatcher"], [125, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[125, 3, 1, "", "caseSensitive"], [125, 3, 1, "", "entities"], [125, 3, 1, "", "inputAnnotatorTypes"], [125, 3, 1, "", "mergeOverlapping"], [125, 3, 1, "", "outputAnnotatorType"], [125, 2, 1, "", "setCaseSensitive"], [125, 2, 1, "", "setEntities"], [125, 2, 1, "", "setMergeOverlapping"], [125, 2, 1, "", "setTokenizer"], [125, 3, 1, "", "tokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[125, 3, 1, "", "caseSensitive"], [125, 3, 1, "", "databases"], [125, 3, 1, "", "inputAnnotatorTypes"], [125, 2, 1, "", "loadStorage"], [125, 3, 1, "", "mergeOverlapping"], [125, 3, 1, "", "name"], [125, 3, 1, "", "outputAnnotatorType"], [125, 2, 1, "", "pretrained"], [125, 3, 1, "", "searchTrie"], [125, 2, 1, "", "setCaseSensitive"], [125, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[126, 1, 1, "", "DateMatcher"], [126, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcher": [[126, 3, 1, "", "inputAnnotatorTypes"], [126, 3, 1, "", "name"], [126, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[126, 3, 1, "", "aggressiveMatching"], [126, 3, 1, "", "anchorDateDay"], [126, 3, 1, "", "anchorDateMonth"], [126, 3, 1, "", "anchorDateYear"], [126, 3, 1, "", "defaultDayWhenMissing"], [126, 3, 1, "", "inputFormats"], [126, 3, 1, "", "outputFormat"], [126, 3, 1, "", "readMonthFirst"], [126, 3, 1, "", "relaxedFactoryStrategy"], [126, 2, 1, "", "setAggressiveMatching"], [126, 2, 1, "", "setAnchorDateDay"], [126, 2, 1, "", "setAnchorDateMonth"], [126, 2, 1, "", "setAnchorDateYear"], [126, 2, 1, "", "setDefaultDayWhenMissing"], [126, 2, 1, "", "setInputFormats"], [126, 2, 1, "", "setOutputFormat"], [126, 2, 1, "", "setReadMonthFirst"], [126, 2, 1, "", "setRelaxedFactoryStrategy"], [126, 2, 1, "", "setSourceLanguage"], [126, 3, 1, "", "sourceLanguage"]], "sparknlp.annotator.matcher.multi_date_matcher": [[127, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher": [[127, 3, 1, "", "inputAnnotatorTypes"], [127, 3, 1, "", "name"], [127, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.regex_matcher": [[128, 1, 1, "", "RegexMatcher"], [128, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[128, 3, 1, "", "delimiter"], [128, 3, 1, "", "externalRules"], [128, 3, 1, "", "inputAnnotatorTypes"], [128, 3, 1, "", "outputAnnotatorType"], [128, 3, 1, "", "rules"], [128, 2, 1, "", "setDelimiter"], [128, 2, 1, "", "setExternalRules"], [128, 2, 1, "", "setRules"], [128, 2, 1, "", "setStrategy"], [128, 3, 1, "", "strategy"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel": [[128, 3, 1, "", "inputAnnotatorTypes"], [128, 3, 1, "", "name"], [128, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.text_matcher": [[129, 1, 1, "", "TextMatcher"], [129, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[129, 3, 1, "", "buildFromTokens"], [129, 3, 1, "", "caseSensitive"], [129, 3, 1, "", "entities"], [129, 3, 1, "", "entityValue"], [129, 3, 1, "", "inputAnnotatorTypes"], [129, 3, 1, "", "mergeOverlapping"], [129, 3, 1, "", "outputAnnotatorType"], [129, 2, 1, "", "setBuildFromTokens"], [129, 2, 1, "", "setCaseSensitive"], [129, 2, 1, "", "setEntities"], [129, 2, 1, "", "setEntityValue"], [129, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[129, 3, 1, "", "buildFromTokens"], [129, 3, 1, "", "entityValue"], [129, 3, 1, "", "inputAnnotatorTypes"], [129, 3, 1, "", "mergeOverlapping"], [129, 3, 1, "", "name"], [129, 3, 1, "", "outputAnnotatorType"], [129, 2, 1, "", "pretrained"], [129, 3, 1, "", "searchTrie"], [129, 2, 1, "", "setBuildFromTokens"], [129, 2, 1, "", "setEntityValue"], [129, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[130, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[130, 3, 1, "", "delimiter"], [130, 3, 1, "", "enableCumulative"], [130, 3, 1, "", "inputAnnotatorTypes"], [130, 3, 1, "", "n"], [130, 3, 1, "", "name"], [130, 3, 1, "", "outputAnnotatorType"], [130, 2, 1, "", "setDelimiter"], [130, 2, 1, "", "setEnableCumulative"], [130, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[132, 0, 0, "-", "ner_approach"], [133, 0, 0, "-", "ner_converter"], [134, 0, 0, "-", "ner_crf"], [135, 0, 0, "-", "ner_dl"], [136, 0, 0, "-", "ner_overwriter"], [137, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[132, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[132, 3, 1, "", "entities"], [132, 2, 1, "", "getLabelColumn"], [132, 3, 1, "", "labelColumn"], [132, 3, 1, "", "maxEpochs"], [132, 3, 1, "", "minEpochs"], [132, 3, 1, "", "randomSeed"], [132, 2, 1, "", "setEntities"], [132, 2, 1, "", "setLabelColumn"], [132, 2, 1, "", "setMaxEpochs"], [132, 2, 1, "", "setMinEpochs"], [132, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[133, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[133, 3, 1, "", "inputAnnotatorTypes"], [133, 3, 1, "", "name"], [133, 3, 1, "", "nerHasNoSchema"], [133, 3, 1, "", "outputAnnotatorType"], [133, 3, 1, "", "preservePosition"], [133, 2, 1, "", "setNerHasNoSchema"], [133, 2, 1, "", "setPreservePosition"], [133, 2, 1, "", "setWhiteList"], [133, 3, 1, "", "whiteList"]], "sparknlp.annotator.ner.ner_crf": [[134, 1, 1, "", "NerCrfApproach"], [134, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[134, 3, 1, "", "c0"], [134, 3, 1, "", "externalFeatures"], [134, 3, 1, "", "includeConfidence"], [134, 3, 1, "", "inputAnnotatorTypes"], [134, 3, 1, "", "l2"], [134, 3, 1, "", "lossEps"], [134, 3, 1, "", "minW"], [134, 3, 1, "", "outputAnnotatorType"], [134, 2, 1, "", "setC0"], [134, 2, 1, "", "setExternalFeatures"], [134, 2, 1, "", "setIncludeConfidence"], [134, 2, 1, "", "setL2"], [134, 2, 1, "", "setLossEps"], [134, 2, 1, "", "setMinW"], [134, 2, 1, "", "setVerbose"], [134, 3, 1, "", "verbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[134, 3, 1, "", "includeConfidence"], [134, 3, 1, "", "inputAnnotatorTypes"], [134, 3, 1, "", "name"], [134, 3, 1, "", "outputAnnotatorType"], [134, 2, 1, "", "pretrained"], [134, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[135, 1, 1, "", "NerDLApproach"], [135, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[135, 3, 1, "", "batchSize"], [135, 3, 1, "", "bestModelMetric"], [135, 3, 1, "", "configProtoBytes"], [135, 3, 1, "", "dropout"], [135, 3, 1, "", "enableMemoryOptimizer"], [135, 3, 1, "", "graphFolder"], [135, 3, 1, "", "includeAllConfidenceScores"], [135, 3, 1, "", "includeConfidence"], [135, 3, 1, "", "inputAnnotatorTypes"], [135, 3, 1, "", "lr"], [135, 3, 1, "", "outputAnnotatorType"], [135, 3, 1, "", "po"], [135, 2, 1, "", "setBatchSize"], [135, 2, 1, "", "setBestModelMetric"], [135, 2, 1, "", "setConfigProtoBytes"], [135, 2, 1, "", "setDropout"], [135, 2, 1, "", "setEnableMemoryOptimizer"], [135, 2, 1, "", "setGraphFolder"], [135, 2, 1, "", "setIncludeAllConfidenceScores"], [135, 2, 1, "", "setIncludeConfidence"], [135, 2, 1, "", "setLr"], [135, 2, 1, "", "setPo"], [135, 2, 1, "", "setUseBestModel"], [135, 2, 1, "", "setUseContrib"], [135, 3, 1, "", "useBestModel"], [135, 3, 1, "", "useContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[135, 3, 1, "", "classes"], [135, 3, 1, "", "configProtoBytes"], [135, 3, 1, "", "includeAllConfidenceScores"], [135, 3, 1, "", "includeConfidence"], [135, 3, 1, "", "inputAnnotatorTypes"], [135, 3, 1, "", "name"], [135, 3, 1, "", "outputAnnotatorType"], [135, 2, 1, "", "pretrained"], [135, 2, 1, "", "setConfigProtoBytes"], [135, 2, 1, "", "setIncludeAllConfidenceScores"], [135, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[136, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[136, 3, 1, "", "inputAnnotatorTypes"], [136, 3, 1, "", "name"], [136, 3, 1, "", "nerWords"], [136, 3, 1, "", "newNerEntity"], [136, 3, 1, "", "outputAnnotatorType"], [136, 3, 1, "", "replaceEntities"], [136, 2, 1, "", "setNerWords"], [136, 2, 1, "", "setNewNerEntity"], [136, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[137, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[137, 2, 1, "", "getClasses"], [137, 3, 1, "", "ignoreEntities"], [137, 3, 1, "", "inputAnnotatorTypes"], [137, 2, 1, "", "load"], [137, 3, 1, "", "name"], [137, 3, 1, "", "outputAnnotatorType"], [137, 3, 1, "", "predictionThreshold"], [137, 2, 1, "", "pretrained"], [137, 2, 1, "", "setEntityDefinitions"], [137, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[138, 1, 1, "", "Normalizer"], [138, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[138, 3, 1, "", "cleanupPatterns"], [138, 3, 1, "", "inputAnnotatorTypes"], [138, 3, 1, "", "lowercase"], [138, 3, 1, "", "maxLength"], [138, 3, 1, "", "minLength"], [138, 3, 1, "", "outputAnnotatorType"], [138, 2, 1, "", "setCleanupPatterns"], [138, 2, 1, "", "setLowercase"], [138, 2, 1, "", "setMaxLength"], [138, 2, 1, "", "setMinLength"], [138, 2, 1, "", "setSlangDictionary"], [138, 3, 1, "", "slangDictionary"], [138, 3, 1, "", "slangMatchCase"]], "sparknlp.annotator.normalizer.NormalizerModel": [[138, 3, 1, "", "cleanupPatterns"], [138, 3, 1, "", "inputAnnotatorTypes"], [138, 3, 1, "", "lowercase"], [138, 3, 1, "", "name"], [138, 3, 1, "", "outputAnnotatorType"], [138, 3, 1, "", "slangMatchCase"]], "sparknlp.annotator.openai": [[140, 0, 0, "-", "openai_completion"], [141, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[140, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[140, 3, 1, "", "bestOf"], [140, 3, 1, "", "echo"], [140, 3, 1, "", "frequencyPenalty"], [140, 3, 1, "", "inputAnnotatorTypes"], [140, 3, 1, "", "logitBias"], [140, 3, 1, "", "logprobs"], [140, 3, 1, "", "maxTokens"], [140, 3, 1, "", "model"], [140, 3, 1, "", "name"], [140, 3, 1, "", "numberOfCompletions"], [140, 3, 1, "", "outputAnnotatorType"], [140, 3, 1, "", "presencePenalty"], [140, 2, 1, "", "setBestOf"], [140, 2, 1, "", "setEcho"], [140, 2, 1, "", "setFrequencyPenalty"], [140, 2, 1, "", "setLogitBias"], [140, 2, 1, "", "setLogprobs"], [140, 2, 1, "", "setMaxTokens"], [140, 2, 1, "", "setModel"], [140, 2, 1, "", "setNumberOfCompletions"], [140, 2, 1, "", "setPresencePenalty"], [140, 2, 1, "", "setStop"], [140, 2, 1, "", "setSuffix"], [140, 2, 1, "", "setTemperature"], [140, 2, 1, "", "setTopP"], [140, 2, 1, "", "setUser"], [140, 3, 1, "", "stop"], [140, 3, 1, "", "suffix"], [140, 3, 1, "", "temperature"], [140, 3, 1, "", "topP"], [140, 3, 1, "", "user"]], "sparknlp.annotator.openai.openai_embeddings": [[141, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[141, 3, 1, "", "inputAnnotatorTypes"], [141, 3, 1, "", "model"], [141, 3, 1, "", "name"], [141, 3, 1, "", "outputAnnotatorType"], [141, 2, 1, "", "setModel"], [141, 2, 1, "", "setUser"], [141, 3, 1, "", "user"]], "sparknlp.annotator.param": [[143, 0, 0, "-", "classifier_encoder"], [144, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[143, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[143, 3, 1, "", "batchSize"], [143, 3, 1, "", "configProtoBytes"], [143, 3, 1, "", "labelColumn"], [143, 3, 1, "", "lr"], [143, 3, 1, "", "maxEpochs"], [143, 3, 1, "", "randomSeed"], [143, 2, 1, "", "setBatchSize"], [143, 2, 1, "", "setConfigProtoBytes"], [143, 2, 1, "", "setLabelColumn"], [143, 2, 1, "", "setLr"], [143, 2, 1, "", "setMaxEpochs"], [143, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[144, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[144, 3, 1, "", "enableOutputLogs"], [144, 3, 1, "", "evaluationLogExtended"], [144, 3, 1, "", "outputLogsPath"], [144, 2, 1, "", "setEnableOutputLogs"], [144, 2, 1, "", "setEvaluationLogExtended"], [144, 2, 1, "", "setOutputLogsPath"], [144, 2, 1, "", "setTestDataset"], [144, 2, 1, "", "setValidationSplit"], [144, 2, 1, "", "setVerbose"], [144, 3, 1, "", "testDataset"], [144, 3, 1, "", "validationSplit"], [144, 3, 1, "", "verbose"]], "sparknlp.annotator.pos": [[146, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[146, 1, 1, "", "PerceptronApproach"], [146, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[146, 2, 1, "", "getNIterations"], [146, 3, 1, "", "inputAnnotatorTypes"], [146, 3, 1, "", "nIterations"], [146, 3, 1, "", "outputAnnotatorType"], [146, 3, 1, "", "posCol"], [146, 2, 1, "", "setIterations"], [146, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[146, 3, 1, "", "inputAnnotatorTypes"], [146, 3, 1, "", "name"], [146, 3, 1, "", "outputAnnotatorType"], [146, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[148, 0, 0, "-", "sentence_detector"], [149, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[148, 1, 1, "", "SentenceDetector"], [148, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[148, 3, 1, "", "detectLists"], [148, 3, 1, "", "inputAnnotatorTypes"], [148, 3, 1, "", "name"], [148, 3, 1, "", "outputAnnotatorType"], [148, 2, 1, "", "setCustomBounds"], [148, 2, 1, "", "setCustomBoundsStrategy"], [148, 2, 1, "", "setDetectLists"], [148, 2, 1, "", "setExplodeSentences"], [148, 2, 1, "", "setMaxLength"], [148, 2, 1, "", "setMinLength"], [148, 2, 1, "", "setSplitLength"], [148, 2, 1, "", "setUseAbbreviations"], [148, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams": [[148, 3, 1, "", "customBounds"], [148, 3, 1, "", "customBoundsStrategy"], [148, 3, 1, "", "explodeSentences"], [148, 3, 1, "", "maxLength"], [148, 3, 1, "", "minLength"], [148, 3, 1, "", "splitLength"], [148, 3, 1, "", "useAbbreviations"], [148, 3, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[149, 1, 1, "", "SentenceDetectorDLApproach"], [149, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[149, 3, 1, "", "epochsNumber"], [149, 3, 1, "", "explodeSentences"], [149, 3, 1, "", "impossiblePenultimates"], [149, 3, 1, "", "inputAnnotatorTypes"], [149, 3, 1, "", "modelArchitecture"], [149, 3, 1, "", "name"], [149, 3, 1, "", "outputAnnotatorType"], [149, 3, 1, "", "outputLogsPath"], [149, 2, 1, "", "setEpochsNumber"], [149, 2, 1, "", "setExplodeSentences"], [149, 2, 1, "", "setImpossiblePenultimates"], [149, 2, 1, "", "setModel"], [149, 2, 1, "", "setOutputLogsPath"], [149, 2, 1, "", "setValidationSplit"], [149, 3, 1, "", "validationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[149, 3, 1, "", "customBounds"], [149, 3, 1, "", "explodeSentences"], [149, 3, 1, "", "impossiblePenultimates"], [149, 3, 1, "", "inputAnnotatorTypes"], [149, 3, 1, "", "maxLength"], [149, 3, 1, "", "minLength"], [149, 3, 1, "", "modelArchitecture"], [149, 3, 1, "", "name"], [149, 3, 1, "", "outputAnnotatorType"], [149, 2, 1, "", "pretrained"], [149, 2, 1, "", "setCustomBounds"], [149, 2, 1, "", "setExplodeSentences"], [149, 2, 1, "", "setImpossiblePenultimates"], [149, 2, 1, "", "setMaxLength"], [149, 2, 1, "", "setMinLength"], [149, 2, 1, "", "setModel"], [149, 2, 1, "", "setSplitLength"], [149, 2, 1, "", "setUseCustomBoundsOnly"], [149, 3, 1, "", "splitLength"], [149, 3, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[151, 0, 0, "-", "sentiment_detector"], [152, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[151, 1, 1, "", "SentimentDetector"], [151, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[151, 3, 1, "", "decrementMultiplier"], [151, 3, 1, "", "dictionary"], [151, 3, 1, "", "enableScore"], [151, 3, 1, "", "incrementMultiplier"], [151, 3, 1, "", "inputAnnotatorTypes"], [151, 3, 1, "", "negativeMultiplier"], [151, 3, 1, "", "outputAnnotatorType"], [151, 3, 1, "", "positiveMultiplier"], [151, 3, 1, "", "reverseMultiplier"], [151, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel": [[151, 3, 1, "", "inputAnnotatorTypes"], [151, 3, 1, "", "name"], [151, 3, 1, "", "outputAnnotatorType"], [151, 3, 1, "", "positiveMultiplier"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[152, 1, 1, "", "ViveknSentimentApproach"], [152, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[152, 3, 1, "", "featureLimit"], [152, 3, 1, "", "importantFeatureRatio"], [152, 3, 1, "", "inputAnnotatorTypes"], [152, 3, 1, "", "outputAnnotatorType"], [152, 3, 1, "", "pruneCorpus"], [152, 3, 1, "", "sentimentCol"], [152, 2, 1, "", "setPruneCorpus"], [152, 2, 1, "", "setSentimentCol"], [152, 3, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[152, 3, 1, "", "featureLimit"], [152, 3, 1, "", "importantFeatureRatio"], [152, 3, 1, "", "inputAnnotatorTypes"], [152, 3, 1, "", "name"], [152, 3, 1, "", "outputAnnotatorType"], [152, 2, 1, "", "pretrained"], [152, 3, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[154, 0, 0, "-", "auto_gguf_model"], [155, 0, 0, "-", "auto_gguf_vision_model"], [156, 0, 0, "-", "bart_transformer"], [157, 0, 0, "-", "cohere_transformer"], [158, 0, 0, "-", "cpm_transformer"], [159, 0, 0, "-", "gpt2_transformer"], [160, 0, 0, "-", "llama2_transformer"], [161, 0, 0, "-", "llama3_transformer"], [162, 0, 0, "-", "m2m100_transformer"], [163, 0, 0, "-", "marian_transformer"], [164, 0, 0, "-", "mistral_transformer"], [165, 0, 0, "-", "nllb_transformer"], [166, 0, 0, "-", "olmo_transformer"], [167, 0, 0, "-", "phi2_transformer"], [168, 0, 0, "-", "phi3_transformer"], [169, 0, 0, "-", "qwen_transformer"], [170, 0, 0, "-", "starcoder_transformer"], [171, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[154, 1, 1, "", "AutoGGUFModel"]], "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel": [[154, 3, 1, "", "inputAnnotatorTypes"], [154, 2, 1, "", "loadSavedModel"], [154, 3, 1, "", "name"], [154, 3, 1, "", "outputAnnotatorType"], [154, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[155, 1, 1, "", "AutoGGUFVisionModel"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel": [[155, 3, 1, "", "inputAnnotatorTypes"], [155, 2, 1, "", "loadSavedModel"], [155, 3, 1, "", "name"], [155, 3, 1, "", "outputAnnotatorType"], [155, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.bart_transformer": [[156, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[156, 3, 1, "", "beamSize"], [156, 3, 1, "", "configProtoBytes"], [156, 3, 1, "", "doSample"], [156, 3, 1, "", "ignoreTokenIds"], [156, 3, 1, "", "inputAnnotatorTypes"], [156, 2, 1, "", "loadSavedModel"], [156, 3, 1, "", "maxOutputLength"], [156, 3, 1, "", "minOutputLength"], [156, 3, 1, "", "name"], [156, 3, 1, "", "noRepeatNgramSize"], [156, 3, 1, "", "outputAnnotatorType"], [156, 2, 1, "", "pretrained"], [156, 3, 1, "", "repetitionPenalty"], [156, 2, 1, "", "setBeamSize"], [156, 2, 1, "", "setCache"], [156, 2, 1, "", "setConfigProtoBytes"], [156, 2, 1, "", "setDoSample"], [156, 2, 1, "", "setIgnoreTokenIds"], [156, 2, 1, "", "setMaxOutputLength"], [156, 2, 1, "", "setMinOutputLength"], [156, 2, 1, "", "setNoRepeatNgramSize"], [156, 2, 1, "", "setRepetitionPenalty"], [156, 2, 1, "", "setTask"], [156, 2, 1, "", "setTemperature"], [156, 2, 1, "", "setTopK"], [156, 2, 1, "", "setTopP"], [156, 3, 1, "", "task"], [156, 3, 1, "", "temperature"], [156, 3, 1, "", "topK"], [156, 3, 1, "", "topP"], [156, 3, 1, "", "useCache"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[157, 1, 1, "", "CoHereTransformer"]], "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer": [[157, 3, 1, "", "beamSize"], [157, 3, 1, "", "configProtoBytes"], [157, 3, 1, "", "doSample"], [157, 3, 1, "", "ignoreTokenIds"], [157, 3, 1, "", "inputAnnotatorTypes"], [157, 2, 1, "", "loadSavedModel"], [157, 3, 1, "", "maxOutputLength"], [157, 3, 1, "", "minOutputLength"], [157, 3, 1, "", "name"], [157, 3, 1, "", "noRepeatNgramSize"], [157, 3, 1, "", "outputAnnotatorType"], [157, 2, 1, "", "pretrained"], [157, 3, 1, "", "repetitionPenalty"], [157, 2, 1, "", "setBeamSize"], [157, 2, 1, "", "setConfigProtoBytes"], [157, 2, 1, "", "setDoSample"], [157, 2, 1, "", "setIgnoreTokenIds"], [157, 2, 1, "", "setMaxOutputLength"], [157, 2, 1, "", "setMinOutputLength"], [157, 2, 1, "", "setNoRepeatNgramSize"], [157, 2, 1, "", "setRepetitionPenalty"], [157, 2, 1, "", "setStopTokenIds"], [157, 2, 1, "", "setTemperature"], [157, 2, 1, "", "setTopK"], [157, 2, 1, "", "setTopP"], [157, 3, 1, "", "stopTokenIds"], [157, 3, 1, "", "temperature"], [157, 3, 1, "", "topK"], [157, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[158, 1, 1, "", "CPMTransformer"]], "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer": [[158, 3, 1, "", "configProtoBytes"], [158, 3, 1, "", "doSample"], [158, 3, 1, "", "ignoreTokenIds"], [158, 3, 1, "", "inputAnnotatorTypes"], [158, 2, 1, "", "loadSavedModel"], [158, 3, 1, "", "maxOutputLength"], [158, 3, 1, "", "minOutputLength"], [158, 3, 1, "", "name"], [158, 3, 1, "", "noRepeatNgramSize"], [158, 3, 1, "", "outputAnnotatorType"], [158, 2, 1, "", "pretrained"], [158, 3, 1, "", "repetitionPenalty"], [158, 2, 1, "", "setConfigProtoBytes"], [158, 2, 1, "", "setDoSample"], [158, 2, 1, "", "setIgnoreTokenIds"], [158, 2, 1, "", "setMaxOutputLength"], [158, 2, 1, "", "setMinOutputLength"], [158, 2, 1, "", "setNoRepeatNgramSize"], [158, 2, 1, "", "setRepetitionPenalty"], [158, 2, 1, "", "setTemperature"], [158, 2, 1, "", "setTopK"], [158, 2, 1, "", "setTopP"], [158, 3, 1, "", "temperature"], [158, 3, 1, "", "topK"], [158, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[159, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[159, 3, 1, "", "configProtoBytes"], [159, 3, 1, "", "doSample"], [159, 3, 1, "", "ignoreTokenIds"], [159, 3, 1, "", "inputAnnotatorTypes"], [159, 2, 1, "", "loadSavedModel"], [159, 3, 1, "", "maxOutputLength"], [159, 3, 1, "", "minOutputLength"], [159, 3, 1, "", "name"], [159, 3, 1, "", "noRepeatNgramSize"], [159, 3, 1, "", "outputAnnotatorType"], [159, 2, 1, "", "pretrained"], [159, 3, 1, "", "repetitionPenalty"], [159, 2, 1, "", "setConfigProtoBytes"], [159, 2, 1, "", "setDoSample"], [159, 2, 1, "", "setIgnoreTokenIds"], [159, 2, 1, "", "setMaxOutputLength"], [159, 2, 1, "", "setMinOutputLength"], [159, 2, 1, "", "setNoRepeatNgramSize"], [159, 2, 1, "", "setRepetitionPenalty"], [159, 2, 1, "", "setTask"], [159, 2, 1, "", "setTemperature"], [159, 2, 1, "", "setTopK"], [159, 2, 1, "", "setTopP"], [159, 3, 1, "", "task"], [159, 3, 1, "", "temperature"], [159, 3, 1, "", "topK"], [159, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[160, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[160, 3, 1, "", "configProtoBytes"], [160, 3, 1, "", "doSample"], [160, 3, 1, "", "ignoreTokenIds"], [160, 3, 1, "", "inputAnnotatorTypes"], [160, 2, 1, "", "loadSavedModel"], [160, 3, 1, "", "maxOutputLength"], [160, 3, 1, "", "minOutputLength"], [160, 3, 1, "", "name"], [160, 3, 1, "", "noRepeatNgramSize"], [160, 3, 1, "", "outputAnnotatorType"], [160, 2, 1, "", "pretrained"], [160, 3, 1, "", "repetitionPenalty"], [160, 2, 1, "", "setConfigProtoBytes"], [160, 2, 1, "", "setDoSample"], [160, 2, 1, "", "setIgnoreTokenIds"], [160, 2, 1, "", "setMaxOutputLength"], [160, 2, 1, "", "setMinOutputLength"], [160, 2, 1, "", "setNoRepeatNgramSize"], [160, 2, 1, "", "setRepetitionPenalty"], [160, 2, 1, "", "setTemperature"], [160, 2, 1, "", "setTopK"], [160, 2, 1, "", "setTopP"], [160, 3, 1, "", "temperature"], [160, 3, 1, "", "topK"], [160, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[161, 1, 1, "", "LLAMA3Transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer": [[161, 3, 1, "", "beamSize"], [161, 3, 1, "", "configProtoBytes"], [161, 3, 1, "", "doSample"], [161, 3, 1, "", "ignoreTokenIds"], [161, 3, 1, "", "inputAnnotatorTypes"], [161, 2, 1, "", "loadSavedModel"], [161, 3, 1, "", "maxOutputLength"], [161, 3, 1, "", "minOutputLength"], [161, 3, 1, "", "name"], [161, 3, 1, "", "noRepeatNgramSize"], [161, 3, 1, "", "outputAnnotatorType"], [161, 2, 1, "", "pretrained"], [161, 3, 1, "", "repetitionPenalty"], [161, 2, 1, "", "setBeamSize"], [161, 2, 1, "", "setConfigProtoBytes"], [161, 2, 1, "", "setDoSample"], [161, 2, 1, "", "setIgnoreTokenIds"], [161, 2, 1, "", "setMaxOutputLength"], [161, 2, 1, "", "setMinOutputLength"], [161, 2, 1, "", "setNoRepeatNgramSize"], [161, 2, 1, "", "setRepetitionPenalty"], [161, 2, 1, "", "setStopTokenIds"], [161, 2, 1, "", "setTemperature"], [161, 2, 1, "", "setTopK"], [161, 2, 1, "", "setTopP"], [161, 3, 1, "", "stopTokenIds"], [161, 3, 1, "", "temperature"], [161, 3, 1, "", "topK"], [161, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[162, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[162, 3, 1, "", "beamSize"], [162, 3, 1, "", "configProtoBytes"], [162, 3, 1, "", "doSample"], [162, 3, 1, "", "ignoreTokenIds"], [162, 3, 1, "", "inputAnnotatorTypes"], [162, 2, 1, "", "loadSavedModel"], [162, 3, 1, "", "maxOutputLength"], [162, 3, 1, "", "minOutputLength"], [162, 3, 1, "", "name"], [162, 3, 1, "", "noRepeatNgramSize"], [162, 3, 1, "", "outputAnnotatorType"], [162, 2, 1, "", "pretrained"], [162, 3, 1, "", "repetitionPenalty"], [162, 2, 1, "", "setBeamSize"], [162, 2, 1, "", "setConfigProtoBytes"], [162, 2, 1, "", "setDoSample"], [162, 2, 1, "", "setIgnoreTokenIds"], [162, 2, 1, "", "setMaxOutputLength"], [162, 2, 1, "", "setMinOutputLength"], [162, 2, 1, "", "setNoRepeatNgramSize"], [162, 2, 1, "", "setRepetitionPenalty"], [162, 2, 1, "", "setSrcLang"], [162, 2, 1, "", "setTemperature"], [162, 2, 1, "", "setTgtLang"], [162, 2, 1, "", "setTopK"], [162, 2, 1, "", "setTopP"], [162, 3, 1, "", "srcLang"], [162, 3, 1, "", "temperature"], [162, 3, 1, "", "tgtLang"], [162, 3, 1, "", "topK"], [162, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[163, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[163, 3, 1, "", "configProtoBytes"], [163, 3, 1, "", "doSample"], [163, 3, 1, "", "ignoreTokenIds"], [163, 3, 1, "", "inputAnnotatorTypes"], [163, 3, 1, "", "langId"], [163, 2, 1, "", "loadSavedModel"], [163, 3, 1, "", "maxInputLength"], [163, 3, 1, "", "maxOutputLength"], [163, 3, 1, "", "name"], [163, 3, 1, "", "noRepeatNgramSize"], [163, 3, 1, "", "outputAnnotatorType"], [163, 2, 1, "", "pretrained"], [163, 3, 1, "", "repetitionPenalty"], [163, 2, 1, "", "setConfigProtoBytes"], [163, 2, 1, "", "setDoSample"], [163, 2, 1, "", "setIgnoreTokenIds"], [163, 2, 1, "", "setLangId"], [163, 2, 1, "", "setMaxInputLength"], [163, 2, 1, "", "setMaxOutputLength"], [163, 2, 1, "", "setNoRepeatNgramSize"], [163, 2, 1, "", "setRandomSeed"], [163, 2, 1, "", "setRepetitionPenalty"], [163, 2, 1, "", "setTemperature"], [163, 2, 1, "", "setTopK"], [163, 2, 1, "", "setTopP"], [163, 3, 1, "", "temperature"], [163, 3, 1, "", "topK"], [163, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[164, 1, 1, "", "MistralTransformer"]], "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer": [[164, 3, 1, "", "configProtoBytes"], [164, 3, 1, "", "doSample"], [164, 3, 1, "", "ignoreTokenIds"], [164, 3, 1, "", "inputAnnotatorTypes"], [164, 2, 1, "", "loadSavedModel"], [164, 3, 1, "", "maxOutputLength"], [164, 3, 1, "", "minOutputLength"], [164, 3, 1, "", "name"], [164, 3, 1, "", "noRepeatNgramSize"], [164, 3, 1, "", "outputAnnotatorType"], [164, 2, 1, "", "pretrained"], [164, 3, 1, "", "repetitionPenalty"], [164, 2, 1, "", "setConfigProtoBytes"], [164, 2, 1, "", "setDoSample"], [164, 2, 1, "", "setIgnoreTokenIds"], [164, 2, 1, "", "setMaxOutputLength"], [164, 2, 1, "", "setMinOutputLength"], [164, 2, 1, "", "setNoRepeatNgramSize"], [164, 2, 1, "", "setRepetitionPenalty"], [164, 2, 1, "", "setTemperature"], [164, 2, 1, "", "setTopK"], [164, 2, 1, "", "setTopP"], [164, 3, 1, "", "temperature"], [164, 3, 1, "", "topK"], [164, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[165, 1, 1, "", "NLLBTransformer"]], "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer": [[165, 3, 1, "", "beamSize"], [165, 3, 1, "", "configProtoBytes"], [165, 3, 1, "", "doSample"], [165, 3, 1, "", "ignoreTokenIds"], [165, 3, 1, "", "inputAnnotatorTypes"], [165, 2, 1, "", "loadSavedModel"], [165, 3, 1, "", "maxOutputLength"], [165, 3, 1, "", "minOutputLength"], [165, 3, 1, "", "name"], [165, 3, 1, "", "noRepeatNgramSize"], [165, 3, 1, "", "outputAnnotatorType"], [165, 2, 1, "", "pretrained"], [165, 3, 1, "", "repetitionPenalty"], [165, 2, 1, "", "setBeamSize"], [165, 2, 1, "", "setConfigProtoBytes"], [165, 2, 1, "", "setDoSample"], [165, 2, 1, "", "setIgnoreTokenIds"], [165, 2, 1, "", "setMaxOutputLength"], [165, 2, 1, "", "setMinOutputLength"], [165, 2, 1, "", "setNoRepeatNgramSize"], [165, 2, 1, "", "setRepetitionPenalty"], [165, 2, 1, "", "setSrcLang"], [165, 2, 1, "", "setTemperature"], [165, 2, 1, "", "setTgtLang"], [165, 2, 1, "", "setTopK"], [165, 2, 1, "", "setTopP"], [165, 3, 1, "", "srcLang"], [165, 3, 1, "", "temperature"], [165, 3, 1, "", "tgtLang"], [165, 3, 1, "", "topK"], [165, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[166, 1, 1, "", "OLMoTransformer"]], "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer": [[166, 3, 1, "", "configProtoBytes"], [166, 3, 1, "", "doSample"], [166, 3, 1, "", "ignoreTokenIds"], [166, 3, 1, "", "inputAnnotatorTypes"], [166, 2, 1, "", "loadSavedModel"], [166, 3, 1, "", "maxOutputLength"], [166, 3, 1, "", "minOutputLength"], [166, 3, 1, "", "name"], [166, 3, 1, "", "noRepeatNgramSize"], [166, 3, 1, "", "outputAnnotatorType"], [166, 2, 1, "", "pretrained"], [166, 3, 1, "", "repetitionPenalty"], [166, 2, 1, "", "setConfigProtoBytes"], [166, 2, 1, "", "setDoSample"], [166, 2, 1, "", "setIgnoreTokenIds"], [166, 2, 1, "", "setMaxOutputLength"], [166, 2, 1, "", "setMinOutputLength"], [166, 2, 1, "", "setNoRepeatNgramSize"], [166, 2, 1, "", "setRepetitionPenalty"], [166, 2, 1, "", "setTemperature"], [166, 2, 1, "", "setTopK"], [166, 2, 1, "", "setTopP"], [166, 3, 1, "", "temperature"], [166, 3, 1, "", "topK"], [166, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[167, 1, 1, "", "Phi2Transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer": [[167, 3, 1, "", "configProtoBytes"], [167, 3, 1, "", "doSample"], [167, 3, 1, "", "ignoreTokenIds"], [167, 3, 1, "", "inputAnnotatorTypes"], [167, 2, 1, "", "loadSavedModel"], [167, 3, 1, "", "maxOutputLength"], [167, 3, 1, "", "minOutputLength"], [167, 3, 1, "", "name"], [167, 3, 1, "", "noRepeatNgramSize"], [167, 3, 1, "", "outputAnnotatorType"], [167, 2, 1, "", "pretrained"], [167, 3, 1, "", "repetitionPenalty"], [167, 2, 1, "", "setConfigProtoBytes"], [167, 2, 1, "", "setDoSample"], [167, 2, 1, "", "setIgnoreTokenIds"], [167, 2, 1, "", "setMaxOutputLength"], [167, 2, 1, "", "setMinOutputLength"], [167, 2, 1, "", "setNoRepeatNgramSize"], [167, 2, 1, "", "setRepetitionPenalty"], [167, 2, 1, "", "setTemperature"], [167, 2, 1, "", "setTopK"], [167, 2, 1, "", "setTopP"], [167, 3, 1, "", "temperature"], [167, 3, 1, "", "topK"], [167, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[168, 1, 1, "", "Phi3Transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer": [[168, 3, 1, "", "configProtoBytes"], [168, 3, 1, "", "doSample"], [168, 3, 1, "", "ignoreTokenIds"], [168, 3, 1, "", "inputAnnotatorTypes"], [168, 2, 1, "", "loadSavedModel"], [168, 3, 1, "", "maxOutputLength"], [168, 3, 1, "", "minOutputLength"], [168, 3, 1, "", "name"], [168, 3, 1, "", "noRepeatNgramSize"], [168, 3, 1, "", "outputAnnotatorType"], [168, 2, 1, "", "pretrained"], [168, 3, 1, "", "repetitionPenalty"], [168, 2, 1, "", "setConfigProtoBytes"], [168, 2, 1, "", "setDoSample"], [168, 2, 1, "", "setIgnoreTokenIds"], [168, 2, 1, "", "setMaxOutputLength"], [168, 2, 1, "", "setMinOutputLength"], [168, 2, 1, "", "setNoRepeatNgramSize"], [168, 2, 1, "", "setRepetitionPenalty"], [168, 2, 1, "", "setTemperature"], [168, 2, 1, "", "setTopK"], [168, 2, 1, "", "setTopP"], [168, 3, 1, "", "temperature"], [168, 3, 1, "", "topK"], [168, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[169, 1, 1, "", "QwenTransformer"]], "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer": [[169, 3, 1, "", "configProtoBytes"], [169, 3, 1, "", "doSample"], [169, 3, 1, "", "ignoreTokenIds"], [169, 3, 1, "", "inputAnnotatorTypes"], [169, 2, 1, "", "loadSavedModel"], [169, 3, 1, "", "maxOutputLength"], [169, 3, 1, "", "minOutputLength"], [169, 3, 1, "", "name"], [169, 3, 1, "", "noRepeatNgramSize"], [169, 3, 1, "", "outputAnnotatorType"], [169, 2, 1, "", "pretrained"], [169, 3, 1, "", "repetitionPenalty"], [169, 2, 1, "", "setConfigProtoBytes"], [169, 2, 1, "", "setDoSample"], [169, 2, 1, "", "setIgnoreTokenIds"], [169, 2, 1, "", "setMaxOutputLength"], [169, 2, 1, "", "setMinOutputLength"], [169, 2, 1, "", "setNoRepeatNgramSize"], [169, 2, 1, "", "setRepetitionPenalty"], [169, 2, 1, "", "setTemperature"], [169, 2, 1, "", "setTopK"], [169, 2, 1, "", "setTopP"], [169, 3, 1, "", "temperature"], [169, 3, 1, "", "topK"], [169, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[170, 1, 1, "", "StarCoderTransformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer": [[170, 3, 1, "", "configProtoBytes"], [170, 3, 1, "", "doSample"], [170, 3, 1, "", "ignoreTokenIds"], [170, 3, 1, "", "inputAnnotatorTypes"], [170, 2, 1, "", "loadSavedModel"], [170, 3, 1, "", "maxOutputLength"], [170, 3, 1, "", "minOutputLength"], [170, 3, 1, "", "name"], [170, 3, 1, "", "noRepeatNgramSize"], [170, 3, 1, "", "outputAnnotatorType"], [170, 2, 1, "", "pretrained"], [170, 3, 1, "", "repetitionPenalty"], [170, 2, 1, "", "setConfigProtoBytes"], [170, 2, 1, "", "setDoSample"], [170, 2, 1, "", "setIgnoreTokenIds"], [170, 2, 1, "", "setMaxOutputLength"], [170, 2, 1, "", "setMinOutputLength"], [170, 2, 1, "", "setNoRepeatNgramSize"], [170, 2, 1, "", "setRepetitionPenalty"], [170, 2, 1, "", "setTemperature"], [170, 2, 1, "", "setTopK"], [170, 2, 1, "", "setTopP"], [170, 3, 1, "", "temperature"], [170, 3, 1, "", "topK"], [170, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[171, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[171, 3, 1, "", "configProtoBytes"], [171, 3, 1, "", "doSample"], [171, 3, 1, "", "ignoreTokenIds"], [171, 3, 1, "", "inputAnnotatorTypes"], [171, 2, 1, "", "loadSavedModel"], [171, 3, 1, "", "maxNewTokens"], [171, 3, 1, "", "maxOutputLength"], [171, 3, 1, "", "minOutputLength"], [171, 3, 1, "", "name"], [171, 3, 1, "", "noRepeatNgramSize"], [171, 3, 1, "", "outputAnnotatorType"], [171, 2, 1, "", "pretrained"], [171, 3, 1, "", "repetitionPenalty"], [171, 2, 1, "", "setConfigProtoBytes"], [171, 2, 1, "", "setDoSample"], [171, 2, 1, "", "setIgnoreTokenIds"], [171, 2, 1, "", "setMaxNewTokens"], [171, 2, 1, "", "setMaxOutputLength"], [171, 2, 1, "", "setMinOutputLength"], [171, 2, 1, "", "setNoRepeatNgramSize"], [171, 2, 1, "", "setRepetitionPenalty"], [171, 2, 1, "", "setStopAtEos"], [171, 2, 1, "", "setTask"], [171, 2, 1, "", "setTemperature"], [171, 2, 1, "", "setTopK"], [171, 2, 1, "", "setTopP"], [171, 2, 1, "", "setUseCache"], [171, 3, 1, "", "stopAtEos"], [171, 3, 1, "", "task"], [171, 3, 1, "", "temperature"], [171, 3, 1, "", "topK"], [171, 3, 1, "", "topP"], [171, 3, 1, "", "useCache"]], "sparknlp.annotator.similarity": [[173, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[173, 1, 1, "", "DocumentSimilarityRankerApproach"], [173, 1, 1, "", "DocumentSimilarityRankerFinisher"], [173, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[173, 3, 1, "", "aggregationMethod"], [173, 2, 1, "", "asRetriever"], [173, 3, 1, "", "asRetrieverQuery"], [173, 3, 1, "", "bucketLength"], [173, 3, 1, "", "identityRanking"], [173, 3, 1, "", "inputAnnotatorTypes"], [173, 3, 1, "", "numHashTables"], [173, 3, 1, "", "numberOfNeighbours"], [173, 3, 1, "", "outputAnnotatorType"], [173, 2, 1, "", "setAggregationMethod"], [173, 2, 1, "", "setBucketLength"], [173, 2, 1, "", "setIdentityRanking"], [173, 2, 1, "", "setNumHashTables"], [173, 2, 1, "", "setNumberOfNeighbours"], [173, 2, 1, "", "setSimilarityMethod"], [173, 2, 1, "", "setVisibleDistances"], [173, 3, 1, "", "similarityMethod"], [173, 3, 1, "", "visibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[173, 3, 1, "", "extractNearestNeighbor"], [173, 2, 1, "", "getInputCols"], [173, 2, 1, "", "getOutputCols"], [173, 3, 1, "", "inputCols"], [173, 3, 1, "", "name"], [173, 3, 1, "", "outputCols"], [173, 2, 1, "", "setExtractNearestNeighbor"], [173, 2, 1, "", "setInputCols"], [173, 2, 1, "", "setOutputCols"], [173, 2, 1, "", "setParams"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel": [[173, 3, 1, "", "inputAnnotatorTypes"], [173, 3, 1, "", "name"], [173, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.spell_check": [[175, 0, 0, "-", "context_spell_checker"], [176, 0, 0, "-", "norvig_sweeting"], [177, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[175, 1, 1, "", "ContextSpellCheckerApproach"], [175, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[175, 2, 1, "", "addRegexClass"], [175, 2, 1, "", "addVocabClass"], [175, 3, 1, "", "batchSize"], [175, 3, 1, "", "caseStrategy"], [175, 3, 1, "", "classCount"], [175, 3, 1, "", "compoundCount"], [175, 3, 1, "", "configProtoBytes"], [175, 3, 1, "", "epochs"], [175, 3, 1, "", "errorThreshold"], [175, 3, 1, "", "finalRate"], [175, 3, 1, "", "graphFolder"], [175, 3, 1, "", "initialRate"], [175, 3, 1, "", "inputAnnotatorTypes"], [175, 3, 1, "", "languageModelClasses"], [175, 3, 1, "", "maxCandidates"], [175, 3, 1, "", "maxSentLen"], [175, 3, 1, "", "maxWindowLen"], [175, 3, 1, "", "minCount"], [175, 3, 1, "", "name"], [175, 3, 1, "", "outputAnnotatorType"], [175, 2, 1, "", "setBatchSize"], [175, 2, 1, "", "setCaseStrategy"], [175, 2, 1, "", "setClassCount"], [175, 2, 1, "", "setCompoundCount"], [175, 2, 1, "", "setConfigProtoBytes"], [175, 2, 1, "", "setEpochs"], [175, 2, 1, "", "setErrorThreshold"], [175, 2, 1, "", "setFinalRate"], [175, 2, 1, "", "setGraphFolder"], [175, 2, 1, "", "setInitialRate"], [175, 2, 1, "", "setLanguageModelClasses"], [175, 2, 1, "", "setMaxCandidates"], [175, 2, 1, "", "setMaxSentLen"], [175, 2, 1, "", "setMaxWindowLen"], [175, 2, 1, "", "setMinCount"], [175, 2, 1, "", "setTradeoff"], [175, 2, 1, "", "setValidationFraction"], [175, 2, 1, "", "setWeightedDistPath"], [175, 2, 1, "", "setWordMaxDistance"], [175, 3, 1, "", "tradeoff"], [175, 3, 1, "", "validationFraction"], [175, 3, 1, "", "weightedDistPath"], [175, 3, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[175, 3, 1, "", "caseStrategy"], [175, 3, 1, "", "classes"], [175, 3, 1, "", "compareLowcase"], [175, 3, 1, "", "configProtoBytes"], [175, 3, 1, "", "correctSymbols"], [175, 3, 1, "", "errorThreshold"], [175, 3, 1, "", "gamma"], [175, 2, 1, "", "getWordClasses"], [175, 3, 1, "", "idsVocab"], [175, 3, 1, "", "inputAnnotatorTypes"], [175, 3, 1, "", "maxCandidates"], [175, 3, 1, "", "maxWindowLen"], [175, 3, 1, "", "name"], [175, 3, 1, "", "outputAnnotatorType"], [175, 2, 1, "", "pretrained"], [175, 2, 1, "", "setCaseStrategy"], [175, 2, 1, "", "setClasses"], [175, 2, 1, "", "setCompareLowcase"], [175, 2, 1, "", "setConfigProtoBytes"], [175, 2, 1, "", "setCorrectSymbols"], [175, 2, 1, "", "setErrorThreshold"], [175, 2, 1, "", "setGamma"], [175, 2, 1, "", "setIdsVocab"], [175, 2, 1, "", "setMaxCandidates"], [175, 2, 1, "", "setMaxWindowLen"], [175, 2, 1, "", "setTradeoff"], [175, 2, 1, "", "setVocabFreq"], [175, 2, 1, "", "setVocabIds"], [175, 2, 1, "", "setWeights"], [175, 2, 1, "", "setWordMaxDistance"], [175, 3, 1, "", "tradeoff"], [175, 2, 1, "", "updateRegexClass"], [175, 2, 1, "", "updateVocabClass"], [175, 3, 1, "", "vocabFreq"], [175, 3, 1, "", "vocabIds"], [175, 3, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[176, 1, 1, "", "NorvigSweetingApproach"], [176, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[176, 3, 1, "", "caseSensitive"], [176, 3, 1, "", "dictionary"], [176, 3, 1, "", "doubleVariants"], [176, 3, 1, "", "dupsLimit"], [176, 3, 1, "", "frequencyPriority"], [176, 3, 1, "", "inputAnnotatorTypes"], [176, 3, 1, "", "intersections"], [176, 3, 1, "", "outputAnnotatorType"], [176, 3, 1, "", "reductLimit"], [176, 2, 1, "", "setCaseSensitive"], [176, 2, 1, "", "setDictionary"], [176, 2, 1, "", "setDoubleVariants"], [176, 2, 1, "", "setFrequencyPriority"], [176, 2, 1, "", "setShortCircuit"], [176, 3, 1, "", "shortCircuit"], [176, 3, 1, "", "vowelSwapLimit"], [176, 3, 1, "", "wordSizeIgnore"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[176, 3, 1, "", "inputAnnotatorTypes"], [176, 3, 1, "", "name"], [176, 3, 1, "", "outputAnnotatorType"], [176, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[177, 1, 1, "", "SymmetricDeleteApproach"], [177, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[177, 3, 1, "", "corpus"], [177, 3, 1, "", "deletesThreshold"], [177, 3, 1, "", "dictionary"], [177, 3, 1, "", "dupsLimit"], [177, 3, 1, "", "frequencyThreshold"], [177, 3, 1, "", "inputAnnotatorTypes"], [177, 3, 1, "", "maxEditDistance"], [177, 3, 1, "", "outputAnnotatorType"], [177, 2, 1, "", "setDeletesThreshold"], [177, 2, 1, "", "setDictionary"], [177, 2, 1, "", "setFrequencyThreshold"], [177, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[177, 3, 1, "", "inputAnnotatorTypes"], [177, 3, 1, "", "name"], [177, 3, 1, "", "outputAnnotatorType"], [177, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[178, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stemmer.Stemmer": [[178, 3, 1, "", "inputAnnotatorTypes"], [178, 3, 1, "", "language"], [178, 3, 1, "", "name"], [178, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.stop_words_cleaner": [[179, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[179, 3, 1, "", "caseSensitive"], [179, 3, 1, "", "inputAnnotatorTypes"], [179, 2, 1, "", "loadDefaultStopWords"], [179, 3, 1, "", "locale"], [179, 3, 1, "", "name"], [179, 3, 1, "", "outputAnnotatorType"], [179, 2, 1, "", "pretrained"], [179, 2, 1, "", "setCaseSensitive"], [179, 2, 1, "", "setLocale"], [179, 2, 1, "", "setStopWords"], [179, 3, 1, "", "stopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[180, 1, 1, "", "TFNerDLGraphBuilder"], [180, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[180, 2, 1, "", "getGraphFile"], [180, 2, 1, "", "getGraphFolder"], [180, 2, 1, "", "getHiddenUnitsNumber"], [180, 2, 1, "", "getInputCols"], [180, 2, 1, "", "getLabelColumn"], [180, 3, 1, "", "graphFile"], [180, 3, 1, "", "graphFolder"], [180, 3, 1, "", "hiddenUnitsNumber"], [180, 3, 1, "", "inputAnnotatorTypes"], [180, 3, 1, "", "inputCols"], [180, 2, 1, "", "inputColsValidation"], [180, 3, 1, "", "labelColumn"], [180, 2, 1, "", "setGraphFile"], [180, 2, 1, "", "setGraphFolder"], [180, 2, 1, "", "setHiddenUnitsNumber"], [180, 2, 1, "", "setInputCols"], [180, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[182, 0, 0, "-", "chunk_tokenizer"], [183, 0, 0, "-", "recursive_tokenizer"], [184, 0, 0, "-", "regex_tokenizer"], [185, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[182, 1, 1, "", "ChunkTokenizer"], [182, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer": [[182, 3, 1, "", "inputAnnotatorTypes"], [182, 3, 1, "", "name"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel": [[182, 3, 1, "", "inputAnnotatorTypes"], [182, 3, 1, "", "name"]], "sparknlp.annotator.token.recursive_tokenizer": [[183, 1, 1, "", "RecursiveTokenizer"], [183, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[183, 3, 1, "", "infixes"], [183, 3, 1, "", "inputAnnotatorTypes"], [183, 3, 1, "", "name"], [183, 3, 1, "", "outputAnnotatorType"], [183, 3, 1, "", "prefixes"], [183, 2, 1, "", "setInfixes"], [183, 2, 1, "", "setPrefixes"], [183, 2, 1, "", "setSuffixes"], [183, 2, 1, "", "setWhitelist"], [183, 3, 1, "", "suffixes"], [183, 3, 1, "", "whitelist"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel": [[183, 3, 1, "", "inputAnnotatorTypes"], [183, 3, 1, "", "name"], [183, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.token.regex_tokenizer": [[184, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[184, 3, 1, "", "inputAnnotatorTypes"], [184, 3, 1, "", "maxLength"], [184, 3, 1, "", "minLength"], [184, 3, 1, "", "name"], [184, 3, 1, "", "outputAnnotatorType"], [184, 3, 1, "", "pattern"], [184, 3, 1, "", "positionalMask"], [184, 3, 1, "", "preservePosition"], [184, 2, 1, "", "setMaxLength"], [184, 2, 1, "", "setMinLength"], [184, 2, 1, "", "setPattern"], [184, 2, 1, "", "setPositionalMask"], [184, 2, 1, "", "setPreservePosition"], [184, 2, 1, "", "setToLowercase"], [184, 2, 1, "", "setTrimWhitespace"], [184, 3, 1, "", "toLowercase"], [184, 3, 1, "", "trimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[185, 1, 1, "", "Tokenizer"], [185, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[185, 2, 1, "", "addContextChars"], [185, 2, 1, "", "addException"], [185, 2, 1, "", "addInfixPattern"], [185, 2, 1, "", "addSplitChars"], [185, 3, 1, "", "caseSensitiveExceptions"], [185, 3, 1, "", "contextChars"], [185, 3, 1, "", "exceptions"], [185, 3, 1, "", "exceptionsPath"], [185, 2, 1, "", "getCaseSensitiveExceptions"], [185, 2, 1, "", "getContextChars"], [185, 2, 1, "", "getExceptions"], [185, 2, 1, "", "getInfixPatterns"], [185, 2, 1, "", "getPrefixPattern"], [185, 2, 1, "", "getSplitChars"], [185, 2, 1, "", "getSuffixPattern"], [185, 3, 1, "", "infixPatterns"], [185, 3, 1, "", "inputAnnotatorTypes"], [185, 3, 1, "", "maxLength"], [185, 3, 1, "", "minLength"], [185, 3, 1, "", "name"], [185, 3, 1, "", "outputAnnotatorType"], [185, 3, 1, "", "prefixPattern"], [185, 2, 1, "", "setCaseSensitiveExceptions"], [185, 2, 1, "", "setContextChars"], [185, 2, 1, "", "setExceptions"], [185, 2, 1, "", "setExceptionsPath"], [185, 2, 1, "", "setInfixPatterns"], [185, 2, 1, "", "setMaxLength"], [185, 2, 1, "", "setMinLength"], [185, 2, 1, "", "setPrefixPattern"], [185, 2, 1, "", "setSplitChars"], [185, 2, 1, "", "setSplitPattern"], [185, 2, 1, "", "setSuffixPattern"], [185, 2, 1, "", "setTargetPattern"], [185, 3, 1, "", "splitChars"], [185, 3, 1, "", "splitPattern"], [185, 3, 1, "", "suffixPattern"], [185, 3, 1, "", "targetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[185, 2, 1, "", "addSplitChars"], [185, 3, 1, "", "caseSensitiveExceptions"], [185, 3, 1, "", "exceptions"], [185, 3, 1, "", "inputAnnotatorTypes"], [185, 3, 1, "", "name"], [185, 3, 1, "", "outputAnnotatorType"], [185, 2, 1, "", "pretrained"], [185, 3, 1, "", "rules"], [185, 2, 1, "", "setSplitChars"], [185, 2, 1, "", "setSplitPattern"], [185, 3, 1, "", "splitChars"], [185, 3, 1, "", "splitPattern"], [185, 3, 1, "", "targetPattern"]], "sparknlp.annotator.token2_chunk": [[186, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.token2_chunk.Token2Chunk": [[186, 3, 1, "", "inputAnnotatorTypes"], [186, 3, 1, "", "name"], [186, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.ws": [[188, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[188, 1, 1, "", "WordSegmenterApproach"], [188, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[188, 3, 1, "", "ambiguityThreshold"], [188, 3, 1, "", "enableRegexTokenizer"], [188, 3, 1, "", "frequencyThreshold"], [188, 2, 1, "", "getAmbiguityThreshold"], [188, 2, 1, "", "getFrequencyThreshold"], [188, 2, 1, "", "getNIterations"], [188, 3, 1, "", "inputAnnotatorTypes"], [188, 3, 1, "", "nIterations"], [188, 3, 1, "", "name"], [188, 3, 1, "", "outputAnnotatorType"], [188, 3, 1, "", "pattern"], [188, 3, 1, "", "posCol"], [188, 2, 1, "", "setAmbiguityThreshold"], [188, 2, 1, "", "setEnableRegexTokenizer"], [188, 2, 1, "", "setFrequencyThreshold"], [188, 2, 1, "", "setNIterations"], [188, 2, 1, "", "setPattern"], [188, 2, 1, "", "setPosColumn"], [188, 2, 1, "", "setToLowercase"], [188, 3, 1, "", "toLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[188, 3, 1, "", "enableRegexTokenizer"], [188, 3, 1, "", "inputAnnotatorTypes"], [188, 3, 1, "", "name"], [188, 3, 1, "", "outputAnnotatorType"], [188, 3, 1, "", "pattern"], [188, 2, 1, "", "pretrained"], [188, 2, 1, "", "setEnableRegexTokenizer"], [188, 2, 1, "", "setPattern"], [188, 2, 1, "", "setToLowercase"], [188, 3, 1, "", "toLowercase"]], "sparknlp.base": [[190, 0, 0, "-", "audio_assembler"], [191, 0, 0, "-", "doc2_chunk"], [192, 0, 0, "-", "document_assembler"], [193, 0, 0, "-", "embeddings_finisher"], [194, 0, 0, "-", "finisher"], [195, 0, 0, "-", "graph_finisher"], [196, 0, 0, "-", "has_recursive_fit"], [197, 0, 0, "-", "has_recursive_transform"], [198, 0, 0, "-", "image_assembler"], [199, 0, 0, "-", "light_pipeline"], [200, 0, 0, "-", "multi_document_assembler"], [201, 0, 0, "-", "prompt_assembler"], [202, 0, 0, "-", "recursive_pipeline"], [203, 0, 0, "-", "table_assembler"], [204, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[190, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[190, 2, 1, "", "getOutputCol"], [190, 3, 1, "", "inputCol"], [190, 3, 1, "", "name"], [190, 3, 1, "", "outputAnnotatorType"], [190, 3, 1, "", "outputCol"], [190, 2, 1, "", "setInputCol"], [190, 2, 1, "", "setOutputCol"], [190, 2, 1, "", "setParams"]], "sparknlp.base.doc2_chunk": [[191, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[191, 3, 1, "", "chunkCol"], [191, 3, 1, "", "failOnMissing"], [191, 3, 1, "", "inputAnnotatorTypes"], [191, 3, 1, "", "isArray"], [191, 3, 1, "", "lowerCase"], [191, 3, 1, "", "name"], [191, 3, 1, "", "outputAnnotatorType"], [191, 2, 1, "", "setChunkCol"], [191, 2, 1, "", "setFailOnMissing"], [191, 2, 1, "", "setIsArray"], [191, 2, 1, "", "setLowerCase"], [191, 2, 1, "", "setParams"], [191, 2, 1, "", "setStartCol"], [191, 2, 1, "", "setStartColByTokenIndex"], [191, 3, 1, "", "startCol"], [191, 3, 1, "", "startColByTokenIndex"]], "sparknlp.base.document_assembler": [[192, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[192, 3, 1, "", "cleanupMode"], [192, 2, 1, "", "getOutputCol"], [192, 3, 1, "", "idCol"], [192, 3, 1, "", "inputCol"], [192, 3, 1, "", "metadataCol"], [192, 3, 1, "", "name"], [192, 3, 1, "", "outputAnnotatorType"], [192, 3, 1, "", "outputCol"], [192, 2, 1, "", "setCleanupMode"], [192, 2, 1, "", "setIdCol"], [192, 2, 1, "", "setInputCol"], [192, 2, 1, "", "setMetadataCol"], [192, 2, 1, "", "setOutputCol"], [192, 2, 1, "", "setParams"]], "sparknlp.base.embeddings_finisher": [[193, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[193, 3, 1, "", "cleanAnnotations"], [193, 2, 1, "", "getInputCols"], [193, 2, 1, "", "getOutputCols"], [193, 3, 1, "", "inputCols"], [193, 3, 1, "", "name"], [193, 3, 1, "", "outputAsVector"], [193, 3, 1, "", "outputCols"], [193, 2, 1, "", "setCleanAnnotations"], [193, 2, 1, "", "setInputCols"], [193, 2, 1, "", "setOutputAsVector"], [193, 2, 1, "", "setOutputCols"], [193, 2, 1, "", "setParams"]], "sparknlp.base.finisher": [[194, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[194, 3, 1, "", "annotationSplitSymbol"], [194, 3, 1, "", "cleanAnnotations"], [194, 2, 1, "", "getInputCols"], [194, 2, 1, "", "getOutputCols"], [194, 3, 1, "", "includeMetadata"], [194, 3, 1, "", "inputCols"], [194, 3, 1, "", "name"], [194, 3, 1, "", "outputAsArray"], [194, 3, 1, "", "outputCols"], [194, 3, 1, "", "parseEmbeddingsVectors"], [194, 2, 1, "", "setAnnotationSplitSymbol"], [194, 2, 1, "", "setCleanAnnotations"], [194, 2, 1, "", "setIncludeMetadata"], [194, 2, 1, "", "setInputCols"], [194, 2, 1, "", "setOutputAsArray"], [194, 2, 1, "", "setOutputCols"], [194, 2, 1, "", "setParams"], [194, 2, 1, "", "setParseEmbeddingsVectors"], [194, 2, 1, "", "setValueSplitSymbol"], [194, 3, 1, "", "valueSplitSymbol"]], "sparknlp.base.graph_finisher": [[195, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[195, 3, 1, "", "cleanAnnotations"], [195, 3, 1, "", "inputCol"], [195, 3, 1, "", "name"], [195, 3, 1, "", "outputAsArray"], [195, 3, 1, "", "outputCol"], [195, 2, 1, "", "setCleanAnnotations"], [195, 2, 1, "", "setInputCol"], [195, 2, 1, "", "setOutputAsArray"], [195, 2, 1, "", "setOutputCol"], [195, 2, 1, "", "setParams"]], "sparknlp.base.has_recursive_fit": [[196, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[197, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[198, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[198, 2, 1, "", "getOutputCol"], [198, 3, 1, "", "inputCol"], [198, 2, 1, "", "loadImagesAsBytes"], [198, 3, 1, "", "name"], [198, 3, 1, "", "outputAnnotatorType"], [198, 3, 1, "", "outputCol"], [198, 2, 1, "", "setInputCol"], [198, 2, 1, "", "setOutputCol"], [198, 2, 1, "", "setParams"], [198, 2, 1, "", "setTextCol"], [198, 3, 1, "", "textCol"]], "sparknlp.base.light_pipeline": [[199, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[199, 2, 1, "", "annotate"], [199, 2, 1, "", "fullAnnotate"], [199, 2, 1, "", "fullAnnotateImage"], [199, 2, 1, "", "getIgnoreUnsupported"], [199, 2, 1, "", "setIgnoreUnsupported"], [199, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[200, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[200, 3, 1, "", "cleanupMode"], [200, 2, 1, "", "getOutputCols"], [200, 3, 1, "", "idCol"], [200, 3, 1, "", "inputCols"], [200, 3, 1, "", "metadataCol"], [200, 3, 1, "", "name"], [200, 3, 1, "", "outputAnnotatorType"], [200, 3, 1, "", "outputCols"], [200, 2, 1, "", "setCleanupMode"], [200, 2, 1, "", "setIdCol"], [200, 2, 1, "", "setInputCols"], [200, 2, 1, "", "setMetadataCol"], [200, 2, 1, "", "setOutputCols"], [200, 2, 1, "", "setParams"]], "sparknlp.base.prompt_assembler": [[201, 1, 1, "", "PromptAssembler"]], "sparknlp.base.prompt_assembler.PromptAssembler": [[201, 3, 1, "", "addAssistant"], [201, 3, 1, "", "chatTemplate"], [201, 3, 1, "", "inputCol"], [201, 3, 1, "", "name"], [201, 3, 1, "", "outputAnnotatorType"], [201, 3, 1, "", "outputCol"], [201, 2, 1, "", "setAddAssistant"], [201, 2, 1, "", "setChatTemplate"], [201, 2, 1, "", "setInputCol"], [201, 2, 1, "", "setOutputCol"], [201, 2, 1, "", "setParams"]], "sparknlp.base.recursive_pipeline": [[202, 1, 1, "", "RecursivePipeline"], [202, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[203, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[203, 3, 1, "", "csvDelimiter"], [203, 3, 1, "", "escapeCsvDelimiter"], [203, 3, 1, "", "inputAnnotatorTypes"], [203, 3, 1, "", "inputFormat"], [203, 3, 1, "", "name"], [203, 3, 1, "", "outputAnnotatorType"], [203, 2, 1, "", "setCsvDelimiter"], [203, 2, 1, "", "setEscapeCsvDelimiter"], [203, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[204, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[204, 3, 1, "", "inputAnnotatorTypes"], [204, 3, 1, "", "name"], [204, 3, 1, "", "outputAnnotatorType"], [204, 3, 1, "", "preservePosition"], [204, 2, 1, "", "setParams"], [204, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[206, 0, 0, "-", "annotator_approach"], [207, 0, 0, "-", "annotator_model"], [208, 0, 0, "-", "annotator_properties"], [209, 0, 0, "-", "annotator_type"], [210, 0, 0, "-", "coverage_result"], [211, 0, 0, "-", "match_strategy"], [212, 0, 0, "-", "properties"], [213, 0, 0, "-", "read_as"], [214, 0, 0, "-", "recursive_annotator_approach"], [215, 0, 0, "-", "storage"], [216, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[206, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[207, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_model.AnnotatorModel": [[207, 2, 1, "", "setParams"]], "sparknlp.common.annotator_properties": [[208, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[208, 2, 1, "", "getInputCols"], [208, 2, 1, "", "getLazyAnnotator"], [208, 2, 1, "", "getOutputCol"], [208, 3, 1, "", "inputAnnotatorTypes"], [208, 3, 1, "", "inputCols"], [208, 2, 1, "", "inputColsValidation"], [208, 3, 1, "", "lazyAnnotator"], [208, 3, 1, "", "optionalInputAnnotatorTypes"], [208, 3, 1, "", "outputAnnotatorType"], [208, 3, 1, "", "outputCol"], [208, 2, 1, "", "setInputCols"], [208, 2, 1, "", "setLazyAnnotator"], [208, 2, 1, "", "setOutputCol"]], "sparknlp.common.annotator_type": [[209, 1, 1, "", "AnnotatorType"]], "sparknlp.common.annotator_type.AnnotatorType": [[209, 3, 1, "", "AUDIO"], [209, 3, 1, "", "CATEGORY"], [209, 3, 1, "", "CHUNK"], [209, 3, 1, "", "DATE"], [209, 3, 1, "", "DEPENDENCY"], [209, 3, 1, "", "DOCUMENT"], [209, 3, 1, "", "DOC_SIMILARITY_RANKINGS"], [209, 3, 1, "", "DUMMY"], [209, 3, 1, "", "ENTITY"], [209, 3, 1, "", "IMAGE"], [209, 3, 1, "", "LABELED_DEPENDENCY"], [209, 3, 1, "", "LANGUAGE"], [209, 3, 1, "", "NAMED_ENTITY"], [209, 3, 1, "", "NEGEX"], [209, 3, 1, "", "NODE"], [209, 3, 1, "", "POS"], [209, 3, 1, "", "SENTENCE_EMBEDDINGS"], [209, 3, 1, "", "SENTIMENT"], [209, 3, 1, "", "TABLE"], [209, 3, 1, "", "TOKEN"], [209, 3, 1, "", "WORDPIECE"], [209, 3, 1, "", "WORD_EMBEDDINGS"]], "sparknlp.common.coverage_result": [[210, 1, 1, "", "CoverageResult"]], "sparknlp.common.match_strategy": [[211, 1, 1, "", "MatchStrategy"]], "sparknlp.common.match_strategy.MatchStrategy": [[211, 3, 1, "", "MATCH_ALL"], [211, 3, 1, "", "MATCH_COMPLETE"], [211, 3, 1, "", "MATCH_FIRST"]], "sparknlp.common.properties": [[212, 1, 1, "", "HasAudioFeatureProperties"], [212, 1, 1, "", "HasBatchedAnnotate"], [212, 1, 1, "", "HasBatchedAnnotateAudio"], [212, 1, 1, "", "HasBatchedAnnotateImage"], [212, 1, 1, "", "HasCandidateLabelsProperties"], [212, 1, 1, "", "HasCaseSensitiveProperties"], [212, 1, 1, "", "HasClassifierActivationProperties"], [212, 1, 1, "", "HasClsTokenProperties"], [212, 1, 1, "", "HasEmbeddingsProperties"], [212, 1, 1, "", "HasEnableCachingProperties"], [212, 1, 1, "", "HasEngine"], [212, 1, 1, "", "HasGeneratorProperties"], [212, 1, 1, "", "HasImageFeatureProperties"], [212, 1, 1, "", "HasLlamaCppProperties"], [212, 1, 1, "", "HasLongMaxSentenceLengthLimit"], [212, 1, 1, "", "HasMaxSentenceLengthLimit"], [212, 1, 1, "", "HasRescaleFactor"]], "sparknlp.common.properties.HasAudioFeatureProperties": [[212, 3, 1, "", "doNormalize"], [212, 3, 1, "", "featureSize"], [212, 3, 1, "", "paddingSide"], [212, 3, 1, "", "paddingValue"], [212, 3, 1, "", "returnAttentionMask"], [212, 3, 1, "", "samplingRate"], [212, 2, 1, "", "setDoNormalize"], [212, 2, 1, "", "setFeatureSize"], [212, 2, 1, "", "setPaddingSide"], [212, 2, 1, "", "setPaddingValue"], [212, 2, 1, "", "setReturnAttentionMask"], [212, 2, 1, "", "setSamplingRate"]], "sparknlp.common.properties.HasBatchedAnnotate": [[212, 3, 1, "", "batchSize"], [212, 2, 1, "", "getBatchSize"], [212, 2, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateAudio": [[212, 3, 1, "", "batchSize"], [212, 2, 1, "", "getBatchSize"], [212, 2, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateImage": [[212, 3, 1, "", "batchSize"], [212, 2, 1, "", "getBatchSize"], [212, 2, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasCandidateLabelsProperties": [[212, 3, 1, "", "candidateLabels"], [212, 3, 1, "", "contradictionIdParam"], [212, 3, 1, "", "entailmentIdParam"], [212, 2, 1, "", "setCandidateLabels"], [212, 2, 1, "", "setContradictionIdParam"], [212, 2, 1, "", "setEntailmentIdParam"]], "sparknlp.common.properties.HasCaseSensitiveProperties": [[212, 3, 1, "", "caseSensitive"], [212, 2, 1, "", "getCaseSensitive"], [212, 2, 1, "", "setCaseSensitive"]], "sparknlp.common.properties.HasClassifierActivationProperties": [[212, 3, 1, "", "activation"], [212, 2, 1, "", "getActivation"], [212, 2, 1, "", "getMultilabel"], [212, 3, 1, "", "multilabel"], [212, 2, 1, "", "setActivation"], [212, 2, 1, "", "setMultilabel"], [212, 2, 1, "", "setThreshold"], [212, 3, 1, "", "threshold"]], "sparknlp.common.properties.HasClsTokenProperties": [[212, 2, 1, "", "getUseCLSToken"], [212, 2, 1, "", "setUseCLSToken"], [212, 3, 1, "", "useCLSToken"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[212, 3, 1, "", "dimension"], [212, 2, 1, "", "getDimension"], [212, 2, 1, "", "setDimension"]], "sparknlp.common.properties.HasEnableCachingProperties": [[212, 3, 1, "", "enableCaching"], [212, 2, 1, "", "getEnableCaching"], [212, 2, 1, "", "setEnableCaching"]], "sparknlp.common.properties.HasEngine": [[212, 3, 1, "", "engine"], [212, 2, 1, "", "getEngine"]], "sparknlp.common.properties.HasGeneratorProperties": [[212, 3, 1, "", "beamSize"], [212, 3, 1, "", "doSample"], [212, 3, 1, "", "maxOutputLength"], [212, 3, 1, "", "minOutputLength"], [212, 3, 1, "", "nReturnSequences"], [212, 3, 1, "", "noRepeatNgramSize"], [212, 3, 1, "", "repetitionPenalty"], [212, 2, 1, "", "setBeamSize"], [212, 2, 1, "", "setDoSample"], [212, 2, 1, "", "setMaxOutputLength"], [212, 2, 1, "", "setMinOutputLength"], [212, 2, 1, "", "setNReturnSequences"], [212, 2, 1, "", "setNoRepeatNgramSize"], [212, 2, 1, "", "setRepetitionPenalty"], [212, 2, 1, "", "setTask"], [212, 2, 1, "", "setTemperature"], [212, 2, 1, "", "setTopK"], [212, 2, 1, "", "setTopP"], [212, 3, 1, "", "task"], [212, 3, 1, "", "temperature"], [212, 3, 1, "", "topK"], [212, 3, 1, "", "topP"]], "sparknlp.common.properties.HasImageFeatureProperties": [[212, 3, 1, "", "doNormalize"], [212, 3, 1, "", "doResize"], [212, 3, 1, "", "featureExtractorType"], [212, 3, 1, "", "imageMean"], [212, 3, 1, "", "imageStd"], [212, 3, 1, "", "resample"], [212, 2, 1, "", "setDoNormalize"], [212, 2, 1, "", "setDoResize"], [212, 2, 1, "", "setFeatureExtractorType"], [212, 2, 1, "", "setImageMean"], [212, 2, 1, "", "setImageStd"], [212, 2, 1, "", "setResample"], [212, 2, 1, "", "setSize"], [212, 3, 1, "", "size"]], "sparknlp.common.properties.HasLlamaCppProperties": [[212, 3, 1, "", "cachePrompt"], [212, 3, 1, "", "chatTemplate"], [212, 3, 1, "", "defragmentationThreshold"], [212, 3, 1, "", "disableTokenIds"], [212, 3, 1, "", "dynamicTemperatureExponent"], [212, 3, 1, "", "dynamicTemperatureRange"], [212, 3, 1, "", "embedding"], [212, 3, 1, "", "flashAttention"], [212, 3, 1, "", "frequencyPenalty"], [212, 2, 1, "", "getMetadata"], [212, 3, 1, "", "gpuSplitMode"], [212, 3, 1, "", "grammar"], [212, 3, 1, "", "grpAttnN"], [212, 3, 1, "", "grpAttnW"], [212, 3, 1, "", "ignoreEos"], [212, 3, 1, "", "inputPrefix"], [212, 3, 1, "", "inputPrefixBos"], [212, 3, 1, "", "inputSuffix"], [212, 3, 1, "", "lookupCacheDynamicFilePath"], [212, 3, 1, "", "lookupCacheStaticFilePath"], [212, 3, 1, "", "mainGpu"], [212, 3, 1, "", "minKeep"], [212, 3, 1, "", "minP"], [212, 3, 1, "", "miroStat"], [212, 3, 1, "", "miroStatEta"], [212, 3, 1, "", "miroStatTau"], [212, 3, 1, "", "modelAlias"], [212, 3, 1, "", "modelDraft"], [212, 3, 1, "", "nBatch"], [212, 3, 1, "", "nChunks"], [212, 3, 1, "", "nCtx"], [212, 3, 1, "", "nDraft"], [212, 3, 1, "", "nGpuLayers"], [212, 3, 1, "", "nGpuLayersDraft"], [212, 3, 1, "", "nKeep"], [212, 3, 1, "", "nPredict"], [212, 3, 1, "", "nProbs"], [212, 3, 1, "", "nSequences"], [212, 3, 1, "", "nThreads"], [212, 3, 1, "", "nThreadsBatch"], [212, 3, 1, "", "nThreadsBatchDraft"], [212, 3, 1, "", "nThreadsDraft"], [212, 3, 1, "", "nUbatch"], [212, 3, 1, "", "noKvOffload"], [212, 3, 1, "", "numaStrategy"], [212, 3, 1, "", "pSplit"], [212, 3, 1, "", "penalizeNl"], [212, 3, 1, "", "penaltyPrompt"], [212, 3, 1, "", "poolingType"], [212, 3, 1, "", "presencePenalty"], [212, 3, 1, "", "repeatLastN"], [212, 3, 1, "", "repeatPenalty"], [212, 3, 1, "", "ropeFreqBase"], [212, 3, 1, "", "ropeFreqScale"], [212, 3, 1, "", "ropeScalingType"], [212, 3, 1, "", "samplers"], [212, 3, 1, "", "seed"], [212, 2, 1, "", "setCachePrompt"], [212, 2, 1, "", "setChatTemplate"], [212, 2, 1, "", "setDefragmentationThreshold"], [212, 2, 1, "", "setDisableTokenIds"], [212, 2, 1, "", "setDynamicTemperatureExponent"], [212, 2, 1, "", "setDynamicTemperatureRange"], [212, 2, 1, "", "setEmbedding"], [212, 2, 1, "", "setFlashAttention"], [212, 2, 1, "", "setFrequencyPenalty"], [212, 2, 1, "", "setGpuSplitMode"], [212, 2, 1, "", "setGrammar"], [212, 2, 1, "", "setGrpAttnN"], [212, 2, 1, "", "setGrpAttnW"], [212, 2, 1, "", "setIgnoreEos"], [212, 2, 1, "", "setInputPrefix"], [212, 2, 1, "", "setInputPrefixBos"], [212, 2, 1, "", "setInputSuffix"], [212, 2, 1, "", "setLookupCacheDynamicFilePath"], [212, 2, 1, "", "setLookupCacheStaticFilePath"], [212, 2, 1, "", "setLoraAdapters"], [212, 2, 1, "", "setMainGpu"], [212, 2, 1, "", "setMinKeep"], [212, 2, 1, "", "setMinP"], [212, 2, 1, "", "setMiroStat"], [212, 2, 1, "", "setMiroStatEta"], [212, 2, 1, "", "setMiroStatTau"], [212, 2, 1, "", "setModelAlias"], [212, 2, 1, "", "setModelDraft"], [212, 2, 1, "", "setNBatch"], [212, 2, 1, "", "setNChunks"], [212, 2, 1, "", "setNCtx"], [212, 2, 1, "", "setNDraft"], [212, 2, 1, "", "setNGpuLayers"], [212, 2, 1, "", "setNGpuLayersDraft"], [212, 2, 1, "", "setNKeep"], [212, 2, 1, "", "setNParallel"], [212, 2, 1, "", "setNPredict"], [212, 2, 1, "", "setNProbs"], [212, 2, 1, "", "setNSequences"], [212, 2, 1, "", "setNThreads"], [212, 2, 1, "", "setNThreadsBatch"], [212, 2, 1, "", "setNThreadsBatchDraft"], [212, 2, 1, "", "setNThreadsDraft"], [212, 2, 1, "", "setNUbatch"], [212, 2, 1, "", "setNoKvOffload"], [212, 2, 1, "", "setNumaStrategy"], [212, 2, 1, "", "setPSplit"], [212, 2, 1, "", "setPenalizeNl"], [212, 2, 1, "", "setPenaltyPrompt"], [212, 2, 1, "", "setPoolingType"], [212, 2, 1, "", "setPresencePenalty"], [212, 2, 1, "", "setRepeatLastN"], [212, 2, 1, "", "setRepeatPenalty"], [212, 2, 1, "", "setRopeFreqBase"], [212, 2, 1, "", "setRopeFreqScale"], [212, 2, 1, "", "setRopeScalingType"], [212, 2, 1, "", "setSamplers"], [212, 2, 1, "", "setSeed"], [212, 2, 1, "", "setStopStrings"], [212, 2, 1, "", "setSystemPrompt"], [212, 2, 1, "", "setTemperature"], [212, 2, 1, "", "setTensorSplit"], [212, 2, 1, "", "setTfsZ"], [212, 2, 1, "", "setTokenBias"], [212, 2, 1, "", "setTokenIdBias"], [212, 2, 1, "", "setTopK"], [212, 2, 1, "", "setTopP"], [212, 2, 1, "", "setTypicalP"], [212, 2, 1, "", "setUseChatTemplate"], [212, 2, 1, "", "setUseMlock"], [212, 2, 1, "", "setUseMmap"], [212, 2, 1, "", "setYarnAttnFactor"], [212, 2, 1, "", "setYarnBetaFast"], [212, 2, 1, "", "setYarnBetaSlow"], [212, 2, 1, "", "setYarnExtFactor"], [212, 2, 1, "", "setYarnOrigCtx"], [212, 3, 1, "", "stopStrings"], [212, 3, 1, "", "systemPrompt"], [212, 3, 1, "", "temperature"], [212, 3, 1, "", "tensorSplit"], [212, 3, 1, "", "tfsZ"], [212, 3, 1, "", "topK"], [212, 3, 1, "", "topP"], [212, 3, 1, "", "typicalP"], [212, 3, 1, "", "useChatTemplate"], [212, 3, 1, "", "useMlock"], [212, 3, 1, "", "useMmap"], [212, 3, 1, "", "yarnAttnFactor"], [212, 3, 1, "", "yarnBetaFast"], [212, 3, 1, "", "yarnBetaSlow"], [212, 3, 1, "", "yarnExtFactor"], [212, 3, 1, "", "yarnOrigCtx"]], "sparknlp.common.properties.HasLongMaxSentenceLengthLimit": [[212, 3, 1, "", "max_length_limit"]], "sparknlp.common.properties.HasMaxSentenceLengthLimit": [[212, 2, 1, "", "getMaxSentenceLength"], [212, 3, 1, "", "maxSentenceLength"], [212, 3, 1, "", "max_length_limit"], [212, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.common.properties.HasRescaleFactor": [[212, 3, 1, "", "doRescale"], [212, 3, 1, "", "rescaleFactor"], [212, 2, 1, "", "setDoRescale"], [212, 2, 1, "", "setRescaleFactor"]], "sparknlp.common.read_as": [[213, 1, 1, "", "ReadAs"]], "sparknlp.common.read_as.ReadAs": [[213, 3, 1, "", "BINARY"], [213, 3, 1, "", "SPARK"], [213, 3, 1, "", "TEXT"]], "sparknlp.common.recursive_annotator_approach": [[214, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.storage": [[215, 1, 1, "", "HasStorage"], [215, 1, 1, "", "HasStorageModel"], [215, 1, 1, "", "HasStorageOptions"], [215, 1, 1, "", "HasStorageRef"]], "sparknlp.common.storage.HasStorage": [[215, 2, 1, "", "getStoragePath"], [215, 2, 1, "", "setStoragePath"], [215, 3, 1, "", "storagePath"]], "sparknlp.common.storage.HasStorageModel": [[215, 2, 1, "", "loadStorage"], [215, 2, 1, "", "loadStorages"], [215, 2, 1, "", "saveStorage"]], "sparknlp.common.storage.HasStorageOptions": [[215, 3, 1, "", "enableInMemoryStorage"], [215, 2, 1, "", "getEnableInMemoryStorage"], [215, 2, 1, "", "getIncludeStorage"], [215, 3, 1, "", "includeStorage"], [215, 2, 1, "", "setEnableInMemoryStorage"], [215, 2, 1, "", "setIncludeStorage"]], "sparknlp.common.storage.HasStorageRef": [[215, 2, 1, "", "getStorageRef"], [215, 2, 1, "", "setStorageRef"], [215, 3, 1, "", "storageRef"]], "sparknlp.common.utils": [[216, 4, 1, "", "ExternalResource"], [216, 4, 1, "", "RegexRule"]], "sparknlp.functions": [[217, 4, 1, "", "explode_annotations_col"], [217, 4, 1, "", "filter_by_annotations_col"], [217, 4, 1, "", "map_annotations"], [217, 4, 1, "", "map_annotations_array"], [217, 4, 1, "", "map_annotations_col"], [217, 4, 1, "", "map_annotations_cols"], [217, 4, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[219, 0, 0, "-", "annotator_java_ml"], [220, 0, 0, "-", "annotator_transformer"], [221, 0, 0, "-", "extended_java_wrapper"], [222, 0, 0, "-", "params_getters_setters"], [223, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[219, 1, 1, "", "AnnotatorJavaMLReadable"], [219, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[219, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[220, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer.AnnotatorTransformer": [[220, 3, 1, "", "outputAnnotatorType"]], "sparknlp.internal.extended_java_wrapper": [[221, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[221, 2, 1, "", "apply"], [221, 2, 1, "", "getDataFrame"], [221, 2, 1, "", "new_java_array"], [221, 2, 1, "", "new_java_array_integer"], [221, 2, 1, "", "new_java_array_string"], [221, 2, 1, "", "new_java_obj"], [221, 2, 1, "", "spark_version"]], "sparknlp.internal.params_getters_setters": [[222, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[222, 2, 1, "", "getParamValue"], [222, 3, 1, "", "getter_attrs"], [222, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[223, 1, 1, "", "RecursiveEstimator"], [223, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[223, 2, 1, "", "fit"]], "sparknlp.internal.recursive.RecursiveTransformer": [[223, 2, 1, "", "transform_recursive"]], "sparknlp.logging": [[225, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[225, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[225, 2, 1, "", "end"], [225, 2, 1, "", "log_asset"], [225, 2, 1, "", "log_asset_data"], [225, 2, 1, "", "log_completed_run"], [225, 2, 1, "", "log_metrics"], [225, 2, 1, "", "log_parameters"], [225, 2, 1, "", "log_pipeline_parameters"], [225, 2, 1, "", "log_visualization"], [225, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[227, 0, 0, "-", "pretrained_pipeline"], [228, 0, 0, "-", "resource_downloader"], [229, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[227, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[227, 2, 1, "", "annotate"], [227, 2, 1, "", "from_disk"], [227, 2, 1, "", "fullAnnotate"], [227, 2, 1, "", "fullAnnotateImage"], [227, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[228, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[228, 2, 1, "", "clearCache"], [228, 2, 1, "", "downloadModel"], [228, 2, 1, "", "downloadModelDirectly"], [228, 2, 1, "", "downloadPipeline"], [228, 2, 1, "", "showAvailableAnnotators"], [228, 2, 1, "", "showPublicModels"], [228, 2, 1, "", "showPublicPipelines"], [228, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.pretrained.utils": [[229, 4, 1, "", "printProgress"]], "sparknlp.reader": [[231, 0, 0, "-", "enums"], [232, 0, 0, "-", "pdf_to_text"], [233, 0, 0, "-", "sparknlp_reader"]], "sparknlp.reader.enums": [[231, 1, 1, "", "TextStripperType"]], "sparknlp.reader.enums.TextStripperType": [[231, 3, 1, "", "PDF_LAYOUT_TEXT_STRIPPER"], [231, 3, 1, "", "PDF_TEXT_STRIPPER"]], "sparknlp.reader.pdf_to_text": [[232, 1, 1, "", "PdfToText"]], "sparknlp.reader.pdf_to_text.PdfToText": [[232, 3, 1, "", "onlyPageNum"], [232, 3, 1, "", "pageNumCol"], [232, 3, 1, "", "partitionNum"], [232, 2, 1, "", "setInputCol"], [232, 2, 1, "", "setOnlyPageNum"], [232, 2, 1, "", "setOutputCol"], [232, 2, 1, "", "setPageNumCol"], [232, 2, 1, "", "setPartitionNum"], [232, 2, 1, "", "setSort"], [232, 2, 1, "", "setSplitPage"], [232, 2, 1, "", "setStoreSplittedPdf"], [232, 2, 1, "", "setTextStripper"], [232, 3, 1, "", "sort"], [232, 3, 1, "", "splitPage"], [232, 3, 1, "", "storeSplittedPdf"], [232, 3, 1, "", "textStripper"]], "sparknlp.reader.sparknlp_reader": [[233, 1, 1, "", "SparkNLPReader"]], "sparknlp.reader.sparknlp_reader.SparkNLPReader": [[233, 2, 1, "", "doc"], [233, 2, 1, "", "email"], [233, 2, 1, "", "html"], [233, 2, 1, "", "pdf"], [233, 2, 1, "", "ppt"], [233, 2, 1, "", "txt"], [233, 2, 1, "", "xls"]], "sparknlp.training": [[235, 0, 0, "-", "conll"], [236, 0, 0, "-", "conllu"], [237, 0, 0, "-", "pos"], [238, 0, 0, "-", "pub_tator"], [239, 0, 0, "-", "spacy_to_annotation"]], "sparknlp.training.conll": [[235, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[235, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[236, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[236, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[237, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[237, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[238, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[238, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[239, 1, 1, "", "SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation.SpacyToAnnotation": [[239, 2, 1, "", "readJsonFile"]], "sparknlp.upload_to_hub": [[241, 1, 1, "", "PushToHub"]], "sparknlp.upload_to_hub.PushToHub": [[241, 2, 1, "", "check_for_required_info"], [241, 2, 1, "", "create_docs"], [241, 3, 1, "", "list_of_tasks"], [241, 2, 1, "", "push_to_hub"], [241, 2, 1, "", "unzip_directory"], [241, 2, 1, "", "zip_directory"]], "sparknlp.util": [[242, 1, 1, "", "CoNLLGenerator"], [242, 4, 1, "", "get_config_path"]], "sparknlp.util.CoNLLGenerator": [[242, 2, 1, "", "exportConllFiles"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"sparknlp": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], "packag": [1, 5, 6, 12, 59, 62, 64, 80, 87, 116, 119, 121, 124, 131, 139, 142, 145, 147, 150, 153, 172, 174, 181, 187, 189, 205, 218, 224, 226, 230, 234], "subpackag": [1, 5], "submodul": [1, 5, 6, 12, 59, 62, 64, 80, 87, 116, 119, 121, 124, 131, 139, 142, 145, 147, 150, 153, 172, 174, 181, 187, 189, 205, 218, 224, 226, 230, 234], "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245], "content": [1, 5, 6, 12, 59, 62, 64, 80, 87, 116, 119, 121, 124, 131, 139, 142, 145, 147, 150, 153, 172, 174, 181, 187, 189, 205, 218, 224, 226, 230, 234, 244], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 249, 250, 251], "annotation_audio": 3, "annotation_imag": 4, "audio": [6, 7, 8, 9], "hubert_for_ctc": 7, "wav2vec2_for_ctc": 8, "whisper_for_ctc": 9, "chunk2_doc": 10, "chunker": 11, "classifier_dl": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "albert_for_multiple_choic": 13, "albert_for_question_answ": 14, "albert_for_sequence_classif": 15, "albert_for_token_classif": 16, "albert_for_zero_shot_classif": 17, "bart_for_zero_shot_classif": 18, "bert_for_multiple_choic": 19, "bert_for_question_answ": 20, "bert_for_sequence_classif": 21, "bert_for_token_classif": 22, "bert_for_zero_shot_classif": 23, "camembert_for_question_answ": 24, "camembert_for_sequence_classif": 25, "camembert_for_token_classif": 26, "camembert_for_zero_shot_classif": 27, "exampl": [27, 32], "deberta_for_question_answ": 29, "deberta_for_sequence_classif": 30, "deberta_for_token_classif": 31, "deberta_for_zero_shot_classif": 32, "return": [32, 69, 75], "distil_bert_for_question_answ": 33, "distil_bert_for_sequence_classif": 34, "distil_bert_for_token_classif": 35, "distil_bert_for_zero_shot_classif": 36, "distilbert_for_multiple_choic": 37, "longformer_for_question_answ": 38, "longformer_for_sequence_classif": 39, "longformer_for_token_classif": 40, "mpnet_for_question_answ": 41, "mpnet_for_sequence_classif": 42, "mpnet_for_token_classif": 43, "multi_classifier_dl": 44, "roberta_for_multiple_choic": 45, "roberta_for_question_answ": 46, "roberta_for_sequence_classif": 47, "roberta_for_token_classif": 48, "roberta_for_zero_shot_classif": 49, "sentiment_dl": 50, "tapas_for_question_answ": 51, "xlm_roberta_for_multiple_choic": 52, "xlm_roberta_for_question_answ": 53, "xlm_roberta_for_sequence_classif": 54, "xlm_roberta_for_token_classif": 55, "xlm_roberta_for_zero_shot_classif": 56, "xlnet_for_sequence_classif": 57, "xlnet_for_token_classif": 58, "cleaner": [59, 60, 61], "extractor": 61, "coref": [62, 63], "spanbert_coref": 63, "cv": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "blip_for_question_answ": 65, "clip_for_zero_shot_classif": 66, "convnext_for_image_classif": 67, "gemma3_for_multimod": 68, "janus_for_multimod": 69, "refer": [69, 75, 245], "llava_for_multimod": 70, "mllama_for_multimod": 71, "paligemma_for_multimod": 72, "phi3_vision_for_multimod": 73, "qwen2vl_transform": 74, "smolvlm_transform": 75, "swin_for_image_classif": 76, "vision_encoder_decoder_for_image_capt": 77, "vit_for_image_classif": 78, "date2_chunk": 79, "depend": [80, 81, 82], "dependency_pars": 81, "typed_dependency_pars": 82, "document_character_text_splitt": 83, "document_norm": 84, "document_token_splitt": 85, "document_token_splitter_test": 86, "embed": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "albert_embed": 88, "auto_gguf_embed": 89, "bert_embed": 90, "bert_sentence_embed": 91, "bge_embed": 92, "camembert_embed": 93, "chunk_embed": 94, "deberta_embed": 95, "distil_bert_embed": 96, "doc2vec": 97, "e5_embed": 98, "elmo_embed": 99, "instructor_embed": 100, "longformer_embed": 101, "mpnet_embed": 102, "mxbai_embed": 103, "nomic_embed": 104, "roberta_embed": 105, "roberta_sentence_embed": 106, "sentence_embed": 107, "snowflake_embed": 108, "uae_embed": 109, "universal_sentence_encod": 110, "word2vec": 111, "word_embed": 112, "xlm_roberta_embed": 113, "xlm_roberta_sentence_embed": 114, "xlnet_embed": 115, "er": [116, 117], "entity_rul": 117, "graph_extract": 118, "keyword_extract": [119, 120], "yake_keyword_extract": 120, "ld_dl": [121, 122], "language_detector_dl": 122, "lemmat": 123, "matcher": [124, 125, 126, 127, 128, 129], "big_text_match": 125, "date_match": 126, "multi_date_match": 127, "regex_match": 128, "text_match": 129, "n_gram_gener": 130, "ner": [131, 132, 133, 134, 135, 136, 137], "ner_approach": 132, "ner_convert": 133, "ner_crf": 134, "ner_dl": 135, "ner_overwrit": 136, "zero_shot_ner_model": 137, "normal": 138, "openai": [139, 140, 141], "openai_complet": 140, "openai_embed": 141, "param": [142, 143, 144], "classifier_encod": 143, "evaluation_dl_param": 144, "po": [145, 146, 237, 256], "perceptron": 146, "sentenc": [147, 148, 149, 251], "sentence_detector": 148, "sentence_detector_dl": 149, "sentiment": [150, 151, 152], "sentiment_detector": 151, "vivekn_senti": 152, "seq2seq": [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "auto_gguf_model": 154, "auto_gguf_vision_model": 155, "bart_transform": 156, "cohere_transform": 157, "cpm_transform": 158, "gpt2_transform": 159, "llama2_transform": 160, "llama3_transform": 161, "m2m100_transform": 162, "marian_transform": 163, "mistral_transform": 164, "nllb_transform": 165, "olmo_transform": 166, "phi2_transform": 167, "phi3_transform": 168, "qwen_transform": 169, "starcoder_transform": 170, "t5_transform": 171, "similar": [172, 173], "document_similarity_rank": 173, "spell_check": [174, 175, 176, 177], "context_spell_check": 175, "norvig_sweet": 176, "symmetric_delet": 177, "stemmer": 178, "stop_words_clean": 179, "tf_ner_dl_graph_build": 180, "token": [181, 182, 183, 184, 185, 251], "chunk_token": 182, "recursive_token": 183, "regex_token": 184, "token2_chunk": 186, "w": [187, 188], "word_segment": 188, "base": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "audio_assembl": 190, "doc2_chunk": 191, "document_assembl": 192, "embeddings_finish": 193, "finish": [194, 251], "graph_finish": 195, "has_recursive_fit": 196, "has_recursive_transform": 197, "image_assembl": 198, "light_pipelin": 199, "multi_document_assembl": 200, "prompt_assembl": 201, "recursive_pipelin": 202, "table_assembl": 203, "token_assembl": 204, "common": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 250], "annotator_approach": 206, "annotator_model": 207, "annotator_properti": 208, "annotator_typ": 209, "coverage_result": 210, "match_strategi": 211, "properti": 212, "read_a": 213, "recursive_annotator_approach": 214, "storag": 215, "util": [216, 229, 242], "function": [217, 250, 252], "intern": [218, 219, 220, 221, 222, 223], "annotator_java_ml": 219, "annotator_transform": 220, "extended_java_wrapp": 221, "params_getters_sett": 222, "recurs": 223, "log": [224, 225, 246, 248], "comet": [225, 246], "pretrain": [226, 227, 228, 229, 250, 254, 255], "pretrained_pipelin": 227, "resource_download": 228, "reader": [230, 231, 232, 233], "enum": 231, "pdf_to_text": 232, "sparknlp_read": 233, "train": [234, 235, 236, 237, 238, 239, 240, 256], "conll": [235, 256], "conllu": [236, 256], "pub_tat": 238, "spacy_to_annot": 239, "tfgraph": 240, "upload_to_hub": 241, "get": [243, 251], "start": 243, "spark": [243, 244, 246, 251, 255], "nlp": [243, 244, 246, 255], "cheat": 243, "sheet": 243, "requir": 243, "instal": [243, 246], "us": [243, 246, 255], "conda": 243, "virtualenv": 243, "session": 243, "from": 243, "python": 243, "document": 244, "api": 245, "A": 246, "meta": 246, "machin": [246, 247], "learn": [246, 247], "platform": [246, 247], "pipelin": [246, 251, 254, 255], "paramet": 246, "evalu": 246, "metric": 246, "visual": 246, "run": 246, "an": 246, "offlin": 246, "experi": 246, "mlflow": 247, "lifecycl": 247, "third": 248, "parti": 248, "project": 248, "approach": 250, "model": 250, "note": 250, "avail": [250, 255], "set": 251, "up": 251, "your": 251, "own": 251, "type": 251, "necessari": 251, "import": 251, "construct": 251, "documentassembl": 251, "data": 251, "detect": 251, "out": 251, "put": 251, "all": 251, "togeth": 251, "ml": [251, 255], "helper": 252, "user": 253, "guid": 253, "light": 254, "convert": 254, "pipelinemodel": 254, "download": 255, "As": 255, "lightpipelin": 255, "load": 256, "dataset": 256, "spell": 256, "checker": 256, "pubtat": 256}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"sparknlp": [[0, "sparknlp"]], "sparknlp package": [[1, "sparknlp-package"]], "Subpackages": [[1, "subpackages"], [5, "subpackages"]], "Submodules": [[1, "submodules"], [5, "submodules"], [6, "submodules"], [12, "submodules"], [59, "submodules"], [62, "submodules"], [64, "submodules"], [80, "submodules"], [87, "submodules"], [116, "submodules"], [119, "submodules"], [121, "submodules"], [124, "submodules"], [131, "submodules"], [139, "submodules"], [142, "submodules"], [145, "submodules"], [147, "submodules"], [150, "submodules"], [153, "submodules"], [172, "submodules"], [174, "submodules"], [181, "submodules"], [187, "submodules"], [189, "submodules"], [205, "submodules"], [218, "submodules"], [224, "submodules"], [226, "submodules"], [230, "submodules"], [234, "submodules"]], "Module contents": [[1, "module-sparknlp"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [12, "module-sparknlp.annotator.classifier_dl"], [59, "module-sparknlp.annotator.cleaners"], [62, "module-sparknlp.annotator.coref"], [64, "module-sparknlp.annotator.cv"], [80, "module-sparknlp.annotator.dependency"], [87, "module-sparknlp.annotator.embeddings"], [116, "module-sparknlp.annotator.er"], [119, "module-sparknlp.annotator.keyword_extraction"], [121, "module-sparknlp.annotator.ld_dl"], [124, "module-sparknlp.annotator.matcher"], [131, "module-sparknlp.annotator.ner"], [139, "module-sparknlp.annotator.openai"], [142, "module-sparknlp.annotator.param"], [145, "module-sparknlp.annotator.pos"], [147, "module-sparknlp.annotator.sentence"], [150, "module-sparknlp.annotator.sentiment"], [153, "module-sparknlp.annotator.seq2seq"], [172, "module-sparknlp.annotator.similarity"], [174, "module-sparknlp.annotator.spell_check"], [181, "module-sparknlp.annotator.token"], [187, "module-sparknlp.annotator.ws"], [189, "module-sparknlp.base"], [205, "module-sparknlp.common"], [218, "module-sparknlp.internal"], [224, "module-sparknlp.logging"], [226, "module-sparknlp.pretrained"], [230, "module-sparknlp.reader"], [234, "module-sparknlp.training"]], "sparknlp.annotation module": [[2, "module-sparknlp.annotation"]], "sparknlp.annotation_audio module": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image module": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator package": [[5, "sparknlp-annotator-package"]], "sparknlp.annotator.audio package": [[6, "sparknlp-annotator-audio-package"]], "sparknlp.annotator.audio.hubert_for_ctc module": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio.wav2vec2_for_ctc module": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc module": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc module": [[10, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker module": [[11, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl package": [[12, "sparknlp-annotator-classifier-dl-package"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering module": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification module": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering module": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification module": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering module": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification module": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "Examples": [[27, "examples"], [32, "examples"]], "sparknlp.annotator.classifier_dl.classifier_dl module": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering module": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification module": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Returns": [[32, "returns"], [32, "id1"], [69, "returns"], [69, "id1"], [75, "returns"], [75, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering module": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification module": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl module": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering module": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification module": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl module": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering module": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners package": [[59, "sparknlp-annotator-cleaners-package"]], "sparknlp.annotator.cleaners.cleaner module": [[60, "module-sparknlp.annotator.cleaners.cleaner"]], "sparknlp.annotator.cleaners.extractor module": [[61, "module-sparknlp.annotator.cleaners.extractor"]], "sparknlp.annotator.coref package": [[62, "sparknlp-annotator-coref-package"]], "sparknlp.annotator.coref.spanbert_coref module": [[63, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv package": [[64, "sparknlp-annotator-cv-package"]], "sparknlp.annotator.cv.blip_for_question_answering module": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification module": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification module": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv.gemma3_for_multimodal module": [[68, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "sparknlp.annotator.cv.janus_for_multimodal module": [[69, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "References": [[69, "references"], [75, "references"]], "sparknlp.annotator.cv.llava_for_multimodal module": [[70, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal module": [[71, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "sparknlp.annotator.cv.paligemma_for_multimodal module": [[72, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal module": [[73, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "sparknlp.annotator.cv.qwen2vl_transformer module": [[74, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "sparknlp.annotator.cv.smolvlm_transformer module": [[75, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "sparknlp.annotator.cv.swin_for_image_classification module": [[76, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module": [[77, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification module": [[78, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk module": [[79, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency package": [[80, "sparknlp-annotator-dependency-package"]], "sparknlp.annotator.dependency.dependency_parser module": [[81, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency.typed_dependency_parser module": [[82, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter module": [[83, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer module": [[84, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter module": [[85, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test module": [[86, "sparknlp-annotator-document-token-splitter-test-module"]], "sparknlp.annotator.embeddings package": [[87, "sparknlp-annotator-embeddings-package"]], "sparknlp.annotator.embeddings.albert_embeddings module": [[88, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings module": [[89, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings module": [[90, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings module": [[91, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings module": [[92, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings module": [[93, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings module": [[94, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings module": [[95, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings module": [[96, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec module": [[97, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings module": [[98, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings module": [[99, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings module": [[100, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings module": [[101, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings module": [[102, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings module": [[103, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings module": [[104, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings module": [[105, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings module": [[106, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings module": [[107, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings module": [[108, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings module": [[109, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder module": [[110, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec module": [[111, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings module": [[112, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings module": [[113, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module": [[114, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings module": [[115, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er package": [[116, "sparknlp-annotator-er-package"]], "sparknlp.annotator.er.entity_ruler module": [[117, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.graph_extraction module": [[118, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator.keyword_extraction package": [[119, "sparknlp-annotator-keyword-extraction-package"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module": [[120, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl package": [[121, "sparknlp-annotator-ld-dl-package"]], "sparknlp.annotator.ld_dl.language_detector_dl module": [[122, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer module": [[123, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher package": [[124, "sparknlp-annotator-matcher-package"]], "sparknlp.annotator.matcher.big_text_matcher module": [[125, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher module": [[126, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher.multi_date_matcher module": [[127, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher module": [[128, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher module": [[129, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator module": [[130, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner package": [[131, "sparknlp-annotator-ner-package"]], "sparknlp.annotator.ner.ner_approach module": [[132, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter module": [[133, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf module": [[134, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl module": [[135, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter module": [[136, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model module": [[137, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer module": [[138, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai package": [[139, "sparknlp-annotator-openai-package"]], "sparknlp.annotator.openai.openai_completion module": [[140, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings module": [[141, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param package": [[142, "sparknlp-annotator-param-package"]], "sparknlp.annotator.param.classifier_encoder module": [[143, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params module": [[144, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.pos package": [[145, "sparknlp-annotator-pos-package"]], "sparknlp.annotator.pos.perceptron module": [[146, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence package": [[147, "sparknlp-annotator-sentence-package"]], "sparknlp.annotator.sentence.sentence_detector module": [[148, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl module": [[149, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment package": [[150, "sparknlp-annotator-sentiment-package"]], "sparknlp.annotator.sentiment.sentiment_detector module": [[151, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment module": [[152, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq package": [[153, "sparknlp-annotator-seq2seq-package"]], "sparknlp.annotator.seq2seq.auto_gguf_model module": [[154, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model module": [[155, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "sparknlp.annotator.seq2seq.bart_transformer module": [[156, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cohere_transformer module": [[157, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer module": [[158, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer module": [[159, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer module": [[160, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer module": [[161, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer module": [[162, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer module": [[163, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer module": [[164, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer module": [[165, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.olmo_transformer module": [[166, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer module": [[167, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer module": [[168, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer module": [[169, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer module": [[170, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer module": [[171, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity package": [[172, "sparknlp-annotator-similarity-package"]], "sparknlp.annotator.similarity.document_similarity_ranker module": [[173, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.spell_check package": [[174, "sparknlp-annotator-spell-check-package"]], "sparknlp.annotator.spell_check.context_spell_checker module": [[175, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check.norvig_sweeting module": [[176, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete module": [[177, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer module": [[178, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner module": [[179, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder module": [[180, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token package": [[181, "sparknlp-annotator-token-package"]], "sparknlp.annotator.token.chunk_tokenizer module": [[182, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token.recursive_tokenizer module": [[183, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer module": [[184, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer module": [[185, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk module": [[186, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws package": [[187, "sparknlp-annotator-ws-package"]], "sparknlp.annotator.ws.word_segmenter module": [[188, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base package": [[189, "sparknlp-base-package"]], "sparknlp.base.audio_assembler module": [[190, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk module": [[191, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler module": [[192, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher module": [[193, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher module": [[194, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher module": [[195, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit module": [[196, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform module": [[197, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler module": [[198, "module-sparknlp.base.image_assembler"]], "sparknlp.base.light_pipeline module": [[199, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler module": [[200, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler module": [[201, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline module": [[202, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler module": [[203, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler module": [[204, "module-sparknlp.base.token_assembler"]], "sparknlp.common package": [[205, "sparknlp-common-package"]], "sparknlp.common.annotator_approach module": [[206, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model module": [[207, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties module": [[208, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type module": [[209, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result module": [[210, "module-sparknlp.common.coverage_result"]], "sparknlp.common.match_strategy module": [[211, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties module": [[212, "module-sparknlp.common.properties"]], "sparknlp.common.read_as module": [[213, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach module": [[214, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage module": [[215, "module-sparknlp.common.storage"]], "sparknlp.common.utils module": [[216, "module-sparknlp.common.utils"]], "sparknlp.functions module": [[217, "module-sparknlp.functions"]], "sparknlp.internal package": [[218, "sparknlp-internal-package"]], "sparknlp.internal.annotator_java_ml module": [[219, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer module": [[220, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper module": [[221, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal.params_getters_setters module": [[222, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive module": [[223, "module-sparknlp.internal.recursive"]], "sparknlp.logging package": [[224, "sparknlp-logging-package"]], "sparknlp.logging.comet module": [[225, "module-sparknlp.logging.comet"]], "sparknlp.pretrained package": [[226, "sparknlp-pretrained-package"]], "sparknlp.pretrained.pretrained_pipeline module": [[227, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader module": [[228, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils module": [[229, "module-sparknlp.pretrained.utils"]], "sparknlp.reader package": [[230, "sparknlp-reader-package"]], "sparknlp.reader.enums module": [[231, "module-sparknlp.reader.enums"]], "sparknlp.reader.pdf_to_text module": [[232, "module-sparknlp.reader.pdf_to_text"]], "sparknlp.reader.sparknlp_reader module": [[233, "module-sparknlp.reader.sparknlp_reader"]], "sparknlp.training package": [[234, "sparknlp-training-package"]], "sparknlp.training.conll module": [[235, "module-sparknlp.training.conll"]], "sparknlp.training.conllu module": [[236, "module-sparknlp.training.conllu"]], "sparknlp.training.pos module": [[237, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator module": [[238, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation module": [[239, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs module": [[240, "sparknlp-training-tfgraphs-module"]], "sparknlp.upload_to_hub module": [[241, "module-sparknlp.upload_to_hub"]], "sparknlp.util module": [[242, "module-sparknlp.util"]], "Getting Started": [[243, "getting-started"]], "Spark NLP Cheat Sheet": [[243, "spark-nlp-cheat-sheet"]], "Requirements": [[243, "requirements"]], "Installation": [[243, "installation"], [246, "installation"]], "Using Conda": [[243, "using-conda"]], "Using Virtualenv": [[243, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[243, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[244, "spark-nlp-documentation"]], "Content": [[244, "content"]], "API Reference": [[245, "api-reference"]], "Modules": [[245, "modules"]], "Comet - A meta machine learning platform": [[246, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[246, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[246, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[246, "logging-evaluation-metrics"]], "Logging Visualizations": [[246, "logging-visualizations"]], "Running An Offline Experiment": [[246, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[247, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[248, "third-party-projects"]], "Logging": [[248, "logging"]], "Annotation": [[249, "annotation"]], "Annotators": [[250, "annotators"]], "Annotator Approaches": [[250, "annotator-approaches"]], "Annotator Models": [[250, "annotator-models"]], "Note": [[250, "note"]], "Pretrained Models": [[250, "pretrained-models"]], "Common Functions": [[250, "common-functions"]], "Available Annotators": [[250, "available-annotators"]], "Setting up your own pipeline": [[251, "setting-up-your-own-pipeline"]], "Annotator types": [[251, "annotator-types"]], "Necessary imports": [[251, "necessary-imports"]], "Constructing the Pipeline": [[251, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[251, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[251, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[251, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[251, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[252, "helper-functions"]], "User Guide": [[253, "user-guide"]], "Light Pipelines": [[254, "light-pipelines"]], "Converting PipelineModels": [[254, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[254, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[255, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[255, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[255, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[255, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[255, "available-pipelines"]], "Loading datasets for training": [[256, "loading-datasets-for-training"]], "POS Dataset": [[256, "pos-dataset"]], "CoNLL Dataset": [[256, "conll-dataset"]], "CoNLLU Dataset": [[256, "conllu-dataset"]], "Spell Checkers Dataset": [[256, "spell-checkers-dataset"]], "PubTator Dataset": [[256, "pubtator-dataset"]]}, "indexentries": {"module": [[1, "module-sparknlp"], [2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.hubert_for_ctc"], [8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [9, "module-sparknlp.annotator.audio.whisper_for_ctc"], [10, "module-sparknlp.annotator.chunk2_doc"], [11, "module-sparknlp.annotator.chunker"], [12, "module-sparknlp.annotator.classifier_dl"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [28, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [59, "module-sparknlp.annotator.cleaners"], [60, "module-sparknlp.annotator.cleaners.cleaner"], [61, "module-sparknlp.annotator.cleaners.extractor"], [62, "module-sparknlp.annotator.coref"], [63, "module-sparknlp.annotator.coref.spanbert_coref"], [64, "module-sparknlp.annotator.cv"], [65, "module-sparknlp.annotator.cv.blip_for_question_answering"], [66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [67, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [68, "module-sparknlp.annotator.cv.gemma3_for_multimodal"], [69, "module-sparknlp.annotator.cv.janus_for_multimodal"], [70, "module-sparknlp.annotator.cv.llava_for_multimodal"], [71, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [72, "module-sparknlp.annotator.cv.paligemma_for_multimodal"], [73, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [74, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [75, "module-sparknlp.annotator.cv.smolvlm_transformer"], [76, "module-sparknlp.annotator.cv.swin_for_image_classification"], [77, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [78, "module-sparknlp.annotator.cv.vit_for_image_classification"], [79, "module-sparknlp.annotator.date2_chunk"], [80, "module-sparknlp.annotator.dependency"], [81, "module-sparknlp.annotator.dependency.dependency_parser"], [82, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [83, "module-sparknlp.annotator.document_character_text_splitter"], [84, "module-sparknlp.annotator.document_normalizer"], [85, "module-sparknlp.annotator.document_token_splitter"], [87, "module-sparknlp.annotator.embeddings"], [88, "module-sparknlp.annotator.embeddings.albert_embeddings"], [89, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [90, "module-sparknlp.annotator.embeddings.bert_embeddings"], [91, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [92, "module-sparknlp.annotator.embeddings.bge_embeddings"], [93, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [94, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [95, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [96, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [97, "module-sparknlp.annotator.embeddings.doc2vec"], [98, "module-sparknlp.annotator.embeddings.e5_embeddings"], [99, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [100, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [101, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [102, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [103, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [104, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [105, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [106, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [107, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [108, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [109, "module-sparknlp.annotator.embeddings.uae_embeddings"], [110, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [111, "module-sparknlp.annotator.embeddings.word2vec"], [112, "module-sparknlp.annotator.embeddings.word_embeddings"], [113, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [114, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [115, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [116, "module-sparknlp.annotator.er"], [117, "module-sparknlp.annotator.er.entity_ruler"], [118, "module-sparknlp.annotator.graph_extraction"], [119, "module-sparknlp.annotator.keyword_extraction"], [120, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [121, "module-sparknlp.annotator.ld_dl"], [122, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [123, "module-sparknlp.annotator.lemmatizer"], [124, "module-sparknlp.annotator.matcher"], [125, "module-sparknlp.annotator.matcher.big_text_matcher"], [126, "module-sparknlp.annotator.matcher.date_matcher"], [127, "module-sparknlp.annotator.matcher.multi_date_matcher"], [128, "module-sparknlp.annotator.matcher.regex_matcher"], [129, "module-sparknlp.annotator.matcher.text_matcher"], [130, "module-sparknlp.annotator.n_gram_generator"], [131, "module-sparknlp.annotator.ner"], [132, "module-sparknlp.annotator.ner.ner_approach"], [133, "module-sparknlp.annotator.ner.ner_converter"], [134, "module-sparknlp.annotator.ner.ner_crf"], [135, "module-sparknlp.annotator.ner.ner_dl"], [136, "module-sparknlp.annotator.ner.ner_overwriter"], [137, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [138, "module-sparknlp.annotator.normalizer"], [139, "module-sparknlp.annotator.openai"], [140, "module-sparknlp.annotator.openai.openai_completion"], [141, "module-sparknlp.annotator.openai.openai_embeddings"], [142, "module-sparknlp.annotator.param"], [143, "module-sparknlp.annotator.param.classifier_encoder"], [144, "module-sparknlp.annotator.param.evaluation_dl_params"], [145, "module-sparknlp.annotator.pos"], [146, "module-sparknlp.annotator.pos.perceptron"], [147, "module-sparknlp.annotator.sentence"], [148, "module-sparknlp.annotator.sentence.sentence_detector"], [149, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [150, "module-sparknlp.annotator.sentiment"], [151, "module-sparknlp.annotator.sentiment.sentiment_detector"], [152, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [153, "module-sparknlp.annotator.seq2seq"], [154, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [155, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [156, "module-sparknlp.annotator.seq2seq.bart_transformer"], [157, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [158, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [159, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [160, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [161, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [162, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [163, "module-sparknlp.annotator.seq2seq.marian_transformer"], [164, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [165, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [166, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [167, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [168, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [169, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [170, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [171, "module-sparknlp.annotator.seq2seq.t5_transformer"], [172, "module-sparknlp.annotator.similarity"], [173, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [174, "module-sparknlp.annotator.spell_check"], [175, "module-sparknlp.annotator.spell_check.context_spell_checker"], [176, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [177, "module-sparknlp.annotator.spell_check.symmetric_delete"], [178, "module-sparknlp.annotator.stemmer"], [179, "module-sparknlp.annotator.stop_words_cleaner"], [180, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [181, "module-sparknlp.annotator.token"], [182, "module-sparknlp.annotator.token.chunk_tokenizer"], [183, "module-sparknlp.annotator.token.recursive_tokenizer"], [184, "module-sparknlp.annotator.token.regex_tokenizer"], [185, "module-sparknlp.annotator.token.tokenizer"], [186, "module-sparknlp.annotator.token2_chunk"], [187, "module-sparknlp.annotator.ws"], [188, "module-sparknlp.annotator.ws.word_segmenter"], [189, "module-sparknlp.base"], [190, "module-sparknlp.base.audio_assembler"], [191, "module-sparknlp.base.doc2_chunk"], [192, "module-sparknlp.base.document_assembler"], [193, "module-sparknlp.base.embeddings_finisher"], [194, "module-sparknlp.base.finisher"], [195, "module-sparknlp.base.graph_finisher"], [196, "module-sparknlp.base.has_recursive_fit"], [197, "module-sparknlp.base.has_recursive_transform"], [198, "module-sparknlp.base.image_assembler"], [199, "module-sparknlp.base.light_pipeline"], [200, "module-sparknlp.base.multi_document_assembler"], [201, "module-sparknlp.base.prompt_assembler"], [202, "module-sparknlp.base.recursive_pipeline"], [203, "module-sparknlp.base.table_assembler"], [204, "module-sparknlp.base.token_assembler"], [205, "module-sparknlp.common"], [206, "module-sparknlp.common.annotator_approach"], [207, "module-sparknlp.common.annotator_model"], [208, "module-sparknlp.common.annotator_properties"], [209, "module-sparknlp.common.annotator_type"], [210, "module-sparknlp.common.coverage_result"], [211, "module-sparknlp.common.match_strategy"], [212, "module-sparknlp.common.properties"], [213, "module-sparknlp.common.read_as"], [214, "module-sparknlp.common.recursive_annotator_approach"], [215, "module-sparknlp.common.storage"], [216, "module-sparknlp.common.utils"], [217, "module-sparknlp.functions"], [218, "module-sparknlp.internal"], [219, "module-sparknlp.internal.annotator_java_ml"], [220, "module-sparknlp.internal.annotator_transformer"], [221, "module-sparknlp.internal.extended_java_wrapper"], [222, "module-sparknlp.internal.params_getters_setters"], [223, "module-sparknlp.internal.recursive"], [224, "module-sparknlp.logging"], [225, "module-sparknlp.logging.comet"], [226, "module-sparknlp.pretrained"], [227, "module-sparknlp.pretrained.pretrained_pipeline"], [228, "module-sparknlp.pretrained.resource_downloader"], [229, "module-sparknlp.pretrained.utils"], [230, "module-sparknlp.reader"], [231, "module-sparknlp.reader.enums"], [232, "module-sparknlp.reader.pdf_to_text"], [233, "module-sparknlp.reader.sparknlp_reader"], [234, "module-sparknlp.training"], [235, "module-sparknlp.training.conll"], [236, "module-sparknlp.training.conllu"], [237, "module-sparknlp.training.pos"], [238, "module-sparknlp.training.pub_tator"], [239, "module-sparknlp.training.spacy_to_annotation"], [241, "module-sparknlp.upload_to_hub"], [242, "module-sparknlp.util"]], "read() (in module sparknlp)": [[1, "sparknlp.read"]], "sparknlp": [[1, "module-sparknlp"]], "start() (in module sparknlp)": [[1, "sparknlp.start"]], "version() (in module sparknlp)": [[1, "sparknlp.version"]], "annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator": [[5, "module-sparknlp.annotator"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "configprotobytes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.configProtoBytes"]], "inputannotatortypes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "name (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.name"]], "outputannotatortype (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.outputAnnotatorType"]], "pretrained() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "configprotobytes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.configProtoBytes"]], "inputannotatortypes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "name (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.name"]], "outputannotatortype (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.outputAnnotatorType"]], "pretrained() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "configprotobytes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.configProtoBytes"]], "getismultilingual() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "inputannotatortypes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.inputAnnotatorTypes"]], "ismultilingual (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.isMultilingual"]], "language (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.language"]], "loadsavedmodel() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "name (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.name"]], "outputannotatortype (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.outputAnnotatorType"]], "pretrained() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "inputannotatortypes (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.inputAnnotatorTypes"]], "name (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.name"]], "outputannotatortype (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.outputAnnotatorType"]], "setparams() (chunk2doc method)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.setParams"]], "sparknlp.annotator.chunk2_doc": [[10, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[11, "sparknlp.annotator.chunker.Chunker"]], "inputannotatortypes (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.inputAnnotatorTypes"]], "name (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.name"]], "outputannotatortype (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.outputAnnotatorType"]], "regexparsers (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.regexParsers"]], "setregexparsers() (chunker method)": [[11, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[11, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl": [[12, "module-sparknlp.annotator.classifier_dl"]], "albertformultiplechoice (class in sparknlp.annotator.classifier_dl.albert_for_multiple_choice)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice"]], "choicesdelimiter (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.loadSavedModel"]], "name (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.name"]], "outputannotatortype (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.outputAnnotatorType"]], "pretrained() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (albertformultiplechoice method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "coalescesentences (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.coalesceSentences"]], "configprotobytes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "name (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.name"]], "outputannotatortype (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "coalescesentences (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.coalesceSentences"]], "configprotobytes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.configProtoBytes"]], "getclasses() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "inputannotatortypes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "name (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.name"]], "outputannotatortype (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.outputAnnotatorType"]], "pretrained() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "configprotobytes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.configProtoBytes"]], "getclasses() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "inputannotatortypes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "name (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.name"]], "outputannotatortype (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.outputAnnotatorType"]], "pretrained() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "albertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"]], "coalescesentences (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.coalesceSentences"]], "configprotobytes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.configProtoBytes"]], "getclasses() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"]], "inputannotatortypes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"]], "name (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.name"]], "outputannotatortype (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"]], "setcoalescesentences() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "coalescesentences (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.coalesceSentences"]], "configprotobytes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.configProtoBytes"]], "getclasses() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "inputannotatortypes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "maxsentencelength (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.maxSentenceLength"]], "name (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.name"]], "outputannotatortype (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertformultiplechoice (class in sparknlp.annotator.classifier_dl.bert_for_multiple_choice)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"]], "choicesdelimiter (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"]], "name (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.name"]], "outputannotatortype (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.outputAnnotatorType"]], "pretrained() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (bertformultiplechoice method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "coalescesentences (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.coalesceSentences"]], "configprotobytes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "name (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.name"]], "outputannotatortype (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "coalescesentences (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.coalesceSentences"]], "configprotobytes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.configProtoBytes"]], "getclasses() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "inputannotatortypes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "name (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.name"]], "outputannotatortype (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.outputAnnotatorType"]], "pretrained() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "configprotobytes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.configProtoBytes"]], "getclasses() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "inputannotatortypes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "name (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.name"]], "outputannotatortype (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.outputAnnotatorType"]], "pretrained() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "coalescesentences (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.coalesceSentences"]], "configprotobytes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.configProtoBytes"]], "getclasses() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "inputannotatortypes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "name (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.name"]], "outputannotatortype (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "coalescesentences (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "name (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.name"]], "outputannotatortype (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "coalescesentences (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.coalesceSentences"]], "configprotobytes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.configProtoBytes"]], "getclasses() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "inputannotatortypes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "name (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.name"]], "outputannotatortype (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "configprotobytes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.configProtoBytes"]], "getclasses() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "inputannotatortypes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "name (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.name"]], "outputannotatortype (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.outputAnnotatorType"]], "pretrained() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "camembertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"]], "coalescesentences (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.configProtoBytes"]], "getclasses() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"]], "inputannotatortypes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"]], "name (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.name"]], "outputannotatortype (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "classes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.classes"]], "configprotobytes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.configProtoBytes"]], "dropout (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.dropout"]], "inputannotatortypes (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.inputAnnotatorTypes"]], "name (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.name"]], "outputannotatortype (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.outputAnnotatorType"]], "pretrained() (classifierdlmodel static method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "coalescesentences (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "name (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.name"]], "outputannotatortype (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "coalescesentences (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.configProtoBytes"]], "getclasses() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "inputannotatortypes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "name (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.name"]], "outputannotatortype (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "configprotobytes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.configProtoBytes"]], "getclasses() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "inputannotatortypes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "name (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.name"]], "outputannotatortype (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "coalescesentences (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "name (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.name"]], "outputannotatortype (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "coalescesentences (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "name (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.name"]], "outputannotatortype (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "coalescesentences (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "name (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.name"]], "outputannotatortype (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "configprotobytes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.configProtoBytes"]], "getclasses() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "inputannotatortypes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "name (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.name"]], "outputannotatortype (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.outputAnnotatorType"]], "pretrained() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "coalescesentences (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.configProtoBytes"]], "getclasses() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "inputannotatortypes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "name (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.name"]], "outputannotatortype (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "distilbertformultiplechoice (class in sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice"]], "choicesdelimiter (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.loadSavedModel"]], "name (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.name"]], "outputannotatortype (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.outputAnnotatorType"]], "pretrained() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (distilbertformultiplechoice method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "coalescesentences (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.coalesceSentences"]], "configprotobytes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "name (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.name"]], "outputannotatortype (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.outputAnnotatorType"]], "pretrained() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "coalescesentences (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.coalesceSentences"]], "configprotobytes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.configProtoBytes"]], "getclasses() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "inputannotatortypes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "name (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.name"]], "outputannotatortype (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.outputAnnotatorType"]], "pretrained() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "configprotobytes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.configProtoBytes"]], "getclasses() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "inputannotatortypes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "name (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.name"]], "outputannotatortype (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.outputAnnotatorType"]], "pretrained() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "inputannotatortypes (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "name (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.name"]], "outputannotatortype (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.outputAnnotatorType"]], "pretrained() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "coalescesentences (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.coalesceSentences"]], "getclasses() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "inputannotatortypes (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "name (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.name"]], "outputannotatortype (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.outputAnnotatorType"]], "pretrained() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "mpnetfortokenclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"]], "configprotobytes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.configProtoBytes"]], "getclasses() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"]], "inputannotatortypes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"]], "name (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.name"]], "outputannotatortype (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.outputAnnotatorType"]], "pretrained() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"]], "setconfigprotobytes() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "classes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.classes"]], "configprotobytes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.configProtoBytes"]], "inputannotatortypes (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.inputAnnotatorTypes"]], "name (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.name"]], "outputannotatortype (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.outputAnnotatorType"]], "pretrained() (multiclassifierdlmodel static method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setshuffleperepoch() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setShufflePerEpoch"]], "setthreshold() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "shuffleperepoch (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.shufflePerEpoch"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "threshold (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.threshold"]], "threshold (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.threshold"]], "robertaformultiplechoice (class in sparknlp.annotator.classifier_dl.roberta_for_multiple_choice)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice"]], "choicesdelimiter (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.loadSavedModel"]], "name (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.name"]], "outputannotatortype (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.pretrained"]], "setchoicesdelimiter() (robertaformultiplechoice method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "coalescesentences (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "name (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.name"]], "outputannotatortype (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "coalescesentences (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "name (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.name"]], "outputannotatortype (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "configprotobytes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.configProtoBytes"]], "getclasses() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "inputannotatortypes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "maxsentencelength (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.maxSentenceLength"]], "name (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.name"]], "outputannotatortype (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "coalescesentences (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.maxSentenceLength"]], "name (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.name"]], "outputannotatortype (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "classes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.classes"]], "configprotobytes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.configProtoBytes"]], "dropout (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.dropout"]], "inputannotatortypes (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.inputAnnotatorTypes"]], "name (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.name"]], "outputannotatortype (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.outputAnnotatorType"]], "outputannotatortype (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.outputAnnotatorType"]], "pretrained() (sentimentdlmodel static method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "threshold (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.threshold"]], "threshold (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.threshold"]], "thresholdlabel (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.thresholdLabel"]], "thresholdlabel (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.thresholdLabel"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "inputannotatortypes (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "name (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.name"]], "pretrained() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaformultiplechoice (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice"]], "inputannotatortypes (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.loadSavedModel"]], "name (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.name"]], "outputannotatortype (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "coalescesentences (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "name (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.name"]], "outputannotatortype (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "coalescesentences (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "name (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.name"]], "outputannotatortype (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "configprotobytes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.configProtoBytes"]], "getclasses() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "inputannotatortypes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "name (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.name"]], "outputannotatortype (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "coalescesentences (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.maxSentenceLength"]], "name (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.name"]], "outputannotatortype (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "coalescesentences (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.coalesceSentences"]], "configprotobytes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.configProtoBytes"]], "getclasses() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "inputannotatortypes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "name (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.name"]], "outputannotatortype (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "configprotobytes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.configProtoBytes"]], "getclasses() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "inputannotatortypes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "name (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.name"]], "outputannotatortype (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.outputAnnotatorType"]], "pretrained() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners": [[59, "module-sparknlp.annotator.cleaners"]], "cleaner (class in sparknlp.annotator.cleaners.cleaner)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner"]], "bullets (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.bullets"]], "cleanpostfixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPostfixPattern"]], "cleanprefixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPrefixPattern"]], "cleanermode (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanerMode"]], "dashes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.dashes"]], "encoding (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.encoding"]], "extrawhitespace (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.extraWhitespace"]], "ignorecase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.ignoreCase"]], "inputannotatortypes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.inputAnnotatorTypes"]], "lowercase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.lowercase"]], "name (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.name"]], "outputannotatortype (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.outputAnnotatorType"]], "setbullets() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setBullets"]], "setcleanpostfixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPostfixPattern"]], "setcleanprefixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPrefixPattern"]], "setcleanermode() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanerMode"]], "setdashes() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setDashes"]], "setencoding() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setEncoding"]], "setextrawhitespace() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setExtraWhitespace"]], "setignorecase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setIgnoreCase"]], "setlowercase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setLowercase"]], "setstrip() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setStrip"]], "settrailingpunctuation() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setTrailingPunctuation"]], "sparknlp.annotator.cleaners.cleaner": [[60, "module-sparknlp.annotator.cleaners.cleaner"]], "strip (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.strip"]], "trailingpunctuation (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.trailingPunctuation"]], "extractor (class in sparknlp.annotator.cleaners.extractor)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor"]], "emailaddress (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailAddress"]], "emaildatetimetzpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailDateTimeTzPattern"]], "extractormode (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.extractorMode"]], "imageurlpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.imageUrlPattern"]], "index (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.index"]], "inputannotatortypes (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.inputAnnotatorTypes"]], "ipaddressnamepattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressNamePattern"]], "ipaddresspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressPattern"]], "mapiidpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.mapiIdPattern"]], "name (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.name"]], "outputannotatortype (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.outputAnnotatorType"]], "setemailaddress() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailAddress"]], "setemaildatetimetzpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailDateTimeTzPattern"]], "setextractormode() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setExtractorMode"]], "setimageurlpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setImageUrlPattern"]], "setindex() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIndex"]], "setipaddressnamepattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressNamePattern"]], "setipaddresspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressPattern"]], "setmapiidpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setMapiIdPattern"]], "settextpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setTextPattern"]], "setusphonenumberspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setUsPhoneNumbersPattern"]], "sparknlp.annotator.cleaners.extractor": [[61, "module-sparknlp.annotator.cleaners.extractor"]], "textpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.textPattern"]], "usphonenumberspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[62, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "configprotobytes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.configProtoBytes"]], "inputannotatortypes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.inputAnnotatorTypes"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "maxsegmentlength (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.maxSegmentLength"]], "name (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.name"]], "outputannotatortype (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.outputAnnotatorType"]], "pretrained() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[63, "module-sparknlp.annotator.coref.spanbert_coref"]], "textgenre (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.textGenre"]], "sparknlp.annotator.cv": [[64, "module-sparknlp.annotator.cv"]], "blipforquestionanswering (class in sparknlp.annotator.cv.blip_for_question_answering)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering"]], "configprotobytes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.loadSavedModel"]], "maxsentencelength (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.maxSentenceLength"]], "name (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.name"]], "outputannotatortype (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.outputAnnotatorType"]], "pretrained() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.pretrained"]], "setmaxsentencesize() (blipforquestionanswering method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.setMaxSentenceSize"]], "sparknlp.annotator.cv.blip_for_question_answering": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "configprotobytes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.configProtoBytes"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "inputannotatortypes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "name (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.name"]], "outputannotatortype (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.outputAnnotatorType"]], "pretrained() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "configprotobytes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.configProtoBytes"]], "croppct (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.cropPct"]], "dorescale (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.doRescale"]], "getclasses() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "inputannotatortypes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "name (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.name"]], "outputannotatortype (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.outputAnnotatorType"]], "pretrained() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "rescalefactor (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.rescaleFactor"]], "setconfigprotobytes() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "gemma3formultimodal (class in sparknlp.annotator.cv.gemma3_for_multimodal)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal"]], "beamsize (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.beamSize"]], "configprotobytes (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.configProtoBytes"]], "dosample (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.doSample"]], "ignoretokenids (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.ignoreTokenIds"]], "inputannotatortypes (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (gemma3formultimodal static method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.loadSavedModel"]], "maxinputlength (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxInputLength"]], "maxoutputlength (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.maxOutputLength"]], "minoutputlength (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.minOutputLength"]], "name (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.name"]], "norepeatngramsize (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.noRepeatNgramSize"]], "outputannotatortype (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.outputAnnotatorType"]], "pretrained() (gemma3formultimodal static method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.pretrained"]], "repetitionpenalty (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.repetitionPenalty"]], "setbeamsize() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setBeamSize"]], "setconfigprotobytes() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setConfigProtoBytes"]], "setdosample() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setDoSample"]], "setignoretokenids() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setRepetitionPenalty"]], "settemperature() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTemperature"]], "settopk() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopK"]], "settopp() (gemma3formultimodal method)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.setTopP"]], "sparknlp.annotator.cv.gemma3_for_multimodal": [[68, "module-sparknlp.annotator.cv.gemma3_for_multimodal"]], "temperature (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.temperature"]], "topk (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topK"]], "topp (gemma3formultimodal attribute)": [[68, "sparknlp.annotator.cv.gemma3_for_multimodal.Gemma3ForMultiModal.topP"]], "janusformultimodal (class in sparknlp.annotator.cv.janus_for_multimodal)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal"]], "beamsize (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.beamSize"]], "configprotobytes (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.configProtoBytes"]], "dosample (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.doSample"]], "ignoretokenids (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.ignoreTokenIds"]], "imagegeneratemode (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.imageGenerateMode"]], "inputannotatortypes (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (janusformultimodal static method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.loadSavedModel"]], "maxoutputlength (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.maxOutputLength"]], "minoutputlength (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.minOutputLength"]], "name (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.name"]], "norepeatngramsize (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.noRepeatNgramSize"]], "numofparallelimages (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.numOfParallelImages"]], "outputannotatortype (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.outputAnnotatorType"]], "pretrained() (janusformultimodal static method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.pretrained"]], "repetitionpenalty (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.repetitionPenalty"]], "setbeamsize() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setBeamSize"]], "setconfigprotobytes() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setConfigProtoBytes"]], "setdosample() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setDoSample"]], "setignoretokenids() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setIgnoreTokenIds"]], "setimagegeneratemode() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setImageGenerateMode"]], "setmaxoutputlength() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNoRepeatNgramSize"]], "setnumofparallelimages() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNumOfParallelImages"]], "setrepetitionpenalty() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setRepetitionPenalty"]], "settemperature() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTemperature"]], "settopk() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopK"]], "settopp() (janusformultimodal method)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopP"]], "sparknlp.annotator.cv.janus_for_multimodal": [[69, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "temperature (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.temperature"]], "topk (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topK"]], "topp (janusformultimodal attribute)": [[69, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topP"]], "llavaformultimodal (class in sparknlp.annotator.cv.llava_for_multimodal)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal"]], "beamsize (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.beamSize"]], "configprotobytes (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.configProtoBytes"]], "dosample (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.doSample"]], "ignoretokenids (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.ignoreTokenIds"]], "inputannotatortypes (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (llavaformultimodal static method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.loadSavedModel"]], "maxoutputlength (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.maxOutputLength"]], "minoutputlength (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.minOutputLength"]], "name (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.name"]], "norepeatngramsize (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.noRepeatNgramSize"]], "outputannotatortype (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.outputAnnotatorType"]], "pretrained() (llavaformultimodal static method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.pretrained"]], "repetitionpenalty (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.repetitionPenalty"]], "setbeamsize() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setBeamSize"]], "setconfigprotobytes() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setConfigProtoBytes"]], "setdosample() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setDoSample"]], "setignoretokenids() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setRepetitionPenalty"]], "settemperature() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTemperature"]], "settopk() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopK"]], "settopp() (llavaformultimodal method)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[70, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "temperature (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.temperature"]], "topk (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topK"]], "topp (llavaformultimodal attribute)": [[70, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topP"]], "mllamaformultimodal (class in sparknlp.annotator.cv.mllama_for_multimodal)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal"]], "beamsize (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.beamSize"]], "configprotobytes (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.configProtoBytes"]], "dosample (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.doSample"]], "ignoretokenids (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.ignoreTokenIds"]], "inputannotatortypes (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.inputAnnotatorTypes"]], "loadsavedmodel() (mllamaformultimodal static method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.loadSavedModel"]], "maxoutputlength (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.maxOutputLength"]], "minoutputlength (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.minOutputLength"]], "name (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.name"]], "norepeatngramsize (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.noRepeatNgramSize"]], "outputannotatortype (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.outputAnnotatorType"]], "pretrained() (mllamaformultimodal static method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.pretrained"]], "repetitionpenalty (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.repetitionPenalty"]], "setbeamsize() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setBeamSize"]], "setconfigprotobytes() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setConfigProtoBytes"]], "setdosample() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setDoSample"]], "setignoretokenids() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setIgnoreTokenIds"]], "setmaxoutputlength() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxOutputLength"]], "setmaxsentencesize() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxSentenceSize"]], "setminoutputlength() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMinOutputLength"]], "setnorepeatngramsize() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setRepetitionPenalty"]], "settemperature() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTemperature"]], "settopk() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopK"]], "settopp() (mllamaformultimodal method)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[71, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "temperature (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.temperature"]], "topk (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topK"]], "topp (mllamaformultimodal attribute)": [[71, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topP"]], "paligemmaformultimodal (class in sparknlp.annotator.cv.paligemma_for_multimodal)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal"]], "beamsize (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.beamSize"]], "dosample (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.doSample"]], "ignoretokenids (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.ignoreTokenIds"]], "inputannotatortypes (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (paligemmaformultimodal static method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.loadSavedModel"]], "maxoutputlength (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.maxOutputLength"]], "minoutputlength (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.minOutputLength"]], "name (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.name"]], "norepeatngramsize (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.noRepeatNgramSize"]], "outputannotatortype (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.outputAnnotatorType"]], "pretrained() (paligemmaformultimodal static method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.pretrained"]], "repetitionpenalty (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.repetitionPenalty"]], "setbeamsize() (paligemmaformultimodal method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setBeamSize"]], "setdosample() (paligemmaformultimodal method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setDoSample"]], "setignoretokenids() (paligemmaformultimodal method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (paligemmaformultimodal method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (paligemmaformultimodal method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (paligemmaformultimodal method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (paligemmaformultimodal method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (paligemmaformultimodal method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setRepetitionPenalty"]], "settemperature() (paligemmaformultimodal method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTemperature"]], "settopk() (paligemmaformultimodal method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopK"]], "settopp() (paligemmaformultimodal method)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.setTopP"]], "sparknlp.annotator.cv.paligemma_for_multimodal": [[72, "module-sparknlp.annotator.cv.paligemma_for_multimodal"]], "temperature (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.temperature"]], "topk (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topK"]], "topp (paligemmaformultimodal attribute)": [[72, "sparknlp.annotator.cv.paligemma_for_multimodal.PaliGemmaForMultiModal.topP"]], "phi3vision (class in sparknlp.annotator.cv.phi3_vision_for_multimodal)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision"]], "beamsize (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.beamSize"]], "configprotobytes (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.configProtoBytes"]], "dosample (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.doSample"]], "ignoretokenids (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.ignoreTokenIds"]], "inputannotatortypes (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.inputAnnotatorTypes"]], "loadsavedmodel() (phi3vision static method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.loadSavedModel"]], "maxoutputlength (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.maxOutputLength"]], "minoutputlength (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.minOutputLength"]], "name (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.name"]], "norepeatngramsize (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.noRepeatNgramSize"]], "outputannotatortype (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.outputAnnotatorType"]], "pretrained() (phi3vision static method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.pretrained"]], "repetitionpenalty (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.repetitionPenalty"]], "setbeamsize() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setBeamSize"]], "setconfigprotobytes() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setConfigProtoBytes"]], "setdosample() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setDoSample"]], "setignoretokenids() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxOutputLength"]], "setmaxsentencesize() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxSentenceSize"]], "setminoutputlength() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMinOutputLength"]], "setnorepeatngramsize() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setRepetitionPenalty"]], "settemperature() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTemperature"]], "settopk() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopK"]], "settopp() (phi3vision method)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[73, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "temperature (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.temperature"]], "topk (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topK"]], "topp (phi3vision attribute)": [[73, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topP"]], "qwen2vltransformer (class in sparknlp.annotator.cv.qwen2vl_transformer)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer"]], "beamsize (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.beamSize"]], "configprotobytes (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.configProtoBytes"]], "dosample (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.doSample"]], "ignoretokenids (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.ignoreTokenIds"]], "inputannotatortypes (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwen2vltransformer static method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.loadSavedModel"]], "maxoutputlength (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.maxOutputLength"]], "minoutputlength (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.minOutputLength"]], "name (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.name"]], "norepeatngramsize (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.noRepeatNgramSize"]], "outputannotatortype (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.outputAnnotatorType"]], "pretrained() (qwen2vltransformer static method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.pretrained"]], "repetitionpenalty (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.repetitionPenalty"]], "setbeamsize() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setBeamSize"]], "setconfigprotobytes() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setConfigProtoBytes"]], "setdosample() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setDoSample"]], "setignoretokenids() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxOutputLength"]], "setmaxsentencesize() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxSentenceSize"]], "setminoutputlength() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setRepetitionPenalty"]], "settemperature() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTemperature"]], "settopk() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopK"]], "settopp() (qwen2vltransformer method)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[74, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "temperature (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.temperature"]], "topk (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topK"]], "topp (qwen2vltransformer attribute)": [[74, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topP"]], "smolvlmtransformer (class in sparknlp.annotator.cv.smolvlm_transformer)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer"]], "beamsize (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.beamSize"]], "doimagesplitting (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doImageSplitting"]], "dosample (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.doSample"]], "ignoretokenids (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.ignoreTokenIds"]], "imagetoken (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.imageToken"]], "inputannotatortypes (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (smolvlmtransformer static method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.loadSavedModel"]], "maximagesize (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxImageSize"]], "maxoutputlength (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.maxOutputLength"]], "minoutputlength (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.minOutputLength"]], "name (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.name"]], "norepeatngramsize (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.noRepeatNgramSize"]], "numvisiontokens (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.numVisionTokens"]], "outputannotatortype (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.outputAnnotatorType"]], "paddingconstant (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.paddingConstant"]], "patchsize (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.patchSize"]], "pretrained() (smolvlmtransformer static method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.pretrained"]], "repetitionpenalty (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.repetitionPenalty"]], "setbeamsize() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setBeamSize"]], "setconfigprotobytes() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setConfigProtoBytes"]], "setdoimagesplitting() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoImageSplitting"]], "setdosample() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setDoSample"]], "setignoretokenids() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setIgnoreTokenIds"]], "setimagetoken() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setImageToken"]], "setmaximagesize() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxImageSize"]], "setmaxoutputlength() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxOutputLength"]], "setmaxsentencesize() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMaxSentenceSize"]], "setminoutputlength() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNoRepeatNgramSize"]], "setnumvisiontokens() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setNumVisionTokens"]], "setpaddingconstant() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPaddingConstant"]], "setpatchsize() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setPatchSize"]], "setrepetitionpenalty() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setRepetitionPenalty"]], "setstoptokenids() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setStopTokenIds"]], "settemperature() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTemperature"]], "settopk() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopK"]], "settopp() (smolvlmtransformer method)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.setTopP"]], "sparknlp.annotator.cv.smolvlm_transformer": [[75, "module-sparknlp.annotator.cv.smolvlm_transformer"]], "stoptokenids (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.stopTokenIds"]], "temperature (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.temperature"]], "topk (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topK"]], "topp (smolvlmtransformer attribute)": [[75, "sparknlp.annotator.cv.smolvlm_transformer.SmolVLMTransformer.topP"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[76, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "configprotobytes (swinforimageclassification attribute)": [[76, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.configProtoBytes"]], "getclasses() (swinforimageclassification method)": [[76, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "inputannotatortypes (swinforimageclassification attribute)": [[76, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (swinforimageclassification static method)": [[76, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "name (swinforimageclassification attribute)": [[76, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.name"]], "outputannotatortype (swinforimageclassification attribute)": [[76, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.outputAnnotatorType"]], "pretrained() (swinforimageclassification static method)": [[76, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[76, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[76, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[77, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "configprotobytes (visionencoderdecoderforimagecaptioning attribute)": [[77, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.configProtoBytes"]], "inputannotatortypes (visionencoderdecoderforimagecaptioning attribute)": [[77, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.inputAnnotatorTypes"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[77, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "name (visionencoderdecoderforimagecaptioning attribute)": [[77, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.name"]], "outputannotatortype (visionencoderdecoderforimagecaptioning attribute)": [[77, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.outputAnnotatorType"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[77, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[77, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[77, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[78, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "configprotobytes (vitforimageclassification attribute)": [[78, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.configProtoBytes"]], "getclasses() (vitforimageclassification method)": [[78, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "inputannotatortypes (vitforimageclassification attribute)": [[78, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (vitforimageclassification static method)": [[78, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "name (vitforimageclassification attribute)": [[78, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.name"]], "outputannotatortype (vitforimageclassification attribute)": [[78, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.outputAnnotatorType"]], "pretrained() (vitforimageclassification static method)": [[78, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[78, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[78, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[79, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "entityname (date2chunk attribute)": [[79, "sparknlp.annotator.date2_chunk.Date2Chunk.entityName"]], "inputannotatortypes (date2chunk attribute)": [[79, "sparknlp.annotator.date2_chunk.Date2Chunk.inputAnnotatorTypes"]], "name (date2chunk attribute)": [[79, "sparknlp.annotator.date2_chunk.Date2Chunk.name"]], "outputannotatortype (date2chunk attribute)": [[79, "sparknlp.annotator.date2_chunk.Date2Chunk.outputAnnotatorType"]], "setentityname() (date2chunk method)": [[79, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[79, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency": [[80, "module-sparknlp.annotator.dependency"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "conllu (dependencyparserapproach attribute)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.conllU"]], "dependencytreebank (dependencyparserapproach attribute)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.dependencyTreeBank"]], "inputannotatortypes (dependencyparserapproach attribute)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (dependencyparsermodel attribute)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.inputAnnotatorTypes"]], "name (dependencyparsermodel attribute)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.name"]], "numberofiterations (dependencyparserapproach attribute)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.numberOfIterations"]], "outputannotatortype (dependencyparserapproach attribute)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (dependencyparsermodel attribute)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.outputAnnotatorType"]], "perceptron (dependencyparsermodel attribute)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.perceptron"]], "pretrained() (dependencyparsermodel static method)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[81, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[81, "module-sparknlp.annotator.dependency.dependency_parser"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "conll2009 (typeddependencyparserapproach attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conll2009"]], "conllformat (typeddependencyparsermodel attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.conllFormat"]], "conllu (typeddependencyparserapproach attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conllU"]], "inputannotatortypes (typeddependencyparserapproach attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (typeddependencyparsermodel attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.inputAnnotatorTypes"]], "name (typeddependencyparsermodel attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.name"]], "numberofiterations (typeddependencyparserapproach attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.numberOfIterations"]], "outputannotatortype (typeddependencyparserapproach attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (typeddependencyparsermodel attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.outputAnnotatorType"]], "pretrained() (typeddependencyparsermodel static method)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[82, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "traindependencypipe (typeddependencyparsermodel attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainDependencyPipe"]], "trainoptions (typeddependencyparsermodel attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainOptions"]], "trainparameters (typeddependencyparsermodel attribute)": [[82, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainParameters"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "chunkoverlap (documentcharactertextsplitter attribute)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkOverlap"]], "chunksize (documentcharactertextsplitter attribute)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkSize"]], "explodesplits (documentcharactertextsplitter attribute)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.explodeSplits"]], "inputannotatortypes (documentcharactertextsplitter attribute)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.inputAnnotatorTypes"]], "keepseparators (documentcharactertextsplitter attribute)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.keepSeparators"]], "outputannotatortype (documentcharactertextsplitter attribute)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.outputAnnotatorType"]], "patternsareregex (documentcharactertextsplitter attribute)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.patternsAreRegex"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[83, "module-sparknlp.annotator.document_character_text_splitter"]], "splitpatterns (documentcharactertextsplitter attribute)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.splitPatterns"]], "trimwhitespace (documentcharactertextsplitter attribute)": [[83, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.trimWhitespace"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "action (documentnormalizer attribute)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.action"]], "encoding (documentnormalizer attribute)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.encoding"]], "inputannotatortypes (documentnormalizer attribute)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.inputAnnotatorTypes"]], "lowercase (documentnormalizer attribute)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.lowercase"]], "outputannotatortype (documentnormalizer attribute)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.outputAnnotatorType"]], "patterns (documentnormalizer attribute)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.patterns"]], "policy (documentnormalizer attribute)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.policy"]], "replacement (documentnormalizer attribute)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.replacement"]], "setaction() (documentnormalizer method)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[84, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[84, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[85, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "explodesplits (documenttokensplitter attribute)": [[85, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.explodeSplits"]], "inputannotatortypes (documenttokensplitter attribute)": [[85, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.inputAnnotatorTypes"]], "numtokens (documenttokensplitter attribute)": [[85, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.numTokens"]], "outputannotatortype (documenttokensplitter attribute)": [[85, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.outputAnnotatorType"]], "setexplodesplits() (documenttokensplitter method)": [[85, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[85, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[85, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[85, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[85, "module-sparknlp.annotator.document_token_splitter"]], "tokenoverlap (documenttokensplitter attribute)": [[85, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.tokenOverlap"]], "trimwhitespace (documenttokensplitter attribute)": [[85, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.trimWhitespace"]], "sparknlp.annotator.embeddings": [[87, "module-sparknlp.annotator.embeddings"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[88, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "configprotobytes (albertembeddings attribute)": [[88, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.configProtoBytes"]], "inputannotatortypes (albertembeddings attribute)": [[88, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (albertembeddings static method)": [[88, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "name (albertembeddings attribute)": [[88, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.name"]], "outputannotatortype (albertembeddings attribute)": [[88, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.outputAnnotatorType"]], "pretrained() (albertembeddings static method)": [[88, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[88, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[88, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "autoggufembeddings (class in sparknlp.annotator.embeddings.auto_gguf_embeddings)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings"]], "defragmentationthreshold (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.defragmentationThreshold"]], "embedding (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.embedding"]], "flashattention (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.flashAttention"]], "getmetadata() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.getMetadata"]], "gpusplitmode (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.gpuSplitMode"]], "grpattnn (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnN"]], "grpattnw (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnW"]], "inputannotatortypes (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufembeddings static method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.loadSavedModel"]], "maingpu (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.mainGpu"]], "nbatch (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nBatch"]], "nchunks (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nChunks"]], "nctx (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nCtx"]], "ngpulayers (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nGpuLayers"]], "nsequences (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nSequences"]], "nthreads (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreads"]], "nthreadsbatch (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreadsBatch"]], "nubatch (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nUbatch"]], "name (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.name"]], "nokvoffload (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.noKvOffload"]], "numastrategy (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.numaStrategy"]], "outputannotatortype (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.outputAnnotatorType"]], "poolingtype (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.poolingType"]], "pretrained() (autoggufembeddings static method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.pretrained"]], "ropefreqbase (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqBase"]], "ropefreqscale (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqScale"]], "ropescalingtype (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeScalingType"]], "setdefragmentationthreshold() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setDefragmentationThreshold"]], "setflashattention() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setFlashAttention"]], "setgpusplitmode() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGpuSplitMode"]], "setgrpattnn() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnN"]], "setgrpattnw() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnW"]], "setmaingpu() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setMainGpu"]], "setnbatch() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNBatch"]], "setnchunks() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNChunks"]], "setnctx() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNCtx"]], "setngpulayers() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNGpuLayers"]], "setnparallel() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNParallel"]], "setnsequences() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNSequences"]], "setnthreads() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreads"]], "setnthreadsbatch() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreadsBatch"]], "setnubatch() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNUbatch"]], "setnokvoffload() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNoKvOffload"]], "setnumastrategy() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNumaStrategy"]], "setpoolingtype() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setPoolingType"]], "setropefreqbase() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqBase"]], "setropefreqscale() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqScale"]], "setropescalingtype() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeScalingType"]], "settensorsplit() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setTensorSplit"]], "setusemlock() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMlock"]], "setusemmap() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMmap"]], "setyarnattnfactor() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnAttnFactor"]], "setyarnbetafast() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaFast"]], "setyarnbetaslow() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaSlow"]], "setyarnextfactor() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnExtFactor"]], "setyarnorigctx() (autoggufembeddings method)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnOrigCtx"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[89, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "tensorsplit (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.tensorSplit"]], "usemlock (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMlock"]], "usemmap (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMmap"]], "yarnattnfactor (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnAttnFactor"]], "yarnbetafast (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaFast"]], "yarnbetaslow (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaSlow"]], "yarnextfactor (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnExtFactor"]], "yarnorigctx (autoggufembeddings attribute)": [[89, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnOrigCtx"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[90, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "configprotobytes (bertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.configProtoBytes"]], "inputannotatortypes (bertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bertembeddings static method)": [[90, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "name (bertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.name"]], "outputannotatortype (bertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.outputAnnotatorType"]], "pretrained() (bertembeddings static method)": [[90, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[90, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[90, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[91, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "configprotobytes (bertsentenceembeddings attribute)": [[91, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (bertsentenceembeddings attribute)": [[91, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.inputAnnotatorTypes"]], "islong (bertsentenceembeddings attribute)": [[91, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.isLong"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[91, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "name (bertsentenceembeddings attribute)": [[91, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.name"]], "outputannotatortype (bertsentenceembeddings attribute)": [[91, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentenceembeddings static method)": [[91, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[91, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[91, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[91, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[92, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "configprotobytes (bgeembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.configProtoBytes"]], "inputannotatortypes (bgeembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bgeembeddings static method)": [[92, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "name (bgeembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.name"]], "outputannotatortype (bgeembeddings attribute)": [[92, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.outputAnnotatorType"]], "pretrained() (bgeembeddings static method)": [[92, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[92, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[92, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[93, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "configprotobytes (camembertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.configProtoBytes"]], "inputannotatortypes (camembertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (camembertembeddings static method)": [[93, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "name (camembertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.name"]], "outputannotatortype (camembertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.outputAnnotatorType"]], "pretrained() (camembertembeddings static method)": [[93, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[93, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[93, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[94, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "inputannotatortypes (chunkembeddings attribute)": [[94, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.inputAnnotatorTypes"]], "name (chunkembeddings attribute)": [[94, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.name"]], "outputannotatortype (chunkembeddings attribute)": [[94, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.outputAnnotatorType"]], "poolingstrategy (chunkembeddings attribute)": [[94, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.poolingStrategy"]], "setpoolingstrategy() (chunkembeddings method)": [[94, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[94, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "skipoov (chunkembeddings attribute)": [[94, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.skipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[94, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[95, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "configprotobytes (debertaembeddings attribute)": [[95, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (debertaembeddings attribute)": [[95, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (debertaembeddings static method)": [[95, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "name (debertaembeddings attribute)": [[95, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.name"]], "outputannotatortype (debertaembeddings attribute)": [[95, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.outputAnnotatorType"]], "pretrained() (debertaembeddings static method)": [[95, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[95, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[95, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[96, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "configprotobytes (distilbertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.configProtoBytes"]], "inputannotatortypes (distilbertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertembeddings static method)": [[96, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "name (distilbertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.name"]], "outputannotatortype (distilbertembeddings attribute)": [[96, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.outputAnnotatorType"]], "pretrained() (distilbertembeddings static method)": [[96, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[96, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[96, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "inputannotatortypes (doc2vecapproach attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (doc2vecmodel attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.inputAnnotatorTypes"]], "maxiter (doc2vecapproach attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxIter"]], "maxsentencelength (doc2vecapproach attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxSentenceLength"]], "mincount (doc2vecapproach attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.minCount"]], "name (doc2vecmodel attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.name"]], "numpartitions (doc2vecapproach attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.numPartitions"]], "outputannotatortype (doc2vecapproach attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.outputAnnotatorType"]], "outputannotatortype (doc2vecmodel attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.outputAnnotatorType"]], "pretrained() (doc2vecmodel static method)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "seed (doc2vecapproach attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.seed"]], "setmaxiter() (doc2vecapproach method)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[97, "module-sparknlp.annotator.embeddings.doc2vec"]], "stepsize (doc2vecapproach attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.stepSize"]], "vectorsize (doc2vecapproach attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.vectorSize"]], "vectorsize (doc2vecmodel attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.vectorSize"]], "windowsize (doc2vecapproach attribute)": [[97, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.windowSize"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[98, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "configprotobytes (e5embeddings attribute)": [[98, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.configProtoBytes"]], "inputannotatortypes (e5embeddings attribute)": [[98, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.inputAnnotatorTypes"]], "loadsavedmodel() (e5embeddings static method)": [[98, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "name (e5embeddings attribute)": [[98, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.name"]], "outputannotatortype (e5embeddings attribute)": [[98, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.outputAnnotatorType"]], "pretrained() (e5embeddings static method)": [[98, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[98, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[98, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "batchsize (elmoembeddings attribute)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.batchSize"]], "configprotobytes (elmoembeddings attribute)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.configProtoBytes"]], "inputannotatortypes (elmoembeddings attribute)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (elmoembeddings static method)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "name (elmoembeddings attribute)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.name"]], "outputannotatortype (elmoembeddings attribute)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.outputAnnotatorType"]], "poolinglayer (elmoembeddings attribute)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.poolingLayer"]], "pretrained() (elmoembeddings static method)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[99, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[99, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[100, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "configprotobytes (instructorembeddings attribute)": [[100, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.configProtoBytes"]], "inputannotatortypes (instructorembeddings attribute)": [[100, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.inputAnnotatorTypes"]], "instruction (instructorembeddings attribute)": [[100, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.instruction"]], "loadsavedmodel() (instructorembeddings static method)": [[100, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "name (instructorembeddings attribute)": [[100, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.name"]], "outputannotatortype (instructorembeddings attribute)": [[100, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.outputAnnotatorType"]], "pretrained() (instructorembeddings static method)": [[100, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[100, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[100, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[100, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[101, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "configprotobytes (longformerembeddings attribute)": [[101, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.configProtoBytes"]], "inputannotatortypes (longformerembeddings attribute)": [[101, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (longformerembeddings static method)": [[101, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "name (longformerembeddings attribute)": [[101, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.name"]], "outputannotatortype (longformerembeddings attribute)": [[101, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.outputAnnotatorType"]], "pretrained() (longformerembeddings static method)": [[101, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[101, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[101, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[102, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "configprotobytes (mpnetembeddings attribute)": [[102, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.configProtoBytes"]], "inputannotatortypes (mpnetembeddings attribute)": [[102, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetembeddings static method)": [[102, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "name (mpnetembeddings attribute)": [[102, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.name"]], "outputannotatortype (mpnetembeddings attribute)": [[102, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.outputAnnotatorType"]], "pretrained() (mpnetembeddings static method)": [[102, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[102, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[102, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "mxbaiembeddings (class in sparknlp.annotator.embeddings.mxbai_embeddings)": [[103, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"]], "inputannotatortypes (mxbaiembeddings attribute)": [[103, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mxbaiembeddings static method)": [[103, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"]], "name (mxbaiembeddings attribute)": [[103, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.name"]], "outputannotatortype (mxbaiembeddings attribute)": [[103, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.outputAnnotatorType"]], "poolingstrategy (mxbaiembeddings attribute)": [[103, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.poolingStrategy"]], "pretrained() (mxbaiembeddings static method)": [[103, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"]], "setpoolingstrategy() (mxbaiembeddings method)": [[103, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[103, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "nomicembeddings (class in sparknlp.annotator.embeddings.nomic_embeddings)": [[104, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"]], "configprotobytes (nomicembeddings attribute)": [[104, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.configProtoBytes"]], "inputannotatortypes (nomicembeddings attribute)": [[104, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (nomicembeddings static method)": [[104, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"]], "name (nomicembeddings attribute)": [[104, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.name"]], "outputannotatortype (nomicembeddings attribute)": [[104, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.outputAnnotatorType"]], "pretrained() (nomicembeddings static method)": [[104, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"]], "setconfigprotobytes() (nomicembeddings method)": [[104, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[104, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[105, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "configprotobytes (robertaembeddings attribute)": [[105, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (robertaembeddings attribute)": [[105, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertaembeddings static method)": [[105, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "name (robertaembeddings attribute)": [[105, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.name"]], "outputannotatortype (robertaembeddings attribute)": [[105, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (robertaembeddings static method)": [[105, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[105, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[105, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[106, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "configprotobytes (robertasentenceembeddings attribute)": [[106, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (robertasentenceembeddings attribute)": [[106, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[106, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "name (robertasentenceembeddings attribute)": [[106, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.name"]], "outputannotatortype (robertasentenceembeddings attribute)": [[106, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (robertasentenceembeddings static method)": [[106, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[106, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[106, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[107, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "inputannotatortypes (sentenceembeddings attribute)": [[107, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.inputAnnotatorTypes"]], "name (sentenceembeddings attribute)": [[107, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.name"]], "outputannotatortype (sentenceembeddings attribute)": [[107, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.outputAnnotatorType"]], "poolingstrategy (sentenceembeddings attribute)": [[107, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.poolingStrategy"]], "setpoolingstrategy() (sentenceembeddings method)": [[107, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[107, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "snowflakeembeddings (class in sparknlp.annotator.embeddings.snowflake_embeddings)": [[108, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"]], "inputannotatortypes (snowflakeembeddings attribute)": [[108, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (snowflakeembeddings static method)": [[108, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"]], "name (snowflakeembeddings attribute)": [[108, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.name"]], "outputannotatortype (snowflakeembeddings attribute)": [[108, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.outputAnnotatorType"]], "poolingstrategy (snowflakeembeddings attribute)": [[108, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.poolingStrategy"]], "pretrained() (snowflakeembeddings static method)": [[108, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"]], "setpoolingstrategy() (snowflakeembeddings method)": [[108, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[108, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "uaeembeddings (class in sparknlp.annotator.embeddings.uae_embeddings)": [[109, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"]], "inputannotatortypes (uaeembeddings attribute)": [[109, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (uaeembeddings static method)": [[109, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"]], "name (uaeembeddings attribute)": [[109, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.name"]], "outputannotatortype (uaeembeddings attribute)": [[109, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.outputAnnotatorType"]], "poolingstrategy (uaeembeddings attribute)": [[109, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.poolingStrategy"]], "pretrained() (uaeembeddings static method)": [[109, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"]], "setpoolingstrategy() (uaeembeddings method)": [[109, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[109, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[110, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "configprotobytes (universalsentenceencoder attribute)": [[110, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.configProtoBytes"]], "inputannotatortypes (universalsentenceencoder attribute)": [[110, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.inputAnnotatorTypes"]], "loadsp (universalsentenceencoder attribute)": [[110, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSP"]], "loadsavedmodel() (universalsentenceencoder static method)": [[110, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "name (universalsentenceencoder attribute)": [[110, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.name"]], "outputannotatortype (universalsentenceencoder attribute)": [[110, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.outputAnnotatorType"]], "pretrained() (universalsentenceencoder static method)": [[110, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[110, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[110, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[110, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "inputannotatortypes (word2vecapproach attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (word2vecmodel attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.inputAnnotatorTypes"]], "maxiter (word2vecapproach attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxIter"]], "maxsentencelength (word2vecapproach attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxSentenceLength"]], "mincount (word2vecapproach attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.minCount"]], "name (word2vecmodel attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.name"]], "numpartitions (word2vecapproach attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.numPartitions"]], "outputannotatortype (word2vecapproach attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.outputAnnotatorType"]], "outputannotatortype (word2vecmodel attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.outputAnnotatorType"]], "pretrained() (word2vecmodel static method)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "seed (word2vecapproach attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.seed"]], "setmaxiter() (word2vecapproach method)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[111, "module-sparknlp.annotator.embeddings.word2vec"]], "stepsize (word2vecapproach attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.stepSize"]], "vectorsize (word2vecapproach attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.vectorSize"]], "vectorsize (word2vecmodel attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.vectorSize"]], "windowsize (word2vecapproach attribute)": [[111, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.windowSize"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "databases (wordembeddingsmodel attribute)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.databases"]], "inputannotatortypes (wordembeddings attribute)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.inputAnnotatorTypes"]], "inputannotatortypes (wordembeddingsmodel attribute)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.inputAnnotatorTypes"]], "loadstorage() (wordembeddingsmodel static method)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "name (wordembeddings attribute)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.name"]], "name (wordembeddingsmodel attribute)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.name"]], "outputannotatortype (wordembeddings attribute)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.outputAnnotatorType"]], "outputannotatortype (wordembeddingsmodel attribute)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.outputAnnotatorType"]], "overallcoverage() (wordembeddingsmodel static method)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "readcachesize (wordembeddings attribute)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.readCacheSize"]], "readcachesize (wordembeddingsmodel attribute)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.readCacheSize"]], "setreadcachesize() (wordembeddings method)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[112, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "writebuffersize (wordembeddings attribute)": [[112, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.writeBufferSize"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[113, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "configprotobytes (xlmrobertaembeddings attribute)": [[113, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertaembeddings attribute)": [[113, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[113, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "name (xlmrobertaembeddings attribute)": [[113, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.name"]], "outputannotatortype (xlmrobertaembeddings attribute)": [[113, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertaembeddings static method)": [[113, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[113, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[113, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[114, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "configprotobytes (xlmrobertasentenceembeddings attribute)": [[114, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertasentenceembeddings attribute)": [[114, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[114, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "name (xlmrobertasentenceembeddings attribute)": [[114, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.name"]], "outputannotatortype (xlmrobertasentenceembeddings attribute)": [[114, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[114, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[114, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[114, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[115, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "configprotobytes (xlnetembeddings attribute)": [[115, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.configProtoBytes"]], "inputannotatortypes (xlnetembeddings attribute)": [[115, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetembeddings static method)": [[115, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "name (xlnetembeddings attribute)": [[115, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.name"]], "outputannotatortype (xlnetembeddings attribute)": [[115, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.outputAnnotatorType"]], "pretrained() (xlnetembeddings static method)": [[115, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[115, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[115, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er": [[116, "module-sparknlp.annotator.er"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "alphabet (entityrulerapproach attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.alphabet"]], "database (entityrulermodel attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.database"]], "inputannotatortypes (entityrulerapproach attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.inputAnnotatorTypes"]], "inputannotatortypes (entityrulermodel attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.inputAnnotatorTypes"]], "loadstorage() (entityrulermodel static method)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.loadStorage"]], "name (entityrulerapproach attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.name"]], "name (entityrulermodel attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.name"]], "optionalinputannotatortypes (entityrulerapproach attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (entityrulermodel attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (entityrulerapproach attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.outputAnnotatorType"]], "outputannotatortype (entityrulermodel attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.outputAnnotatorType"]], "patternsresource (entityrulerapproach attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.patternsResource"]], "pretrained() (entityrulermodel static method)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.pretrained"]], "sentencematch (entityrulerapproach attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.sentenceMatch"]], "setalphabetresource() (entityrulerapproach method)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[117, "module-sparknlp.annotator.er.entity_ruler"]], "usestorage (entityrulerapproach attribute)": [[117, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.useStorage"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "delimiter (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.delimiter"]], "dependencyparsermodel (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.dependencyParserModel"]], "entitytypes (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.entityTypes"]], "explodeentities (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.explodeEntities"]], "includeedges (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.includeEdges"]], "inputannotatortypes (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.inputAnnotatorTypes"]], "maxsentencesize (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.maxSentenceSize"]], "mergeentities (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntities"]], "mergeentitiesiobformat (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntitiesIOBFormat"]], "minsentencesize (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.minSentenceSize"]], "name (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.name"]], "optionalinputannotatortypes (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.optionalInputAnnotatorTypes"]], "outputannotatortype (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.outputAnnotatorType"]], "posmodel (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.posModel"]], "relationshiptypes (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.relationshipTypes"]], "roottokens (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.rootTokens"]], "setdelimiter() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[118, "module-sparknlp.annotator.graph_extraction"]], "typeddependencyparsermodel (graphextraction attribute)": [[118, "sparknlp.annotator.graph_extraction.GraphExtraction.typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[119, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "inputannotatortypes (yakekeywordextraction attribute)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.inputAnnotatorTypes"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "maxngrams (yakekeywordextraction attribute)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.maxNGrams"]], "minngrams (yakekeywordextraction attribute)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.minNGrams"]], "nkeywords (yakekeywordextraction attribute)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.nKeywords"]], "name (yakekeywordextraction attribute)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.name"]], "outputannotatortype (yakekeywordextraction attribute)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.outputAnnotatorType"]], "setmaxngrams() (yakekeywordextraction method)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[120, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "stopwords (yakekeywordextraction attribute)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.stopWords"]], "threshold (yakekeywordextraction attribute)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.threshold"]], "windowsize (yakekeywordextraction attribute)": [[120, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.windowSize"]], "sparknlp.annotator.ld_dl": [[121, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "coalescesentences (languagedetectordl attribute)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.coalesceSentences"]], "configprotobytes (languagedetectordl attribute)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.configProtoBytes"]], "inputannotatortypes (languagedetectordl attribute)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.inputAnnotatorTypes"]], "languages (languagedetectordl attribute)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.languages"]], "name (languagedetectordl attribute)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.name"]], "outputannotatortype (languagedetectordl attribute)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.outputAnnotatorType"]], "pretrained() (languagedetectordl static method)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[122, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "threshold (languagedetectordl attribute)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.threshold"]], "thresholdlabel (languagedetectordl attribute)": [[122, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.thresholdLabel"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[123, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[123, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "dictionary (lemmatizer attribute)": [[123, "sparknlp.annotator.lemmatizer.Lemmatizer.dictionary"]], "formcol (lemmatizer attribute)": [[123, "sparknlp.annotator.lemmatizer.Lemmatizer.formCol"]], "inputannotatortypes (lemmatizer attribute)": [[123, "sparknlp.annotator.lemmatizer.Lemmatizer.inputAnnotatorTypes"]], "inputannotatortypes (lemmatizermodel attribute)": [[123, "sparknlp.annotator.lemmatizer.LemmatizerModel.inputAnnotatorTypes"]], "lemmacol (lemmatizer attribute)": [[123, "sparknlp.annotator.lemmatizer.Lemmatizer.lemmaCol"]], "name (lemmatizermodel attribute)": [[123, "sparknlp.annotator.lemmatizer.LemmatizerModel.name"]], "outputannotatortype (lemmatizer attribute)": [[123, "sparknlp.annotator.lemmatizer.Lemmatizer.outputAnnotatorType"]], "outputannotatortype (lemmatizermodel attribute)": [[123, "sparknlp.annotator.lemmatizer.LemmatizerModel.outputAnnotatorType"]], "pretrained() (lemmatizermodel static method)": [[123, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[123, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[123, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[123, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[123, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher": [[124, "module-sparknlp.annotator.matcher"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "casesensitive (bigtextmatcher attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.caseSensitive"]], "casesensitive (bigtextmatchermodel attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.caseSensitive"]], "databases (bigtextmatchermodel attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.databases"]], "entities (bigtextmatcher attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.entities"]], "inputannotatortypes (bigtextmatcher attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (bigtextmatchermodel attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.inputAnnotatorTypes"]], "loadstorage() (bigtextmatchermodel static method)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "mergeoverlapping (bigtextmatcher attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.mergeOverlapping"]], "mergeoverlapping (bigtextmatchermodel attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.mergeOverlapping"]], "name (bigtextmatchermodel attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.name"]], "outputannotatortype (bigtextmatcher attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.outputAnnotatorType"]], "outputannotatortype (bigtextmatchermodel attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.outputAnnotatorType"]], "pretrained() (bigtextmatchermodel static method)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "searchtrie (bigtextmatchermodel attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.searchTrie"]], "setcasesensitive() (bigtextmatcher method)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[125, "module-sparknlp.annotator.matcher.big_text_matcher"]], "tokenizer (bigtextmatcher attribute)": [[125, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.tokenizer"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "aggressivematching (datematcherutils attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.aggressiveMatching"]], "anchordateday (datematcherutils attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateDay"]], "anchordatemonth (datematcherutils attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateMonth"]], "anchordateyear (datematcherutils attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateYear"]], "defaultdaywhenmissing (datematcherutils attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.defaultDayWhenMissing"]], "inputannotatortypes (datematcher attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcher.inputAnnotatorTypes"]], "inputformats (datematcherutils attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.inputFormats"]], "name (datematcher attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcher.name"]], "outputannotatortype (datematcher attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcher.outputAnnotatorType"]], "outputformat (datematcherutils attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.outputFormat"]], "readmonthfirst (datematcherutils attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.readMonthFirst"]], "relaxedfactorystrategy (datematcherutils attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.relaxedFactoryStrategy"]], "setaggressivematching() (datematcherutils method)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"]], "setanchordateday() (datematcherutils method)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "setsourcelanguage() (datematcherutils method)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setSourceLanguage"]], "sourcelanguage (datematcherutils attribute)": [[126, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.sourceLanguage"]], "sparknlp.annotator.matcher.date_matcher": [[126, "module-sparknlp.annotator.matcher.date_matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[127, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "inputannotatortypes (multidatematcher attribute)": [[127, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.inputAnnotatorTypes"]], "name (multidatematcher attribute)": [[127, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.name"]], "outputannotatortype (multidatematcher attribute)": [[127, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.outputAnnotatorType"]], "sparknlp.annotator.matcher.multi_date_matcher": [[127, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "delimiter (regexmatcher attribute)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.delimiter"]], "externalrules (regexmatcher attribute)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.externalRules"]], "inputannotatortypes (regexmatcher attribute)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.inputAnnotatorTypes"]], "inputannotatortypes (regexmatchermodel attribute)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.inputAnnotatorTypes"]], "name (regexmatchermodel attribute)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.name"]], "outputannotatortype (regexmatcher attribute)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.outputAnnotatorType"]], "outputannotatortype (regexmatchermodel attribute)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.outputAnnotatorType"]], "rules (regexmatcher attribute)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.rules"]], "setdelimiter() (regexmatcher method)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[128, "module-sparknlp.annotator.matcher.regex_matcher"]], "strategy (regexmatcher attribute)": [[128, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.strategy"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "buildfromtokens (textmatcher attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.buildFromTokens"]], "buildfromtokens (textmatchermodel attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.buildFromTokens"]], "casesensitive (textmatcher attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.caseSensitive"]], "entities (textmatcher attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entities"]], "entityvalue (textmatcher attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entityValue"]], "entityvalue (textmatchermodel attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.entityValue"]], "inputannotatortypes (textmatcher attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (textmatchermodel attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.inputAnnotatorTypes"]], "mergeoverlapping (textmatcher attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.mergeOverlapping"]], "mergeoverlapping (textmatchermodel attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.mergeOverlapping"]], "name (textmatchermodel attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.name"]], "outputannotatortype (textmatcher attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.outputAnnotatorType"]], "outputannotatortype (textmatchermodel attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.outputAnnotatorType"]], "pretrained() (textmatchermodel static method)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "searchtrie (textmatchermodel attribute)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.searchTrie"]], "setbuildfromtokens() (textmatcher method)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[129, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[129, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[130, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "delimiter (ngramgenerator attribute)": [[130, "sparknlp.annotator.n_gram_generator.NGramGenerator.delimiter"]], "enablecumulative (ngramgenerator attribute)": [[130, "sparknlp.annotator.n_gram_generator.NGramGenerator.enableCumulative"]], "inputannotatortypes (ngramgenerator attribute)": [[130, "sparknlp.annotator.n_gram_generator.NGramGenerator.inputAnnotatorTypes"]], "n (ngramgenerator attribute)": [[130, "sparknlp.annotator.n_gram_generator.NGramGenerator.n"]], "name (ngramgenerator attribute)": [[130, "sparknlp.annotator.n_gram_generator.NGramGenerator.name"]], "outputannotatortype (ngramgenerator attribute)": [[130, "sparknlp.annotator.n_gram_generator.NGramGenerator.outputAnnotatorType"]], "setdelimiter() (ngramgenerator method)": [[130, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[130, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[130, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[130, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[131, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "entities (nerapproach attribute)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach.entities"]], "getlabelcolumn() (nerapproach method)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "labelcolumn (nerapproach attribute)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach.labelColumn"]], "maxepochs (nerapproach attribute)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach.maxEpochs"]], "minepochs (nerapproach attribute)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach.minEpochs"]], "randomseed (nerapproach attribute)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach.randomSeed"]], "setentities() (nerapproach method)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[132, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[132, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[133, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "inputannotatortypes (nerconverter attribute)": [[133, "sparknlp.annotator.ner.ner_converter.NerConverter.inputAnnotatorTypes"]], "name (nerconverter attribute)": [[133, "sparknlp.annotator.ner.ner_converter.NerConverter.name"]], "nerhasnoschema (nerconverter attribute)": [[133, "sparknlp.annotator.ner.ner_converter.NerConverter.nerHasNoSchema"]], "outputannotatortype (nerconverter attribute)": [[133, "sparknlp.annotator.ner.ner_converter.NerConverter.outputAnnotatorType"]], "preserveposition (nerconverter attribute)": [[133, "sparknlp.annotator.ner.ner_converter.NerConverter.preservePosition"]], "setnerhasnoschema() (nerconverter method)": [[133, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[133, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[133, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[133, "module-sparknlp.annotator.ner.ner_converter"]], "whitelist (nerconverter attribute)": [[133, "sparknlp.annotator.ner.ner_converter.NerConverter.whiteList"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "c0 (nercrfapproach attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.c0"]], "externalfeatures (nercrfapproach attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.externalFeatures"]], "includeconfidence (nercrfapproach attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.includeConfidence"]], "includeconfidence (nercrfmodel attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfModel.includeConfidence"]], "inputannotatortypes (nercrfapproach attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.inputAnnotatorTypes"]], "inputannotatortypes (nercrfmodel attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfModel.inputAnnotatorTypes"]], "l2 (nercrfapproach attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.l2"]], "losseps (nercrfapproach attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.lossEps"]], "minw (nercrfapproach attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.minW"]], "name (nercrfmodel attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfModel.name"]], "outputannotatortype (nercrfapproach attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.outputAnnotatorType"]], "outputannotatortype (nercrfmodel attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfModel.outputAnnotatorType"]], "pretrained() (nercrfmodel static method)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[134, "module-sparknlp.annotator.ner.ner_crf"]], "verbose (nercrfapproach attribute)": [[134, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.verbose"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "batchsize (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.batchSize"]], "bestmodelmetric (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.bestModelMetric"]], "classes (nerdlmodel attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel.classes"]], "configprotobytes (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.configProtoBytes"]], "configprotobytes (nerdlmodel attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel.configProtoBytes"]], "dropout (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.dropout"]], "enablememoryoptimizer (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.enableMemoryOptimizer"]], "graphfolder (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.graphFolder"]], "includeallconfidencescores (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeAllConfidenceScores"]], "includeallconfidencescores (nerdlmodel attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeAllConfidenceScores"]], "includeconfidence (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeConfidence"]], "includeconfidence (nerdlmodel attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeConfidence"]], "inputannotatortypes (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (nerdlmodel attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel.inputAnnotatorTypes"]], "lr (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.lr"]], "name (nerdlmodel attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel.name"]], "outputannotatortype (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.outputAnnotatorType"]], "outputannotatortype (nerdlmodel attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel.outputAnnotatorType"]], "po (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.po"]], "pretrained() (nerdlmodel static method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[135, "module-sparknlp.annotator.ner.ner_dl"]], "usebestmodel (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useBestModel"]], "usecontrib (nerdlapproach attribute)": [[135, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useContrib"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[136, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "inputannotatortypes (neroverwriter attribute)": [[136, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.inputAnnotatorTypes"]], "name (neroverwriter attribute)": [[136, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.name"]], "nerwords (neroverwriter attribute)": [[136, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.nerWords"]], "newnerentity (neroverwriter attribute)": [[136, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.newNerEntity"]], "outputannotatortype (neroverwriter attribute)": [[136, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.outputAnnotatorType"]], "replaceentities (neroverwriter attribute)": [[136, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.replaceEntities"]], "setnerwords() (neroverwriter method)": [[136, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[136, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[136, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[136, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[137, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[137, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[137, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[137, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[137, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[137, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[137, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[137, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[137, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[137, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[137, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[137, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[138, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[138, "sparknlp.annotator.normalizer.NormalizerModel"]], "cleanuppatterns (normalizer attribute)": [[138, "sparknlp.annotator.normalizer.Normalizer.cleanupPatterns"]], "cleanuppatterns (normalizermodel attribute)": [[138, "sparknlp.annotator.normalizer.NormalizerModel.cleanupPatterns"]], "inputannotatortypes (normalizer attribute)": [[138, "sparknlp.annotator.normalizer.Normalizer.inputAnnotatorTypes"]], "inputannotatortypes (normalizermodel attribute)": [[138, "sparknlp.annotator.normalizer.NormalizerModel.inputAnnotatorTypes"]], "lowercase (normalizer attribute)": [[138, "sparknlp.annotator.normalizer.Normalizer.lowercase"]], "lowercase (normalizermodel attribute)": [[138, "sparknlp.annotator.normalizer.NormalizerModel.lowercase"]], "maxlength (normalizer attribute)": [[138, "sparknlp.annotator.normalizer.Normalizer.maxLength"]], "minlength (normalizer attribute)": [[138, "sparknlp.annotator.normalizer.Normalizer.minLength"]], "name (normalizermodel attribute)": [[138, "sparknlp.annotator.normalizer.NormalizerModel.name"]], "outputannotatortype (normalizer attribute)": [[138, "sparknlp.annotator.normalizer.Normalizer.outputAnnotatorType"]], "outputannotatortype (normalizermodel attribute)": [[138, "sparknlp.annotator.normalizer.NormalizerModel.outputAnnotatorType"]], "setcleanuppatterns() (normalizer method)": [[138, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[138, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[138, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[138, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[138, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "slangdictionary (normalizer attribute)": [[138, "sparknlp.annotator.normalizer.Normalizer.slangDictionary"]], "slangmatchcase (normalizer attribute)": [[138, "sparknlp.annotator.normalizer.Normalizer.slangMatchCase"]], "slangmatchcase (normalizermodel attribute)": [[138, "sparknlp.annotator.normalizer.NormalizerModel.slangMatchCase"]], "sparknlp.annotator.normalizer": [[138, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[139, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "bestof (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.bestOf"]], "echo (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.echo"]], "frequencypenalty (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.frequencyPenalty"]], "inputannotatortypes (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.inputAnnotatorTypes"]], "logitbias (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logitBias"]], "logprobs (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logprobs"]], "maxtokens (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.maxTokens"]], "model (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.model"]], "name (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.name"]], "numberofcompletions (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.numberOfCompletions"]], "outputannotatortype (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.outputAnnotatorType"]], "presencepenalty (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.presencePenalty"]], "setbestof() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[140, "module-sparknlp.annotator.openai.openai_completion"]], "stop (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.stop"]], "suffix (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.suffix"]], "temperature (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.temperature"]], "topp (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.topP"]], "user (openaicompletion attribute)": [[140, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.user"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[141, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "inputannotatortypes (openaiembeddings attribute)": [[141, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.inputAnnotatorTypes"]], "model (openaiembeddings attribute)": [[141, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.model"]], "name (openaiembeddings attribute)": [[141, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.name"]], "outputannotatortype (openaiembeddings attribute)": [[141, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.outputAnnotatorType"]], "setmodel() (openaiembeddings method)": [[141, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[141, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[141, "module-sparknlp.annotator.openai.openai_embeddings"]], "user (openaiembeddings attribute)": [[141, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.user"]], "sparknlp.annotator.param": [[142, "module-sparknlp.annotator.param"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "batchsize (classifierencoder attribute)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.batchSize"]], "configprotobytes (classifierencoder attribute)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.configProtoBytes"]], "labelcolumn (classifierencoder attribute)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.labelColumn"]], "lr (classifierencoder attribute)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.lr"]], "maxepochs (classifierencoder attribute)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.maxEpochs"]], "randomseed (classifierencoder attribute)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.randomSeed"]], "setbatchsize() (classifierencoder method)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[143, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[143, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "enableoutputlogs (evaluationdlparams attribute)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.enableOutputLogs"]], "evaluationlogextended (evaluationdlparams attribute)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.evaluationLogExtended"]], "outputlogspath (evaluationdlparams attribute)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.outputLogsPath"]], "setenableoutputlogs() (evaluationdlparams method)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[144, "module-sparknlp.annotator.param.evaluation_dl_params"]], "testdataset (evaluationdlparams attribute)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.testDataset"]], "validationsplit (evaluationdlparams attribute)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.validationSplit"]], "verbose (evaluationdlparams attribute)": [[144, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.verbose"]], "sparknlp.annotator.pos": [[145, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "inputannotatortypes (perceptronapproach attribute)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronApproach.inputAnnotatorTypes"]], "inputannotatortypes (perceptronmodel attribute)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronModel.inputAnnotatorTypes"]], "niterations (perceptronapproach attribute)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronApproach.nIterations"]], "name (perceptronmodel attribute)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronModel.name"]], "outputannotatortype (perceptronapproach attribute)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronApproach.outputAnnotatorType"]], "outputannotatortype (perceptronmodel attribute)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronModel.outputAnnotatorType"]], "poscol (perceptronapproach attribute)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronApproach.posCol"]], "pretrained() (perceptronmodel static method)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[146, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[146, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[147, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "custombounds (sentencedetectorparams attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBounds"]], "customboundsstrategy (sentencedetectorparams attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBoundsStrategy"]], "detectlists (sentencedetector attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.detectLists"]], "explodesentences (sentencedetectorparams attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.explodeSentences"]], "inputannotatortypes (sentencedetector attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.inputAnnotatorTypes"]], "maxlength (sentencedetectorparams attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.maxLength"]], "minlength (sentencedetectorparams attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.minLength"]], "name (sentencedetector attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.name"]], "outputannotatortype (sentencedetector attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.outputAnnotatorType"]], "setcustombounds() (sentencedetector method)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[148, "module-sparknlp.annotator.sentence.sentence_detector"]], "splitlength (sentencedetectorparams attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.splitLength"]], "useabbreviations (sentencedetectorparams attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useAbbreviations"]], "usecustomboundsonly (sentencedetectorparams attribute)": [[148, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useCustomBoundsOnly"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "custombounds (sentencedetectordlmodel attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.customBounds"]], "epochsnumber (sentencedetectordlapproach attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.epochsNumber"]], "explodesentences (sentencedetectordlapproach attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.explodeSentences"]], "explodesentences (sentencedetectordlmodel attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.explodeSentences"]], "impossiblepenultimates (sentencedetectordlapproach attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.impossiblePenultimates"]], "impossiblepenultimates (sentencedetectordlmodel attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.impossiblePenultimates"]], "inputannotatortypes (sentencedetectordlapproach attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentencedetectordlmodel attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.inputAnnotatorTypes"]], "maxlength (sentencedetectordlmodel attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.maxLength"]], "minlength (sentencedetectordlmodel attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.minLength"]], "modelarchitecture (sentencedetectordlapproach attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.modelArchitecture"]], "modelarchitecture (sentencedetectordlmodel attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.modelArchitecture"]], "name (sentencedetectordlapproach attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.name"]], "name (sentencedetectordlmodel attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.name"]], "outputannotatortype (sentencedetectordlapproach attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputAnnotatorType"]], "outputannotatortype (sentencedetectordlmodel attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.outputAnnotatorType"]], "outputlogspath (sentencedetectordlapproach attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputLogsPath"]], "pretrained() (sentencedetectordlmodel static method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[149, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "splitlength (sentencedetectordlmodel attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.splitLength"]], "usecustomboundsonly (sentencedetectordlmodel attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.useCustomBoundsOnly"]], "validationsplit (sentencedetectordlapproach attribute)": [[149, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.validationSplit"]], "sparknlp.annotator.sentiment": [[150, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "decrementmultiplier (sentimentdetector attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.decrementMultiplier"]], "dictionary (sentimentdetector attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.dictionary"]], "enablescore (sentimentdetector attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.enableScore"]], "incrementmultiplier (sentimentdetector attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.incrementMultiplier"]], "inputannotatortypes (sentimentdetector attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdetectormodel attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.inputAnnotatorTypes"]], "name (sentimentdetectormodel attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.name"]], "negativemultiplier (sentimentdetector attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.negativeMultiplier"]], "outputannotatortype (sentimentdetector attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.outputAnnotatorType"]], "outputannotatortype (sentimentdetectormodel attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.outputAnnotatorType"]], "positivemultiplier (sentimentdetector attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.positiveMultiplier"]], "positivemultiplier (sentimentdetectormodel attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.positiveMultiplier"]], "reversemultiplier (sentimentdetector attribute)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.reverseMultiplier"]], "setdictionary() (sentimentdetector method)": [[151, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[151, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "featurelimit (viveknsentimentapproach attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.featureLimit"]], "featurelimit (viveknsentimentmodel attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.featureLimit"]], "importantfeatureratio (viveknsentimentapproach attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.importantFeatureRatio"]], "importantfeatureratio (viveknsentimentmodel attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.importantFeatureRatio"]], "inputannotatortypes (viveknsentimentapproach attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.inputAnnotatorTypes"]], "inputannotatortypes (viveknsentimentmodel attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.inputAnnotatorTypes"]], "name (viveknsentimentmodel attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.name"]], "outputannotatortype (viveknsentimentapproach attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.outputAnnotatorType"]], "outputannotatortype (viveknsentimentmodel attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.outputAnnotatorType"]], "pretrained() (viveknsentimentmodel static method)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "prunecorpus (viveknsentimentapproach attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.pruneCorpus"]], "sentimentcol (viveknsentimentapproach attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.sentimentCol"]], "setprunecorpus() (viveknsentimentapproach method)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[152, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "unimportantfeaturestep (viveknsentimentapproach attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.unimportantFeatureStep"]], "unimportantfeaturestep (viveknsentimentmodel attribute)": [[152, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[153, "module-sparknlp.annotator.seq2seq"]], "autoggufmodel (class in sparknlp.annotator.seq2seq.auto_gguf_model)": [[154, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"]], "inputannotatortypes (autoggufmodel attribute)": [[154, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufmodel static method)": [[154, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"]], "name (autoggufmodel attribute)": [[154, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.name"]], "outputannotatortype (autoggufmodel attribute)": [[154, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.outputAnnotatorType"]], "pretrained() (autoggufmodel static method)": [[154, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[154, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "autoggufvisionmodel (class in sparknlp.annotator.seq2seq.auto_gguf_vision_model)": [[155, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel"]], "inputannotatortypes (autoggufvisionmodel attribute)": [[155, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufvisionmodel static method)": [[155, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.loadSavedModel"]], "name (autoggufvisionmodel attribute)": [[155, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.name"]], "outputannotatortype (autoggufvisionmodel attribute)": [[155, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.outputAnnotatorType"]], "pretrained() (autoggufvisionmodel static method)": [[155, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[155, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "beamsize (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.beamSize"]], "configprotobytes (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.configProtoBytes"]], "dosample (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.doSample"]], "ignoretokenids (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.ignoreTokenIds"]], "inputannotatortypes (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (barttransformer static method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "maxoutputlength (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.maxOutputLength"]], "minoutputlength (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.minOutputLength"]], "name (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.name"]], "norepeatngramsize (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.noRepeatNgramSize"]], "outputannotatortype (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.outputAnnotatorType"]], "pretrained() (barttransformer static method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "repetitionpenalty (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.repetitionPenalty"]], "setbeamsize() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[156, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "task (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.task"]], "temperature (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.temperature"]], "topk (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topK"]], "topp (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topP"]], "usecache (barttransformer attribute)": [[156, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.useCache"]], "coheretransformer (class in sparknlp.annotator.seq2seq.cohere_transformer)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer"]], "beamsize (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.beamSize"]], "configprotobytes (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.configProtoBytes"]], "dosample (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.doSample"]], "ignoretokenids (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.ignoreTokenIds"]], "inputannotatortypes (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (coheretransformer static method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.loadSavedModel"]], "maxoutputlength (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.maxOutputLength"]], "minoutputlength (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.minOutputLength"]], "name (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.name"]], "norepeatngramsize (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.noRepeatNgramSize"]], "outputannotatortype (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.outputAnnotatorType"]], "pretrained() (coheretransformer static method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.pretrained"]], "repetitionpenalty (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.repetitionPenalty"]], "setbeamsize() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setBeamSize"]], "setconfigprotobytes() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setConfigProtoBytes"]], "setdosample() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setDoSample"]], "setignoretokenids() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMaxOutputLength"]], "setminoutputlength() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMinOutputLength"]], "setnorepeatngramsize() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setRepetitionPenalty"]], "setstoptokenids() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setStopTokenIds"]], "settemperature() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTemperature"]], "settopk() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopK"]], "settopp() (coheretransformer method)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[157, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "stoptokenids (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.stopTokenIds"]], "temperature (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.temperature"]], "topk (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topK"]], "topp (coheretransformer attribute)": [[157, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topP"]], "cpmtransformer (class in sparknlp.annotator.seq2seq.cpm_transformer)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"]], "configprotobytes (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.configProtoBytes"]], "dosample (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.doSample"]], "ignoretokenids (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.ignoreTokenIds"]], "inputannotatortypes (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (cpmtransformer static method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"]], "maxoutputlength (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.maxOutputLength"]], "minoutputlength (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.minOutputLength"]], "name (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.name"]], "norepeatngramsize (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.noRepeatNgramSize"]], "outputannotatortype (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.outputAnnotatorType"]], "pretrained() (cpmtransformer static method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"]], "repetitionpenalty (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.repetitionPenalty"]], "setconfigprotobytes() (cpmtransformer method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"]], "setdosample() (cpmtransformer method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"]], "setignoretokenids() (cpmtransformer method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (cpmtransformer method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"]], "setminoutputlength() (cpmtransformer method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (cpmtransformer method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (cpmtransformer method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"]], "settemperature() (cpmtransformer method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"]], "settopk() (cpmtransformer method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"]], "settopp() (cpmtransformer method)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[158, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "temperature (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.temperature"]], "topk (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topK"]], "topp (cpmtransformer attribute)": [[158, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topP"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "configprotobytes (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.configProtoBytes"]], "dosample (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.doSample"]], "ignoretokenids (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.ignoreTokenIds"]], "inputannotatortypes (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (gpt2transformer static method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "maxoutputlength (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.maxOutputLength"]], "minoutputlength (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.minOutputLength"]], "name (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.name"]], "norepeatngramsize (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.noRepeatNgramSize"]], "outputannotatortype (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.outputAnnotatorType"]], "pretrained() (gpt2transformer static method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "repetitionpenalty (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.repetitionPenalty"]], "setconfigprotobytes() (gpt2transformer method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[159, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "task (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.task"]], "temperature (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.temperature"]], "topk (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topK"]], "topp (gpt2transformer attribute)": [[159, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topP"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "configprotobytes (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.configProtoBytes"]], "dosample (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.doSample"]], "ignoretokenids (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.ignoreTokenIds"]], "inputannotatortypes (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama2transformer static method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "maxoutputlength (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.maxOutputLength"]], "minoutputlength (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.minOutputLength"]], "name (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.name"]], "norepeatngramsize (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.noRepeatNgramSize"]], "outputannotatortype (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.outputAnnotatorType"]], "pretrained() (llama2transformer static method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "repetitionpenalty (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.repetitionPenalty"]], "setconfigprotobytes() (llama2transformer method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[160, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "temperature (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.temperature"]], "topk (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topK"]], "topp (llama2transformer attribute)": [[160, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topP"]], "llama3transformer (class in sparknlp.annotator.seq2seq.llama3_transformer)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"]], "beamsize (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.beamSize"]], "configprotobytes (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.configProtoBytes"]], "dosample (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.doSample"]], "ignoretokenids (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.ignoreTokenIds"]], "inputannotatortypes (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama3transformer static method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"]], "maxoutputlength (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.maxOutputLength"]], "minoutputlength (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.minOutputLength"]], "name (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.name"]], "norepeatngramsize (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.noRepeatNgramSize"]], "outputannotatortype (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.outputAnnotatorType"]], "pretrained() (llama3transformer static method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"]], "repetitionpenalty (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.repetitionPenalty"]], "setbeamsize() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"]], "setconfigprotobytes() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"]], "setdosample() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"]], "setignoretokenids() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"]], "setminoutputlength() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"]], "setstoptokenids() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"]], "settemperature() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"]], "settopk() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"]], "settopp() (llama3transformer method)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[161, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "stoptokenids (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.stopTokenIds"]], "temperature (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.temperature"]], "topk (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topK"]], "topp (llama3transformer attribute)": [[161, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topP"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "beamsize (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.beamSize"]], "configprotobytes (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.configProtoBytes"]], "dosample (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.doSample"]], "ignoretokenids (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.ignoreTokenIds"]], "inputannotatortypes (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (m2m100transformer static method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "maxoutputlength (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.maxOutputLength"]], "minoutputlength (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.minOutputLength"]], "name (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.name"]], "norepeatngramsize (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.noRepeatNgramSize"]], "outputannotatortype (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.outputAnnotatorType"]], "pretrained() (m2m100transformer static method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "repetitionpenalty (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.repetitionPenalty"]], "setbeamsize() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[162, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "srclang (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.srcLang"]], "temperature (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.temperature"]], "tgtlang (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.tgtLang"]], "topk (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topK"]], "topp (m2m100transformer attribute)": [[162, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topP"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "configprotobytes (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.configProtoBytes"]], "dosample (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.doSample"]], "ignoretokenids (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.ignoreTokenIds"]], "inputannotatortypes (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.inputAnnotatorTypes"]], "langid (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.langId"]], "loadsavedmodel() (mariantransformer static method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "maxinputlength (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxInputLength"]], "maxoutputlength (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxOutputLength"]], "name (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.name"]], "norepeatngramsize (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.noRepeatNgramSize"]], "outputannotatortype (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.outputAnnotatorType"]], "pretrained() (mariantransformer static method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "repetitionpenalty (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.repetitionPenalty"]], "setconfigprotobytes() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[163, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "temperature (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.temperature"]], "topk (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topK"]], "topp (mariantransformer attribute)": [[163, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topP"]], "mistraltransformer (class in sparknlp.annotator.seq2seq.mistral_transformer)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"]], "configprotobytes (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.configProtoBytes"]], "dosample (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.doSample"]], "ignoretokenids (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.ignoreTokenIds"]], "inputannotatortypes (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (mistraltransformer static method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"]], "maxoutputlength (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.maxOutputLength"]], "minoutputlength (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.minOutputLength"]], "name (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.name"]], "norepeatngramsize (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.noRepeatNgramSize"]], "outputannotatortype (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.outputAnnotatorType"]], "pretrained() (mistraltransformer static method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"]], "repetitionpenalty (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.repetitionPenalty"]], "setconfigprotobytes() (mistraltransformer method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"]], "setdosample() (mistraltransformer method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"]], "setignoretokenids() (mistraltransformer method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (mistraltransformer method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"]], "setminoutputlength() (mistraltransformer method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"]], "setnorepeatngramsize() (mistraltransformer method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mistraltransformer method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"]], "settemperature() (mistraltransformer method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"]], "settopk() (mistraltransformer method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"]], "settopp() (mistraltransformer method)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[164, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "temperature (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.temperature"]], "topk (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topK"]], "topp (mistraltransformer attribute)": [[164, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topP"]], "nllbtransformer (class in sparknlp.annotator.seq2seq.nllb_transformer)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"]], "beamsize (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.beamSize"]], "configprotobytes (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.configProtoBytes"]], "dosample (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.doSample"]], "ignoretokenids (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.ignoreTokenIds"]], "inputannotatortypes (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (nllbtransformer static method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"]], "maxoutputlength (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.maxOutputLength"]], "minoutputlength (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.minOutputLength"]], "name (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.name"]], "norepeatngramsize (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.noRepeatNgramSize"]], "outputannotatortype (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.outputAnnotatorType"]], "pretrained() (nllbtransformer static method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"]], "repetitionpenalty (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.repetitionPenalty"]], "setbeamsize() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"]], "setconfigprotobytes() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"]], "setdosample() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"]], "setignoretokenids() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"]], "setminoutputlength() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"]], "setnorepeatngramsize() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"]], "setsrclang() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"]], "settemperature() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"]], "settgtlang() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"]], "settopk() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"]], "settopp() (nllbtransformer method)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[165, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "srclang (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.srcLang"]], "temperature (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.temperature"]], "tgtlang (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.tgtLang"]], "topk (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topK"]], "topp (nllbtransformer attribute)": [[165, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topP"]], "olmotransformer (class in sparknlp.annotator.seq2seq.olmo_transformer)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer"]], "configprotobytes (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.configProtoBytes"]], "dosample (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.doSample"]], "ignoretokenids (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.ignoreTokenIds"]], "inputannotatortypes (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (olmotransformer static method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.loadSavedModel"]], "maxoutputlength (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.maxOutputLength"]], "minoutputlength (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.minOutputLength"]], "name (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.name"]], "norepeatngramsize (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.noRepeatNgramSize"]], "outputannotatortype (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.outputAnnotatorType"]], "pretrained() (olmotransformer static method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.pretrained"]], "repetitionpenalty (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.repetitionPenalty"]], "setconfigprotobytes() (olmotransformer method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setConfigProtoBytes"]], "setdosample() (olmotransformer method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setDoSample"]], "setignoretokenids() (olmotransformer method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (olmotransformer method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMaxOutputLength"]], "setminoutputlength() (olmotransformer method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMinOutputLength"]], "setnorepeatngramsize() (olmotransformer method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (olmotransformer method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setRepetitionPenalty"]], "settemperature() (olmotransformer method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTemperature"]], "settopk() (olmotransformer method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopK"]], "settopp() (olmotransformer method)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[166, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "temperature (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.temperature"]], "topk (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topK"]], "topp (olmotransformer attribute)": [[166, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topP"]], "phi2transformer (class in sparknlp.annotator.seq2seq.phi2_transformer)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"]], "configprotobytes (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.configProtoBytes"]], "dosample (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.doSample"]], "ignoretokenids (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.ignoreTokenIds"]], "inputannotatortypes (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi2transformer static method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"]], "maxoutputlength (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.maxOutputLength"]], "minoutputlength (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.minOutputLength"]], "name (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.name"]], "norepeatngramsize (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.noRepeatNgramSize"]], "outputannotatortype (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.outputAnnotatorType"]], "pretrained() (phi2transformer static method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"]], "repetitionpenalty (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi2transformer method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"]], "setdosample() (phi2transformer method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"]], "setignoretokenids() (phi2transformer method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi2transformer method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"]], "setminoutputlength() (phi2transformer method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi2transformer method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi2transformer method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"]], "settemperature() (phi2transformer method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"]], "settopk() (phi2transformer method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"]], "settopp() (phi2transformer method)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[167, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "temperature (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.temperature"]], "topk (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topK"]], "topp (phi2transformer attribute)": [[167, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topP"]], "phi3transformer (class in sparknlp.annotator.seq2seq.phi3_transformer)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"]], "configprotobytes (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.configProtoBytes"]], "dosample (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.doSample"]], "ignoretokenids (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.ignoreTokenIds"]], "inputannotatortypes (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi3transformer static method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"]], "maxoutputlength (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.maxOutputLength"]], "minoutputlength (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.minOutputLength"]], "name (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.name"]], "norepeatngramsize (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.noRepeatNgramSize"]], "outputannotatortype (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.outputAnnotatorType"]], "pretrained() (phi3transformer static method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"]], "repetitionpenalty (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi3transformer method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"]], "setdosample() (phi3transformer method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"]], "setignoretokenids() (phi3transformer method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3transformer method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"]], "setminoutputlength() (phi3transformer method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi3transformer method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3transformer method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"]], "settemperature() (phi3transformer method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"]], "settopk() (phi3transformer method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"]], "settopp() (phi3transformer method)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[168, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "temperature (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.temperature"]], "topk (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topK"]], "topp (phi3transformer attribute)": [[168, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topP"]], "qwentransformer (class in sparknlp.annotator.seq2seq.qwen_transformer)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"]], "configprotobytes (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.configProtoBytes"]], "dosample (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.doSample"]], "ignoretokenids (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.ignoreTokenIds"]], "inputannotatortypes (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwentransformer static method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"]], "maxoutputlength (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.maxOutputLength"]], "minoutputlength (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.minOutputLength"]], "name (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.name"]], "norepeatngramsize (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.noRepeatNgramSize"]], "outputannotatortype (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.outputAnnotatorType"]], "pretrained() (qwentransformer static method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"]], "repetitionpenalty (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.repetitionPenalty"]], "setconfigprotobytes() (qwentransformer method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"]], "setdosample() (qwentransformer method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"]], "setignoretokenids() (qwentransformer method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwentransformer method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"]], "setminoutputlength() (qwentransformer method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwentransformer method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwentransformer method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"]], "settemperature() (qwentransformer method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"]], "settopk() (qwentransformer method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"]], "settopp() (qwentransformer method)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[169, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "temperature (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.temperature"]], "topk (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topK"]], "topp (qwentransformer attribute)": [[169, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topP"]], "starcodertransformer (class in sparknlp.annotator.seq2seq.starcoder_transformer)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"]], "configprotobytes (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.configProtoBytes"]], "dosample (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.doSample"]], "ignoretokenids (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.ignoreTokenIds"]], "inputannotatortypes (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (starcodertransformer static method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"]], "maxoutputlength (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.maxOutputLength"]], "minoutputlength (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.minOutputLength"]], "name (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.name"]], "norepeatngramsize (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.noRepeatNgramSize"]], "outputannotatortype (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.outputAnnotatorType"]], "pretrained() (starcodertransformer static method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"]], "repetitionpenalty (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.repetitionPenalty"]], "setconfigprotobytes() (starcodertransformer method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"]], "setdosample() (starcodertransformer method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"]], "setignoretokenids() (starcodertransformer method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (starcodertransformer method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"]], "setminoutputlength() (starcodertransformer method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"]], "setnorepeatngramsize() (starcodertransformer method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (starcodertransformer method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"]], "settemperature() (starcodertransformer method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"]], "settopk() (starcodertransformer method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"]], "settopp() (starcodertransformer method)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[170, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "temperature (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.temperature"]], "topk (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topK"]], "topp (starcodertransformer attribute)": [[170, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topP"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "configprotobytes (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.configProtoBytes"]], "dosample (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.doSample"]], "ignoretokenids (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.ignoreTokenIds"]], "inputannotatortypes (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (t5transformer static method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "maxnewtokens (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxNewTokens"]], "maxoutputlength (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxOutputLength"]], "minoutputlength (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.minOutputLength"]], "name (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.name"]], "norepeatngramsize (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.noRepeatNgramSize"]], "outputannotatortype (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.outputAnnotatorType"]], "pretrained() (t5transformer static method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "repetitionpenalty (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.repetitionPenalty"]], "setconfigprotobytes() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[171, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "stopateos (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.stopAtEos"]], "task (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.task"]], "temperature (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.temperature"]], "topk (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topK"]], "topp (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topP"]], "usecache (t5transformer attribute)": [[171, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.useCache"]], "sparknlp.annotator.similarity": [[172, "module-sparknlp.annotator.similarity"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "aggregationmethod (documentsimilarityrankerapproach attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.aggregationMethod"]], "asretriever() (documentsimilarityrankerapproach method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "asretrieverquery (documentsimilarityrankerapproach attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetrieverQuery"]], "bucketlength (documentsimilarityrankerapproach attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.bucketLength"]], "extractnearestneighbor (documentsimilarityrankerfinisher attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.extractNearestNeighbor"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "identityranking (documentsimilarityrankerapproach attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.identityRanking"]], "inputannotatortypes (documentsimilarityrankerapproach attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentsimilarityrankermodel attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.inputAnnotatorTypes"]], "inputcols (documentsimilarityrankerfinisher attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.inputCols"]], "name (documentsimilarityrankerfinisher attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.name"]], "name (documentsimilarityrankermodel attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.name"]], "numhashtables (documentsimilarityrankerapproach attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numHashTables"]], "numberofneighbours (documentsimilarityrankerapproach attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numberOfNeighbours"]], "outputannotatortype (documentsimilarityrankerapproach attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.outputAnnotatorType"]], "outputannotatortype (documentsimilarityrankermodel attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.outputAnnotatorType"]], "outputcols (documentsimilarityrankerfinisher attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.outputCols"]], "setaggregationmethod() (documentsimilarityrankerapproach method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setparams() (documentsimilarityrankerfinisher method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setParams"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "similaritymethod (documentsimilarityrankerapproach attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.similarityMethod"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[173, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "visibledistances (documentsimilarityrankerapproach attribute)": [[173, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.visibleDistances"]], "sparknlp.annotator.spell_check": [[174, "module-sparknlp.annotator.spell_check"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "batchsize (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.batchSize"]], "casestrategy (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.caseStrategy"]], "casestrategy (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.caseStrategy"]], "classcount (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.classCount"]], "classes (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.classes"]], "comparelowcase (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.compareLowcase"]], "compoundcount (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.compoundCount"]], "configprotobytes (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.configProtoBytes"]], "configprotobytes (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.configProtoBytes"]], "correctsymbols (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.correctSymbols"]], "epochs (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.epochs"]], "errorthreshold (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.errorThreshold"]], "errorthreshold (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.errorThreshold"]], "finalrate (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.finalRate"]], "gamma (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.gamma"]], "getwordclasses() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "graphfolder (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.graphFolder"]], "idsvocab (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.idsVocab"]], "initialrate (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.initialRate"]], "inputannotatortypes (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.inputAnnotatorTypes"]], "languagemodelclasses (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.languageModelClasses"]], "maxcandidates (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxCandidates"]], "maxcandidates (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxCandidates"]], "maxsentlen (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxSentLen"]], "maxwindowlen (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxWindowLen"]], "maxwindowlen (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxWindowLen"]], "mincount (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.minCount"]], "name (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.name"]], "name (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.name"]], "outputannotatortype (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.outputAnnotatorType"]], "outputannotatortype (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.outputAnnotatorType"]], "pretrained() (contextspellcheckermodel static method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[175, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "tradeoff (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.tradeoff"]], "tradeoff (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.tradeoff"]], "updateregexclass() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "validationfraction (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.validationFraction"]], "vocabfreq (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabFreq"]], "vocabids (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabIds"]], "weighteddistpath (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.weightedDistPath"]], "wordmaxdistance (contextspellcheckerapproach attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.wordMaxDistance"]], "wordmaxdistance (contextspellcheckermodel attribute)": [[175, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.wordMaxDistance"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "casesensitive (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.caseSensitive"]], "dictionary (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary"]], "doublevariants (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.doubleVariants"]], "dupslimit (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dupsLimit"]], "frequencypriority (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.frequencyPriority"]], "inputannotatortypes (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.inputAnnotatorTypes"]], "inputannotatortypes (norvigsweetingmodel attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.inputAnnotatorTypes"]], "intersections (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.intersections"]], "name (norvigsweetingmodel attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.name"]], "outputannotatortype (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.outputAnnotatorType"]], "outputannotatortype (norvigsweetingmodel attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.outputAnnotatorType"]], "pretrained() (norvigsweetingmodel static method)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "reductlimit (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.reductLimit"]], "setcasesensitive() (norvigsweetingapproach method)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "shortcircuit (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.shortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[176, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "vowelswaplimit (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.vowelSwapLimit"]], "wordsizeignore (norvigsweetingapproach attribute)": [[176, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.wordSizeIgnore"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "corpus (symmetricdeleteapproach attribute)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.corpus"]], "deletesthreshold (symmetricdeleteapproach attribute)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.deletesThreshold"]], "dictionary (symmetricdeleteapproach attribute)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary"]], "dupslimit (symmetricdeleteapproach attribute)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dupsLimit"]], "frequencythreshold (symmetricdeleteapproach attribute)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.frequencyThreshold"]], "inputannotatortypes (symmetricdeleteapproach attribute)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.inputAnnotatorTypes"]], "inputannotatortypes (symmetricdeletemodel attribute)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.inputAnnotatorTypes"]], "maxeditdistance (symmetricdeleteapproach attribute)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.maxEditDistance"]], "name (symmetricdeletemodel attribute)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.name"]], "outputannotatortype (symmetricdeleteapproach attribute)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.outputAnnotatorType"]], "outputannotatortype (symmetricdeletemodel attribute)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.outputAnnotatorType"]], "pretrained() (symmetricdeletemodel static method)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[177, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[177, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[178, "sparknlp.annotator.stemmer.Stemmer"]], "inputannotatortypes (stemmer attribute)": [[178, "sparknlp.annotator.stemmer.Stemmer.inputAnnotatorTypes"]], "language (stemmer attribute)": [[178, "sparknlp.annotator.stemmer.Stemmer.language"]], "name (stemmer attribute)": [[178, "sparknlp.annotator.stemmer.Stemmer.name"]], "outputannotatortype (stemmer attribute)": [[178, "sparknlp.annotator.stemmer.Stemmer.outputAnnotatorType"]], "sparknlp.annotator.stemmer": [[178, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "casesensitive (stopwordscleaner attribute)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.caseSensitive"]], "inputannotatortypes (stopwordscleaner attribute)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.inputAnnotatorTypes"]], "loaddefaultstopwords() (stopwordscleaner method)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "locale (stopwordscleaner attribute)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.locale"]], "name (stopwordscleaner attribute)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.name"]], "outputannotatortype (stopwordscleaner attribute)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.outputAnnotatorType"]], "pretrained() (stopwordscleaner static method)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[179, "module-sparknlp.annotator.stop_words_cleaner"]], "stopwords (stopwordscleaner attribute)": [[179, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.stopWords"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "graphfile (tfnerdlgraphbuilder attribute)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFile"]], "graphfolder (tfnerdlgraphbuilder attribute)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFolder"]], "hiddenunitsnumber (tfnerdlgraphbuilder attribute)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.hiddenUnitsNumber"]], "inputannotatortypes (tfnerdlgraphbuilder attribute)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputAnnotatorTypes"]], "inputcols (tfnerdlgraphbuilder attribute)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputCols"]], "inputcolsvalidation() (tfnerdlgraphbuilder method)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputColsValidation"]], "labelcolumn (tfnerdlgraphbuilder attribute)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.labelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[180, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[180, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token": [[181, "module-sparknlp.annotator.token"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[182, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[182, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "inputannotatortypes (chunktokenizer attribute)": [[182, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (chunktokenizermodel attribute)": [[182, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.inputAnnotatorTypes"]], "name (chunktokenizer attribute)": [[182, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.name"]], "name (chunktokenizermodel attribute)": [[182, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.name"]], "sparknlp.annotator.token.chunk_tokenizer": [[182, "module-sparknlp.annotator.token.chunk_tokenizer"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "infixes (recursivetokenizer attribute)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.infixes"]], "inputannotatortypes (recursivetokenizer attribute)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (recursivetokenizermodel attribute)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.inputAnnotatorTypes"]], "name (recursivetokenizer attribute)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.name"]], "name (recursivetokenizermodel attribute)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.name"]], "outputannotatortype (recursivetokenizer attribute)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.outputAnnotatorType"]], "outputannotatortype (recursivetokenizermodel attribute)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.outputAnnotatorType"]], "prefixes (recursivetokenizer attribute)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.prefixes"]], "setinfixes() (recursivetokenizer method)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[183, "module-sparknlp.annotator.token.recursive_tokenizer"]], "suffixes (recursivetokenizer attribute)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.suffixes"]], "whitelist (recursivetokenizer attribute)": [[183, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.whitelist"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "inputannotatortypes (regextokenizer attribute)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.inputAnnotatorTypes"]], "maxlength (regextokenizer attribute)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.maxLength"]], "minlength (regextokenizer attribute)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.minLength"]], "name (regextokenizer attribute)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.name"]], "outputannotatortype (regextokenizer attribute)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.outputAnnotatorType"]], "pattern (regextokenizer attribute)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.pattern"]], "positionalmask (regextokenizer attribute)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.positionalMask"]], "preserveposition (regextokenizer attribute)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.preservePosition"]], "setmaxlength() (regextokenizer method)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[184, "module-sparknlp.annotator.token.regex_tokenizer"]], "tolowercase (regextokenizer attribute)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.toLowercase"]], "trimwhitespace (regextokenizer attribute)": [[184, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.trimWhitespace"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "casesensitiveexceptions (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.caseSensitiveExceptions"]], "casesensitiveexceptions (tokenizermodel attribute)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.caseSensitiveExceptions"]], "contextchars (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.contextChars"]], "exceptions (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptions"]], "exceptions (tokenizermodel attribute)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.exceptions"]], "exceptionspath (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptionsPath"]], "getcasesensitiveexceptions() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "infixpatterns (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.infixPatterns"]], "inputannotatortypes (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.inputAnnotatorTypes"]], "inputannotatortypes (tokenizermodel attribute)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.inputAnnotatorTypes"]], "maxlength (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.maxLength"]], "minlength (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.minLength"]], "name (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.name"]], "name (tokenizermodel attribute)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.name"]], "outputannotatortype (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.outputAnnotatorType"]], "outputannotatortype (tokenizermodel attribute)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.outputAnnotatorType"]], "prefixpattern (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.prefixPattern"]], "pretrained() (tokenizermodel static method)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "rules (tokenizermodel attribute)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.rules"]], "setcasesensitiveexceptions() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[185, "module-sparknlp.annotator.token.tokenizer"]], "splitchars (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.splitChars"]], "splitchars (tokenizermodel attribute)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitChars"]], "splitpattern (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.splitPattern"]], "splitpattern (tokenizermodel attribute)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitPattern"]], "suffixpattern (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.suffixPattern"]], "targetpattern (tokenizer attribute)": [[185, "sparknlp.annotator.token.tokenizer.Tokenizer.targetPattern"]], "targetpattern (tokenizermodel attribute)": [[185, "sparknlp.annotator.token.tokenizer.TokenizerModel.targetPattern"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[186, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "inputannotatortypes (token2chunk attribute)": [[186, "sparknlp.annotator.token2_chunk.Token2Chunk.inputAnnotatorTypes"]], "name (token2chunk attribute)": [[186, "sparknlp.annotator.token2_chunk.Token2Chunk.name"]], "outputannotatortype (token2chunk attribute)": [[186, "sparknlp.annotator.token2_chunk.Token2Chunk.outputAnnotatorType"]], "sparknlp.annotator.token2_chunk": [[186, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[187, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "ambiguitythreshold (wordsegmenterapproach attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.ambiguityThreshold"]], "enableregextokenizer (wordsegmenterapproach attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.enableRegexTokenizer"]], "enableregextokenizer (wordsegmentermodel attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.enableRegexTokenizer"]], "frequencythreshold (wordsegmenterapproach attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.frequencyThreshold"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "inputannotatortypes (wordsegmenterapproach attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.inputAnnotatorTypes"]], "inputannotatortypes (wordsegmentermodel attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.inputAnnotatorTypes"]], "niterations (wordsegmenterapproach attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.nIterations"]], "name (wordsegmenterapproach attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.name"]], "name (wordsegmentermodel attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.name"]], "outputannotatortype (wordsegmenterapproach attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.outputAnnotatorType"]], "outputannotatortype (wordsegmentermodel attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.outputAnnotatorType"]], "pattern (wordsegmenterapproach attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.pattern"]], "pattern (wordsegmentermodel attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pattern"]], "poscol (wordsegmenterapproach attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.posCol"]], "pretrained() (wordsegmentermodel static method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[188, "module-sparknlp.annotator.ws.word_segmenter"]], "tolowercase (wordsegmenterapproach attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.toLowercase"]], "tolowercase (wordsegmentermodel attribute)": [[188, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.toLowercase"]], "sparknlp.base": [[189, "module-sparknlp.base"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[190, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[190, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "inputcol (audioassembler attribute)": [[190, "sparknlp.base.audio_assembler.AudioAssembler.inputCol"]], "name (audioassembler attribute)": [[190, "sparknlp.base.audio_assembler.AudioAssembler.name"]], "outputannotatortype (audioassembler attribute)": [[190, "sparknlp.base.audio_assembler.AudioAssembler.outputAnnotatorType"]], "outputcol (audioassembler attribute)": [[190, "sparknlp.base.audio_assembler.AudioAssembler.outputCol"]], "setinputcol() (audioassembler method)": [[190, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[190, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "setparams() (audioassembler method)": [[190, "sparknlp.base.audio_assembler.AudioAssembler.setParams"]], "sparknlp.base.audio_assembler": [[190, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "chunkcol (doc2chunk attribute)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.chunkCol"]], "failonmissing (doc2chunk attribute)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.failOnMissing"]], "inputannotatortypes (doc2chunk attribute)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.inputAnnotatorTypes"]], "isarray (doc2chunk attribute)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.isArray"]], "lowercase (doc2chunk attribute)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.lowerCase"]], "name (doc2chunk attribute)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.name"]], "outputannotatortype (doc2chunk attribute)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.outputAnnotatorType"]], "setchunkcol() (doc2chunk method)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setparams() (doc2chunk method)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.setParams"]], "setstartcol() (doc2chunk method)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[191, "module-sparknlp.base.doc2_chunk"]], "startcol (doc2chunk attribute)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.startCol"]], "startcolbytokenindex (doc2chunk attribute)": [[191, "sparknlp.base.doc2_chunk.Doc2Chunk.startColByTokenIndex"]], "documentassembler (class in sparknlp.base.document_assembler)": [[192, "sparknlp.base.document_assembler.DocumentAssembler"]], "cleanupmode (documentassembler attribute)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.cleanupMode"]], "getoutputcol() (documentassembler method)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "idcol (documentassembler attribute)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.idCol"]], "inputcol (documentassembler attribute)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.inputCol"]], "metadatacol (documentassembler attribute)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.metadataCol"]], "name (documentassembler attribute)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.name"]], "outputannotatortype (documentassembler attribute)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.outputAnnotatorType"]], "outputcol (documentassembler attribute)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.outputCol"]], "setcleanupmode() (documentassembler method)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "setparams() (documentassembler method)": [[192, "sparknlp.base.document_assembler.DocumentAssembler.setParams"]], "sparknlp.base.document_assembler": [[192, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "cleanannotations (embeddingsfinisher attribute)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.cleanAnnotations"]], "getinputcols() (embeddingsfinisher method)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "inputcols (embeddingsfinisher attribute)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.inputCols"]], "name (embeddingsfinisher attribute)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.name"]], "outputasvector (embeddingsfinisher attribute)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputAsVector"]], "outputcols (embeddingsfinisher attribute)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "setparams() (embeddingsfinisher method)": [[193, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setParams"]], "sparknlp.base.embeddings_finisher": [[193, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[194, "sparknlp.base.finisher.Finisher"]], "annotationsplitsymbol (finisher attribute)": [[194, "sparknlp.base.finisher.Finisher.annotationSplitSymbol"]], "cleanannotations (finisher attribute)": [[194, "sparknlp.base.finisher.Finisher.cleanAnnotations"]], "getinputcols() (finisher method)": [[194, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[194, "sparknlp.base.finisher.Finisher.getOutputCols"]], "includemetadata (finisher attribute)": [[194, "sparknlp.base.finisher.Finisher.includeMetadata"]], "inputcols (finisher attribute)": [[194, "sparknlp.base.finisher.Finisher.inputCols"]], "name (finisher attribute)": [[194, "sparknlp.base.finisher.Finisher.name"]], "outputasarray (finisher attribute)": [[194, "sparknlp.base.finisher.Finisher.outputAsArray"]], "outputcols (finisher attribute)": [[194, "sparknlp.base.finisher.Finisher.outputCols"]], "parseembeddingsvectors (finisher attribute)": [[194, "sparknlp.base.finisher.Finisher.parseEmbeddingsVectors"]], "setannotationsplitsymbol() (finisher method)": [[194, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[194, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[194, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[194, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[194, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[194, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparams() (finisher method)": [[194, "sparknlp.base.finisher.Finisher.setParams"]], "setparseembeddingsvectors() (finisher method)": [[194, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[194, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[194, "module-sparknlp.base.finisher"]], "valuesplitsymbol (finisher attribute)": [[194, "sparknlp.base.finisher.Finisher.valueSplitSymbol"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[195, "sparknlp.base.graph_finisher.GraphFinisher"]], "cleanannotations (graphfinisher attribute)": [[195, "sparknlp.base.graph_finisher.GraphFinisher.cleanAnnotations"]], "inputcol (graphfinisher attribute)": [[195, "sparknlp.base.graph_finisher.GraphFinisher.inputCol"]], "name (graphfinisher attribute)": [[195, "sparknlp.base.graph_finisher.GraphFinisher.name"]], "outputasarray (graphfinisher attribute)": [[195, "sparknlp.base.graph_finisher.GraphFinisher.outputAsArray"]], "outputcol (graphfinisher attribute)": [[195, "sparknlp.base.graph_finisher.GraphFinisher.outputCol"]], "setcleanannotations() (graphfinisher method)": [[195, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[195, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[195, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[195, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "setparams() (graphfinisher method)": [[195, "sparknlp.base.graph_finisher.GraphFinisher.setParams"]], "sparknlp.base.graph_finisher": [[195, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[196, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[196, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[197, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[197, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[198, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[198, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "inputcol (imageassembler attribute)": [[198, "sparknlp.base.image_assembler.ImageAssembler.inputCol"]], "loadimagesasbytes() (imageassembler class method)": [[198, "sparknlp.base.image_assembler.ImageAssembler.loadImagesAsBytes"]], "name (imageassembler attribute)": [[198, "sparknlp.base.image_assembler.ImageAssembler.name"]], "outputannotatortype (imageassembler attribute)": [[198, "sparknlp.base.image_assembler.ImageAssembler.outputAnnotatorType"]], "outputcol (imageassembler attribute)": [[198, "sparknlp.base.image_assembler.ImageAssembler.outputCol"]], "setinputcol() (imageassembler method)": [[198, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[198, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "setparams() (imageassembler method)": [[198, "sparknlp.base.image_assembler.ImageAssembler.setParams"]], "settextcol() (imageassembler method)": [[198, "sparknlp.base.image_assembler.ImageAssembler.setTextCol"]], "sparknlp.base.image_assembler": [[198, "module-sparknlp.base.image_assembler"]], "textcol (imageassembler attribute)": [[198, "sparknlp.base.image_assembler.ImageAssembler.textCol"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[199, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[199, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[199, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[199, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[199, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[199, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[199, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[199, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "cleanupmode (multidocumentassembler attribute)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.cleanupMode"]], "getoutputcols() (multidocumentassembler method)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "idcol (multidocumentassembler attribute)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.idCol"]], "inputcols (multidocumentassembler attribute)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.inputCols"]], "metadatacol (multidocumentassembler attribute)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.metadataCol"]], "name (multidocumentassembler attribute)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.name"]], "outputannotatortype (multidocumentassembler attribute)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputAnnotatorType"]], "outputcols (multidocumentassembler attribute)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputCols"]], "setcleanupmode() (multidocumentassembler method)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "setparams() (multidocumentassembler method)": [[200, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setParams"]], "sparknlp.base.multi_document_assembler": [[200, "module-sparknlp.base.multi_document_assembler"]], "promptassembler (class in sparknlp.base.prompt_assembler)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler"]], "addassistant (promptassembler attribute)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler.addAssistant"]], "chattemplate (promptassembler attribute)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler.chatTemplate"]], "inputcol (promptassembler attribute)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler.inputCol"]], "name (promptassembler attribute)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler.name"]], "outputannotatortype (promptassembler attribute)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler.outputAnnotatorType"]], "outputcol (promptassembler attribute)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler.outputCol"]], "setaddassistant() (promptassembler method)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"]], "setchattemplate() (promptassembler method)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"]], "setinputcol() (promptassembler method)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"]], "setoutputcol() (promptassembler method)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"]], "setparams() (promptassembler method)": [[201, "sparknlp.base.prompt_assembler.PromptAssembler.setParams"]], "sparknlp.base.prompt_assembler": [[201, "module-sparknlp.base.prompt_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[202, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[202, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[202, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[203, "sparknlp.base.table_assembler.TableAssembler"]], "csvdelimiter (tableassembler attribute)": [[203, "sparknlp.base.table_assembler.TableAssembler.csvDelimiter"]], "escapecsvdelimiter (tableassembler attribute)": [[203, "sparknlp.base.table_assembler.TableAssembler.escapeCsvDelimiter"]], "inputannotatortypes (tableassembler attribute)": [[203, "sparknlp.base.table_assembler.TableAssembler.inputAnnotatorTypes"]], "inputformat (tableassembler attribute)": [[203, "sparknlp.base.table_assembler.TableAssembler.inputFormat"]], "name (tableassembler attribute)": [[203, "sparknlp.base.table_assembler.TableAssembler.name"]], "outputannotatortype (tableassembler attribute)": [[203, "sparknlp.base.table_assembler.TableAssembler.outputAnnotatorType"]], "setcsvdelimiter() (tableassembler method)": [[203, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[203, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[203, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[203, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[204, "sparknlp.base.token_assembler.TokenAssembler"]], "inputannotatortypes (tokenassembler attribute)": [[204, "sparknlp.base.token_assembler.TokenAssembler.inputAnnotatorTypes"]], "name (tokenassembler attribute)": [[204, "sparknlp.base.token_assembler.TokenAssembler.name"]], "outputannotatortype (tokenassembler attribute)": [[204, "sparknlp.base.token_assembler.TokenAssembler.outputAnnotatorType"]], "preserveposition (tokenassembler attribute)": [[204, "sparknlp.base.token_assembler.TokenAssembler.preservePosition"]], "setparams() (tokenassembler method)": [[204, "sparknlp.base.token_assembler.TokenAssembler.setParams"]], "setpreserveposition() (tokenassembler method)": [[204, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[204, "module-sparknlp.base.token_assembler"]], "sparknlp.common": [[205, "module-sparknlp.common"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[206, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[206, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[207, "sparknlp.common.annotator_model.AnnotatorModel"]], "setparams() (annotatormodel method)": [[207, "sparknlp.common.annotator_model.AnnotatorModel.setParams"]], "sparknlp.common.annotator_model": [[207, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "inputannotatortypes (annotatorproperties attribute)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.inputAnnotatorTypes"]], "inputcols (annotatorproperties attribute)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.inputCols"]], "inputcolsvalidation() (annotatorproperties method)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.inputColsValidation"]], "lazyannotator (annotatorproperties attribute)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.lazyAnnotator"]], "optionalinputannotatortypes (annotatorproperties attribute)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorproperties attribute)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.outputAnnotatorType"]], "outputcol (annotatorproperties attribute)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.outputCol"]], "setinputcols() (annotatorproperties method)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[208, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[208, "module-sparknlp.common.annotator_properties"]], "audio (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.AUDIO"]], "annotatortype (class in sparknlp.common.annotator_type)": [[209, "sparknlp.common.annotator_type.AnnotatorType"]], "category (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.CATEGORY"]], "chunk (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.CHUNK"]], "date (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.DATE"]], "dependency (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.DEPENDENCY"]], "document (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.DOCUMENT"]], "doc_similarity_rankings (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.DOC_SIMILARITY_RANKINGS"]], "dummy (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.DUMMY"]], "entity (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.ENTITY"]], "image (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.IMAGE"]], "labeled_dependency (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.LABELED_DEPENDENCY"]], "language (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.LANGUAGE"]], "named_entity (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.NAMED_ENTITY"]], "negex (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.NEGEX"]], "node (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.NODE"]], "pos (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.POS"]], "sentence_embeddings (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.SENTENCE_EMBEDDINGS"]], "sentiment (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.SENTIMENT"]], "table (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.TABLE"]], "token (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.TOKEN"]], "wordpiece (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.WORDPIECE"]], "word_embeddings (annotatortype attribute)": [[209, "sparknlp.common.annotator_type.AnnotatorType.WORD_EMBEDDINGS"]], "sparknlp.common.annotator_type": [[209, "module-sparknlp.common.annotator_type"]], "coverageresult (class in sparknlp.common.coverage_result)": [[210, "sparknlp.common.coverage_result.CoverageResult"]], "sparknlp.common.coverage_result": [[210, "module-sparknlp.common.coverage_result"]], "match_all (matchstrategy attribute)": [[211, "sparknlp.common.match_strategy.MatchStrategy.MATCH_ALL"]], "match_complete (matchstrategy attribute)": [[211, "sparknlp.common.match_strategy.MatchStrategy.MATCH_COMPLETE"]], "match_first (matchstrategy attribute)": [[211, "sparknlp.common.match_strategy.MatchStrategy.MATCH_FIRST"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[211, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[211, "module-sparknlp.common.match_strategy"]], "hasaudiofeatureproperties (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties"]], "hasbatchedannotate (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasBatchedAnnotate"]], "hasbatchedannotateaudio (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasBatchedAnnotateAudio"]], "hasbatchedannotateimage (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasBatchedAnnotateImage"]], "hascandidatelabelsproperties (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasCandidateLabelsProperties"]], "hascasesensitiveproperties (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasCaseSensitiveProperties"]], "hasclassifieractivationproperties (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasClassifierActivationProperties"]], "hasclstokenproperties (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasClsTokenProperties"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasEmbeddingsProperties"]], "hasenablecachingproperties (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasEnableCachingProperties"]], "hasengine (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasEngine"]], "hasgeneratorproperties (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasGeneratorProperties"]], "hasimagefeatureproperties (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasImageFeatureProperties"]], "hasllamacppproperties (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasLlamaCppProperties"]], "haslongmaxsentencelengthlimit (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit"]], "hasmaxsentencelengthlimit (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasMaxSentenceLengthLimit"]], "hasrescalefactor (class in sparknlp.common.properties)": [[212, "sparknlp.common.properties.HasRescaleFactor"]], "activation (hasclassifieractivationproperties attribute)": [[212, "sparknlp.common.properties.HasClassifierActivationProperties.activation"]], "batchsize (hasbatchedannotate attribute)": [[212, "sparknlp.common.properties.HasBatchedAnnotate.batchSize"]], "batchsize (hasbatchedannotateaudio attribute)": [[212, "sparknlp.common.properties.HasBatchedAnnotateAudio.batchSize"]], "batchsize (hasbatchedannotateimage attribute)": [[212, "sparknlp.common.properties.HasBatchedAnnotateImage.batchSize"]], "beamsize (hasgeneratorproperties attribute)": [[212, "sparknlp.common.properties.HasGeneratorProperties.beamSize"]], "cacheprompt (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.cachePrompt"]], "candidatelabels (hascandidatelabelsproperties attribute)": [[212, "sparknlp.common.properties.HasCandidateLabelsProperties.candidateLabels"]], "casesensitive (hascasesensitiveproperties attribute)": [[212, "sparknlp.common.properties.HasCaseSensitiveProperties.caseSensitive"]], "chattemplate (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.chatTemplate"]], "contradictionidparam (hascandidatelabelsproperties attribute)": [[212, "sparknlp.common.properties.HasCandidateLabelsProperties.contradictionIdParam"]], "defragmentationthreshold (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.defragmentationThreshold"]], "dimension (hasembeddingsproperties attribute)": [[212, "sparknlp.common.properties.HasEmbeddingsProperties.dimension"]], "disabletokenids (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.disableTokenIds"]], "donormalize (hasaudiofeatureproperties attribute)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.doNormalize"]], "donormalize (hasimagefeatureproperties attribute)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.doNormalize"]], "dorescale (hasrescalefactor attribute)": [[212, "sparknlp.common.properties.HasRescaleFactor.doRescale"]], "doresize (hasimagefeatureproperties attribute)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.doResize"]], "dosample (hasgeneratorproperties attribute)": [[212, "sparknlp.common.properties.HasGeneratorProperties.doSample"]], "dynamictemperatureexponent (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureExponent"]], "dynamictemperaturerange (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureRange"]], "embedding (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.embedding"]], "enablecaching (hasenablecachingproperties attribute)": [[212, "sparknlp.common.properties.HasEnableCachingProperties.enableCaching"]], "engine (hasengine attribute)": [[212, "sparknlp.common.properties.HasEngine.engine"]], "entailmentidparam (hascandidatelabelsproperties attribute)": [[212, "sparknlp.common.properties.HasCandidateLabelsProperties.entailmentIdParam"]], "featureextractortype (hasimagefeatureproperties attribute)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.featureExtractorType"]], "featuresize (hasaudiofeatureproperties attribute)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.featureSize"]], "flashattention (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.flashAttention"]], "frequencypenalty (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.frequencyPenalty"]], "getactivation() (hasclassifieractivationproperties method)": [[212, "sparknlp.common.properties.HasClassifierActivationProperties.getActivation"]], "getbatchsize() (hasbatchedannotate method)": [[212, "sparknlp.common.properties.HasBatchedAnnotate.getBatchSize"]], "getbatchsize() (hasbatchedannotateaudio method)": [[212, "sparknlp.common.properties.HasBatchedAnnotateAudio.getBatchSize"]], "getbatchsize() (hasbatchedannotateimage method)": [[212, "sparknlp.common.properties.HasBatchedAnnotateImage.getBatchSize"]], "getcasesensitive() (hascasesensitiveproperties method)": [[212, "sparknlp.common.properties.HasCaseSensitiveProperties.getCaseSensitive"]], "getdimension() (hasembeddingsproperties method)": [[212, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "getenablecaching() (hasenablecachingproperties method)": [[212, "sparknlp.common.properties.HasEnableCachingProperties.getEnableCaching"]], "getengine() (hasengine method)": [[212, "sparknlp.common.properties.HasEngine.getEngine"]], "getmaxsentencelength() (hasmaxsentencelengthlimit method)": [[212, "sparknlp.common.properties.HasMaxSentenceLengthLimit.getMaxSentenceLength"]], "getmetadata() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.getMetadata"]], "getmultilabel() (hasclassifieractivationproperties method)": [[212, "sparknlp.common.properties.HasClassifierActivationProperties.getMultilabel"]], "getuseclstoken() (hasclstokenproperties method)": [[212, "sparknlp.common.properties.HasClsTokenProperties.getUseCLSToken"]], "gpusplitmode (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.gpuSplitMode"]], "grammar (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.grammar"]], "grpattnn (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnN"]], "grpattnw (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnW"]], "ignoreeos (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.ignoreEos"]], "imagemean (hasimagefeatureproperties attribute)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.imageMean"]], "imagestd (hasimagefeatureproperties attribute)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.imageStd"]], "inputprefix (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefix"]], "inputprefixbos (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefixBos"]], "inputsuffix (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.inputSuffix"]], "lookupcachedynamicfilepath (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheDynamicFilePath"]], "lookupcachestaticfilepath (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheStaticFilePath"]], "maingpu (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.mainGpu"]], "maxoutputlength (hasgeneratorproperties attribute)": [[212, "sparknlp.common.properties.HasGeneratorProperties.maxOutputLength"]], "maxsentencelength (hasmaxsentencelengthlimit attribute)": [[212, "sparknlp.common.properties.HasMaxSentenceLengthLimit.maxSentenceLength"]], "max_length_limit (haslongmaxsentencelengthlimit attribute)": [[212, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit.max_length_limit"]], "max_length_limit (hasmaxsentencelengthlimit attribute)": [[212, "sparknlp.common.properties.HasMaxSentenceLengthLimit.max_length_limit"]], "minkeep (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.minKeep"]], "minoutputlength (hasgeneratorproperties attribute)": [[212, "sparknlp.common.properties.HasGeneratorProperties.minOutputLength"]], "minp (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.minP"]], "mirostat (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.miroStat"]], "mirostateta (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.miroStatEta"]], "mirostattau (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.miroStatTau"]], "modelalias (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.modelAlias"]], "modeldraft (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.modelDraft"]], "multilabel (hasclassifieractivationproperties attribute)": [[212, "sparknlp.common.properties.HasClassifierActivationProperties.multilabel"]], "nbatch (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nBatch"]], "nchunks (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nChunks"]], "nctx (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nCtx"]], "ndraft (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nDraft"]], "ngpulayers (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayers"]], "ngpulayersdraft (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayersDraft"]], "nkeep (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nKeep"]], "npredict (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nPredict"]], "nprobs (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nProbs"]], "nreturnsequences (hasgeneratorproperties attribute)": [[212, "sparknlp.common.properties.HasGeneratorProperties.nReturnSequences"]], "nsequences (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nSequences"]], "nthreads (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nThreads"]], "nthreadsbatch (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatch"]], "nthreadsbatchdraft (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatchDraft"]], "nthreadsdraft (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsDraft"]], "nubatch (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.nUbatch"]], "nokvoffload (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.noKvOffload"]], "norepeatngramsize (hasgeneratorproperties attribute)": [[212, "sparknlp.common.properties.HasGeneratorProperties.noRepeatNgramSize"]], "numastrategy (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.numaStrategy"]], "psplit (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.pSplit"]], "paddingside (hasaudiofeatureproperties attribute)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.paddingSide"]], "paddingvalue (hasaudiofeatureproperties attribute)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.paddingValue"]], "penalizenl (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.penalizeNl"]], "penaltyprompt (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.penaltyPrompt"]], "poolingtype (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.poolingType"]], "presencepenalty (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.presencePenalty"]], "repeatlastn (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.repeatLastN"]], "repeatpenalty (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.repeatPenalty"]], "repetitionpenalty (hasgeneratorproperties attribute)": [[212, "sparknlp.common.properties.HasGeneratorProperties.repetitionPenalty"]], "resample (hasimagefeatureproperties attribute)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.resample"]], "rescalefactor (hasrescalefactor attribute)": [[212, "sparknlp.common.properties.HasRescaleFactor.rescaleFactor"]], "returnattentionmask (hasaudiofeatureproperties attribute)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.returnAttentionMask"]], "ropefreqbase (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqBase"]], "ropefreqscale (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqScale"]], "ropescalingtype (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.ropeScalingType"]], "samplers (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.samplers"]], "samplingrate (hasaudiofeatureproperties attribute)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.samplingRate"]], "seed (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.seed"]], "setactivation() (hasclassifieractivationproperties method)": [[212, "sparknlp.common.properties.HasClassifierActivationProperties.setActivation"]], "setbatchsize() (hasbatchedannotate method)": [[212, "sparknlp.common.properties.HasBatchedAnnotate.setBatchSize"]], "setbatchsize() (hasbatchedannotateaudio method)": [[212, "sparknlp.common.properties.HasBatchedAnnotateAudio.setBatchSize"]], "setbatchsize() (hasbatchedannotateimage method)": [[212, "sparknlp.common.properties.HasBatchedAnnotateImage.setBatchSize"]], "setbeamsize() (hasgeneratorproperties method)": [[212, "sparknlp.common.properties.HasGeneratorProperties.setBeamSize"]], "setcacheprompt() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setCachePrompt"]], "setcandidatelabels() (hascandidatelabelsproperties method)": [[212, "sparknlp.common.properties.HasCandidateLabelsProperties.setCandidateLabels"]], "setcasesensitive() (hascasesensitiveproperties method)": [[212, "sparknlp.common.properties.HasCaseSensitiveProperties.setCaseSensitive"]], "setchattemplate() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setChatTemplate"]], "setcontradictionidparam() (hascandidatelabelsproperties method)": [[212, "sparknlp.common.properties.HasCandidateLabelsProperties.setContradictionIdParam"]], "setdefragmentationthreshold() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setDefragmentationThreshold"]], "setdimension() (hasembeddingsproperties method)": [[212, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdisabletokenids() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setDisableTokenIds"]], "setdonormalize() (hasaudiofeatureproperties method)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.setDoNormalize"]], "setdonormalize() (hasimagefeatureproperties method)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.setDoNormalize"]], "setdorescale() (hasrescalefactor method)": [[212, "sparknlp.common.properties.HasRescaleFactor.setDoRescale"]], "setdoresize() (hasimagefeatureproperties method)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.setDoResize"]], "setdosample() (hasgeneratorproperties method)": [[212, "sparknlp.common.properties.HasGeneratorProperties.setDoSample"]], "setdynamictemperatureexponent() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureRange"]], "setembedding() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setEmbedding"]], "setenablecaching() (hasenablecachingproperties method)": [[212, "sparknlp.common.properties.HasEnableCachingProperties.setEnableCaching"]], "setentailmentidparam() (hascandidatelabelsproperties method)": [[212, "sparknlp.common.properties.HasCandidateLabelsProperties.setEntailmentIdParam"]], "setfeatureextractortype() (hasimagefeatureproperties method)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.setFeatureExtractorType"]], "setfeaturesize() (hasaudiofeatureproperties method)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.setFeatureSize"]], "setflashattention() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setFlashAttention"]], "setfrequencypenalty() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setFrequencyPenalty"]], "setgpusplitmode() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setGpuSplitMode"]], "setgrammar() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setGrammar"]], "setgrpattnn() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnN"]], "setgrpattnw() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnW"]], "setignoreeos() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setIgnoreEos"]], "setimagemean() (hasimagefeatureproperties method)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.setImageMean"]], "setimagestd() (hasimagefeatureproperties method)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.setImageStd"]], "setinputprefix() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefix"]], "setinputprefixbos() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefixBos"]], "setinputsuffix() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setInputSuffix"]], "setlookupcachedynamicfilepath() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheDynamicFilePath"]], "setlookupcachestaticfilepath() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheStaticFilePath"]], "setloraadapters() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setLoraAdapters"]], "setmaingpu() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setMainGpu"]], "setmaxoutputlength() (hasgeneratorproperties method)": [[212, "sparknlp.common.properties.HasGeneratorProperties.setMaxOutputLength"]], "setmaxsentencelength() (hasmaxsentencelengthlimit method)": [[212, "sparknlp.common.properties.HasMaxSentenceLengthLimit.setMaxSentenceLength"]], "setminkeep() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setMinKeep"]], "setminoutputlength() (hasgeneratorproperties method)": [[212, "sparknlp.common.properties.HasGeneratorProperties.setMinOutputLength"]], "setminp() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setMinP"]], "setmirostat() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStat"]], "setmirostateta() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatEta"]], "setmirostattau() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatTau"]], "setmodelalias() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setModelAlias"]], "setmodeldraft() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setModelDraft"]], "setmultilabel() (hasclassifieractivationproperties method)": [[212, "sparknlp.common.properties.HasClassifierActivationProperties.setMultilabel"]], "setnbatch() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNBatch"]], "setnchunks() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNChunks"]], "setnctx() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNCtx"]], "setndraft() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNDraft"]], "setngpulayers() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayers"]], "setngpulayersdraft() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayersDraft"]], "setnkeep() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNKeep"]], "setnparallel() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNParallel"]], "setnpredict() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNPredict"]], "setnprobs() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNProbs"]], "setnreturnsequences() (hasgeneratorproperties method)": [[212, "sparknlp.common.properties.HasGeneratorProperties.setNReturnSequences"]], "setnsequences() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNSequences"]], "setnthreads() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNThreads"]], "setnthreadsbatch() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatch"]], "setnthreadsbatchdraft() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatchDraft"]], "setnthreadsdraft() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsDraft"]], "setnubatch() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNUbatch"]], "setnokvoffload() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNoKvOffload"]], "setnorepeatngramsize() (hasgeneratorproperties method)": [[212, "sparknlp.common.properties.HasGeneratorProperties.setNoRepeatNgramSize"]], "setnumastrategy() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setNumaStrategy"]], "setpsplit() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setPSplit"]], "setpaddingside() (hasaudiofeatureproperties method)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingSide"]], "setpaddingvalue() (hasaudiofeatureproperties method)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingValue"]], "setpenalizenl() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setPenalizeNl"]], "setpenaltyprompt() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setPenaltyPrompt"]], "setpoolingtype() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setPoolingType"]], "setpresencepenalty() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setPresencePenalty"]], "setrepeatlastn() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatLastN"]], "setrepeatpenalty() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatPenalty"]], "setrepetitionpenalty() (hasgeneratorproperties method)": [[212, "sparknlp.common.properties.HasGeneratorProperties.setRepetitionPenalty"]], "setresample() (hasimagefeatureproperties method)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.setResample"]], "setrescalefactor() (hasrescalefactor method)": [[212, "sparknlp.common.properties.HasRescaleFactor.setRescaleFactor"]], "setreturnattentionmask() (hasaudiofeatureproperties method)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.setReturnAttentionMask"]], "setropefreqbase() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqBase"]], "setropefreqscale() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqScale"]], "setropescalingtype() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setRopeScalingType"]], "setsamplers() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setSamplers"]], "setsamplingrate() (hasaudiofeatureproperties method)": [[212, "sparknlp.common.properties.HasAudioFeatureProperties.setSamplingRate"]], "setseed() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setSeed"]], "setsize() (hasimagefeatureproperties method)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.setSize"]], "setstopstrings() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setStopStrings"]], "setsystemprompt() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setSystemPrompt"]], "settask() (hasgeneratorproperties method)": [[212, "sparknlp.common.properties.HasGeneratorProperties.setTask"]], "settemperature() (hasgeneratorproperties method)": [[212, "sparknlp.common.properties.HasGeneratorProperties.setTemperature"]], "settemperature() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setTemperature"]], "settensorsplit() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setTensorSplit"]], "settfsz() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setTfsZ"]], "setthreshold() (hasclassifieractivationproperties method)": [[212, "sparknlp.common.properties.HasClassifierActivationProperties.setThreshold"]], "settokenbias() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setTokenBias"]], "settokenidbias() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setTokenIdBias"]], "settopk() (hasgeneratorproperties method)": [[212, "sparknlp.common.properties.HasGeneratorProperties.setTopK"]], "settopk() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setTopK"]], "settopp() (hasgeneratorproperties method)": [[212, "sparknlp.common.properties.HasGeneratorProperties.setTopP"]], "settopp() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setTopP"]], "settypicalp() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setTypicalP"]], "setuseclstoken() (hasclstokenproperties method)": [[212, "sparknlp.common.properties.HasClsTokenProperties.setUseCLSToken"]], "setusechattemplate() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setUseChatTemplate"]], "setusemlock() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setUseMlock"]], "setusemmap() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setUseMmap"]], "setyarnattnfactor() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setYarnAttnFactor"]], "setyarnbetafast() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaFast"]], "setyarnbetaslow() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaSlow"]], "setyarnextfactor() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setYarnExtFactor"]], "setyarnorigctx() (hasllamacppproperties method)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.setYarnOrigCtx"]], "size (hasimagefeatureproperties attribute)": [[212, "sparknlp.common.properties.HasImageFeatureProperties.size"]], "sparknlp.common.properties": [[212, "module-sparknlp.common.properties"]], "stopstrings (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.stopStrings"]], "systemprompt (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.systemPrompt"]], "task (hasgeneratorproperties attribute)": [[212, "sparknlp.common.properties.HasGeneratorProperties.task"]], "temperature (hasgeneratorproperties attribute)": [[212, "sparknlp.common.properties.HasGeneratorProperties.temperature"]], "temperature (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.temperature"]], "tensorsplit (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.tensorSplit"]], "tfsz (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.tfsZ"]], "threshold (hasclassifieractivationproperties attribute)": [[212, "sparknlp.common.properties.HasClassifierActivationProperties.threshold"]], "topk (hasgeneratorproperties attribute)": [[212, "sparknlp.common.properties.HasGeneratorProperties.topK"]], "topk (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.topK"]], "topp (hasgeneratorproperties attribute)": [[212, "sparknlp.common.properties.HasGeneratorProperties.topP"]], "topp (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.topP"]], "typicalp (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.typicalP"]], "useclstoken (hasclstokenproperties attribute)": [[212, "sparknlp.common.properties.HasClsTokenProperties.useCLSToken"]], "usechattemplate (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.useChatTemplate"]], "usemlock (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.useMlock"]], "usemmap (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.useMmap"]], "yarnattnfactor (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.yarnAttnFactor"]], "yarnbetafast (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaFast"]], "yarnbetaslow (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaSlow"]], "yarnextfactor (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.yarnExtFactor"]], "yarnorigctx (hasllamacppproperties attribute)": [[212, "sparknlp.common.properties.HasLlamaCppProperties.yarnOrigCtx"]], "binary (readas attribute)": [[213, "sparknlp.common.read_as.ReadAs.BINARY"]], "readas (class in sparknlp.common.read_as)": [[213, "sparknlp.common.read_as.ReadAs"]], "spark (readas attribute)": [[213, "sparknlp.common.read_as.ReadAs.SPARK"]], "text (readas attribute)": [[213, "sparknlp.common.read_as.ReadAs.TEXT"]], "sparknlp.common.read_as": [[213, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[214, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[214, "module-sparknlp.common.recursive_annotator_approach"]], "hasstorage (class in sparknlp.common.storage)": [[215, "sparknlp.common.storage.HasStorage"]], "hasstoragemodel (class in sparknlp.common.storage)": [[215, "sparknlp.common.storage.HasStorageModel"]], "hasstorageoptions (class in sparknlp.common.storage)": [[215, "sparknlp.common.storage.HasStorageOptions"]], "hasstorageref (class in sparknlp.common.storage)": [[215, "sparknlp.common.storage.HasStorageRef"]], "enableinmemorystorage (hasstorageoptions attribute)": [[215, "sparknlp.common.storage.HasStorageOptions.enableInMemoryStorage"]], "getenableinmemorystorage() (hasstorageoptions method)": [[215, "sparknlp.common.storage.HasStorageOptions.getEnableInMemoryStorage"]], "getincludestorage() (hasstorageoptions method)": [[215, "sparknlp.common.storage.HasStorageOptions.getIncludeStorage"]], "getstoragepath() (hasstorage method)": [[215, "sparknlp.common.storage.HasStorage.getStoragePath"]], "getstorageref() (hasstorageref method)": [[215, "sparknlp.common.storage.HasStorageRef.getStorageRef"]], "includestorage (hasstorageoptions attribute)": [[215, "sparknlp.common.storage.HasStorageOptions.includeStorage"]], "loadstorage() (hasstoragemodel static method)": [[215, "sparknlp.common.storage.HasStorageModel.loadStorage"]], "loadstorages() (hasstoragemodel static method)": [[215, "sparknlp.common.storage.HasStorageModel.loadStorages"]], "savestorage() (hasstoragemodel method)": [[215, "sparknlp.common.storage.HasStorageModel.saveStorage"]], "setenableinmemorystorage() (hasstorageoptions method)": [[215, "sparknlp.common.storage.HasStorageOptions.setEnableInMemoryStorage"]], "setincludestorage() (hasstorageoptions method)": [[215, "sparknlp.common.storage.HasStorageOptions.setIncludeStorage"]], "setstoragepath() (hasstorage method)": [[215, "sparknlp.common.storage.HasStorage.setStoragePath"]], "setstorageref() (hasstorageref method)": [[215, "sparknlp.common.storage.HasStorageRef.setStorageRef"]], "sparknlp.common.storage": [[215, "module-sparknlp.common.storage"]], "storagepath (hasstorage attribute)": [[215, "sparknlp.common.storage.HasStorage.storagePath"]], "storageref (hasstorageref attribute)": [[215, "sparknlp.common.storage.HasStorageRef.storageRef"]], "externalresource() (in module sparknlp.common.utils)": [[216, "sparknlp.common.utils.ExternalResource"]], "regexrule() (in module sparknlp.common.utils)": [[216, "sparknlp.common.utils.RegexRule"]], "sparknlp.common.utils": [[216, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[217, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[217, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[217, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[217, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[217, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[217, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[217, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[217, "module-sparknlp.functions"]], "sparknlp.internal": [[218, "module-sparknlp.internal"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[219, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[219, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[219, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[219, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[220, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "outputannotatortype (annotatortransformer attribute)": [[220, "sparknlp.internal.annotator_transformer.AnnotatorTransformer.outputAnnotatorType"]], "sparknlp.internal.annotator_transformer": [[220, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[221, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "apply() (extendedjavawrapper method)": [[221, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.apply"]], "getdataframe() (extendedjavawrapper method)": [[221, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.getDataFrame"]], "new_java_array() (extendedjavawrapper method)": [[221, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "new_java_array_integer() (extendedjavawrapper method)": [[221, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_integer"]], "new_java_array_string() (extendedjavawrapper method)": [[221, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_string"]], "new_java_obj() (extendedjavawrapper method)": [[221, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_obj"]], "spark_version() (extendedjavawrapper method)": [[221, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.spark_version"]], "sparknlp.internal.extended_java_wrapper": [[221, "module-sparknlp.internal.extended_java_wrapper"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[222, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[222, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "getter_attrs (paramsgetterssetters attribute)": [[222, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getter_attrs"]], "setparamvalue() (paramsgetterssetters method)": [[222, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[222, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[223, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[223, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[223, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[223, "module-sparknlp.internal.recursive"]], "transform_recursive() (recursivetransformer method)": [[223, "sparknlp.internal.recursive.RecursiveTransformer.transform_recursive"]], "sparknlp.logging": [[224, "module-sparknlp.logging"]], "cometlogger (class in sparknlp.logging.comet)": [[225, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[225, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[225, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[225, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[225, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[225, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[225, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[225, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[225, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[225, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[225, "module-sparknlp.logging.comet"]], "sparknlp.pretrained": [[226, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[227, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[227, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "from_disk() (pretrainedpipeline static method)": [[227, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.from_disk"]], "fullannotate() (pretrainedpipeline method)": [[227, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[227, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[227, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[227, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[228, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[228, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[228, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[228, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[228, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[228, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[228, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[228, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[228, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[228, "module-sparknlp.pretrained.resource_downloader"]], "printprogress() (in module sparknlp.pretrained.utils)": [[229, "sparknlp.pretrained.utils.printProgress"]], "sparknlp.pretrained.utils": [[229, "module-sparknlp.pretrained.utils"]], "sparknlp.reader": [[230, "module-sparknlp.reader"]], "pdf_layout_text_stripper (textstrippertype attribute)": [[231, "sparknlp.reader.enums.TextStripperType.PDF_LAYOUT_TEXT_STRIPPER"]], "pdf_text_stripper (textstrippertype attribute)": [[231, "sparknlp.reader.enums.TextStripperType.PDF_TEXT_STRIPPER"]], "textstrippertype (class in sparknlp.reader.enums)": [[231, "sparknlp.reader.enums.TextStripperType"]], "sparknlp.reader.enums": [[231, "module-sparknlp.reader.enums"]], "pdftotext (class in sparknlp.reader.pdf_to_text)": [[232, "sparknlp.reader.pdf_to_text.PdfToText"]], "onlypagenum (pdftotext attribute)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.onlyPageNum"]], "pagenumcol (pdftotext attribute)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.pageNumCol"]], "partitionnum (pdftotext attribute)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.partitionNum"]], "setinputcol() (pdftotext method)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.setInputCol"]], "setonlypagenum() (pdftotext method)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.setOnlyPageNum"]], "setoutputcol() (pdftotext method)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.setOutputCol"]], "setpagenumcol() (pdftotext method)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.setPageNumCol"]], "setpartitionnum() (pdftotext method)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.setPartitionNum"]], "setsort() (pdftotext method)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.setSort"]], "setsplitpage() (pdftotext method)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.setSplitPage"]], "setstoresplittedpdf() (pdftotext method)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.setStoreSplittedPdf"]], "settextstripper() (pdftotext method)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.setTextStripper"]], "sort (pdftotext attribute)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.sort"]], "sparknlp.reader.pdf_to_text": [[232, "module-sparknlp.reader.pdf_to_text"]], "splitpage (pdftotext attribute)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.splitPage"]], "storesplittedpdf (pdftotext attribute)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.storeSplittedPdf"]], "textstripper (pdftotext attribute)": [[232, "sparknlp.reader.pdf_to_text.PdfToText.textStripper"]], "sparknlpreader (class in sparknlp.reader.sparknlp_reader)": [[233, "sparknlp.reader.sparknlp_reader.SparkNLPReader"]], "doc() (sparknlpreader method)": [[233, "sparknlp.reader.sparknlp_reader.SparkNLPReader.doc"]], "email() (sparknlpreader method)": [[233, "sparknlp.reader.sparknlp_reader.SparkNLPReader.email"]], "html() (sparknlpreader method)": [[233, "sparknlp.reader.sparknlp_reader.SparkNLPReader.html"]], "pdf() (sparknlpreader method)": [[233, "sparknlp.reader.sparknlp_reader.SparkNLPReader.pdf"]], "ppt() (sparknlpreader method)": [[233, "sparknlp.reader.sparknlp_reader.SparkNLPReader.ppt"]], "sparknlp.reader.sparknlp_reader": [[233, "module-sparknlp.reader.sparknlp_reader"]], "txt() (sparknlpreader method)": [[233, "sparknlp.reader.sparknlp_reader.SparkNLPReader.txt"]], "xls() (sparknlpreader method)": [[233, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xls"]], "sparknlp.training": [[234, "module-sparknlp.training"]], "conll (class in sparknlp.training.conll)": [[235, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[235, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[235, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[236, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[236, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[236, "module-sparknlp.training.conllu"]], "pos (class in sparknlp.training.pos)": [[237, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[237, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[237, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[238, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[238, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[238, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[239, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "readjsonfile() (spacytoannotation method)": [[239, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation.readJsonFile"]], "sparknlp.training.spacy_to_annotation": [[239, "module-sparknlp.training.spacy_to_annotation"]], "pushtohub (class in sparknlp.upload_to_hub)": [[241, "sparknlp.upload_to_hub.PushToHub"]], "check_for_required_info() (pushtohub method)": [[241, "sparknlp.upload_to_hub.PushToHub.check_for_required_info"]], "create_docs() (pushtohub method)": [[241, "sparknlp.upload_to_hub.PushToHub.create_docs"]], "list_of_tasks (pushtohub attribute)": [[241, "sparknlp.upload_to_hub.PushToHub.list_of_tasks"]], "push_to_hub() (pushtohub method)": [[241, "sparknlp.upload_to_hub.PushToHub.push_to_hub"]], "sparknlp.upload_to_hub": [[241, "module-sparknlp.upload_to_hub"]], "unzip_directory() (pushtohub method)": [[241, "sparknlp.upload_to_hub.PushToHub.unzip_directory"]], "zip_directory() (pushtohub method)": [[241, "sparknlp.upload_to_hub.PushToHub.zip_directory"]], "conllgenerator (class in sparknlp.util)": [[242, "sparknlp.util.CoNLLGenerator"]], "exportconllfiles() (conllgenerator static method)": [[242, "sparknlp.util.CoNLLGenerator.exportConllFiles"]], "get_config_path() (in module sparknlp.util)": [[242, "sparknlp.util.get_config_path"]], "sparknlp.util": [[242, "module-sparknlp.util"]]}})