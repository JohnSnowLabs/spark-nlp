Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp/annotation/index", "reference/autosummary/sparknlp/annotation_audio/index", "reference/autosummary/sparknlp/annotation_image/index", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/index", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index", "reference/autosummary/sparknlp/annotator/chunk2_doc/index", "reference/autosummary/sparknlp/annotator/chunker/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index", "reference/autosummary/sparknlp/annotator/coref/index", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/index", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index", "reference/autosummary/sparknlp/annotator/date2_chunk/index", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index", "reference/autosummary/sparknlp/annotator/dependency/index", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index", "reference/autosummary/sparknlp/annotator/document_normalizer/index", "reference/autosummary/sparknlp/annotator/document_token_splitter/index", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index", "reference/autosummary/sparknlp/annotator/er/index", "reference/autosummary/sparknlp/annotator/graph_extraction/index", "reference/autosummary/sparknlp/annotator/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/index", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index", "reference/autosummary/sparknlp/annotator/ld_dl/index", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index", "reference/autosummary/sparknlp/annotator/lemmatizer/index", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/index", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index", "reference/autosummary/sparknlp/annotator/n_gram_generator/index", "reference/autosummary/sparknlp/annotator/ner/index", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index", "reference/autosummary/sparknlp/annotator/normalizer/index", "reference/autosummary/sparknlp/annotator/openai/index", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index", "reference/autosummary/sparknlp/annotator/param/index", "reference/autosummary/sparknlp/annotator/pos/index", "reference/autosummary/sparknlp/annotator/pos/perceptron/index", "reference/autosummary/sparknlp/annotator/sentence/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index", "reference/autosummary/sparknlp/annotator/sentiment/index", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index", "reference/autosummary/sparknlp/annotator/similarity/index", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index", "reference/autosummary/sparknlp/annotator/spell_check/index", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index", "reference/autosummary/sparknlp/annotator/stemmer/index", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/index", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index", "reference/autosummary/sparknlp/annotator/token/tokenizer/index", "reference/autosummary/sparknlp/annotator/token2_chunk/index", "reference/autosummary/sparknlp/annotator/ws/index", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index", "reference/autosummary/sparknlp/base/audio_assembler/index", "reference/autosummary/sparknlp/base/doc2_chunk/index", "reference/autosummary/sparknlp/base/document_assembler/index", "reference/autosummary/sparknlp/base/embeddings_finisher/index", "reference/autosummary/sparknlp/base/finisher/index", "reference/autosummary/sparknlp/base/graph_finisher/index", "reference/autosummary/sparknlp/base/has_recursive_fit/index", "reference/autosummary/sparknlp/base/has_recursive_transform/index", "reference/autosummary/sparknlp/base/image_assembler/index", "reference/autosummary/sparknlp/base/index", "reference/autosummary/sparknlp/base/light_pipeline/index", "reference/autosummary/sparknlp/base/multi_document_assembler/index", "reference/autosummary/sparknlp/base/recursive_pipeline/index", "reference/autosummary/sparknlp/base/table_assembler/index", "reference/autosummary/sparknlp/base/token_assembler/index", "reference/autosummary/sparknlp/common/annotator_approach/index", "reference/autosummary/sparknlp/common/annotator_model/index", "reference/autosummary/sparknlp/common/annotator_properties/index", "reference/autosummary/sparknlp/common/annotator_type/index", "reference/autosummary/sparknlp/common/coverage_result/index", "reference/autosummary/sparknlp/common/index", "reference/autosummary/sparknlp/common/match_strategy/index", "reference/autosummary/sparknlp/common/properties/index", "reference/autosummary/sparknlp/common/read_as/index", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index", "reference/autosummary/sparknlp/common/storage/index", "reference/autosummary/sparknlp/common/utils/index", "reference/autosummary/sparknlp/functions/index", "reference/autosummary/sparknlp/index", "reference/autosummary/sparknlp/internal/annotator_java_ml/index", "reference/autosummary/sparknlp/internal/annotator_transformer/index", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index", "reference/autosummary/sparknlp/internal/index", "reference/autosummary/sparknlp/internal/params_getters_setters/index", "reference/autosummary/sparknlp/internal/recursive/index", "reference/autosummary/sparknlp/logging/comet/index", "reference/autosummary/sparknlp/logging/index", "reference/autosummary/sparknlp/pretrained/index", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index", "reference/autosummary/sparknlp/pretrained/resource_downloader/index", "reference/autosummary/sparknlp/pretrained/utils/index", "reference/autosummary/sparknlp/training/conll/index", "reference/autosummary/sparknlp/training/conllu/index", "reference/autosummary/sparknlp/training/index", "reference/autosummary/sparknlp/training/pos/index", "reference/autosummary/sparknlp/training/pub_tator/index", "reference/autosummary/sparknlp/training/spacy_to_annotation/index", "reference/autosummary/sparknlp/training/tfgraphs/index", "reference/autosummary/sparknlp/upload_to_hub/index", "reference/autosummary/sparknlp/util/index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp/annotation/index.rst", "reference/autosummary/sparknlp/annotation_audio/index.rst", "reference/autosummary/sparknlp/annotation_image/index.rst", "reference/autosummary/sparknlp/annotator/audio/hubert_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/index.rst", "reference/autosummary/sparknlp/annotator/audio/wav2vec2_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/audio/whisper_for_ctc/index.rst", "reference/autosummary/sparknlp/annotator/chunk2_doc/index.rst", "reference/autosummary/sparknlp/annotator/chunker/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/albert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bart_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/camembert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/deberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/distil_bert_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/longformer_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/mpnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/multi_classifier_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/sentiment_dl/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/tapas_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_question_answering/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlm_roberta_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_sequence_classification/index.rst", "reference/autosummary/sparknlp/annotator/classifier_dl/xlnet_for_token_classification/index.rst", "reference/autosummary/sparknlp/annotator/coref/index.rst", "reference/autosummary/sparknlp/annotator/coref/spanbert_coref/index.rst", "reference/autosummary/sparknlp/annotator/cv/clip_for_zero_shot_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/convnext_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/index.rst", "reference/autosummary/sparknlp/annotator/cv/swin_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/cv/vision_encoder_decoder_for_image_captioning/index.rst", "reference/autosummary/sparknlp/annotator/cv/vit_for_image_classification/index.rst", "reference/autosummary/sparknlp/annotator/date2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/dependency/dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/dependency/index.rst", "reference/autosummary/sparknlp/annotator/dependency/typed_dependency_parser/index.rst", "reference/autosummary/sparknlp/annotator/document_character_text_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_normalizer/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter/index.rst", "reference/autosummary/sparknlp/annotator/document_token_splitter_test/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/albert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/bge_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/camembert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/chunk_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/deberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/distil_bert_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/doc2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/e5_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/elmo_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/instructor_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/longformer_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mpnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/mxbai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/nomic_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/snowflake_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/uae_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/universal_sentence_encoder/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word2vec/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/word_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlm_roberta_sentence_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/embeddings/xlnet_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/er/entity_ruler/index.rst", "reference/autosummary/sparknlp/annotator/er/index.rst", "reference/autosummary/sparknlp/annotator/graph_extraction/index.rst", "reference/autosummary/sparknlp/annotator/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/keyword_extraction/yake_keyword_extraction/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/index.rst", "reference/autosummary/sparknlp/annotator/ld_dl/language_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/lemmatizer/index.rst", "reference/autosummary/sparknlp/annotator/matcher/big_text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/multi_date_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/regex_matcher/index.rst", "reference/autosummary/sparknlp/annotator/matcher/text_matcher/index.rst", "reference/autosummary/sparknlp/annotator/n_gram_generator/index.rst", "reference/autosummary/sparknlp/annotator/ner/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_approach/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_converter/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_crf/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_dl/index.rst", "reference/autosummary/sparknlp/annotator/ner/ner_overwriter/index.rst", "reference/autosummary/sparknlp/annotator/ner/zero_shot_ner_model/index.rst", "reference/autosummary/sparknlp/annotator/normalizer/index.rst", "reference/autosummary/sparknlp/annotator/openai/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_completion/index.rst", "reference/autosummary/sparknlp/annotator/openai/openai_embeddings/index.rst", "reference/autosummary/sparknlp/annotator/param/classifier_encoder/index.rst", "reference/autosummary/sparknlp/annotator/param/evaluation_dl_params/index.rst", "reference/autosummary/sparknlp/annotator/param/index.rst", "reference/autosummary/sparknlp/annotator/pos/index.rst", "reference/autosummary/sparknlp/annotator/pos/perceptron/index.rst", "reference/autosummary/sparknlp/annotator/sentence/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentence/sentence_detector_dl/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/sentiment_detector/index.rst", "reference/autosummary/sparknlp/annotator/sentiment/vivekn_sentiment/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/auto_gguf_model/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/bart_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/cpm_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/gpt2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/llama3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/m2m100_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/marian_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/mistral_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/nllb_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi2_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/phi3_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/qwen_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/starcoder_transformer/index.rst", "reference/autosummary/sparknlp/annotator/seq2seq/t5_transformer/index.rst", "reference/autosummary/sparknlp/annotator/similarity/document_similarity_ranker/index.rst", "reference/autosummary/sparknlp/annotator/similarity/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/context_spell_checker/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/norvig_sweeting/index.rst", "reference/autosummary/sparknlp/annotator/spell_check/symmetric_delete/index.rst", "reference/autosummary/sparknlp/annotator/stemmer/index.rst", "reference/autosummary/sparknlp/annotator/stop_words_cleaner/index.rst", "reference/autosummary/sparknlp/annotator/tf_ner_dl_graph_builder/index.rst", "reference/autosummary/sparknlp/annotator/token/chunk_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/index.rst", "reference/autosummary/sparknlp/annotator/token/recursive_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/regex_tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token/tokenizer/index.rst", "reference/autosummary/sparknlp/annotator/token2_chunk/index.rst", "reference/autosummary/sparknlp/annotator/ws/index.rst", "reference/autosummary/sparknlp/annotator/ws/word_segmenter/index.rst", "reference/autosummary/sparknlp/base/audio_assembler/index.rst", "reference/autosummary/sparknlp/base/doc2_chunk/index.rst", "reference/autosummary/sparknlp/base/document_assembler/index.rst", "reference/autosummary/sparknlp/base/embeddings_finisher/index.rst", "reference/autosummary/sparknlp/base/finisher/index.rst", "reference/autosummary/sparknlp/base/graph_finisher/index.rst", "reference/autosummary/sparknlp/base/has_recursive_fit/index.rst", "reference/autosummary/sparknlp/base/has_recursive_transform/index.rst", "reference/autosummary/sparknlp/base/image_assembler/index.rst", "reference/autosummary/sparknlp/base/index.rst", "reference/autosummary/sparknlp/base/light_pipeline/index.rst", "reference/autosummary/sparknlp/base/multi_document_assembler/index.rst", "reference/autosummary/sparknlp/base/recursive_pipeline/index.rst", "reference/autosummary/sparknlp/base/table_assembler/index.rst", "reference/autosummary/sparknlp/base/token_assembler/index.rst", "reference/autosummary/sparknlp/common/annotator_approach/index.rst", "reference/autosummary/sparknlp/common/annotator_model/index.rst", "reference/autosummary/sparknlp/common/annotator_properties/index.rst", "reference/autosummary/sparknlp/common/annotator_type/index.rst", "reference/autosummary/sparknlp/common/coverage_result/index.rst", "reference/autosummary/sparknlp/common/index.rst", "reference/autosummary/sparknlp/common/match_strategy/index.rst", "reference/autosummary/sparknlp/common/properties/index.rst", "reference/autosummary/sparknlp/common/read_as/index.rst", "reference/autosummary/sparknlp/common/recursive_annotator_approach/index.rst", "reference/autosummary/sparknlp/common/storage/index.rst", "reference/autosummary/sparknlp/common/utils/index.rst", "reference/autosummary/sparknlp/functions/index.rst", "reference/autosummary/sparknlp/index.rst", "reference/autosummary/sparknlp/internal/annotator_java_ml/index.rst", "reference/autosummary/sparknlp/internal/annotator_transformer/index.rst", "reference/autosummary/sparknlp/internal/extended_java_wrapper/index.rst", "reference/autosummary/sparknlp/internal/index.rst", "reference/autosummary/sparknlp/internal/params_getters_setters/index.rst", "reference/autosummary/sparknlp/internal/recursive/index.rst", "reference/autosummary/sparknlp/logging/comet/index.rst", "reference/autosummary/sparknlp/logging/index.rst", "reference/autosummary/sparknlp/pretrained/index.rst", "reference/autosummary/sparknlp/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparknlp/pretrained/resource_downloader/index.rst", "reference/autosummary/sparknlp/pretrained/utils/index.rst", "reference/autosummary/sparknlp/training/conll/index.rst", "reference/autosummary/sparknlp/training/conllu/index.rst", "reference/autosummary/sparknlp/training/index.rst", "reference/autosummary/sparknlp/training/pos/index.rst", "reference/autosummary/sparknlp/training/pub_tator/index.rst", "reference/autosummary/sparknlp/training/spacy_to_annotation/index.rst", "reference/autosummary/sparknlp/training/tfgraphs/index.rst", "reference/autosummary/sparknlp/upload_to_hub/index.rst", "reference/autosummary/sparknlp/util/index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotation_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.hubert_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.wav2vec2_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.audio.whisper_for_ctc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.longformer_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.mpnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.multi_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.sentiment_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.tapas_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.classifier_dl.xlnet_for_token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.coref.spanbert_coref</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.clip_for_zero_shot_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.convnext_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.swin_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.cv.vit_for_image_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.date2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.dependency.typed_dependency_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_character_text_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.document_token_splitter_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.albert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.bge_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.camembert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.deberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.distil_bert_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.doc2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.e5_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.elmo_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.instructor_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.longformer_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mpnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.mxbai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.nomic_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.snowflake_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.uae_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.universal_sentence_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word2vec</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.embeddings.xlnet_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er.entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.graph_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.keyword_extraction.yake_keyword_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ld_dl.language_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.lemmatizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.big_text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.multi_date_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.matcher.text_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.n_gram_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_crf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.ner_overwriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ner.zero_shot_ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_completion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.openai.openai_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.classifier_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param.evaluation_dl_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.pos.perceptron</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentence.sentence_detector_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.sentiment_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.sentiment.vivekn_sentiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.auto_gguf_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.bart_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.cpm_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.gpt2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.llama3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.m2m100_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.marian_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.mistral_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.nllb_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi2_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.phi3_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.qwen_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.starcoder_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.seq2seq.t5_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity.document_similarity_ranker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.similarity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.context_spell_checker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.norvig_sweeting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.spell_check.symmetric_delete</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stemmer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.stop_words_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.tf_ner_dl_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.chunk_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.recursive_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.regex_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.token2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.annotator.ws.word_segmenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.audio_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.doc2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.embeddings_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.graph_finisher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_fit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.has_recursive_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.image_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.light_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.multi_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.recursive_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.table_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.base.token_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.coverage_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.match_strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.read_as</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.recursive_annotator_approach</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.storage</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_java_ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.annotator_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.params_getters_setters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.internal.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging.comet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.pretrained.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conll</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.conllu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.pub_tator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.spacy_to_annotation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.training.tfgraphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.upload_to_hub</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp.util</span></code>", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 35, 36, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 105, 106, 107, 110, 111, 112, 115, 116, 117, 118, 120, 122, 124, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 160, 162, 163, 164, 165, 167, 168, 170, 171, 173, 176, 178, 179, 180, 181, 182, 184, 185, 189, 190, 196, 197, 201, 202, 203, 206, 207, 212, 214, 218, 219, 222, 223, 224, 226, 227, 228], "can": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 110, 115, 116, 117, 118, 119, 122, 123, 128, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 165, 167, 170, 171, 179, 180, 181, 190, 194, 203, 206, 207, 209, 210, 212, 219, 221, 223, 224, 226, 227, 228, 229], "quick": [0, 219, 224], "refer": [0, 1, 5, 8, 54, 56, 58, 60, 69, 70, 71, 73, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 90, 91, 92, 94, 95, 96, 102, 119, 122, 123, 130, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 167, 169, 170, 179, 190, 223, 225, 226], "how": [0, 1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60, 62, 64, 65, 67, 69, 70, 72, 73, 74, 75, 76, 78, 79, 82, 85, 86, 88, 90, 94, 96, 97, 99, 104, 105, 106, 110, 111, 115, 116, 117, 120, 122, 125, 130, 133, 135, 142, 155, 156, 163, 164, 167, 170, 173, 179, 189, 191, 194, 196, 209, 210, 214, 219, 223, 228], "set": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 159, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 181, 182, 184, 185, 190, 194, 196, 201, 202, 203, 207, 209, 219, 223, 226, 227], "up": [0, 1, 5, 8, 24, 40, 59, 68, 72, 77, 78, 82, 83, 88, 90, 92, 102, 122, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190, 196, 219, 223, 226, 227], "your": [0, 1, 24, 40, 45, 62, 67, 76, 77, 86, 88, 92, 105, 106, 110, 111, 115, 116, 117, 120, 122, 123, 128, 133, 134, 135, 153, 155, 160, 162, 167, 171, 221, 223, 226, 227, 229], "environ": [0, 68, 220], "pypi": 0, "pip": 0, "anaconda": 0, "c": [0, 73, 77, 92, 102, 142, 143, 167], "johnsnowlab": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 66, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 104, 105, 106, 110, 111, 116, 117, 119, 120, 122, 123, 128, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 160, 162, 164, 167, 171, 172, 181, 196], "load": [0, 1, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 102, 104, 105, 106, 111, 116, 117, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167, 176, 206, 207, 214, 223, 226], "shell": 0, "packag": [0, 69, 75, 135, 203, 220, 221], "com": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 104, 105, 106, 110, 111, 116, 117, 119, 120, 122, 123, 128, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 160, 162, 164, 167, 181, 196], "nlp_2": [0, 196], "12": [0, 69, 94, 95, 96, 102, 107, 109, 115, 128, 153, 165, 178, 195, 196, 206, 212, 214, 222], "pyspark": [0, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 118, 120, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 176, 178, 179, 181, 182, 195, 196, 199, 202, 203, 206, 209, 210, 212, 213, 223, 224], "submit": [0, 203, 219], "extern": [0, 102, 105, 110, 111, 117, 153, 159, 180, 194, 209, 210, 212, 213], "jar": [0, 196], "after": [0, 61, 62, 64, 77, 86, 87, 92, 107, 109, 115, 122, 137, 144, 162, 182, 203, 222, 223], "compil": 0, "build": [0, 75, 76, 86, 87, 99, 102, 106, 138, 140, 142, 146, 149, 203, 219], "sbt": 0, "assembli": 0, "i": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 181, 182, 194, 195, 196, 202, 203, 207, 209, 212, 213, 214, 219, 220, 222, 223, 224, 226, 227, 228, 229], "built": [0, 24, 40, 137, 179], "top": [0, 5, 7, 8, 11, 12, 13, 16, 17, 18, 20, 21, 22, 25, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 39, 41, 42, 43, 47, 48, 49, 51, 52, 56, 58, 59, 69, 102, 122, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 179, 190], "apach": [0, 85, 179, 196], "x": [0, 40, 195, 209, 229], "For": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 119, 120, 122, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 164, 167, 170, 171, 172, 179, 182, 190, 203, 206, 207, 213, 219, 220, 222, 223, 224, 225, 226, 227], "you": [0, 14, 15, 19, 32, 44, 50, 62, 64, 65, 67, 68, 72, 74, 76, 78, 85, 86, 88, 99, 107, 118, 122, 141, 143, 146, 171, 173, 178, 196, 203, 207, 212, 214, 219, 221, 223, 224, 227, 228, 229], "need": [0, 5, 7, 8, 10, 14, 62, 64, 68, 72, 76, 78, 85, 86, 93, 97, 99, 102, 107, 110, 116, 117, 120, 125, 128, 131, 134, 135, 138, 142, 145, 146, 153, 155, 156, 163, 164, 168, 176, 178, 203, 207, 209, 210, 212, 219, 221, 223, 224, 227, 229], "java": [0, 104, 151, 183, 184, 192, 198, 199, 202, 207], "8": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 56, 62, 64, 66, 69, 70, 71, 72, 73, 75, 76, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 94, 95, 96, 107, 112, 117, 118, 122, 123, 125, 138, 147, 153, 165, 167, 209, 214], "ar": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60, 62, 64, 65, 68, 69, 70, 73, 75, 76, 79, 81, 82, 84, 86, 89, 90, 91, 93, 94, 95, 96, 97, 99, 102, 104, 105, 107, 110, 112, 115, 117, 118, 119, 120, 122, 128, 130, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 157, 159, 167, 171, 178, 180, 181, 189, 190, 191, 195, 196, 203, 207, 213, 214, 219, 220, 221, 222, 223, 224, 227, 228, 229], "note": [0, 5, 7, 8, 14, 15, 19, 24, 32, 40, 44, 45, 50, 59, 67, 69, 72, 76, 78, 79, 83, 86, 88, 93, 94, 96, 102, 117, 122, 135, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 178, 196, 228], "sinc": [0, 66, 68, 83, 102, 138, 140, 196, 223, 224, 228], "version": [0, 8, 66, 72, 76, 78, 83, 124, 125, 141, 147, 148, 159, 185, 190, 196, 201, 202, 206, 207, 223, 228], "6": [0, 24, 45, 58, 70, 71, 75, 79, 102, 106, 111, 112, 118, 123, 128, 135, 136, 148, 155, 165, 196, 210, 214, 223], "deprec": [0, 196], "If": [0, 8, 12, 14, 15, 17, 19, 21, 23, 24, 26, 28, 30, 32, 35, 38, 40, 42, 44, 45, 48, 50, 51, 56, 58, 59, 60, 68, 88, 93, 97, 104, 107, 109, 115, 116, 117, 120, 125, 130, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 159, 190, 196, 202, 203, 207, 219, 221, 223], "consid": [0, 65, 93, 99, 102, 122, 135, 141, 143, 153, 155, 156, 158, 162, 196, 207], "stick": [0, 196], "lower": [0, 66, 69, 102, 122, 151, 153, 169, 196], "7": [0, 9, 45, 58, 70, 71, 75, 107, 109, 123, 128, 138, 140, 144, 146, 147, 172, 212, 214, 222], "we": [0, 5, 7, 8, 24, 40, 56, 58, 60, 69, 70, 71, 73, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 90, 91, 92, 94, 95, 96, 102, 116, 117, 120, 122, 131, 135, 136, 138, 140, 142, 143, 145, 146, 147, 148, 149, 150, 153, 155, 164, 178, 195, 219, 222, 223, 224, 227, 228, 229], "recommend": [0, 59, 79, 96, 122, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150], "4": [0, 5, 8, 70, 71, 72, 75, 78, 79, 81, 82, 83, 85, 93, 110, 116, 118, 122, 123, 128, 135, 136, 138, 142, 145, 147, 149, 159, 165, 210, 214], "It": [0, 8, 12, 14, 15, 17, 19, 23, 24, 26, 28, 30, 32, 35, 40, 42, 44, 45, 46, 48, 50, 51, 55, 56, 58, 59, 65, 66, 68, 70, 71, 73, 75, 76, 77, 82, 86, 87, 92, 94, 95, 97, 102, 112, 134, 135, 136, 137, 143, 146, 148, 151, 153, 155, 156, 162, 172, 178, 207, 222, 227], "have": [0, 5, 14, 15, 19, 24, 32, 40, 44, 45, 50, 67, 68, 69, 73, 76, 81, 86, 87, 93, 102, 110, 112, 115, 116, 117, 118, 122, 128, 130, 131, 137, 138, 140, 141, 145, 146, 147, 148, 156, 165, 182, 198, 223, 224, 227], "basic": [0, 58, 102, 130, 222], "knowledg": [0, 76, 102, 146, 147, 148, 173], "framework": [0, 7, 68, 135, 136, 143, 150], "work": [0, 8, 56, 76, 81, 82, 90, 104, 122, 135, 136, 140, 142, 143, 146, 150, 160, 222, 224, 228], "befor": [0, 66, 68, 93, 107, 109, 136, 150, 151, 155, 163, 167, 184, 202, 219], "pleas": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 70, 71, 72, 73, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 104, 105, 106, 107, 110, 111, 116, 117, 120, 128, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 160, 162, 167, 170, 179, 180, 207, 220, 221, 225, 228], "document": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 178, 179, 181, 182, 203, 206, 209, 210, 212, 214, 219, 223, 224, 226, 227, 228], "first": [0, 2, 75, 77, 78, 79, 81, 85, 92, 94, 95, 102, 110, 116, 117, 118, 130, 136, 143, 144, 145, 149, 150, 151, 153, 158, 163, 171, 182, 189, 219, 223, 224, 228], "let": [0, 76, 122, 162, 223], "": [0, 1, 11, 14, 15, 16, 19, 20, 23, 25, 28, 29, 32, 34, 37, 41, 44, 47, 50, 56, 58, 59, 60, 66, 68, 69, 72, 73, 75, 76, 77, 78, 82, 85, 86, 87, 92, 94, 95, 97, 102, 110, 117, 120, 122, 134, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 162, 163, 164, 167, 168, 172, 178, 183, 184, 190, 192, 195, 198, 202, 203, 219, 222, 223, 224, 227], "make": [0, 55, 56, 58, 66, 73, 82, 83, 94, 95, 102, 122, 123, 131, 134, 135, 136, 141, 144, 149, 155, 225, 229], "sure": [0, 134, 135], "oracl": 0, "openjdk": 0, "1": [0, 5, 8, 9, 10, 12, 14, 15, 17, 19, 21, 23, 24, 26, 28, 30, 32, 35, 38, 40, 42, 44, 45, 48, 50, 51, 54, 56, 58, 59, 61, 62, 64, 67, 69, 70, 71, 75, 77, 79, 81, 87, 92, 93, 94, 95, 96, 102, 106, 107, 109, 110, 111, 112, 115, 116, 117, 119, 122, 123, 124, 125, 130, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 159, 163, 167, 171, 172, 185, 190, 196, 201, 202, 203, 206, 207, 209, 210, 213, 214, 219, 222, 223, 227, 228], "0_292": 0, "creat": [0, 2, 3, 4, 24, 40, 45, 67, 68, 70, 71, 77, 86, 89, 92, 93, 99, 117, 122, 123, 125, 128, 135, 142, 145, 160, 167, 178, 180, 195, 209, 210, 212, 213, 223, 224, 227, 229], "new": [0, 2, 3, 4, 9, 45, 54, 58, 61, 69, 70, 71, 75, 79, 81, 82, 93, 96, 118, 119, 122, 124, 125, 135, 136, 138, 141, 146, 150, 153, 159, 172, 185, 190, 201, 202, 222, 223], "manag": [0, 102, 207, 220], "all": [0, 2, 3, 4, 8, 12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 46, 48, 50, 51, 58, 59, 65, 66, 69, 70, 71, 73, 84, 88, 89, 90, 93, 96, 97, 100, 104, 107, 117, 120, 122, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 158, 163, 167, 171, 173, 189, 190, 203, 207, 218, 223, 228], "depend": [0, 2, 54, 73, 83, 88, 96, 97, 99, 100, 102, 104, 117, 143, 153, 167, 196], "Then": [0, 24, 40, 116, 117, 142, 145, 182, 203, 223], "sparknlp": [0, 219, 222, 223, 224, 225, 227, 228, 229], "n": [0, 95, 102, 112, 115, 116, 117, 122, 130, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 162, 178, 181, 190, 195, 206], "y": [0, 40, 67], "activ": [0, 12, 14, 15, 17, 19, 21, 23, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 102, 148], "jupyt": [0, 151, 203, 219], "now": [0, 73, 131, 178, 224], "should": [0, 2, 3, 4, 10, 24, 40, 45, 56, 58, 59, 60, 65, 68, 72, 77, 78, 85, 92, 94, 102, 104, 111, 112, 116, 117, 122, 125, 130, 131, 135, 143, 151, 153, 163, 178, 184, 185, 198, 202, 206, 209, 210], "readi": [0, 24, 206, 223], "notebook": [0, 135, 149, 151, 203, 219], "run": [0, 68, 76, 102, 151, 203, 207, 220, 228], "also": [0, 24, 40, 45, 55, 56, 58, 59, 60, 66, 69, 79, 82, 93, 94, 95, 97, 99, 102, 107, 110, 115, 116, 117, 124, 125, 131, 134, 135, 136, 137, 147, 149, 158, 178, 181, 185, 190, 201, 219, 223, 224, 225, 226, 228], "python3": 0, "sourc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 206, 207, 209, 210, 212, 213, 214, 220], "bin": 0, "A": [0, 5, 7, 45, 54, 56, 68, 69, 86, 87, 93, 97, 102, 105, 106, 110, 111, 112, 119, 120, 122, 123, 133, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 163, 164, 190, 203, 212, 221, 223, 229], "retriev": [0, 72, 78, 81, 89, 93, 105, 151, 155, 156, 157, 203, 206, 219, 223, 224], "import": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 118, 120, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 176, 178, 179, 180, 181, 182, 195, 203, 206, 209, 210, 212, 213, 214, 219, 222, 223, 226, 227, 228, 229], "manual": [0, 222], "sparksess": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 106, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 196, 209, 210, 212, 213], "becaus": [0, 122, 133, 151, 184, 202], "other": [0, 5, 9, 40, 56, 59, 67, 73, 84, 85, 88, 89, 90, 91, 99, 102, 120, 133, 135, 136, 138, 142, 149, 150, 153, 160, 162, 171, 172, 223], "configur": [0, 56, 68, 88, 164, 196], "includ": [0, 58, 66, 68, 70, 71, 77, 79, 90, 92, 94, 95, 96, 99, 102, 107, 115, 116, 117, 122, 136, 138, 140, 147, 148, 149, 150, 151, 153, 172, 203, 213, 220, 222, 223, 224, 229], "them": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60, 69, 70, 73, 75, 76, 82, 86, 94, 96, 97, 99, 102, 107, 110, 131, 141, 143, 149, 153, 158, 167, 180, 182, 223, 224], "builder": [0, 159, 196], "appnam": [0, 196], "master": [0, 196], "local": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 102, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 158, 178, 196, 206, 227], "config": [0, 196, 220], "driver": [0, 196], "memori": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 69, 79, 93, 135, 196], "16g": [0, 196], "serial": [0, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 97, 104, 117, 124, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 196], "org": [0, 115, 116, 117, 118, 135, 136, 167, 178, 195, 196, 206, 209, 220, 229], "kryoseri": [0, 196], "buffer": [0, 71, 93, 196], "max": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 69, 70, 71, 72, 73, 75, 76, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 94, 95, 96, 102, 151, 156, 196], "2000m": [0, 196], "maxresults": [0, 196], "getorcr": [0, 196], "main": [1, 97, 135, 151, 164, 222, 226, 229], "page": [1, 66, 138, 206, 218, 226, 228], "github": [1, 75, 81, 85, 86, 90, 143, 149, 206], "issu": [1, 90, 167], "exampl": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 195, 203, 206, 207, 209, 210, 212, 213, 214, 219, 222, 223, 224, 226, 227, 228, 229], "model": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 104, 105, 106, 110, 111, 115, 116, 117, 119, 120, 122, 123, 125, 128, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 159, 160, 162, 164, 167, 184, 190, 196, 202, 203, 206, 207, 219, 220, 222, 226, 228, 229], "hub": [1, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 104, 105, 116, 117, 128, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 167, 207], "welcom": [1, 5, 7, 8], "python": [1, 104, 196], "contain": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 35, 36, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 122, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 217, 219, 222, 223], "inform": [1, 62, 64, 81, 83, 93, 94, 102, 107, 115, 135, 136, 153, 170, 179, 213, 219, 220, 221, 222, 223, 229], "us": [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 119, 122, 123, 125, 128, 130, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 159, 163, 164, 165, 167, 169, 170, 171, 172, 178, 179, 180, 181, 182, 189, 190, 195, 196, 203, 206, 207, 209, 210, 212, 213, 220, 221, 222, 223, 224, 226], "librari": [1, 55, 56, 58, 59, 60, 104, 135, 169, 170, 171, 179, 182, 228], "get": [1, 8, 24, 40, 102, 114, 128, 135, 151, 153, 159, 164, 167, 168, 170, 171, 172, 176, 178, 179, 185, 190, 201, 219, 223, 228, 229], "start": [1, 5, 11, 16, 20, 25, 29, 34, 37, 41, 47, 82, 99, 102, 116, 117, 131, 135, 169, 196, 203, 219, 222, 224, 227, 228], "cheat": 1, "sheet": [1, 66], "requir": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 60, 61, 62, 64, 68, 69, 71, 72, 75, 78, 79, 85, 91, 94, 95, 102, 117, 120, 134, 153, 165, 167, 169, 171, 182, 222, 223, 224], "instal": [1, 203, 221], "session": [1, 196, 209, 210, 212, 213], "from": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 124, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 184, 190, 195, 196, 199, 202, 203, 206, 207, 209, 210, 212, 213, 214, 219, 222, 223, 224, 227, 228, 229], "user": [1, 115, 116, 122, 123, 135, 137, 141, 144, 164, 180, 196, 203, 219], "guid": [1, 220], "annot": [1, 3, 4, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 194, 195, 196, 197, 198, 200, 202, 203, 206, 207, 208, 212, 214, 219, 220, 225, 226, 227, 228, 229], "own": [1, 24, 40, 45, 62, 68, 77, 92, 105, 106, 110, 111, 116, 117, 120, 128, 133, 134, 153, 155, 160, 162, 167, 226, 227, 229], "pipelin": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 118, 119, 120, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 176, 178, 179, 180, 181, 182, 196, 202, 203, 205, 206, 207, 208, 220, 222, 223, 226], "pretrain": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 104, 105, 106, 107, 110, 111, 116, 117, 118, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 164, 167, 171, 172, 178, 195, 196, 203, 219, 222, 226], "dataset": [1, 24, 40, 45, 62, 64, 73, 77, 78, 81, 82, 83, 86, 87, 90, 92, 93, 102, 104, 116, 117, 125, 131, 138, 141, 142, 145, 147, 149, 153, 167, 202, 206, 209, 210, 212, 213, 226], "train": [1, 5, 8, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 35, 36, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 83, 85, 86, 87, 91, 92, 94, 95, 96, 102, 104, 105, 106, 110, 111, 114, 116, 117, 120, 124, 125, 128, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 153, 155, 156, 160, 162, 167, 169, 178, 196, 203, 206, 219, 223, 224, 226, 227], "light": [1, 5, 76, 96, 102, 178, 226, 228], "helper": [1, 128, 167, 173, 195, 212, 213, 214, 226, 229], "function": [1, 79, 90, 93, 135, 136, 150, 171, 207, 218, 226], "third": [1, 130, 158, 204, 209], "parti": [1, 204], "project": [1, 102, 135, 143, 149, 151, 203, 220], "log": [1, 24, 40, 45, 117, 122, 125, 131, 138, 196], "api": [1, 122, 123, 219, 223, 226], "modul": [1, 33, 63, 80, 98, 100, 101, 103, 108, 113, 121, 126, 127, 129, 132, 139, 154, 161, 166, 177, 188, 200, 205, 211], "data": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 124, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 176, 178, 179, 180, 181, 182, 195, 203, 206, 209, 210, 211, 212, 213, 220, 222, 223, 227, 228, 229], "format": [2, 3, 4, 8, 55, 56, 58, 59, 60, 62, 64, 97, 99, 105, 106, 107, 109, 110, 111, 116, 117, 120, 125, 133, 136, 147, 150, 155, 156, 164, 167, 168, 170, 172, 173, 176, 179, 181, 209, 210, 212, 213, 214, 220, 229], "annotatortyp": [2, 3, 4, 74, 112, 169, 170, 176, 179, 222], "begin": [2, 54, 115, 138, 162, 164, 169, 170, 179, 195, 222], "end": [2, 11, 16, 20, 25, 29, 34, 37, 41, 47, 54, 117, 122, 123, 131, 135, 136, 137, 150, 162, 164, 167, 170, 179, 195, 203, 209, 219, 222, 224], "result": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 181, 182, 195, 196, 203, 206, 209, 210, 214, 219, 220, 222, 223, 224, 227, 228], "metadata": [2, 3, 4, 46, 54, 61, 102, 111, 116, 117, 119, 128, 135, 170, 172, 176, 178, 179, 195, 203, 207, 222, 224], "embed": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 99, 100, 116, 117, 118, 123, 135, 137, 151, 170, 171, 172, 178, 179, 190, 195, 196, 202, 206, 222], "repres": [2, 3, 4, 62, 64, 69, 75, 81, 84, 89, 90, 96, 97, 99, 106, 111, 112, 122, 123, 137, 144, 164, 203, 206, 223], "output": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 181, 182, 185, 190, 195, 196, 203, 212, 219, 222, 223, 224], "spark": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 118, 119, 120, 123, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 188, 191, 195, 196, 198, 199, 200, 203, 206, 207, 209, 210, 212, 213, 214, 218, 220, 221, 222, 223, 225, 226, 227, 229], "nlp": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 66, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 104, 105, 106, 110, 111, 116, 117, 118, 119, 120, 128, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 160, 162, 164, 167, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 188, 196, 200, 203, 206, 207, 209, 210, 212, 213, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229], "detail": [2, 3, 4, 8, 59, 94, 95, 102, 119, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 181, 182, 185, 190, 194, 195, 196, 201, 202, 203, 206, 207, 209, 210, 212, 213], "annotator_typ": [2, 3, 4], "str": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 159, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 181, 182, 185, 190, 194, 195, 196, 201, 203, 206, 207, 209, 210, 212, 213], "The": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 160, 163, 164, 167, 170, 172, 178, 179, 181, 190, 195, 196, 203, 206, 207, 209, 210, 212, 213, 214, 219, 222, 223, 224, 226, 227, 229], "type": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 181, 182, 195, 197, 206, 212, 222, 223, 226], "possibl": [2, 3, 4, 74, 76, 94, 95, 97, 130, 153, 156, 170, 179, 189, 191, 203, 219], "valu": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 71, 74, 79, 81, 84, 89, 90, 91, 94, 97, 99, 102, 104, 105, 107, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 128, 130, 131, 134, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 158, 159, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 181, 182, 185, 189, 190, 191, 201, 203, 219, 229], "token": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 59, 62, 64, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 102, 105, 106, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 125, 128, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 158, 165, 167, 169, 171, 178, 180, 182, 190, 196, 206, 209, 213, 214, 223, 227, 228], "wordpiec": 2, "word_embed": [2, 69, 70, 73, 74, 75, 76, 79, 80, 82, 86, 88, 92, 94, 96, 100, 116, 117, 125], "sentence_embed": [2, 24, 40, 45, 71, 72, 77, 78, 80, 81, 83, 84, 85, 87, 89, 90, 91, 95, 100, 123, 151, 203, 219, 223], "categori": [2, 12, 14, 15, 17, 19, 21, 23, 24, 26, 28, 30, 32, 35, 38, 40, 42, 44, 45, 48, 50, 51, 55, 56, 58, 60, 203, 219, 223], "date": [2, 61, 107, 109, 110], "entiti": [2, 9, 13, 18, 22, 27, 31, 36, 39, 43, 49, 52, 54, 58, 61, 73, 97, 98, 99, 106, 111, 113, 114, 115, 116, 117, 118, 119, 160, 165, 172, 178, 206], "sentiment": [2, 24, 40, 45, 79, 96, 100, 150, 196, 223, 224], "po": [2, 10, 12, 15, 17, 19, 21, 26, 28, 30, 32, 35, 42, 44, 48, 50, 51, 62, 64, 99, 100, 116, 117, 162, 167, 178, 195, 196, 206, 209, 211, 222, 226, 227, 228], "chunk": [2, 9, 10, 11, 16, 20, 25, 29, 34, 37, 41, 46, 47, 61, 65, 67, 74, 77, 92, 97, 102, 106, 110, 111, 112, 115, 135, 160, 165, 169, 172, 195, 203, 213, 219, 229], "named_ent": [2, 13, 18, 22, 27, 31, 36, 39, 43, 49, 52, 99, 115, 116, 117, 118, 119, 125, 178, 206], "negex": 2, "labeled_depend": [2, 64], "languag": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 111, 116, 117, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167, 169, 179, 182, 190, 207, 223], "keyword": [2, 101, 102, 133], "dummi": [2, 66], "int": [2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 62, 64, 65, 67, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 99, 102, 104, 107, 112, 114, 116, 117, 120, 122, 124, 125, 128, 130, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 159, 163, 164, 167, 190, 196, 203, 209], "index": [2, 84, 89, 90, 102, 106, 163, 196, 209], "charact": [2, 66, 79, 82, 97, 104, 110, 112, 120, 130, 131, 153, 155, 156, 163, 164, 167, 172], "under": [2, 76, 83, 85, 96, 102, 149, 196], "last": [2, 84, 89, 90, 107, 109, 135, 160, 214, 227], "string": [2, 8, 24, 40, 45, 54, 62, 66, 97, 110, 112, 118, 120, 131, 135, 150, 156, 158, 162, 169, 170, 172, 176, 178, 179, 227], "dict": [2, 3, 4, 62, 64, 97, 105, 106, 110, 111, 116, 118, 119, 120, 122, 125, 133, 135, 153, 155, 156, 164, 178, 194, 196, 202, 203, 206], "associ": [2, 3, 4, 40, 91, 97, 110, 115, 122, 203], "list": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 65, 66, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 91, 94, 95, 96, 97, 99, 102, 104, 107, 110, 114, 115, 117, 118, 119, 120, 122, 124, 130, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 158, 159, 162, 164, 171, 172, 178, 179, 185, 195, 202, 203, 206, 207, 214, 218, 223], "vector": [2, 40, 70, 71, 72, 74, 75, 77, 78, 79, 91, 92, 93, 151, 171, 172, 222], "where": [2, 40, 75, 79, 97, 102, 105, 106, 110, 111, 112, 122, 128, 131, 133, 135, 136, 138, 150, 151, 155, 156, 167, 169, 212], "applic": [2, 60, 90, 102, 136, 140, 141, 144, 146, 147, 148, 189, 203, 204, 219, 221], "copi": [2, 3, 4, 207], "differ": [2, 3, 4, 56, 58, 62, 64, 79, 81, 86, 87, 94, 96, 102, 107, 130, 131, 137, 145, 148, 153, 164, 167, 178, 203, 227], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 102, 104, 105, 106, 111, 112, 114, 116, 117, 119, 122, 128, 130, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 162, 164, 167, 169, 178, 190, 194, 195, 196, 197, 202, 206, 207, 209, 210, 212, 213], "newli": [2, 3, 4, 90], "static": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 104, 105, 106, 111, 116, 117, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167, 207, 223], "datatyp": [2, 195], "structtyp": 2, "schema": [2, 115, 203, 219], "look": [2, 68, 117, 146, 147, 148, 155, 222], "like": [2, 5, 11, 16, 20, 24, 25, 29, 34, 37, 41, 47, 54, 59, 66, 69, 72, 74, 76, 82, 88, 96, 99, 102, 110, 115, 122, 131, 134, 135, 137, 138, 142, 145, 153, 164, 167, 203, 219, 221, 222], "struct": [2, 170, 176, 179], "containsnul": [2, 40, 168, 170, 176, 179], "true": [2, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 35, 36, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 104, 106, 107, 109, 111, 115, 117, 120, 130, 131, 135, 142, 151, 153, 155, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 179, 181, 203, 207, 209, 210, 213, 214, 219, 223, 224], "nullabl": [2, 40, 168, 170, 176, 179], "fals": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 178, 179, 181, 182, 195, 196, 203, 206, 209, 210, 212, 214, 219, 222, 223, 224, 229], "integ": [2, 56, 58, 59, 60, 84, 89, 90, 170, 176, 179], "map": [2, 10, 40, 72, 93, 97, 122, 124, 125, 128, 135, 153, 170, 176, 179, 185, 190, 195, 201, 202, 222], "kei": [2, 5, 56, 62, 64, 86, 87, 94, 95, 105, 119, 145, 170, 176, 178, 179, 203, 206, 219], "valuecontainsnul": [2, 170, 176, 179], "arrai": [2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 104, 105, 112, 117, 124, 128, 130, 131, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 160, 162, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 195, 224, 227], "element": [2, 40, 112, 122, 151, 168, 170, 176, 179], "float": [2, 3, 5, 7, 8, 24, 40, 45, 56, 59, 61, 104, 116, 117, 119, 122, 124, 125, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 167, 168, 170, 171, 178, 179, 190], "sql": [2, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 106, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 178, 195, 202, 206, 209, 210, 212, 213], "arraytyp": [2, 169, 195], "fromrow": 2, "row": [2, 46, 65, 67, 93, 130, 131, 134, 170, 179, 181, 195, 209], "column": [2, 9, 24, 40, 45, 66, 93, 105, 114, 116, 117, 124, 125, 128, 134, 151, 159, 164, 167, 168, 169, 170, 171, 172, 173, 176, 179, 182, 185, 195, 206, 209, 212, 223], "torow": 2, "transform": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 181, 182, 190, 195, 198, 202, 203, 206, 219, 222, 223, 224, 227, 228, 229], "an": [2, 5, 7, 8, 10, 24, 40, 45, 46, 55, 56, 58, 59, 60, 62, 65, 66, 68, 73, 75, 79, 81, 82, 83, 84, 85, 89, 90, 96, 97, 102, 104, 106, 107, 109, 110, 111, 112, 116, 117, 119, 122, 124, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 160, 164, 167, 169, 170, 171, 172, 173, 178, 179, 182, 185, 190, 194, 195, 197, 201, 202, 203, 209, 210, 212, 213, 218, 220, 222, 223, 224, 226, 227], "annotationaudio": 3, "audio": [3, 168, 203], "alreadi": [3, 99, 102, 116, 117, 118, 164, 165, 178, 206, 227], "process": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 60, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 94, 95, 96, 99, 102, 104, 115, 116, 117, 125, 131, 135, 136, 138, 144, 147, 150, 151, 167, 168, 169, 170, 171, 172, 176, 179, 180, 182, 203, 219, 222, 223, 224, 225], "file": [3, 5, 7, 24, 40, 45, 62, 64, 66, 91, 93, 97, 105, 106, 110, 111, 116, 117, 120, 125, 131, 133, 153, 155, 156, 159, 164, 168, 181, 191, 196, 203, 209, 210, 212, 213, 219, 229], "byte": [3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 104, 117, 124, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 203], "annotationimag": [4, 178, 206], "origin": [4, 55, 56, 58, 59, 60, 69, 77, 82, 86, 92, 115, 131, 135, 136, 176], "height": [4, 56, 58, 59, 60, 176], "width": [4, 56, 58, 59, 60, 135, 176], "nchannel": [4, 176], "mode": [4, 24, 40, 45, 117, 125, 155, 170, 176, 179, 203], "imag": [4, 55, 56, 58, 59, 60, 147, 176, 178, 206], "uri": [4, 207], "pixel": [4, 58], "number": [4, 8, 14, 15, 19, 23, 24, 28, 32, 40, 44, 45, 50, 59, 62, 64, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 112, 114, 116, 117, 122, 124, 128, 130, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 159, 167, 190, 209, 210], "color": 4, "channel": [4, 56, 58, 59, 60, 153], "opencv": 4, "concern": [5, 7, 8, 12, 55, 56, 58, 59, 60, 61, 69], "hubertforctc": 5, "classnam": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 104, 105, 106, 110, 111, 116, 117, 119, 120, 122, 123, 128, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 160, 162, 164, 167, 181, 183, 184, 192, 198], "java_model": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 104, 105, 106, 110, 111, 116, 117, 119, 120, 122, 123, 128, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 160, 162, 164, 167, 175, 181, 184, 202], "none": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 104, 105, 106, 110, 111, 116, 117, 119, 120, 122, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 181, 184, 196, 202, 203, 206, 207, 224], "hubert": 5, "head": [5, 7, 8, 11, 12, 13, 16, 17, 18, 20, 21, 22, 25, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 39, 41, 42, 43, 47, 48, 49, 51, 52, 54, 65, 69, 96, 115, 116, 117, 178, 195, 206, 223], "connectionist": [5, 7, 8], "tempor": [5, 7, 8], "classif": [5, 7, 8, 11, 12, 13, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 51, 52, 55, 56, 58, 60, 69, 72, 78, 81, 91, 134, 136, 150, 223], "ctc": [5, 7, 8], "wa": [5, 7, 12, 13, 15, 17, 18, 19, 24, 26, 27, 28, 30, 31, 32, 35, 36, 39, 42, 43, 44, 45, 48, 49, 50, 51, 52, 55, 56, 58, 65, 66, 67, 73, 75, 76, 82, 86, 87, 93, 94, 95, 102, 122, 123, 134, 136, 138, 140, 142, 144, 146, 149, 153, 206, 223, 224], "propos": [5, 7, 56, 58, 69, 73, 75, 76, 83, 86, 87, 90, 94, 95, 96, 145], "self": [5, 7, 58, 69, 82, 143, 190], "supervis": [5, 7, 8, 69, 78, 79, 85, 91, 102, 136, 138, 142, 147], "speech": [5, 7, 8, 10, 73, 127, 128, 167, 212, 229], "represent": [5, 7, 58, 69, 70, 71, 76, 77, 78, 79, 92, 93, 94, 95, 96, 115, 150, 151, 181, 194], "learn": [5, 7, 24, 40, 45, 61, 69, 76, 77, 79, 86, 87, 91, 92, 94, 95, 96, 102, 116, 117, 124, 131, 135, 136, 137, 138, 140, 141, 146, 147, 148, 150, 153, 203, 221], "mask": [5, 58, 75, 83, 94, 95, 96, 135, 136, 163], "predict": [5, 8, 55, 58, 75, 83, 117, 135, 138, 150, 203, 219], "hidden": [5, 11, 13, 16, 18, 20, 22, 25, 27, 29, 31, 34, 36, 37, 39, 41, 43, 47, 49, 52, 69, 79, 96, 159], "unit": [5, 138, 140, 159], "wei": [5, 58], "ning": 5, "hsu": 5, "benjamin": [5, 73], "bolt": 5, "yao": 5, "hung": 5, "tsai": 5, "kushal": 5, "lakhotia": 5, "ruslan": 5, "salakhutdinov": 5, "abdelrahman": [5, 7], "moham": [5, 7], "take": [5, 7, 14, 15, 19, 32, 44, 46, 50, 65, 67, 73, 83, 99, 111, 124, 125, 145, 155, 158, 164, 180, 185, 190, 201, 209, 222, 223, 227, 228], "transcrib": [5, 7, 8], "text": [5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 54, 55, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 122, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 179, 181, 182, 189, 190, 191, 194, 195, 203, 209, 210, 212, 213, 219, 222, 223, 224, 228, 229], "provid": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 106, 107, 109, 110, 111, 116, 117, 120, 124, 125, 128, 131, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 167, 178, 185, 190, 195, 197, 201, 206, 224], "pre": [5, 7, 8, 24, 40, 45, 55, 60, 70, 71, 75, 76, 78, 79, 83, 85, 91, 117, 125, 135, 136, 150, 170, 172, 179, 182, 210, 223], "current": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 67, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 102, 106, 107, 109, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 159, 178, 181, 185, 196, 222, 223, 224], "support": [5, 7, 8, 24, 40, 67, 69, 72, 78, 82, 83, 102, 117, 120, 131, 135, 142, 143, 145, 147, 148, 149, 158, 181, 196, 220], "appl": [5, 7, 71, 87, 95, 196], "silicon": [5, 7, 196], "processor": [5, 7], "m1": [5, 7], "due": [5, 7, 12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 69, 82, 90, 135, 136], "instruct": [5, 7, 81, 137, 141, 147], "xla": [5, 7], "companion": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 104, 105, 116, 117, 119, 128, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 167, 199], "object": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 104, 105, 116, 117, 119, 122, 128, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 158, 167, 189, 191, 198, 199, 203, 222, 223], "speechtotext": [5, 7, 8], "setinputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 179, 181, 182, 185, 203, 219, 223, 224], "audio_assembl": [5, 7, 8, 177, 196], "setoutputcol": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 179, 181, 182, 185, 203, 219, 223, 224], "default": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 124, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 159, 162, 163, 164, 167, 169, 170, 171, 172, 173, 178, 179, 181, 194, 195, 196, 203, 206, 207, 209, 210, 212, 213, 223], "asr_hubert_large_ls960": [5, 8], "name": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 111, 113, 114, 116, 117, 119, 124, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 159, 160, 164, 167, 168, 169, 170, 171, 172, 173, 176, 179, 181, 182, 185, 195, 201, 203, 206, 207, 209, 212, 219, 223], "avail": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 100, 102, 104, 105, 107, 110, 116, 117, 128, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 167, 198, 206, 207, 219, 226], "see": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 119, 120, 122, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 164, 167, 170, 171, 172, 173, 179, 182, 190, 203, 206, 207, 213, 219, 220, 221, 226, 228, 229], "To": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60, 69, 70, 73, 75, 76, 82, 86, 90, 94, 96, 102, 107, 110, 128, 130, 135, 136, 138, 150, 167, 173, 178, 180, 203, 219, 227], "which": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 81, 82, 84, 86, 88, 89, 90, 91, 92, 94, 96, 99, 102, 107, 109, 110, 117, 119, 120, 122, 123, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 163, 167, 171, 178, 195, 207, 209, 210, 223, 224], "compat": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60, 69, 70, 73, 75, 76, 82, 86, 94, 96, 117, 171, 207], "5669": [5, 7, 8, 55, 56, 58, 59, 60, 73], "more": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60, 66, 73, 76, 78, 79, 81, 88, 94, 95, 99, 102, 107, 112, 115, 119, 122, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 163, 164, 170, 171, 172, 179, 182, 190, 203, 206, 213, 219, 220, 221, 223, 226, 229], "extend": [5, 7, 8, 10, 24, 40, 45, 54, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 76, 79, 86, 88, 91, 93, 94, 96, 102, 104, 105, 107, 109, 110, 111, 112, 116, 117, 119, 120, 125, 128, 130, 131, 133, 134, 135, 136, 143, 150, 151, 153, 155, 157, 158, 162, 164, 167, 170, 171, 172, 179, 182, 206], "hubertforctctestspec": 5, "paper": [5, 8, 56, 58, 59, 60, 69, 70, 71, 73, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 90, 91, 92, 94, 95, 96, 102, 131, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 149, 150, 167, 213, 229], "abstract": [5, 8, 56, 58, 60, 69, 70, 71, 73, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 90, 91, 94, 95, 96, 102, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 149, 150, 159, 213, 229], "approach": [5, 8, 56, 58, 86, 87, 90, 96, 102, 114, 116, 117, 119, 131, 133, 135, 136, 138, 140, 141, 144, 146, 150, 153, 155, 156, 183, 226], "challeng": [5, 40, 58, 76, 79, 81, 86, 87, 90, 102, 144, 145, 146], "three": [5, 153, 165], "uniqu": [5, 122, 123, 136], "problem": [5, 14, 40, 69, 79, 83, 90, 136, 150, 153, 167], "multipl": [5, 8, 40, 60, 73, 97, 102, 107, 130, 136, 141, 145, 148, 149, 151, 164, 195, 203, 209], "sound": [5, 65], "each": [5, 7, 14, 15, 19, 23, 24, 28, 32, 40, 44, 45, 50, 56, 58, 59, 60, 65, 72, 75, 77, 78, 83, 85, 88, 92, 93, 97, 99, 102, 105, 106, 107, 110, 111, 112, 114, 116, 117, 119, 120, 122, 123, 125, 128, 130, 131, 133, 136, 148, 151, 153, 155, 156, 163, 164, 167, 170, 179, 189, 195, 202, 212, 224], "input": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 181, 182, 185, 195, 202, 206, 209, 210, 212, 213, 223, 224, 227, 229], "utter": 5, "lexicon": 5, "dure": [5, 24, 40, 45, 55, 76, 81, 116, 117, 125, 130, 135, 151, 153, 196, 203, 219], "phase": [5, 76, 136], "variabl": [5, 77, 92], "length": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 59, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 94, 95, 96, 112, 120, 122, 130, 131, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 163, 164, 190], "explicit": [5, 68, 130, 138], "segment": [5, 54, 56, 58, 76, 86, 166, 167], "deal": [5, 178, 227], "bert": [5, 12, 16, 17, 18, 19, 21, 23, 26, 30, 31, 35, 38, 42, 46, 48, 51, 59, 69, 70, 71, 75, 76, 82, 83, 86, 87, 94, 95, 96, 117, 118, 119, 135, 136, 150], "util": [5, 74, 116, 119, 130, 131, 144, 156, 180, 187, 188, 191, 193, 196, 197, 201, 205], "offlin": [5, 203], "cluster": [5, 72, 78, 81, 91, 196], "step": [5, 24, 40, 45, 77, 92, 117, 125, 203, 219, 223], "align": [5, 147, 148], "target": [5, 91, 135, 136, 142, 143, 145, 164, 169, 178, 206], "label": [5, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 35, 36, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 78, 90, 97, 104, 114, 115, 116, 117, 119, 124, 125, 133, 134, 150, 153, 159, 167, 203, 209, 219, 223], "loss": [5, 69, 76, 81, 117, 150, 219], "ingredi": 5, "our": [5, 69, 73, 76, 77, 78, 79, 81, 82, 86, 87, 91, 92, 94, 95, 102, 131, 136, 138, 140, 141, 142, 145, 146, 147, 149, 150, 195, 206, 228], "appli": [5, 9, 24, 40, 45, 56, 60, 65, 66, 97, 99, 117, 118, 125, 130, 135, 150, 153, 155, 172, 195, 209], "over": [5, 65, 76, 83, 94, 95, 96, 135, 136, 140, 144, 145, 155, 164, 195, 203, 219], "region": 5, "onli": [5, 8, 56, 58, 59, 60, 62, 64, 65, 66, 72, 78, 79, 83, 91, 96, 107, 110, 120, 122, 130, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 162, 167, 180, 189, 190, 209], "forc": [5, 135], "combin": [5, 14, 15, 19, 23, 28, 32, 44, 50, 59, 76, 82, 93, 102, 136, 142, 145, 150, 153, 155, 167], "acoust": 5, "continu": [5, 115, 135, 138, 151, 173, 219], "reli": [5, 62, 64, 96, 102], "primarili": [5, 90], "consist": [5, 69, 75, 82, 110, 128, 134, 146, 167, 181, 212], "unsupervis": [5, 94, 95, 96, 102, 136, 138], "rather": [5, 56, 68, 135], "than": [5, 40, 45, 56, 68, 76, 77, 81, 92, 94, 95, 96, 102, 104, 112, 116, 122, 135, 137, 138, 140, 141, 142, 143, 146, 147, 149, 155, 156, 223], "intrins": [5, 56], "qualiti": [5, 58, 89, 90, 138, 141, 142, 145, 147, 149], "assign": [5, 40, 97, 118, 133], "simpl": [5, 70, 71, 97, 138, 224], "k": [5, 8, 59, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 171, 190], "mean": [5, 8, 10, 14, 15, 19, 23, 28, 32, 40, 44, 50, 56, 58, 59, 60, 84, 89, 90, 94, 102, 104, 107, 109, 122, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 163, 171, 178, 190, 223, 224, 227], "teacher": 5, "100": [5, 24, 40, 46, 60, 77, 92, 94, 102, 122, 131, 142, 181], "two": [5, 40, 58, 62, 64, 69, 75, 77, 91, 92, 93, 94, 95, 99, 147, 165, 209, 223], "iter": [5, 62, 64, 69, 77, 92, 128, 141, 167, 203, 219], "either": [5, 8, 24, 45, 60, 64, 73, 74, 88, 97, 102, 104, 110, 133, 134, 150, 167, 169, 178, 179, 181, 206, 224], "match": [5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 56, 66, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 94, 95, 96, 97, 106, 107, 108, 109, 110, 111, 120, 128, 130, 135, 136, 138, 141, 149, 164, 167, 169, 189, 222], "improv": [5, 69, 70, 71, 73, 75, 79, 81, 86, 87, 90, 94, 95, 116, 117, 138, 140, 141, 145, 146, 147, 148, 150, 151, 228], "upon": [5, 67, 102, 135, 149], "state": [5, 11, 13, 16, 18, 20, 22, 24, 25, 27, 29, 31, 34, 36, 37, 39, 40, 41, 43, 45, 47, 49, 52, 56, 58, 60, 69, 70, 71, 73, 78, 79, 81, 82, 83, 86, 87, 90, 96, 102, 117, 135, 136, 138, 140, 145, 146, 147, 150, 179, 220, 223], "art": [5, 24, 40, 56, 58, 60, 69, 70, 71, 73, 78, 79, 81, 82, 83, 86, 87, 90, 96, 102, 117, 135, 136, 138, 145, 146, 147, 150, 179], "wav2vec": [5, 7], "perform": [5, 56, 58, 60, 66, 69, 73, 75, 76, 78, 79, 81, 85, 86, 87, 89, 91, 93, 94, 95, 96, 117, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 155], "librispeech": 5, "960h": 5, "libri": 5, "60": [5, 76, 130, 141], "000h": 5, "benchmark": [5, 8, 60, 69, 75, 76, 78, 79, 94, 95, 136, 137, 140, 141, 144, 145, 146, 147, 149, 150], "10min": 5, "1h": 5, "10h": 5, "100h": 5, "fine": [5, 8, 54, 70, 71, 76, 78, 83, 119, 135, 136, 140, 141, 146, 147, 150, 214], "tune": [5, 8, 54, 70, 71, 76, 78, 83, 119, 135, 136, 140, 141, 146, 147, 150], "subset": [5, 145], "1b": 5, "show": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 179, 181, 182, 195, 207, 209, 210, 212, 213, 214, 219, 222, 223, 224, 228], "19": [5, 61, 72, 78, 85, 112, 212, 214], "13": [5, 9, 10, 54, 94, 95, 99, 128, 146, 149, 172, 214], "rel": [5, 73, 75, 94, 107, 109, 116, 137, 145, 153, 222], "wer": 5, "reduct": [5, 69, 155], "dev": [5, 58, 69, 79, 91], "test": [5, 24, 40, 45, 55, 56, 58, 59, 60, 62, 64, 68, 70, 71, 91, 93, 105, 106, 110, 111, 116, 117, 125, 128, 138, 140, 146, 147, 155, 156, 160, 167, 209, 210, 212, 213, 214, 223, 229], "evalu": [5, 24, 40, 45, 73, 78, 81, 82, 90, 94, 95, 125, 135, 136, 140, 142, 145, 146, 149, 185, 203], "batchsiz": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 94, 95, 96, 117, 136, 143, 153], "size": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60, 65, 66, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 99, 102, 117, 124, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 190, 222, 227, 228], "batch": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 59, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 94, 95, 96, 117, 124, 135, 136, 143, 153], "base": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 122, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 183, 184, 185, 188, 192, 196, 198, 202, 203, 219, 223, 224, 227], "ml": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 118, 119, 120, 122, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 176, 178, 179, 180, 181, 182, 203, 219, 223, 227], "audioassembl": [5, 7, 8, 168], "audio_cont": [5, 7, 8, 168], "setstag": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 118, 119, 120, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 169, 171, 181, 182, 223, 224], "processedaudiofloat": [5, 7, 8], "createdatafram": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 118, 119, 120, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 169, 170, 171, 172, 179, 181, 182, 195, 203, 219, 222, 223, 224, 228], "rawfloat": [5, 7, 8], "todf": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 118, 119, 120, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 169, 170, 171, 172, 176, 179, 181, 182, 195, 222, 223, 224, 228], "fit": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 118, 119, 120, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 169, 171, 178, 180, 181, 182, 202, 203, 219, 223, 224, 227], "select": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 61, 74, 76, 93, 99, 102, 104, 116, 117, 119, 122, 123, 134, 135, 136, 137, 138, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 162, 167, 168, 170, 172, 173, 176, 179, 181, 182, 195, 203, 219, 224], "truncat": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 93, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 169, 170, 172, 173, 179, 181, 182, 195, 212, 222, 223, 224], "mister": [5, 7], "quilter": [5, 7, 8], "THE": [5, 7, 66], "apostl": [5, 7, 8], "OF": [5, 7, 69], "midl": [5, 7], "clase": [5, 7], "AND": [5, 7], "glad": [5, 7, 8], "TO": [5, 7, 209, 229], "hi": [5, 7, 8, 67, 119, 131, 142], "gospel": [5, 7, 8], "setconfigprotobyt": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 91, 94, 95, 96, 104, 117, 124, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153], "b": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 91, 94, 95, 96, 104, 106, 111, 115, 116, 117, 118, 119, 124, 130, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 167, 178, 195, 206, 209, 213, 229], "configproto": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 104, 117, 124, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153], "tensorflow": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 102, 104, 117, 124, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153], "loadsavedmodel": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "folder": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 117, 125, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 156, 159, 207, 209], "spark_sess": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "save": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 117, 125, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 196, 203, 219, 223], "restor": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 104, 105, 106, 111, 116, 117, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167], "lang": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 99, 104, 105, 106, 111, 116, 117, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167, 206, 207, 223, 228], "en": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 99, 104, 105, 106, 111, 116, 117, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167, 206, 207, 210, 223, 228, 229], "remote_loc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 104, 105, 106, 111, 116, 117, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167, 206, 207], "download": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 99, 104, 105, 106, 111, 116, 117, 118, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167, 196, 206, 207, 222, 223, 226, 227], "option": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 104, 105, 106, 110, 111, 116, 117, 119, 120, 125, 128, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 164, 167, 168, 170, 174, 175, 178, 179, 194, 195, 196, 202, 203, 206, 207, 209, 210, 212, 213, 223], "remot": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 104, 105, 106, 111, 116, 117, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167, 206, 207], "address": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 104, 105, 106, 111, 116, 117, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167], "resourc": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 106, 110, 111, 116, 117, 119, 120, 125, 128, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 160, 164, 167, 180, 191, 194, 205, 207, 209, 210, 212, 213, 214, 223, 229], "Will": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 104, 105, 106, 111, 116, 117, 119, 128, 130, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167], "repositori": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 104, 105, 106, 111, 116, 117, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167, 206, 220], "otherwis": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 104, 105, 106, 111, 116, 117, 119, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 158, 164, 167, 169, 190, 203], "hubert_for_ctc": 6, "wav2vec2_for_ctc": 6, "whisper_for_ctc": 6, "wav2vec2forctc": 7, "wav2vec2": 7, "alexei": 7, "baevski": 7, "henri": 7, "zhou": 7, "michael": [7, 160], "auli": 7, "asr_wav2vec2_base_960h": 7, "wav2vec2forctctestspec": 7, "whisperforctc": 8, "whisper": 8, "automat": [8, 68, 99, 102, 119, 143, 155, 222, 223], "recognit": [8, 13, 18, 22, 27, 31, 36, 39, 43, 49, 52, 56, 60, 73, 113, 116, 117, 119], "asr": 8, "system": [8, 102, 135, 136, 138, 141, 142, 145], "680": 8, "000": [8, 46, 102, 138, 145, 167, 181], "hour": [8, 67, 107, 109], "multilingu": [8, 94, 95, 142, 145, 148, 167], "multitask": [8, 81, 138], "collect": [8, 90, 102, 140, 146, 203, 219], "web": [8, 54, 66, 73, 138, 147, 203, 219], "well": [8, 60, 62, 64, 65, 78, 91, 94, 95, 102, 122, 135, 136, 149, 181], "translat": [8, 135, 136, 138, 142, 143, 145, 150, 167], "those": [8, 73, 99, 118, 223, 224], "english": [8, 45, 73, 85, 102, 142, 144, 145, 155, 158, 167, 207], "moment": 8, "greedi": [8, 59, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "search": [8, 59, 72, 107, 136, 141, 142, 145, 151, 155, 190], "task": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 56, 58, 60, 69, 70, 71, 72, 73, 75, 76, 78, 81, 82, 83, 85, 90, 91, 94, 95, 96, 102, 119, 135, 136, 137, 138, 143, 144, 145, 149, 150, 180, 190], "setlanguag": 8, "settask": [8, 136, 138, 150, 190], "asr_whisper_tiny_opt": 8, "whisperforctctestspec": 8, "robust": [8, 81, 147], "via": [8, 12, 14, 15, 17, 19, 21, 23, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 91, 176, 196], "larg": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 56, 58, 59, 60, 65, 67, 69, 75, 76, 78, 79, 83, 90, 94, 95, 96, 102, 104, 106, 111, 117, 135, 136, 137, 138, 140, 141, 142, 146, 148, 149], "scale": [8, 56, 58, 59, 60, 69, 76, 78, 82, 83, 94, 95, 135, 136, 137, 138, 140, 141, 142, 145, 146, 147, 150], "weak": [8, 78], "studi": [8, 76, 86, 87, 136, 150], "capabl": [8, 55, 58, 76, 96, 138, 141, 144, 147], "simpli": [8, 66, 81, 224], "amount": [8, 60, 91, 102, 111, 135, 138, 148, 167, 178, 227], "transcript": 8, "internet": 8, "when": [8, 9, 10, 12, 15, 17, 19, 26, 28, 30, 32, 35, 42, 44, 48, 50, 51, 56, 58, 59, 60, 65, 66, 68, 69, 78, 99, 107, 109, 112, 117, 122, 135, 136, 138, 142, 146, 147, 150, 153, 155, 158, 162, 167, 178, 209, 223, 224, 227], "gener": [8, 24, 40, 56, 58, 59, 69, 72, 74, 76, 78, 81, 82, 85, 88, 90, 96, 99, 102, 116, 117, 119, 122, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 172, 173, 190, 203, 219, 222, 223, 224], "standard": [8, 56, 58, 59, 60, 66, 82, 107, 109, 135, 136, 145, 155, 156, 164], "often": [8, 69, 86, 87, 96], "competit": [8, 94, 95, 102, 142], "prior": [8, 56, 76, 81, 82, 122, 153], "fulli": [8, 85, 206], "zero": [8, 55, 78, 93, 119, 138], "shot": [8, 55, 78, 119, 138], "transfer": [8, 60, 76, 78, 91, 94, 95, 136, 138, 150], "without": [8, 55, 70, 71, 78, 81, 94, 95, 102, 138, 144, 167], "ani": [8, 14, 15, 19, 23, 28, 32, 44, 50, 55, 68, 72, 77, 78, 81, 91, 92, 97, 102, 117, 138, 142, 150, 153, 171, 172, 207, 220, 223, 224, 229], "compar": [8, 58, 60, 69, 75, 76, 79, 81, 83, 96, 102, 131, 135, 136, 137, 140, 149, 150, 153, 203, 219], "human": [8, 75, 102, 137, 140, 141, 145, 146], "accuraci": [8, 56, 58, 62, 64, 70, 71, 77, 91, 92, 94, 95, 116, 117, 128, 144, 155, 167, 219], "releas": [8, 66, 69, 73, 75, 85, 86, 87, 94, 95, 136, 140, 141, 146, 148, 149, 150, 196], "infer": [8, 14, 15, 19, 23, 28, 32, 44, 50, 55, 70, 71, 73, 76, 96, 135, 137, 140, 144], "code": [8, 54, 55, 68, 75, 77, 81, 82, 85, 86, 87, 92, 94, 95, 102, 104, 136, 137, 144, 147, 148, 149, 150, 220, 228], "serv": [8, 58, 220], "foundat": [8, 140, 141], "further": [8, 9, 69, 81, 102, 116, 117, 122, 147, 182], "e": [8, 10, 12, 13, 17, 18, 21, 22, 26, 27, 30, 31, 35, 36, 38, 39, 42, 43, 48, 49, 51, 52, 56, 64, 66, 78, 79, 81, 82, 83, 97, 99, 116, 117, 136, 138, 142, 143, 147, 150, 151, 153, 158, 181, 190, 203, 219], "g": [8, 10, 12, 13, 17, 18, 21, 22, 26, 27, 30, 31, 35, 36, 38, 39, 42, 43, 48, 49, 51, 52, 56, 64, 66, 78, 79, 81, 83, 99, 116, 117, 136, 138, 143, 147, 150, 153, 158, 181, 190, 203, 219], "check": [8, 72, 78, 85, 117, 130, 153, 154, 155, 156, 178, 182, 206, 223, 228], "descript": [8, 64, 81, 88, 102, 107, 140, 146, 155, 162, 189, 191], "ismultilingu": 8, "whether": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 97, 99, 106, 107, 109, 111, 112, 115, 116, 117, 120, 122, 125, 130, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 158, 163, 164, 167, 169, 171, 172, 173, 178, 181, 182, 185, 190, 196, 206, 209, 213, 224], "minoutputlength": [8, 59, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150], "minimum": [8, 40, 45, 59, 77, 92, 99, 102, 104, 114, 116, 117, 120, 130, 131, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 155, 156, 163, 164, 190, 209], "sequenc": [8, 12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 56, 58, 59, 60, 82, 84, 89, 90, 122, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 158, 190], "maxoutputlength": [8, 59, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "maximum": [8, 24, 40, 45, 54, 59, 68, 77, 92, 99, 102, 114, 116, 117, 120, 122, 124, 130, 131, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 163, 164, 190], "dosampl": [8, 59, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150], "sampl": [8, 59, 122, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "decod": [8, 59, 75, 82, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "temperatur": [8, 59, 122, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150], "next": [8, 38, 59, 86, 87, 102, 107, 109, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "probabl": [8, 12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 59, 102, 122, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 190], "topk": [8, 59, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150], "highest": [8, 59, 122, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 190], "vocabulari": [8, 59, 77, 92, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 190], "keep": [8, 59, 60, 65, 102, 120, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "filter": [8, 56, 58, 59, 60, 94, 95, 102, 115, 116, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 158, 190, 195, 207], "topp": [8, 59, 122, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "most": [8, 59, 65, 67, 73, 76, 82, 83, 102, 117, 122, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "add": [8, 59, 93, 107, 109, 130, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 164, 190, 223], "top_p": [8, 59, 122], "higher": [8, 59, 93, 102, 122, 134, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "kept": [8, 59, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "repetitionpenalti": [8, 59, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150], "repetit": [8, 59, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "penalti": [8, 59, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "norepeatngrams": [8, 59, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150], "ngram": [8, 59, 74, 112, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "occur": [8, 59, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "onc": [8, 59, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "beamsiz": [8, 59, 136], "beam": [8, 59, 136, 141, 142, 145, 190], "mr": [8, 142], "middl": [8, 162, 167], "getlanguag": 8, "langaug": [8, 206], "getismultilingu": 8, "do": [8, 9, 67, 91, 102, 115, 158, 164, 178, 219, 223, 227], "xx": [8, 19, 50, 94, 95, 104, 142, 143, 145], "chunk2doc": [9, 169], "convert": [9, 59, 61, 66, 74, 83, 88, 93, 107, 109, 112, 115, 120, 122, 136, 150, 163, 165, 167, 169, 172, 173, 203, 219, 226], "back": [9, 67, 122, 135, 136], "try": [9, 153, 209], "re": [9, 72, 78, 85, 223], "analysi": [9, 24, 40, 45, 79, 81, 96, 132, 133, 150, 187, 224], "doc2chunk": [9, 169], "pretrainedpipelin": [9, 172, 178, 195, 206, 222, 227, 228], "locat": [9, 97, 130, 196, 206, 223], "extract": [9, 10, 11, 16, 20, 25, 29, 34, 37, 41, 47, 56, 58, 59, 60, 62, 65, 67, 74, 93, 97, 98, 99, 101, 102, 106, 107, 109, 111, 115, 116, 117, 118, 130, 131, 133, 151, 153, 156, 160, 165, 171, 172, 173, 178, 196, 203, 206, 219], "york": [9, 119, 172], "jersei": [9, 172], "aren": [9, 172], "t": [9, 14, 15, 19, 23, 28, 32, 44, 50, 67, 76, 86, 105, 120, 131, 133, 135, 146, 164, 172], "far": [9, 122, 138, 172], "apart": [9, 62, 64, 172], "actual": [9, 112, 172, 182], "id": [9, 40, 66, 94, 97, 122, 123, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 169, 170, 172, 179, 182, 203, 209], "defin": [9, 10, 115, 116, 117, 153, 158, 162, 172, 195, 203, 206, 219, 223, 227], "amongst": [9, 172], "thing": [9, 141, 153, 172], "explain_document_dl": [9, 172, 178, 195, 206], "chunktodoc": 9, "chunkconvert": 9, "explainresult": [9, 172], "selectexpr": [9, 10, 24, 46, 54, 55, 56, 58, 59, 60, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 105, 106, 107, 109, 110, 111, 112, 115, 118, 119, 120, 128, 130, 131, 133, 143, 157, 158, 160, 163, 164, 165, 169, 171, 172, 195, 209, 210, 212, 222, 223, 228], "explod": [9, 10, 24, 46, 54, 62, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 106, 109, 110, 111, 112, 115, 118, 119, 128, 130, 131, 143, 165, 171, 172, 195, 209, 212, 222, 223, 228], "col": [9, 62, 64, 97, 106, 115, 118, 172, 195, 222], "loc": [9, 13, 18, 22, 27, 31, 36, 39, 43, 49, 52, 99, 115, 116, 117, 172, 178, 195, 206, 209], "sentenc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 123, 128, 134, 135, 136, 143, 150, 151, 153, 158, 160, 163, 165, 167, 170, 172, 178, 179, 181, 182, 196, 206, 209, 210, 212, 213, 214, 223, 227, 228], "22": [9, 172, 209, 222], "pattern": [10, 65, 66, 97, 107, 110, 120, 155, 156, 163, 164, 167], "part": [10, 68, 73, 102, 105, 127, 128, 135, 140, 157, 167, 169, 212, 229], "tag": [10, 24, 40, 45, 66, 73, 114, 115, 116, 117, 118, 127, 128, 167, 195, 203, 209, 212, 213, 229], "order": [10, 65, 68, 81, 96, 97, 102, 107, 135, 136, 140, 146, 155, 156, 178, 182, 195, 223, 224, 227, 229], "meaning": [10, 157], "phrase": [10, 73, 77, 92, 106, 111], "onto": [10, 195, 224], "pars": [10, 62, 63, 64, 73, 97, 105, 107, 109, 153, 155, 156, 178, 181, 206, 209, 212], "regular": [10, 65, 110, 116, 130], "express": [10, 45, 54, 65, 107, 110, 130], "wrap": [10, 151, 183, 184, 192, 198, 202], "angl": [10, 90], "bracket": 10, "easili": [10, 79, 128, 171, 219], "distinguish": 10, "itself": [10, 68, 102, 145, 150, 167, 180, 224], "form": [10, 24, 40, 45, 93, 97, 105, 106, 107, 110, 111, 131, 133, 155, 156, 167, 171, 203, 209, 210, 223], "peter": [10, 82, 105, 120, 128, 131, 155, 157, 209], "piper": [10, 105, 128, 157], "employe": [10, 105, 128, 157], "pick": [10, 105, 128, 157], "peck": [10, 105, 128, 157], "pickl": [10, 105, 128, 157], "pepper": [10, 105, 128, 157], "nnp": [10, 128, 178, 195, 209, 210, 212, 213, 222, 227, 228, 229], "nn": [10, 128, 209, 210, 212, 213, 229], "vbp": [10, 128, 178, 210, 222, 227, 228], "vbg": [10, 128], "IN": [10, 128, 178, 195, 210, 212, 213, 222, 227, 228], "jj": [10, 128, 178, 195, 209, 212, 222, 227, 228, 229], "regexpars": 10, "setregexpars": 10, "enclos": 10, "treat": [10, 153, 167], "group": [10, 135, 140, 144, 148, 164], "so": [10, 14, 15, 19, 24, 32, 44, 45, 50, 67, 68, 102, 115, 122, 131, 142, 180, 203, 219], "here": [10, 105, 195, 223], "specif": [10, 46, 62, 64, 66, 70, 71, 76, 90, 91, 99, 102, 117, 136, 138, 141, 142, 145, 149, 159, 178, 180, 203, 227], "noun": [10, 210], "success": [10, 73, 83, 138], "grammar": [10, 135], "parser": [10, 62, 64, 99], "perceptronmodel": [10, 62, 64, 99, 116, 128, 209], "Of": [10, 69, 167], "documentassembl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 118, 119, 120, 123, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 169, 170, 171, 179, 180, 181, 182, 203, 209, 219, 223], "sentencedetector": [10, 24, 46, 54, 62, 64, 71, 74, 87, 91, 95, 99, 102, 105, 110, 112, 116, 117, 118, 119, 128, 130, 131, 158, 160, 180, 182, 209, 223, 224], "postag": 10, "11": [10, 61, 94, 95, 107, 109, 112, 128, 214], "21": [10, 107, 109, 118, 128, 214], "35": [10, 128, 214], "39": [10, 118, 123, 128, 212, 214], "52": [10, 118, 128, 212], "58": [10, 58, 128], "albertforquestionansw": 11, "classifi": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 102, 171, 223], "dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 104, 117, 119, 155, 156], "albert": [11, 12, 13, 69], "span": [11, 16, 20, 25, 29, 34, 37, 41, 47, 135, 136, 149, 150], "question": [11, 16, 20, 25, 29, 34, 37, 41, 46, 47, 62, 64, 70, 71, 79, 86, 87, 96, 119, 128, 135, 136, 138, 144, 150, 178], "answer": [11, 16, 20, 25, 29, 34, 37, 41, 46, 47, 62, 64, 65, 70, 71, 79, 96, 119, 135, 136, 138, 144, 150, 178], "squad": [11, 16, 20, 25, 29, 34, 37, 41, 47, 69, 70, 71, 75, 83, 86, 87, 135, 136], "linear": [11, 12, 13, 16, 17, 18, 20, 21, 22, 25, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 39, 41, 42, 43, 47, 48, 49, 51, 52, 58, 135, 138], "layer": [11, 12, 13, 16, 17, 18, 20, 21, 22, 25, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 39, 41, 42, 43, 47, 48, 49, 51, 52, 69, 70, 71, 75, 79, 96, 135], "comput": [11, 16, 20, 25, 29, 34, 37, 41, 47, 56, 58, 60, 69, 75, 76, 81, 91, 138, 143, 144, 145, 151, 156, 167, 178, 227], "logit": [11, 12, 14, 15, 16, 17, 19, 20, 21, 23, 25, 28, 29, 30, 32, 34, 35, 37, 38, 41, 42, 44, 47, 48, 50, 51, 122, 135], "spanclassifi": [11, 16, 20, 25, 29, 34, 37, 41, 47], "document_quest": [11, 16, 20, 25, 29, 34, 37, 41, 46, 47], "document_context": [11, 16, 20, 25, 29, 34, 37, 41, 47], "albert_base_qa_squad2": 11, "allow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 58, 59, 79, 85, 91, 116, 117, 120, 130, 131, 136, 149, 163, 164, 180, 189], "faster": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 76, 79, 135, 155, 156], "casesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 94, 95, 96, 106, 111, 155, 158], "ignor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 94, 95, 96, 106, 112, 115, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 158, 178], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 94, 95, 96, 97, 104, 106, 111, 140, 146, 153, 155, 158, 164, 169, 209, 210, 223], "configprotobyt": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 104, 117, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153], "maxsentencelength": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 69, 70, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 94, 95, 96], "128": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 69, 70, 71, 73, 75, 76, 81, 86, 87, 94, 95, 96, 203, 219], "multidocumentassembl": [11, 16, 20, 25, 29, 34, 37, 41, 46, 47, 179], "context": [11, 16, 20, 25, 29, 34, 37, 41, 47, 70, 71, 77, 79, 85, 92, 96, 122, 134, 135, 140, 147, 148, 153, 164], "setcasesensit": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 74, 76, 82, 86, 94, 106, 111, 116, 155, 158, 171, 182], "what": [11, 16, 20, 25, 29, 34, 37, 41, 45, 47, 56, 62, 64, 102, 104, 119, 122, 143, 145, 153, 162, 210, 220], "my": [11, 13, 14, 16, 18, 20, 24, 25, 27, 29, 31, 34, 36, 37, 38, 39, 41, 43, 45, 47, 49, 52, 65, 66, 67, 110, 112, 119, 122, 130, 137, 138, 140, 142, 146, 147, 148, 158, 160, 163, 223], "clara": [11, 16, 20, 25, 29, 34, 37, 41, 47, 119], "live": [11, 13, 16, 18, 20, 25, 27, 29, 31, 34, 36, 37, 39, 41, 43, 47, 49, 52, 119, 138, 140, 203, 219], "berkelei": [11, 16, 20, 25, 29, 34, 37, 41, 47, 146, 147, 148], "albertforsequenceclassif": [12, 26], "regress": [12, 17, 21, 26, 30, 35, 38, 42, 48, 51, 136, 150], "pool": [12, 17, 21, 26, 30, 35, 38, 42, 48, 51, 74, 79, 84, 88, 89, 90, 135], "multi": [12, 17, 21, 24, 26, 30, 35, 38, 40, 42, 45, 48, 51, 69, 91, 94, 95, 102, 104, 143], "sequenceclassifi": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51], "albert_base_sequence_classifier_imdb": 12, "coalescesent": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 104], "instead": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 71, 102, 104, 107, 109, 150, 171, 172, 178, 227], "per": [12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 35, 36, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 72, 78, 85, 94, 95, 104, 107, 112, 114, 115, 116, 117, 122, 167, 178, 195, 206, 209], "inputcol": [12, 14, 15, 17, 19, 21, 23, 24, 26, 28, 30, 32, 35, 38, 40, 42, 44, 45, 48, 50, 51, 88, 104, 168, 170, 171, 172, 173, 176, 179], "averag": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 46, 48, 50, 51, 72, 74, 78, 81, 85, 88, 94, 95, 104, 117, 128, 151], "calcul": [12, 14, 15, 17, 19, 21, 23, 24, 28, 30, 32, 35, 38, 40, 42, 44, 45, 48, 50, 51, 93, 112, 117, 125, 133, 151], "softmax": [12, 14, 15, 17, 19, 21, 23, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 75, 77, 92, 153], "sigmoid": [12, 14, 15, 17, 19, 21, 23, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51], "love": [12, 15, 17, 19, 24, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 71, 87, 95, 131, 134, 223], "movi": [12, 15, 17, 19, 24, 26, 28, 30, 32, 35, 42, 44, 45, 48, 50, 51, 134, 137, 223], "child": [12, 15, 17, 19, 26, 28, 30, 32, 35, 42, 44, 48, 50, 51], "pretti": [12, 15, 17, 19, 26, 28, 30, 32, 35, 40, 42, 44, 48, 50, 51, 102], "bore": [12, 15, 17, 19, 26, 28, 30, 32, 35, 42, 44, 48, 50, 51], "neg": [12, 15, 17, 19, 21, 26, 28, 30, 32, 35, 42, 44, 45, 48, 50, 51, 133, 134, 151, 203, 219], "getclass": [12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 26, 27, 28, 30, 31, 32, 35, 36, 38, 39, 42, 43, 44, 48, 49, 50, 51, 52, 56, 58, 60, 119], "setcoalescesent": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 104], "limit": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 56, 58, 60, 67, 69, 73, 82, 83, 90, 93, 96, 102, 150, 155], "almost": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51], "512": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 46, 48, 50, 51, 67, 72, 78, 79, 83, 84, 85, 89, 90, 143], "help": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 62, 64, 65, 69, 122, 123, 135, 140, 141, 143, 146, 164, 203, 219, 224, 228], "feed": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51], "entir": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 56, 84, 89, 90, 143, 147], "bool": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 42, 44, 48, 50, 51, 65, 66, 67, 70, 71, 74, 78, 86, 91, 94, 97, 99, 104, 106, 107, 111, 112, 115, 116, 117, 120, 125, 130, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 158, 163, 164, 167, 169, 171, 172, 173, 178, 181, 185, 190, 196, 203, 206, 207, 209], "one": [12, 14, 15, 17, 19, 21, 23, 26, 28, 30, 32, 35, 38, 40, 42, 44, 48, 50, 51, 54, 56, 58, 59, 60, 62, 64, 66, 70, 71, 83, 88, 94, 95, 96, 102, 104, 107, 110, 115, 122, 131, 147, 155, 160, 182, 219, 223], "albertfortokenclassif": [13, 69], "ner": [13, 18, 22, 27, 31, 36, 39, 43, 49, 52, 94, 95, 99, 100, 160, 178, 195, 196, 203, 206, 219], "token_classifi": [13, 22, 36, 39, 43, 49, 52], "albert_base_token_classifier_conll03": 13, "albertembed": [13, 69], "level": [13, 24, 40, 45, 70, 71, 82, 86, 87, 91, 93, 95, 97, 116, 117, 125, 153, 196, 209], "tokenclassifi": [13, 18, 22, 27, 31, 36, 39, 43, 49, 52], "john": [13, 18, 27, 31, 36, 39, 43, 49, 52, 54, 71, 87, 95, 97, 99, 118, 120, 131, 173, 214], "lenon": [13, 18, 27, 31, 36, 39, 43, 49, 52], "born": [13, 18, 27, 31, 36, 39, 43, 49, 52, 138, 140], "london": [13, 18, 27, 31, 36, 39, 43, 49, 52], "pari": [13, 18, 27, 31, 36, 39, 43, 49, 52, 119], "sarah": [13, 18, 27, 31, 36, 39, 43, 49, 52], "o": [13, 18, 22, 27, 31, 36, 39, 43, 49, 52, 115, 116, 117, 118, 178, 195, 206, 209, 213, 229], "albertforzeroshotclassif": 14, "modelforsequenceclassif": [14, 15, 19, 23, 28, 32, 44, 50], "nli": [14, 15, 19, 23, 28, 32, 44, 50], "natur": [14, 15, 19, 23, 28, 32, 44, 45, 50, 60, 69, 70, 71, 73, 75, 76, 77, 83, 91, 92, 96, 104, 135, 136, 138, 144, 148, 150, 169, 179, 182], "equival": [14, 15, 19, 23, 28, 32, 44, 50, 178, 196, 227], "distilbertforsequenceclassif": [14, 30, 32], "don": [14, 15, 19, 23, 28, 32, 44, 50, 76, 86, 120], "hardcod": [14, 15, 19, 23, 28, 32, 44, 50], "potenti": [14, 15, 19, 23, 28, 32, 44, 50, 58, 137, 142, 147, 153], "thei": [14, 15, 19, 23, 28, 32, 44, 46, 50, 62, 64, 65, 117, 120, 122, 138, 180, 198, 210, 223], "chosen": [14, 15, 19, 23, 28, 32, 44, 50, 62, 64, 117, 122], "runtim": [14, 15, 19, 23, 28, 32, 44, 50], "usual": [14, 15, 19, 23, 28, 32, 44, 50, 60, 182, 207], "slower": [14, 15, 19, 23, 28, 32, 44, 50], "much": [14, 15, 19, 23, 24, 28, 32, 44, 46, 50, 69, 72, 78, 85, 86, 87, 120, 140, 142, 167, 196, 223], "flexibl": [14, 15, 19, 23, 28, 32, 44, 50, 55, 58], "loop": [14, 15, 19, 32, 44, 50], "through": [14, 15, 19, 32, 44, 50, 69, 83, 99, 102, 142, 145, 146, 173, 224], "longer": [14, 15, 19, 32, 44, 50, 69, 77, 82, 92, 104, 140, 143, 144, 228], "pass": [14, 15, 19, 23, 28, 32, 44, 50, 68, 122], "pose": [14, 15, 19, 23, 28, 32, 44, 50], "premis": [14, 15, 19, 23, 28, 32, 44, 50], "hypothesi": [14, 15, 19, 23, 28, 32, 44, 50], "pair": [14, 15, 19, 23, 28, 32, 44, 50, 55, 78, 85, 99, 142, 203], "albert_base_zero_shot_classifier_onnx": 14, "iphon": 14, "resolv": 14, "asap": 14, "urgent": 14, "bart": [14, 15, 135, 136], "albert_zero_shot_classifier_onnx": 14, "bartforzeroshotclassif": [14, 15], "bartforsequenceclassif": 15, "bart_large_zero_shot_classifier_mnli": 15, "setmaxsentencelength": [15, 43, 44, 50, 77, 92], "bertforquestionansw": [16, 46], "bert_base_cased_qa_squad2": 16, "questionansw": 16, "bertforsequenceclassif": [17, 19], "bert_base_sequence_classifier_imdb": 17, "bertfortokenclassif": 18, "bert_base_token_classifier_conll03": 18, "bertforzeroshotclassif": 19, "bert_zero_shot_classifier_mnli": 19, "camembertforquestionansw": 20, "camembert": [20, 21, 22, 73], "camembert_base_qa_fquad": 20, "fr": [20, 21, 23, 73, 104, 142, 145], "camembertforsequenceclassif": [21, 23], "sequence_classifi": 21, "camembert_base_sequence_classifier_allocin": 21, "j": [21, 97], "ai": [21, 122, 123, 136, 141, 203, 219], "ador\u00e9": 21, "ce": 21, "film": 21, "lorsqu": 21, "\u00e9tai": 21, "enfant": 21, "je": 21, "d\u00e9test": 21, "\u00e7a": 21, "camembertfortokenclassif": 22, "camembert_base_token_classifier_wikin": 22, "georg": 22, "washington": 22, "est": [22, 73, 104, 143], "all\u00e9": 22, "\u00e0": 22, "camembertforzeroshotclassif": 23, "debertaforsequenceclassif": [23, 26, 28], "camembert_zero_shot_classifier_xnli_onnx": 23, "multi_class": 23, "setcandidatelabel": [23, 55], "sport": 23, "politiqu": 23, "scienc": [23, 81, 102, 149, 220], "l": 23, "\u00e9quip": 23, "de": [23, 60, 73, 102, 104, 142, 143], "franc": [23, 143], "joue": 23, "aujourd": 23, "hui": 23, "au": 23, "parc": 23, "princ": 23, "classifierdl": [24, 223], "classifierdlapproach": [24, 40, 223], "univers": [24, 62, 64, 90, 91, 137, 143, 145, 146, 147, 148], "encod": [24, 59, 66, 70, 71, 75, 81, 82, 85, 91, 119, 135, 136, 142, 143, 145, 203], "deep": [24, 70, 71, 79, 102, 116, 131, 153], "dnn": 24, "insid": [24, 40, 115, 128, 164, 209], "instanti": [24, 40, 45, 62, 64, 68, 77, 92, 93, 97, 105, 106, 110, 111, 116, 117, 120, 128, 131, 133, 134, 151, 153, 155, 156, 160, 162, 167, 209, 210], "classifierdlmodel": [24, 40, 223], "monitor": [24, 40, 45, 117, 122, 123, 203, 219], "metric": [24, 40, 45, 117, 156, 203], "done": [24, 40, 45, 86, 87, 116, 117, 224], "settestdataset": [24, 40, 45, 117, 125], "method": [24, 40, 45, 68, 69, 76, 77, 81, 83, 92, 96, 102, 117, 135, 151, 207, 218], "expect": [24, 40, 45, 72, 78, 85, 96, 117, 164, 195], "path": [24, 40, 45, 62, 64, 77, 92, 93, 97, 99, 105, 106, 110, 111, 116, 117, 119, 120, 125, 131, 133, 135, 138, 153, 155, 156, 159, 164, 176, 178, 194, 203, 206, 209, 210, 212, 213, 219], "parquet": [24, 40, 45, 117, 125, 168], "datafram": [24, 40, 45, 77, 92, 93, 117, 125, 128, 151, 167, 178, 191, 195, 202, 203, 206, 209, 210, 212, 213, 219, 223, 227, 229], "ha": [24, 40, 45, 46, 55, 56, 58, 59, 60, 65, 66, 67, 69, 75, 76, 79, 86, 87, 90, 93, 102, 105, 110, 117, 125, 131, 133, 136, 142, 145, 147, 150, 155, 156, 167, 168, 169, 176, 178, 203, 207, 212, 219, 223, 224], "same": [24, 40, 45, 54, 69, 83, 86, 93, 94, 97, 99, 117, 122, 125, 137, 146, 147, 150, 151, 180, 203, 224], "follow": [24, 40, 45, 54, 61, 66, 79, 82, 93, 102, 107, 109, 110, 115, 117, 120, 130, 147, 165, 181, 219, 221, 224], "universalsentenceencod": [24, 40, 45, 91, 203, 219, 223], "preprocessingpipelin": [24, 40, 45, 117, 125], "randomsplit": [24, 40, 45, 117, 125], "write": [24, 40, 45, 93, 117, 125, 137, 149, 155, 156, 224], "overwrit": [24, 40, 45, 117, 118, 125, 203], "test_data": [24, 40, 45, 117, 125], "setlabelcolumn": [24, 40, 45, 114, 116, 117, 124, 159, 203, 219, 223], "usag": [24, 40, 45, 54, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 76, 79, 86, 91, 93, 94, 96, 97, 102, 104, 105, 107, 109, 110, 111, 116, 117, 120, 128, 130, 131, 133, 134, 135, 136, 143, 150, 151, 153, 155, 157, 158, 162, 164, 167], "64": [24, 40, 45, 69, 117, 124, 223], "dropout": [24, 45, 117], "coeffici": [24, 45, 116, 117], "enableoutputlog": [24, 40, 45, 117], "stdout": [24, 40, 45, 117, 125], "addit": [24, 40, 45, 62, 64, 68, 70, 71, 97, 116, 117, 122, 125, 130, 138, 149, 164, 203, 222, 223], "evaluationlogextend": [24, 40, 45, 117], "valid": [24, 40, 45, 107, 117, 125, 131, 153, 219], "displai": [24, 40, 45, 125, 138, 203, 219], "time": [24, 40, 45, 69, 77, 92, 94, 95, 102, 107, 125, 134, 153, 167, 196, 222, 223, 227, 228], "labelcolumn": [24, 40, 45, 116, 117], "lr": [24, 40, 45, 117, 167], "rate": [24, 40, 45, 61, 77, 86, 87, 92, 93, 117, 124, 135, 151, 153], "005": [24, 45, 117, 124], "maxepoch": [24, 40, 45, 116, 117], "epoch": [24, 40, 45, 114, 116, 117, 124, 125, 131, 153, 203], "30": [24, 45, 102, 107, 109, 115, 124, 143, 178, 195, 206, 214, 222], "outputlogspath": [24, 40, 45, 117, 131], "randomse": [24, 40, 45, 116, 117], "random": [24, 40, 45, 77, 92, 114, 116, 117, 122, 124, 143, 151, 171], "seed": [24, 40, 45, 77, 92, 114, 116, 117, 124, 135, 143], "shuffl": [24, 40, 114, 124, 135, 136], "testdataset": [24, 40, 45, 117, 203, 219], "statist": [24, 40, 45, 93, 102, 117, 125], "validationsplit": [24, 40, 45, 117, 131], "choos": [24, 40, 45, 74, 88, 117, 122, 131, 155], "proport": [24, 40, 45, 117, 125, 131], "against": [24, 40, 45, 97, 102, 106, 111, 117, 125, 131, 146, 147, 180], "between": [24, 40, 45, 58, 62, 64, 65, 67, 83, 86, 87, 91, 94, 95, 96, 99, 117, 122, 125, 130, 131, 142, 144, 145, 153], "off": [24, 40, 45, 91, 94, 95, 117, 125, 131], "verbos": [24, 40, 45, 116, 117, 125], "multiclassifierdlapproach": [24, 40, 203, 219], "sentimentdlapproach": [24, 40, 45], "accept": [24, 40, 45, 122], "singl": [24, 40, 45, 68, 78, 81, 93, 99, 102, 135, 136, 142, 151, 160, 162, 164, 209], "item": [24, 45, 93, 122, 203, 209, 219], "doubl": [24, 45, 168, 181], "sentenceembed": [24, 40, 45, 88, 93, 171], "In": [24, 40, 45, 56, 60, 67, 73, 75, 76, 82, 83, 85, 93, 96, 97, 102, 104, 105, 106, 110, 111, 130, 131, 133, 136, 138, 140, 142, 144, 145, 146, 148, 149, 150, 155, 156, 167, 203, 212, 219, 223, 224, 228, 229], "csv": [24, 45, 97, 125, 181, 223], "best": [24, 45, 69, 73, 78, 81, 86, 87, 102, 104, 117, 122, 135, 136, 137, 142, 149, 223], "wach": [24, 223], "ever": [24, 45, 66, 223], "opinion": [24, 45, 223], "win": [24, 45, 223], "award": [24, 45, 223], "terribl": [24, 45, 223], "act": [24, 45, 223], "bad": [24, 45, 133, 203, 219, 223], "realli": [24, 45, 122, 134, 223], "trane": 24, "smallcorpu": [24, 45, 223], "read": [24, 45, 55, 56, 58, 59, 60, 62, 64, 77, 92, 102, 105, 106, 107, 109, 110, 111, 116, 119, 120, 125, 131, 133, 138, 153, 155, 156, 164, 167, 168, 170, 176, 179, 191, 194, 196, 197, 203, 207, 209, 210, 212, 213, 219, 223, 229], "header": [24, 45, 46, 181, 223], "src": [24, 45, 55, 56, 58, 59, 60, 62, 64, 93, 105, 106, 110, 111, 116, 117, 128, 155, 156, 160, 167, 209, 210, 212, 213, 214, 223, 229], "useembed": [24, 40, 45, 91, 223], "docclassifi": [24, 40, 45, 223], "setbatchs": [24, 40, 45, 79, 117, 124, 135, 153, 203, 219, 223], "setmaxepoch": [24, 40, 45, 114, 116, 117, 124, 203, 219, 223], "20": [24, 38, 46, 56, 65, 96, 115, 135, 136, 137, 138, 140, 142, 144, 145, 146, 147, 148, 149, 178, 181, 195, 206, 223], "setlr": [24, 40, 45, 117, 124, 203, 219, 223], "5e": [24, 45, 223], "setdropout": [24, 45, 117, 223], "pipelinemodel": [24, 38, 40, 45, 62, 64, 66, 77, 92, 116, 117, 134, 153, 155, 156, 167, 178, 180, 203, 207, 223, 226], "v": [24, 40, 45, 61, 75, 83, 93, 102, 104, 106, 117, 124, 125, 137, 156, 195], "classifierdl_use_trec6": [24, 223], "trec": 24, "multiclassifierdlmodel": [24, 40], "sentimentdlmodel": [24, 40, 45], "sarcasmdl": [24, 223], "classifierdl_use_sarcasm": [24, 223], "sarcasm": [24, 223], "m": [24, 67, 107, 109, 142, 214, 223], "could": [24, 76, 102, 110, 125, 153, 222, 223, 224], "put": [24, 195, 223], "word": [24, 58, 60, 62, 64, 69, 74, 75, 77, 79, 86, 88, 91, 92, 93, 96, 97, 99, 102, 105, 112, 115, 118, 119, 120, 128, 133, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 158, 162, 164, 166, 167, 178, 195, 206, 212, 213, 222, 223], "wake": [24, 223], "am": [24, 65, 107, 109, 135, 137, 138, 140, 141, 142, 146, 147, 148, 160, 223], "mondai": [24, 223], "would": [24, 54, 65, 74, 88, 107, 131, 196, 223], "arrays_zip": [24, 62, 64, 102, 223], "out": [24, 72, 78, 85, 102, 105, 120, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 157, 158, 223], "normal": [24, 56, 58, 59, 60, 66, 100, 106, 131, 134, 158, 171, 180, 182, 196, 223, 224], "debertaforquestionansw": 25, "deberta": [25, 26, 27, 28, 75], "deberta_v3_xsmall_qa_squad2": 25, "v2": [26, 27, 70, 71, 75, 149], "v3": [26, 27], "deberta_v3_xsmall_sequence_classifier_imdb": 26, "deberta_base_sequence_classifier_imdb": 26, "debertafortokenclassif": 27, "deberta_v3_xsmall_token_classifier_conll03": 27, "debertaforzeroshotclassif": 28, "deberta_base_zero_shot_classifier_mnli_anli_v3": 28, "distilbertforquestionansw": 29, "distilbert": [29, 30, 32, 76], "distilbert_base_cased_qa_squad2": 29, "distilbert_base_sequence_classifier_imdb": 30, "distilbertfortokenclassif": 31, "distilbert_base_token_classifier_conll03": 31, "distilbertforzeroshotclassif": 32, "distilbert_base_zero_shot_classifier_uncased_mnli": 32, "albert_for_sequence_classif": [33, 100], "albert_for_token_classif": [33, 100], "albert_for_zero_shot_classif": [33, 100], "bart_for_zero_shot_classif": [33, 100], "bert_for_sequence_classif": [33, 100], "bert_for_token_classif": [33, 100], "bert_for_zero_shot_classif": [33, 100], "camembert_for_sequence_classif": [33, 100], "camembert_for_token_classif": [33, 100], "camembert_for_zero_shot_classif": [33, 100], "deberta_for_sequence_classif": [33, 100], "deberta_for_token_classif": [33, 100], "deberta_for_zero_shot_classif": [33, 100], "distil_bert_for_sequence_classif": [33, 100], "distil_bert_for_token_classif": [33, 100], "distil_bert_for_zero_shot_classif": [33, 100], "longformer_for_sequence_classif": [33, 100], "longformer_for_token_classif": [33, 100], "mpnet_for_sequence_classif": [33, 100], "mpnet_for_token_classif": [33, 100], "multi_classifier_dl": [33, 100], "roberta_for_sequence_classif": [33, 100], "roberta_for_token_classif": [33, 100], "roberta_for_zero_shot_classif": [33, 100], "sentiment_dl": [33, 100], "xlm_roberta_for_sequence_classif": [33, 100], "xlm_roberta_for_token_classif": [33, 100], "xlm_roberta_for_zero_shot_classif": [33, 100], "xlnet_for_sequence_classif": [33, 100], "xlnet_for_token_classif": [33, 100], "longformerforquestionansw": 34, "longform": [34, 35, 36, 82], "longformer_base_base_qa_squad2": 34, "longformerforsequenceclassif": 35, "longformer_base_sequence_classifier_imdb": 35, "4096": [35, 69, 82], "longformerfortokenclassif": 36, "xlnet_base_token_classifier_conll03": [36, 52], "longformer_base_token_classifier_conll03": 36, "mpnetforquestionansw": 37, "mpnet": [37, 38, 83], "mpnet_base_question_answering_squad2": 37, "mpnetforsequenceclassif": 38, "mpnet_sequence_classifier_ukr_messag": 38, "drive": 38, "car": 38, "bu": 38, "arriv": 38, "minut": [38, 40], "pineappl": 38, "pizza": 38, "worst": 38, "transport": 38, "movement": 38, "food": [38, 122, 123], "mpnet_base_sequence_classifier_imdb": 38, "mpnetfortokenclassif": 39, "xlm": [39, 47, 48, 49, 94, 95], "roberta": [39, 41, 42, 43, 44, 47, 48, 49, 59, 73, 75, 82, 83, 86, 87, 94, 95, 119, 135, 136], "mpnet_base_token_classifi": [39, 49], "xlmrobertafortokenclassif": [39, 49], "multiclassifierdl": 40, "bidirect": [40, 70, 71, 79, 96, 135, 136], "gru": 40, "convolut": [40, 56, 60], "machin": [40, 56, 65, 67, 77, 92, 102, 116, 135, 136, 138, 142, 143, 145, 150, 203, 221], "strongli": 40, "relat": [40, 62, 64, 99, 228], "variant": [40, 61, 82, 91, 147], "mai": [40, 67, 68, 122, 135, 140, 142, 146, 169, 222, 223, 224, 227, 228], "instanc": [40, 68, 119, 124, 125, 185, 190, 196, 197, 201], "multiclass": 40, "categor": [40, 207], "precis": [40, 62, 64, 67], "constraint": 40, "mani": [40, 68, 75, 86, 87, 102, 122, 135, 136, 137, 138, 140, 142, 143, 145, 150, 167], "formal": 40, "find": [40, 62, 64, 85, 86, 87, 90, 91, 97, 99, 105, 107, 135, 136, 138, 149], "binari": [40, 176, 191, 203], "bertsentenceembed": [40, 45, 71, 87, 95], "multiclassifi": [40, 203, 219], "001": [40, 61, 116, 117], "10": [40, 54, 62, 102, 107, 109, 118, 122, 142, 151, 155, 203, 214, 222], "44": [40, 77, 92, 128, 145], "shuffleperepoch": 40, "threshold": [40, 45, 77, 92, 102, 104, 116, 119, 135, 153, 167], "ed58abb40640f983": 40, "pn": 40, "newsyou": 40, "toxic": [40, 145, 146], "a1237f726b5f5d89": 40, "dude": 40, "place": [40, 60, 68], "obscen": 40, "insult": 40, "24b0d6c8733c2abe": 40, "thank": [40, 96, 102, 214], "8c4478fb239bcfc0": 40, "gee": 40, "traindataset": [40, 203, 219], "printschema": [40, 168, 170, 176, 179], "root": [40, 54, 62, 64, 99, 168, 170, 176, 179, 210], "setcleanupmod": [40, 170, 179], "shrink": [40, 170, 179], "1e": [40, 203, 219], "setthreshold": [40, 45, 102, 104, 203, 219], "setvalidationsplit": [40, 125, 131], "setverbos": [40, 116, 117, 125], "multiclassifierdl_use_tox": 40, "comment": [40, 102], "jigsaw": 40, "good": [40, 73, 76, 91, 134], "stuff": 40, "wtf": 40, "kind": [40, 102, 107, 109], "crap": 40, "robertaforquestionansw": [41, 119], "roberta_base_qa_squad2": [41, 119], "robertaforsequenceclassif": [42, 44], "roberta_base_sequence_classifier_imdb": 42, "robertafortokenclassif": 43, "roberta_base_token_classifier_conll03": 43, "robertaforzeroshotclassif": 44, "roberta_base_zero_shot_classifier_nli": 44, "sentimentdl": 45, "affect": [45, 164], "subject": [45, 62, 64], "view": 45, "common": [45, 90, 97, 107, 123, 146, 147, 149, 160, 169, 196, 226], "product": 45, "review": [45, 122, 199], "tweet": 45, "interpret": [45, 65, 97], "posit": [45, 75, 76, 83, 94, 95, 96, 102, 115, 122, 133, 134, 151, 163, 167, 182, 203, 219], "final": [45, 65, 82, 86, 87, 94, 95, 104, 117, 142, 153, 223], "otheriws": [45, 104], "neutral": [45, 104], "thresholdlabel": [45, 104], "score": [45, 70, 71, 94, 95, 102, 104, 116, 117, 119, 133, 134, 138], "less": [45, 76, 104, 107, 112, 116, 143, 146, 155], "watch": [45, 134, 137], "32": [45, 69, 79, 135, 214, 222, 228], "setthresholdlabel": [45, 104], "p": [45, 66, 77, 92, 104, 117, 125, 135, 142, 162], "sentimentdl_use_imdb": 45, "imdb": 45, "sentimentdl_use_twitt": 45, "wow": 45, "video": [45, 102], "awesom": 45, "bruh": 45, "damn": 45, "wast": [45, 134], "tapasforquestionansw": 46, "implement": [46, 68, 77, 92, 94, 119, 131, 151, 153, 174, 175, 183, 184, 192, 198, 202], "tapa": 46, "design": [46, 56, 58, 61, 70, 71, 86, 87, 90, 106, 136, 141, 143, 149, 203, 219], "about": [46, 62, 64, 86, 87, 93, 102, 119, 122, 130, 137, 156, 178, 180, 222, 224, 227, 228], "tabular": [46, 181], "tabl": [46, 151, 181], "tri": 46, "share": [46, 102, 224], "its": [46, 60, 75, 76, 82, 96, 102, 128, 133, 135, 136, 143, 144, 146, 147, 148, 149, 158, 203, 212], "table_qa_tapas_base_finetuned_wtq": 46, "document_assembl": [46, 119, 151, 177, 181, 196], "table_json": 46, "document_t": [46, 181], "sentence_detector": [46, 100, 119, 129], "table_assembl": [46, 177, 196], "tableassembl": [46, 181], "stage": [46, 151, 178, 180, 203, 219, 223, 224, 227], "json_data": 46, "monei": [46, 181], "ag": [46, 72, 78, 85, 181], "donald": [46, 181], "trump": [46, 181], "75": [46, 102, 147, 181], "elon": [46, 181], "musk": [46, 181], "55": [46, 118, 181, 214], "AS": [46, 54, 119], "who": [46, 65, 67, 141, 162, 223], "earn": 46, "count": [46, 122, 153], "old": [46, 54, 212], "xlmrobertaforquestionansw": 47, "xlm_roberta_base_qa_squad2": 47, "xlmrobertaforsequenceclassif": [48, 50], "xlm_roberta_base_sequence_classifier_imdb": 48, "xlmrobertaforzeroshotclassif": 50, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 50, "xlmroberta": 50, "xlnetforsequenceclassif": 51, "xlnet": [51, 52, 83, 96], "xlnet_base_sequence_classifier_imdb": 51, "xlnetfortokenclassif": 52, "spanbert_coref": 53, "spanbertcorefmodel": 54, "corefer": 54, "resolut": [54, 58], "spanbert": 54, "identifi": [54, 93, 102, 106, 110, 122, 123, 149, 163, 164, 203, 224], "given": [54, 56, 58, 59, 60, 65, 67, 81, 97, 102, 119, 135, 136, 138, 150, 153, 155, 156, 158, 189, 202, 203], "told": [54, 109], "mari": [54, 71, 87, 95, 131], "he": [54, 65, 67, 75, 109, 142, 162, 214], "borrow": 54, "book": [54, 66, 138, 153, 210], "her": [54, 119], "link": [54, 206], "ontonot": 54, "corefresolut": 54, "spanbert_base_coref": 54, "maxsegmentlength": 54, "textgenr": 54, "genr": 54, "One": [54, 81, 102, 162, 165], "bc": 54, "broadcast": 54, "convers": 54, "bn": [54, 142], "nw": 54, "wire": 54, "pt": [54, 142], "pivot": [54, 90], "testament": 54, "tc": 54, "telephon": 54, "wb": 54, "setmaxsegmentlength": 54, "settextgenr": 54, "clipforzeroshotclassif": 55, "clip": 55, "contrast": [55, 78, 81, 82, 85, 106, 150], "neural": [55, 60, 70, 71, 75, 117, 131, 135, 136, 143], "network": [55, 60, 70, 71, 79, 117, 131], "abil": [55, 90, 102, 136, 137, 138, 144], "hard": [55, 157], "veri": [55, 59, 60, 65, 73, 79, 94, 95, 96, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 178, 222, 224, 227, 228], "similar": [55, 69, 81, 90, 91, 102, 104, 149], "gpt": [55, 86, 122, 135, 136, 138, 147], "imageclassifi": [55, 56, 58, 59, 60], "image_assembl": [55, 56, 58, 59, 60, 177, 196], "zero_shot_classifier_clip_vit_base_patch32": 55, "huggingfac": [55, 56, 58, 59, 60, 73, 146, 147], "clipforzeroshotclassificationtestspec": 55, "candidatelabel": 55, "imagedf": [55, 56, 58, 59, 60], "dropinvalid": [55, 56, 58, 59, 60], "imageassembl": [55, 56, 58, 59, 60, 176], "photo": 55, "bird": [55, 59], "cat": [55, 56, 58, 59, 60], "dog": [55, 59], "hen": [55, 56, 58, 59, 60], "hippo": [55, 56, 58, 60], "room": [55, 59], "tractor": [55, 56, 58, 59, 60], "ostrich": [55, 56, 58, 59, 60], "ox": [55, 56, 58, 59, 60], "pipelinedf": [55, 56, 58, 59, 60], "revers": [55, 56, 58, 59, 60], "split": [55, 56, 58, 59, 60, 65, 67, 130, 131, 135, 143, 160, 162, 163, 167], "image_nam": [55, 56, 58, 59, 60], "palac": [55, 56, 58, 59, 60], "jpeg": [55, 56, 58, 59, 60], "egyptian_cat": [55, 56, 58, 59, 60], "hippopotamu": [55, 56, 58, 59, 60], "junco": [55, 56, 58, 59, 60], "bluetick": [55, 56, 58, 59, 60], "jpg": [55, 56, 58, 59, 60], "chihuahua": [55, 56, 58, 59, 60], "getcandidatelabel": 55, "image_classifier_vit_base_patch16_224": [55, 60], "convnextforimageclassif": 56, "convnet": 56, "convnext": 56, "2020": [56, 102, 107, 109, 131], "zhuang": 56, "liu": [56, 58, 75, 86, 87], "hanzi": 56, "mao": 56, "chao": 56, "yuan": 56, "wu": 56, "christoph": 56, "feichtenhof": 56, "trevor": 56, "darrel": 56, "sain": 56, "xie": 56, "pure": [56, 60, 143], "inspir": [56, 134, 155, 156, 199], "vision": [56, 58, 59, 60, 147], "claim": 56, "outperform": [56, 78, 82, 83, 85, 90, 91, 94, 95, 96, 102, 137, 138, 140, 141, 146, 149], "convnextforimageclassificationtestspec": 56, "roar": 56, "visual": [56, 58, 203], "began": 56, "introduct": 56, "vit": [56, 59, 60], "quickli": [56, 122], "supersed": 56, "vanilla": 56, "hand": [56, 162], "face": [56, 90], "difficulti": 56, "detect": [56, 58, 91, 103, 104, 122, 123, 129, 130, 131], "semant": [56, 58, 72, 79, 81, 90, 91, 151, 167], "hierarch": [56, 58, 77, 92], "swin": [56, 58], "reintroduc": 56, "sever": [56, 149, 229], "practic": [56, 73, 136, 144, 150], "viabl": 56, "backbon": [56, 58, 96], "demonstr": [56, 58, 76, 82, 90, 102, 138, 141, 142, 143], "remark": [56, 141], "wide": [56, 66, 70, 71, 75, 76, 78, 94, 95, 136, 140, 149], "varieti": [56, 82, 83, 94, 95, 228], "howev": [56, 69, 83, 88, 90, 96, 102, 120, 140, 142, 145, 207, 222], "effect": [56, 58, 59, 60, 82, 90, 122, 130, 135, 136, 142, 144, 145, 150], "hybrid": 56, "still": [56, 138, 203], "credit": 56, "superior": [56, 141], "inher": 56, "induct": [56, 76], "bias": [56, 76, 146], "reexamin": 56, "space": [56, 77, 90, 92, 93, 112, 151, 182], "achiev": [56, 75, 78, 81, 82, 83, 86, 87, 94, 95, 96, 117, 135, 136, 137, 138, 140, 143, 145, 147, 150, 178, 227], "gradual": 56, "modern": [56, 145], "resnet": 56, "toward": [56, 138, 145], "discov": [56, 220], "compon": [56, 60, 90, 124, 125, 168, 176, 185, 190, 201, 227], "contribut": [56, 140, 146], "along": [56, 99], "wai": [56, 62, 64, 97, 99, 146, 147, 148, 180, 206], "outcom": 56, "explor": [56, 90, 136, 142, 146, 150], "famili": [56, 66, 78, 140, 141, 147], "dub": [56, 94, 95], "construct": [56, 68, 77, 92, 164, 206, 226], "compet": 56, "favor": 56, "term": [56, 102], "scalabl": 56, "87": [56, 58], "imagenet": [56, 58, 60], "coco": [56, 58], "ade20k": [56, 58], "while": [56, 58, 60, 69, 76, 81, 93, 102, 122, 125, 138, 142, 145, 203, 219, 224], "maintain": 56, "simplic": [56, 135, 136], "effici": [56, 58, 75, 77, 91, 92, 141, 143, 144, 149, 222], "dores": [56, 58, 59, 60], "resiz": [56, 58, 59, 60], "certain": [56, 58, 59, 60, 153], "donorm": [56, 58, 59, 60], "deviat": [56, 58, 59, 60], "featureextractortyp": [56, 58, 59, 60], "architectur": [56, 58, 59, 60, 69, 70, 71, 75, 86, 104, 117, 131, 135, 136, 145, 148, 150], "featur": [56, 58, 59, 60, 62, 77, 84, 89, 90, 92, 102, 112, 116, 125, 144, 151, 203, 226], "imagemean": [56, 58, 59, 60], "imagestd": [56, 58, 59, 60], "resampl": [56, 58, 59, 60], "pil": [56, 58, 59, 60], "nearest": [56, 58, 59, 60, 151], "bilinear": [56, 58, 59, 60], "bicub": [56, 58, 59, 60], "do_res": [56, 58, 59, 60], "tupl": [56, 58, 59, 60, 202], "dorescal": [56, 58, 59], "rescal": [56, 58, 59], "rescalefactor": [56, 58, 59], "factor": [56, 58, 59, 94, 95, 96, 135, 136, 150, 153], "croppct": 56, "percentag": [56, 93, 153, 167], "crop": 56, "tabbi": [56, 58], "river": [56, 58, 60], "hors": [56, 58, 60], "amphibiu": [56, 58, 60], "snowbird": [56, 58, 60], "struthio": [56, 58, 60], "camelu": [56, 58, 60], "thresher": 56, "thrasher": 56, "thresh": 56, "setdorescal": 56, "boolean": [56, 107], "setrescalefactor": 56, "255": 56, "setcroppct": 56, "determin": [56, 68, 94], "smaller": [56, 67, 76, 77, 92], "224": 56, "256": 56, "specifi": [56, 68, 118, 119, 122, 131, 135, 209, 210], "edg": [56, 76, 99, 137, 141], "afterward": 56, "image_classifier_convnext_tiny_224_loc": 56, "clip_for_zero_shot_classif": 57, "convnext_for_image_classif": 57, "swin_for_image_classif": 57, "vision_encoder_decoder_for_image_capt": 57, "vit_for_image_classif": 57, "swinforimageclassif": 58, "swinimageclassif": 58, "shift": 58, "window": [58, 59, 77, 82, 92, 102, 117, 144, 148, 153], "ze": 58, "yutong": 58, "lin": 58, "yue": [58, 145], "cao": 58, "han": 58, "hu": [58, 142], "yixuan": 58, "zheng": 58, "zhang": 58, "stephen": 58, "bain": 58, "guo": 58, "whose": [58, 68, 147], "scheme": [58, 86, 135, 136], "bring": [58, 142, 223], "greater": [58, 102, 122, 135], "attent": [58, 60, 75, 82, 122, 135, 140, 144, 148], "non": [58, 137, 142, 146, 164, 167], "overlap": [58, 65, 67, 106, 111], "cross": [58, 94, 95, 118], "connect": 58, "image_classifier_swin_base_patch4_window7_224": 58, "swinforimageclassificationtest": 58, "present": [58, 69, 78, 79, 82, 86, 87, 91, 94, 95, 99, 122, 125, 131, 135, 136, 143, 151], "call": [58, 68, 70, 71, 76, 78, 90, 102, 122, 138, 140, 146, 147, 202, 207, 209, 223, 229], "purpos": [58, 76, 78, 131], "adapt": [58, 148], "aris": 58, "domain": [58, 81, 90, 102, 138], "variat": 58, "high": [58, 89, 90, 91, 94, 95, 135, 136, 142, 143, 145, 147, 149], "variou": [58, 90, 96, 144, 146, 149, 217], "complex": [58, 79, 90, 91, 102, 144, 155, 156], "respect": [58, 68, 75, 93, 116, 117, 147, 212], "These": [58, 69, 86, 87, 90, 96, 102, 116, 138, 141, 206, 221], "broad": [58, 65, 138], "rang": [58, 70, 71, 75, 76, 78, 81, 94, 95, 135, 136, 140, 141, 146], "1k": 58, "dens": [58, 70, 71, 72, 142, 147, 151], "box": [58, 142, 145], "ap": 58, "51": [58, 170, 179, 212], "53": [58, 106, 111], "miou": 58, "val": 58, "Its": [58, 64, 119, 136], "surpass": [58, 75, 85, 137, 144], "previou": [58, 81, 83, 94, 95, 138, 141, 145, 148, 223], "margin": [58, 83, 96], "prove": 58, "benefici": [58, 102], "mlp": 58, "visionencoderdecoderforimagecapt": 59, "visionencoderdecod": 59, "caption": 59, "auto": [59, 136, 159], "beit": 59, "deit": 59, "gpt2": [59, 138], "image_captioning_vit_gpt2": 59, "visionencoderdecodertestspec": 59, "nreturnsequ": 59, "computation": [59, 79, 86, 87, 96, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150], "expens": [59, 79, 86, 87, 96, 133, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 155], "especi": [59, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150], "larger": [59, 73, 76, 86, 87, 135, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151], "acceler": [59, 79, 96, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 196], "gpu": [59, 69, 135, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 196], "imagecapt": 59, "setbeams": [59, 136, 141, 142, 145, 190], "setdosampl": [59, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "fill": [59, 135, 136], "furnitur": 59, "lai": [59, 145], "couch": 59, "anoth": [59, 224], "brown": 59, "bear": 59, "bodi": 59, "water": 59, "flock": 59, "chicken": 59, "stand": [59, 70, 71, 144], "lush": 59, "green": 59, "field": [59, 77, 92, 93, 97, 111, 146, 147, 148], "small": [59, 60, 66, 69, 73, 76, 77, 85, 92, 105, 128, 135, 145, 146, 147, 149, 178, 212, 227], "wet": 59, "ground": 59, "wooden": 59, "floor": 59, "wear": 59, "blue": 59, "sweater": 59, "man": [59, 138, 140], "cow": 59, "vitforimageclassif": 60, "altern": [60, 102, 122, 133, 153, 155, 156, 178, 181, 223, 228], "vitimageclassificationtestspec": 60, "becom": [60, 69, 76, 102], "facto": [60, 102], "remain": [60, 66, 69, 76, 102], "conjunct": 60, "replac": [60, 66, 75, 82, 104, 105, 118, 131, 135, 136, 155, 156, 189, 223], "overal": [60, 93, 96, 137, 147], "structur": [60, 119, 182, 222], "relianc": [60, 90], "cnn": [60, 104, 117, 131], "necessari": [60, 68, 76, 219, 226], "directli": [60, 142, 145, 178, 203, 207, 219], "patch": 60, "mid": 60, "cifar": 60, "vtab": 60, "etc": [60, 74, 78, 81, 83, 137, 148, 171, 182, 219], "attain": 60, "excel": [60, 96, 144], "substanti": [60, 70, 71], "fewer": [60, 69, 81, 151], "worth": 60, "16x16": 60, "egyptian": [60, 145], "date2chunk": 61, "datematch": [61, 107], "multidatematch": [61, 107, 109], "entitynam": 61, "date_chunk": 61, "omicron": 61, "covid": 61, "world": [61, 65, 66, 67, 84, 89, 90, 144, 146, 147, 148, 160, 203, 214, 219], "health": 61, "organ": [61, 102, 143], "nov": [61, 107, 109, 212], "26": [61, 115, 178, 195, 206, 214], "2021": [61, 107, 109], "118": [61, 181], "121": 61, "01": [61, 107, 109, 110], "setentitynam": 61, "dependencypars": [62, 64, 99], "dependencyparserapproach": [62, 210, 229], "unlabel": [62, 70, 71, 136, 138, 150], "grammat": [62, 64], "dependencyparsermodel": [62, 64, 99], "relationship": [62, 64, 91, 99], "tell": [62, 64, 102, 195], "verb": [62, 64, 210], "modifi": [62, 64, 86, 87, 115, 122, 131], "describ": [62, 64, 85, 99, 102, 143], "particular": [62, 64, 102, 207, 223], "treebank": 62, "penn": 62, "setdependencytreebank": 62, "conll": [62, 64, 116, 117, 196, 210, 211, 226], "u": [62, 64, 75, 76, 102, 109, 115, 116, 117, 178, 195, 206, 210, 221, 224, 229], "setconllu": [62, 64], "dependencytreebank": 62, "conllu": [62, 64, 105, 196, 211, 226], "numberofiter": [62, 64], "converg": [62, 64, 128, 167], "better": [62, 64, 69, 75, 83, 96, 102, 116, 128, 130, 131, 134, 135, 136, 137, 140, 167], "typeddependencyparserapproach": [62, 64], "postagg": [62, 64, 99, 116, 128], "dependency_treebank": 62, "emptydataset": [62, 64], "tree": [62, 99], "bank": 62, "setnumberofiter": [62, 64], "read_a": [62, 64, 97, 105, 106, 110, 111, 116, 120, 125, 133, 155, 156, 164, 188, 194, 196, 209, 210], "reada": [62, 64, 93, 97, 105, 106, 110, 111, 116, 120, 125, 133, 155, 156, 160, 164, 191, 194, 209, 210], "dep": 62, "dependency_conllu": [62, 99], "perceptron": [62, 100, 127], "typeddependencyparsermdoel": 62, "union": [62, 64], "worker": [62, 64], "turner": [62, 64], "newal": [62, 64], "sai": [62, 64, 102, 164], "disappoint": [62, 64], "talk": [62, 64, 122], "stricken": [62, 64], "parent": [62, 64], "firm": [62, 64], "feder": [62, 64], "mogul": [62, 64], "dependency_pars": [63, 100, 207, 228], "typed_dependency_pars": [63, 100], "typeddependencypars": [64, 99], "conll2009": 64, "typeddependencyparsermodel": [64, 99], "beforehand": 64, "2009": 64, "setconll2009": 64, "dependency_typ": [64, 99], "train_smal": 64, "txt": [64, 77, 92, 93, 105, 106, 110, 111, 128, 131, 133, 153, 155, 156, 160, 164, 212, 213, 229], "typdep": 64, "dependency_typed_conllu": [64, 99], "amod": 64, "flat": [64, 99, 173], "nsubj": [64, 99, 173, 210], "parataxi": 64, "documentnorm": [65, 66, 67], "documentcharactertextsplitt": 65, "roughli": 65, "separ": [65, 67, 76, 86, 110, 112, 130, 131, 155, 164, 167, 172, 195, 209, 221], "subtext": 65, "perfect": [65, 67], "reason": [65, 67, 122, 146, 147, 149], "observ": [65, 67, 91], "seen": [65, 67, 135, 136], "addition": [65, 67, 96, 117, 128, 144, 148, 170, 179, 206], "custom": [65, 93, 116, 117, 130, 131, 164, 196, 203], "setsplitpattern": [65, 164], "regex": [65, 66, 97, 107, 110, 120, 153, 155, 156, 163, 164, 167], "setpatternsareregex": 65, "setkeepsepar": 65, "trim": [65, 67], "whitespac": [65, 67, 163, 167, 169], "settrimwhitespac": [65, 67, 163], "individu": [65, 67, 68, 102, 153], "setexplodesplit": [65, 67], "documentcharactertextsplittertest": 65, "chunksiz": 65, "chunkoverlap": 65, "splitpattern": [65, 164], "decreas": [65, 122, 151], "prioriti": [65, 155, 164], "patternsareregex": 65, "keepsepar": 65, "explodesplit": [65, 67], "trimwhitespac": [65, 67, 163], "brioni": 65, "lodg": 65, "serpentin": 65, "aven": 65, "19798": 65, "39395": 65, "19597": 65, "did": [65, 102, 144, 148], "woman": 65, "think": 65, "39371": 65, "59242": 65, "19871": 65, "But": [65, 67, 72, 78, 85], "said": [65, 67], "million": [65, 85, 102, 118, 138], "red": 65, "men": 65, "59166": 65, "77833": 65, "18667": 65, "friend": 65, "enthusiast": 65, "musician": 65, "being": [65, 76, 117, 122, 125, 136, 140, 143, 147, 150, 151], "himself": 65, "capab": 65, "77835": 65, "97769": 65, "19934": 65, "And": 65, "yet": [65, 207], "convinc": 65, "come": [65, 102, 115, 122, 140], "li": [65, 147], "97771": 65, "117248": 65, "19477": 65, "she": [65, 162], "had": [65, 102, 122], "slate": 65, "colour": 65, "brim": 65, "straw": 65, "hat": 65, "feather": 65, "117250": 65, "137242": 65, "19992": 65, "That": [65, 102, 162, 203, 219, 224], "littl": [65, 131, 228], "paradox": 65, "profoundli": 65, "singulari": 65, "137244": 65, "157171": 65, "19927": 65, "setchunks": 65, "setchunkoverlap": 65, "raw": [66, 138, 162, 164, 167, 222, 224], "scrape": 66, "xml": 66, "remov": [66, 86, 87, 120, 134, 163, 171, 172, 173], "dirti": [66, 120], "want": [66, 67, 97, 118, 207, 224], "polici": 66, "__": [66, 135, 136, 171, 172], "action": 66, "clean": [66, 120, 136, 150, 182, 224], "lowercas": [66, 120, 163, 167, 169], "pretty_al": 66, "utf": 66, "cleanuppattern": [66, 120], "normalizeddocu": 66, "setact": 66, "setpattern": [66, 163, 167], "setreplac": 66, "setpolici": 66, "setlowercas": [66, 120, 169, 182], "div": 66, "theworldsgreatest": 66, "right": [66, 70, 71, 135, 136, 167], "hide": 66, "toptext": 66, "style": [66, 104, 150], "font": 66, "sego": 66, "ui": 66, "arial": 66, "san": [66, 102], "serif": 66, "largest": [66, 102, 138], "develop": [66, 102, 140, 141, 143, 145, 146, 149, 200], "site": [66, 102, 137], "h1": 66, "300": 66, "160": 66, "lorem": [66, 106, 111], "ipsum": [66, 106, 111], "print": [66, 68, 196, 207], "typeset": 66, "industri": 66, "been": [66, 73, 138, 140, 141, 146, 165, 182, 207], "1500": [66, 142], "unknown": [66, 67, 104], "printer": 66, "took": [66, 145], "gallei": 66, "scrambl": 66, "specimen": 66, "surviv": 66, "five": [66, 118], "centuri": [66, 144, 167], "leap": 66, "electron": 66, "essenti": [66, 138], "unchang": 66, "popularis": 66, "1960": 66, "letraset": 66, "passag": [66, 72, 78, 85], "recent": [66, 70, 71, 75, 86, 87, 102, 122, 135, 136], "desktop": 66, "publish": [66, 86, 87], "softwar": [66, 149], "aldu": 66, "pagemak": 66, "setencod": 66, "documenttokensplitt": 67, "measur": [67, 76, 86, 87, 135, 136, 147, 203], "futur": [67, 131, 136, 150], "techniqu": [67, 69, 75, 136, 138, 141, 145, 150, 151], "documenttokensplittertest": 67, "numtoken": 67, "tokenoverlap": 67, "immens": 67, "faculti": 67, "extraordinari": 67, "power": [67, 70, 71, 136, 150], "2950": 67, "5707": 67, "2757": 67, "chang": [67, 68, 81, 199], "cloth": 67, "imagin": 67, "deduc": 67, "As": [67, 69, 70, 71, 72, 76, 78, 85, 102, 122], "5659": 67, "8483": 67, "2824": 67, "quarter": 67, "receiv": [67, 212, 229], "Be": 67, "chamber": 67, "8427": 67, "11241": 67, "2814": 67, "piti": 67, "miss": [67, 107, 109, 169], "client": 67, "never": [67, 134, 223], "mind": [67, 145], "him": [67, 109], "11188": 67, "13970": 67, "2782": 67, "person": [67, 97, 210], "emploi": [67, 96], "me": [67, 109, 141], "wish": 67, "agent": 67, "conf": 67, "13918": 67, "16898": 67, "2980": 67, "letter": [67, 120, 138, 140, 153, 212, 229], "secret": 67, "marriag": 67, "16836": 67, "19744": 67, "2908": 67, "seven": 67, "hundr": [67, 94, 95], "holm": [67, 153], "scribbl": 67, "receipt": 67, "shee": 67, "19683": 67, "22551": 67, "2868": 67, "setnumtoken": 67, "settokenoverlap": 67, "documenttokensplittertestspec": 68, "methodnam": 68, "runtest": 68, "By": [68, 90, 133, 136, 150, 158, 163, 171, 196, 203, 219], "fixtur": 68, "testcas": 68, "subclass": [68, 151, 184, 198, 202], "constructor": 68, "argument": [68, 207], "execut": [68, 151, 178, 223, 227], "author": 68, "deconstruct": 68, "overrid": [68, 135, 202], "setup": 68, "teardown": 68, "__init__": 68, "must": [68, 77, 92, 105, 106, 110, 111, 122, 125, 133, 134, 135, 155, 156, 169, 195, 196, 203, 209], "alwai": [68, 102, 122, 141, 146, 147, 148, 150], "signatur": 68, "attribut": [68, 203], "failureexcept": 68, "except": [68, 73, 112, 117, 164], "rais": [68, 86, 87, 102, 112, 117, 203], "assert": 68, "fail": [68, 169], "deem": 68, "error": [68, 135, 153], "longmessag": 68, "long": [68, 71, 82, 85, 90, 96, 144, 147], "messag": [68, 221], "repr": 68, "failur": 68, "maxdiff": 68, "diff": 68, "difflib": 68, "hook": 68, "exercis": 68, "lite": 69, "googl": [69, 70, 71, 75, 77, 79, 86, 87, 91, 92, 102, 150, 210], "research": [69, 70, 71, 75, 77, 92, 143, 145, 146, 150], "toyota": 69, "technolog": 69, "institut": 69, "chicago": 69, "offici": [69, 102, 115, 116, 117, 178, 195, 206, 220], "tf": [69, 91], "wrapper": [69, 199], "port": 69, "properti": [69, 147, 174, 175, 185, 188, 196], "albert_base_uncas": 69, "albert_bas": 69, "768": [69, 70, 71, 72, 73, 75, 76, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 94, 95, 96], "emb": [69, 85, 89], "dim": [69, 135], "12m": 69, "albert_large_uncas": 69, "albert_larg": 69, "1024": [69, 79, 82, 96], "24": [69, 96, 106, 111, 115, 153, 178, 195, 206, 222], "16": [69, 96, 118, 212, 222], "18m": 69, "albert_xlarge_uncas": 69, "albert_xlarg": 69, "2048": 69, "60m": 69, "albert_xxlarge_uncas": 69, "albert_xxlarg": 69, "235m": 69, "sentencepiec": [69, 75, 91], "everi": [69, 70, 71, 72, 73, 75, 76, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 94, 95, 96, 117, 134, 143, 153, 170, 179, 180, 224], "dimens": [69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 190], "repeat": [69, 122, 135], "footprint": 69, "cost": [69, 144, 153, 155], "FOR": 69, "http": [69, 73, 75, 77, 79, 81, 85, 91, 92, 122, 123, 135, 136, 137, 146, 147, 167, 220], "tfhub": [69, 79, 91], "q": 69, "increas": [69, 72, 78, 85, 93, 102, 122, 135, 136, 138, 142, 151, 155], "downstream": [69, 73, 75, 79, 81, 82, 96, 136, 138, 150], "some": [69, 71, 94, 102, 117, 131, 135, 137, 138, 141, 147, 180, 203, 214, 222, 223, 227, 228], "point": [69, 70, 71, 130, 131, 170, 179, 209], "harder": 69, "tpu": 69, "consumpt": [69, 91, 93], "speed": [69, 116, 137, 143, 144], "devlin": [69, 86, 87], "et": [69, 86, 87, 104, 142], "al": [69, 86, 87], "2019": [69, 73, 75, 86, 87, 94, 95, 136], "comprehens": [69, 90, 135, 136, 137, 138, 141, 144, 148, 149], "empir": [69, 70, 71, 94, 95, 96], "evid": 69, "lead": [69, 73, 84, 89, 90, 94, 95, 141], "focus": [69, 89, 102, 122, 149], "inter": 69, "coher": [69, 138], "establish": 69, "glue": [69, 70, 71, 76, 83, 86, 87, 94, 95, 135, 136], "race": [69, 75, 86, 87], "embeddingsfinish": [69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 171], "finished_embed": [69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "setoutputasvector": [69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 171], "setcleanannot": [69, 75, 76, 79, 82, 86, 88, 91, 93, 94, 96, 171, 172, 173], "80": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 110, 171, 182], "1342473030090332": [69, 75], "3855540752410889": [69, 75], "9818322062492371": [69, 75], "784737348556518": [69, 75], "847029983997345": [69, 75], "047153353691101": [69, 75], "1520637571811676": [69, 75], "6245765686035156": [69, 75], "009860038757324219": [69, 75], "13450059294700623": [69, 75], "707749128341675": [69, 75], "2916892766952": [69, 75], "04192575812339783": [69, 75], "5764210224151611": [69, 75], "3196685314178467": [69, 75], "527840495109": [69, 75], "15583214163780212": [69, 75], "1614152491092682": [69, 75], "28423872590065": [69, 75], "135491415858268": [69, 75], "bertembed": [70, 74, 81, 88, 117, 171], "small_bert_l2_768": 70, "understand": [70, 71, 76, 83, 94, 96, 102, 136, 141, 146, 147, 149, 150, 167, 222], "introduc": [70, 71, 76, 79, 81, 82, 83, 90, 136, 140, 141, 144, 147, 149, 150], "unlik": [70, 71, 81, 94, 102, 162], "jointli": [70, 71], "condit": [70, 71, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "both": [70, 71, 78, 79, 85, 91, 99, 122, 135, 136, 141, 147, 148, 223, 224], "left": [70, 71, 135, 136, 145, 167], "just": [70, 71, 76, 86, 112, 117], "modif": [70, 71], "conceptu": [70, 71], "obtain": [70, 71, 73, 78, 91, 145], "eleven": [70, 71], "push": [70, 71], "absolut": [70, 71], "multinli": [70, 71], "86": [70, 71, 75], "v1": [70, 71, 85], "f1": [70, 71, 94, 95, 117, 138], "93": [70, 71], "83": [70, 71, 75, 212, 213, 229], "small_bert_l2_128": 70, "3497989177703857": [70, 81], "480538547039032": [70, 81], "3238905668258667": [70, 81], "612930893898010": [70, 81], "1357314586639404": 70, "32984697818756104": 70, "6032363176345825": 70, "6791689395904": 70, "8244884014129639": 70, "27088963985443115": 70, "059438943862915": 70, "9817547798156": 70, "1648050546646118": 70, "4725411534309387": 70, "5938255786895752": 70, "5780693292617": 70, "9125322699546814": 70, "4563939869403839": 70, "3975459933280945": 70, "81611204147338": 70, "use_openvino": [70, 71, 78, 85, 86, 94, 137, 140, 141, 142, 144, 145, 146, 147, 148, 149], "openvino": [70, 71, 78, 86, 94], "backend": [70, 71, 78, 86, 94], "sentence_bert_embed": 71, "sent_small_bert_l2_768": 71, "islong": 71, "sent_small_bert_l2_128": 71, "orang": [71, 87, 95], "8951074481010437": [71, 87, 95], "13753940165042877": [71, 87, 95], "3108254075050354": [71, 87, 95], "65693199634552": [71, 87, 95], "6180210709571838": [71, 87, 95], "12179657071828842": [71, 87, 95], "191165953874588": [71, 87, 95], "4497021436691": [71, 87, 95], "822715163230896": [71, 87, 95], "7568016648292542": [71, 87, 95], "1165061742067337": [71, 87, 95], "59048593044281": [71, 87, 95], "setislong": 71, "bgeembed": 72, "bge": 72, "baai": 72, "low": [72, 94, 95, 135, 145, 149, 153], "dimension": [72, 91], "bge_bas": 72, "queri": [72, 78, 85, 140, 144, 148, 151, 220], "protein": [72, 78, 85], "femal": [72, 78, 85], "eat": [72, 78, 85], "guidelin": [72, 78, 85], "cdc": [72, 78, 85], "women": [72, 78, 85], "70": [72, 78, 81, 85, 140, 141, 146], "46": [72, 78, 85, 214], "gram": [72, 77, 78, 85, 92, 102, 112, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "dai": [72, 78, 85, 107, 109, 153], "chart": [72, 78, 85, 203, 219], "ll": [72, 78, 85, 167], "marathon": [72, 78, 85], "below": [72, 78, 85, 99, 228], "0190285e": [72, 78, 85], "005974853": [72, 78, 85], "072875895": [72, 78, 85], "007944068": [72, 78, 85], "026059335": [72, 78, 85], "0080": [72, 78, 85], "050514214": [72, 78, 85], "010061974": [72, 78, 85], "04340176": [72, 78, 85], "020937217": [72, 78, 85], "05170225": [72, 78, 85], "01157857": [72, 78, 85], "camembertembed": 73, "tasti": 73, "french": [73, 102, 142, 143, 145, 158], "loui": 73, "martin": 73, "muller": 73, "pedro": 73, "javier": 73, "ortiz": 73, "su\u00e1rez": 73, "yoann": 73, "dupont": 73, "laurent": 73, "romari": 73, "\u00e9ric": 73, "villemont": 73, "la": [73, 122, 143], "clergeri": 73, "djam\u00e9": 73, "seddah": 73, "beno\u00eet": 73, "sagot": 73, "facebook": [73, 75, 94, 95, 136], "138gb": 73, "camembert_bas": 73, "camembertembeddingstestspec": 73, "co": [73, 102, 146, 147], "ubiquit": 73, "despit": [73, 135, 136, 147], "concaten": [73, 167], "investig": [73, 76, 91], "feasibl": 73, "monolingu": [73, 94, 95], "crawl": [73, 136, 150], "prefer": [73, 99, 147, 173], "wikipedia": [73, 104, 138], "surprisingli": [73, 91], "4gb": 73, "130": 73, "gb": 73, "reach": [73, 102, 138, 167], "four": [73, 131, 165, 167], "un": [73, 104], "08442357927560806": 73, "12863239645957947": 73, "03835778683423996": 73, "200479581952": 73, "048462312668561935": 73, "12637358903884888": 73, "27429091930389404": 73, "07516729831": 73, "02690504491329193": 73, "12104076147079468": 73, "012526623904705048": 73, "031543646007": 73, "05877285450696945": 73, "08773420006036758": 73, "06381352990865707": 73, "122621834278": 73, "chunkembed": [74, 171], "wordembed": [74, 88, 93, 117, 171, 196], "chunker": [74, 100, 196], "ngramgener": [74, 112], "nerconvert": [74, 115, 116, 117, 203, 219], "poolingstrategi": [74, 88], "aggreg": [74, 88, 151], "sum": [74, 79, 88], "skipoov": 74, "discard": [74, 119], "oov": 74, "setn": [74, 112], "wordembeddingsmodel": [74, 88, 93, 99, 116, 117, 118, 171], "setpoolingstrategi": [74, 84, 88, 89, 90], "55661": 74, "42829502": 74, "86661": 74, "409785": 74, "06316501": 74, "120775": 74, "0732005": 74, "40674996": 74, "22938299": 74, "50597": 74, "288195": 74, "555655": 74, "465145": 74, "140118": 74, "17417": 74, "095253006": 74, "0530925": 74, "218465": 74, "714395": 74, "79860497": 74, "0129999": 74, "139705": 74, "177955": 74, "1887775": 74, "45545": 74, "20030999": 74, "461557": 74, "07891501": 74, "strategi": [74, 84, 88, 89, 90, 107, 110, 130, 135, 153, 189], "setskipoov": 74, "debertaembed": 75, "enhanc": [75, 134, 136, 141, 144, 146], "disentangl": 75, "pengcheng": 75, "xiaodong": 75, "jianfeng": 75, "gao": 75, "weizhu": 75, "chen": [75, 86, 87], "2018": [75, 86, 87], "half": [75, 102], "deberta_v3_bas": 75, "microsoft": [75, 78, 83, 85, 143, 146, 147], "www": 75, "blog": 75, "superglu": 75, "progress": [75, 131, 163], "significantli": [75, 79, 86, 87, 94, 95, 102, 147, 149], "novel": [75, 83, 90, 96, 102, 135, 136, 145], "mechan": [75, 82], "weight": [75, 79, 85, 102, 116, 118, 149, 153], "among": [75, 83, 137, 146, 147], "matric": 75, "second": [75, 79, 110, 130, 158, 163, 223], "mnli": 75, "9": [75, 94, 95, 112, 123, 135, 137, 142, 147, 222, 227, 228], "90": 75, "91": 75, "88": 75, "made": [75, 91, 219], "publicli": [75, 94, 95, 147], "distilbertembed": 76, "fast": [76, 134, 140, 143, 178, 227], "cheap": 76, "distil": 76, "40": [76, 78, 118, 135, 140, 141, 143, 145], "uncas": 76, "preserv": [76, 115, 163, 182], "95": 76, "distilbert_base_cas": 76, "doesn": [76, 86], "token_type_id": [76, 86], "indic": [76, 86, 163, 167], "belong": [76, 86, 147], "sep_token": [76, 86], "sep": 76, "position_id": 76, "ad": [76, 79, 122, 153], "though": [76, 102], "know": [76, 143, 180], "cheaper": 76, "lighter": 76, "preval": 76, "oper": [76, 82, 153, 162, 222], "constrain": [76, 135], "budget": 76, "counterpart": 76, "leverag": [76, 83, 203, 219], "reduc": [76, 83, 144, 146, 155, 156, 182], "retain": 76, "97": [76, 107, 109, 167], "tripl": [76, 99], "cosin": [76, 90], "distanc": [76, 151, 153, 155, 156], "devic": 76, "proof": 76, "concept": [76, 224], "experi": [76, 90, 96, 122, 135, 136, 137, 144, 203, 220], "1127224713563919": 76, "1982710212469101": 76, "5360898375511169": 76, "272536993026733": 76, "35534414649009705": 76, "13215228915214539": 76, "40981462597846985": 76, "14036104083061": 76, "328085333108902": 76, "06269335001707077": 76, "017595693469047546": 76, "024373905733": 76, "15617232024669647": 76, "2967822253704071": 76, "22324979305267334": 76, "04568954557180": 76, "45411425828933716": 76, "01173491682857275": 76, "190129816532135": 76, "1178255230188369": 76, "doc2vecapproach": 77, "word2vec": [77, 80, 100], "corpu": [77, 79, 92, 102, 105, 128, 136, 150, 153, 212, 229], "algorithm": [77, 92, 102, 116, 134, 153, 155, 156], "skip": [77, 92, 99, 153], "doc2vecmodel": 77, "vectors": [77, 92], "windows": [77, 92, 102], "numpartit": [77, 92], "partit": [77, 92, 209], "mincount": [77, 92, 153], "appear": [77, 92, 122, 153], "divid": [77, 92], "1000": [77, 92, 99, 116], "stepsiz": [77, 92], "optim": [77, 86, 87, 89, 90, 92, 117, 119, 131, 135, 140, 141, 146, 147], "025": [77, 92], "maxit": [77, 92], "estim": [77, 92, 159, 174, 183, 192, 202, 223], "distribut": [77, 92, 135], "composition": [77, 92], "sherlockholm": [77, 92, 153, 229], "setvectors": [77, 92], "setwindows": [77, 92, 102], "setsteps": [77, 92], "initi": [77, 92, 135, 147, 153, 163, 180, 196, 209, 210, 212, 213, 219], "setnumpartit": [77, 92], "setmaxit": [77, 92], "numiter": [77, 92], "equal": [77, 92], "setse": [77, 92, 135], "setmincount": [77, 92, 153], "doc2vec_gigaword_300": 77, "06222493574023247": [77, 92], "011579325422644615": [77, 92], "009919632226228714": [77, 92], "109361454844": [77, 92], "doc2vec_wiki": 77, "getvector": [77, 92], "e5embed": [78, 83, 85, 151], "e5": 78, "weakli": [78, 85], "tailor": [78, 81, 145], "e5_smal": 78, "unilm": [78, 85], "manner": [78, 102], "signal": [78, 79], "curat": [78, 85], "ccpair": 78, "readili": 78, "strong": [78, 94, 95, 146, 147, 148], "conduct": [78, 90], "extens": [78, 90, 144, 149, 199], "56": [78, 212], "beir": 78, "mteb": 78, "bm25": 78, "baselin": [78, 91, 138], "beat": 78, "exist": [78, 79, 90, 122, 137, 142, 153, 171, 173, 203], "elmoembed": 79, "elmo": 79, "billion": [79, 138, 140, 141, 144, 146, 147, 149], "lookup": [79, 93, 96, 106, 135, 155, 156], "setpoolinglay": 79, "word_emb": 79, "shape": 79, "batch_siz": 79, "max_length": 79, "lstm_outputs1": 79, "lstm": [79, 117], "lstm_outputs2": 79, "trainabl": 79, "tensor": [79, 135], "poolinglay": 79, "contextu": [79, 136, 141, 145, 153], "characterist": 79, "syntax": 79, "vari": [79, 122], "across": [79, 135, 138, 140, 141, 144, 151], "linguist": [79, 167], "polysemi": 79, "intern": [79, 124, 125, 147, 150, 153, 164, 167, 181, 185, 190, 196], "bilm": 79, "six": [79, 155, 156], "textual": [79, 81, 90, 144], "entail": 79, "expos": 79, "crucial": [79, 90], "mix": [79, 135, 151, 184, 202], "semi": 79, "662458181381226e": 79, "2541114091873169": 79, "6275503039360046": 79, "5787073969841": 79, "19154725968837738": 79, "22998669743537903": 79, "2894386649131775": 79, "21524395048618": 79, "10400570929050446": 79, "12288510054349899": 79, "07056470215320587": 79, "246389418840": 79, "49932169914245605": 79, "12706467509269714": 79, "30969417095184326": 79, "2643227577209": 79, "8871506452560425": 79, "20039963722229004": 79, "0601330995559692": 79, "0348707810044": 79, "albert_embed": [80, 100], "bert_embed": [80, 100], "bert_sentence_embed": [80, 100], "bge_embed": [80, 100], "camembert_embed": [80, 100], "chunk_embed": [80, 100], "deberta_embed": [80, 100], "distil_bert_embed": [80, 100], "doc2vec": [80, 100], "e5_embed": [80, 100], "elmo_embed": [80, 100], "instructor_embed": [80, 100], "longformer_embed": [80, 100], "mpnet_embed": [80, 100], "mxbai_embed": [80, 100], "nomic_embed": [80, 100], "roberta_embed": [80, 100], "roberta_sentence_embed": [80, 100], "snowflake_embed": [80, 100], "uae_embed": [80, 100], "universal_sentence_encod": [80, 100], "xlm_roberta_embed": [80, 100], "xlm_roberta_sentence_embed": [80, 100], "xlnet_embed": [80, 100], "instructorembed": 81, "instructor": 81, "finetun": [81, 82, 96], "financ": 81, "sota": [81, 90, 96], "divers": [81, 91, 136, 138, 141, 149, 150, 220], "setinstruct": 81, "medicin": 81, "instructor_bas": 81, "summar": [81, 82, 102, 135, 136, 138, 143, 150, 190], "embedd": 81, "hkunlp": 81, "togeth": 81, "explain": [81, 203, 219, 226, 228], "special": [81, 153, 167, 197, 224], "330": 81, "mixtur": [81, 145, 148], "66": [81, 118], "unseen": 81, "magnitud": [81, 135, 155, 156], "suggest": [81, 138], "mitig": [81, 90], "url": 81, "io": 81, "dynam": [81, 135, 143], "scalar": 81, "degre": 81, "freedom": 81, "horava": 81, "lifshitz": 81, "graviti": 81, "longformerembed": 82, "iz": 82, "beltagi": 82, "matthew": 82, "arman": 82, "cohan": 82, "checkpoint": 82, "mlm": [82, 83], "096": 82, "longformer_base_4096": 82, "unabl": 82, "quadrat": 82, "linearli": 82, "easi": 82, "thousand": [82, 142, 145], "drop": [82, 158], "motiv": 82, "global": [82, 145], "text8": 82, "enwik8": 82, "wikihop": 82, "triviaqa": 82, "led": [82, 86, 87, 102], "arxiv": [82, 135, 136], "found": [82, 93, 102, 155, 162, 169, 209, 226], "18792399764060974": [82, 86], "14591649174690247": [82, 86], "20547787845134735": [82, 86], "1468472778797": [82, 86], "22845706343650818": [82, 86], "18073144555091858": [82, 86], "09725798666477203": [82, 86], "0417917296290": [82, 86], "07037967443466187": [82, 86], "14801117777824402": [82, 86], "03603338822722435": [82, 86], "17893412709": [82, 86], "08734266459941864": [82, 86], "2486150562763214": [82, 86], "009067727252840996": [82, 86], "24408400058": [82, 86], "22409197688102722": [82, 86], "4312366545200348": [82, 86], "1401449590921402": [82, 86], "356410235166549": [82, 86], "mpnetembed": 83, "adopt": [83, 144], "permut": [83, 96], "inherit": [83, 151, 184, 202], "advantag": [83, 180], "all_mpnet_base_v2": 83, "neglect": [83, 96], "plm": 83, "doe": [83, 94, 102, 115, 142, 143, 145, 178, 180, 207, 224, 227, 228], "full": [83, 85, 96, 148, 149, 223], "thu": [83, 102], "suffer": [83, 96], "discrep": [83, 96], "avoid": [83, 133, 135], "auxiliari": 83, "160gb": 83, "corpora": [83, 102, 106], "down": [83, 117, 223, 224], "stream": [83, 122, 135, 137], "experiment": [83, 102], "022502584": 83, "078291744": 83, "023030775": 83, "0051000593": 83, "080340415": 83, "039": 83, "041702367": 83, "0010974605": 83, "015534201": 83, "07092203": 83, "0017729357": 83, "04661": 83, "mxbaiembed": 84, "mxbai": 84, "mxbai_large_v1": 84, "hello": [84, 89, 90, 106, 111, 135, 160, 214], "moon": [84, 89, 90], "50387806": [84, 89, 90], "5861606": [84, 89, 90], "35129607": [84, 89, 90], "76046336": [84, 89, 90], "32446072": [84, 89, 90], "117674336": [84, 89, 90], "6660665": [84, 89, 90], "961762": [84, 89, 90], "24854276": [84, 89, 90], "1018044": [84, 89, 90], "6569202": [84, 89, 90], "027635604": [84, 89, 90], "1915": [84, 89, 90], "cl": [84, 89, 90], "cls_avg": [84, 89, 90], "avg": [84, 89, 90], "nomicembed": 85, "nomic": 85, "8192": 85, "openai": [85, 100, 138, 196], "ada": [85, 123], "002": [85, 123], "short": [85, 90], "nomic_smal": 85, "technic": 85, "report": [85, 86, 87, 91, 135, 136, 203, 219], "reproduc": [85, 142, 203, 219, 220], "open": [85, 104, 137, 140, 141, 142, 146, 147, 149, 164, 169, 170, 171, 179, 182, 220], "opendata": 85, "licens": [85, 149], "loader": 85, "235": 85, "replic": [85, 86, 87, 135, 136], "embedtext": 85, "nomicai": 85, "contrastor": 85, "robertaembed": [86, 94], "robustli": [86, 87, 119], "yinhan": [86, 87], "myle": [86, 87, 94, 95], "ott": [86, 87, 94, 95], "naman": [86, 87, 94, 95], "goyal": [86, 87, 94, 95], "jingfei": [86, 87], "du": [86, 87, 104], "mandar": [86, 87], "joshi": [86, 87], "danqi": [86, 87], "omer": [86, 87], "levi": [86, 87], "mike": [86, 87], "lewi": [86, 87], "luke": [86, 87, 94, 95], "zettlemoy": [86, 87, 94, 95], "veselin": [86, 87, 94, 95], "stoyanov": [86, 87, 94, 95], "hyperparamet": [86, 87], "mini": [86, 87, 147], "roberta_bas": 86, "bpe": 86, "signific": [86, 87, 94, 95, 102, 105, 140, 148], "gain": [86, 87, 94, 95, 135, 136, 142], "care": [86, 87, 164], "comparison": [86, 87, 91, 148, 158], "privat": [86, 87, 197], "choic": [86, 87, 110, 141, 144], "impact": [86, 87], "carefulli": [86, 87, 122, 149], "undertrain": [86, 87], "exce": [86, 87, 122], "highlight": [86, 87], "previous": [86, 87, 102], "overlook": [86, 87], "robertasentenceembed": 87, "sent_roberta_bas": 87, "embeddingssent": 88, "22093398869037628": 88, "25130119919776917": 88, "41810303926467896": 88, "380883991718": 88, "snowflakeembed": 89, "snowflak": 89, "arctic": 89, "suit": 89, "snowflake_artic_m": 89, "uaeembed": 90, "uae": 90, "llm": [90, 140, 141, 146, 149], "satur": 90, "uae_large_v1": 90, "st": 90, "vanish": 90, "gradient": [90, 116], "zone": 90, "core": 90, "idea": [90, 96], "advers": 90, "imped": 90, "hinder": 90, "furthermor": [90, 96], "examin": 90, "scenario": [90, 134], "were": [90, 93, 117, 203, 219], "uae_smal": 90, "tfhub_us": 91, "loadsp": 91, "op": 91, "lingual": [91, 94, 95, 102, 104, 143], "accur": [91, 134, 136, 155], "trade": [91, 94, 95], "tend": 91, "With": [91, 96, 102, 149], "minim": [91, 119, 143], "encourag": [91, 141], "weat": 91, "bia": [91, 122, 135, 148], "freeli": 91, "04616805538535118": 91, "022307956591248512": 91, "044395286589860916": 91, "0016493503": 91, "setloadsp": 91, "word2vecapproach": 92, "word2vecmodel": 92, "word2vec_gigaword_300": 92, "word2vec_wiki": 92, "dictionari": [93, 102, 105, 110, 116, 118, 119, 120, 133, 155, 156, 203], "setstoragepath": [93, 106], "line": [93, 97, 106, 111, 122, 131, 133, 153, 206, 209, 212], "delimit": [93, 97, 99, 105, 110, 112, 116, 120, 133, 163, 181, 209, 212], "39658191506190343": 93, "630968081620067": 93, "5393722253731201": 93, "8428180123359783": 93, "7535235923631415": 93, "9699218875629833": 93, "10397182122983872": 93, "11833962569383116": 93, "stress": 93, "0492683418305907": 93, "9415954572751959": 93, "47624463167525755": 93, "16790967216778263": 93, "induc": 93, "1535748762292387": 93, "33498936903209897": 93, "9235178224122094": 93, "1158772920395934": 93, "withcoveragecolumn": 93, "overallcoverag": 93, "writebuffers": 93, "dump": 93, "disk": [93, 223, 224], "storag": [93, 97, 106, 188, 196], "10000": 93, "readcaches": 93, "cach": [93, 135, 136, 150, 151, 207], "random_embeddings_dim4": 93, "abov": [93, 99, 212], "setstorageref": 93, "glove_4d": 93, "setdimens": [93, 190], "patient": 93, "diagnos": 93, "diabet": 93, "9439099431037903": 93, "4707513153553009": 93, "806300163269043": 93, "16176554560661316": 93, "7966810464859009": 93, "5551124811172485": 93, "8861005902290344": 93, "28284206986427307": 93, "025029370561242104": 93, "35177749395370483": 93, "052506182342767715": 93, "1887107789516449": 93, "08617766946554184": 93, "8399239182472229": 93, "5395117998123169": 93, "7864698767662048": 93, "6599600911140442": 93, "16109347343444824": 93, "6041093468666077": 93, "8913561105728149": 93, "5955275893211365": 93, "01899011991918087": 93, "4397728443145752": 93, "8911281824111938": 93, "9840458631515503": 93, "7599489092826843": 93, "9417727589607239": 93, "8624503016471863": 93, "setwritebuffers": 93, "setreadcaches": 93, "glove_100d": [93, 117], "There": [93, 97, 99, 162, 221, 223, 224, 229], "conveni": 93, "coverag": [93, 187], "stat": 93, "whole": [93, 206], "570580005645752": 93, "44183000922203064": 93, "7010200023651123": 93, "417129993438720": 93, "542639970779419": 93, "4147599935531616": 93, "0321999788284302": 93, "4024400115013122": 93, "2708599865436554": 93, "04400600120425224": 93, "020260000601410866": 93, "17395000159": 93, "6191999912261963": 93, "14650000631809235": 93, "08592499792575836": 93, "2629800140857": 93, "3397899866104126": 93, "20940999686717987": 93, "46347999572753906": 93, "6479200124740": 93, "embeddings_col": 93, "coverageresult": 93, "coverateresult": 93, "wordsoverallcoverag": 93, "resultdf": 93, "output_col": 93, "wordscoverag": 93, "cov_embed": 93, "loadstorag": [93, 106], "storage_ref": [93, 106], "xlmrobertaembed": 94, "alexi": [94, 95], "conneau": [94, 95], "kartikai": [94, 95], "khandelw": [94, 95], "vishrav": [94, 95], "chaudhari": [94, 95], "guillaum": [94, 95], "wenzek": [94, 95], "francisco": [94, 95, 102], "guzman": 94, "edouard": [94, 95], "grave": [94, 95], "5tb": [94, 95], "commoncrawl": [94, 95], "xlm_roberta_bas": 94, "abl": [94, 142, 150, 203, 222], "correct": [94, 135, 153, 155, 156, 167], "terabyt": [94, 95], "r": [94, 95, 102], "mbert": [94, 95], "xnli": [94, 95], "mlqa": [94, 95], "particularli": [94, 95, 135, 136], "swahili": [94, 95, 142, 145], "urdu": [94, 95, 142, 145], "capac": [94, 95, 138, 142], "dilut": [94, 95], "sacrif": [94, 95], "ri": [94, 95], "05969233065843582": 94, "030789051204919815": 94, "04443822056055069": 94, "09564960747": 94, "038839809596538544": 94, "011712731793522835": 94, "019954433664679527": 94, "0667808502": 94, "03952755779027939": 94, "03455188870429993": 94, "019103847444057465": 94, "04311436787": 94, "09579929709434509": 94, "02494969218969345": 94, "014753809198737144": 94, "10259044915": 94, "004710011184215546": 94, "022148698568344116": 94, "011723337695002556": 94, "013356896": 94, "xlmrobertasentenceembed": 95, "guzm\u00e3": 95, "sent_xlm_roberta_bas": 95, "xlnetembed": 96, "autoregress": 96, "xl": 96, "exhibit": 96, "involv": [96, 131], "rank": [96, 137, 151, 153], "xlnet_large_cas": 96, "xlnet_base_cas": 96, "zihangdai": 96, "denois": [96, 135, 136], "autoencod": [96, 135, 136], "corrupt": [96, 135, 136], "pro": 96, "con": 96, "enabl": [96, 117, 135, 140, 146, 151, 155, 196], "maxim": [96, 135, 153], "likelihood": [96, 122], "overcom": 96, "formul": 96, "integr": [96, 102, 121, 143, 203, 219, 221], "6287205219268799": 96, "4865287244319916": 96, "186111718416214": 96, "234187275171279": 96, "1967450380325317": 96, "2746637463569641": 96, "9481253027915955": 96, "3431355059146881": 96, "0777631998062134": 96, "092679977416992": 96, "5331977605819702": 96, "11190271377563": 96, "8349916934967041": 96, "45627787709236145": 96, "7890847325325012": 96, "028069257736": 96, "134845569729805": 96, "11672890186309814": 96, "4945235550403595": 96, "66587203741073": 96, "entityrul": 97, "entityrulerapproach": 97, "exact": [97, 106, 111, 122], "definit": [97, 119, 209], "json": [97, 122, 181, 203, 214], "jsonl": 97, "setpatternsresourc": 97, "might": [97, 117, 167, 228], "rule": [97, 107, 110, 133, 162, 164, 189], "w": [97, 100, 110, 116, 120, 162, 164, 196], "winterfel": 97, "jon": 97, "snow": [97, 118, 153], "stark": 97, "eddard": 97, "patternsresourc": 97, "usestorag": 97, "rocksdb": 97, "lord": 97, "29": [97, 118, 167, 212, 214], "38": [97, 147, 214], "setusestorag": 97, "setsentencematch": 97, "setalphabetresourc": 97, "alphabet": [97, 120], "plain": [97, 229], "entityrulermodel": 97, "entity_rul": [98, 100], "graphextract": [99, 173], "graph": [99, 117, 143, 153, 159, 173], "nerdlmodel": [99, 115, 116, 117, 118, 203, 207, 219], "store": [99, 124, 125, 135, 181, 185, 190, 201, 206, 214, 220], "node": 99, "relev": [99, 102, 122], "taken": 99, "implicitli": 99, "setmergeent": 99, "setdependencyparsermodel": 99, "settypeddependencyparsermodel": 99, "setrelationshiptyp": 99, "public": [99, 207, 223], "relationshiptyp": 99, "entitytyp": 99, "explodeent": 99, "roottoken": 99, "travers": 99, "maxsentences": 99, "minsentences": 99, "mergeent": 99, "merg": [99, 106, 111], "neighbor": [99, 151], "includeedg": 99, "symbol": [99, 153, 167], "posmodel": 99, "coordin": [99, 130], "remoteloc": 99, "graphfinish": [99, 173], "rdf": [99, 173], "nertagg": [99, 116, 117, 118], "morn": [99, 173], "flight": [99, 173], "denver": [99, 173], "18": [99, 107, 109, 112, 115, 118, 178, 195, 206, 222], "path1": 99, "setentitytyp": 99, "setexplodeent": 99, "setroottoken": 99, "setmaxsentences": 99, "setminsentences": 99, "setmergeentitiesiobformat": 99, "iob": [99, 115, 116, 117], "iob2": [99, 115], "setincludeedg": 99, "setdelimit": [99, 110, 112], "setposmodel": 99, "class": [100, 188, 193, 200, 211, 218, 219, 227, 229], "classifier_dl": [100, 196], "er": [100, 196], "keyword_extract": [100, 196], "yake_keyword_extract": [100, 101], "ld_dl": [100, 196], "language_detector_dl": [100, 103], "matcher": [100, 196], "big_text_match": [100, 108], "date_match": [100, 108], "multi_date_match": [100, 108], "regex_match": [100, 108], "text_match": [100, 108], "ner_approach": [100, 113], "ner_convert": [100, 113], "ner_crf": [100, 113], "ner_dl": [100, 113], "ner_overwrit": [100, 113], "openai_complet": [100, 121], "openai_embed": [100, 121], "param": [100, 116, 151, 184, 185, 190, 196, 201, 202], "sentence_detector_dl": [100, 129, 143], "sentiment_detector": [100, 132], "vivekn_senti": [100, 132], "seq2seq": [100, 196], "auto_gguf_model": [100, 139], "bart_transform": [100, 139], "cpm_transform": [100, 139], "gpt2_transform": [100, 139], "llama2_transform": [100, 139], "llama3_transform": [100, 139], "m2m100_transform": [100, 139], "marian_transform": [100, 139], "mistral_transform": [100, 139], "nllb_transform": [100, 139], "phi2_transform": [100, 139], "phi3_transform": [100, 139], "qwen_transform": [100, 139], "starcoder_transform": [100, 139], "t5_transform": [100, 139], "spell_check": [100, 196], "context_spell_check": [100, 154], "norvig_sweet": [100, 154], "symmetric_delet": [100, 154], "chunk_token": [100, 161], "recursive_token": [100, 161], "regex_token": [100, 161], "word_segment": [100, 166], "chunk2_doc": [100, 196], "date2_chunk": [100, 196], "document_character_text_splitt": [100, 196], "document_norm": [100, 196], "document_token_splitt": [100, 196], "graph_extract": [100, 196], "lemmat": [100, 133, 158, 180, 182, 196], "n_gram_gener": [100, 196], "stemmer": [100, 158, 196], "stop_words_clean": [100, 196], "token2_chunk": [100, 196], "yakekeywordextract": 102, "yake": 102, "independ": [102, 155, 156, 162], "grow": 102, "autom": 102, "adequ": 102, "emerg": [102, 136, 150], "tool": [102, 122, 136, 149], "nor": 102, "thesauri": 102, "neither": 102, "written": [102, 143], "plethora": 102, "situat": [102, 131], "access": 102, "restrict": [102, 146], "therefor": [102, 227], "sent": 102, "boundari": [102, 130, 131, 134, 164, 167], "detector": [102, 107, 133], "section": [102, 170, 179, 219, 221, 227], "tweakabl": 102, "upper": 102, "bound": [102, 130, 131, 134], "minngram": 102, "maxngram": 102, "occurr": [102, 189], "nkeyword": 102, "stopword": [102, 118, 158], "stop": [102, 116, 122, 135, 141, 150, 158], "campo": 102, "mangaravit": 102, "pasquali": 102, "jatowt": 102, "jorg": 102, "nune": 102, "journal": [102, 167], "elsevi": 102, "vol": 102, "509": 102, "pp": [102, 167], "257": 102, "289": 102, "turn": [102, 182, 223], "fly": 102, "demand": 102, "within": [102, 128, 134, 135, 136, 138, 164, 169], "resort": 102, "solut": [102, 144], "articl": [102, 153], "rest": [102, 115], "merit": 102, "ten": 102, "carri": 102, "twenti": 102, "setcontextchar": [102, 164], "setminngram": 102, "setnkeyword": 102, "acquir": 102, "kaggl": [102, 149], "platform": [102, 122, 123, 203, 221], "host": 102, "transact": 102, "somewhat": 102, "vagu": 102, "cloud": 102, "confer": 102, "week": [102, 107, 109, 160], "announc": [102, 118], "earli": 102, "tomorrow": [102, 107, 109], "phone": [102, 147], "founder": 102, "ceo": 102, "anthoni": 102, "goldbloom": 102, "declin": 102, "deni": 102, "acquisit": 102, "happen": 102, "rumor": 102, "scientist": 102, "ben": 102, "hamner": 102, "2010": 102, "servic": [102, 122, 143], "got": 102, "even": [102, 107, 137, 141, 150], "few": [102, 164, 212, 229], "competitor": 102, "drivendata": 102, "topcod": 102, "hackerrank": 102, "stai": 102, "ahead": 102, "nich": 102, "home": [102, 196], "bui": [102, 210], "commun": [102, 140, 141, 146], "mindshar": 102, "too": [102, 133, 222], "plenti": 102, "bit": [102, 131, 228], "histori": [102, 131, 153], "earlier": 102, "month": [102, 107, 109, 212, 229], "team": [102, 143, 203, 219], "around": [102, 145], "youtub": 102, "technologi": 102, "interest": [102, 146, 147, 148], "kernel": 102, "On": [102, 137, 138, 143], "analyz": [102, 134], "compani": [102, 143], "script": [102, 142, 145], "centric": [102, 142, 145], "job": [102, 169], "board": [102, 128, 212], "unclear": 102, "accord": [102, 135, 140, 153, 209], "crunchbas": 102, "pitchbook": 102, "launch": 102, "investor": 102, "ventur": 102, "sv": [102, 142], "angel": [102, 137], "levchin": 102, "naravik": 102, "chie": 102, "economist": 102, "hal": 102, "varian": 102, "khosla": 102, "yuri": 102, "milner": 102, "resulttupl": 102, "ascend": 102, "orderbi": 102, "32051516486864573": 102, "37786450577630676": 102, "39922830978423146": 102, "40224744669493756": 102, "41584827825302534": 102, "setmaxngram": 102, "setstopword": [102, 118, 158], "getstopword": 102, "loaddefaultstopword": [102, 158], "danish": [102, 142, 145, 158], "dutch": [102, 142, 145, 158], "finnish": [102, 142, 145, 158], "german": [102, 142, 145, 158, 209, 229], "hungarian": [102, 142, 145, 158], "italian": [102, 122, 142, 145, 153, 158], "norwegian": [102, 142, 145, 158], "portugues": [102, 142, 145, 158], "russian": [102, 142, 145, 158], "spanish": [102, 142, 145, 158], "swedish": [102, 142, 145, 158], "turkish": [102, 142, 145, 158], "languagedetectordl": 104, "ld": 104, "identif": 104, "rnn": 104, "tatoeba": 104, "140": 104, "wiki": 104, "languagedetector": 104, "ld_wiki_tatoeba_cnn_21": 104, "advanc": [104, 141, 144, 149, 169, 182], "scala": [104, 151, 183, 184, 192, 198, 202], "program": [104, 149], "biblioth\u00e8qu": 104, "traitement": 104, "pour": 104, "le": [104, 143], "avanc\u00e9": 104, "langag": 104, "naturel": 104, "programm": 104, "ist": 104, "ein": 104, "textverarbeitungsbibliothek": 104, "f\u00fcr": 104, "fortgeschritten": 104, "nat\u00fcrlich": 104, "sprachverarbeitung": 104, "die": 104, "programmiersprachen": 104, "und": 104, "lemma": [105, 133, 178, 206, 210, 224, 227, 228], "predefin": [105, 106, 110, 111, 133], "setdictionari": [105, 133, 155, 156], "lemmatizermodel": 105, "lemmas_smal": [105, 133], "setformcol": 105, "correspend": 105, "formcol": [105, 210], "setlemmacol": 105, "fromlemma": 105, "key_delimit": 105, "value_delimit": 105, "lemma_antbnc": 105, "bigtextmatch": [106, 111], "textmatch": [106, 111, 160], "externalresourc": [106, 111, 194], "mergeoverlap": [106, 111], "tokenizermodel": [106, 164], "trie": 106, "dolor": [106, 111], "magna": [106, 111], "aliqua": [106, 111], "sit": [106, 111], "laborum": [106, 111], "entityextractor": [106, 111, 160], "extractor": [106, 111, 160], "59": [106, 107, 109, 111], "setent": [106, 111, 114, 160], "setmergeoverlap": [106, 111], "settoken": 106, "tokenizer_model": 106, "bigtextmatchermodel": 106, "btm": 106, "textmatchermodel": [106, 111], "searchtri": 106, "datematcherutil": 107, "setinputformat": [107, 181], "setoutputformat": [107, 109], "desir": [107, 109], "yyyi": [107, 109], "mm": [107, 109, 167], "dd": [107, 109, 110], "Not": [107, 117, 180], "setreadmonthfirst": 107, "juli": 107, "5th": 107, "2015": 107, "07": 107, "05": 107, "setdefaultdaywhenmiss": 107, "setanchordateyear": [107, 109], "anchor": [107, 109], "year": [107, 109, 138, 140, 160, 212], "setanchordatemonth": [107, 109], "januari": [107, 109], "setanchordatedai": [107, 109], "setrelaxedfactorystrategi": 107, "matchstrategi": [107, 189], "match_first": [107, 110, 189], "relax": 107, "exhaust": 107, "setaggressivematch": 107, "aggress": 107, "attempt": [107, 155], "ambigu": 107, "aggressivematch": 107, "1978": [107, 109], "28": [107, 109, 115, 178, 195, 206, 214, 222], "1984": [107, 109], "04": [107, 109], "02": [107, 109], "1980": [107, 109], "79": [107, 109], "31st": [107, 109], "april": [107, 109], "2008": [107, 109], "fri": [107, 109], "1997": [107, 109], "jan": [107, 109], "sun": [107, 109], "1st": [107, 109], "thursdai": [107, 109], "wednesdai": [107, 109], "todai": [107, 109, 145, 214], "yesterdai": [107, 109], "0600h": [107, 109], "06": [107, 109], "00": [107, 109], "6pm": [107, 109], "23": [107, 109, 110, 118, 128, 212, 213, 214, 229], "1988": [107, 109], "31": [107, 109, 110, 118, 128, 212], "dateformat": [107, 109], "readmonthfirst": [107, 109], "defaultdaywhenmiss": [107, 109], "anchordateyear": [107, 109], "anchordatemonth": [107, 109], "anchordatedai": [107, 109], "15": [107, 214], "saw": 109, "visit": [109, 122], "57": [109, 118], "65": [109, 118], "regexmatch": 110, "d": [110, 120, 164, 221], "1970": 110, "setrul": 110, "setexternalrul": 110, "match_al": [110, 189], "match_complet": [110, 189], "externalrul": 110, "ceremoni": 110, "setstrategi": 110, "71": 110, "short_dat": 110, "regexmatchermodel": 110, "regardless": 111, "entityvalu": 111, "buildfromtoken": 111, "27": [111, 128, 130, 212], "48": [111, 167, 214], "setentityvalu": 111, "setbuildfromtoken": 111, "null": 112, "empti": [112, 151, 169], "enablecumul": 112, "join": [112, 128, 181, 212], "setenablecumul": 112, "nerapproach": 114, "recogn": [114, 115, 116, 117, 118, 119, 153], "setminepoch": [114, 116], "setrandomse": [114, 117, 124, 143], "getlabelcolumn": [114, 159], "friendli": [115, 122, 143], "whitelist": [115, 162], "setwhitelist": [115, 162], "outsid": 115, "prefix": [115, 135, 162, 164, 203, 219], "preserveposit": [115, 163, 182], "14": [115, 128, 165, 178, 195, 206, 212], "ekeu": [115, 116, 117, 178, 195, 206], "36": [115, 128, 178, 195, 206, 212, 214], "baghdad": [115, 116, 117, 178, 195, 206], "37": [115, 178, 195, 206], "setpreserveposit": [115, 163, 182], "setnerhasnoschema": 115, "nercrf": 116, "nercrfapproach": [116, 117], "nercrfmodel": [116, 117], "crf": [116, 117], "2003": [116, 117, 167, 209, 229], "exclud": [116, 117], "setexternalfeatur": 116, "minepoch": [116, 117], "l2": 116, "c0": 116, "decai": [116, 117], "2250000": 116, "lossep": 116, "ep": 116, "minw": 116, "includeconfid": [116, 117], "confid": [116, 117, 119], "externalfeatur": 116, "nerdlapproach": [116, 117, 209, 229], "trainingdata": [116, 117, 131, 155, 156, 209], "readdataset": [116, 117, 128, 167, 209, 210, 212, 213, 214, 229], "conll2003": [116, 117, 209, 229], "eng": [116, 117, 209, 229], "setl2": 116, "l2valu": 116, "setc0": 116, "c0valu": 116, "setlossep": 116, "setminw": 116, "setincludeconfid": [116, 117], "verbosevalu": 116, "prerequisit": [116, 117, 118, 223], "nerdl": 117, "char": [117, 120, 131], "bilstm": 117, "tagger": [117, 212, 229], "50": [117, 118, 128, 136, 137, 138, 140, 142, 144, 145, 146, 147, 148, 149, 214], "real": [117, 144, 146, 147, 148, 196, 203, 219], "rage": 117, "graphfold": [117, 153], "usecontrib": 117, "contrib": 117, "cell": [117, 181], "slightli": [117, 131], "includeallconfidencescor": 117, "enablememoryoptim": 117, "slow": 117, "usebestmodel": 117, "bestmodelmetr": 117, "micro": 117, "macro": 117, "setgraphfold": [117, 153, 159], "setusecontrib": 117, "setpo": 117, "setincludeallconfidencescor": 117, "setenablememoryoptim": 117, "setusebestmodel": 117, "setbestmodelmetr": 117, "nermodel": 117, "neroverwrit": 118, "setnewresult": 118, "nerword": 118, "overwritten": 118, "newnerent": 118, "lab": 118, "42": [118, 128], "45": [118, 128, 212, 214], "47": [118, 212, 214], "ner_overwritten": 118, "setnerword": 118, "setnewnerent": 118, "cardin": 118, "setreplaceent": 118, "rw": 118, "zeroshotnermodel": 119, "zeroshotn": 119, "zer_shot_n": 119, "entitydefinit": 119, "citi": 119, "town": 119, "predictionthreshold": 119, "01f": 119, "ignoreent": 119, "zero_shot_n": 119, "setentitydefinit": 119, "hellen": 119, "5328949": 119, "9360068": 119, "83294415": 119, "45366877": 119, "setpredictionthreshold": 119, "zero_shot_ner_roberta": 119, "shortcut": 119, "stem": [120, 157, 178, 206, 227, 228], "henc": 120, "pl": [120, 142], "slangdictionari": 120, "slang": 120, "minlength": [120, 130, 131, 163, 164], "maxlength": [120, 130, 131, 163, 164], "setcleanuppattern": 120, "punctuat": [120, 130], "alphanumer": 120, "za": 120, "z": [120, 135, 164], "brother": 120, "dont": [120, 134], "setslangdictionari": 120, "setminlength": [120, 130, 131, 163, 164], "setmaxlength": [120, 130, 131, 163, 164], "normalizermodel": 120, "openaicomplet": 122, "request": [122, 123, 149], "complet": [122, 135, 149, 203, 220, 223], "executor": [122, 123], "doc": [122, 123, 153, 213, 229], "suffix": [122, 135, 162, 164, 223], "insert": [122, 155, 156, 223], "maxtoken": 122, "nucleu": 122, "mass": 122, "numberofcomplet": 122, "prompt": [122, 135, 147], "logprob": 122, "echo": 122, "presencepenalti": [122, 135], "penal": [122, 135], "topic": 122, "frequencypenalti": [122, 135], "frequenc": [122, 134, 135, 153, 155, 156, 167], "verbatim": 122, "bestof": 122, "best_of": 122, "server": [122, 135, 228], "side": [122, 137, 167], "logitbia": 122, "abus": [122, 123], "pleasur": 122, "dine": 122, "fiorita": 122, "truli": 122, "delight": 122, "menu": 122, "boast": 122, "wonder": 122, "classic": 122, "dish": 122, "exquisit": 122, "prepar": [122, 168, 170, 176, 179], "staff": [122, 133], "227": 122, "barbecu": 122, "joe": 122, "dinner": 122, "amaz": 122, "pull": [122, 149], "pork": 122, "smoke": 122, "turkei": 122, "brisket": 122, "rib": 122, "sandwich": 122, "opt": 122, "172": 122, "overallr": 122, "reviewbodi": 122, "enjoi": [122, 137], "meal": 122, "restaur": [122, 133], "flavour": 122, "beautifulli": 122, "setmodel": [122, 123, 131], "setsuffix": [122, 162], "setmaxtoken": 122, "plu": [122, 138], "max_token": 122, "cannot": 122, "settemperatur": [122, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "determinist": 122, "alter": 122, "settopp": [122, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "compris": 122, "setnumberofcomplet": 122, "consum": 122, "quota": 122, "ensur": [122, 144, 145, 149, 198], "setlogprob": 122, "respons": [122, 131, 140, 141, 146, 149], "setecho": 122, "setstop": 122, "setpresencepenalti": [122, 135], "setfrequencypenalti": [122, 135], "setbestof": 122, "control": [122, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 190], "candid": [122, 153, 155, 156, 164], "setlogitbia": 122, "mathemat": [122, 137], "ban": 122, "exclus": 122, "50256": 122, "prevent": 122, "endoftext": 122, "setus": [122, 123], "openaiembed": 123, "empty_df": 123, "sample_text": 123, "delici": 123, "waiter": 123, "sample_df": 123, "002297497": 123, "009297881": 123, "015739758": 123, "0076794787": 123, "004737794": 123, "01487661": 123, "009856389": 123, "03823238": 123, "0069305706": 123, "028610818": 123, "025208998": 123, "018138802": 123, "0036271256": 123, "025539026": 123, "204275e": 123, "016374426": 123, "02828079": 123, "0054073683": 123, "009710415": 123, "016399812": 123, "015397037": 123, "00427766": 123, "006987691": 123, "0072859847": 123, "003874646": 123, "018544989": 123, "008752067": 123, "022657635": 123, "011493831": 123, "023901584": 123, "015638212": 123, "0035192322": 123, "034932107": 123, "0041919798": 123, "02612292": 123, "021515233": 123, "005715182": 123, "011754045": 123, "008453773": 123, "004080913": 123, "019179657": 123, "014419649": 123, "00893612": 123, "0063911034": 123, "045670684": 123, "017884934": 123, "005610462": 123, "219344e": 123, "02211182": 123, "0039539794": 123, "021007499": 123, "017631067": 123, "011696924": 123, "02260686": 123, "016336346": 123, "017174106": 123, "008466466": 123, "0015922225": 123, "025094759": 123, "024967825": 123, "007806412": 123, "005794516": 123, "022187982": 123, "0029162979": 123, "0060959826": 123, "025564414": 123, "008104706": 123, "0010178483": 123, "9823447e": 123, "0046425937": 123, "02074094": 123, "013467647": 123, "004626727": 123, "016006319": 123, "0166156": 123, "008948814": 123, "007616012": 123, "013619968": 123, "0069749975": 123, "0052677416": 123, "009881775": 123, "04592455": 123, "0030464048": 123, "024003131": 123, "02301305": 123, "006981344": 123, "023571556": 123, "009938896": 123, "006537077": 123, "033332746": 123, "002690991": 123, "019928563": 123, "0017596161": 123, "001090835": 123, "022683023": 123, "005007528": 123, "01540973": 123, "031530287": 123, "0054676617": 123, "015980931": 123, "0051471544": 123, "019890483": 123, "009386734": 123, "0062133963": 123, "031174876": 123, "009405775": 123, "015270104": 123, "028864685": 123, "021020193": 123, "018303815": 123, "0029210579": 123, "012693353": 123, "005102728": 123, "049580235": 123, "04300508": 123, "1293065e": 123, "0215787": 123, "016894853": 123, "0065434235": 123, "041431103": 123, "662815e": 123, "03351045": 123, "0128901": 123, "010510096": 123, "807209e": 123, "01835459": 123, "2869726e": 123, "01309954": 123, "011982525": 123, "005813556": 123, "0070194243": 123, "008637827": 123, "018456135": 123, "5521466e": 123, "019141577": 123, "021896034": 123, "02975322": 123, "0043220865": 123, "0015160623": 123, "0052074483": 123, "0149527695": 123, "0213883": 123, "018836936": 123, "01105591": 123, "0074636918": 123, "022632249": 123, "0036810723": 123, "006286383": 123, "025678653": 123, "027773056": 123, "03668379": 123, "00445854": 123, "013911915": 123, "008015852": 123, "0056739287": 123, "010281616": 123, "0057659554": 123, "00872668": 123, "010649723": 123, "0787844e": 123, "032164957": 123, "023838118": 123, "002641804": 123, "030387888": 123, "029626286": 123, "016602905": 123, "0021784967": 123, "0010519617": 123, "0116524985": 123, "018519603": 123, "007552545": 123, "007419265": 123, "0011090817": 123, "0044331537": 123, "009989669": 123, "007533505": 123, "0061943564": 123, "0057088356": 123, "028230017": 123, "0042554466": 123, "029321646": 123, "024790118": 123, "015676292": 123, "018202268": 123, "0075017717": 123, "00865052": 123, "0063942764": 123, "0020118963": 123, "036963046": 123, "002335577": 123, "020804405": 123, "6888937": 123, "019598536": 123, "0034748053": 123, "0067401705": 123, "02835695": 123, "023393849": 123, "0071527045": 123, "010586256": 123, "0096088685": 123, "009488282": 123, "021337526": 123, "6766098e": 123, "019801632": 123, "0022705235": 123, "009558095": 123, "0020753632": 123, "708839e": 123, "0066449703": 123, "04130417": 123, "011220924": 123, "013391487": 123, "027722282": 123, "011366897": 123, "4434706e": 123, "015460504": 123, "549375e": 123, "01449581": 123, "008529933": 123, "018875016": 123, "017745307": 123, "009437508": 123, "024587024": 123, "013010687": 123, "008993241": 123, "005093208": 123, "024218917": 123, "024066597": 123, "0037857925": 123, "031047942": 123, "015003543": 123, "023266915": 123, "03021018": 123, "0069115306": 123, "010154682": 123, "011430364": 123, "030311726": 123, "01764376": 123, "0020975766": 123, "006746517": 123, "009748495": 123, "01665368": 123, "003658859": 123, "02789999": 123, "0040682196": 123, "0031289116": 123, "029905539": 123, "016882159": 123, "0021689767": 123, "023228835": 123, "011773085": 123, "014292715": 123, "019827018": 123, "029575512": 123, "0015803224": 123, "018405361": 123, "002776671": 123, "019370057": 123, "027569963": 123, "008460119": 123, "012445833": 123, "0028322043": 123, "0052804346": 123, "006422837": 123, "009335961": 123, "02354617": 123, "0010345082": 123, "018900402": 123, "0029908712": 123, "0068544107": 123, "010148335": 123, "007939693": 123, "0072796377": 123, "020537846": 123, "010928977": 123, "029880153": 123, "0038492593": 123, "002795711": 123, "01892579": 123, "029956313": 123, "024612412": 123, "00446806": 123, "026452947": 123, "017605681": 123, "041177236": 123, "02018243": 123, "014648129": 123, "021553313": 123, "0015017823": 123, "0034874987": 123, "034170505": 123, "036125284": 123, "02805231": 123, "018430749": 123, "003404992": 123, "009329614": 123, "020766325": 123, "012560072": 123, "01707256": 123, "011538258": 123, "007711212": 123, "01332802": 123, "007412918": 123, "022492621": 123, "0059055826": 123, "025754813": 123, "01904003": 123, "013353407": 123, "0026005507": 123, "022530701": 123, "007895266": 123, "842112e": 123, "028103083": 123, "013962688": 123, "019979337": 123, "02115982": 123, "0029305778": 123, "01340418": 123, "01609517": 123, "011880978": 123, "016793307": 123, "0048837676": 123, "013036073": 123, "025767507": 123, "030337114": 123, "022454541": 123, "018824242": 123, "0019785764": 123, "006146756": 123, "0021055099": 123, "0014525956": 123, "011157458": 123, "005293128": 123, "011468444": 123, "021591393": 123, "0051535014": 123, "005597769": 123, "1935701e": 123, "012731433": 123, "0034208586": 123, "024688572": 123, "0018103895": 123, "001299482": 123, "005461315": 123, "024878971": 123, "030565593": 123, "016717145": 123, "013226474": 123, "008764761": 123, "007355798": 123, "0070638508": 123, "005734222": 123, "012084072": 123, "023749264": 123, "028813912": 123, "015892077": 123, "0033573918": 123, "0052201413": 123, "01672984": 123, "0014105488": 123, "02184526": 123, "019560456": 123, "0063752364": 123, "008777454": 123, "00418246": 123, "013861141": 123, "012877407": 123, "009500975": 123, "005804036": 123, "0013859555": 123, "025335932": 123, "01779608": 123, "01537165": 123, "0019722297": 123, "011081297": 123, "0073875315": 123, "0015795291": 123, "015968239": 123, "013454954": 123, "0026592575": 123, "0020944031": 123, "014140395": 123, "0023339903": 123, "0064989966": 123, "0030828982": 123, "0046870206": 123, "013239168": 123, "017491441": 123, "011106684": 123, "029702445": 123, "003696939": 123, "013784981": 123, "017250266": 123, "0037762725": 123, "021413686": 123, "017047172": 123, "019268509": 123, "006898837": 123, "013924608": 123, "009266147": 123, "0023577902": 123, "020905953": 123, "005264568": 123, "0014875022": 123, "0064513967": 123, "003044818": 123, "0073431046": 123, "0012431552": 123, "0021166166": 123, "0019404964": 123, "018646536": 123, "6913787e": 123, "01518125": 123, "0013581888": 123, "016755225": 123, "5418405e": 123, "0076921717": 123, "016780613": 123, "56008e": 123, "010948017": 123, "956349e": 123, "006108676": 123, "011290737": 123, "027443029": 123, "008910734": 123, "012858367": 123, "016844079": 123, "017592987": 123, "01476237": 123, "0039793663": 123, "008066626": 123, "0018421229": 123, "03422128": 123, "016526746": 123, "022200674": 123, "0010051549": 123, "004474407": 123, "6767073e": 123, "007749292": 123, "026249854": 123, "006670357": 123, "014775063": 123, "02589444": 123, "0023530303": 123, "0066068904": 123, "0067147836": 123, "0012542619": 123, "018671922": 123, "0022498968": 123, "0048552076": 123, "0031463648": 123, "0217691": 123, "011849245": 123, "0026735375": 123, "011024177": 123, "01733912": 123, "0073621445": 123, "012407753": 123, "0032939252": 123, "0072288644": 123, "014457729": 123, "0011781019": 123, "009615215": 123, "0141150085": 123, "025376e": 123, "04615303": 123, "031631835": 123, "005131288": 123, "006594197": 123, "025386706": 123, "028204631": 123, "023482703": 123, "013086847": 123, "022314915": 123, "2082416e": 123, "023457317": 123, "006013476": 123, "0125029525": 123, "0021404168": 123, "023977743": 123, "0033542186": 123, "029423192": 123, "0019960299": 123, "0076477453": 123, "080113e": 123, "030413274": 123, "008790147": 123, "013493034": 123, "078089505": 123, "004842514": 123, "015232024": 123, "00825068": 123, "036785338": 123, "335175e": 123, "03891782": 123, "004680674": 123, "005451795": 123, "012134845": 123, "02490436": 123, "007101931": 123, "026351402": 123, "0043093935": 123, "0059595294": 123, "024561638": 123, "019331977": 123, "02385081": 123, "008206253": 123, "015942851": 123, "027138388": 123, "01521933": 123, "0043728603": 123, "025500946": 123, "026173694": 123, "0011558884": 123, "023381157": 123, "0016207825": 123, "001237602": 123, "0049916613": 123, "0024085636": 123, "015587438": 123, "0048203007": 123, "35144e": 123, "012255432": 123, "0048742476": 123, "0062546497": 123, "04051718": 123, "0051090745": 123, "016932933": 123, "0016660026": 123, "02774767": 123, "050976507": 123, "03043866": 123, "0028655245": 123, "0023292303": 123, "0104275895": 123, "004360167": 123, "011144764": 123, "024282385": 123, "013988075": 123, "016234798": 123, "014698903": 123, "037673872": 123, "0054644886": 123, "020461684": 123, "012598153": 123, "012363326": 123, "002833791": 123, "0029274046": 123, "01243314": 123, "0037413659": 123, "012820287": 123, "0070511578": 123, "017364508": 123, "0025545373": 123, "0034843255": 123, "009773882": 123, "0010368882": 123, "009894469": 123, "330013e": 123, "008237986": 123, "0013804021": 123, "0035890455": 123, "029194713": 123, "022721102": 123, "026605267": 123, "011151111": 123, "0054200618": 123, "0043919003": 123, "0022181633": 123, "0025402573": 123, "015562051": 123, "021984888": 123, "025145533": 123, "008422039": 123, "0032590183": 123, "008130092": 123, "0019309763": 123, "009278841": 123, "981743e": 123, "04363975": 123, "008510893": 123, "011360551": 123, "025069373": 123, "004252273": 123, "011132071": 123, "020474378": 123, "014889303": 123, "01896387": 123, "0075461986": 123, "012096765": 123, "030489434": 123, "012166579": 123, "032393437": 123, "0035763523": 123, "009018627": 123, "007438305": 123, "0064196633": 123, "025056679": 123, "012230045": 123, "821482e": 123, "0124839125": 123, "0014454556": 123, "012744127": 123, "007159051": 123, "010402203": 123, "010053135": 123, "0042808335": 123, "0025307373": 123, "004128513": 123, "010890896": 123, "025716733": 123, "024155451": 123, "04023793": 123, "015257411": 123, "0129154865": 123, "013264554": 123, "028636204": 123, "023520783": 123, "004890114": 123, "008022199": 123, "016184025": 123, "051535014": 123, "011792125": 123, "009291534": 123, "031707995": 123, "039476328": 123, "004699714": 123, "014216555": 123, "01480045": 123, "0065053436": 123, "0044997935": 123, "021705633": 123, "0904366e": 123, "019585844": 123, "0036842457": 123, "455769e": 123, "006727477": 123, "0108718565": 123, "0046076872": 123, "0303625": 123, "02967706": 123, "026554495": 123, "014825836": 123, "009786575": 123, "009285187": 123, "020931339": 123, "003630299": 123, "004693367": 123, "009589829": 123, "013886528": 123, "017694535": 123, "027493803": 123, "004982141": 123, "0071717445": 123, "03297733": 123, "007571585": 123, "006276863": 123, "016069785": 123, "0464047e": 123, "0025450173": 123, "015358957": 123, "018494215": 123, "7068556e": 123, "027646123": 123, "0011114617": 123, "013429567": 123, "007920653": 123, "0050011813": 123, "013543808": 123, "014381569": 123, "0047346205": 123, "018798856": 123, "019674698": 123, "012629886": 123, "029803993": 123, "009862735": 123, "0033732585": 123, "013048767": 123, "009456548": 123, "03815622": 123, "286778e": 123, "0040301397": 123, "014254635": 123, "0038809928": 123, "016666373": 123, "6997105e": 123, "017351814": 123, "015549357": 123, "02952474": 123, "00431574": 123, "009818309": 123, "470635e": 123, "011404978": 123, "025082065": 123, "021908727": 123, "018951176": 123, "022936888": 123, "013658048": 123, "004671154": 123, "0296009": 123, "0127949": 123, "018341895": 123, "6842424e": 123, "01292818": 123, "0036429923": 123, "030083247": 123, "00215311": 123, "024206225": 123, "02619908": 123, "009837349": 123, "010256229": 123, "008168173": 123, "0100340955": 123, "013150314": 123, "02188334": 123, "010935323": 123, "008371267": 123, "00857436": 123, "0036144322": 123, "009697721": 123, "007863532": 123, "018100722": 123, "019446217": 123, "023495397": 123, "0037032857": 123, "009380388": 123, "027265321": 123, "007140011": 123, "015193944": 123, "004556914": 123, "013632661": 123, "0056358487": 123, "01040855": 123, "0050519546": 123, "008155479": 123, "9020106e": 123, "032571144": 123, "0048076073": 123, "0060293428": 123, "016031705": 123, "021781793": 123, "0015866691": 123, "0016088824": 123, "024752038": 123, "0019547765": 123, "012369673": 123, "015320877": 123, "012706046": 123, "009082094": 123, "010249883": 123, "019128883": 123, "02543748": 123, "0084982": 123, "0032970984": 123, "012991647": 123, "022479929": 123, "02316537": 123, "0012312552": 123, "0042840065": 123, "018227655": 123, "005731049": 123, "02604676": 123, "006689397": 123, "006305423": 123, "018075334": 123, "019484296": 123, "01783416": 123, "0012130085": 123, "015866691": 123, "020626698": 123, "039882515": 123, "008682254": 123, "0022546567": 123, "009323268": 123, "035871416": 123, "014330796": 123, "0145465825": 123, "023216143": 123, "011531911": 123, "020372832": 123, "00641649": 123, "013531114": 123, "016437892": 123, "013124927": 123, "019814324": 123, "0015136823": 123, "016247492": 123, "004753661": 123, "013823061": 123, "007907959": 123, "027113002": 123, "009932549": 123, "009659641": 123, "0044807536": 123, "009850042": 123, "014191168": 123, "042954307": 123, "024701266": 123, "01059895": 123, "0047885673": 123, "021629473": 123, "006651317": 123, "031098714": 123, "0058262493": 123, "0051249415": 123, "0065180366": 123, "0519563e": 123, "009792922": 123, "0423958": 123, "010992444": 123, "008739374": 123, "002449817": 123, "012045992": 123, "014089622": 123, "0018310162": 123, "014406956": 123, "033180423": 123, "0052709146": 123, "0016802826": 123, "012750473": 123, "018329201": 123, "005750089": 123, "048234742": 123, "01771992": 123, "009240761": 123, "789961e": 123, "017669147": 123, "01730104": 123, "0026529108": 123, "022543395": 123, "017288346": 123, "007971426": 123, "019065415": 123, "007857186": 123, "0481933e": 123, "016488666": 123, "709636e": 123, "009348654": 123, "0049281945": 123, "0059436625": 123, "020956725": 123, "003538272": 123, "0038905127": 123, "0016485492": 123, "0044141137": 123, "01271874": 123, "01483853": 123, "01245218": 123, "0023657237": 123, "0037794458": 123, "5497736e": 123, "00882188": 123, "015815917": 123, "016767919": 123, "005185235": 123, "018049948": 123, "007685825": 123, "21934114": 123, "012007912": 123, "005039261": 123, "037445392": 123, "4307736e": 123, "031403355": 123, "0018468829": 123, "0024656837": 123, "01722488": 123, "013213781": 123, "011512871": 123, "0015811158": 123, "0035287521": 123, "0062419563": 123, "0048456877": 123, "025120145": 123, "023800036": 123, "0269697e": 123, "03554139": 123, "01071319": 123, "2110125e": 123, "017313734": 123, "03777542": 123, "0019944431": 123, "04402055": 123, "02442201": 123, "018976564": 123, "005873849": 123, "006924224": 123, "003865126": 123, "0057437425": 123, "0038206992": 123, "013163007": 123, "01646328": 123, "02446009": 123, "018748082": 123, "027239935": 123, "0032479118": 123, "03653147": 123, "015206637": 123, "018773468": 123, "00643553": 123, "010141989": 123, "009183641": 123, "02025859": 123, "019852404": 123, "006054729": 123, "010630683": 123, "009481935": 123, "059881e": 123, "03005786": 123, "014851223": 123, "014280022": 123, "003274885": 123, "0014168955": 123, "025005905": 123, "9089613e": 123, "022302222": 123, "008999587": 123, "010097562": 123, "024942439": 123, "012807593": 123, "019547764": 123, "034957495": 123, "026833748": 123, "7683392e": 123, "0068417173": 123, "011182844": 123, "016907547": 123, "03013402": 123, "0041062995": 123, "014571969": 123, "02070286": 123, "011335164": 123, "012725086": 123, "8341785e": 123, "0013653288": 123, "017859548": 123, "0056802756": 123, "006556117": 123, "0033002717": 123, "011398631": 123, "010954363": 123, "055139925": 123, "009424815": 123, "004959928": 123, "028788524": 123, "0031241516": 123, "0027465243": 123, "036810722": 123, "0031828582": 123, "005543822": 123, "0026053106": 123, "6973375e": 123, "017935708": 123, "0015406557": 123, "0023911104": 123, "016945627": 123, "0035636588": 123, "02396505": 123, "01911619": 123, "0029448578": 123, "033408906": 123, "020550538": 123, "01294722": 123, "011500178": 123, "011988872": 123, "025424786": 123, "011887325": 123, "038587794": 123, "003395472": 123, "007946039": 123, "019966645": 123, "033713546": 123, "018189576": 123, "026859134": 123, "012223699": 123, "024802811": 123, "099946e": 123, "0010448216": 123, "005020221": 123, "012356979": 123, "007590625": 123, "03089562": 123, "014521196": 123, "017212186": 123, "024917051": 123, "020169739": 123, "044680603": 123, "005658062": 123, "013835755": 123, "3776127e": 123, "0028496578": 123, "006467263": 123, "053007443": 123, "011614418": 123, "0056453687": 123, "16145945": 123, "0091963345": 123, "024548944": 123, "016425198": 123, "015701678": 123, "862344e": 123, "023190755": 123, "0074509983": 123, "018088028": 123, "010205456": 123, "010383163": 123, "033028103": 123, "0023324036": 123, "019052723": 123, "016590212": 123, "4408938e": 123, "02324153": 123, "019623924": 123, "0383847": 123, "002686231": 123, "0010852817": 123, "0076223584": 123, "002762391": 123, "030540207": 123, "0037667525": 123, "011005137": 123, "0017850028": 123, "005984916": 123, "0029353378": 123, "02555172": 123, "00855532": 123, "010287963": 123, "2544602e": 123, "0065624635": 123, "017808774": 123, "03528752": 123, "013188394": 123, "027925376": 123, "0014248289": 123, "009342308": 123, "0017247093": 123, "023596942": 123, "004709234": 123, "037369233": 123, "016082479": 123, "0011963486": 123, "00222451": 123, "014165782": 123, "0014414889": 123, "0058865426": 123, "2633766e": 123, "012274472": 123, "011328817": 123, "0020372833": 123, "0013026553": 123, "00635937": 123, "00651169": 123, "0024672705": 123, "0026640175": 123, "0033669118": 123, "0074763848": 123, "311968e": 123, "023444623": 123, "017656455": 123, "0065243836": 123, "021832567": 123, "02320345": 123, "015092397": 123, "034119733": 123, "025983294": 123, "021324834": 123, "015663598": 123, "00417294": 123, "014965463": 123, "014203862": 123, "0074319583": 123, "007381185": 123, "0035446188": 123, "009310574": 123, "02562788": 123, "01101783": 123, "009050361": 123, "010484709": 123, "005835769": 123, "0036620323": 123, "0055565154": 123, "028712364": 123, "033586614": 123, "027087616": 123, "019509684": 123, "005166195": 123, "020042805": 123, "019903177": 123, "010738577": 123, "038816273": 123, "014990849": 123, "025412092": 123, "030464048": 123, "009158255": 123, "046609994": 123, "9095457e": 123, "0016675893": 123, "012921833": 123, "2828116e": 123, "0033288319": 123, "10784273": 123, "022898808": 123, "020563232": 123, "020487072": 123, "0063117696": 123, "005299475": 123, "013442261": 123, "0112590045": 123, "015282797": 123, "013581888": 123, "023723876": 123, "00847916": 123, "025221692": 123, "028686978": 123, "8655227e": 123, "005169368": 123, "0765446e": 123, "011436711": 123, "004963101": 123, "0067592105": 123, "007527158": 123, "029854767": 123, "0072098244": 123, "011246311": 123, "009945242": 123, "017326428": 123, "004052353": 123, "011684231": 123, "311375e": 123, "026986068": 123, "012801247": 123, "0023815904": 123, "047600072": 123, "006886144": 123, "004464887": 123, "9809546e": 123, "018684616": 123, "022924196": 123, "0070575043": 123, "0037730993": 123, "025830973": 123, "029651672": 123, "0046140337": 123, "041710358": 123, "0058960626": 123, "0018706829": 123, "0065878504": 123, "0067338236": 123, "0011431951": 123, "020233205": 123, "008218946": 123, "015930157": 123, "0024022171": 123, "0051439814": 123, "0120777255": 123, "00895516": 123, "010116602": 123, "038638566": 123, "0056231553": 123, "840722e": 123, "009754842": 123, "0074256114": 123, "0011773085": 123, "7314436e": 123, "02014435": 123, "010186416": 123, "0067211306": 123, "015828611": 123, "0043665133": 123, "0112526575": 123, "031073328": 123, "018126108": 123, "014432343": 123, "0021118566": 123, "017389894": 123, "023635022": 123, "0062736897": 123, "040187154": 123, "006905184": 123, "0068163304": 123, "0087838005": 123, "010072175": 123, "00832684": 123, "01061799": 123, "01268066": 123, "0137088215": 123, "007926999": 123, "01711064": 123, "00885996": 123, "015422424": 123, "0052011013": 123, "022327607": 123, "0092280675": 123, "022251448": 123, "0045251804": 123, "5886433e": 123, "020360138": 123, "021870647": 123, "013251861": 123, "027595349": 123, "01094167": 123, "011550951": 123, "0033034452": 123, "026072146": 123, "030032473": 123, "00411582": 123, "012185619": 123, "0096215615": 123, "002618004": 123, "006575157": 123, "03675995": 123, "010986097": 123, "023673104": 123, "011900018": 123, "016044399": 123, "0040206197": 123, "018722696": 123, "0038873393": 123, "011163804": 123, "01919235": 123, "015790531": 123, "0013692954": 123, "011836552": 123, "005096381": 123, "031200262": 123, "0358968": 123, "009126521": 123, "013696128": 123, "014711596": 123, "018608455": 123, "03922246": 123, "0179484": 123, "0069178776": 123, "010909937": 123, "013569194": 123, "019839711": 123, "024447398": 123, "01086551": 123, "010294309": 123, "024726652": 123, "016679065": 123, "0013145554": 123, "004617207": 123, "004690194": 123, "013315327": 123, "0112653505": 123, "0016009491": 123, "003998406": 123, "025272466": 123, "0030051514": 123, "007869879": 123, "031251036": 123, "005375635": 123, "0046203807": 123, "0030099114": 123, "0071273176": 123, "012020606": 123, "016285572": 123, "033865865": 123, "04290353": 123, "009107481": 123, "007400225": 123, "018253041": 123, "016704453": 123, "003957153": 123, "022644943": 123, "0074446513": 123, "012122152": 123, "0013796088": 123, "019014644": 123, "026909908": 123, "003035298": 123, "012153885": 123, "020499766": 123, "006010303": 123, "004026966": 123, "3466855e": 123, "001078935": 123, "0051725414": 123, "0014906756": 123, "009526362": 123, "016310958": 123, "010357776": 123, "0145338895": 123, "015993625": 123, "025259772": 123, "036937658": 123, "0044014202": 123, "008713987": 123, "003931766": 123, "0053597684": 123, "02797615": 123, "020093577": 123, "004550567": 123, "024434704": 123, "0029956312": 123, "6632223e": 123, "51248e": 123, "028915457": 123, "023470009": 123, "008675907": 123, "014013462": 123, "0031527115": 123, "0018865496": 123, "0033986452": 123, "040974144": 123, "002589444": 123, "0018516429": 123, "049504075": 123, "00884092": 123, "004541047": 123, "014076929": 123, "015473197": 123, "0027211376": 123, "031327195": 123, "041126464": 123, "018595763": 123, "0104593225": 123, "01938275": 123, "0027592175": 123, "classifierencod": 124, "attach": [124, 125, 185, 190, 201, 203], "evaluationdlparam": 125, "setevaluationlogextend": 125, "setenableoutputlog": [125, 203, 219], "setoutputlogspath": [125, 131, 203, 219], "assum": 125, "perceptronapproach": [128, 212, 229], "member": [128, 206], "datasetpath": 128, "pierr": [128, 212], "vinken": [128, 212], "34": [128, 212, 214], "md": [128, 212], "vb": [128, 209, 212, 229], "41": [128, 130, 212, 214], "43": [128, 130, 212, 214], "dt": [128, 212, 213, 229], "49": [128, 212], "poscol": [128, 167, 209], "niter": [128, 167], "anc": [128, 212, 229], "trainingperceptrondf": 128, "trainedpo": 128, "setposcolumn": [128, 167], "cd": [128, 209, 212], "setiter": 128, "getniter": [128, 167], "pos_anc": 128, "25": [128, 130, 212, 214], "33": [128, 214], "sentencedetectorparam": 130, "ii": 130, "abbrevi": 130, "period": 130, "geo": 130, "1026": 130, "253": 130, "553": 130, "ellipsi": 130, "quotat": 130, "mark": [130, 131, 167], "exclam": 130, "breaker": 130, "pragmaticcontentformatt": 130, "custombound": [130, 131], "setcustombound": [130, 131], "usecustomboundsonli": [130, 131], "explodesent": [130, 131, 209, 210], "useabbrevi": 130, "explicitli": [130, 131, 158, 195, 223], "customboundsstrategi": 130, "prepend": [130, 169], "break": [130, 145], "append": [130, 153, 223], "parallel": [130, 131, 178, 209, 227], "splitlength": [130, 131], "forcibli": [130, 131], "99999": [130, 131, 164], "detectlist": 130, "nhow": 130, "setcustomboundsstrategi": 130, "setuseabbrevi": 130, "setdetectlist": 130, "setusecustomboundsonli": [130, 131], "setexplodesent": [130, 131], "setsplitlength": [130, 131], "sentencedetectordl": [131, 143], "sentencedetectordlapproach": 131, "sentencedetectordlmodel": [131, 143], "modelarchitectur": 131, "impossiblepenultim": 131, "imposs": [131, 167], "penultim": 131, "epochsnumb": 131, "eo": 131, "stefan": 131, "schweter": 131, "sajawel": 131, "ahm": 131, "cover": [131, 136, 142, 145, 150, 167], "broken": 131, "moder": 131, "lack": 131, "easier": [131, 172, 225, 229], "polit": 131, "successor": 131, "great": 131, "heritag": [131, 149], "bequeath": 131, "nelson": 131, "mandela": 131, "setepochsnumb": 131, "model_architectur": 131, "validation_split": 131, "epochs_numb": 131, "output_logs_path": 131, "setimpossiblepenultim": 131, "impossible_penultim": 131, "sentencedl": 131, "sentencesdl": 131, "helen": 131, "total": [131, 167], "peopl": 131, "sentimentdetector": 133, "els": 133, "viveknsentimentapproach": [133, 134], "cool": 133, "superb": 133, "uninspir": 133, "sentimentscor": 133, "nice": [133, 203, 219], "entri": [133, 170, 179, 207], "sttr": 133, "sentimentdetectormodel": 133, "sda": [133, 134], "pragmat": 133, "viveknsenti": 134, "analys": 134, "vivek": 134, "narayanan": 134, "give": 134, "transit": [134, 153], "sentimentcol": 134, "prunecorpu": 134, "unfrequ": 134, "scope": 134, "naiv": 134, "bay": 134, "vivekn": 134, "setsentimentcol": 134, "train_senti": 134, "result_senti": 134, "finish": [134, 151, 171, 173, 177, 180, 196], "final_senti": 134, "cast": [134, 168], "horribl": 134, "go": [134, 223], "again": [134, 162], "anyon": 134, "protagonist": 134, "music": 134, "setprunecorpu": 134, "viveknsentimentmodel": 134, "sentiment_vivekn": 134, "autoggufmodel": 135, "llama": [135, 140, 141, 144, 146], "cpp": 135, "settabl": 135, "explan": [135, 153, 226], "phi3": [135, 147], "5_mini_4k_instruct_q4_gguf": 135, "autoggufmodeltest": 135, "nthread": 135, "thread": 135, "nthreadsdraft": 135, "draft": 135, "nthreadsbatch": 135, "nthreadsbatchdraft": 135, "nctx": 135, "nbatch": 135, "logic": [135, 146, 147], "bla": 135, "nubatch": 135, "physic": 135, "ndraft": 135, "specul": 135, "nchunk": 135, "nsequenc": 135, "psplit": 135, "ngpulay": 135, "vram": 135, "ngpulayersdraft": 135, "gpusplitmod": 135, "maingpu": 135, "scratch": 135, "tensorsplit": 135, "grpattnn": 135, "grpattnw": 135, "ropefreqbas": 135, "rope": 135, "ntk": 135, "awar": [135, 153], "ropefreqscal": 135, "expand": [135, 144], "yarnextfactor": 135, "yarn": 135, "extrapol": 135, "yarnattnfactor": 135, "sqrt": 135, "yarnbetafast": 135, "beta": [135, 148], "yarnbetaslow": 135, "alpha": [135, 137, 153], "yarnorigctx": 135, "defragmentationthreshold": 135, "kv": 135, "defragment": 135, "numastrategi": 135, "numa": 135, "ropescalingtyp": 135, "unless": 135, "poolingtyp": 135, "unspecifi": 135, "modeldraft": 135, "modelalia": 135, "alia": [135, 195], "lookupcachestaticfilepath": 135, "updat": [135, 153], "lookupcachedynamicfilepath": 135, "flashattent": 135, "flash": 135, "inputprefixbo": 135, "bo": 135, "preced": [135, 223], "usemmap": 135, "pageout": 135, "mlock": 135, "usemlock": 135, "ram": 135, "swap": [135, 155], "compress": 135, "nokvoffload": 135, "disabl": [135, 170, 179], "offload": 135, "systemprompt": 135, "chattempl": 135, "chat": [135, 137, 140, 141, 146, 147, 148], "templat": 135, "inputprefix": 135, "inputsuffix": 135, "infil": 135, "cacheprompt": 135, "rememb": [135, 153], "reprocess": 135, "npredict": 135, "minp": 135, "min": [135, 153], "tfsz": 135, "tail": 135, "free": [135, 143], "typicalp": 135, "typic": [135, 138], "dynatemprang": 135, "dynatempexpon": 135, "expon": 135, "repeatlastn": 135, "repeatpenalti": 135, "presenc": 135, "mirostat": 135, "mirostattau": 135, "entropi": 135, "tau": 135, "mirostateta": 135, "eta": 135, "penalizenl": 135, "newlin": [135, 153], "nkeep": 135, "rng": 135, "nprob": 135, "minkeep": 135, "sampler": 135, "least": [135, 167], "bnf": 135, "penaltyprompt": 135, "ignoreeo": 135, "impli": 135, "inf": 135, "disabletokenid": 135, "stopstr": 135, "usechattempl": 135, "setngpulay": 135, "adjust": 135, "setnctx": 135, "hardwar": 135, "ab": [135, 136], "1910": [135, 136], "13461": [135, 136], "pytorch": [135, 136, 142, 145], "fairseq": [135, 136, 142, 145], "arbitrari": [135, 136], "nois": [135, 136], "reconstruct": [135, 136, 182], "tranform": [135, 136], "randomli": [135, 136], "dialogu": [135, 136, 140, 141, 146], "roug": [135, 136], "bleu": [135, 136, 142, 145], "ablat": [135, 136], "influenc": [135, 136, 153], "setnpredict": 135, "99": 135, "settopk": [135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "setpenalizenl": 135, "78": [135, 147, 212], "setnthread": 135, "setnthreadsdraft": 135, "setnthreadsbatch": 135, "setnthreadsbatchdraft": 135, "setnbatch": 135, "setnubatch": 135, "setndraft": 135, "setnchunk": 135, "setnsequ": 135, "setpsplit": 135, "setngpulayersdraft": 135, "setgpusplitmod": 135, "setmaingpu": 135, "settensorsplit": 135, "setgrpattnn": 135, "setgrpattnw": 135, "setropefreqbas": 135, "setropefreqscal": 135, "setyarnextfactor": 135, "setyarnattnfactor": 135, "setyarnbetafast": 135, "setyarnbetaslow": 135, "setyarnorigctx": 135, "setdefragmentationthreshold": 135, "setnumastrategi": 135, "setropescalingtyp": 135, "setpoolingtyp": 135, "setmodeldraft": 135, "setmodelalia": 135, "setlookupcachestaticfilepath": 135, "setlookupcachedynamicfilepath": 135, "setembed": 135, "setflashattent": 135, "setinputprefixbo": 135, "setusemmap": 135, "setusemlock": 135, "setnokvoffload": 135, "setsystemprompt": 135, "setchattempl": 135, "setinputprefix": 135, "setinputsuffix": 135, "setcacheprompt": 135, "setminp": 135, "settfsz": 135, "settypicalp": 135, "setdynamictemperaturerang": 135, "dynamictemperaturerang": 135, "setdynamictemperatureexpon": 135, "dynamictemperatureexpon": 135, "setrepeatlastn": 135, "setrepeatpenalti": 135, "setmirostat": 135, "setmirostattau": 135, "setmirostateta": 135, "setnkeep": 135, "setnprob": 135, "setminkeep": 135, "setgrammar": 135, "setpenaltyprompt": 135, "setignoreeo": 135, "setdisabletokenid": 135, "setstopstr": 135, "setsampl": 135, "setusechattempl": 135, "settokenidbia": 135, "tokenidbia": 135, "settokenbia": 135, "tokenbia": 135, "setloraadapt": 135, "loraadapt": 135, "getmetadata": 135, "barttransform": 136, "handl": [136, 144, 193, 211], "captur": [136, 151], "past": [136, 143, 207], "incorpor": [136, 147], "versatil": [136, 144, 149], "valuabl": [136, 149], "summari": [136, 137, 138, 140, 142, 144, 145, 146, 147, 148, 150], "distilbart_xsum_12_6": 136, "barttestspec": 136, "cumul": [136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "ignoretokenid": [136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150], "usecach": 136, "setmaxoutputlength": [136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "200": [136, 145, 150], "rich": [136, 150], "rise": [136, 150], "methodologi": [136, 150], "landscap": [136, 150], "unifi": [136, 150], "systemat": [136, 150], "dozen": [136, 150], "insight": [136, 150], "coloss": [136, 150], "facilit": [136, 150], "setignoretokenid": [136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "setminoutputlength": [136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 190], "setrepetitionpenalti": [136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "ctrl": [136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "setnorepeatngrams": [136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 190], "setcach": 136, "use_cach": 136, "cpmtransform": 137, "minicpm": 137, "unveil": 137, "seri": [137, 148], "2b": 137, "4b": [137, 148], "close": [137, 140, 141, 146], "mistral": [137, 144], "7b": [137, 140, 141, 144, 146, 147, 148, 149], "chines": [137, 142, 145, 167], "llama2": [137, 140], "13b": [137, 140, 144, 148, 149], "mpt": 137, "30b": 137, "falcon": 137, "40b": 137, "mtbench": 137, "closest": 137, "70b": [137, 140, 141], "vicuna": 137, "33b": [137, 149], "v0": 137, "zephyr": 137, "dpo": 137, "multimodel": 137, "multimod": 137, "phi": [137, 146, 147], "6b": 137, "qwen": [137, 148], "vl": 137, "deploi": [137, 143, 147, 220], "smartphon": 137, "verbal": 137, "cpm": 137, "llam2": [137, 140, 146], "shengdinghu": 137, "notion": 137, "d4d3a8c426424654a4e80e42a711cb20": 137, "openbmb": 137, "llama_2_7b_chat_hf_int4": [137, 140, 141], "leonardo": [137, 138, 140, 144, 146, 147, 148], "student": [137, 146, 147, 148], "california": [137, 146, 147, 148], "lo": [137, 142], "passion": [137, 146, 147, 148], "cultur": 137, "plai": 137, "basketbal": 137, "gpt2transform": 138, "caus": [138, 164], "goal": [138, 145, 167], "direct": [138, 142, 145, 147], "10x": 138, "synthet": [138, 146, 147], "unpreced": 138, "prime": 138, "lengthi": 138, "benefit": 138, "suffici": 138, "learner": 138, "taskspecif": 138, "webpag": [138, 220], "webtext": 138, "coqa": 138, "exceed": [138, 141], "127": 138, "fashion": [138, 151], "5b": [138, 148], "underfit": 138, "reflect": [138, 142], "paragraph": [138, 153], "promis": 138, "1776": [138, 140], "came": [138, 140], "kingdom": [138, 140], "llama2transform": 140, "4k": [140, 147], "excit": 140, "reinforc": [140, 141, 146], "feedback": [140, 141, 146], "rlhf": [140, 141], "safeti": [140, 141, 145, 146, 147], "chatgpt": 140, "facebookresearch": [140, 141], "suitabl": [140, 146], "substitut": [140, 146], "llama3transform": 141, "cut": 141, "8b": [141, 148], "expans": 141, "offer": [141, 144, 223, 225, 228], "known": 141, "llama3": 141, "latest": 141, "meta": [141, 203, 221], "commerci": [141, 143], "aim": [141, 145, 151], "foster": 141, "collabor": [141, 149], "llama_3_7b_chat_hf_int8": 141, "start_header_id": 141, "end_header_id": 141, "minion": 141, "chatbot": 141, "respond": 141, "speak": 141, "assist": [141, 149, 195], "oooh": 141, "yeah": 141, "bana": 141, "na": 141, "setstoptokenid": 141, "llama_3_7b_chat_hf_int4": 141, "m2m100transform": 142, "m2m100": 142, "seq": [142, 145], "900": 142, "m2m100_418m": 142, "srclang": [142, 145], "tgtlang": [142, 145], "afrikaan": [142, 145], "af": 142, "amhar": [142, 145], "arab": [142, 145], "asturian": [142, 145], "ast": 142, "azerbaijani": [142, 145], "az": 142, "bashkir": [142, 145], "ba": 142, "belarusian": [142, 145], "bulgarian": [142, 145], "bg": 142, "bengali": [142, 145], "breton": 142, "br": 142, "bosnian": [142, 145], "catalan": [142, 145], "valencian": 142, "ca": 142, "cebuano": [142, 145], "ceb": 142, "czech": [142, 145], "welsh": [142, 145], "cy": 142, "da": [142, 144], "greeek": 142, "el": 142, "estonian": [142, 145], "persian": [142, 145], "fa": 142, "fulah": 142, "ff": 142, "fi": 142, "western": [142, 145], "frisian": 142, "fy": 142, "irish": [142, 145], "ga": 142, "gaelic": [142, 145], "scottish": [142, 145], "gd": 142, "galician": [142, 145], "gl": 142, "gujarati": [142, 145], "gu": 142, "hausa": [142, 145], "hebrew": [142, 145], "hindi": [142, 145], "croatian": [142, 145], "hr": 142, "haitian": [142, 145], "creol": [142, 145], "ht": 142, "armenian": [142, 145], "hy": 142, "indonesian": [142, 145], "igbo": [142, 145], "ig": 142, "iloko": 142, "ilo": 142, "iceland": [142, 145], "japanes": [142, 145, 167], "ja": 142, "javanes": [142, 145], "jv": 142, "georgian": [142, 145], "ka": 142, "kazakh": [142, 145], "kk": 142, "central": [142, 145, 220], "khmer": [142, 145], "km": 142, "kannada": [142, 145], "kn": 142, "korean": [142, 145, 167], "ko": 142, "luxembourgish": [142, 145], "letzeburgesch": 142, "lb": 142, "ganda": [142, 145], "lg": 142, "lingala": [142, 145], "ln": 142, "lao": [142, 145], "lithuanian": [142, 145], "lt": 142, "latvian": [142, 145], "lv": 142, "malagasi": [142, 145], "mg": 142, "macedonian": [142, 145], "mk": 142, "malayalam": [142, 145], "mongolian": [142, 145], "mn": 142, "marathi": [142, 145], "malai": [142, 145], "burmes": [142, 145], "nepali": [142, 145], "ne": 142, "flemish": 142, "nl": 142, "northern": [142, 145], "sotho": [142, 145], "occitan": [142, 145], "post": [142, 147], "oc": 142, "oriya": 142, "panjabi": [142, 145], "punjabi": 142, "pa": [142, 213, 229], "polish": [142, 145], "pushto": 142, "pashto": [142, 145], "romanian": [142, 145], "moldavian": 142, "moldovan": 142, "ro": 142, "ru": 142, "sindhi": [142, 145], "sd": 142, "sinhala": [142, 145], "sinhales": 142, "si": 142, "slovak": [142, 145], "sk": 142, "slovenian": [142, 145], "sl": 142, "somali": [142, 145], "albanian": [142, 145], "sq": 142, "serbian": [142, 145], "sr": 142, "swati": [142, 145], "ss": 142, "sundanes": [142, 145], "su": 142, "sw": 142, "tamil": [142, 145], "ta": [142, 145], "thai": [142, 145], "th": 142, "tagalog": [142, 145], "tl": 142, "tswana": [142, 145], "tn": 142, "tr": 142, "ukrainian": [142, 145], "uk": 142, "ur": 142, "uzbek": [142, 145], "uz": 142, "vietnames": [142, 145], "vi": 142, "wolof": [142, 145], "wo": 142, "xhosa": [142, 145], "xh": 142, "yiddish": [142, 145], "yi": 142, "yoruba": [142, 145], "yo": 142, "zh": [142, 167], "zulu": [142, 145], "zu": 142, "beyond": [142, 145], "massiv": 142, "worldwid": 142, "mine": [142, 145], "spars": [142, 145], "focu": [142, 145, 147], "wmt": 142, "m2m": 142, "setsrclang": [142, 145], "settgtlang": [142, 145], "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": [142, 145], "life": [142, 145], "chocol": [142, 145], "mariantransform": 143, "marian": 143, "mainli": 143, "academ": [143, 147], "notabl": [143, 144], "edinburgh": 143, "adam": 143, "mickiewicz": 143, "pozna\u0144": 143, "contributor": 143, "mariannmt": 143, "engin": [143, 160], "behind": [143, 145, 146], "opus_mt_en_fr": 143, "langid": 143, "maxinputlength": 143, "differenti": 143, "toolkit": 143, "setmaxinputlength": 143, "capit": [143, 153], "quell": 143, "capital": 143, "devrait": 143, "savoir": 143, "fran\u00e7ai": 143, "setlangid": 143, "mistraltransform": 144, "34b": [144, 149], "aspect": 144, "strike": 144, "balanc": 144, "rival": [144, 147], "codellama": [144, 149], "latter": 144, "gqa": [144, 148], "quicker": 144, "compromis": 144, "streamlin": [144, 203, 219], "smoother": 144, "slide": [144, 148], "swa": [144, 148], "reliabl": [144, 203, 219], "mistral_7b": 144, "vinci": 144, "invent": 144, "microscop": 144, "No": [144, 145, 210, 222], "late": 144, "16th": 144, "nllbtransform": 145, "nllb": 145, "nllb_418m": 145, "acehnes": 145, "ace_arab": 145, "latin": 145, "ace_latn": 145, "mesopotamian": 145, "acm_arab": 145, "izzi": 145, "adeni": 145, "acq_arab": 145, "tunisian": 145, "aeb_arab": 145, "afr_latn": 145, "south": 145, "levantin": 145, "ajp_arab": 145, "akan": 145, "aka_latn": 145, "amh_ethi": 145, "north": 145, "apc_arab": 145, "arb_arab": 145, "roman": 145, "arb_latn": 145, "najdi": 145, "ars_arab": 145, "moroccan": 145, "ary_arab": 145, "arz_arab": 145, "assames": 145, "asm_beng": 145, "ast_latn": 145, "awadhi": 145, "awa_deva": 145, "aymara": 145, "ayr_latn": 145, "azb_arab": 145, "azj_latn": 145, "bak_cyrl": 145, "bambara": 145, "bam_latn": 145, "balines": 145, "ban_latn": 145, "bel_cyrl": 145, "bemba": 145, "bem_latn": 145, "ben_beng": 145, "bhojpuri": 145, "bho_deva": 145, "banjar": 145, "bjn_arab": 145, "bjn_latn": 145, "tibetan": 145, "bod_tibt": 145, "bos_latn": 145, "bugines": 145, "bug_latn": 145, "bul_cyrl": 145, "cat_latn": 145, "ceb_latn": 145, "ces_latn": 145, "chokw": 145, "cjk_latn": 145, "kurdish": 145, "ckb_arab": 145, "crimean": 145, "tatar": 145, "crh_latn": 145, "cym_latn": 145, "dan_latn": 145, "deu_latn": 145, "southwestern": 145, "dinka": 145, "dik_latn": 145, "dyula": 145, "dyu_latn": 145, "dzongkha": 145, "dzo_tibt": 145, "greek": 145, "ell_grek": 145, "eng_latn": 145, "esperanto": 145, "epo_latn": 145, "est_latn": 145, "basqu": 145, "eus_latn": 145, "ew": 145, "ewe_latn": 145, "faroes": 145, "fao_latn": 145, "fijian": 145, "fij_latn": 145, "fin_latn": 145, "fon": 145, "fon_latn": 145, "fra_latn": 145, "friulian": 145, "fur_latn": 145, "nigerian": 145, "fulfuld": 145, "fuv_latn": 145, "gla_latn": 145, "gle_latn": 145, "glg_latn": 145, "guarani": 145, "grn_latn": 145, "guj_gujr": 145, "hat_latn": 145, "hau_latn": 145, "heb_hebr": 145, "hin_deva": 145, "chhattisgarhi": 145, "hne_deva": 145, "hrv_latn": 145, "hun_latn": 145, "hye_armn": 145, "ibo_latn": 145, "ilocano": 145, "ilo_latn": 145, "ind_latn": 145, "isl_latn": 145, "ita_latn": 145, "jav_latn": 145, "jpn_jpan": 145, "kabyl": 145, "kab_latn": 145, "jingpho": 145, "kac_latn": 145, "kamba": 145, "kam_latn": 145, "kan_knda": 145, "kashmiri": 145, "kas_arab": 145, "devanagari": 145, "kas_deva": 145, "kat_geor": 145, "kanuri": 145, "knc_arab": 145, "knc_latn": 145, "kaz_cyrl": 145, "kabiy\u00e8": 145, "kbp_latn": 145, "kabuverdianu": 145, "kea_latn": 145, "khm_khmr": 145, "kikuyu": 145, "kik_latn": 145, "kinyarwanda": 145, "kin_latn": 145, "kyrgyz": 145, "kir_cyrl": 145, "kimbundu": 145, "kmb_latn": 145, "kmr_latn": 145, "kikongo": 145, "kon_latn": 145, "kor_hang": 145, "lao_laoo": 145, "ligurian": 145, "lij_latn": 145, "limburgish": 145, "lim_latn": 145, "lin_latn": 145, "lit_latn": 145, "lombard": 145, "lmo_latn": 145, "latgalian": 145, "ltg_latn": 145, "ltz_latn": 145, "luba": 145, "kasai": 145, "lua_latn": 145, "lug_latn": 145, "luo": 145, "luo_latn": 145, "mizo": 145, "lus_latn": 145, "lvs_latn": 145, "magahi": 145, "mag_deva": 145, "maithili": 145, "mai_deva": 145, "mal_mlym": 145, "mar_deva": 145, "minangkabau": 145, "min_arab": 145, "min_latn": 145, "mkd_cyrl": 145, "plateau": 145, "plt_latn": 145, "maltes": 145, "mlt_latn": 145, "meitei": 145, "mni_beng": 145, "halh": 145, "khk_cyrl": 145, "mossi": 145, "mos_latn": 145, "maori": 145, "mri_latn": 145, "mya_mymr": 145, "nld_latn": 145, "nynorsk": 145, "nno_latn": 145, "bokm\u00e5l": 145, "nob_latn": 145, "npi_deva": 145, "nso_latn": 145, "nuer": 145, "nus_latn": 145, "nyanja": 145, "nya_latn": 145, "oci_latn": 145, "west": 145, "oromo": 145, "gaz_latn": 145, "odia": 145, "ory_orya": 145, "pangasinan": 145, "pag_latn": 145, "eastern": 145, "pan_guru": 145, "papiamento": 145, "pap_latn": 145, "pes_arab": 145, "pol_latn": 145, "por_latn": 145, "dari": 145, "prs_arab": 145, "southern": 145, "pbt_arab": 145, "ayacucho": 145, "quechua": 145, "quy_latn": 145, "ron_latn": 145, "rundi": 145, "run_latn": 145, "rus_cyrl": 145, "sango": 145, "sag_latn": 145, "sanskrit": 145, "san_deva": 145, "santali": 145, "sat_olck": 145, "sicilian": 145, "scn_latn": 145, "shan": 145, "shn_mymr": 145, "sin_sinh": 145, "slk_latn": 145, "slv_latn": 145, "samoan": 145, "smo_latn": 145, "shona": 145, "sna_latn": 145, "snd_arab": 145, "som_latn": 145, "sot_latn": 145, "spa_latn": 145, "tosk": 145, "als_latn": 145, "sardinian": 145, "srd_latn": 145, "srp_cyrl": 145, "ssw_latn": 145, "sun_latn": 145, "swe_latn": 145, "swh_latn": 145, "silesian": 145, "szl_latn": 145, "tam_taml": 145, "tat_cyrl": 145, "telugu": 145, "tel_telu": 145, "tajik": 145, "tgk_cyrl": 145, "tgl_latn": 145, "tha_thai": 145, "tigrinya": 145, "tir_ethi": 145, "tamasheq": 145, "taq_latn": 145, "tifinagh": 145, "taq_tfng": 145, "tok": 145, "pisin": 145, "tpi_latn": 145, "tsn_latn": 145, "tsonga": 145, "tso_latn": 145, "turkmen": 145, "tuk_latn": 145, "tumbuka": 145, "tum_latn": 145, "tur_latn": 145, "twi": 145, "twi_latn": 145, "atla": 145, "tamazight": 145, "tzm_tfng": 145, "uyghur": 145, "uig_arab": 145, "ukr_cyrl": 145, "umbundu": 145, "umb_latn": 145, "urd_arab": 145, "uzn_latn": 145, "venetian": 145, "vec_latn": 145, "vie_latn": 145, "warai": 145, "war_latn": 145, "wol_latn": 145, "xho_latn": 145, "ydd_hebr": 145, "yor_latn": 145, "yue_hant": 145, "simplifi": 145, "zho_han": 145, "tradit": 145, "zho_hant": 145, "zsm_latn": 145, "zul_latn": 145, "driven": 145, "erad": 145, "barrier": 145, "solidifi": 145, "artifici": [145, 146, 147, 148], "intellig": [145, 146, 147, 148], "effort": 145, "coalesc": 145, "leav": 145, "vast": 145, "major": 145, "mostli": 145, "safe": 145, "ethic": 145, "consider": 145, "exploratori": 145, "interview": 145, "nativ": [145, 220], "speaker": 145, "narrow": 145, "gap": 145, "gate": 145, "expert": 145, "counteract": 145, "overfit": 145, "critic": 145, "flore": 145, "assess": [145, 146, 147], "groundwork": 145, "realiz": 145, "phi2transform": 146, "textbook": 146, "augment": 146, "websit": [146, 147], "educ": 146, "sens": [146, 147, 228], "showcas": [146, 147], "nearli": 146, "hasn": 146, "intent": [146, 180], "craft": 146, "vital": 146, "societ": 146, "phi2": 146, "skill": [146, 147, 148], "phi3transform": 147, "medium": 147, "14b": [147, 148], "lightweight": 147, "128k": 147, "underw": 147, "math": [147, 149], "big": 147, "trillion": [147, 149], "mixtral": 147, "8x7b": 147, "69": [147, 212], "mmlu": 147, "mt": 147, "bench": 147, "enough": 147, "innov": 147, "compos": 147, "heavili": 147, "8t": 147, "moreov": 147, "qwentransform": 148, "qwen1": 148, "qwen2": 148, "72b": 148, "stabl": 148, "32k": 148, "swiglu": 148, "qkv": 148, "temporarili": [148, 196], "starcodertransform": 149, "starcoder2": 149, "predecessor": 149, "starcoder2transform": 149, "bigcod": 149, "starcod": 149, "scientif": 149, "partnership": 149, "swh": 149, "stack": 149, "digit": 149, "archiv": 149, "alongsid": 149, "619": 149, "3b": 149, "15b": 149, "thoroughli": 149, "starcoderbas": 149, "twice": 149, "although": 149, "deepseekcod": 149, "openrail": 149, "transpar": 149, "regard": [149, 189], "persist": [149, 209], "swhid": 149, "def": [149, 195], "t5transform": 150, "t5": 150, "reconsid": 150, "hyper": 150, "t5_small": 150, "setstopateo": 150, "encount": 150, "setmaxnewtoken": 150, "setusecach": 150, "documentsimilarityrank": 151, "documentsimilarityrankerapproach": 151, "lsh": 151, "lib": 151, "approxim": 151, "ranker": 151, "documentsimilarityrankermodel": 151, "doc_similarity_rank": 151, "enablecach": 151, "rdd": 151, "similaritymethod": 151, "neighbour": 151, "brp": 151, "bucket": 151, "euclidean": 151, "numberofneighbour": 151, "bucketlength": 151, "hash": 151, "numhasht": 151, "visibledist": 151, "identityrank": 151, "ident": 151, "debug": 151, "setsimilaritymethod": 151, "setnumberofneighbour": 151, "setbucketlength": 151, "setnumhasht": 151, "setvisibledist": 151, "setidentityrank": 151, "document_similarity_ranker_finish": 151, "documentsimilarityrankerfinish": 151, "finished_doc_similarity_rankings_id": 151, "finished_doc_similarity_rankings_neighbor": 151, "setextractnearestneighbor": 151, "docsimrankerpipelin": 151, "1510101612": 151, "1634839239": 151, "12448559591306324": 151, "612640902": 151, "1274183715": 151, "1220122862046063": 151, "1320876223": 151, "1293373212": 151, "17848855164122393": 151, "1548374770": 151, "1719102856": 151, "23297156732534166": 151, "visibl": 151, "inclus": 151, "asretriev": 151, "rag": 151, "setaggregationmethod": 151, "wise": 151, "py": [151, 183, 184, 192, 198, 202], "ins": [151, 184, 202], "uid": [151, 184, 202], "extractnearestneighbor": 151, "getinputcol": [151, 159, 171, 172, 185], "getoutputcol": [151, 168, 170, 171, 172, 176, 179, 185], "document_similarity_rank": 152, "contextspellcheck": 153, "contextspellcheckerapproach": [153, 155, 156], "noisi": 153, "spell": [153, 154, 155, 156, 178, 182, 226, 227, 228], "contextspellcheckermodel": [153, 155, 156], "surround": [153, 181], "edit": [153, 155, 156], "subword": 153, "checker": [153, 155, 156, 226], "languagemodelclass": 153, "lm": 153, "wordmaxdist": 153, "maxcandid": 153, "casestrategi": 153, "uppercas": 153, "errorthreshold": 153, "perplex": 153, "nlm": 153, "initialr": 153, "finalr": 153, "validationfract": 153, "datapoint": 153, "vocab": 153, "compoundcount": 153, "compound": 153, "classcount": 153, "tradeoff": 153, "weighteddistpath": 153, "levenshtein": [153, 155, 156], "maxwindowlen": 153, "maxsentlen": 153, "norvigsweetingapproach": [153, 155, 156, 229], "symmetricdeleteapproach": [153, 155, 156, 229], "depth": [153, 226], "sherlock": 153, "spellcheck": [153, 155, 156], "setwordmaxdist": 153, "setepoch": 153, "setlanguagemodelclass": 153, "1650": 153, "addvocabclass": 153, "_name_": 153, "extra": [153, 155, 223], "dist": 153, "setmaxcandid": 153, "setcasestrategi": 153, "seterrorthreshold": 153, "setinitialr": 153, "setfinalr": 153, "setvalidationfract": 153, "fraction": 153, "setcompoundcount": 153, "setclasscount": 153, "settradeoff": 153, "setweighteddistpath": 153, "setmaxwindowlen": 153, "setmaxsentlen": 153, "sentlen": 153, "userdist": 153, "addregexclass": 153, "spellcheck_dl": 153, "gamma": 153, "decis": 153, "correctsymbol": 153, "comparelowcas": 153, "vocabfreq": 153, "idsvocab": 153, "vocabid": 153, "usenewlin": 153, "norvigsweetingmodel": [153, 155, 156], "symmetricdeletemodel": [153, 155, 156], "cold": 153, "dreari": 153, "countri": 153, "white": 153, "smow": 153, "setweight": 153, "setgamma": 153, "setvocabfreq": 153, "setidsvocab": 153, "setvocabid": 153, "setclass": 153, "getwordclass": 153, "updateregexclass": 153, "updatevocabclass": 153, "setcorrectsymbol": 153, "setcomparelowcas": 153, "norvigsweet": 155, "norvig": 155, "bayesian": 155, "tokenpattern": 155, "sensit": [155, 158, 164], "doublevari": 155, "shortcircuit": 155, "frequencyprior": 155, "ham": 155, "intersect": 155, "wordsizeignor": 155, "dupslimit": 155, "duplic": 155, "reductlimit": 155, "vowelswaplimit": 155, "vowel": 155, "corrector": 155, "gummi": [155, 156], "gummic": [155, 156], "gummier": [155, 156], "gummiest": [155, 156], "gummifer": [155, 156], "basi": [155, 156], "token_pattern": [155, 156], "setdoublevari": 155, "setshortcircuit": 155, "setfrequencyprior": 155, "symmetr": [155, 156], "delet": [155, 156, 223], "damerau": [155, 156], "transpos": [155, 156], "spellcheck_norvig": 155, "symspel": [155, 156], "somtim": 155, "wrrite": [155, 156], "wordz": [155, 156], "erong": [155, 156], "sometim": [155, 156, 223], "wrong": [155, 156], "symmetricdelet": 156, "deriv": 156, "teach": 156, "maxeditdist": 156, "frequencythreshold": [156, 167], "deletesthreshold": 156, "patttern": 156, "setmaxeditdist": 156, "setfrequencythreshold": [156, 167], "setdeletesthreshold": 156, "spellcheck_sd": 156, "spmetim": 156, "employ": 157, "stopwordsclean": [158, 171, 182], "mllib": [158, 220], "stopwordsremov": 158, "cleantoken": [158, 171, 182], "stopwords_en": 158, "jvm": [158, 196], "forth": 158, "setlocal": 158, "tfnerdlgraphbuildermodel": 159, "tfnerdlgraphbuild": 159, "sethiddenunitsnumb": 159, "assertiondlapproach": 159, "medicalnerapproach": 159, "gethiddenunitsnumb": 159, "srt": 159, "getgraphfold": 159, "setgraphfil": 159, "greaph": 159, "getgraphfil": 159, "chunktoken": 160, "flatten": 160, "artist": 160, "benezar": 160, "robert": 160, "farendel": 160, "graduat": 160, "luca": 160, "chunktokenizermodel": 160, "recursivetoken": 162, "recurs": [162, 180, 192, 196, 200], "infix": [162, 164], "qam": 162, "setprefix": 162, "setinfix": 162, "recursivetokenizermodel": 162, "regextoken": [163, 167, 224], "tolowercas": [163, 167], "positionalmask": 163, "guarante": 163, "increment": 163, "flag": 163, "eventu": 163, "settolowercas": [163, 167], "nthi": 163, "setpositionalmask": 163, "tokenizedsent": 164, "rulefactori": [164, 189], "targetpattern": 164, "grab": 164, "prefixpattern": 164, "suffixpattern": 164, "infixpattern": 164, "sub": 164, "won": 164, "exceptionspath": 164, "casesensitiveexcept": 164, "contextchar": 164, "splitchar": 164, "didn": 164, "jane": 164, "boyfriend": 164, "getinfixpattern": 164, "getsuffixpattern": 164, "getprefixpattern": 164, "getcontextchar": 164, "getsplitchar": 164, "settargetpattern": 164, "setprefixpattern": 164, "setsuffixpattern": 164, "setinfixpattern": 164, "addinfixpattern": 164, "setexcept": 164, "getexcept": 164, "setexceptionspath": 164, "addexcept": 164, "setcasesensitiveexcept": 164, "getcasesensitiveexcept": 164, "addcontextchar": 164, "setsplitchar": 164, "addsplitchar": 164, "piec": 164, "token_rul": 164, "token2chunk": 165, "17": [165, 212, 214], "wordsegment": 167, "wordsegmenterapproach": 167, "correspond": [167, 203], "rr": 167, "likewis": 167, "themselv": 167, "\u4e0a\u6d77": 167, "\u8ba1\u5212": 167, "\u5230": 167, "\u672c": 167, "\u4e16\u7eaa": 167, "\u672b": 167, "\u5b9e\u73b0": 167, "\u4eba\u5747": 167, "\u56fd\u5185": 167, "\u751f\u4ea7": 167, "\u603b\u503c": 167, "\u4e94\u5343": 167, "\u7f8e\u5143": 167, "\u4e0a": 167, "\u6d77": 167, "\u8ba1": 167, "\u5212": 167, "\u4e16": 167, "\u7eaa": 167, "\u5b9e": 167, "\u73b0": 167, "\u4eba": 167, "\u5747": 167, "\u56fd": 167, "\u5185": 167, "\u751f": 167, "\u4ea7": 167, "\u603b": 167, "ll\u503c": 167, "\u4e94": 167, "\u5343": 167, "\u7f8e": 167, "\u5143": 167, "shanghai": 167, "plan": 167, "dollar": 167, "capita": 167, "gdp": 167, "wordsegmentermodel": 167, "tip": 167, "frame": 167, "frequent": 167, "ambiguitythreshold": 167, "enableregextoken": 167, "xue": 167, "nianwen": 167, "volum": 167, "februari": 167, "aclweb": 167, "aclanthologi": 167, "o03": 167, "4002": 167, "chinese_train": 167, "utf8": 167, "\u5341": 167, "\u56db": 167, "\u4e0d": 167, "\u662f": 167, "setniter": 167, "trainingdataset": 167, "setambiguitythreshold": 167, "getfrequencythreshold": 167, "getambiguitythreshold": 167, "setenableregextoken": 167, "plit": 167, "words_seg": 167, "wordseg_pku": 167, "\u7136\u800c": 167, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 167, "\u9019\u6a23": 167, "\u7684": 167, "\u8655\u7406": 167, "\u4e5f": 167, "\u884d\u751f": 167, "\u4e86": 167, "\u4e00\u4e9b": 167, "\u554f\u984c": 167, "outputcol": [168, 170, 171, 172, 173, 176, 179], "inferschema": 168, "tmp": [168, 176, 196, 219], "librispeech_asr_dummy_clean_audio_array_parquet": 168, "float_arrai": 168, "chunkcol": 169, "stringtyp": 169, "setisarrai": 169, "startcol": 169, "startcolbytokenindex": 169, "isarrai": 169, "failonmiss": 169, "chunkassembl": 169, "setchunkcol": 169, "setstartcol": 169, "setstartcolbytokenindex": 169, "setfailonmiss": 169, "idcol": [170, 179], "metadatacol": [170, 179], "cleanupmod": [170, 179], "cleanup": [170, 179], "inplac": [170, 179], "inplace_ful": [170, 179], "shrink_ful": [170, 179], "each_ful": [170, 179], "delete_ful": [170, 179], "setidcol": [170, 179], "setmetadatacol": [170, 179], "usabl": 171, "lda": 171, "forest": 171, "featurecol": 171, "cleanannot": [171, 172, 173], "outputasvector": 171, "gloveembed": 171, "finished_sentence_embed": 171, "resultwiths": 171, "1619900017976761": 171, "045552998781204224": 171, "03229299932718277": 171, "685609996318": 171, "42416998744010925": 171, "1378999948501587": 171, "5717899799346924": 171, "5078899860382": 171, "08621499687433243": 171, "15772999823093414": 171, "06067200005054474": 171, "395359992980": 171, "4970499873161316": 171, "7164199948310852": 171, "40119001269340515": 171, "05761000141501": 171, "08170200139284134": 171, "7159299850463867": 171, "20677000284194946": 171, "0295659992843": 171, "valuesplitsymbol": 172, "annotationsplitsymbol": 172, "includemetadata": 172, "outputasarrai": [172, 173], "parseembeddingsvector": 172, "setvaluesplitsymbol": 172, "setannotationsplitsymbol": 172, "setincludemetadata": [172, 224], "setoutputasarrai": [172, 173], "setparseembeddingsvector": 172, "finishedresult": 173, "hasrecursivefit": [174, 175], "java_obj": [174, 199, 202], "py4j": [174, 175, 202], "java_gatewai": [174, 175, 202], "javaobject": [174, 175, 202], "recursivepipelin": [174, 175, 180, 185], "hasrecursivetransform": 175, "doc2_chunk": [177, 196], "embeddings_finish": [177, 196], "graph_finish": [177, 196], "has_recursive_fit": [177, 196], "has_recursive_transform": [177, 196], "light_pipelin": [177, 196], "recursive_pipelin": [177, 196], "token_assembl": [177, 196], "lightpipelin": [178, 206, 227], "parse_embed": [178, 206], "hold": [178, 227], "principl": [178, 227], "everyth": [178, 227, 228], "fullannot": [178, 206], "happi": [178, 222, 224, 227, 228], "prp": [178, 210, 212, 222, 227, 228, 229], "rb": [178, 212, 222, 227, 228, 229], "optional_target": [178, 206], "explain_document_pipelin": [178, 195, 206, 222, 227, 228], "dict_kei": [178, 206], "fullannotateimag": [178, 206], "path_to_imag": [178, 206], "setignoreunsupport": 178, "unsupport": 178, "annotatormodel": [178, 184, 207], "getignoreunsupport": 178, "text2": 179, "document1": 179, "document2": 179, "arg": [180, 199], "kwarg": 180, "decid": 180, "behav": 180, "exactli": 180, "recursivepipelinemodel": 180, "pipeline_model": [180, 203, 219], "intend": 180, "tab": [181, 203, 219], "escap": 181, "quot": 181, "inputformat": 181, "csvdelimit": 181, "defailt": 181, "comma": 181, "escapecsvdelimit": 181, "table_csv": 181, "csv_data": 181, "input_format": 181, "setcsvdelimit": 181, "setescapecsvdelimit": 181, "tokenassembl": 182, "cleantext": 182, "opensourc": 182, "annotatorapproach": [183, 192, 203], "annotatorproperti": 185, "setlazyannot": 185, "lazili": 185, "getlazyannot": 185, "annotator_approach": [188, 196], "annotator_model": [188, 196], "annotator_properti": [188, 196], "coverage_result": [188, 196], "match_strategi": [188, 196], "recursive_annotator_approach": [188, 196], "constant": [189, 191], "hasembeddingsproperti": 190, "getdimens": 190, "setnreturnsequ": 190, "recursiveannotatorapproach": 192, "fo": 194, "map_annot": 195, "f": [195, 203, 219], "output_typ": 195, "udf": 195, "userdefinedfunct": 195, "nnp_token": 195, "lambda": 195, "epeu": 195, "map_annotations_arrai": 195, "map_annotations_strict": 195, "map_annotations_col": 195, "output_column": 195, "annotatyon_typ": 195, "chunks_df": 195, "pos_chunk": 195, "vbz": [195, 209, 229], "filter_by_annotations_col": 195, "filter_po": 195, "explode_annotations_col": 195, "annotator_java_ml": [196, 200], "annotator_transform": [196, 200], "extended_java_wrapp": [196, 200], "params_getters_sett": [196, 200], "comet": [196, 204, 221], "pretrained_pipelin": [196, 205], "resource_download": [196, 205], "pub_tat": [196, 211], "annotation_audio": 196, "annotation_imag": 196, "apple_silicon": 196, "aarch64": 196, "cache_fold": 196, "log_fold": 196, "cluster_tmp_dir": 196, "real_time_output": 196, "output_level": 196, "correctli": 196, "maco": 196, "linux": 196, "alloc": 196, "directori": [196, 207, 219], "cache_pretrain": 196, "unpack": 196, "hadoop": 196, "dir": 196, "s3": [196, 207], "hdf": 196, "dbf": 196, "annotator_log": 196, "annotatorjavamlread": 197, "mixin": 197, "javamlread": 197, "classmethod": 197, "mlreader": 197, "clazz": 197, "rl": 197, "javaparam": 197, "annotatortransform": 198, "_java_obj": 198, "javawrapp": 199, "extendedjavawrapp": 199, "new_java_arrai": 199, "pylist": 199, "java_class": 199, "todo": 199, "paramsgetterssett": 201, "getparamvalu": 201, "paramnam": 201, "setparamvalu": 201, "recursiveestim": 202, "recursivetransform": 202, "cometlogg": [203, 219], "workspac": 203, "project_nam": [203, 219], "comet_mod": [203, 219], "experiment_id": 203, "experiment_kwarg": 203, "logger": [203, 219], "practition": [203, 219], "lifecycl": [203, 219, 221], "track": [203, 219, 220], "outputlogpath": [203, 219], "onlin": [203, 219], "reus": 203, "importerror": 203, "output_log_path": [203, 219], "embd": [203, 219], "setshuffleperepoch": [203, 219], "logdir": [203, 219], "interfac": [203, 219, 227], "comet_ml": [203, 219], "log_pipeline_paramet": [203, 219], "log_visu": [203, 219], "html": [203, 219], "viz": [203, 219], "upload": 203, "colum": [203, 219], "ner_chunk": [203, 219], "sparknlp_displai": [203, 219], "nervisu": [203, 219], "idx": [203, 219], "enumer": [203, 219], "label_col": [203, 219], "document_col": [203, 219], "return_html": [203, 219], "log_metr": [203, 219], "sklearn": [203, 219], "preprocess": [203, 219], "multilabelbinar": [203, 219], "classification_report": [203, 219], "preds_df": [203, 219], "topanda": [203, 219], "mlb": [203, 219], "y_true": [203, 219], "fit_transform": [203, 219], "y_pred": [203, 219], "output_dict": [203, 219], "log_paramet": 203, "log_completed_run": 203, "log_file_path": 203, "log_asset": 203, "asset_path": 203, "asset": 203, "log_asset_data": 203, "interv": 203, "refresh": 203, "outstand": 203, "disk_loc": 206, "light_model": 206, "gather": 206, "resourcedownload": [207, 223, 228], "showpublicmodel": [207, 223], "onto_100": 207, "onto_300": 207, "ner_dl_bert": 207, "similarli": 207, "showpublicpipelin": [207, 228], "check_spel": [207, 228], "match_datetim": [207, 228], "downloadmodel": 207, "reader": 207, "j_dwn": 207, "pythonresourcedownload": 207, "obj": [207, 210], "downloadmodeldirectli": 207, "unzip": 207, "downloadpipelin": 207, "clearcach": 207, "clear": 207, "filer": 207, "showuncategorizedresourc": 207, "showavailableannot": 207, "documentcol": [209, 210], "sentencecol": [209, 210], "tokencol": 209, "conlllabelindex": 209, "conllposindex": 209, "conlldocidcol": 209, "doc_id": [209, 213], "textcol": [209, 210], "labelcol": 209, "includedocid": 209, "docstart": [209, 229], "eu": [209, 229], "np": [209, 229], "reject": [209, 229], "vp": [209, 229], "misc": [209, 229], "boycott": [209, 229], "british": [209, 229], "lamb": [209, 229], "blackburn": 209, "brussel": 209, "1996": 209, "08": 209, "storage_level": 209, "storagelevel": 209, "disk_onli": 209, "lift": 209, "uposcol": 210, "upo": 210, "xposcol": 210, "xpo": 210, "lemmacol": 210, "sent_id": 210, "sell": 210, "pron": 210, "nom": 210, "plur": 210, "_": 210, "tens": 210, "conj": 210, "cc": 210, "spaceaft": 210, "punct": 210, "conllufil": [210, 229], "conlldataset": [210, 229], "morph": 210, "Into": 210, "googleo": 210, "sconj": 210, "propn": 210, "adp": 210, "wp": 210, "vbd": [210, 212, 229], "ago": [212, 229], "posdf": 212, "61": 212, "67": [212, 213, 229], "nonexecut": 212, "76": 212, "director": 212, "81": 212, "84": 212, "outputposcol": 212, "outputdocumentcol": 212, "outputtextcol": 212, "pubtat": [213, 226], "medic": [213, 229], "titl": [213, 229], "medment": [213, 229], "25763772": [213, 229], "dctn4": [213, 229], "t116": [213, 229], "t123": [213, 229], "c4308010": [213, 229], "63": [213, 229], "chronic": [213, 229], "pseudomona": [213, 229], "aeruginosa": [213, 229], "infect": [213, 229], "t047": [213, 229], "c0854135": [213, 229], "82": [213, 229], "cystic": [213, 229], "fibrosi": [213, 229], "c0010674": [213, 229], "120": [213, 229], "124": [213, 229], "139": [213, 229], "pubtatorfil": 213, "corpus_pubtator_sampl": 213, "pubtatordataset": 213, "finished_token": [213, 224], "finished_po": 213, "finished_n": 213, "finished_token_metadata": 213, "finished_pos_metadata": 213, "finished_label_metadata": 213, "mo": 213, "ispaddedtoken": 213, "pad": 213, "spacytoannot": 214, "token_spac": 214, "sentence_end": 214, "spaci": 214, "multi_doc_token": 214, "went": 214, "night": 214, "bought": 214, "bread": 214, "54": 214, "overview": [218, 226], "workflow": 219, "dedic": 219, "account": 219, "inspect": 219, "init": 219, "sparknlp_experi": 219, "offline_directori": 219, "later": 219, "record": 220, "registri": 220, "send": 221, "mlflow": 221, "content": [222, 228], "clearli": 222, "explain_document_ml": [222, 227, 228], "approx": [222, 227, 228], "mb": [222, 227, 228], "ok": [222, 227, 228], "spearhead": 223, "produc": 223, "declar": 223, "accordingli": 223, "extra_loc": 223, "classifierdl_use_trec50": 223, "classifierdl_use_spam": 223, "column_nam": 223, "interchang": 224, "road": 224, "proce": 224, "At": 224, "constantli": 228, "train_po": 229, "training_conl": 229, "train_corpu": 229, "withcolumnrenam": 229, "trainingpubtatordf": 229, "corpus_pubt": 229}, "objects": {"": [[196, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [100, 0, 0, "-", "annotator"], [177, 0, 0, "-", "base"], [188, 0, 0, "-", "common"], [195, 0, 0, "-", "functions"], [200, 0, 0, "-", "internal"], [204, 0, 0, "-", "logging"], [205, 0, 0, "-", "pretrained"], [196, 3, 1, "", "start"], [211, 0, 0, "-", "training"], [216, 0, 0, "-", "upload_to_hub"], [217, 0, 0, "-", "util"], [196, 3, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [9, 0, 0, "-", "chunk2_doc"], [10, 0, 0, "-", "chunker"], [33, 0, 0, "-", "classifier_dl"], [53, 0, 0, "-", "coref"], [57, 0, 0, "-", "cv"], [61, 0, 0, "-", "date2_chunk"], [63, 0, 0, "-", "dependency"], [65, 0, 0, "-", "document_character_text_splitter"], [66, 0, 0, "-", "document_normalizer"], [67, 0, 0, "-", "document_token_splitter"], [68, 0, 0, "-", "document_token_splitter_test"], [80, 0, 0, "-", "embeddings"], [98, 0, 0, "-", "er"], [99, 0, 0, "-", "graph_extraction"], [101, 0, 0, "-", "keyword_extraction"], [103, 0, 0, "-", "ld_dl"], [105, 0, 0, "-", "lemmatizer"], [108, 0, 0, "-", "matcher"], [112, 0, 0, "-", "n_gram_generator"], [113, 0, 0, "-", "ner"], [120, 0, 0, "-", "normalizer"], [121, 0, 0, "-", "openai"], [126, 0, 0, "-", "param"], [127, 0, 0, "-", "pos"], [129, 0, 0, "-", "sentence"], [132, 0, 0, "-", "sentiment"], [139, 0, 0, "-", "seq2seq"], [152, 0, 0, "-", "similarity"], [154, 0, 0, "-", "spell_check"], [157, 0, 0, "-", "stemmer"], [158, 0, 0, "-", "stop_words_cleaner"], [159, 0, 0, "-", "tf_ner_dl_graph_builder"], [161, 0, 0, "-", "token"], [165, 0, 0, "-", "token2_chunk"], [166, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[5, 0, 0, "-", "hubert_for_ctc"], [7, 0, 0, "-", "wav2vec2_for_ctc"], [8, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[5, 2, 1, "", "loadSavedModel"], [5, 2, 1, "", "pretrained"], [5, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[7, 2, 1, "", "loadSavedModel"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[8, 2, 1, "", "getIsMultilingual"], [8, 2, 1, "", "getLanguage"], [8, 2, 1, "", "loadSavedModel"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"], [8, 2, 1, "", "setLanguage"], [8, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[9, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunker": [[10, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[10, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[11, 0, 0, "-", "albert_for_question_answering"], [12, 0, 0, "-", "albert_for_sequence_classification"], [13, 0, 0, "-", "albert_for_token_classification"], [14, 0, 0, "-", "albert_for_zero_shot_classification"], [15, 0, 0, "-", "bart_for_zero_shot_classification"], [16, 0, 0, "-", "bert_for_question_answering"], [17, 0, 0, "-", "bert_for_sequence_classification"], [18, 0, 0, "-", "bert_for_token_classification"], [19, 0, 0, "-", "bert_for_zero_shot_classification"], [20, 0, 0, "-", "camembert_for_question_answering"], [21, 0, 0, "-", "camembert_for_sequence_classification"], [22, 0, 0, "-", "camembert_for_token_classification"], [23, 0, 0, "-", "camembert_for_zero_shot_classification"], [24, 0, 0, "-", "classifier_dl"], [25, 0, 0, "-", "deberta_for_question_answering"], [26, 0, 0, "-", "deberta_for_sequence_classification"], [27, 0, 0, "-", "deberta_for_token_classification"], [28, 0, 0, "-", "deberta_for_zero_shot_classification"], [29, 0, 0, "-", "distil_bert_for_question_answering"], [30, 0, 0, "-", "distil_bert_for_sequence_classification"], [31, 0, 0, "-", "distil_bert_for_token_classification"], [32, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [34, 0, 0, "-", "longformer_for_question_answering"], [35, 0, 0, "-", "longformer_for_sequence_classification"], [36, 0, 0, "-", "longformer_for_token_classification"], [37, 0, 0, "-", "mpnet_for_question_answering"], [38, 0, 0, "-", "mpnet_for_sequence_classification"], [39, 0, 0, "-", "mpnet_for_token_classification"], [40, 0, 0, "-", "multi_classifier_dl"], [41, 0, 0, "-", "roberta_for_question_answering"], [42, 0, 0, "-", "roberta_for_sequence_classification"], [43, 0, 0, "-", "roberta_for_token_classification"], [44, 0, 0, "-", "roberta_for_zero_shot_classification"], [45, 0, 0, "-", "sentiment_dl"], [46, 0, 0, "-", "tapas_for_question_answering"], [47, 0, 0, "-", "xlm_roberta_for_question_answering"], [48, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [49, 0, 0, "-", "xlm_roberta_for_token_classification"], [50, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [51, 0, 0, "-", "xlnet_for_sequence_classification"], [52, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[11, 2, 1, "", "loadSavedModel"], [11, 2, 1, "", "pretrained"], [11, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[12, 2, 1, "", "getClasses"], [12, 2, 1, "", "loadSavedModel"], [12, 2, 1, "", "pretrained"], [12, 2, 1, "", "setCoalesceSentences"], [12, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[13, 2, 1, "", "getClasses"], [13, 2, 1, "", "loadSavedModel"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[14, 1, 1, "", "AlbertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification": [[14, 2, 1, "", "getClasses"], [14, 2, 1, "", "loadSavedModel"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setCoalesceSentences"], [14, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[15, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[15, 2, 1, "", "getClasses"], [15, 2, 1, "", "loadSavedModel"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setCoalesceSentences"], [15, 2, 1, "", "setConfigProtoBytes"], [15, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[16, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[16, 2, 1, "", "loadSavedModel"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[17, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[17, 2, 1, "", "getClasses"], [17, 2, 1, "", "loadSavedModel"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setCoalesceSentences"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[18, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[18, 2, 1, "", "getClasses"], [18, 2, 1, "", "loadSavedModel"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[19, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[19, 2, 1, "", "getClasses"], [19, 2, 1, "", "loadSavedModel"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setCoalesceSentences"], [19, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[20, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[20, 2, 1, "", "loadSavedModel"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[21, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[21, 2, 1, "", "getClasses"], [21, 2, 1, "", "loadSavedModel"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setCoalesceSentences"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[22, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[22, 2, 1, "", "getClasses"], [22, 2, 1, "", "loadSavedModel"], [22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[23, 1, 1, "", "CamemBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification": [[23, 2, 1, "", "getClasses"], [23, 2, 1, "", "loadSavedModel"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setCoalesceSentences"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[24, 1, 1, "", "ClassifierDLApproach"], [24, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[24, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[25, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[25, 2, 1, "", "loadSavedModel"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[26, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[26, 2, 1, "", "getClasses"], [26, 2, 1, "", "loadSavedModel"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setCoalesceSentences"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[27, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[27, 2, 1, "", "getClasses"], [27, 2, 1, "", "loadSavedModel"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[28, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[28, 2, 1, "", "getClasses"], [28, 2, 1, "", "loadSavedModel"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setCoalesceSentences"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[29, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[29, 2, 1, "", "loadSavedModel"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[30, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[30, 2, 1, "", "getClasses"], [30, 2, 1, "", "loadSavedModel"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setCoalesceSentences"], [30, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[31, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[31, 2, 1, "", "getClasses"], [31, 2, 1, "", "loadSavedModel"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[32, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[32, 2, 1, "", "getClasses"], [32, 2, 1, "", "loadSavedModel"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setCoalesceSentences"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[34, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[34, 2, 1, "", "loadSavedModel"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[35, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[35, 2, 1, "", "getClasses"], [35, 2, 1, "", "loadSavedModel"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setCoalesceSentences"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[36, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[36, 2, 1, "", "getClasses"], [36, 2, 1, "", "loadSavedModel"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[37, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[37, 2, 1, "", "loadSavedModel"], [37, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[38, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[38, 2, 1, "", "getClasses"], [38, 2, 1, "", "loadSavedModel"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[39, 1, 1, "", "MPNetForTokenClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification": [[39, 2, 1, "", "getClasses"], [39, 2, 1, "", "loadSavedModel"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[40, 1, 1, "", "MultiClassifierDLApproach"], [40, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[40, 2, 1, "", "setThreshold"], [40, 2, 1, "", "setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setConfigProtoBytes"], [40, 2, 1, "", "setThreshold"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[41, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[41, 2, 1, "", "loadSavedModel"], [41, 2, 1, "", "pretrained"], [41, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[42, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[42, 2, 1, "", "getClasses"], [42, 2, 1, "", "loadSavedModel"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"], [42, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[43, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[43, 2, 1, "", "getClasses"], [43, 2, 1, "", "loadSavedModel"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[44, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[44, 2, 1, "", "getClasses"], [44, 2, 1, "", "loadSavedModel"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setCoalesceSentences"], [44, 2, 1, "", "setConfigProtoBytes"], [44, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[45, 1, 1, "", "SentimentDLApproach"], [45, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[45, 2, 1, "", "setDropout"], [45, 2, 1, "", "setThreshold"], [45, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setConfigProtoBytes"], [45, 2, 1, "", "setThreshold"], [45, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[46, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[46, 2, 1, "", "loadSavedModel"], [46, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[47, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[47, 2, 1, "", "loadSavedModel"], [47, 2, 1, "", "pretrained"], [47, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[48, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[48, 2, 1, "", "getClasses"], [48, 2, 1, "", "loadSavedModel"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setCoalesceSentences"], [48, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[49, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[49, 2, 1, "", "getClasses"], [49, 2, 1, "", "loadSavedModel"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[50, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[50, 2, 1, "", "getClasses"], [50, 2, 1, "", "loadSavedModel"], [50, 2, 1, "", "pretrained"], [50, 2, 1, "", "setCoalesceSentences"], [50, 2, 1, "", "setConfigProtoBytes"], [50, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[51, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[51, 2, 1, "", "getClasses"], [51, 2, 1, "", "loadSavedModel"], [51, 2, 1, "", "pretrained"], [51, 2, 1, "", "setCoalesceSentences"], [51, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[52, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[52, 2, 1, "", "getClasses"], [52, 2, 1, "", "loadSavedModel"], [52, 2, 1, "", "pretrained"], [52, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.coref": [[54, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[54, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[54, 2, 1, "", "loadSavedModel"], [54, 2, 1, "", "pretrained"], [54, 2, 1, "", "setConfigProtoBytes"], [54, 2, 1, "", "setMaxSegmentLength"], [54, 2, 1, "", "setTextGenre"]], "sparknlp.annotator.cv": [[55, 0, 0, "-", "clip_for_zero_shot_classification"], [56, 0, 0, "-", "convnext_for_image_classification"], [58, 0, 0, "-", "swin_for_image_classification"], [59, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [60, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[55, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[55, 2, 1, "", "getCandidateLabels"], [55, 2, 1, "", "loadSavedModel"], [55, 2, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[56, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[56, 2, 1, "", "getClasses"], [56, 2, 1, "", "loadSavedModel"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setConfigProtoBytes"], [56, 2, 1, "", "setCropPct"], [56, 2, 1, "", "setDoRescale"], [56, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.swin_for_image_classification": [[58, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[58, 2, 1, "", "getClasses"], [58, 2, 1, "", "loadSavedModel"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[59, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[59, 2, 1, "", "loadSavedModel"], [59, 2, 1, "", "pretrained"], [59, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[60, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[60, 2, 1, "", "getClasses"], [60, 2, 1, "", "loadSavedModel"], [60, 2, 1, "", "pretrained"], [60, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[61, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[61, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[62, 0, 0, "-", "dependency_parser"], [64, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[62, 1, 1, "", "DependencyParserApproach"], [62, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[62, 2, 1, "", "setConllU"], [62, 2, 1, "", "setDependencyTreeBank"], [62, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[62, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[64, 1, 1, "", "TypedDependencyParserApproach"], [64, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[64, 2, 1, "", "setConll2009"], [64, 2, 1, "", "setConllU"], [64, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[64, 2, 1, "", "pretrained"]], "sparknlp.annotator.document_character_text_splitter": [[65, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[65, 2, 1, "", "setChunkOverlap"], [65, 2, 1, "", "setChunkSize"], [65, 2, 1, "", "setExplodeSplits"], [65, 2, 1, "", "setKeepSeparators"], [65, 2, 1, "", "setPatternsAreRegex"], [65, 2, 1, "", "setSplitPatterns"], [65, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_normalizer": [[66, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[66, 2, 1, "", "setAction"], [66, 2, 1, "", "setEncoding"], [66, 2, 1, "", "setLowercase"], [66, 2, 1, "", "setPatterns"], [66, 2, 1, "", "setPolicy"], [66, 2, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[67, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[67, 2, 1, "", "setExplodeSplits"], [67, 2, 1, "", "setNumTokens"], [67, 2, 1, "", "setTokenOverlap"], [67, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter_test": [[68, 1, 1, "", "DocumentTokenSplitterTestSpec"]], "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec": [[68, 2, 1, "", "setUp"]], "sparknlp.annotator.embeddings": [[69, 0, 0, "-", "albert_embeddings"], [70, 0, 0, "-", "bert_embeddings"], [71, 0, 0, "-", "bert_sentence_embeddings"], [72, 0, 0, "-", "bge_embeddings"], [73, 0, 0, "-", "camembert_embeddings"], [74, 0, 0, "-", "chunk_embeddings"], [75, 0, 0, "-", "deberta_embeddings"], [76, 0, 0, "-", "distil_bert_embeddings"], [77, 0, 0, "-", "doc2vec"], [78, 0, 0, "-", "e5_embeddings"], [79, 0, 0, "-", "elmo_embeddings"], [81, 0, 0, "-", "instructor_embeddings"], [82, 0, 0, "-", "longformer_embeddings"], [83, 0, 0, "-", "mpnet_embeddings"], [84, 0, 0, "-", "mxbai_embeddings"], [85, 0, 0, "-", "nomic_embeddings"], [86, 0, 0, "-", "roberta_embeddings"], [87, 0, 0, "-", "roberta_sentence_embeddings"], [88, 0, 0, "-", "sentence_embeddings"], [89, 0, 0, "-", "snowflake_embeddings"], [90, 0, 0, "-", "uae_embeddings"], [91, 0, 0, "-", "universal_sentence_encoder"], [92, 0, 0, "-", "word2vec"], [93, 0, 0, "-", "word_embeddings"], [94, 0, 0, "-", "xlm_roberta_embeddings"], [95, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [96, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[69, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[69, 2, 1, "", "loadSavedModel"], [69, 2, 1, "", "pretrained"], [69, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[70, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[70, 2, 1, "", "loadSavedModel"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[71, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[71, 2, 1, "", "loadSavedModel"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setConfigProtoBytes"], [71, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[72, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[72, 2, 1, "", "loadSavedModel"], [72, 2, 1, "", "pretrained"], [72, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[73, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[73, 2, 1, "", "loadSavedModel"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[74, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[74, 2, 1, "", "setPoolingStrategy"], [74, 2, 1, "", "setSkipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[75, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[75, 2, 1, "", "loadSavedModel"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[76, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[76, 2, 1, "", "loadSavedModel"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[77, 1, 1, "", "Doc2VecApproach"], [77, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[77, 2, 1, "", "setMaxIter"], [77, 2, 1, "", "setMaxSentenceLength"], [77, 2, 1, "", "setMinCount"], [77, 2, 1, "", "setNumPartitions"], [77, 2, 1, "", "setSeed"], [77, 2, 1, "", "setStepSize"], [77, 2, 1, "", "setVectorSize"], [77, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[77, 2, 1, "", "getVectors"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[78, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[78, 2, 1, "", "loadSavedModel"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[79, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[79, 2, 1, "", "loadSavedModel"], [79, 2, 1, "", "pretrained"], [79, 2, 1, "", "setBatchSize"], [79, 2, 1, "", "setConfigProtoBytes"], [79, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[81, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[81, 2, 1, "", "loadSavedModel"], [81, 2, 1, "", "pretrained"], [81, 2, 1, "", "setConfigProtoBytes"], [81, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[82, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[82, 2, 1, "", "loadSavedModel"], [82, 2, 1, "", "pretrained"], [82, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[83, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[83, 2, 1, "", "loadSavedModel"], [83, 2, 1, "", "pretrained"], [83, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[84, 1, 1, "", "MxbaiEmbeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings": [[84, 2, 1, "", "loadSavedModel"], [84, 2, 1, "", "pretrained"], [84, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[85, 1, 1, "", "NomicEmbeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings": [[85, 2, 1, "", "loadSavedModel"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[86, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[86, 2, 1, "", "loadSavedModel"], [86, 2, 1, "", "pretrained"], [86, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[87, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[87, 2, 1, "", "loadSavedModel"], [87, 2, 1, "", "pretrained"], [87, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[88, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[88, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[89, 1, 1, "", "SnowFlakeEmbeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings": [[89, 2, 1, "", "loadSavedModel"], [89, 2, 1, "", "pretrained"], [89, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[90, 1, 1, "", "UAEEmbeddings"]], "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings": [[90, 2, 1, "", "loadSavedModel"], [90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[91, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[91, 2, 1, "", "loadSavedModel"], [91, 2, 1, "", "pretrained"], [91, 2, 1, "", "setConfigProtoBytes"], [91, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[92, 1, 1, "", "Word2VecApproach"], [92, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[92, 2, 1, "", "setMaxIter"], [92, 2, 1, "", "setMaxSentenceLength"], [92, 2, 1, "", "setMinCount"], [92, 2, 1, "", "setNumPartitions"], [92, 2, 1, "", "setSeed"], [92, 2, 1, "", "setStepSize"], [92, 2, 1, "", "setVectorSize"], [92, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[92, 2, 1, "", "getVectors"], [92, 2, 1, "", "pretrained"], [92, 2, 1, "", "setVectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[93, 1, 1, "", "WordEmbeddings"], [93, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[93, 2, 1, "", "setReadCacheSize"], [93, 2, 1, "", "setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[93, 2, 1, "", "loadStorage"], [93, 2, 1, "", "overallCoverage"], [93, 2, 1, "", "pretrained"], [93, 2, 1, "", "setReadCacheSize"], [93, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[94, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[94, 2, 1, "", "loadSavedModel"], [94, 2, 1, "", "pretrained"], [94, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[95, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[95, 2, 1, "", "loadSavedModel"], [95, 2, 1, "", "pretrained"], [95, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[96, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[96, 2, 1, "", "loadSavedModel"], [96, 2, 1, "", "pretrained"], [96, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[97, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[97, 1, 1, "", "EntityRulerApproach"], [97, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[97, 2, 1, "", "setAlphabetResource"], [97, 2, 1, "", "setPatternsResource"], [97, 2, 1, "", "setSentenceMatch"], [97, 2, 1, "", "setUseStorage"]], "sparknlp.annotator.graph_extraction": [[99, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[99, 2, 1, "", "setDelimiter"], [99, 2, 1, "", "setDependencyParserModel"], [99, 2, 1, "", "setEntityTypes"], [99, 2, 1, "", "setExplodeEntities"], [99, 2, 1, "", "setIncludeEdges"], [99, 2, 1, "", "setMaxSentenceSize"], [99, 2, 1, "", "setMergeEntities"], [99, 2, 1, "", "setMergeEntitiesIOBFormat"], [99, 2, 1, "", "setMinSentenceSize"], [99, 2, 1, "", "setPosModel"], [99, 2, 1, "", "setRelationshipTypes"], [99, 2, 1, "", "setRootTokens"], [99, 2, 1, "", "setTypedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[102, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[102, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[102, 2, 1, "", "getStopWords"], [102, 2, 1, "", "loadDefaultStopWords"], [102, 2, 1, "", "setMaxNGrams"], [102, 2, 1, "", "setMinNGrams"], [102, 2, 1, "", "setNKeywords"], [102, 2, 1, "", "setStopWords"], [102, 2, 1, "", "setThreshold"], [102, 2, 1, "", "setWindowSize"]], "sparknlp.annotator.ld_dl": [[104, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[104, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[104, 2, 1, "", "pretrained"], [104, 2, 1, "", "setCoalesceSentences"], [104, 2, 1, "", "setConfigProtoBytes"], [104, 2, 1, "", "setThreshold"], [104, 2, 1, "", "setThresholdLabel"]], "sparknlp.annotator.lemmatizer": [[105, 1, 1, "", "Lemmatizer"], [105, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[105, 2, 1, "", "setDictionary"], [105, 2, 1, "", "setFormCol"], [105, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[105, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[106, 0, 0, "-", "big_text_matcher"], [107, 0, 0, "-", "date_matcher"], [109, 0, 0, "-", "multi_date_matcher"], [110, 0, 0, "-", "regex_matcher"], [111, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[106, 1, 1, "", "BigTextMatcher"], [106, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[106, 2, 1, "", "setCaseSensitive"], [106, 2, 1, "", "setEntities"], [106, 2, 1, "", "setMergeOverlapping"], [106, 2, 1, "", "setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[106, 2, 1, "", "loadStorage"], [106, 2, 1, "", "pretrained"], [106, 2, 1, "", "setCaseSensitive"], [106, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[107, 1, 1, "", "DateMatcher"], [107, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[107, 2, 1, "", "setAggressiveMatching"], [107, 2, 1, "", "setAnchorDateDay"], [107, 2, 1, "", "setAnchorDateMonth"], [107, 2, 1, "", "setAnchorDateYear"], [107, 2, 1, "", "setDefaultDayWhenMissing"], [107, 2, 1, "", "setInputFormats"], [107, 2, 1, "", "setOutputFormat"], [107, 2, 1, "", "setReadMonthFirst"], [107, 2, 1, "", "setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.multi_date_matcher": [[109, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.regex_matcher": [[110, 1, 1, "", "RegexMatcher"], [110, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[110, 2, 1, "", "setDelimiter"], [110, 2, 1, "", "setExternalRules"], [110, 2, 1, "", "setRules"], [110, 2, 1, "", "setStrategy"]], "sparknlp.annotator.matcher.text_matcher": [[111, 1, 1, "", "TextMatcher"], [111, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[111, 2, 1, "", "setBuildFromTokens"], [111, 2, 1, "", "setCaseSensitive"], [111, 2, 1, "", "setEntities"], [111, 2, 1, "", "setEntityValue"], [111, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[111, 2, 1, "", "pretrained"], [111, 2, 1, "", "setBuildFromTokens"], [111, 2, 1, "", "setEntityValue"], [111, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[112, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[112, 2, 1, "", "setDelimiter"], [112, 2, 1, "", "setEnableCumulative"], [112, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[114, 0, 0, "-", "ner_approach"], [115, 0, 0, "-", "ner_converter"], [116, 0, 0, "-", "ner_crf"], [117, 0, 0, "-", "ner_dl"], [118, 0, 0, "-", "ner_overwriter"], [119, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[114, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[114, 2, 1, "", "getLabelColumn"], [114, 2, 1, "", "setEntities"], [114, 2, 1, "", "setLabelColumn"], [114, 2, 1, "", "setMaxEpochs"], [114, 2, 1, "", "setMinEpochs"], [114, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[115, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[115, 2, 1, "", "setNerHasNoSchema"], [115, 2, 1, "", "setPreservePosition"], [115, 2, 1, "", "setWhiteList"]], "sparknlp.annotator.ner.ner_crf": [[116, 1, 1, "", "NerCrfApproach"], [116, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[116, 2, 1, "", "setC0"], [116, 2, 1, "", "setExternalFeatures"], [116, 2, 1, "", "setIncludeConfidence"], [116, 2, 1, "", "setL2"], [116, 2, 1, "", "setLossEps"], [116, 2, 1, "", "setMinW"], [116, 2, 1, "", "setVerbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[116, 2, 1, "", "pretrained"], [116, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[117, 1, 1, "", "NerDLApproach"], [117, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[117, 2, 1, "", "setBatchSize"], [117, 2, 1, "", "setBestModelMetric"], [117, 2, 1, "", "setConfigProtoBytes"], [117, 2, 1, "", "setDropout"], [117, 2, 1, "", "setEnableMemoryOptimizer"], [117, 2, 1, "", "setGraphFolder"], [117, 2, 1, "", "setIncludeAllConfidenceScores"], [117, 2, 1, "", "setIncludeConfidence"], [117, 2, 1, "", "setLr"], [117, 2, 1, "", "setPo"], [117, 2, 1, "", "setUseBestModel"], [117, 2, 1, "", "setUseContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[117, 2, 1, "", "pretrained"], [117, 2, 1, "", "setConfigProtoBytes"], [117, 2, 1, "", "setIncludeAllConfidenceScores"], [117, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[118, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[118, 2, 1, "", "setNerWords"], [118, 2, 1, "", "setNewNerEntity"], [118, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[119, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[119, 2, 1, "", "getClasses"], [119, 2, 1, "", "load"], [119, 2, 1, "", "pretrained"], [119, 2, 1, "", "setEntityDefinitions"], [119, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[120, 1, 1, "", "Normalizer"], [120, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[120, 2, 1, "", "setCleanupPatterns"], [120, 2, 1, "", "setLowercase"], [120, 2, 1, "", "setMaxLength"], [120, 2, 1, "", "setMinLength"], [120, 2, 1, "", "setSlangDictionary"]], "sparknlp.annotator.openai": [[122, 0, 0, "-", "openai_completion"], [123, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[122, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[122, 2, 1, "", "setBestOf"], [122, 2, 1, "", "setEcho"], [122, 2, 1, "", "setFrequencyPenalty"], [122, 2, 1, "", "setLogitBias"], [122, 2, 1, "", "setLogprobs"], [122, 2, 1, "", "setMaxTokens"], [122, 2, 1, "", "setModel"], [122, 2, 1, "", "setNumberOfCompletions"], [122, 2, 1, "", "setPresencePenalty"], [122, 2, 1, "", "setStop"], [122, 2, 1, "", "setSuffix"], [122, 2, 1, "", "setTemperature"], [122, 2, 1, "", "setTopP"], [122, 2, 1, "", "setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[123, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[123, 2, 1, "", "setModel"], [123, 2, 1, "", "setUser"]], "sparknlp.annotator.param": [[124, 0, 0, "-", "classifier_encoder"], [125, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[124, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[124, 2, 1, "", "setBatchSize"], [124, 2, 1, "", "setConfigProtoBytes"], [124, 2, 1, "", "setLabelColumn"], [124, 2, 1, "", "setLr"], [124, 2, 1, "", "setMaxEpochs"], [124, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[125, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[125, 2, 1, "", "setEnableOutputLogs"], [125, 2, 1, "", "setEvaluationLogExtended"], [125, 2, 1, "", "setOutputLogsPath"], [125, 2, 1, "", "setTestDataset"], [125, 2, 1, "", "setValidationSplit"], [125, 2, 1, "", "setVerbose"]], "sparknlp.annotator.pos": [[128, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[128, 1, 1, "", "PerceptronApproach"], [128, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[128, 2, 1, "", "getNIterations"], [128, 2, 1, "", "setIterations"], [128, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[128, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[130, 0, 0, "-", "sentence_detector"], [131, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[130, 1, 1, "", "SentenceDetector"], [130, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[130, 2, 1, "", "setCustomBounds"], [130, 2, 1, "", "setCustomBoundsStrategy"], [130, 2, 1, "", "setDetectLists"], [130, 2, 1, "", "setExplodeSentences"], [130, 2, 1, "", "setMaxLength"], [130, 2, 1, "", "setMinLength"], [130, 2, 1, "", "setSplitLength"], [130, 2, 1, "", "setUseAbbreviations"], [130, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[131, 1, 1, "", "SentenceDetectorDLApproach"], [131, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[131, 2, 1, "", "setEpochsNumber"], [131, 2, 1, "", "setExplodeSentences"], [131, 2, 1, "", "setImpossiblePenultimates"], [131, 2, 1, "", "setModel"], [131, 2, 1, "", "setOutputLogsPath"], [131, 2, 1, "", "setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[131, 2, 1, "", "pretrained"], [131, 2, 1, "", "setCustomBounds"], [131, 2, 1, "", "setExplodeSentences"], [131, 2, 1, "", "setImpossiblePenultimates"], [131, 2, 1, "", "setMaxLength"], [131, 2, 1, "", "setMinLength"], [131, 2, 1, "", "setModel"], [131, 2, 1, "", "setSplitLength"], [131, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[133, 0, 0, "-", "sentiment_detector"], [134, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[133, 1, 1, "", "SentimentDetector"], [133, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[133, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[134, 1, 1, "", "ViveknSentimentApproach"], [134, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[134, 2, 1, "", "setPruneCorpus"], [134, 2, 1, "", "setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[134, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq": [[135, 0, 0, "-", "auto_gguf_model"], [136, 0, 0, "-", "bart_transformer"], [137, 0, 0, "-", "cpm_transformer"], [138, 0, 0, "-", "gpt2_transformer"], [140, 0, 0, "-", "llama2_transformer"], [141, 0, 0, "-", "llama3_transformer"], [142, 0, 0, "-", "m2m100_transformer"], [143, 0, 0, "-", "marian_transformer"], [144, 0, 0, "-", "mistral_transformer"], [145, 0, 0, "-", "nllb_transformer"], [146, 0, 0, "-", "phi2_transformer"], [147, 0, 0, "-", "phi3_transformer"], [148, 0, 0, "-", "qwen_transformer"], [149, 0, 0, "-", "starcoder_transformer"], [150, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[135, 1, 1, "", "AutoGGUFModel"]], "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel": [[135, 2, 1, "", "getMetadata"], [135, 2, 1, "", "loadSavedModel"], [135, 2, 1, "", "pretrained"], [135, 2, 1, "", "setCachePrompt"], [135, 2, 1, "", "setChatTemplate"], [135, 2, 1, "", "setDefragmentationThreshold"], [135, 2, 1, "", "setDisableTokenIds"], [135, 2, 1, "", "setDynamicTemperatureExponent"], [135, 2, 1, "", "setDynamicTemperatureRange"], [135, 2, 1, "", "setEmbedding"], [135, 2, 1, "", "setFlashAttention"], [135, 2, 1, "", "setFrequencyPenalty"], [135, 2, 1, "", "setGpuSplitMode"], [135, 2, 1, "", "setGrammar"], [135, 2, 1, "", "setGrpAttnN"], [135, 2, 1, "", "setGrpAttnW"], [135, 2, 1, "", "setIgnoreEos"], [135, 2, 1, "", "setInputPrefix"], [135, 2, 1, "", "setInputPrefixBos"], [135, 2, 1, "", "setInputSuffix"], [135, 2, 1, "", "setLookupCacheDynamicFilePath"], [135, 2, 1, "", "setLookupCacheStaticFilePath"], [135, 2, 1, "", "setLoraAdapters"], [135, 2, 1, "", "setMainGpu"], [135, 2, 1, "", "setMinKeep"], [135, 2, 1, "", "setMinP"], [135, 2, 1, "", "setMiroStat"], [135, 2, 1, "", "setMiroStatEta"], [135, 2, 1, "", "setMiroStatTau"], [135, 2, 1, "", "setModelAlias"], [135, 2, 1, "", "setModelDraft"], [135, 2, 1, "", "setNBatch"], [135, 2, 1, "", "setNChunks"], [135, 2, 1, "", "setNCtx"], [135, 2, 1, "", "setNDraft"], [135, 2, 1, "", "setNGpuLayers"], [135, 2, 1, "", "setNGpuLayersDraft"], [135, 2, 1, "", "setNKeep"], [135, 2, 1, "", "setNPredict"], [135, 2, 1, "", "setNProbs"], [135, 2, 1, "", "setNSequences"], [135, 2, 1, "", "setNThreads"], [135, 2, 1, "", "setNThreadsBatch"], [135, 2, 1, "", "setNThreadsBatchDraft"], [135, 2, 1, "", "setNThreadsDraft"], [135, 2, 1, "", "setNUbatch"], [135, 2, 1, "", "setNoKvOffload"], [135, 2, 1, "", "setNumaStrategy"], [135, 2, 1, "", "setPSplit"], [135, 2, 1, "", "setPenalizeNl"], [135, 2, 1, "", "setPenaltyPrompt"], [135, 2, 1, "", "setPoolingType"], [135, 2, 1, "", "setPresencePenalty"], [135, 2, 1, "", "setRepeatLastN"], [135, 2, 1, "", "setRepeatPenalty"], [135, 2, 1, "", "setRopeFreqBase"], [135, 2, 1, "", "setRopeFreqScale"], [135, 2, 1, "", "setRopeScalingType"], [135, 2, 1, "", "setSamplers"], [135, 2, 1, "", "setSeed"], [135, 2, 1, "", "setStopStrings"], [135, 2, 1, "", "setSystemPrompt"], [135, 2, 1, "", "setTemperature"], [135, 2, 1, "", "setTensorSplit"], [135, 2, 1, "", "setTfsZ"], [135, 2, 1, "", "setTokenBias"], [135, 2, 1, "", "setTokenIdBias"], [135, 2, 1, "", "setTopK"], [135, 2, 1, "", "setTopP"], [135, 2, 1, "", "setTypicalP"], [135, 2, 1, "", "setUseChatTemplate"], [135, 2, 1, "", "setUseMlock"], [135, 2, 1, "", "setUseMmap"], [135, 2, 1, "", "setYarnAttnFactor"], [135, 2, 1, "", "setYarnBetaFast"], [135, 2, 1, "", "setYarnBetaSlow"], [135, 2, 1, "", "setYarnExtFactor"], [135, 2, 1, "", "setYarnOrigCtx"]], "sparknlp.annotator.seq2seq.bart_transformer": [[136, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[136, 2, 1, "", "loadSavedModel"], [136, 2, 1, "", "pretrained"], [136, 2, 1, "", "setBeamSize"], [136, 2, 1, "", "setCache"], [136, 2, 1, "", "setConfigProtoBytes"], [136, 2, 1, "", "setDoSample"], [136, 2, 1, "", "setIgnoreTokenIds"], [136, 2, 1, "", "setMaxOutputLength"], [136, 2, 1, "", "setMinOutputLength"], [136, 2, 1, "", "setNoRepeatNgramSize"], [136, 2, 1, "", "setRepetitionPenalty"], [136, 2, 1, "", "setTask"], [136, 2, 1, "", "setTemperature"], [136, 2, 1, "", "setTopK"], [136, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[137, 1, 1, "", "CPMTransformer"]], "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer": [[137, 2, 1, "", "loadSavedModel"], [137, 2, 1, "", "pretrained"], [137, 2, 1, "", "setConfigProtoBytes"], [137, 2, 1, "", "setDoSample"], [137, 2, 1, "", "setIgnoreTokenIds"], [137, 2, 1, "", "setMaxOutputLength"], [137, 2, 1, "", "setMinOutputLength"], [137, 2, 1, "", "setNoRepeatNgramSize"], [137, 2, 1, "", "setRepetitionPenalty"], [137, 2, 1, "", "setTemperature"], [137, 2, 1, "", "setTopK"], [137, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[138, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[138, 2, 1, "", "loadSavedModel"], [138, 2, 1, "", "pretrained"], [138, 2, 1, "", "setConfigProtoBytes"], [138, 2, 1, "", "setDoSample"], [138, 2, 1, "", "setIgnoreTokenIds"], [138, 2, 1, "", "setMaxOutputLength"], [138, 2, 1, "", "setMinOutputLength"], [138, 2, 1, "", "setNoRepeatNgramSize"], [138, 2, 1, "", "setRepetitionPenalty"], [138, 2, 1, "", "setTask"], [138, 2, 1, "", "setTemperature"], [138, 2, 1, "", "setTopK"], [138, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[140, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[140, 2, 1, "", "loadSavedModel"], [140, 2, 1, "", "pretrained"], [140, 2, 1, "", "setConfigProtoBytes"], [140, 2, 1, "", "setDoSample"], [140, 2, 1, "", "setIgnoreTokenIds"], [140, 2, 1, "", "setMaxOutputLength"], [140, 2, 1, "", "setMinOutputLength"], [140, 2, 1, "", "setNoRepeatNgramSize"], [140, 2, 1, "", "setRepetitionPenalty"], [140, 2, 1, "", "setTemperature"], [140, 2, 1, "", "setTopK"], [140, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[141, 1, 1, "", "LLAMA3Transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer": [[141, 2, 1, "", "loadSavedModel"], [141, 2, 1, "", "pretrained"], [141, 2, 1, "", "setBeamSize"], [141, 2, 1, "", "setConfigProtoBytes"], [141, 2, 1, "", "setDoSample"], [141, 2, 1, "", "setIgnoreTokenIds"], [141, 2, 1, "", "setMaxOutputLength"], [141, 2, 1, "", "setMinOutputLength"], [141, 2, 1, "", "setNoRepeatNgramSize"], [141, 2, 1, "", "setRepetitionPenalty"], [141, 2, 1, "", "setStopTokenIds"], [141, 2, 1, "", "setTemperature"], [141, 2, 1, "", "setTopK"], [141, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[142, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[142, 2, 1, "", "loadSavedModel"], [142, 2, 1, "", "pretrained"], [142, 2, 1, "", "setBeamSize"], [142, 2, 1, "", "setConfigProtoBytes"], [142, 2, 1, "", "setDoSample"], [142, 2, 1, "", "setIgnoreTokenIds"], [142, 2, 1, "", "setMaxOutputLength"], [142, 2, 1, "", "setMinOutputLength"], [142, 2, 1, "", "setNoRepeatNgramSize"], [142, 2, 1, "", "setRepetitionPenalty"], [142, 2, 1, "", "setSrcLang"], [142, 2, 1, "", "setTemperature"], [142, 2, 1, "", "setTgtLang"], [142, 2, 1, "", "setTopK"], [142, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[143, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[143, 2, 1, "", "loadSavedModel"], [143, 2, 1, "", "pretrained"], [143, 2, 1, "", "setConfigProtoBytes"], [143, 2, 1, "", "setDoSample"], [143, 2, 1, "", "setIgnoreTokenIds"], [143, 2, 1, "", "setLangId"], [143, 2, 1, "", "setMaxInputLength"], [143, 2, 1, "", "setMaxOutputLength"], [143, 2, 1, "", "setNoRepeatNgramSize"], [143, 2, 1, "", "setRandomSeed"], [143, 2, 1, "", "setRepetitionPenalty"], [143, 2, 1, "", "setTemperature"], [143, 2, 1, "", "setTopK"], [143, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[144, 1, 1, "", "MistralTransformer"]], "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer": [[144, 2, 1, "", "loadSavedModel"], [144, 2, 1, "", "pretrained"], [144, 2, 1, "", "setConfigProtoBytes"], [144, 2, 1, "", "setDoSample"], [144, 2, 1, "", "setIgnoreTokenIds"], [144, 2, 1, "", "setMaxOutputLength"], [144, 2, 1, "", "setMinOutputLength"], [144, 2, 1, "", "setNoRepeatNgramSize"], [144, 2, 1, "", "setRepetitionPenalty"], [144, 2, 1, "", "setTemperature"], [144, 2, 1, "", "setTopK"], [144, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[145, 1, 1, "", "NLLBTransformer"]], "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer": [[145, 2, 1, "", "loadSavedModel"], [145, 2, 1, "", "pretrained"], [145, 2, 1, "", "setBeamSize"], [145, 2, 1, "", "setConfigProtoBytes"], [145, 2, 1, "", "setDoSample"], [145, 2, 1, "", "setIgnoreTokenIds"], [145, 2, 1, "", "setMaxOutputLength"], [145, 2, 1, "", "setMinOutputLength"], [145, 2, 1, "", "setNoRepeatNgramSize"], [145, 2, 1, "", "setRepetitionPenalty"], [145, 2, 1, "", "setSrcLang"], [145, 2, 1, "", "setTemperature"], [145, 2, 1, "", "setTgtLang"], [145, 2, 1, "", "setTopK"], [145, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[146, 1, 1, "", "Phi2Transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer": [[146, 2, 1, "", "loadSavedModel"], [146, 2, 1, "", "pretrained"], [146, 2, 1, "", "setConfigProtoBytes"], [146, 2, 1, "", "setDoSample"], [146, 2, 1, "", "setIgnoreTokenIds"], [146, 2, 1, "", "setMaxOutputLength"], [146, 2, 1, "", "setMinOutputLength"], [146, 2, 1, "", "setNoRepeatNgramSize"], [146, 2, 1, "", "setRepetitionPenalty"], [146, 2, 1, "", "setTemperature"], [146, 2, 1, "", "setTopK"], [146, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[147, 1, 1, "", "Phi3Transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer": [[147, 2, 1, "", "loadSavedModel"], [147, 2, 1, "", "pretrained"], [147, 2, 1, "", "setConfigProtoBytes"], [147, 2, 1, "", "setDoSample"], [147, 2, 1, "", "setIgnoreTokenIds"], [147, 2, 1, "", "setMaxOutputLength"], [147, 2, 1, "", "setMinOutputLength"], [147, 2, 1, "", "setNoRepeatNgramSize"], [147, 2, 1, "", "setRepetitionPenalty"], [147, 2, 1, "", "setTemperature"], [147, 2, 1, "", "setTopK"], [147, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[148, 1, 1, "", "QwenTransformer"]], "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer": [[148, 2, 1, "", "loadSavedModel"], [148, 2, 1, "", "pretrained"], [148, 2, 1, "", "setConfigProtoBytes"], [148, 2, 1, "", "setDoSample"], [148, 2, 1, "", "setIgnoreTokenIds"], [148, 2, 1, "", "setMaxOutputLength"], [148, 2, 1, "", "setMinOutputLength"], [148, 2, 1, "", "setNoRepeatNgramSize"], [148, 2, 1, "", "setRepetitionPenalty"], [148, 2, 1, "", "setTemperature"], [148, 2, 1, "", "setTopK"], [148, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[149, 1, 1, "", "StarCoderTransformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer": [[149, 2, 1, "", "loadSavedModel"], [149, 2, 1, "", "pretrained"], [149, 2, 1, "", "setConfigProtoBytes"], [149, 2, 1, "", "setDoSample"], [149, 2, 1, "", "setIgnoreTokenIds"], [149, 2, 1, "", "setMaxOutputLength"], [149, 2, 1, "", "setMinOutputLength"], [149, 2, 1, "", "setNoRepeatNgramSize"], [149, 2, 1, "", "setRepetitionPenalty"], [149, 2, 1, "", "setTemperature"], [149, 2, 1, "", "setTopK"], [149, 2, 1, "", "setTopP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[150, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[150, 2, 1, "", "loadSavedModel"], [150, 2, 1, "", "pretrained"], [150, 2, 1, "", "setConfigProtoBytes"], [150, 2, 1, "", "setDoSample"], [150, 2, 1, "", "setIgnoreTokenIds"], [150, 2, 1, "", "setMaxNewTokens"], [150, 2, 1, "", "setMaxOutputLength"], [150, 2, 1, "", "setMinOutputLength"], [150, 2, 1, "", "setNoRepeatNgramSize"], [150, 2, 1, "", "setRepetitionPenalty"], [150, 2, 1, "", "setStopAtEos"], [150, 2, 1, "", "setTask"], [150, 2, 1, "", "setTemperature"], [150, 2, 1, "", "setTopK"], [150, 2, 1, "", "setTopP"], [150, 2, 1, "", "setUseCache"]], "sparknlp.annotator.similarity": [[151, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[151, 1, 1, "", "DocumentSimilarityRankerApproach"], [151, 1, 1, "", "DocumentSimilarityRankerFinisher"], [151, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[151, 2, 1, "", "asRetriever"], [151, 2, 1, "", "setAggregationMethod"], [151, 2, 1, "", "setBucketLength"], [151, 2, 1, "", "setIdentityRanking"], [151, 2, 1, "", "setNumHashTables"], [151, 2, 1, "", "setNumberOfNeighbours"], [151, 2, 1, "", "setSimilarityMethod"], [151, 2, 1, "", "setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[151, 2, 1, "", "getInputCols"], [151, 2, 1, "", "getOutputCols"], [151, 2, 1, "", "setExtractNearestNeighbor"], [151, 2, 1, "", "setInputCols"], [151, 2, 1, "", "setOutputCols"]], "sparknlp.annotator.spell_check": [[153, 0, 0, "-", "context_spell_checker"], [155, 0, 0, "-", "norvig_sweeting"], [156, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[153, 1, 1, "", "ContextSpellCheckerApproach"], [153, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[153, 2, 1, "", "addRegexClass"], [153, 2, 1, "", "addVocabClass"], [153, 2, 1, "", "setBatchSize"], [153, 2, 1, "", "setCaseStrategy"], [153, 2, 1, "", "setClassCount"], [153, 2, 1, "", "setCompoundCount"], [153, 2, 1, "", "setConfigProtoBytes"], [153, 2, 1, "", "setEpochs"], [153, 2, 1, "", "setErrorThreshold"], [153, 2, 1, "", "setFinalRate"], [153, 2, 1, "", "setGraphFolder"], [153, 2, 1, "", "setInitialRate"], [153, 2, 1, "", "setLanguageModelClasses"], [153, 2, 1, "", "setMaxCandidates"], [153, 2, 1, "", "setMaxSentLen"], [153, 2, 1, "", "setMaxWindowLen"], [153, 2, 1, "", "setMinCount"], [153, 2, 1, "", "setTradeoff"], [153, 2, 1, "", "setValidationFraction"], [153, 2, 1, "", "setWeightedDistPath"], [153, 2, 1, "", "setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[153, 2, 1, "", "getWordClasses"], [153, 2, 1, "", "pretrained"], [153, 2, 1, "", "setCaseStrategy"], [153, 2, 1, "", "setClasses"], [153, 2, 1, "", "setCompareLowcase"], [153, 2, 1, "", "setConfigProtoBytes"], [153, 2, 1, "", "setCorrectSymbols"], [153, 2, 1, "", "setErrorThreshold"], [153, 2, 1, "", "setGamma"], [153, 2, 1, "", "setIdsVocab"], [153, 2, 1, "", "setMaxCandidates"], [153, 2, 1, "", "setMaxWindowLen"], [153, 2, 1, "", "setTradeoff"], [153, 2, 1, "", "setVocabFreq"], [153, 2, 1, "", "setVocabIds"], [153, 2, 1, "", "setWeights"], [153, 2, 1, "", "setWordMaxDistance"], [153, 2, 1, "", "updateRegexClass"], [153, 2, 1, "", "updateVocabClass"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[155, 1, 1, "", "NorvigSweetingApproach"], [155, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[155, 2, 1, "", "setCaseSensitive"], [155, 2, 1, "", "setDictionary"], [155, 2, 1, "", "setDoubleVariants"], [155, 2, 1, "", "setFrequencyPriority"], [155, 2, 1, "", "setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[155, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[156, 1, 1, "", "SymmetricDeleteApproach"], [156, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[156, 2, 1, "", "setDeletesThreshold"], [156, 2, 1, "", "setDictionary"], [156, 2, 1, "", "setFrequencyThreshold"], [156, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[156, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[157, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[158, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[158, 2, 1, "", "loadDefaultStopWords"], [158, 2, 1, "", "pretrained"], [158, 2, 1, "", "setCaseSensitive"], [158, 2, 1, "", "setLocale"], [158, 2, 1, "", "setStopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[159, 1, 1, "", "TFNerDLGraphBuilder"], [159, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[159, 2, 1, "", "getGraphFile"], [159, 2, 1, "", "getGraphFolder"], [159, 2, 1, "", "getHiddenUnitsNumber"], [159, 2, 1, "", "getInputCols"], [159, 2, 1, "", "getLabelColumn"], [159, 2, 1, "", "setGraphFile"], [159, 2, 1, "", "setGraphFolder"], [159, 2, 1, "", "setHiddenUnitsNumber"], [159, 2, 1, "", "setInputCols"], [159, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[160, 0, 0, "-", "chunk_tokenizer"], [162, 0, 0, "-", "recursive_tokenizer"], [163, 0, 0, "-", "regex_tokenizer"], [164, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[160, 1, 1, "", "ChunkTokenizer"], [160, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer": [[162, 1, 1, "", "RecursiveTokenizer"], [162, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[162, 2, 1, "", "setInfixes"], [162, 2, 1, "", "setPrefixes"], [162, 2, 1, "", "setSuffixes"], [162, 2, 1, "", "setWhitelist"]], "sparknlp.annotator.token.regex_tokenizer": [[163, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[163, 2, 1, "", "setMaxLength"], [163, 2, 1, "", "setMinLength"], [163, 2, 1, "", "setPattern"], [163, 2, 1, "", "setPositionalMask"], [163, 2, 1, "", "setPreservePosition"], [163, 2, 1, "", "setToLowercase"], [163, 2, 1, "", "setTrimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[164, 1, 1, "", "Tokenizer"], [164, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[164, 2, 1, "", "addContextChars"], [164, 2, 1, "", "addException"], [164, 2, 1, "", "addInfixPattern"], [164, 2, 1, "", "addSplitChars"], [164, 2, 1, "", "getCaseSensitiveExceptions"], [164, 2, 1, "", "getContextChars"], [164, 2, 1, "", "getExceptions"], [164, 2, 1, "", "getInfixPatterns"], [164, 2, 1, "", "getPrefixPattern"], [164, 2, 1, "", "getSplitChars"], [164, 2, 1, "", "getSuffixPattern"], [164, 2, 1, "", "setCaseSensitiveExceptions"], [164, 2, 1, "", "setContextChars"], [164, 2, 1, "", "setExceptions"], [164, 2, 1, "", "setExceptionsPath"], [164, 2, 1, "", "setInfixPatterns"], [164, 2, 1, "", "setMaxLength"], [164, 2, 1, "", "setMinLength"], [164, 2, 1, "", "setPrefixPattern"], [164, 2, 1, "", "setSplitChars"], [164, 2, 1, "", "setSplitPattern"], [164, 2, 1, "", "setSuffixPattern"], [164, 2, 1, "", "setTargetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[164, 2, 1, "", "addSplitChars"], [164, 2, 1, "", "pretrained"], [164, 2, 1, "", "setSplitChars"], [164, 2, 1, "", "setSplitPattern"]], "sparknlp.annotator.token2_chunk": [[165, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.ws": [[167, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[167, 1, 1, "", "WordSegmenterApproach"], [167, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[167, 2, 1, "", "getAmbiguityThreshold"], [167, 2, 1, "", "getFrequencyThreshold"], [167, 2, 1, "", "getNIterations"], [167, 2, 1, "", "setAmbiguityThreshold"], [167, 2, 1, "", "setEnableRegexTokenizer"], [167, 2, 1, "", "setFrequencyThreshold"], [167, 2, 1, "", "setNIterations"], [167, 2, 1, "", "setPattern"], [167, 2, 1, "", "setPosColumn"], [167, 2, 1, "", "setToLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[167, 2, 1, "", "pretrained"], [167, 2, 1, "", "setEnableRegexTokenizer"], [167, 2, 1, "", "setPattern"], [167, 2, 1, "", "setToLowercase"]], "sparknlp.base": [[168, 0, 0, "-", "audio_assembler"], [169, 0, 0, "-", "doc2_chunk"], [170, 0, 0, "-", "document_assembler"], [171, 0, 0, "-", "embeddings_finisher"], [172, 0, 0, "-", "finisher"], [173, 0, 0, "-", "graph_finisher"], [174, 0, 0, "-", "has_recursive_fit"], [175, 0, 0, "-", "has_recursive_transform"], [176, 0, 0, "-", "image_assembler"], [178, 0, 0, "-", "light_pipeline"], [179, 0, 0, "-", "multi_document_assembler"], [180, 0, 0, "-", "recursive_pipeline"], [181, 0, 0, "-", "table_assembler"], [182, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[168, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[168, 2, 1, "", "getOutputCol"], [168, 2, 1, "", "setInputCol"], [168, 2, 1, "", "setOutputCol"]], "sparknlp.base.doc2_chunk": [[169, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[169, 2, 1, "", "setChunkCol"], [169, 2, 1, "", "setFailOnMissing"], [169, 2, 1, "", "setIsArray"], [169, 2, 1, "", "setLowerCase"], [169, 2, 1, "", "setStartCol"], [169, 2, 1, "", "setStartColByTokenIndex"]], "sparknlp.base.document_assembler": [[170, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[170, 2, 1, "", "getOutputCol"], [170, 2, 1, "", "setCleanupMode"], [170, 2, 1, "", "setIdCol"], [170, 2, 1, "", "setInputCol"], [170, 2, 1, "", "setMetadataCol"], [170, 2, 1, "", "setOutputCol"]], "sparknlp.base.embeddings_finisher": [[171, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[171, 2, 1, "", "getInputCols"], [171, 2, 1, "", "getOutputCols"], [171, 2, 1, "", "setCleanAnnotations"], [171, 2, 1, "", "setInputCols"], [171, 2, 1, "", "setOutputAsVector"], [171, 2, 1, "", "setOutputCols"]], "sparknlp.base.finisher": [[172, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[172, 2, 1, "", "getInputCols"], [172, 2, 1, "", "getOutputCols"], [172, 2, 1, "", "setAnnotationSplitSymbol"], [172, 2, 1, "", "setCleanAnnotations"], [172, 2, 1, "", "setIncludeMetadata"], [172, 2, 1, "", "setInputCols"], [172, 2, 1, "", "setOutputAsArray"], [172, 2, 1, "", "setOutputCols"], [172, 2, 1, "", "setParseEmbeddingsVectors"], [172, 2, 1, "", "setValueSplitSymbol"]], "sparknlp.base.graph_finisher": [[173, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[173, 2, 1, "", "setCleanAnnotations"], [173, 2, 1, "", "setInputCol"], [173, 2, 1, "", "setOutputAsArray"], [173, 2, 1, "", "setOutputCol"]], "sparknlp.base.has_recursive_fit": [[174, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[175, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[176, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[176, 2, 1, "", "getOutputCol"], [176, 2, 1, "", "setInputCol"], [176, 2, 1, "", "setOutputCol"]], "sparknlp.base.light_pipeline": [[178, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[178, 2, 1, "", "annotate"], [178, 2, 1, "", "fullAnnotate"], [178, 2, 1, "", "fullAnnotateImage"], [178, 2, 1, "", "getIgnoreUnsupported"], [178, 2, 1, "", "setIgnoreUnsupported"], [178, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[179, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[179, 2, 1, "", "getOutputCols"], [179, 2, 1, "", "setCleanupMode"], [179, 2, 1, "", "setIdCol"], [179, 2, 1, "", "setInputCols"], [179, 2, 1, "", "setMetadataCol"], [179, 2, 1, "", "setOutputCols"]], "sparknlp.base.recursive_pipeline": [[180, 1, 1, "", "RecursivePipeline"], [180, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[181, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[181, 2, 1, "", "setCsvDelimiter"], [181, 2, 1, "", "setEscapeCsvDelimiter"], [181, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[182, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[182, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[183, 0, 0, "-", "annotator_approach"], [184, 0, 0, "-", "annotator_model"], [185, 0, 0, "-", "annotator_properties"], [186, 0, 0, "-", "annotator_type"], [187, 0, 0, "-", "coverage_result"], [189, 0, 0, "-", "match_strategy"], [190, 0, 0, "-", "properties"], [191, 0, 0, "-", "read_as"], [192, 0, 0, "-", "recursive_annotator_approach"], [193, 0, 0, "-", "storage"], [194, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[183, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[184, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_properties": [[185, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[185, 2, 1, "", "getInputCols"], [185, 2, 1, "", "getLazyAnnotator"], [185, 2, 1, "", "getOutputCol"], [185, 2, 1, "", "setInputCols"], [185, 2, 1, "", "setLazyAnnotator"], [185, 2, 1, "", "setOutputCol"]], "sparknlp.common.match_strategy": [[189, 1, 1, "", "MatchStrategy"]], "sparknlp.common.properties": [[190, 1, 1, "", "HasEmbeddingsProperties"], [190, 3, 1, "", "setBeamSize"], [190, 3, 1, "", "setDoSample"], [190, 3, 1, "", "setMaxOutputLength"], [190, 3, 1, "", "setMinOutputLength"], [190, 3, 1, "", "setNReturnSequences"], [190, 3, 1, "", "setNoRepeatNgramSize"], [190, 3, 1, "", "setRepetitionPenalty"], [190, 3, 1, "", "setTask"], [190, 3, 1, "", "setTemperature"], [190, 3, 1, "", "setTopK"], [190, 3, 1, "", "setTopP"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[190, 2, 1, "", "getDimension"], [190, 2, 1, "", "setDimension"]], "sparknlp.common.read_as": [[191, 1, 1, "", "ReadAs"]], "sparknlp.common.recursive_annotator_approach": [[192, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.utils": [[194, 3, 1, "", "ExternalResource"]], "sparknlp.functions": [[195, 3, 1, "", "explode_annotations_col"], [195, 3, 1, "", "filter_by_annotations_col"], [195, 3, 1, "", "map_annotations"], [195, 3, 1, "", "map_annotations_array"], [195, 3, 1, "", "map_annotations_col"], [195, 3, 1, "", "map_annotations_cols"], [195, 3, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[197, 0, 0, "-", "annotator_java_ml"], [198, 0, 0, "-", "annotator_transformer"], [199, 0, 0, "-", "extended_java_wrapper"], [201, 0, 0, "-", "params_getters_setters"], [202, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[197, 1, 1, "", "AnnotatorJavaMLReadable"], [197, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[197, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[198, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.extended_java_wrapper": [[199, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[199, 2, 1, "", "new_java_array"]], "sparknlp.internal.params_getters_setters": [[201, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[201, 2, 1, "", "getParamValue"], [201, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[202, 1, 1, "", "RecursiveEstimator"], [202, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[202, 2, 1, "", "fit"]], "sparknlp.logging": [[203, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[203, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[203, 2, 1, "", "end"], [203, 2, 1, "", "log_asset"], [203, 2, 1, "", "log_asset_data"], [203, 2, 1, "", "log_completed_run"], [203, 2, 1, "", "log_metrics"], [203, 2, 1, "", "log_parameters"], [203, 2, 1, "", "log_pipeline_parameters"], [203, 2, 1, "", "log_visualization"], [203, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[206, 0, 0, "-", "pretrained_pipeline"], [207, 0, 0, "-", "resource_downloader"], [208, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[206, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[206, 2, 1, "", "annotate"], [206, 2, 1, "", "fullAnnotate"], [206, 2, 1, "", "fullAnnotateImage"], [206, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[207, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[207, 2, 1, "", "clearCache"], [207, 2, 1, "", "downloadModel"], [207, 2, 1, "", "downloadModelDirectly"], [207, 2, 1, "", "downloadPipeline"], [207, 2, 1, "", "showAvailableAnnotators"], [207, 2, 1, "", "showPublicModels"], [207, 2, 1, "", "showPublicPipelines"], [207, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.training": [[209, 0, 0, "-", "conll"], [210, 0, 0, "-", "conllu"], [212, 0, 0, "-", "pos"], [213, 0, 0, "-", "pub_tator"], [214, 0, 0, "-", "spacy_to_annotation"], [215, 0, 0, "-", "tfgraphs"]], "sparknlp.training.conll": [[209, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[209, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[210, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[210, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[212, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[212, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[213, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[213, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[214, 1, 1, "", "SpacyToAnnotation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"get": [0, 224], "start": 0, "spark": [0, 1, 219, 224, 228], "nlp": [0, 1, 219, 228], "cheat": 0, "sheet": 0, "requir": 0, "instal": [0, 219], "us": [0, 219, 228], "conda": 0, "virtualenv": 0, "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 206, 207, 209, 210, 212, 213, 214], "sparknlp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 222, 223, 224], "modul": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 194, 195, 197, 198, 199, 201, 202, 203, 206, 207, 209, 210, 212, 213, 214, 218], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 197, 198, 199, 201, 202, 203, 206, 207, 209, 210, 212, 213, 214], "annotation_audio": 3, "annotation_imag": 4, "audio": [5, 6, 7, 8], "hubert_for_ctc": 5, "submodul": [6, 33, 53, 57, 63, 80, 98, 100, 101, 103, 108, 113, 121, 127, 129, 132, 139, 152, 154, 161, 166, 177, 188, 196, 200, 204, 205, 211], "wav2vec2_for_ctc": 7, "whisper_for_ctc": 8, "chunk2_doc": 9, "chunker": 10, "classifier_dl": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "albert_for_question_answ": 11, "albert_for_sequence_classif": 12, "albert_for_token_classif": 13, "albert_for_zero_shot_classif": 14, "bart_for_zero_shot_classif": 15, "bert_for_question_answ": 16, "bert_for_sequence_classif": 17, "bert_for_token_classif": 18, "bert_for_zero_shot_classif": 19, "camembert_for_question_answ": 20, "camembert_for_sequence_classif": 21, "camembert_for_token_classif": 22, "camembert_for_zero_shot_classif": 23, "exampl": [23, 28], "deberta_for_question_answ": 25, "deberta_for_sequence_classif": 26, "deberta_for_token_classif": 27, "deberta_for_zero_shot_classif": 28, "return": 28, "distil_bert_for_question_answ": 29, "distil_bert_for_sequence_classif": 30, "distil_bert_for_token_classif": 31, "distil_bert_for_zero_shot_classif": 32, "longformer_for_question_answ": 34, "longformer_for_sequence_classif": 35, "longformer_for_token_classif": 36, "mpnet_for_question_answ": 37, "mpnet_for_sequence_classif": 38, "mpnet_for_token_classif": 39, "multi_classifier_dl": 40, "roberta_for_question_answ": 41, "roberta_for_sequence_classif": 42, "roberta_for_token_classif": 43, "roberta_for_zero_shot_classif": 44, "sentiment_dl": 45, "tapas_for_question_answ": 46, "xlm_roberta_for_question_answ": 47, "xlm_roberta_for_sequence_classif": 48, "xlm_roberta_for_token_classif": 49, "xlm_roberta_for_zero_shot_classif": 50, "xlnet_for_sequence_classif": 51, "xlnet_for_token_classif": 52, "coref": [53, 54], "spanbert_coref": 54, "cv": [55, 56, 57, 58, 59, 60], "clip_for_zero_shot_classif": 55, "convnext_for_image_classif": 56, "swin_for_image_classif": 58, "vision_encoder_decoder_for_image_capt": 59, "vit_for_image_classif": 60, "date2_chunk": 61, "depend": [62, 63, 64], "dependency_pars": 62, "typed_dependency_pars": 64, "document_character_text_splitt": 65, "document_norm": 66, "document_token_splitt": 67, "document_token_splitter_test": 68, "embed": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "albert_embed": 69, "bert_embed": 70, "bert_sentence_embed": 71, "bge_embed": 72, "camembert_embed": 73, "chunk_embed": 74, "deberta_embed": 75, "distil_bert_embed": 76, "doc2vec": 77, "e5_embed": 78, "elmo_embed": 79, "instructor_embed": 81, "longformer_embed": 82, "mpnet_embed": 83, "mxbai_embed": 84, "nomic_embed": 85, "roberta_embed": 86, "roberta_sentence_embed": 87, "sentence_embed": 88, "snowflake_embed": 89, "uae_embed": 90, "universal_sentence_encod": 91, "word2vec": 92, "word_embed": 93, "xlm_roberta_embed": 94, "xlm_roberta_sentence_embed": 95, "xlnet_embed": 96, "er": [97, 98], "entity_rul": 97, "graph_extract": 99, "subpackag": [100, 196], "keyword_extract": [101, 102], "yake_keyword_extract": 102, "ld_dl": [103, 104], "language_detector_dl": 104, "lemmat": 105, "matcher": [106, 107, 108, 109, 110, 111], "big_text_match": 106, "date_match": 107, "multi_date_match": 109, "regex_match": 110, "text_match": 111, "n_gram_gener": 112, "ner": [113, 114, 115, 116, 117, 118, 119], "ner_approach": 114, "ner_convert": 115, "ner_crf": 116, "ner_dl": 117, "ner_overwrit": 118, "zero_shot_ner_model": 119, "normal": 120, "openai": [121, 122, 123], "openai_complet": 122, "openai_embed": 123, "param": [124, 125, 126], "classifier_encod": 124, "evaluation_dl_param": 125, "po": [127, 128, 212, 229], "perceptron": 128, "sentenc": [129, 130, 131, 224], "sentence_detector": 130, "sentence_detector_dl": 131, "sentiment": [132, 133, 134], "sentiment_detector": 133, "vivekn_senti": 134, "seq2seq": [135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "auto_gguf_model": 135, "bart_transform": 136, "cpm_transform": 137, "gpt2_transform": 138, "llama2_transform": 140, "llama3_transform": 141, "m2m100_transform": 142, "marian_transform": 143, "mistral_transform": 144, "nllb_transform": 145, "phi2_transform": 146, "phi3_transform": 147, "qwen_transform": 148, "starcoder_transform": 149, "t5_transform": 150, "similar": [151, 152], "document_similarity_rank": 151, "spell_check": [153, 154, 155, 156], "context_spell_check": 153, "norvig_sweet": 155, "symmetric_delet": 156, "stemmer": 157, "stop_words_clean": 158, "tf_ner_dl_graph_build": 159, "token": [160, 161, 162, 163, 164, 224], "chunk_token": 160, "recursive_token": 162, "regex_token": 163, "token2_chunk": 165, "w": [166, 167], "word_segment": 167, "base": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], "audio_assembl": 168, "doc2_chunk": 169, "document_assembl": 170, "embeddings_finish": 171, "finish": [172, 224], "graph_finish": 173, "has_recursive_fit": 174, "has_recursive_transform": 175, "image_assembl": 176, "light_pipelin": 178, "multi_document_assembl": 179, "recursive_pipelin": 180, "table_assembl": 181, "token_assembl": 182, "common": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 223], "annotator_approach": 183, "annotator_model": 184, "annotator_properti": 185, "annotator_typ": 186, "coverage_result": 187, "match_strategi": 189, "properti": 190, "function": [190, 194, 195, 196, 223, 225], "read_a": 191, "recursive_annotator_approach": 192, "storag": 193, "util": [194, 208, 217], "packag": 196, "intern": [197, 198, 199, 200, 201, 202], "annotator_java_ml": 197, "annotator_transform": 198, "extended_java_wrapp": 199, "params_getters_sett": 201, "recurs": 202, "log": [203, 204, 219, 221], "comet": [203, 219], "pretrain": [205, 206, 207, 208, 223, 227, 228], "pretrained_pipelin": 206, "resource_download": 207, "train": [209, 210, 211, 212, 213, 214, 215, 229], "conll": [209, 229], "conllu": [210, 229], "pub_tat": 213, "spacy_to_annot": 214, "tfgraph": 215, "upload_to_hub": 216, "api": 218, "refer": 218, "A": 219, "meta": 219, "machin": [219, 220], "learn": [219, 220], "platform": [219, 220], "pipelin": [219, 224, 227, 228], "paramet": 219, "evalu": 219, "metric": 219, "visual": 219, "run": 219, "an": 219, "offlin": 219, "experi": 219, "mlflow": 220, "lifecycl": 220, "third": 221, "parti": 221, "project": 221, "approach": 223, "model": 223, "note": 223, "avail": [223, 228], "set": 224, "up": 224, "your": 224, "own": 224, "type": 224, "necessari": 224, "import": 224, "construct": 224, "documentassembl": 224, "data": 224, "detect": 224, "out": 224, "put": 224, "all": 224, "togeth": 224, "ml": [224, 228], "helper": 225, "user": 226, "guid": 226, "light": 227, "convert": 227, "pipelinemodel": 227, "download": 228, "As": 228, "lightpipelin": 228, "load": 229, "dataset": 229, "spell": 229, "checker": 229, "pubtat": 229}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Spark NLP Cheat Sheet": [[0, "spark-nlp-cheat-sheet"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"], [219, "installation"]], "Using Conda": [[0, "using-conda"]], "Using Virtualenv": [[0, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [99, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [194, "module-contents"], [195, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [206, "module-contents"], [207, "module-contents"], [209, "module-contents"], [210, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [99, "classes"], [102, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [153, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [206, "classes"], [207, "classes"], [209, "classes"], [210, "classes"], [212, "classes"], [213, "classes"], [214, "classes"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "Submodules": [[6, "submodules"], [33, "submodules"], [53, "submodules"], [57, "submodules"], [63, "submodules"], [80, "submodules"], [98, "submodules"], [100, "submodules"], [101, "submodules"], [103, "submodules"], [108, "submodules"], [113, "submodules"], [121, "submodules"], [127, "submodules"], [129, "submodules"], [132, "submodules"], [139, "submodules"], [152, "submodules"], [154, "submodules"], [161, "submodules"], [166, "submodules"], [177, "submodules"], [188, "submodules"], [196, "submodules"], [200, "submodules"], [204, "submodules"], [205, "submodules"], [211, "submodules"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[15, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[22, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[23, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "Examples": [[23, "examples"], [28, "examples"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[24, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[27, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[28, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Returns": [[28, "returns"], [28, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[33, "module-sparknlp.annotator.classifier_dl"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[34, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[35, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[36, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[37, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[38, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[39, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[40, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[45, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[46, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[50, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[51, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[52, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[53, "module-sparknlp.annotator.coref"]], "sparknlp.annotator.coref.spanbert_coref": [[54, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[55, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[56, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[57, "module-sparknlp.annotator.cv"]], "sparknlp.annotator.cv.swin_for_image_classification": [[58, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[59, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification": [[60, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk": [[61, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency.dependency_parser": [[62, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[63, "module-sparknlp.annotator.dependency"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[64, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter": [[65, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer": [[66, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter": [[67, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test": [[68, "module-sparknlp.annotator.document_token_splitter_test"]], "sparknlp.annotator.embeddings.albert_embeddings": [[69, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings": [[70, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[71, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings": [[72, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[73, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[74, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[75, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[76, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec": [[77, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings": [[78, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[79, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[80, "module-sparknlp.annotator.embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[81, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[82, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[83, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[84, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[85, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[86, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[87, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[88, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[89, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings": [[90, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[91, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec": [[92, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings": [[93, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[94, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[95, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[96, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er.entity_ruler": [[97, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[98, "module-sparknlp.annotator.er"]], "sparknlp.annotator.graph_extraction": [[99, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[100, "module-sparknlp.annotator"]], "Subpackages": [[100, "subpackages"], [196, "subpackages"]], "sparknlp.annotator.keyword_extraction": [[101, "module-sparknlp.annotator.keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[102, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[103, "module-sparknlp.annotator.ld_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[104, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer": [[105, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[106, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher": [[107, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[108, "module-sparknlp.annotator.matcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[109, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher": [[110, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher": [[111, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator": [[112, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[113, "module-sparknlp.annotator.ner"]], "sparknlp.annotator.ner.ner_approach": [[114, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter": [[115, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf": [[116, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl": [[117, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter": [[118, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[119, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer": [[120, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[121, "module-sparknlp.annotator.openai"]], "sparknlp.annotator.openai.openai_completion": [[122, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings": [[123, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param.classifier_encoder": [[124, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params": [[125, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[126, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[127, "module-sparknlp.annotator.pos"]], "sparknlp.annotator.pos.perceptron": [[128, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[129, "module-sparknlp.annotator.sentence"]], "sparknlp.annotator.sentence.sentence_detector": [[130, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[131, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[132, "module-sparknlp.annotator.sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[133, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[134, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[135, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.bart_transformer": [[136, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[137, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[138, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[139, "module-sparknlp.annotator.seq2seq"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[140, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[141, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[142, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer": [[143, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[144, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[145, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[146, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[147, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[148, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[149, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer": [[150, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[151, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[152, "module-sparknlp.annotator.similarity"]], "sparknlp.annotator.spell_check.context_spell_checker": [[153, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check": [[154, "module-sparknlp.annotator.spell_check"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[155, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete": [[156, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer": [[157, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner": [[158, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[159, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token.chunk_tokenizer": [[160, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[161, "module-sparknlp.annotator.token"]], "sparknlp.annotator.token.recursive_tokenizer": [[162, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer": [[163, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer": [[164, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk": [[165, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[166, "module-sparknlp.annotator.ws"]], "sparknlp.annotator.ws.word_segmenter": [[167, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base.audio_assembler": [[168, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk": [[169, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler": [[170, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher": [[171, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher": [[172, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher": [[173, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit": [[174, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform": [[175, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler": [[176, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[177, "module-sparknlp.base"]], "sparknlp.base.light_pipeline": [[178, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler": [[179, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.recursive_pipeline": [[180, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler": [[181, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler": [[182, "module-sparknlp.base.token_assembler"]], "sparknlp.common.annotator_approach": [[183, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model": [[184, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties": [[185, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[186, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[187, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[188, "module-sparknlp.common"]], "sparknlp.common.match_strategy": [[189, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties": [[190, "module-sparknlp.common.properties"]], "Functions": [[190, "functions"], [194, "functions"], [195, "functions"], [196, "functions"]], "sparknlp.common.read_as": [[191, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach": [[192, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[193, "module-sparknlp.common.storage"]], "sparknlp.common.utils": [[194, "module-sparknlp.common.utils"]], "sparknlp.functions": [[195, "module-sparknlp.functions"]], "sparknlp": [[196, "module-sparknlp"]], "Package Contents": [[196, "package-contents"]], "sparknlp.internal.annotator_java_ml": [[197, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer": [[198, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper": [[199, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[200, "module-sparknlp.internal"]], "sparknlp.internal.params_getters_setters": [[201, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive": [[202, "module-sparknlp.internal.recursive"]], "sparknlp.logging.comet": [[203, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[204, "module-sparknlp.logging"]], "sparknlp.pretrained": [[205, "module-sparknlp.pretrained"]], "sparknlp.pretrained.pretrained_pipeline": [[206, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader": [[207, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[208, "module-sparknlp.pretrained.utils"]], "sparknlp.training.conll": [[209, "module-sparknlp.training.conll"]], "sparknlp.training.conllu": [[210, "module-sparknlp.training.conllu"]], "sparknlp.training": [[211, "module-sparknlp.training"]], "sparknlp.training.pos": [[212, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator": [[213, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation": [[214, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[215, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[216, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[217, "module-sparknlp.util"]], "API Reference": [[218, "api-reference"]], "Modules": [[218, "modules"]], "Comet - A meta machine learning platform": [[219, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[219, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[219, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[219, "logging-evaluation-metrics"]], "Logging Visualizations": [[219, "logging-visualizations"]], "Running An Offline Experiment": [[219, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[220, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[221, "third-party-projects"]], "Logging": [[221, "logging"]], "Annotation": [[222, "annotation"]], "Annotators": [[223, "annotators"]], "Annotator Approaches": [[223, "annotator-approaches"]], "Annotator Models": [[223, "annotator-models"]], "Note": [[223, "note"]], "Pretrained Models": [[223, "pretrained-models"]], "Common Functions": [[223, "common-functions"]], "Available Annotators": [[223, "available-annotators"]], "Setting up your own pipeline": [[224, "setting-up-your-own-pipeline"]], "Annotator types": [[224, "annotator-types"]], "Necessary imports": [[224, "necessary-imports"]], "Constructing the Pipeline": [[224, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[224, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[224, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[224, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[224, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[225, "helper-functions"]], "User Guide": [[226, "user-guide"]], "Light Pipelines": [[227, "light-pipelines"]], "Converting PipelineModels": [[227, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[227, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[228, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[228, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[228, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[228, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[228, "available-pipelines"]], "Loading datasets for training": [[229, "loading-datasets-for-training"]], "POS Dataset": [[229, "pos-dataset"]], "CoNLL Dataset": [[229, "conll-dataset"]], "CoNLLU Dataset": [[229, "conllu-dataset"]], "Spell Checkers Dataset": [[229, "spell-checkers-dataset"]], "PubTator Dataset": [[229, "pubtator-dataset"]]}, "indexentries": {"annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "module": [[2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator.audio.hubert_for_ctc"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [8, "module-sparknlp.annotator.audio.whisper_for_ctc"], [9, "module-sparknlp.annotator.chunk2_doc"], [10, "module-sparknlp.annotator.chunker"], [11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [14, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [15, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [16, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [17, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [18, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [19, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [20, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [21, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [22, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [23, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [24, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [25, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [26, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [27, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [28, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [33, "module-sparknlp.annotator.classifier_dl"], [34, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [35, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [36, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [37, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [38, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [39, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [40, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [41, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [45, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [46, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [49, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [50, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [51, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [52, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [53, "module-sparknlp.annotator.coref"], [54, "module-sparknlp.annotator.coref.spanbert_coref"], [55, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [56, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [57, "module-sparknlp.annotator.cv"], [58, "module-sparknlp.annotator.cv.swin_for_image_classification"], [59, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [60, "module-sparknlp.annotator.cv.vit_for_image_classification"], [61, "module-sparknlp.annotator.date2_chunk"], [62, "module-sparknlp.annotator.dependency.dependency_parser"], [63, "module-sparknlp.annotator.dependency"], [64, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [65, "module-sparknlp.annotator.document_character_text_splitter"], [66, "module-sparknlp.annotator.document_normalizer"], [67, "module-sparknlp.annotator.document_token_splitter"], [68, "module-sparknlp.annotator.document_token_splitter_test"], [69, "module-sparknlp.annotator.embeddings.albert_embeddings"], [70, "module-sparknlp.annotator.embeddings.bert_embeddings"], [71, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [72, "module-sparknlp.annotator.embeddings.bge_embeddings"], [73, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [74, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [75, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [76, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [77, "module-sparknlp.annotator.embeddings.doc2vec"], [78, "module-sparknlp.annotator.embeddings.e5_embeddings"], [79, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [80, "module-sparknlp.annotator.embeddings"], [81, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [82, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [83, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [84, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [85, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [86, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [87, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [88, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [89, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [90, "module-sparknlp.annotator.embeddings.uae_embeddings"], [91, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [92, "module-sparknlp.annotator.embeddings.word2vec"], [93, "module-sparknlp.annotator.embeddings.word_embeddings"], [94, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [95, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [96, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [97, "module-sparknlp.annotator.er.entity_ruler"], [98, "module-sparknlp.annotator.er"], [99, "module-sparknlp.annotator.graph_extraction"], [100, "module-sparknlp.annotator"], [101, "module-sparknlp.annotator.keyword_extraction"], [102, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [103, "module-sparknlp.annotator.ld_dl"], [104, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [105, "module-sparknlp.annotator.lemmatizer"], [106, "module-sparknlp.annotator.matcher.big_text_matcher"], [107, "module-sparknlp.annotator.matcher.date_matcher"], [108, "module-sparknlp.annotator.matcher"], [109, "module-sparknlp.annotator.matcher.multi_date_matcher"], [110, "module-sparknlp.annotator.matcher.regex_matcher"], [111, "module-sparknlp.annotator.matcher.text_matcher"], [112, "module-sparknlp.annotator.n_gram_generator"], [113, "module-sparknlp.annotator.ner"], [114, "module-sparknlp.annotator.ner.ner_approach"], [115, "module-sparknlp.annotator.ner.ner_converter"], [116, "module-sparknlp.annotator.ner.ner_crf"], [117, "module-sparknlp.annotator.ner.ner_dl"], [118, "module-sparknlp.annotator.ner.ner_overwriter"], [119, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [120, "module-sparknlp.annotator.normalizer"], [121, "module-sparknlp.annotator.openai"], [122, "module-sparknlp.annotator.openai.openai_completion"], [123, "module-sparknlp.annotator.openai.openai_embeddings"], [124, "module-sparknlp.annotator.param.classifier_encoder"], [125, "module-sparknlp.annotator.param.evaluation_dl_params"], [126, "module-sparknlp.annotator.param"], [127, "module-sparknlp.annotator.pos"], [128, "module-sparknlp.annotator.pos.perceptron"], [129, "module-sparknlp.annotator.sentence"], [130, "module-sparknlp.annotator.sentence.sentence_detector"], [131, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [132, "module-sparknlp.annotator.sentiment"], [133, "module-sparknlp.annotator.sentiment.sentiment_detector"], [134, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [135, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [136, "module-sparknlp.annotator.seq2seq.bart_transformer"], [137, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [138, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [139, "module-sparknlp.annotator.seq2seq"], [140, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [141, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [142, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [143, "module-sparknlp.annotator.seq2seq.marian_transformer"], [144, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [145, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [146, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [147, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [148, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [149, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [150, "module-sparknlp.annotator.seq2seq.t5_transformer"], [151, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [152, "module-sparknlp.annotator.similarity"], [153, "module-sparknlp.annotator.spell_check.context_spell_checker"], [154, "module-sparknlp.annotator.spell_check"], [155, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [156, "module-sparknlp.annotator.spell_check.symmetric_delete"], [157, "module-sparknlp.annotator.stemmer"], [158, "module-sparknlp.annotator.stop_words_cleaner"], [159, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [160, "module-sparknlp.annotator.token.chunk_tokenizer"], [161, "module-sparknlp.annotator.token"], [162, "module-sparknlp.annotator.token.recursive_tokenizer"], [163, "module-sparknlp.annotator.token.regex_tokenizer"], [164, "module-sparknlp.annotator.token.tokenizer"], [165, "module-sparknlp.annotator.token2_chunk"], [166, "module-sparknlp.annotator.ws"], [167, "module-sparknlp.annotator.ws.word_segmenter"], [168, "module-sparknlp.base.audio_assembler"], [169, "module-sparknlp.base.doc2_chunk"], [170, "module-sparknlp.base.document_assembler"], [171, "module-sparknlp.base.embeddings_finisher"], [172, "module-sparknlp.base.finisher"], [173, "module-sparknlp.base.graph_finisher"], [174, "module-sparknlp.base.has_recursive_fit"], [175, "module-sparknlp.base.has_recursive_transform"], [176, "module-sparknlp.base.image_assembler"], [177, "module-sparknlp.base"], [178, "module-sparknlp.base.light_pipeline"], [179, "module-sparknlp.base.multi_document_assembler"], [180, "module-sparknlp.base.recursive_pipeline"], [181, "module-sparknlp.base.table_assembler"], [182, "module-sparknlp.base.token_assembler"], [183, "module-sparknlp.common.annotator_approach"], [184, "module-sparknlp.common.annotator_model"], [185, "module-sparknlp.common.annotator_properties"], [186, "module-sparknlp.common.annotator_type"], [187, "module-sparknlp.common.coverage_result"], [188, "module-sparknlp.common"], [189, "module-sparknlp.common.match_strategy"], [190, "module-sparknlp.common.properties"], [191, "module-sparknlp.common.read_as"], [192, "module-sparknlp.common.recursive_annotator_approach"], [193, "module-sparknlp.common.storage"], [194, "module-sparknlp.common.utils"], [195, "module-sparknlp.functions"], [196, "module-sparknlp"], [197, "module-sparknlp.internal.annotator_java_ml"], [198, "module-sparknlp.internal.annotator_transformer"], [199, "module-sparknlp.internal.extended_java_wrapper"], [200, "module-sparknlp.internal"], [201, "module-sparknlp.internal.params_getters_setters"], [202, "module-sparknlp.internal.recursive"], [203, "module-sparknlp.logging.comet"], [204, "module-sparknlp.logging"], [205, "module-sparknlp.pretrained"], [206, "module-sparknlp.pretrained.pretrained_pipeline"], [207, "module-sparknlp.pretrained.resource_downloader"], [208, "module-sparknlp.pretrained.utils"], [209, "module-sparknlp.training.conll"], [210, "module-sparknlp.training.conllu"], [211, "module-sparknlp.training"], [212, "module-sparknlp.training.pos"], [213, "module-sparknlp.training.pub_tator"], [214, "module-sparknlp.training.spacy_to_annotation"], [215, "module-sparknlp.training.tfgraphs"], [216, "module-sparknlp.upload_to_hub"], [217, "module-sparknlp.util"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "loadsavedmodel() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "pretrained() (hubertforctc static method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[5, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[5, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "loadsavedmodel() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "pretrained() (wav2vec2forctc static method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[7, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[7, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "getismultilingual() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "loadsavedmodel() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "pretrained() (whisperforctc static method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[8, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[8, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[9, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "sparknlp.annotator.chunk2_doc": [[9, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[10, "sparknlp.annotator.chunker.Chunker"]], "setregexparsers() (chunker method)": [[10, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[10, "module-sparknlp.annotator.chunker"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "loadsavedmodel() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "pretrained() (albertforquestionanswering static method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[11, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[11, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "getclasses() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "pretrained() (albertforsequenceclassification static method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[12, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[12, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "getclasses() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "loadsavedmodel() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "pretrained() (albertfortokenclassification static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "albertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"]], "getclasses() (albertforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"]], "loadsavedmodel() (albertforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"]], "pretrained() (albertforzeroshotclassification static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"]], "setcoalescesentences() (albertforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforzeroshotclassification method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "getclasses() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "pretrained() (bartforzeroshotclassification static method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[15, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[15, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[16, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "loadsavedmodel() (bertforquestionanswering static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "pretrained() (bertforquestionanswering static method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[16, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[16, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[17, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "getclasses() (bertforsequenceclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "pretrained() (bertforsequenceclassification static method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[17, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[17, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[18, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "getclasses() (bertfortokenclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "loadsavedmodel() (bertfortokenclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "pretrained() (bertfortokenclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[18, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[18, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[19, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "getclasses() (bertforzeroshotclassification method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "pretrained() (bertforzeroshotclassification static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "pretrained() (camembertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[20, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[20, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "getclasses() (camembertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "pretrained() (camembertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[21, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "getclasses() (camembertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "pretrained() (camembertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[22, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "camembertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"]], "getclasses() (camembertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (camembertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"]], "pretrained() (camembertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (camembertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[23, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[24, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[24, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "pretrained() (classifierdlmodel static method)": [[24, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[24, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[24, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[24, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (debertaforquestionanswering static method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[25, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[25, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "getclasses() (debertaforsequenceclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "pretrained() (debertaforsequenceclassification static method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[26, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[26, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "getclasses() (debertafortokenclassification method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "loadsavedmodel() (debertafortokenclassification static method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "pretrained() (debertafortokenclassification static method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[27, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[27, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "getclasses() (debertaforzeroshotclassification method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (debertaforzeroshotclassification static method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[28, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[28, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "pretrained() (distilbertforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[29, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "getclasses() (distilbertforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "pretrained() (distilbertforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "getclasses() (distilbertfortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "pretrained() (distilbertfortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "getclasses() (distilbertforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "pretrained() (distilbertforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[32, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl": [[33, "module-sparknlp.annotator.classifier_dl"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "pretrained() (longformerforquestionanswering static method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[34, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[34, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "getclasses() (longformerforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "pretrained() (longformerforsequenceclassification static method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[35, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[35, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "getclasses() (longformerfortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "pretrained() (longformerfortokenclassification static method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[36, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[36, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[37, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[37, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "pretrained() (mpnetforquestionanswering static method)": [[37, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[37, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[38, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "getclasses() (mpnetforsequenceclassification method)": [[38, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[38, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "pretrained() (mpnetforsequenceclassification static method)": [[38, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[38, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[38, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "mpnetfortokenclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_token_classification)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"]], "getclasses() (mpnetfortokenclassification method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"]], "loadsavedmodel() (mpnetfortokenclassification static method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"]], "pretrained() (mpnetfortokenclassification static method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"]], "setconfigprotobytes() (mpnetfortokenclassification method)": [[39, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[39, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[40, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[40, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "pretrained() (multiclassifierdlmodel static method)": [[40, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[40, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setthreshold() (multiclassifierdlapproach method)": [[40, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[40, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[40, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[40, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (robertaforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[41, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "getclasses() (robertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (robertaforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "getclasses() (robertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (robertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "pretrained() (robertafortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "getclasses() (robertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (robertaforzeroshotclassification static method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[44, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[44, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[45, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[45, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "pretrained() (sentimentdlmodel static method)": [[45, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[45, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[45, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[45, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[45, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[45, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[45, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[45, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[46, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "pretrained() (tapasforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[46, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[47, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[47, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[48, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[48, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "getclasses() (xlmrobertafortokenclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "pretrained() (xlmrobertafortokenclassification static method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[49, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[49, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[50, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[50, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[51, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "getclasses() (xlnetforsequenceclassification method)": [[51, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[51, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "pretrained() (xlnetforsequenceclassification static method)": [[51, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[51, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[51, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[51, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "getclasses() (xlnetfortokenclassification method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "pretrained() (xlnetfortokenclassification static method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[52, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[52, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.coref": [[53, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[54, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[54, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "pretrained() (spanbertcorefmodel static method)": [[54, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[54, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[54, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[54, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[54, "module-sparknlp.annotator.coref.spanbert_coref"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[55, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[55, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[55, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "pretrained() (clipforzeroshotclassification static method)": [[55, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[55, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[56, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "getclasses() (convnextforimageclassification method)": [[56, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "loadsavedmodel() (convnextforimageclassification static method)": [[56, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "pretrained() (convnextforimageclassification static method)": [[56, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "setconfigprotobytes() (convnextforimageclassification method)": [[56, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[56, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[56, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[56, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[56, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv": [[57, "module-sparknlp.annotator.cv"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[58, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "getclasses() (swinforimageclassification method)": [[58, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "loadsavedmodel() (swinforimageclassification static method)": [[58, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "pretrained() (swinforimageclassification static method)": [[58, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[58, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[58, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[59, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[59, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[59, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[59, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[59, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[60, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "getclasses() (vitforimageclassification method)": [[60, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "loadsavedmodel() (vitforimageclassification static method)": [[60, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "pretrained() (vitforimageclassification static method)": [[60, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[60, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[60, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[61, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "setentityname() (date2chunk method)": [[61, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[61, "module-sparknlp.annotator.date2_chunk"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[62, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[62, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "pretrained() (dependencyparsermodel static method)": [[62, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[62, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[62, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[62, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[62, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency": [[63, "module-sparknlp.annotator.dependency"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[64, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[64, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "pretrained() (typeddependencyparsermodel static method)": [[64, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[64, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[64, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[64, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[64, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[65, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[65, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[65, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[65, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[65, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[65, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[65, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[65, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[65, "module-sparknlp.annotator.document_character_text_splitter"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[66, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "setaction() (documentnormalizer method)": [[66, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[66, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[66, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[66, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[66, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[66, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[66, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[67, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "setexplodesplits() (documenttokensplitter method)": [[67, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[67, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[67, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[67, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[67, "module-sparknlp.annotator.document_token_splitter"]], "documenttokensplittertestspec (class in sparknlp.annotator.document_token_splitter_test)": [[68, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec"]], "setup() (documenttokensplittertestspec method)": [[68, "sparknlp.annotator.document_token_splitter_test.DocumentTokenSplitterTestSpec.setUp"]], "sparknlp.annotator.document_token_splitter_test": [[68, "module-sparknlp.annotator.document_token_splitter_test"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[69, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "loadsavedmodel() (albertembeddings static method)": [[69, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "pretrained() (albertembeddings static method)": [[69, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[69, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[69, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[70, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "loadsavedmodel() (bertembeddings static method)": [[70, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "pretrained() (bertembeddings static method)": [[70, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[70, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[70, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[71, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[71, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "pretrained() (bertsentenceembeddings static method)": [[71, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[71, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[71, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[71, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[72, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "loadsavedmodel() (bgeembeddings static method)": [[72, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "pretrained() (bgeembeddings static method)": [[72, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[72, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[72, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[73, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "loadsavedmodel() (camembertembeddings static method)": [[73, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "pretrained() (camembertembeddings static method)": [[73, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[73, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[73, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[74, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "setpoolingstrategy() (chunkembeddings method)": [[74, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[74, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[74, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[75, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "loadsavedmodel() (debertaembeddings static method)": [[75, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "pretrained() (debertaembeddings static method)": [[75, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[75, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[75, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[76, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "loadsavedmodel() (distilbertembeddings static method)": [[76, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "pretrained() (distilbertembeddings static method)": [[76, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[76, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[76, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "pretrained() (doc2vecmodel static method)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "setmaxiter() (doc2vecapproach method)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[77, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[77, "module-sparknlp.annotator.embeddings.doc2vec"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[78, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "loadsavedmodel() (e5embeddings static method)": [[78, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "pretrained() (e5embeddings static method)": [[78, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[78, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[78, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[79, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "loadsavedmodel() (elmoembeddings static method)": [[79, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "pretrained() (elmoembeddings static method)": [[79, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[79, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[79, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[79, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[79, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings": [[80, "module-sparknlp.annotator.embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[81, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "loadsavedmodel() (instructorembeddings static method)": [[81, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "pretrained() (instructorembeddings static method)": [[81, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[81, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[81, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[81, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[82, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "loadsavedmodel() (longformerembeddings static method)": [[82, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "pretrained() (longformerembeddings static method)": [[82, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[82, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[82, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[83, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "loadsavedmodel() (mpnetembeddings static method)": [[83, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "pretrained() (mpnetembeddings static method)": [[83, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[83, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[83, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "mxbaiembeddings (class in sparknlp.annotator.embeddings.mxbai_embeddings)": [[84, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"]], "loadsavedmodel() (mxbaiembeddings static method)": [[84, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"]], "pretrained() (mxbaiembeddings static method)": [[84, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"]], "setpoolingstrategy() (mxbaiembeddings method)": [[84, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[84, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "nomicembeddings (class in sparknlp.annotator.embeddings.nomic_embeddings)": [[85, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"]], "loadsavedmodel() (nomicembeddings static method)": [[85, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"]], "pretrained() (nomicembeddings static method)": [[85, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"]], "setconfigprotobytes() (nomicembeddings method)": [[85, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[85, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[86, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "loadsavedmodel() (robertaembeddings static method)": [[86, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "pretrained() (robertaembeddings static method)": [[86, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[86, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[86, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[87, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[87, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (robertasentenceembeddings static method)": [[87, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[87, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[87, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[88, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "setpoolingstrategy() (sentenceembeddings method)": [[88, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[88, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "snowflakeembeddings (class in sparknlp.annotator.embeddings.snowflake_embeddings)": [[89, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"]], "loadsavedmodel() (snowflakeembeddings static method)": [[89, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"]], "pretrained() (snowflakeembeddings static method)": [[89, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"]], "setpoolingstrategy() (snowflakeembeddings method)": [[89, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[89, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "uaeembeddings (class in sparknlp.annotator.embeddings.uae_embeddings)": [[90, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"]], "loadsavedmodel() (uaeembeddings static method)": [[90, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"]], "pretrained() (uaeembeddings static method)": [[90, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"]], "setpoolingstrategy() (uaeembeddings method)": [[90, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[90, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[91, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "loadsavedmodel() (universalsentenceencoder static method)": [[91, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "pretrained() (universalsentenceencoder static method)": [[91, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[91, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[91, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[91, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "pretrained() (word2vecmodel static method)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "setmaxiter() (word2vecapproach method)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[92, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[92, "module-sparknlp.annotator.embeddings.word2vec"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[93, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[93, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "loadstorage() (wordembeddingsmodel static method)": [[93, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "overallcoverage() (wordembeddingsmodel static method)": [[93, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[93, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "setreadcachesize() (wordembeddings method)": [[93, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[93, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[93, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[93, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[93, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[94, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[94, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertaembeddings static method)": [[94, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[94, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[94, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[95, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[95, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[95, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[95, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[95, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[96, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "loadsavedmodel() (xlnetembeddings static method)": [[96, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "pretrained() (xlnetembeddings static method)": [[96, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[96, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[96, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[97, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[97, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "setalphabetresource() (entityrulerapproach method)": [[97, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[97, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[97, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[97, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[97, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.er": [[98, "module-sparknlp.annotator.er"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "setdelimiter() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[99, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[99, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator": [[100, "module-sparknlp.annotator"]], "sparknlp.annotator.keyword_extraction": [[101, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[102, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[102, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[102, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "setmaxngrams() (yakekeywordextraction method)": [[102, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[102, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[102, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[102, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[102, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[102, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[102, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl": [[103, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[104, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "pretrained() (languagedetectordl static method)": [[104, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[104, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[104, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[104, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[104, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[104, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[105, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[105, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "pretrained() (lemmatizermodel static method)": [[105, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[105, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[105, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[105, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[105, "module-sparknlp.annotator.lemmatizer"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[106, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[106, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "loadstorage() (bigtextmatchermodel static method)": [[106, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "pretrained() (bigtextmatchermodel static method)": [[106, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "setcasesensitive() (bigtextmatcher method)": [[106, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[106, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[106, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[106, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[106, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[106, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[106, "module-sparknlp.annotator.matcher.big_text_matcher"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[107, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[107, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "setaggressivematching() (datematcherutils method)": [[107, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"]], "setanchordateday() (datematcherutils method)": [[107, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[107, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[107, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[107, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[107, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[107, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[107, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[107, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "sparknlp.annotator.matcher.date_matcher": [[107, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher": [[108, "module-sparknlp.annotator.matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[109, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher": [[109, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[110, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[110, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "setdelimiter() (regexmatcher method)": [[110, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[110, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[110, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[110, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[110, "module-sparknlp.annotator.matcher.regex_matcher"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[111, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[111, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "pretrained() (textmatchermodel static method)": [[111, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "setbuildfromtokens() (textmatcher method)": [[111, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[111, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[111, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[111, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[111, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[111, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[111, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[111, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[111, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[112, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "setdelimiter() (ngramgenerator method)": [[112, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[112, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[112, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[112, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[113, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[114, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "getlabelcolumn() (nerapproach method)": [[114, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "setentities() (nerapproach method)": [[114, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[114, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[114, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[114, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[114, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[114, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[115, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "setnerhasnoschema() (nerconverter method)": [[115, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[115, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[115, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[115, "module-sparknlp.annotator.ner.ner_converter"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[116, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[116, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "pretrained() (nercrfmodel static method)": [[116, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[116, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[116, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[116, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[116, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[116, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[116, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[116, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[116, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[116, "module-sparknlp.annotator.ner.ner_crf"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "pretrained() (nerdlmodel static method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[117, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[117, "module-sparknlp.annotator.ner.ner_dl"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[118, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "setnerwords() (neroverwriter method)": [[118, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[118, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[118, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[118, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[119, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[119, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "load() (zeroshotnermodel static method)": [[119, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "pretrained() (zeroshotnermodel static method)": [[119, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[119, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[119, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[119, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[120, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[120, "sparknlp.annotator.normalizer.NormalizerModel"]], "setcleanuppatterns() (normalizer method)": [[120, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[120, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[120, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[120, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[120, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "sparknlp.annotator.normalizer": [[120, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[121, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "setbestof() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[122, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[122, "module-sparknlp.annotator.openai.openai_completion"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[123, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "setmodel() (openaiembeddings method)": [[123, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[123, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[123, "module-sparknlp.annotator.openai.openai_embeddings"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[124, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "setbatchsize() (classifierencoder method)": [[124, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[124, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[124, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[124, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[124, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[124, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[124, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[125, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "setenableoutputlogs() (evaluationdlparams method)": [[125, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[125, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[125, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[125, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[125, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[125, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[125, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.param": [[126, "module-sparknlp.annotator.param"]], "sparknlp.annotator.pos": [[127, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[128, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[128, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[128, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "pretrained() (perceptronmodel static method)": [[128, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[128, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[128, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[128, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[129, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[130, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[130, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "setcustombounds() (sentencedetector method)": [[130, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[130, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[130, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[130, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[130, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[130, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[130, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[130, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[130, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[130, "module-sparknlp.annotator.sentence.sentence_detector"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "pretrained() (sentencedetectordlmodel static method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[131, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[131, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment": [[132, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[133, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[133, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "setdictionary() (sentimentdetector method)": [[133, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[133, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[134, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[134, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "pretrained() (viveknsentimentmodel static method)": [[134, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "setprunecorpus() (viveknsentimentapproach method)": [[134, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[134, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[134, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "autoggufmodel (class in sparknlp.annotator.seq2seq.auto_gguf_model)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"]], "getmetadata() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.getMetadata"]], "loadsavedmodel() (autoggufmodel static method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"]], "pretrained() (autoggufmodel static method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"]], "setcacheprompt() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setCachePrompt"]], "setchattemplate() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setChatTemplate"]], "setdefragmentationthreshold() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDefragmentationThreshold"]], "setdisabletokenids() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDisableTokenIds"]], "setdynamictemperatureexponent() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setDynamicTemperatureRange"]], "setembedding() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setEmbedding"]], "setflashattention() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setFlashAttention"]], "setfrequencypenalty() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setFrequencyPenalty"]], "setgpusplitmode() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGpuSplitMode"]], "setgrammar() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGrammar"]], "setgrpattnn() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGrpAttnN"]], "setgrpattnw() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setGrpAttnW"]], "setignoreeos() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setIgnoreEos"]], "setinputprefix() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setInputPrefix"]], "setinputprefixbos() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setInputPrefixBos"]], "setinputsuffix() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setInputSuffix"]], "setlookupcachedynamicfilepath() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setLookupCacheDynamicFilePath"]], "setlookupcachestaticfilepath() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setLookupCacheStaticFilePath"]], "setloraadapters() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setLoraAdapters"]], "setmaingpu() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMainGpu"]], "setminkeep() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMinKeep"]], "setminp() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMinP"]], "setmirostat() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMiroStat"]], "setmirostateta() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMiroStatEta"]], "setmirostattau() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setMiroStatTau"]], "setmodelalias() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setModelAlias"]], "setmodeldraft() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setModelDraft"]], "setnbatch() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNBatch"]], "setnchunks() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNChunks"]], "setnctx() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNCtx"]], "setndraft() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNDraft"]], "setngpulayers() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNGpuLayers"]], "setngpulayersdraft() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNGpuLayersDraft"]], "setnkeep() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNKeep"]], "setnpredict() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNPredict"]], "setnprobs() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNProbs"]], "setnsequences() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNSequences"]], "setnthreads() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreads"]], "setnthreadsbatch() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreadsBatch"]], "setnthreadsbatchdraft() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreadsBatchDraft"]], "setnthreadsdraft() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNThreadsDraft"]], "setnubatch() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNUbatch"]], "setnokvoffload() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNoKvOffload"]], "setnumastrategy() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setNumaStrategy"]], "setpsplit() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPSplit"]], "setpenalizenl() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPenalizeNl"]], "setpenaltyprompt() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPenaltyPrompt"]], "setpoolingtype() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPoolingType"]], "setpresencepenalty() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setPresencePenalty"]], "setrepeatlastn() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRepeatLastN"]], "setrepeatpenalty() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRepeatPenalty"]], "setropefreqbase() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRopeFreqBase"]], "setropefreqscale() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRopeFreqScale"]], "setropescalingtype() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setRopeScalingType"]], "setsamplers() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setSamplers"]], "setseed() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setSeed"]], "setstopstrings() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setStopStrings"]], "setsystemprompt() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setSystemPrompt"]], "settemperature() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTemperature"]], "settensorsplit() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTensorSplit"]], "settfsz() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTfsZ"]], "settokenbias() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTokenBias"]], "settokenidbias() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTokenIdBias"]], "settopk() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTopK"]], "settopp() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTopP"]], "settypicalp() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setTypicalP"]], "setusechattemplate() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setUseChatTemplate"]], "setusemlock() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setUseMlock"]], "setusemmap() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setUseMmap"]], "setyarnattnfactor() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnAttnFactor"]], "setyarnbetafast() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnBetaFast"]], "setyarnbetaslow() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnBetaSlow"]], "setyarnextfactor() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnExtFactor"]], "setyarnorigctx() (autoggufmodel method)": [[135, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.setYarnOrigCtx"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[135, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "loadsavedmodel() (barttransformer static method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "pretrained() (barttransformer static method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "setbeamsize() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[136, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[136, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "cpmtransformer (class in sparknlp.annotator.seq2seq.cpm_transformer)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"]], "loadsavedmodel() (cpmtransformer static method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"]], "pretrained() (cpmtransformer static method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"]], "setconfigprotobytes() (cpmtransformer method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"]], "setdosample() (cpmtransformer method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"]], "setignoretokenids() (cpmtransformer method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (cpmtransformer method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"]], "setminoutputlength() (cpmtransformer method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (cpmtransformer method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (cpmtransformer method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"]], "settemperature() (cpmtransformer method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"]], "settopk() (cpmtransformer method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"]], "settopp() (cpmtransformer method)": [[137, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[137, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "loadsavedmodel() (gpt2transformer static method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "pretrained() (gpt2transformer static method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "setconfigprotobytes() (gpt2transformer method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[138, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[138, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq": [[139, "module-sparknlp.annotator.seq2seq"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "loadsavedmodel() (llama2transformer static method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "pretrained() (llama2transformer static method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "setconfigprotobytes() (llama2transformer method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[140, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[140, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "llama3transformer (class in sparknlp.annotator.seq2seq.llama3_transformer)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"]], "loadsavedmodel() (llama3transformer static method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"]], "pretrained() (llama3transformer static method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"]], "setbeamsize() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"]], "setconfigprotobytes() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"]], "setdosample() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"]], "setignoretokenids() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"]], "setminoutputlength() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"]], "setstoptokenids() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"]], "settemperature() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"]], "settopk() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"]], "settopp() (llama3transformer method)": [[141, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[141, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "loadsavedmodel() (m2m100transformer static method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "pretrained() (m2m100transformer static method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "setbeamsize() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[142, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[142, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "loadsavedmodel() (mariantransformer static method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "pretrained() (mariantransformer static method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "setconfigprotobytes() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[143, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[143, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "mistraltransformer (class in sparknlp.annotator.seq2seq.mistral_transformer)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"]], "loadsavedmodel() (mistraltransformer static method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"]], "pretrained() (mistraltransformer static method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"]], "setconfigprotobytes() (mistraltransformer method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"]], "setdosample() (mistraltransformer method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"]], "setignoretokenids() (mistraltransformer method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (mistraltransformer method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"]], "setminoutputlength() (mistraltransformer method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"]], "setnorepeatngramsize() (mistraltransformer method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mistraltransformer method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"]], "settemperature() (mistraltransformer method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"]], "settopk() (mistraltransformer method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"]], "settopp() (mistraltransformer method)": [[144, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[144, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "nllbtransformer (class in sparknlp.annotator.seq2seq.nllb_transformer)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"]], "loadsavedmodel() (nllbtransformer static method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"]], "pretrained() (nllbtransformer static method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"]], "setbeamsize() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"]], "setconfigprotobytes() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"]], "setdosample() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"]], "setignoretokenids() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"]], "setminoutputlength() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"]], "setnorepeatngramsize() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"]], "setsrclang() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"]], "settemperature() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"]], "settgtlang() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"]], "settopk() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"]], "settopp() (nllbtransformer method)": [[145, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[145, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "phi2transformer (class in sparknlp.annotator.seq2seq.phi2_transformer)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"]], "loadsavedmodel() (phi2transformer static method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"]], "pretrained() (phi2transformer static method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"]], "setconfigprotobytes() (phi2transformer method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"]], "setdosample() (phi2transformer method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"]], "setignoretokenids() (phi2transformer method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi2transformer method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"]], "setminoutputlength() (phi2transformer method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi2transformer method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi2transformer method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"]], "settemperature() (phi2transformer method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"]], "settopk() (phi2transformer method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"]], "settopp() (phi2transformer method)": [[146, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[146, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "phi3transformer (class in sparknlp.annotator.seq2seq.phi3_transformer)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"]], "loadsavedmodel() (phi3transformer static method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"]], "pretrained() (phi3transformer static method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"]], "setconfigprotobytes() (phi3transformer method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"]], "setdosample() (phi3transformer method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"]], "setignoretokenids() (phi3transformer method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3transformer method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"]], "setminoutputlength() (phi3transformer method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi3transformer method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3transformer method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"]], "settemperature() (phi3transformer method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"]], "settopk() (phi3transformer method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"]], "settopp() (phi3transformer method)": [[147, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[147, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "qwentransformer (class in sparknlp.annotator.seq2seq.qwen_transformer)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"]], "loadsavedmodel() (qwentransformer static method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"]], "pretrained() (qwentransformer static method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"]], "setconfigprotobytes() (qwentransformer method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"]], "setdosample() (qwentransformer method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"]], "setignoretokenids() (qwentransformer method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwentransformer method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"]], "setminoutputlength() (qwentransformer method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwentransformer method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwentransformer method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"]], "settemperature() (qwentransformer method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"]], "settopk() (qwentransformer method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"]], "settopp() (qwentransformer method)": [[148, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[148, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "starcodertransformer (class in sparknlp.annotator.seq2seq.starcoder_transformer)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"]], "loadsavedmodel() (starcodertransformer static method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"]], "pretrained() (starcodertransformer static method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"]], "setconfigprotobytes() (starcodertransformer method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"]], "setdosample() (starcodertransformer method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"]], "setignoretokenids() (starcodertransformer method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (starcodertransformer method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"]], "setminoutputlength() (starcodertransformer method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"]], "setnorepeatngramsize() (starcodertransformer method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (starcodertransformer method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"]], "settemperature() (starcodertransformer method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"]], "settopk() (starcodertransformer method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"]], "settopp() (starcodertransformer method)": [[149, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[149, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "loadsavedmodel() (t5transformer static method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "pretrained() (t5transformer static method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "setconfigprotobytes() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[150, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[150, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "asretriever() (documentsimilarityrankerapproach method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "setaggregationmethod() (documentsimilarityrankerapproach method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[151, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[151, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.similarity": [[152, "module-sparknlp.annotator.similarity"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "getwordclasses() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "pretrained() (contextspellcheckermodel static method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[153, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "updateregexclass() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[153, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "sparknlp.annotator.spell_check": [[154, "module-sparknlp.annotator.spell_check"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[155, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[155, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "pretrained() (norvigsweetingmodel static method)": [[155, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "setcasesensitive() (norvigsweetingapproach method)": [[155, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[155, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[155, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[155, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[155, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[155, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[156, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[156, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "pretrained() (symmetricdeletemodel static method)": [[156, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[156, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[156, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[156, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[156, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[156, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[157, "sparknlp.annotator.stemmer.Stemmer"]], "sparknlp.annotator.stemmer": [[157, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[158, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "loaddefaultstopwords() (stopwordscleaner method)": [[158, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "pretrained() (stopwordscleaner static method)": [[158, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[158, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[158, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[158, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[158, "module-sparknlp.annotator.stop_words_cleaner"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[159, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[159, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[160, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[160, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer": [[160, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token": [[161, "module-sparknlp.annotator.token"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[162, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[162, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "setinfixes() (recursivetokenizer method)": [[162, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[162, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[162, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[162, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[162, "module-sparknlp.annotator.token.recursive_tokenizer"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[163, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "setmaxlength() (regextokenizer method)": [[163, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[163, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[163, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[163, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[163, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[163, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[163, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[163, "module-sparknlp.annotator.token.regex_tokenizer"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[164, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[164, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "getcasesensitiveexceptions() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "pretrained() (tokenizermodel static method)": [[164, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "setcasesensitiveexceptions() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[164, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[164, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[164, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[164, "module-sparknlp.annotator.token.tokenizer"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[165, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "sparknlp.annotator.token2_chunk": [[165, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[166, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "pretrained() (wordsegmentermodel static method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[167, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[167, "module-sparknlp.annotator.ws.word_segmenter"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[168, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[168, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "setinputcol() (audioassembler method)": [[168, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[168, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "sparknlp.base.audio_assembler": [[168, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[169, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "setchunkcol() (doc2chunk method)": [[169, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[169, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[169, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[169, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setstartcol() (doc2chunk method)": [[169, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[169, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[169, "module-sparknlp.base.doc2_chunk"]], "documentassembler (class in sparknlp.base.document_assembler)": [[170, "sparknlp.base.document_assembler.DocumentAssembler"]], "getoutputcol() (documentassembler method)": [[170, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "setcleanupmode() (documentassembler method)": [[170, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[170, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[170, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[170, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[170, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "sparknlp.base.document_assembler": [[170, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[171, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "getinputcols() (embeddingsfinisher method)": [[171, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[171, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[171, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[171, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[171, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[171, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "sparknlp.base.embeddings_finisher": [[171, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[172, "sparknlp.base.finisher.Finisher"]], "getinputcols() (finisher method)": [[172, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[172, "sparknlp.base.finisher.Finisher.getOutputCols"]], "setannotationsplitsymbol() (finisher method)": [[172, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[172, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[172, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[172, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[172, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[172, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparseembeddingsvectors() (finisher method)": [[172, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[172, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[172, "module-sparknlp.base.finisher"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[173, "sparknlp.base.graph_finisher.GraphFinisher"]], "setcleanannotations() (graphfinisher method)": [[173, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[173, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[173, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[173, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "sparknlp.base.graph_finisher": [[173, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[174, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[174, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[175, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[175, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[176, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[176, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "setinputcol() (imageassembler method)": [[176, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[176, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "sparknlp.base.image_assembler": [[176, "module-sparknlp.base.image_assembler"]], "sparknlp.base": [[177, "module-sparknlp.base"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[178, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[178, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[178, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[178, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[178, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[178, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[178, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[178, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[179, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "getoutputcols() (multidocumentassembler method)": [[179, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "setcleanupmode() (multidocumentassembler method)": [[179, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[179, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[179, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[179, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[179, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "sparknlp.base.multi_document_assembler": [[179, "module-sparknlp.base.multi_document_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[180, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[180, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[180, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[181, "sparknlp.base.table_assembler.TableAssembler"]], "setcsvdelimiter() (tableassembler method)": [[181, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[181, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[181, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[181, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[182, "sparknlp.base.token_assembler.TokenAssembler"]], "setpreserveposition() (tokenassembler method)": [[182, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[182, "module-sparknlp.base.token_assembler"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[183, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[183, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[184, "sparknlp.common.annotator_model.AnnotatorModel"]], "sparknlp.common.annotator_model": [[184, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[185, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[185, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[185, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[185, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "setinputcols() (annotatorproperties method)": [[185, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[185, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[185, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[185, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type": [[186, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result": [[187, "module-sparknlp.common.coverage_result"]], "sparknlp.common": [[188, "module-sparknlp.common"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[189, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[189, "module-sparknlp.common.match_strategy"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[190, "sparknlp.common.properties.HasEmbeddingsProperties"]], "getdimension() (hasembeddingsproperties method)": [[190, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "setbeamsize() (in module sparknlp.common.properties)": [[190, "sparknlp.common.properties.setBeamSize"]], "setdimension() (hasembeddingsproperties method)": [[190, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdosample() (in module sparknlp.common.properties)": [[190, "sparknlp.common.properties.setDoSample"]], "setmaxoutputlength() (in module sparknlp.common.properties)": [[190, "sparknlp.common.properties.setMaxOutputLength"]], "setminoutputlength() (in module sparknlp.common.properties)": [[190, "sparknlp.common.properties.setMinOutputLength"]], "setnreturnsequences() (in module sparknlp.common.properties)": [[190, "sparknlp.common.properties.setNReturnSequences"]], "setnorepeatngramsize() (in module sparknlp.common.properties)": [[190, "sparknlp.common.properties.setNoRepeatNgramSize"]], "setrepetitionpenalty() (in module sparknlp.common.properties)": [[190, "sparknlp.common.properties.setRepetitionPenalty"]], "settask() (in module sparknlp.common.properties)": [[190, "sparknlp.common.properties.setTask"]], "settemperature() (in module sparknlp.common.properties)": [[190, "sparknlp.common.properties.setTemperature"]], "settopk() (in module sparknlp.common.properties)": [[190, "sparknlp.common.properties.setTopK"]], "settopp() (in module sparknlp.common.properties)": [[190, "sparknlp.common.properties.setTopP"]], "sparknlp.common.properties": [[190, "module-sparknlp.common.properties"]], "readas (class in sparknlp.common.read_as)": [[191, "sparknlp.common.read_as.ReadAs"]], "sparknlp.common.read_as": [[191, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[192, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[192, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage": [[193, "module-sparknlp.common.storage"]], "externalresource() (in module sparknlp.common.utils)": [[194, "sparknlp.common.utils.ExternalResource"]], "sparknlp.common.utils": [[194, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[195, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[195, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[195, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[195, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[195, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[195, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[195, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[195, "module-sparknlp.functions"]], "sparknlp": [[196, "module-sparknlp"]], "start() (in module sparknlp)": [[196, "sparknlp.start"]], "version() (in module sparknlp)": [[196, "sparknlp.version"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[197, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[197, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[197, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[197, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[198, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer": [[198, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[199, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "new_java_array() (extendedjavawrapper method)": [[199, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "sparknlp.internal.extended_java_wrapper": [[199, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal": [[200, "module-sparknlp.internal"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[201, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[201, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "setparamvalue() (paramsgetterssetters method)": [[201, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[201, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[202, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[202, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[202, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[202, "module-sparknlp.internal.recursive"]], "cometlogger (class in sparknlp.logging.comet)": [[203, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[203, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[203, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[203, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[203, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[203, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[203, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[203, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[203, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[203, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[203, "module-sparknlp.logging.comet"]], "sparknlp.logging": [[204, "module-sparknlp.logging"]], "sparknlp.pretrained": [[205, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[206, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[206, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "fullannotate() (pretrainedpipeline method)": [[206, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[206, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[206, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[206, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[207, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[207, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[207, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[207, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[207, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[207, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[207, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[207, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[207, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[207, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils": [[208, "module-sparknlp.pretrained.utils"]], "conll (class in sparknlp.training.conll)": [[209, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[209, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[209, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[210, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[210, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[210, "module-sparknlp.training.conllu"]], "sparknlp.training": [[211, "module-sparknlp.training"]], "pos (class in sparknlp.training.pos)": [[212, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[212, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[212, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[213, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[213, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[213, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[214, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation": [[214, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs": [[215, "module-sparknlp.training.tfgraphs"]], "sparknlp.upload_to_hub": [[216, "module-sparknlp.upload_to_hub"]], "sparknlp.util": [[217, "module-sparknlp.util"]]}})