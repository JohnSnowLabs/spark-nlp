Search.setIndex({"docnames": ["_api/modules", "_api/sparknlp", "_api/sparknlp.annotation", "_api/sparknlp.annotation_audio", "_api/sparknlp.annotation_image", "_api/sparknlp.annotator", "_api/sparknlp.annotator.audio", "_api/sparknlp.annotator.audio.hubert_for_ctc", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc", "_api/sparknlp.annotator.audio.whisper_for_ctc", "_api/sparknlp.annotator.chunk2_doc", "_api/sparknlp.annotator.chunker", "_api/sparknlp.annotator.classifier_dl", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.classifier_dl", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.sentiment_dl", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification", "_api/sparknlp.annotator.cleaners", "_api/sparknlp.annotator.cleaners.cleaner", "_api/sparknlp.annotator.cleaners.extractor", "_api/sparknlp.annotator.coref", "_api/sparknlp.annotator.coref.spanbert_coref", "_api/sparknlp.annotator.cv", "_api/sparknlp.annotator.cv.blip_for_question_answering", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification", "_api/sparknlp.annotator.cv.convnext_for_image_classification", "_api/sparknlp.annotator.cv.janus_for_multimodal", "_api/sparknlp.annotator.cv.llava_for_multimodal", "_api/sparknlp.annotator.cv.mllama_for_multimodal", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal", "_api/sparknlp.annotator.cv.qwen2vl_transformer", "_api/sparknlp.annotator.cv.swin_for_image_classification", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning", "_api/sparknlp.annotator.cv.vit_for_image_classification", "_api/sparknlp.annotator.date2_chunk", "_api/sparknlp.annotator.dependency", "_api/sparknlp.annotator.dependency.dependency_parser", "_api/sparknlp.annotator.dependency.typed_dependency_parser", "_api/sparknlp.annotator.document_character_text_splitter", "_api/sparknlp.annotator.document_normalizer", "_api/sparknlp.annotator.document_token_splitter", "_api/sparknlp.annotator.document_token_splitter_test", "_api/sparknlp.annotator.embeddings", "_api/sparknlp.annotator.embeddings.albert_embeddings", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings", "_api/sparknlp.annotator.embeddings.bert_embeddings", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings", "_api/sparknlp.annotator.embeddings.bge_embeddings", "_api/sparknlp.annotator.embeddings.camembert_embeddings", "_api/sparknlp.annotator.embeddings.chunk_embeddings", "_api/sparknlp.annotator.embeddings.deberta_embeddings", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings", "_api/sparknlp.annotator.embeddings.doc2vec", "_api/sparknlp.annotator.embeddings.e5_embeddings", "_api/sparknlp.annotator.embeddings.elmo_embeddings", "_api/sparknlp.annotator.embeddings.instructor_embeddings", "_api/sparknlp.annotator.embeddings.longformer_embeddings", "_api/sparknlp.annotator.embeddings.mpnet_embeddings", "_api/sparknlp.annotator.embeddings.mxbai_embeddings", "_api/sparknlp.annotator.embeddings.nomic_embeddings", "_api/sparknlp.annotator.embeddings.roberta_embeddings", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.sentence_embeddings", "_api/sparknlp.annotator.embeddings.snowflake_embeddings", "_api/sparknlp.annotator.embeddings.uae_embeddings", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder", "_api/sparknlp.annotator.embeddings.word2vec", "_api/sparknlp.annotator.embeddings.word_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings", "_api/sparknlp.annotator.embeddings.xlnet_embeddings", "_api/sparknlp.annotator.er", "_api/sparknlp.annotator.er.entity_ruler", "_api/sparknlp.annotator.graph_extraction", "_api/sparknlp.annotator.keyword_extraction", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction", "_api/sparknlp.annotator.ld_dl", "_api/sparknlp.annotator.ld_dl.language_detector_dl", "_api/sparknlp.annotator.lemmatizer", "_api/sparknlp.annotator.matcher", "_api/sparknlp.annotator.matcher.big_text_matcher", "_api/sparknlp.annotator.matcher.date_matcher", "_api/sparknlp.annotator.matcher.multi_date_matcher", "_api/sparknlp.annotator.matcher.regex_matcher", "_api/sparknlp.annotator.matcher.text_matcher", "_api/sparknlp.annotator.n_gram_generator", "_api/sparknlp.annotator.ner", "_api/sparknlp.annotator.ner.ner_approach", "_api/sparknlp.annotator.ner.ner_converter", "_api/sparknlp.annotator.ner.ner_crf", "_api/sparknlp.annotator.ner.ner_dl", "_api/sparknlp.annotator.ner.ner_overwriter", "_api/sparknlp.annotator.ner.zero_shot_ner_model", "_api/sparknlp.annotator.normalizer", "_api/sparknlp.annotator.openai", "_api/sparknlp.annotator.openai.openai_completion", "_api/sparknlp.annotator.openai.openai_embeddings", "_api/sparknlp.annotator.param", "_api/sparknlp.annotator.param.classifier_encoder", "_api/sparknlp.annotator.param.evaluation_dl_params", "_api/sparknlp.annotator.pos", "_api/sparknlp.annotator.pos.perceptron", "_api/sparknlp.annotator.sentence", "_api/sparknlp.annotator.sentence.sentence_detector", "_api/sparknlp.annotator.sentence.sentence_detector_dl", "_api/sparknlp.annotator.sentiment", "_api/sparknlp.annotator.sentiment.sentiment_detector", "_api/sparknlp.annotator.sentiment.vivekn_sentiment", "_api/sparknlp.annotator.seq2seq", "_api/sparknlp.annotator.seq2seq.auto_gguf_model", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model", "_api/sparknlp.annotator.seq2seq.bart_transformer", "_api/sparknlp.annotator.seq2seq.cohere_transformer", "_api/sparknlp.annotator.seq2seq.cpm_transformer", "_api/sparknlp.annotator.seq2seq.gpt2_transformer", "_api/sparknlp.annotator.seq2seq.llama2_transformer", "_api/sparknlp.annotator.seq2seq.llama3_transformer", "_api/sparknlp.annotator.seq2seq.m2m100_transformer", "_api/sparknlp.annotator.seq2seq.marian_transformer", "_api/sparknlp.annotator.seq2seq.mistral_transformer", "_api/sparknlp.annotator.seq2seq.nllb_transformer", "_api/sparknlp.annotator.seq2seq.olmo_transformer", "_api/sparknlp.annotator.seq2seq.phi2_transformer", "_api/sparknlp.annotator.seq2seq.phi3_transformer", "_api/sparknlp.annotator.seq2seq.qwen_transformer", "_api/sparknlp.annotator.seq2seq.starcoder_transformer", "_api/sparknlp.annotator.seq2seq.t5_transformer", "_api/sparknlp.annotator.similarity", "_api/sparknlp.annotator.similarity.document_similarity_ranker", "_api/sparknlp.annotator.spell_check", "_api/sparknlp.annotator.spell_check.context_spell_checker", "_api/sparknlp.annotator.spell_check.norvig_sweeting", "_api/sparknlp.annotator.spell_check.symmetric_delete", "_api/sparknlp.annotator.stemmer", "_api/sparknlp.annotator.stop_words_cleaner", "_api/sparknlp.annotator.tf_ner_dl_graph_builder", "_api/sparknlp.annotator.token", "_api/sparknlp.annotator.token.chunk_tokenizer", "_api/sparknlp.annotator.token.recursive_tokenizer", "_api/sparknlp.annotator.token.regex_tokenizer", "_api/sparknlp.annotator.token.tokenizer", "_api/sparknlp.annotator.token2_chunk", "_api/sparknlp.annotator.ws", "_api/sparknlp.annotator.ws.word_segmenter", "_api/sparknlp.base", "_api/sparknlp.base.audio_assembler", "_api/sparknlp.base.doc2_chunk", "_api/sparknlp.base.document_assembler", "_api/sparknlp.base.embeddings_finisher", "_api/sparknlp.base.finisher", "_api/sparknlp.base.graph_finisher", "_api/sparknlp.base.has_recursive_fit", "_api/sparknlp.base.has_recursive_transform", "_api/sparknlp.base.image_assembler", "_api/sparknlp.base.light_pipeline", "_api/sparknlp.base.multi_document_assembler", "_api/sparknlp.base.prompt_assembler", "_api/sparknlp.base.recursive_pipeline", "_api/sparknlp.base.table_assembler", "_api/sparknlp.base.token_assembler", "_api/sparknlp.common", "_api/sparknlp.common.annotator_approach", "_api/sparknlp.common.annotator_model", "_api/sparknlp.common.annotator_properties", "_api/sparknlp.common.annotator_type", "_api/sparknlp.common.coverage_result", "_api/sparknlp.common.match_strategy", "_api/sparknlp.common.properties", "_api/sparknlp.common.read_as", "_api/sparknlp.common.recursive_annotator_approach", "_api/sparknlp.common.storage", "_api/sparknlp.common.utils", "_api/sparknlp.functions", "_api/sparknlp.internal", "_api/sparknlp.internal.annotator_java_ml", "_api/sparknlp.internal.annotator_transformer", "_api/sparknlp.internal.extended_java_wrapper", "_api/sparknlp.internal.params_getters_setters", "_api/sparknlp.internal.recursive", "_api/sparknlp.logging", "_api/sparknlp.logging.comet", "_api/sparknlp.pretrained", "_api/sparknlp.pretrained.pretrained_pipeline", "_api/sparknlp.pretrained.resource_downloader", "_api/sparknlp.pretrained.utils", "_api/sparknlp.reader", "_api/sparknlp.reader.pdf_to_text", "_api/sparknlp.reader.sparknlp_reader", "_api/sparknlp.training", "_api/sparknlp.training.conll", "_api/sparknlp.training.conllu", "_api/sparknlp.training.pos", "_api/sparknlp.training.pub_tator", "_api/sparknlp.training.spacy_to_annotation", "_api/sparknlp.training.tfgraphs", "_api/sparknlp.upload_to_hub", "_api/sparknlp.util", "getting_started/index", "index", "reference/index", "third_party/Comet", "third_party/MLflow", "third_party/index", "user_guide/annotation", "user_guide/annotators", "user_guide/custom_pipelines", "user_guide/helpers", "user_guide/index", "user_guide/light_pipelines", "user_guide/pretrained_pipelines", "user_guide/training"], "filenames": ["_api/modules.rst", "_api/sparknlp.rst", "_api/sparknlp.annotation.rst", "_api/sparknlp.annotation_audio.rst", "_api/sparknlp.annotation_image.rst", "_api/sparknlp.annotator.rst", "_api/sparknlp.annotator.audio.rst", "_api/sparknlp.annotator.audio.hubert_for_ctc.rst", "_api/sparknlp.annotator.audio.wav2vec2_for_ctc.rst", "_api/sparknlp.annotator.audio.whisper_for_ctc.rst", "_api/sparknlp.annotator.chunk2_doc.rst", "_api/sparknlp.annotator.chunker.rst", "_api/sparknlp.annotator.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.longformer_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.mpnet_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.multi_classifier_dl.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.sentiment_dl.rst", "_api/sparknlp.annotator.classifier_dl.tapas_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.rst", "_api/sparknlp.annotator.classifier_dl.xlnet_for_token_classification.rst", "_api/sparknlp.annotator.cleaners.rst", "_api/sparknlp.annotator.cleaners.cleaner.rst", "_api/sparknlp.annotator.cleaners.extractor.rst", "_api/sparknlp.annotator.coref.rst", "_api/sparknlp.annotator.coref.spanbert_coref.rst", "_api/sparknlp.annotator.cv.rst", "_api/sparknlp.annotator.cv.blip_for_question_answering.rst", "_api/sparknlp.annotator.cv.clip_for_zero_shot_classification.rst", "_api/sparknlp.annotator.cv.convnext_for_image_classification.rst", "_api/sparknlp.annotator.cv.janus_for_multimodal.rst", "_api/sparknlp.annotator.cv.llava_for_multimodal.rst", "_api/sparknlp.annotator.cv.mllama_for_multimodal.rst", "_api/sparknlp.annotator.cv.phi3_vision_for_multimodal.rst", "_api/sparknlp.annotator.cv.qwen2vl_transformer.rst", "_api/sparknlp.annotator.cv.swin_for_image_classification.rst", "_api/sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.rst", "_api/sparknlp.annotator.cv.vit_for_image_classification.rst", "_api/sparknlp.annotator.date2_chunk.rst", "_api/sparknlp.annotator.dependency.rst", "_api/sparknlp.annotator.dependency.dependency_parser.rst", "_api/sparknlp.annotator.dependency.typed_dependency_parser.rst", "_api/sparknlp.annotator.document_character_text_splitter.rst", "_api/sparknlp.annotator.document_normalizer.rst", "_api/sparknlp.annotator.document_token_splitter.rst", "_api/sparknlp.annotator.document_token_splitter_test.rst", "_api/sparknlp.annotator.embeddings.rst", "_api/sparknlp.annotator.embeddings.albert_embeddings.rst", "_api/sparknlp.annotator.embeddings.auto_gguf_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.bert_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.bge_embeddings.rst", "_api/sparknlp.annotator.embeddings.camembert_embeddings.rst", "_api/sparknlp.annotator.embeddings.chunk_embeddings.rst", "_api/sparknlp.annotator.embeddings.deberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.distil_bert_embeddings.rst", "_api/sparknlp.annotator.embeddings.doc2vec.rst", "_api/sparknlp.annotator.embeddings.e5_embeddings.rst", "_api/sparknlp.annotator.embeddings.elmo_embeddings.rst", "_api/sparknlp.annotator.embeddings.instructor_embeddings.rst", "_api/sparknlp.annotator.embeddings.longformer_embeddings.rst", "_api/sparknlp.annotator.embeddings.mpnet_embeddings.rst", "_api/sparknlp.annotator.embeddings.mxbai_embeddings.rst", "_api/sparknlp.annotator.embeddings.nomic_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.snowflake_embeddings.rst", "_api/sparknlp.annotator.embeddings.uae_embeddings.rst", "_api/sparknlp.annotator.embeddings.universal_sentence_encoder.rst", "_api/sparknlp.annotator.embeddings.word2vec.rst", "_api/sparknlp.annotator.embeddings.word_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.rst", "_api/sparknlp.annotator.embeddings.xlnet_embeddings.rst", "_api/sparknlp.annotator.er.rst", "_api/sparknlp.annotator.er.entity_ruler.rst", "_api/sparknlp.annotator.graph_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.rst", "_api/sparknlp.annotator.keyword_extraction.yake_keyword_extraction.rst", "_api/sparknlp.annotator.ld_dl.rst", "_api/sparknlp.annotator.ld_dl.language_detector_dl.rst", "_api/sparknlp.annotator.lemmatizer.rst", "_api/sparknlp.annotator.matcher.rst", "_api/sparknlp.annotator.matcher.big_text_matcher.rst", "_api/sparknlp.annotator.matcher.date_matcher.rst", "_api/sparknlp.annotator.matcher.multi_date_matcher.rst", "_api/sparknlp.annotator.matcher.regex_matcher.rst", "_api/sparknlp.annotator.matcher.text_matcher.rst", "_api/sparknlp.annotator.n_gram_generator.rst", "_api/sparknlp.annotator.ner.rst", "_api/sparknlp.annotator.ner.ner_approach.rst", "_api/sparknlp.annotator.ner.ner_converter.rst", "_api/sparknlp.annotator.ner.ner_crf.rst", "_api/sparknlp.annotator.ner.ner_dl.rst", "_api/sparknlp.annotator.ner.ner_overwriter.rst", "_api/sparknlp.annotator.ner.zero_shot_ner_model.rst", "_api/sparknlp.annotator.normalizer.rst", "_api/sparknlp.annotator.openai.rst", "_api/sparknlp.annotator.openai.openai_completion.rst", "_api/sparknlp.annotator.openai.openai_embeddings.rst", "_api/sparknlp.annotator.param.rst", "_api/sparknlp.annotator.param.classifier_encoder.rst", "_api/sparknlp.annotator.param.evaluation_dl_params.rst", "_api/sparknlp.annotator.pos.rst", "_api/sparknlp.annotator.pos.perceptron.rst", "_api/sparknlp.annotator.sentence.rst", "_api/sparknlp.annotator.sentence.sentence_detector.rst", "_api/sparknlp.annotator.sentence.sentence_detector_dl.rst", "_api/sparknlp.annotator.sentiment.rst", "_api/sparknlp.annotator.sentiment.sentiment_detector.rst", "_api/sparknlp.annotator.sentiment.vivekn_sentiment.rst", "_api/sparknlp.annotator.seq2seq.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_model.rst", "_api/sparknlp.annotator.seq2seq.auto_gguf_vision_model.rst", "_api/sparknlp.annotator.seq2seq.bart_transformer.rst", "_api/sparknlp.annotator.seq2seq.cohere_transformer.rst", "_api/sparknlp.annotator.seq2seq.cpm_transformer.rst", "_api/sparknlp.annotator.seq2seq.gpt2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama2_transformer.rst", "_api/sparknlp.annotator.seq2seq.llama3_transformer.rst", "_api/sparknlp.annotator.seq2seq.m2m100_transformer.rst", "_api/sparknlp.annotator.seq2seq.marian_transformer.rst", "_api/sparknlp.annotator.seq2seq.mistral_transformer.rst", "_api/sparknlp.annotator.seq2seq.nllb_transformer.rst", "_api/sparknlp.annotator.seq2seq.olmo_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi2_transformer.rst", "_api/sparknlp.annotator.seq2seq.phi3_transformer.rst", "_api/sparknlp.annotator.seq2seq.qwen_transformer.rst", "_api/sparknlp.annotator.seq2seq.starcoder_transformer.rst", "_api/sparknlp.annotator.seq2seq.t5_transformer.rst", "_api/sparknlp.annotator.similarity.rst", "_api/sparknlp.annotator.similarity.document_similarity_ranker.rst", "_api/sparknlp.annotator.spell_check.rst", "_api/sparknlp.annotator.spell_check.context_spell_checker.rst", "_api/sparknlp.annotator.spell_check.norvig_sweeting.rst", "_api/sparknlp.annotator.spell_check.symmetric_delete.rst", "_api/sparknlp.annotator.stemmer.rst", "_api/sparknlp.annotator.stop_words_cleaner.rst", "_api/sparknlp.annotator.tf_ner_dl_graph_builder.rst", "_api/sparknlp.annotator.token.rst", "_api/sparknlp.annotator.token.chunk_tokenizer.rst", "_api/sparknlp.annotator.token.recursive_tokenizer.rst", "_api/sparknlp.annotator.token.regex_tokenizer.rst", "_api/sparknlp.annotator.token.tokenizer.rst", "_api/sparknlp.annotator.token2_chunk.rst", "_api/sparknlp.annotator.ws.rst", "_api/sparknlp.annotator.ws.word_segmenter.rst", "_api/sparknlp.base.rst", "_api/sparknlp.base.audio_assembler.rst", "_api/sparknlp.base.doc2_chunk.rst", "_api/sparknlp.base.document_assembler.rst", "_api/sparknlp.base.embeddings_finisher.rst", "_api/sparknlp.base.finisher.rst", "_api/sparknlp.base.graph_finisher.rst", "_api/sparknlp.base.has_recursive_fit.rst", "_api/sparknlp.base.has_recursive_transform.rst", "_api/sparknlp.base.image_assembler.rst", "_api/sparknlp.base.light_pipeline.rst", "_api/sparknlp.base.multi_document_assembler.rst", "_api/sparknlp.base.prompt_assembler.rst", "_api/sparknlp.base.recursive_pipeline.rst", "_api/sparknlp.base.table_assembler.rst", "_api/sparknlp.base.token_assembler.rst", "_api/sparknlp.common.rst", "_api/sparknlp.common.annotator_approach.rst", "_api/sparknlp.common.annotator_model.rst", "_api/sparknlp.common.annotator_properties.rst", "_api/sparknlp.common.annotator_type.rst", "_api/sparknlp.common.coverage_result.rst", "_api/sparknlp.common.match_strategy.rst", "_api/sparknlp.common.properties.rst", "_api/sparknlp.common.read_as.rst", "_api/sparknlp.common.recursive_annotator_approach.rst", "_api/sparknlp.common.storage.rst", "_api/sparknlp.common.utils.rst", "_api/sparknlp.functions.rst", "_api/sparknlp.internal.rst", "_api/sparknlp.internal.annotator_java_ml.rst", "_api/sparknlp.internal.annotator_transformer.rst", "_api/sparknlp.internal.extended_java_wrapper.rst", "_api/sparknlp.internal.params_getters_setters.rst", "_api/sparknlp.internal.recursive.rst", "_api/sparknlp.logging.rst", "_api/sparknlp.logging.comet.rst", "_api/sparknlp.pretrained.rst", "_api/sparknlp.pretrained.pretrained_pipeline.rst", "_api/sparknlp.pretrained.resource_downloader.rst", "_api/sparknlp.pretrained.utils.rst", "_api/sparknlp.reader.rst", "_api/sparknlp.reader.pdf_to_text.rst", "_api/sparknlp.reader.sparknlp_reader.rst", "_api/sparknlp.training.rst", "_api/sparknlp.training.conll.rst", "_api/sparknlp.training.conllu.rst", "_api/sparknlp.training.pos.rst", "_api/sparknlp.training.pub_tator.rst", "_api/sparknlp.training.spacy_to_annotation.rst", "_api/sparknlp.training.tfgraphs.rst", "_api/sparknlp.upload_to_hub.rst", "_api/sparknlp.util.rst", "getting_started/index.rst", "index.rst", "reference/index.rst", "third_party/Comet.rst", "third_party/MLflow.rst", "third_party/index.rst", "user_guide/annotation.rst", "user_guide/annotators.rst", "user_guide/custom_pipelines.rst", "user_guide/helpers.rst", "user_guide/index.rst", "user_guide/light_pipelines.rst", "user_guide/pretrained_pipelines.rst", "user_guide/training.rst"], "titles": ["sparknlp", "sparknlp package", "sparknlp.annotation module", "sparknlp.annotation_audio module", "sparknlp.annotation_image module", "sparknlp.annotator package", "sparknlp.annotator.audio package", "sparknlp.annotator.audio.hubert_for_ctc module", "sparknlp.annotator.audio.wav2vec2_for_ctc module", "sparknlp.annotator.audio.whisper_for_ctc module", "sparknlp.annotator.chunk2_doc module", "sparknlp.annotator.chunker module", "sparknlp.annotator.classifier_dl package", "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.albert_for_question_answering module", "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.albert_for_token_classification module", "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.bert_for_question_answering module", "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.bert_for_token_classification module", "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.camembert_for_question_answering module", "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.camembert_for_token_classification module", "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.classifier_dl module", "sparknlp.annotator.classifier_dl.deberta_for_question_answering module", "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.deberta_for_token_classification module", "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module", "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module", "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module", "sparknlp.annotator.classifier_dl.longformer_for_question_answering module", "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module", "sparknlp.annotator.classifier_dl.longformer_for_token_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module", "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module", "sparknlp.annotator.classifier_dl.multi_classifier_dl module", "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.sentiment_dl module", "sparknlp.annotator.classifier_dl.tapas_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module", "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module", "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module", "sparknlp.annotator.cleaners package", "sparknlp.annotator.cleaners.cleaner module", "sparknlp.annotator.cleaners.extractor module", "sparknlp.annotator.coref package", "sparknlp.annotator.coref.spanbert_coref module", "sparknlp.annotator.cv package", "sparknlp.annotator.cv.blip_for_question_answering module", "sparknlp.annotator.cv.clip_for_zero_shot_classification module", "sparknlp.annotator.cv.convnext_for_image_classification module", "sparknlp.annotator.cv.janus_for_multimodal module", "sparknlp.annotator.cv.llava_for_multimodal module", "sparknlp.annotator.cv.mllama_for_multimodal module", "sparknlp.annotator.cv.phi3_vision_for_multimodal module", "sparknlp.annotator.cv.qwen2vl_transformer module", "sparknlp.annotator.cv.swin_for_image_classification module", "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module", "sparknlp.annotator.cv.vit_for_image_classification module", "sparknlp.annotator.date2_chunk module", "sparknlp.annotator.dependency package", "sparknlp.annotator.dependency.dependency_parser module", "sparknlp.annotator.dependency.typed_dependency_parser module", "sparknlp.annotator.document_character_text_splitter module", "sparknlp.annotator.document_normalizer module", "sparknlp.annotator.document_token_splitter module", "sparknlp.annotator.document_token_splitter_test module", "sparknlp.annotator.embeddings package", "sparknlp.annotator.embeddings.albert_embeddings module", "sparknlp.annotator.embeddings.auto_gguf_embeddings module", "sparknlp.annotator.embeddings.bert_embeddings module", "sparknlp.annotator.embeddings.bert_sentence_embeddings module", "sparknlp.annotator.embeddings.bge_embeddings module", "sparknlp.annotator.embeddings.camembert_embeddings module", "sparknlp.annotator.embeddings.chunk_embeddings module", "sparknlp.annotator.embeddings.deberta_embeddings module", "sparknlp.annotator.embeddings.distil_bert_embeddings module", "sparknlp.annotator.embeddings.doc2vec module", "sparknlp.annotator.embeddings.e5_embeddings module", "sparknlp.annotator.embeddings.elmo_embeddings module", "sparknlp.annotator.embeddings.instructor_embeddings module", "sparknlp.annotator.embeddings.longformer_embeddings module", "sparknlp.annotator.embeddings.mpnet_embeddings module", "sparknlp.annotator.embeddings.mxbai_embeddings module", "sparknlp.annotator.embeddings.nomic_embeddings module", "sparknlp.annotator.embeddings.roberta_embeddings module", "sparknlp.annotator.embeddings.roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.sentence_embeddings module", "sparknlp.annotator.embeddings.snowflake_embeddings module", "sparknlp.annotator.embeddings.uae_embeddings module", "sparknlp.annotator.embeddings.universal_sentence_encoder module", "sparknlp.annotator.embeddings.word2vec module", "sparknlp.annotator.embeddings.word_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_embeddings module", "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module", "sparknlp.annotator.embeddings.xlnet_embeddings module", "sparknlp.annotator.er package", "sparknlp.annotator.er.entity_ruler module", "sparknlp.annotator.graph_extraction module", "sparknlp.annotator.keyword_extraction package", "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module", "sparknlp.annotator.ld_dl package", "sparknlp.annotator.ld_dl.language_detector_dl module", "sparknlp.annotator.lemmatizer module", "sparknlp.annotator.matcher package", "sparknlp.annotator.matcher.big_text_matcher module", "sparknlp.annotator.matcher.date_matcher module", "sparknlp.annotator.matcher.multi_date_matcher module", "sparknlp.annotator.matcher.regex_matcher module", "sparknlp.annotator.matcher.text_matcher module", "sparknlp.annotator.n_gram_generator module", "sparknlp.annotator.ner package", "sparknlp.annotator.ner.ner_approach module", "sparknlp.annotator.ner.ner_converter module", "sparknlp.annotator.ner.ner_crf module", "sparknlp.annotator.ner.ner_dl module", "sparknlp.annotator.ner.ner_overwriter module", "sparknlp.annotator.ner.zero_shot_ner_model module", "sparknlp.annotator.normalizer module", "sparknlp.annotator.openai package", "sparknlp.annotator.openai.openai_completion module", "sparknlp.annotator.openai.openai_embeddings module", "sparknlp.annotator.param package", "sparknlp.annotator.param.classifier_encoder module", "sparknlp.annotator.param.evaluation_dl_params module", "sparknlp.annotator.pos package", "sparknlp.annotator.pos.perceptron module", "sparknlp.annotator.sentence package", "sparknlp.annotator.sentence.sentence_detector module", "sparknlp.annotator.sentence.sentence_detector_dl module", "sparknlp.annotator.sentiment package", "sparknlp.annotator.sentiment.sentiment_detector module", "sparknlp.annotator.sentiment.vivekn_sentiment module", "sparknlp.annotator.seq2seq package", "sparknlp.annotator.seq2seq.auto_gguf_model module", "sparknlp.annotator.seq2seq.auto_gguf_vision_model module", "sparknlp.annotator.seq2seq.bart_transformer module", "sparknlp.annotator.seq2seq.cohere_transformer module", "sparknlp.annotator.seq2seq.cpm_transformer module", "sparknlp.annotator.seq2seq.gpt2_transformer module", "sparknlp.annotator.seq2seq.llama2_transformer module", "sparknlp.annotator.seq2seq.llama3_transformer module", "sparknlp.annotator.seq2seq.m2m100_transformer module", "sparknlp.annotator.seq2seq.marian_transformer module", "sparknlp.annotator.seq2seq.mistral_transformer module", "sparknlp.annotator.seq2seq.nllb_transformer module", "sparknlp.annotator.seq2seq.olmo_transformer module", "sparknlp.annotator.seq2seq.phi2_transformer module", "sparknlp.annotator.seq2seq.phi3_transformer module", "sparknlp.annotator.seq2seq.qwen_transformer module", "sparknlp.annotator.seq2seq.starcoder_transformer module", "sparknlp.annotator.seq2seq.t5_transformer module", "sparknlp.annotator.similarity package", "sparknlp.annotator.similarity.document_similarity_ranker module", "sparknlp.annotator.spell_check package", "sparknlp.annotator.spell_check.context_spell_checker module", "sparknlp.annotator.spell_check.norvig_sweeting module", "sparknlp.annotator.spell_check.symmetric_delete module", "sparknlp.annotator.stemmer module", "sparknlp.annotator.stop_words_cleaner module", "sparknlp.annotator.tf_ner_dl_graph_builder module", "sparknlp.annotator.token package", "sparknlp.annotator.token.chunk_tokenizer module", "sparknlp.annotator.token.recursive_tokenizer module", "sparknlp.annotator.token.regex_tokenizer module", "sparknlp.annotator.token.tokenizer module", "sparknlp.annotator.token2_chunk module", "sparknlp.annotator.ws package", "sparknlp.annotator.ws.word_segmenter module", "sparknlp.base package", "sparknlp.base.audio_assembler module", "sparknlp.base.doc2_chunk module", "sparknlp.base.document_assembler module", "sparknlp.base.embeddings_finisher module", "sparknlp.base.finisher module", "sparknlp.base.graph_finisher module", "sparknlp.base.has_recursive_fit module", "sparknlp.base.has_recursive_transform module", "sparknlp.base.image_assembler module", "sparknlp.base.light_pipeline module", "sparknlp.base.multi_document_assembler module", "sparknlp.base.prompt_assembler module", "sparknlp.base.recursive_pipeline module", "sparknlp.base.table_assembler module", "sparknlp.base.token_assembler module", "sparknlp.common package", "sparknlp.common.annotator_approach module", "sparknlp.common.annotator_model module", "sparknlp.common.annotator_properties module", "sparknlp.common.annotator_type module", "sparknlp.common.coverage_result module", "sparknlp.common.match_strategy module", "sparknlp.common.properties module", "sparknlp.common.read_as module", "sparknlp.common.recursive_annotator_approach module", "sparknlp.common.storage module", "sparknlp.common.utils module", "sparknlp.functions module", "sparknlp.internal package", "sparknlp.internal.annotator_java_ml module", "sparknlp.internal.annotator_transformer module", "sparknlp.internal.extended_java_wrapper module", "sparknlp.internal.params_getters_setters module", "sparknlp.internal.recursive module", "sparknlp.logging package", "sparknlp.logging.comet module", "sparknlp.pretrained package", "sparknlp.pretrained.pretrained_pipeline module", "sparknlp.pretrained.resource_downloader module", "sparknlp.pretrained.utils module", "sparknlp.reader package", "sparknlp.reader.pdf_to_text module", "sparknlp.reader.sparknlp_reader module", "sparknlp.training package", "sparknlp.training.conll module", "sparknlp.training.conllu module", "sparknlp.training.pos module", "sparknlp.training.pub_tator module", "sparknlp.training.spacy_to_annotation module", "sparknlp.training.tfgraphs module", "sparknlp.upload_to_hub module", "sparknlp.util module", "Getting Started", "Spark NLP Documentation", "API Reference", "Comet - A meta machine learning platform", "MLflow - a platform for the machine learning lifecycle", "Third Party Projects", "Annotation", "Annotators", "Setting up your own pipeline", "Helper Functions", "User Guide", "Light Pipelines", "Pretrained Pipelines", "Loading datasets for training"], "terms": {"6": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252], "packag": [0, 85, 86, 92, 151, 152, 222, 239, 243, 244], "subpackag": 0, "annot": [0, 1, 3, 4, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 213, 214, 215, 216, 217, 220, 222, 223, 224, 225, 226, 233, 235, 240, 242, 243, 248, 249, 250, 251, 252], "submodul": 0, "modul": [0, 240], "content": [0, 65, 69, 70, 71, 72, 92, 109, 149, 188, 229, 233, 245, 251], "base": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 222, 224, 225, 228, 229, 231, 232, 233, 234, 235, 237, 238, 242, 246, 247, 250], "common": [0, 1, 50, 106, 114, 123, 138, 164, 165, 167, 179, 188, 249], "intern": [0, 1, 96, 165, 168, 172, 182, 185, 200], "log": [0, 1, 28, 44, 50, 132, 137, 141, 146, 156, 163, 240], "pretrain": [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 128, 131, 132, 133, 134, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 178, 182, 184, 185, 190, 191, 196, 214, 222, 240, 242, 245, 249], "reader": [0, 1, 225], "train": [0, 1, 7, 9, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 68, 73, 75, 78, 79, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 107, 108, 110, 111, 112, 117, 119, 120, 122, 125, 126, 129, 131, 132, 135, 140, 141, 143, 146, 148, 149, 153, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 170, 172, 173, 174, 179, 180, 185, 188, 196, 209, 212, 222, 224, 240, 242, 246, 247, 249, 250], "annotation_audio": [0, 1], "annotationaudio": [0, 1, 3], "annotation_imag": [0, 1], "annotationimag": [0, 1, 4, 152, 196, 224], "function": [0, 1, 70, 96, 106, 109, 152, 153, 168, 190, 225, 240, 241, 249], "explode_annotations_col": [0, 1, 214], "filter_by_annotations_col": [0, 1, 214], "map_annot": [0, 1, 214], "map_annotations_arrai": [0, 1, 214], "map_annotations_col": [0, 1, 214], "map_annotations_strict": [0, 1, 214], "upload_to_hub": [0, 1], "pushtohub": [0, 1, 237], "util": [0, 1, 7, 68, 91, 131, 134, 145, 146, 161, 174, 199, 202, 207, 210, 212, 216, 219, 223], "conllgener": [0, 1, 238], "get_config_path": [0, 1, 238], "read": [0, 1, 28, 50, 65, 66, 67, 70, 73, 74, 75, 78, 79, 94, 108, 117, 120, 122, 123, 124, 125, 126, 131, 134, 135, 141, 146, 148, 156, 172, 173, 174, 182, 185, 187, 189, 195, 197, 210, 212, 213, 215, 216, 222, 225, 227, 229, 231, 232, 233, 234, 242, 246, 252], "start": [0, 1, 7, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 98, 115, 117, 131, 132, 146, 151, 152, 188, 209, 222, 240, 242, 245, 247, 250, 251], "version": [0, 1, 9, 81, 89, 93, 95, 99, 158, 165, 166, 198, 220, 224, 225, 239, 246, 251], "audio": [1, 3, 5, 187, 202, 206, 222], "classifier_dl": [1, 5], "cleaner": [1, 5], "coref": [1, 5], "cv": [1, 5], "depend": [1, 2, 5, 63, 90, 99, 104, 112, 114, 115, 117, 119, 132, 160, 172, 185, 202, 206, 209, 237, 239], "embed": [1, 2, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 115, 131, 132, 133, 138, 151, 152, 155, 170, 189, 190, 191, 196, 197, 202, 209, 214, 220, 224, 237, 245], "er": [1, 5], "keyword_extract": [1, 5], "ld_dl": [1, 5], "matcher": [1, 5], "ner": [1, 5, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 110, 111, 115, 179, 196, 214, 222, 224, 242], "openai": [1, 5, 101, 156], "param": [1, 5, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 143, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 195, 197, 198, 200, 201, 205, 209, 212, 219, 220, 228, 229, 235], "po": [1, 2, 5, 11, 15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 78, 79, 115, 128, 131, 132, 180, 185, 196, 202, 206, 214, 224, 230, 231, 245, 249, 250, 251], "sentenc": [1, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 76, 78, 79, 81, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 138, 143, 149, 153, 160, 168, 170, 172, 176, 179, 181, 183, 185, 189, 191, 196, 197, 200, 201, 209, 224, 231, 232, 233, 234, 235, 237, 246, 250, 251], "sentiment": [1, 2, 5, 28, 44, 50, 96, 112, 168, 202, 206, 237, 246, 247], "seq2seq": [1, 5], "similar": [1, 5, 66, 85, 97, 106, 107, 117, 119, 152, 167], "spell_check": [1, 5], "token": [1, 2, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 68, 69, 70, 71, 72, 74, 78, 79, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 117, 120, 121, 122, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 140, 141, 143, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 183, 185, 188, 190, 196, 199, 201, 202, 206, 209, 224, 231, 234, 235, 237, 246, 250, 251], "w": [1, 5, 114, 125, 131, 135, 180, 182], "chunk2_doc": [1, 5], "chunk2doc": [1, 5, 10, 188], "chunker": [1, 5, 91], "date2_chunk": [1, 5], "date2chunk": [1, 5, 76], "document_character_text_splitt": [1, 5], "documentcharactertextsplitt": [1, 5, 80], "document_norm": [1, 5], "documentnorm": [1, 5, 80, 81, 82], "document_token_splitt": [1, 5], "documenttokensplitt": [1, 5, 82], "document_token_splitter_test": [1, 5], "graph_extract": [1, 5], "graphextract": [1, 5, 115, 192], "lemmat": [1, 5, 148, 176, 199, 201, 237], "lemmatizermodel": [1, 5, 120], "n_gram_gener": [1, 5], "ngramgener": [1, 5, 91, 127], "normal": [1, 5, 28, 67, 73, 74, 75, 81, 122, 146, 149, 176, 190, 199, 201, 209, 246, 247], "normalizermodel": [1, 5, 135], "stemmer": [1, 5, 176], "stop_words_clean": [1, 5], "stopwordsclean": [1, 5, 176, 190, 201], "tf_ner_dl_graph_build": [1, 5], "tfnerdlgraphbuild": [1, 5, 177], "tfnerdlgraphbuildermodel": [1, 5, 177], "token2_chunk": [1, 5], "token2chunk": [1, 5, 183], "audio_assembl": [1, 7, 8, 9, 186], "audioassembl": [1, 7, 8, 9, 186, 187], "doc2_chunk": [1, 186], "doc2chunk": [1, 10, 186, 188], "document_assembl": [1, 51, 134, 170, 186, 200], "documentassembl": [1, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 197, 199, 200, 201, 222, 231, 242, 246], "embeddings_finish": [1, 186], "embeddingsfinish": [1, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 186, 190], "finish": [1, 149, 170, 186, 190, 192, 197, 199], "graph_finish": [1, 186], "graphfinish": [1, 115, 186, 192], "has_recursive_fit": [1, 186], "hasrecursivefit": [1, 186, 193, 194], "has_recursive_transform": [1, 186], "hasrecursivetransform": [1, 186, 194], "image_assembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 152, 186], "imageassembl": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 152, 186, 195], "light_pipelin": [1, 186], "lightpipelin": [1, 186, 196, 224, 250], "multi_document_assembl": [1, 186], "multidocumentassembl": [1, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 186, 197], "prompt_assembl": [1, 186], "promptassembl": [1, 186, 198], "recursive_pipelin": [1, 186, 220], "recursivepipelin": [1, 186, 193, 194, 199, 205], "recursivepipelinemodel": [1, 186, 199], "table_assembl": [1, 51, 186], "tableassembl": [1, 51, 186, 200], "token_assembl": [1, 186], "tokenassembl": [1, 186, 201], "annotator_approach": [1, 202], "annotatorapproach": [1, 28, 44, 50, 78, 79, 94, 108, 109, 114, 120, 122, 125, 126, 131, 132, 135, 143, 146, 148, 149, 170, 172, 173, 174, 180, 182, 185, 202, 203, 211, 222], "annotator_model": [1, 202], "annotatormodel": [1, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 135, 137, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 180, 181, 182, 183, 185, 196, 200, 202, 204, 205, 225], "annotator_properti": [1, 202], "annotatorproperti": [1, 10, 188, 201, 202, 203, 204, 205, 211], "annotator_typ": [1, 2, 3, 4, 202], "annotatortyp": [1, 2, 3, 4, 22, 91, 127, 188, 189, 195, 197, 202, 206, 214, 245], "coverage_result": [1, 202], "coverageresult": [1, 109, 202, 207], "match_strategi": [1, 202], "matchstrategi": [1, 123, 202, 208], "properti": [1, 85, 165, 193, 194, 202, 205], "hasaudiofeatureproperti": [1, 7, 8, 9, 202, 209], "hasbatchedannot": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 132, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "hasbatchedannotateaudio": [1, 7, 8, 9, 202, 209], "hasbatchedannotateimag": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 202, 209], "hascandidatelabelsproperti": [1, 17, 18, 23, 27, 32, 36, 49, 56, 65, 66, 68, 69, 70, 71, 72, 202, 209], "hascasesensitiveproperti": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112, 202, 209, 212], "hasclassifieractivationproperti": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 202, 209], "hasclstokenproperti": [1, 89, 202, 209], "hasembeddingsproperti": [1, 63, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 170, 202, 209], "hasenablecachingproperti": [1, 94, 108, 170, 202, 209], "hasengin": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 88, 90, 92, 93, 96, 98, 102, 103, 107, 110, 111, 112, 119, 132, 134, 146, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 202, 209], "hasgeneratorproperti": [1, 9, 74, 202, 209], "hasimagefeatureproperti": [1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 202, 209], "hasllamacppproperti": [1, 151, 152, 202, 209], "haslongmaxsentencelengthlimit": [1, 38, 39, 40, 98, 202, 209], "hasmaxsentencelengthlimit": [1, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 47, 52, 53, 54, 55, 57, 58, 63, 85, 87, 88, 89, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112, 202, 209], "hasrescalefactor": [1, 65, 66, 68, 69, 70, 71, 72, 73, 74, 202, 209], "read_a": [1, 78, 79, 114, 120, 122, 125, 126, 131, 135, 141, 148, 173, 174, 182, 202, 212, 213, 231, 232], "reada": [1, 78, 79, 109, 114, 120, 122, 125, 126, 131, 135, 141, 148, 173, 174, 179, 182, 202, 210, 212, 213, 231, 232], "recursive_annotator_approach": [1, 202], "recursiveannotatorapproach": [1, 202, 211], "storag": [1, 109, 114, 122, 202], "hasstorag": [1, 109, 114, 122, 202, 212], "hasstoragemodel": [1, 109, 114, 122, 202, 212], "hasstorageopt": [1, 202, 212], "hasstorageref": [1, 28, 44, 50, 63, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 119, 132, 202, 212], "externalresourc": [1, 122, 126, 202, 213], "regexrul": [1, 202, 213], "annotator_java_ml": [1, 215], "annotatorjavamlread": [1, 203, 204, 211, 215, 216, 217], "annotator_transform": [1, 215], "annotatortransform": [1, 10, 170, 187, 188, 189, 190, 191, 192, 195, 197, 198, 201, 215, 217], "extended_java_wrapp": [1, 215], "extendedjavawrapp": [1, 215, 218, 229, 231, 232, 233, 234, 235], "params_getters_sett": [1, 215], "paramsgetterssett": [1, 140, 141, 203, 204, 211, 215, 217, 219], "recurs": [1, 180, 199, 211, 215], "recursiveestim": [1, 193, 211, 215, 220], "recursivetransform": [1, 194, 215, 220], "comet": [1, 221, 244], "cometlogg": [1, 221, 222, 242], "pretrained_pipelin": [1, 223], "pretrainedpipelin": [1, 10, 191, 196, 214, 223, 224, 245, 250, 251], "resource_download": [1, 223], "resourcedownload": [1, 223, 225, 246, 251], "printprogress": [1, 223, 226], "pdf_to_text": [1, 227], "pdftotext": [1, 227, 228], "sparknlp_read": [1, 227], "sparknlpread": [1, 227, 229], "conll": [1, 78, 79, 131, 132, 230, 232, 249], "conllu": [1, 77, 78, 79, 120, 230, 249], "pub_tat": [1, 230], "pubtat": [1, 230, 234, 249], "spacy_to_annot": [1, 230], "spacytoannot": [1, 230, 235], "tfgraph": [1, 230], "arraytyp": [1, 2, 188, 214], "copi": [1, 2, 3, 4, 225], "datatyp": [1, 2, 214], "fromrow": [1, 2], "torow": [1, 2], "check_for_required_info": [1, 237], "create_doc": [1, 237], "list_of_task": [1, 237], "push_to_hub": [1, 237], "unzip_directori": [1, 237], "zip_directori": [1, 237], "exportconllfil": [1, 238], "none": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 119, 120, 122, 125, 126, 131, 132, 134, 135, 137, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 182, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 204, 205, 217, 220, 222, 224, 225, 229, 235, 237, 247], "sourc": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 243], "gpu": [1, 74, 85, 86, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 209], "fals": [1, 2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 192, 196, 197, 200, 201, 209, 214, 222, 224, 229, 231, 232, 233, 235, 242, 245, 246, 247, 252], "apple_silicon": 1, "aarch64": 1, "memori": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 85, 86, 96, 109, 151, 152, 209, 212, 239], "16g": [1, 239], "cache_fold": 1, "log_fold": 1, "cluster_tmp_dir": 1, "real_time_output": 1, "output_level": 1, "1": [1, 7, 9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 42, 44, 46, 47, 49, 50, 53, 54, 56, 57, 63, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 82, 85, 86, 87, 88, 92, 94, 96, 97, 103, 108, 109, 110, 111, 112, 117, 122, 123, 124, 125, 126, 127, 130, 131, 132, 134, 137, 138, 141, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 181, 185, 190, 191, 209, 220, 222, 224, 225, 229, 231, 232, 234, 235, 239, 242, 245, 246, 250, 251], "pyspark": [1, 2, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 135, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 195, 196, 197, 200, 201, 212, 214, 218, 220, 222, 224, 229, 231, 232, 233, 234, 239, 246, 247], "instanc": [1, 44, 134, 216], "default": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 140, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 177, 180, 181, 182, 185, 188, 189, 190, 191, 192, 195, 196, 197, 200, 205, 209, 213, 214, 222, 224, 225, 231, 232, 233, 234, 246], "paramet": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 205, 209, 212, 213, 214, 219, 220, 222, 224, 225, 229, 231, 232, 233, 234], "spark": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 138, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 210, 212, 214, 215, 217, 218, 222, 224, 225, 229, 231, 232, 233, 234, 235, 241, 243, 244, 245, 246, 248, 249, 250, 252], "nlp": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 81, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 119, 120, 122, 125, 126, 131, 132, 133, 134, 135, 143, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 179, 180, 182, 185, 186, 188, 189, 190, 191, 195, 196, 197, 199, 200, 201, 202, 215, 222, 224, 225, 231, 232, 233, 234, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252], "The": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 137, 138, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 179, 181, 182, 185, 189, 191, 195, 196, 197, 198, 200, 209, 212, 214, 222, 224, 225, 231, 232, 233, 234, 235, 237, 242, 245, 246, 247, 249, 250, 252], "would": [1, 28, 63, 80, 91, 104, 123, 146, 246], "result": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 200, 201, 209, 214, 222, 224, 231, 232, 235, 237, 242, 243, 245, 246, 247, 250, 251], "equival": [1, 17, 18, 23, 27, 32, 36, 49, 56, 196, 250], "sparksess": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 122, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 195, 212, 231, 232, 233, 234, 239], "builder": [1, 177, 239], "appnam": [1, 239], "master": [1, 239], "local": [1, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 117, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 176, 196, 209, 224, 239, 250], "config": [1, 239, 243], "driver": [1, 152, 239], "serial": [1, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 114, 119, 132, 140, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 239], "org": [1, 68, 69, 70, 71, 72, 130, 131, 132, 133, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 185, 196, 209, 214, 224, 229, 231, 239, 243, 252], "apach": [1, 101, 197, 239], "kryoseri": [1, 239], "buffer": [1, 88, 109, 239], "max": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 69, 71, 72, 85, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112, 117, 170, 174, 209, 239], "2000m": [1, 239], "maxresults": [1, 239], "jar": [1, 239], "com": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 119, 120, 122, 125, 126, 131, 132, 134, 135, 137, 138, 143, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 179, 180, 182, 185, 200, 229, 239], "johnsnowlab": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 81, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 119, 120, 122, 125, 126, 131, 132, 134, 135, 137, 138, 143, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 179, 180, 182, 185, 190, 191, 200, 229, 239], "nlp_2": [1, 239], "12": [1, 85, 110, 111, 112, 117, 123, 124, 130, 143, 172, 183, 196, 214, 224, 233, 235, 239, 245], "releas": [1, 9, 81, 85, 90, 92, 101, 102, 103, 110, 111, 153, 154, 157, 158, 163, 164, 166, 167, 168], "getorcr": [1, 239], "bool": [1, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 60, 68, 69, 70, 71, 72, 80, 81, 82, 86, 87, 88, 91, 95, 102, 107, 110, 114, 115, 119, 122, 123, 126, 127, 130, 131, 132, 135, 141, 145, 146, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 176, 181, 182, 185, 188, 190, 191, 192, 196, 198, 200, 205, 209, 212, 222, 224, 225, 231], "option": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 117, 119, 120, 122, 125, 126, 131, 132, 134, 135, 141, 143, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 182, 185, 187, 189, 195, 196, 197, 209, 212, 213, 214, 220, 222, 224, 225, 229, 231, 232, 233, 234, 246], "whether": [1, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 114, 115, 122, 123, 124, 126, 127, 130, 131, 132, 135, 137, 141, 145, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 176, 181, 182, 185, 188, 190, 191, 192, 196, 198, 200, 201, 205, 209, 212, 224, 231, 234, 247], "enabl": [1, 86, 112, 132, 151, 152, 157, 163, 164, 170, 173, 190, 209, 228], "acceler": [1, 74, 96, 112, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168], "must": [1, 86, 94, 108, 120, 122, 125, 126, 137, 141, 148, 149, 151, 152, 173, 174, 188, 209, 214, 222, 231], "set": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 177, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 205, 209, 212, 213, 219, 222, 225, 228, 231, 239, 240, 242, 246, 249, 250], "up": [1, 7, 9, 28, 44, 68, 69, 70, 71, 72, 74, 89, 94, 95, 98, 99, 104, 106, 108, 117, 137, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209, 239, 240, 242, 246, 249, 250], "correctli": 1, "appl": [1, 7, 8, 88, 103, 111], "silicon": [1, 7, 8], "support": [1, 7, 8, 9, 28, 44, 68, 82, 85, 86, 89, 95, 98, 99, 117, 132, 135, 146, 151, 152, 159, 160, 162, 165, 166, 167, 176, 195, 198, 200, 209, 243], "maco": 1, "linux": 1, "str": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 177, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 205, 209, 212, 213, 214, 219, 222, 224, 225, 229, 231, 232, 233, 234, 237], "how": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 82, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 98, 101, 102, 104, 106, 110, 112, 114, 115, 119, 120, 122, 125, 126, 130, 131, 132, 135, 137, 141, 145, 148, 151, 152, 154, 159, 173, 174, 181, 182, 185, 189, 192, 197, 198, 208, 209, 210, 212, 213, 231, 232, 235, 239, 240, 242, 246, 251], "much": [1, 17, 18, 23, 27, 28, 32, 36, 49, 51, 56, 85, 89, 95, 101, 102, 103, 135, 157, 159, 185, 246], "alloc": 1, "locat": [1, 10, 13, 19, 37, 45, 114, 145, 224, 246], "download": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 115, 119, 120, 122, 126, 131, 132, 133, 134, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185, 224, 225, 245, 246, 249, 250], "extract": [1, 10, 11, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 61, 67, 73, 74, 75, 78, 80, 82, 91, 109, 113, 114, 115, 116, 117, 122, 123, 124, 126, 130, 131, 132, 133, 145, 146, 148, 170, 172, 174, 179, 183, 190, 191, 192, 196, 209, 222, 224, 228, 242], "model": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 119, 120, 122, 125, 126, 130, 131, 132, 134, 135, 136, 137, 138, 141, 143, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 177, 179, 180, 182, 185, 198, 204, 209, 212, 220, 222, 224, 225, 237, 240, 242, 243, 245, 249, 251, 252], "pipelin": [1, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 195, 196, 197, 199, 200, 201, 220, 222, 223, 224, 225, 226, 237, 240, 243, 245, 246, 249], "If": [1, 9, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 104, 109, 114, 119, 123, 124, 130, 131, 132, 135, 141, 145, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 177, 196, 209, 220, 222, 225, 239, 242, 244, 246], "user": [1, 70, 72, 130, 131, 136, 137, 138, 151, 152, 155, 158, 161, 182, 198, 199, 209, 222, 229, 240, 242], "home": [1, 117, 229], "directori": [1, 152, 225, 229, 242], "under": [1, 2, 93, 99, 101, 112, 117, 167], "cache_pretrain": 1, "us": [1, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 82, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 134, 137, 138, 141, 143, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 177, 181, 182, 183, 185, 188, 189, 190, 191, 196, 197, 198, 199, 200, 201, 208, 209, 214, 222, 224, 225, 229, 231, 232, 233, 234, 240, 243, 244, 245, 246, 247, 249], "cluster": [1, 7, 89, 95, 97, 107, 229], "temporarili": [1, 166], "file": [1, 3, 7, 8, 28, 44, 50, 65, 69, 70, 71, 72, 78, 79, 81, 107, 109, 114, 120, 122, 125, 126, 131, 132, 135, 141, 146, 148, 152, 172, 173, 174, 177, 182, 187, 200, 210, 212, 222, 227, 229, 231, 232, 233, 234, 237, 242, 252], "unpack": 1, "index": [1, 2, 59, 61, 100, 105, 106, 117, 122, 181, 212, 231], "wordembed": [1, 5, 84, 91, 104, 109, 132, 190], "By": [1, 106, 148, 153, 168, 176, 181, 190, 222, 242], "thi": [1, 2, 3, 4, 7, 8, 9, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 120, 122, 123, 125, 126, 127, 130, 131, 132, 133, 135, 137, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 179, 180, 181, 182, 183, 185, 187, 189, 190, 192, 195, 196, 197, 198, 199, 200, 201, 205, 208, 209, 216, 220, 222, 224, 225, 229, 233, 235, 239, 240, 241, 242, 245, 246, 247, 249, 250, 251], "i": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 177, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 209, 213, 214, 220, 222, 225, 228, 229, 231, 233, 234, 235, 239, 242, 243, 245, 246, 247, 249, 250, 251, 252], "hadoop": 1, "tmp": [1, 187, 195, 242], "dir": [1, 229], "via": [1, 9, 15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 107, 195, 209], "configur": [1, 67, 104, 182, 229, 239], "note": [1, 7, 8, 9, 17, 18, 23, 28, 36, 44, 49, 50, 56, 74, 82, 85, 86, 89, 93, 95, 96, 99, 102, 104, 109, 110, 112, 117, 132, 137, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 196, 209, 212, 229, 239, 251], "s3": [1, 225], "hdf": 1, "dbf": 1, "dict": [1, 2, 3, 4, 78, 79, 114, 120, 122, 125, 126, 131, 133, 134, 135, 137, 141, 148, 172, 173, 174, 182, 196, 209, 213, 220, 222, 224, 229, 237], "custom": [1, 80, 109, 131, 132, 145, 146, 182, 222, 229], "save": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 132, 141, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 212, 222, 242, 246], "from": [1, 2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 138, 140, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 209, 214, 218, 222, 224, 225, 228, 229, 231, 232, 233, 234, 235, 240, 242, 245, 246, 247, 250, 251, 252], "dure": [1, 7, 28, 44, 50, 66, 86, 93, 97, 131, 132, 141, 145, 151, 152, 170, 172, 209, 222, 242], "annotator_log": 1, "print": [1, 81, 225], "jvm": [1, 176], "output": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 205, 209, 214, 222, 228, 233, 242, 245, 246, 247], "real": [1, 132, 161, 163, 164, 165, 166, 222, 242], "time": [1, 28, 44, 50, 61, 85, 94, 108, 110, 111, 117, 123, 141, 149, 152, 172, 185, 245, 246, 250, 251], "int": [1, 2, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 115, 117, 119, 123, 127, 129, 131, 132, 135, 137, 140, 141, 143, 145, 146, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 174, 177, 181, 182, 185, 209, 222, 231], "level": [1, 16, 28, 44, 50, 87, 88, 98, 102, 103, 107, 109, 111, 114, 131, 132, 141, 172, 229, 231], "return": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 119, 120, 122, 126, 127, 129, 131, 132, 134, 137, 143, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 180, 182, 185, 188, 195, 196, 209, 212, 213, 214, 216, 220, 224, 225, 229, 231, 232, 233, 234], "initi": [1, 94, 108, 151, 152, 165, 172, 181, 199, 209, 231, 232, 233, 234, 242], "session": [1, 229, 231, 232, 233, 234, 240], "sinc": [1, 81, 99, 117, 156, 157, 239, 246, 247, 251], "python": [1, 119, 229, 240], "deprec": [1, 239], "you": [1, 17, 18, 23, 36, 49, 56, 72, 78, 79, 80, 82, 89, 91, 93, 95, 101, 102, 104, 115, 123, 133, 137, 154, 158, 160, 164, 190, 192, 196, 198, 209, 222, 225, 229, 233, 235, 239, 242, 244, 246, 247, 250, 251, 252], "ar": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 85, 86, 87, 90, 92, 93, 96, 97, 98, 100, 102, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 120, 123, 125, 127, 130, 132, 133, 134, 135, 137, 143, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 175, 185, 190, 195, 196, 198, 199, 200, 208, 209, 210, 214, 222, 225, 234, 235, 239, 242, 243, 244, 245, 246, 247, 250, 251, 252], "consid": [1, 80, 109, 115, 117, 137, 149, 151, 152, 154, 158, 160, 172, 173, 174, 176, 180, 209, 225, 239], "stick": [1, 239], "lower": [1, 81, 85, 117, 137, 170, 172, 188, 239], "current": [1, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 82, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 117, 122, 123, 124, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 177, 196, 200, 205, 209, 212, 245, 246, 247], "contain": [2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 63, 66, 67, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 137, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 229, 231, 232, 233, 234, 237, 238, 240, 242, 245, 246], "data": [2, 3, 4, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 140, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 195, 196, 197, 199, 200, 201, 214, 222, 224, 229, 230, 231, 232, 233, 234, 237, 243, 245, 246, 250, 251, 252], "format": [2, 3, 4, 9, 61, 65, 66, 67, 70, 73, 74, 75, 78, 79, 114, 115, 120, 122, 123, 124, 125, 126, 131, 132, 135, 141, 148, 153, 165, 168, 173, 174, 182, 185, 187, 189, 191, 192, 195, 197, 200, 229, 231, 232, 233, 234, 235, 243, 252], "class": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 222, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 241, 242, 250, 252], "begin": [2, 63, 130, 156, 180, 182, 188, 189, 197, 214, 245], "end": [2, 14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 63, 71, 132, 137, 138, 146, 151, 152, 153, 155, 163, 168, 180, 182, 185, 189, 197, 198, 209, 214, 221, 222, 231, 242, 245, 247], "metadata": [2, 3, 4, 51, 63, 76, 86, 117, 126, 131, 132, 134, 143, 189, 191, 195, 196, 197, 209, 214, 222, 225, 229, 245, 247], "object": [2, 3, 4, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 119, 120, 131, 132, 134, 137, 143, 145, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 185, 196, 206, 207, 208, 209, 210, 212, 222, 224, 225, 237, 238, 245, 246], "repres": [2, 3, 4, 78, 79, 85, 92, 97, 100, 105, 106, 112, 114, 115, 122, 126, 127, 137, 138, 155, 161, 182, 222, 224, 246], "detail": [2, 3, 4, 9, 68, 69, 70, 71, 72, 74, 110, 111, 117, 134, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "type": [2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 209, 214, 216, 224, 227, 229, 233, 245, 246, 249], "possibl": [2, 3, 4, 60, 61, 91, 93, 110, 111, 114, 145, 172, 174, 189, 197, 198, 208, 210, 222, 242], "valu": [2, 3, 4, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 88, 91, 96, 97, 100, 105, 106, 107, 110, 114, 115, 117, 119, 120, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 176, 177, 181, 182, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 205, 208, 209, 210, 212, 219, 222, 228, 229, 242, 252], "document": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 68, 69, 70, 71, 72, 74, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 138, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 192, 196, 197, 198, 200, 201, 202, 206, 222, 224, 228, 229, 231, 232, 233, 235, 239, 242, 246, 247, 249, 250, 251], "wordpiec": [2, 202, 206], "word_embed": [2, 5, 84, 85, 87, 90, 91, 92, 93, 96, 98, 102, 104, 108, 110, 112, 131, 132, 141, 177, 202, 206], "sentence_embed": [2, 5, 28, 44, 50, 84, 86, 88, 89, 94, 95, 97, 99, 100, 101, 103, 105, 106, 107, 111, 138, 170, 202, 206, 222, 242, 246], "categori": [2, 15, 17, 18, 21, 23, 25, 27, 28, 30, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 66, 67, 73, 75, 202, 206, 222, 242, 246], "date": [2, 61, 76, 123, 124, 125, 202, 206], "entiti": [2, 10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 63, 73, 76, 90, 113, 114, 115, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 179, 183, 191, 196, 202, 206, 224, 237], "chunk": [2, 10, 11, 13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 60, 61, 76, 80, 82, 86, 91, 94, 108, 114, 117, 122, 125, 126, 127, 130, 151, 152, 179, 183, 188, 191, 202, 206, 209, 214, 222, 234, 237, 242, 252], "named_ent": [2, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 115, 130, 131, 132, 133, 134, 141, 196, 202, 206, 224], "negex": [2, 202, 206], "labeled_depend": [2, 79, 115, 202, 206], "languag": [2, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 117, 118, 119, 120, 122, 123, 126, 131, 132, 134, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 182, 185, 188, 197, 198, 201, 202, 206, 209, 225, 237, 246], "keyword": [2, 116, 117, 148, 237], "dummi": [2, 81, 202, 206], "first": [2, 92, 94, 95, 96, 97, 101, 108, 110, 111, 117, 125, 131, 132, 133, 145, 153, 160, 161, 162, 163, 167, 168, 170, 172, 176, 181, 190, 198, 201, 208, 209, 229, 239, 242, 246, 247, 251], "charact": [2, 13, 19, 37, 45, 81, 96, 98, 114, 119, 125, 127, 135, 145, 146, 172, 173, 174, 181, 182, 185, 191], "last": [2, 86, 100, 105, 106, 123, 124, 151, 152, 179, 209, 235, 250], "string": [2, 9, 13, 19, 28, 37, 44, 45, 50, 60, 63, 78, 81, 114, 125, 127, 133, 135, 146, 148, 151, 152, 168, 170, 174, 176, 180, 188, 189, 191, 195, 196, 197, 198, 209, 228, 229, 250], "associ": [2, 3, 4, 44, 107, 114, 125, 130, 137, 222], "list": [2, 3, 4, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 107, 110, 111, 112, 114, 115, 117, 119, 123, 125, 129, 130, 132, 133, 134, 135, 137, 140, 145, 146, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 176, 177, 180, 182, 190, 191, 196, 197, 205, 209, 214, 220, 222, 224, 225, 229, 235, 237, 241, 246], "vector": [2, 44, 87, 88, 89, 91, 92, 94, 95, 96, 107, 108, 109, 170, 190, 191, 245], "where": [2, 44, 92, 96, 114, 117, 120, 122, 125, 126, 127, 137, 143, 146, 148, 153, 156, 168, 170, 173, 174, 185, 188, 233], "applic": [2, 75, 106, 117, 153, 157, 158, 161, 163, 164, 165, 166, 208, 221, 222, 242, 244], "static": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 119, 120, 122, 126, 131, 132, 134, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185, 209, 212, 224, 225, 238, 246], "sql": [2, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 122, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 196, 212, 214, 220, 224, 229, 231, 232, 233, 234], "creat": [2, 3, 4, 28, 44, 50, 82, 87, 88, 94, 102, 105, 108, 109, 115, 132, 137, 138, 141, 143, 151, 159, 162, 179, 185, 196, 199, 214, 231, 232, 233, 234, 237, 239, 246, 247, 250, 252], "new": [2, 3, 4, 10, 50, 63, 73, 76, 85, 87, 88, 92, 96, 97, 98, 109, 112, 133, 134, 137, 151, 153, 156, 158, 163, 164, 168, 172, 191, 220, 239, 245, 246], "differ": [2, 3, 4, 67, 73, 78, 79, 96, 97, 102, 103, 110, 112, 117, 123, 145, 146, 155, 162, 166, 172, 182, 185, 196, 222, 227, 250], "all": [2, 3, 4, 5, 9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 68, 69, 70, 71, 72, 73, 74, 80, 81, 85, 87, 88, 90, 100, 104, 105, 106, 109, 112, 114, 119, 123, 127, 132, 135, 137, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 176, 181, 185, 190, 192, 208, 209, 222, 225, 239, 241, 246, 251], "should": [2, 3, 4, 11, 28, 44, 50, 67, 73, 74, 75, 80, 86, 89, 94, 95, 101, 108, 110, 117, 119, 126, 127, 131, 132, 137, 141, 145, 146, 151, 152, 160, 172, 181, 196, 198, 205, 209, 224, 231, 232, 239], "newli": [2, 3, 4, 106], "structtyp": [2, 214], "schema": [2, 130, 222, 242], "look": [2, 132, 152, 163, 164, 165, 166, 173, 245], "like": [2, 7, 14, 20, 24, 28, 29, 33, 38, 41, 46, 52, 53, 63, 74, 81, 85, 89, 91, 93, 98, 104, 112, 115, 117, 125, 130, 137, 146, 149, 151, 152, 155, 156, 159, 162, 172, 182, 185, 209, 222, 242, 244, 245], "struct": [2, 189, 195, 197, 229], "containsnul": [2, 44, 187, 189, 195, 197, 229], "true": [2, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 66, 67, 73, 74, 75, 80, 81, 82, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 119, 122, 123, 124, 126, 130, 132, 135, 145, 146, 148, 151, 156, 159, 170, 172, 173, 176, 181, 182, 185, 187, 188, 189, 190, 191, 192, 195, 197, 198, 200, 209, 214, 222, 225, 229, 231, 232, 234, 235, 242, 246, 247], "nullabl": [2, 44, 187, 189, 195, 197, 229], "integ": [2, 67, 73, 74, 75, 100, 105, 106, 189, 195, 197, 209], "map": [2, 11, 44, 86, 89, 109, 114, 137, 143, 151, 152, 172, 189, 195, 197, 209, 214, 220, 229, 237, 245], "kei": [2, 7, 67, 78, 79, 102, 103, 110, 111, 120, 134, 162, 189, 195, 196, 197, 222, 224, 229, 237, 242], "valuecontainsnul": [2, 189, 195, 197, 229], "arrai": [2, 7, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 119, 120, 127, 132, 140, 143, 145, 146, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 179, 180, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 214, 229, 247, 250], "element": [2, 44, 127, 137, 170, 187, 189, 195, 197, 198, 229], "float": [2, 3, 7, 8, 9, 28, 44, 50, 67, 68, 69, 70, 71, 72, 74, 76, 86, 119, 131, 132, 134, 137, 140, 141, 146, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 185, 187, 189, 190, 196, 197, 209], "row": [2, 51, 80, 82, 109, 145, 146, 149, 189, 197, 198, 200, 214, 228, 231], "column": [2, 10, 28, 44, 50, 81, 109, 120, 129, 131, 132, 140, 141, 143, 149, 152, 170, 177, 182, 185, 187, 188, 189, 190, 191, 192, 195, 197, 198, 201, 205, 214, 224, 228, 231, 233, 246], "transform": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 138, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 200, 201, 209, 214, 217, 220, 222, 223, 224, 242, 245, 246, 247, 250, 251, 252], "an": [2, 7, 8, 9, 11, 28, 44, 50, 51, 66, 67, 73, 74, 75, 78, 80, 81, 86, 90, 92, 96, 97, 98, 99, 100, 101, 105, 106, 112, 114, 117, 119, 122, 123, 124, 125, 126, 127, 131, 132, 134, 137, 141, 143, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 179, 182, 185, 188, 189, 190, 191, 192, 195, 196, 197, 198, 201, 209, 213, 214, 216, 220, 222, 229, 231, 232, 233, 234, 241, 243, 245, 246, 247, 249, 250], "alreadi": [3, 115, 117, 131, 132, 133, 182, 183, 196, 224, 250], "load": [3, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 117, 119, 120, 122, 126, 128, 131, 132, 134, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185, 195, 209, 212, 224, 225, 235, 239, 240, 246, 249], "process": [3, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 75, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 112, 115, 117, 119, 130, 131, 132, 141, 146, 151, 152, 153, 156, 161, 165, 168, 170, 182, 185, 187, 188, 189, 190, 191, 195, 197, 199, 201, 209, 222, 229, 242, 245, 246, 247, 248], "byte": [3, 4, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 119, 132, 140, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 195, 222], "origin": [4, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 86, 94, 98, 102, 108, 130, 146, 151, 152, 153, 195, 209], "height": [4, 67, 73, 74, 75, 195, 209], "width": [4, 67, 73, 74, 75, 86, 151, 152, 195, 209], "nchannel": [4, 195], "mode": [4, 28, 44, 50, 60, 68, 132, 141, 173, 189, 195, 197, 222], "imag": [4, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 152, 165, 195, 196, 202, 206, 209, 224], "uri": [4, 225], "pixel": [4, 73], "number": [4, 9, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 61, 68, 69, 70, 71, 72, 74, 78, 79, 82, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 117, 127, 129, 131, 132, 137, 140, 143, 145, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 177, 185, 209, 228, 231, 232], "color": [4, 229], "channel": [4, 67, 73, 74, 75, 172, 209], "opencv": [4, 195], "hubert_for_ctc": [5, 6], "hubertforctc": [5, 6, 7], "wav2vec2_for_ctc": [5, 6], "wav2vec2forctc": [5, 6, 8], "whisper_for_ctc": [5, 6], "whisperforctc": [5, 6, 9], "albert_for_multiple_choic": [5, 12], "albertformultiplechoic": [5, 12, 13], "albert_for_question_answ": [5, 12], "albertforquestionansw": [5, 12, 14], "albert_for_sequence_classif": [5, 12], "albertforsequenceclassif": [5, 12, 15, 30], "albert_for_token_classif": [5, 12], "albertfortokenclassif": [5, 12, 16, 85], "albert_for_zero_shot_classif": [5, 12], "albertforzeroshotclassif": [5, 12, 17], "bart_for_zero_shot_classif": [5, 12], "bartforzeroshotclassif": [5, 12, 17, 18], "bert_for_multiple_choic": [5, 12], "bertformultiplechoic": [5, 12, 19], "bert_for_question_answ": [5, 12], "bertforquestionansw": [5, 12, 13, 20, 51], "bert_for_sequence_classif": [5, 12], "bertforsequenceclassif": [5, 12, 21, 23], "bert_for_token_classif": [5, 12], "bertfortokenclassif": [5, 12, 22], "bert_for_zero_shot_classif": [5, 12], "bertforzeroshotclassif": [5, 12, 23], "camembert_for_question_answ": [5, 12], "camembertforquestionansw": [5, 12, 24], "camembert_for_sequence_classif": [5, 12], "camembertforsequenceclassif": [5, 12, 25, 27], "camembert_for_token_classif": [5, 12], "camembertfortokenclassif": [5, 12, 26], "camembert_for_zero_shot_classif": [5, 12], "camembertforzeroshotclassif": [5, 12, 27], "classifierdlapproach": [5, 12, 28, 44, 246], "classifierdlmodel": [5, 12, 28, 44, 246], "deberta_for_question_answ": [5, 12], "debertaforquestionansw": [5, 12, 29], "deberta_for_sequence_classif": [5, 12], "debertaforsequenceclassif": [5, 12, 27, 30, 32], "deberta_for_token_classif": [5, 12], "debertafortokenclassif": [5, 12, 31], "deberta_for_zero_shot_classif": [5, 12], "debertaforzeroshotclassif": [5, 12, 32], "distil_bert_for_question_answ": [5, 12], "distilbertforquestionansw": [5, 12, 33], "distil_bert_for_sequence_classif": [5, 12], "distilbertforsequenceclassif": [5, 12, 17, 34, 36], "distil_bert_for_token_classif": [5, 12], "distilbertfortokenclassif": [5, 12, 35], "distil_bert_for_zero_shot_classif": [5, 12], "distilbertforzeroshotclassif": [5, 12, 36], "distilbert_for_multiple_choic": [5, 12], "distilbertformultiplechoic": [5, 12, 37], "longformer_for_question_answ": [5, 12], "longformerforquestionansw": [5, 12, 38], "longformer_for_sequence_classif": [5, 12], "longformerforsequenceclassif": [5, 12, 39], "longformer_for_token_classif": [5, 12], "longformerfortokenclassif": [5, 12, 40], "mpnet_for_question_answ": [5, 12], "mpnetforquestionansw": [5, 12, 41], "mpnet_for_sequence_classif": [5, 12], "mpnetforsequenceclassif": [5, 12, 42], "mpnet_for_token_classif": [5, 12], "mpnetfortokenclassif": [5, 12, 43], "multi_classifier_dl": [5, 12], "multiclassifierdlapproach": [5, 12, 28, 44, 222, 242], "multiclassifierdlmodel": [5, 12, 28, 44], "roberta_for_multiple_choic": [5, 12], "robertaformultiplechoic": [5, 12, 45], "roberta_for_question_answ": [5, 12], "robertaforquestionansw": [5, 12, 45, 46, 134], "roberta_for_sequence_classif": [5, 12], "robertaforsequenceclassif": [5, 12, 47, 49], "roberta_for_token_classif": [5, 12], "robertafortokenclassif": [5, 12, 48], "roberta_for_zero_shot_classif": [5, 12], "robertaforzeroshotclassif": [5, 12, 49], "sentiment_dl": [5, 12], "sentimentdlapproach": [5, 12, 28, 44, 50], "sentimentdlmodel": [5, 12, 28, 44, 50], "tapas_for_question_answ": [5, 12], "tapasforquestionansw": [5, 12, 51], "xlm_roberta_for_multiple_choic": [5, 12], "xlmrobertaformultiplechoic": [5, 12, 52], "xlm_roberta_for_question_answ": [5, 12], "xlmrobertaforquestionansw": [5, 12, 53], "xlm_roberta_for_sequence_classif": [5, 12], "xlmrobertaforsequenceclassif": [5, 12, 54, 56], "xlm_roberta_for_token_classif": [5, 12], "xlmrobertafortokenclassif": [5, 12, 43, 55], "xlm_roberta_for_zero_shot_classif": [5, 12], "xlmrobertaforzeroshotclassif": [5, 12, 56], "xlnet_for_sequence_classif": [5, 12], "xlnetforsequenceclassif": [5, 12, 57], "xlnet_for_token_classif": [5, 12], "xlnetfortokenclassif": [5, 12, 58], "extractor": [5, 59, 122, 126, 179], "spanbert_coref": [5, 62], "spanbertcorefmodel": [5, 62, 63], "blip_for_question_answ": [5, 64], "blipforquestionansw": [5, 64, 65], "clip_for_zero_shot_classif": [5, 64], "clipforzeroshotclassif": [5, 64, 65, 66, 68, 69, 70, 71, 72], "convnext_for_image_classif": [5, 64], "convnextforimageclassif": [5, 64, 67], "janus_for_multimod": [5, 64], "janusformultimod": [5, 64, 68], "llava_for_multimod": [5, 64], "llavaformultimod": [5, 64, 69], "mllama_for_multimod": [5, 64], "mllamaformultimod": [5, 64, 70], "phi3_vision_for_multimod": [5, 64], "phi3vis": [5, 64, 71], "qwen2vl_transform": [5, 64], "qwen2vltransform": [5, 64, 72], "swin_for_image_classif": [5, 64], "swinforimageclassif": [5, 64, 73], "vision_encoder_decoder_for_image_capt": [5, 64], "visionencoderdecoderforimagecapt": [5, 64, 74], "vit_for_image_classif": [5, 64], "vitforimageclassif": [5, 64, 75], "dependency_pars": [5, 77, 225, 251], "dependencyparserapproach": [5, 77, 78, 232, 252], "dependencyparsermodel": [5, 77, 78, 79, 115], "typed_dependency_pars": [5, 77], "typeddependencyparserapproach": [5, 77, 78, 79], "typeddependencyparsermodel": [5, 77, 79, 115], "albert_embed": [5, 84], "albertembed": [5, 16, 84, 85], "auto_gguf_embed": [5, 84], "autoggufembed": [5, 84, 86], "bert_embed": [5, 84], "bertembed": [5, 84, 87, 91, 97, 104, 132, 190], "bert_sentence_embed": [5, 84], "bertsentenceembed": [5, 44, 50, 84, 88, 103, 111], "bge_embed": [5, 84], "bgeembed": [5, 84, 89], "camembert_embed": [5, 84], "camembertembed": [5, 84, 90], "chunk_embed": [5, 84], "chunkembed": [5, 84, 91, 190], "deberta_embed": [5, 84], "debertaembed": [5, 84, 92], "distil_bert_embed": [5, 84], "distilbertembed": [5, 84, 93], "doc2vec": [5, 84], "doc2vecapproach": [5, 84, 94], "doc2vecmodel": [5, 84, 94], "e5_embed": [5, 84], "e5embed": [5, 84, 95, 99, 101, 170], "elmo_embed": [5, 84], "elmoembed": [5, 84, 96], "instructor_embed": [5, 84], "instructorembed": [5, 84, 97], "longformer_embed": [5, 84], "longformerembed": [5, 84, 98], "mpnet_embed": [5, 84], "mpnetembed": [5, 84, 99], "mxbai_embed": [5, 84], "mxbaiembed": [5, 84, 100], "nomic_embed": [5, 84], "nomicembed": [5, 84, 101], "roberta_embed": [5, 84], "robertaembed": [5, 84, 102, 110], "roberta_sentence_embed": [5, 84], "robertasentenceembed": [5, 84, 103], "sentenceembed": [5, 28, 44, 50, 84, 104, 109, 190], "snowflake_embed": [5, 84], "snowflakeembed": [5, 84, 105], "uae_embed": [5, 84], "uaeembed": [5, 84, 106], "universal_sentence_encod": [5, 84], "universalsentenceencod": [5, 28, 44, 50, 84, 107, 222, 242, 246], "word2vec": [5, 84, 94], "word2vecapproach": [5, 84, 108], "word2vecmodel": [5, 84, 108], "wordembeddingsmodel": [5, 84, 91, 104, 109, 115, 131, 132, 133, 190], "xlm_roberta_embed": [5, 84], "xlmrobertaembed": [5, 84, 110], "xlm_roberta_sentence_embed": [5, 84], "xlmrobertasentenceembed": [5, 84, 111], "xlnet_embed": [5, 84], "xlnetembed": [5, 84, 112], "entity_rul": [5, 113], "entityrulerapproach": [5, 113, 114], "entityrulermodel": [5, 113, 114], "yake_keyword_extract": [5, 116], "yakekeywordextract": [5, 116, 117], "language_detector_dl": [5, 118], "languagedetectordl": [5, 118, 119], "big_text_match": [5, 121], "bigtextmatch": [5, 121, 122, 126], "bigtextmatchermodel": [5, 121, 122], "date_match": [5, 121], "datematch": [5, 76, 121, 123], "datematcherutil": [5, 121, 123, 124], "multi_date_match": [5, 121], "multidatematch": [5, 76, 121, 123, 124], "regex_match": [5, 121], "regexmatch": [5, 121, 125], "regexmatchermodel": [5, 121, 125], "text_match": [5, 121], "textmatch": [5, 121, 122, 126, 179], "textmatchermodel": [5, 121, 122, 126], "ner_approach": [5, 128], "nerapproach": [5, 128, 129, 131, 132], "ner_convert": [5, 128], "nerconvert": [5, 91, 128, 130, 131, 132, 222, 242], "ner_crf": [5, 128], "nercrfapproach": [5, 128, 131, 132], "nercrfmodel": [5, 128, 131, 132], "ner_dl": [5, 128], "nerdlapproach": [5, 128, 131, 132, 231, 252], "nerdlmodel": [5, 115, 128, 130, 131, 132, 133, 222, 225, 242], "ner_overwrit": [5, 128], "neroverwrit": [5, 128, 133], "zero_shot_ner_model": [5, 128], "zeroshotnermodel": [5, 128, 134], "openai_complet": [5, 136], "openaicomplet": [5, 136, 137], "openai_embed": [5, 136], "openaiembed": [5, 136, 138], "classifier_encod": [5, 139], "classifierencod": [5, 28, 44, 50, 139, 140], "evaluation_dl_param": [5, 139], "evaluationdlparam": [5, 28, 44, 50, 132, 139, 141], "perceptron": [5, 77, 78, 142], "perceptronapproach": [5, 142, 143, 233, 252], "perceptronmodel": [5, 11, 78, 79, 115, 131, 142, 143, 231], "sentence_detector": [5, 51, 134, 144], "sentencedetector": [5, 11, 28, 51, 63, 78, 79, 88, 91, 103, 107, 111, 115, 117, 120, 125, 127, 131, 132, 133, 134, 143, 144, 145, 146, 176, 179, 199, 201, 209, 231, 246, 247], "sentencedetectorparam": [5, 144, 145], "sentence_detector_dl": [5, 144, 160], "sentencedetectordlapproach": [5, 144, 146], "sentencedetectordlmodel": [5, 144, 146, 160], "sentiment_detector": [5, 147], "sentimentdetector": [5, 147, 148], "sentimentdetectormodel": [5, 147, 148], "vivekn_senti": [5, 147], "viveknsentimentapproach": [5, 147, 148, 149], "viveknsentimentmodel": [5, 147, 149], "auto_gguf_model": [5, 86, 150], "autoggufmodel": [5, 150, 151], "auto_gguf_vision_model": [5, 150], "autoggufvisionmodel": [5, 150, 152], "bart_transform": [5, 150], "barttransform": [5, 150, 153], "cohere_transform": [5, 150], "coheretransform": [5, 150, 154], "cpm_transform": [5, 150], "cpmtransform": [5, 150, 155], "gpt2_transform": [5, 150], "gpt2transform": [5, 150, 156], "llama2_transform": [5, 150], "llama2transform": [5, 150, 157], "llama3_transform": [5, 150], "llama3transform": [5, 150, 158], "m2m100_transform": [5, 150], "m2m100transform": [5, 150, 159], "marian_transform": [5, 150], "mariantransform": [5, 60, 150, 160], "mistral_transform": [5, 150], "mistraltransform": [5, 150, 161], "nllb_transform": [5, 150], "nllbtransform": [5, 150, 162], "olmo_transform": [5, 150], "olmotransform": [5, 150, 163], "phi2_transform": [5, 150], "phi2transform": [5, 150, 164], "phi3_transform": [5, 150], "phi3transform": [5, 150, 165], "qwen_transform": [5, 150], "qwentransform": [5, 150, 166], "starcoder_transform": [5, 150], "starcodertransform": [5, 150, 167], "t5_transform": [5, 150], "t5transform": [5, 150, 168], "document_similarity_rank": [5, 169], "documentsimilarityrankerapproach": [5, 169, 170], "documentsimilarityrankerfinish": [5, 169, 170], "documentsimilarityrankermodel": [5, 169, 170], "context_spell_check": [5, 171], "contextspellcheckerapproach": [5, 171, 172, 173, 174], "contextspellcheckermodel": [5, 171, 172, 173, 174], "norvig_sweet": [5, 171], "norvigsweetingapproach": [5, 171, 172, 173, 174, 252], "norvigsweetingmodel": [5, 171, 172, 173, 174], "symmetric_delet": [5, 171], "symmetricdeleteapproach": [5, 171, 172, 173, 174, 252], "symmetricdeletemodel": [5, 171, 172, 173, 174], "chunk_token": [5, 178], "chunktoken": [5, 178, 179], "chunktokenizermodel": [5, 178, 179], "recursive_token": [5, 178], "recursivetoken": [5, 178, 180], "recursivetokenizermodel": [5, 178, 180], "regex_token": [5, 178], "regextoken": [5, 178, 181, 185, 247], "tokenizermodel": [5, 122, 178, 179, 182], "word_segment": [5, 184], "wordsegmenterapproach": [5, 184, 185], "wordsegmentermodel": [5, 184, 185], "inputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 200, 201, 202, 205], "name": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 200, 201, 205, 209, 212, 214, 219, 222, 224, 225, 228, 229, 231, 233, 237, 242, 246], "outputannotatortyp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 195, 197, 198, 200, 201, 202, 205, 215, 217], "setparam": [5, 10, 169, 170, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 201, 202, 204], "regexpars": [5, 11], "setregexpars": [5, 11], "entitynam": [5, 76], "setentitynam": [5, 76], "chunkoverlap": [5, 80], "chunksiz": [5, 80], "explodesplit": [5, 80, 82], "keepsepar": [5, 80], "patternsareregex": [5, 80], "setchunkoverlap": [5, 80], "setchunks": [5, 80], "setexplodesplit": [5, 80, 82], "setkeepsepar": [5, 80], "setpatternsareregex": [5, 80], "setsplitpattern": [5, 80, 178, 182], "settrimwhitespac": [5, 80, 82, 178, 181], "splitpattern": [5, 80, 178, 182], "trimwhitespac": [5, 80, 82, 178, 181], "action": [5, 81], "encod": [5, 28, 59, 60, 65, 68, 69, 70, 71, 72, 74, 81, 87, 88, 92, 97, 98, 101, 107, 134, 153, 159, 160, 162, 222], "lowercas": [5, 59, 60, 81, 135, 181, 185, 186, 188], "pattern": [5, 11, 60, 61, 80, 81, 114, 123, 125, 135, 173, 174, 178, 181, 182, 184, 185, 198], "polici": [5, 81], "replac": [5, 75, 81, 92, 98, 119, 120, 133, 146, 153, 173, 174, 208, 246], "setact": [5, 81], "setencod": [5, 59, 60, 81], "setlowercas": [5, 59, 60, 81, 135, 186, 188, 201], "setpattern": [5, 81, 178, 181, 184, 185], "setpolici": [5, 81], "setreplac": [5, 81], "numtoken": [5, 82], "setnumtoken": [5, 82], "settokenoverlap": [5, 82], "tokenoverlap": [5, 82], "delimit": [5, 13, 19, 37, 45, 109, 114, 115, 120, 121, 125, 127, 131, 135, 148, 181, 200, 231, 233], "entitytyp": [5, 115], "explodeent": [5, 115], "includeedg": [5, 115], "maxsentences": [5, 115], "mergeent": [5, 115], "mergeentitiesiobformat": [5, 115], "minsentences": [5, 115], "optionalinputannotatortyp": [5, 113, 114, 115, 202, 205], "posmodel": [5, 115], "relationshiptyp": [5, 115], "roottoken": [5, 115], "setdelimit": [5, 115, 121, 125, 127], "setdependencyparsermodel": [5, 115], "setentitytyp": [5, 115], "setexplodeent": [5, 115], "setincludeedg": [5, 115], "setmaxsentences": [5, 64, 65, 68, 69, 70, 71, 72, 115], "setmergeent": [5, 115], "setmergeentitiesiobformat": [5, 115], "setminsentences": [5, 115], "setposmodel": [5, 115], "setrelationshiptyp": [5, 115], "setroottoken": [5, 115], "settypeddependencyparsermodel": [5, 115], "dictionari": [5, 109, 117, 120, 125, 131, 133, 134, 135, 147, 148, 171, 173, 174, 222, 237], "formcol": [5, 120, 232], "lemmacol": [5, 120, 232], "setdictionari": [5, 120, 147, 148, 171, 173, 174], "setformcol": [5, 120], "setlemmacol": [5, 120], "enablecumul": [5, 127], "n": [5, 68, 69, 70, 71, 72, 86, 111, 117, 127, 130, 131, 132, 137, 145, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 180, 196, 200, 209, 214, 224, 239], "setenablecumul": [5, 127], "setn": [5, 91, 127], "cleanuppattern": [5, 81, 135], "maxlength": [5, 135, 144, 145, 146, 178, 181, 182], "minlength": [5, 135, 144, 145, 146, 178, 181, 182], "setcleanuppattern": [5, 135], "setmaxlength": [5, 135, 144, 145, 146, 178, 181, 182], "setminlength": [5, 135, 144, 145, 146, 178, 181, 182], "setslangdictionari": [5, 135], "slangdictionari": [5, 135], "slangmatchcas": [5, 135], "casesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112, 121, 122, 126, 171, 173, 176, 202, 209], "loaddefaultstopword": [5, 116, 117, 176], "setcasesensit": [5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 91, 93, 98, 102, 110, 121, 122, 126, 131, 171, 173, 176, 190, 201, 202, 209], "setlocal": [5, 176], "setstopword": [5, 116, 117, 133, 176], "stopword": [5, 116, 117, 133, 176], "getgraphfil": [5, 177], "getgraphfold": [5, 177], "gethiddenunitsnumb": [5, 177], "getinputcol": [5, 169, 170, 177, 186, 190, 191, 202, 205], "getlabelcolumn": [5, 128, 129, 177], "graphfil": [5, 177], "graphfold": [5, 128, 132, 171, 172, 177], "hiddenunitsnumb": [5, 177], "inputcol": [5, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 42, 44, 46, 47, 49, 50, 53, 54, 56, 57, 104, 119, 169, 170, 177, 186, 187, 189, 190, 191, 192, 195, 197, 198, 202, 205, 228], "inputcolsvalid": [5, 177, 202, 205], "labelcolumn": [5, 28, 44, 50, 128, 129, 131, 132, 139, 140, 177], "setgraphfil": [5, 177], "setgraphfold": [5, 128, 132, 171, 172, 177], "sethiddenunitsnumb": [5, 177], "setinputcol": [5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 200, 201, 202, 205, 222, 227, 228, 242, 246, 247], "setlabelcolumn": [5, 28, 44, 50, 128, 129, 131, 132, 139, 140, 177, 222, 242, 246], "avail": [5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 117, 119, 120, 123, 125, 131, 132, 143, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 185, 209, 224, 225, 242, 249], "configprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 84, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 118, 119, 128, 132, 139, 140, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172], "loadsavedmodel": [6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "setconfigprotobyt": [6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 84, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 107, 110, 111, 112, 118, 119, 128, 132, 139, 140, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172], "getismultilingu": [6, 9], "getlanguag": [6, 9], "ismultilingu": [6, 9], "setlanguag": [6, 9], "settask": [6, 9, 150, 153, 156, 168, 202, 209], "concern": [7, 8, 9, 15, 66, 67, 73, 74, 75, 76, 85], "classnam": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 119, 120, 122, 125, 126, 131, 132, 134, 135, 137, 138, 143, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 179, 180, 182, 185, 200, 203, 204, 211, 217], "java_model": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 119, 120, 122, 125, 126, 131, 132, 134, 135, 137, 138, 143, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 179, 180, 182, 185, 194, 200, 204, 220], "hubert": 7, "head": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 63, 80, 85, 112, 130, 131, 132, 152, 196, 214, 224, 229, 246], "top": [7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 85, 117, 137, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 197, 209, 229, 239], "connectionist": [7, 8, 9], "tempor": [7, 8, 9], "classif": [7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 66, 67, 73, 75, 85, 89, 95, 97, 107, 149, 153, 168, 209, 229, 237, 246], "ctc": [7, 8, 9], "wa": [7, 8, 15, 16, 18, 21, 22, 23, 28, 30, 31, 32, 34, 35, 36, 39, 40, 43, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 73, 80, 81, 82, 90, 92, 93, 98, 102, 103, 109, 110, 111, 117, 137, 138, 149, 153, 156, 157, 159, 161, 164, 167, 172, 224, 246, 247], "propos": [7, 8, 67, 73, 85, 90, 92, 93, 99, 102, 103, 106, 110, 111, 112, 162], "self": [7, 8, 73, 85, 98, 160], "supervis": [7, 8, 9, 85, 95, 96, 101, 107, 117, 153, 156, 159, 165], "speech": [7, 8, 9, 11, 90, 142, 143, 185, 233, 237, 252], "represent": [7, 8, 73, 85, 87, 88, 93, 94, 95, 96, 108, 109, 110, 111, 112, 130, 168, 170, 200, 213, 228], "learn": [7, 8, 28, 44, 50, 68, 70, 76, 85, 93, 94, 96, 102, 103, 107, 108, 110, 111, 112, 117, 131, 132, 140, 146, 151, 152, 153, 155, 156, 157, 158, 163, 164, 165, 166, 168, 172, 209, 222, 229, 244], "mask": [7, 73, 92, 99, 110, 111, 112, 153, 181], "predict": [7, 9, 66, 73, 92, 99, 132, 151, 152, 156, 168, 209, 222, 242], "hidden": [7, 14, 16, 20, 22, 24, 26, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 85, 96, 112, 177], "unit": [7, 156, 157, 177], "wei": [7, 73], "ning": 7, "hsu": 7, "benjamin": [7, 90], "bolt": 7, "yao": 7, "hung": 7, "tsai": 7, "kushal": 7, "lakhotia": 7, "ruslan": 7, "salakhutdinov": 7, "abdelrahman": [7, 8], "moham": [7, 8], "take": [7, 8, 17, 18, 23, 36, 49, 51, 56, 80, 82, 90, 99, 115, 126, 152, 162, 173, 176, 182, 199, 231, 245, 246, 250, 251], "transcrib": [7, 8, 9], "text": [7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 137, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 202, 208, 209, 210, 213, 214, 222, 228, 229, 231, 232, 233, 234, 237, 242, 245, 246, 247, 251, 252], "need": [7, 8, 9, 11, 17, 78, 79, 89, 93, 95, 101, 102, 109, 114, 115, 117, 120, 123, 125, 131, 132, 135, 141, 143, 146, 149, 151, 152, 156, 159, 162, 164, 172, 173, 174, 181, 182, 187, 195, 196, 198, 222, 225, 231, 232, 233, 239, 242, 244, 246, 247, 250, 252], "provid": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 119, 120, 122, 123, 124, 125, 126, 131, 132, 135, 143, 146, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 185, 196, 209, 214, 224, 229, 247], "pre": [7, 8, 9, 28, 44, 50, 66, 75, 87, 88, 92, 93, 95, 96, 99, 101, 107, 132, 141, 153, 168, 182, 189, 191, 197, 201, 232, 246], "processor": [7, 8], "m1": [7, 8], "due": [7, 8, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 85, 98, 106, 153], "instruct": [7, 8, 70, 72, 84, 97, 155, 158, 165], "xla": [7, 8], "can": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 125, 130, 131, 132, 133, 134, 137, 138, 143, 145, 146, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 183, 185, 189, 190, 197, 198, 199, 200, 205, 209, 213, 222, 224, 225, 229, 231, 232, 233, 239, 242, 244, 246, 247, 249, 250, 251, 252], "companion": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 68, 69, 70, 71, 72, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 119, 120, 131, 132, 134, 143, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 185], "speechtotext": [7, 8, 9], "setoutputcol": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 200, 201, 202, 205, 222, 227, 228, 242, 246, 247], "asr_hubert_large_ls960": [7, 9], "For": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 134, 135, 137, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 182, 185, 189, 190, 191, 197, 198, 201, 209, 222, 224, 225, 234, 239, 242, 243, 245, 246, 247, 248, 249, 250], "pleas": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 69, 71, 72, 73, 74, 75, 78, 79, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 119, 120, 122, 123, 125, 126, 131, 132, 135, 143, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 179, 180, 185, 189, 197, 199, 225, 239, 243, 244, 248, 251], "see": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 134, 135, 137, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 182, 185, 189, 190, 191, 192, 197, 198, 201, 209, 212, 222, 224, 225, 234, 242, 243, 244, 249, 251, 252], "hub": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 119, 120, 131, 132, 143, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 185, 225, 237, 240], "To": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 86, 87, 90, 92, 93, 98, 102, 106, 110, 112, 117, 123, 125, 143, 145, 151, 152, 153, 156, 163, 168, 185, 192, 196, 199, 222, 242, 250], "which": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 85, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 100, 102, 104, 105, 106, 107, 108, 110, 112, 115, 117, 123, 124, 125, 132, 134, 135, 137, 138, 145, 146, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 173, 181, 185, 190, 196, 209, 214, 225, 231, 232, 246, 247], "compat": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 87, 90, 92, 93, 98, 102, 107, 110, 112, 132, 190, 195, 225], "import": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 135, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 195, 196, 197, 199, 200, 201, 214, 222, 224, 229, 231, 232, 233, 234, 235, 239, 242, 245, 246, 249, 250, 251, 252], "them": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 87, 90, 92, 93, 98, 102, 110, 112, 114, 115, 117, 123, 125, 146, 158, 160, 167, 172, 176, 185, 195, 199, 201, 239, 246, 247], "5669": [7, 8, 9, 66, 67, 73, 74, 75, 90], "more": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 90, 93, 95, 96, 97, 104, 110, 111, 115, 117, 123, 127, 130, 134, 137, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 173, 181, 182, 189, 190, 191, 197, 198, 201, 209, 222, 224, 229, 234, 242, 243, 244, 246, 249, 252], "extend": [7, 8, 9, 11, 28, 44, 50, 63, 66, 67, 68, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 87, 88, 90, 91, 93, 96, 102, 104, 107, 109, 110, 112, 117, 119, 120, 123, 124, 125, 126, 127, 131, 132, 134, 135, 141, 143, 145, 146, 148, 149, 151, 152, 153, 160, 168, 170, 172, 173, 175, 176, 180, 182, 185, 189, 190, 191, 197, 198, 201, 224], "exampl": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 138, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 214, 222, 224, 225, 229, 231, 232, 233, 234, 235, 240, 242, 245, 246, 247, 249, 250, 251, 252], "hubertforctctestspec": 7, "paper": [7, 9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 110, 111, 112, 117, 146, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 185, 209, 234, 252], "abstract": [7, 9, 67, 73, 75, 85, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 106, 107, 110, 111, 112, 117, 153, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 234, 252], "approach": [7, 9, 67, 73, 102, 103, 106, 112, 117, 129, 131, 132, 134, 146, 148, 153, 156, 157, 158, 161, 164, 168, 172, 173, 174, 203, 249], "challeng": [7, 44, 73, 93, 96, 97, 102, 103, 106, 117, 161, 162, 164], "three": [7, 172, 183], "uniqu": [7, 137, 138, 153, 212], "problem": [7, 17, 44, 85, 96, 99, 106, 153, 168, 172, 185], "multipl": [7, 9, 13, 19, 37, 44, 45, 75, 90, 114, 117, 123, 145, 153, 158, 162, 166, 167, 170, 182, 214, 222, 231], "sound": [7, 80], "each": [7, 8, 17, 18, 23, 27, 28, 32, 36, 44, 49, 50, 56, 67, 73, 74, 75, 80, 89, 92, 94, 95, 99, 101, 104, 108, 109, 114, 115, 117, 120, 122, 123, 125, 126, 127, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 145, 146, 148, 152, 153, 166, 170, 172, 173, 174, 181, 182, 185, 189, 197, 208, 209, 214, 220, 228, 233, 247], "input": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 138, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 205, 209, 214, 220, 224, 228, 231, 232, 233, 234, 246, 247, 250, 252], "utter": 7, "lexicon": 7, "phase": [7, 93, 153], "have": [7, 17, 18, 23, 28, 36, 44, 49, 50, 56, 82, 85, 90, 93, 97, 102, 103, 109, 117, 125, 127, 130, 131, 132, 133, 137, 143, 145, 146, 152, 154, 155, 156, 157, 158, 162, 163, 164, 165, 166, 174, 183, 201, 239, 246, 247, 250], "variabl": [7, 94, 108], "length": [7, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 68, 69, 70, 71, 72, 74, 80, 82, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 112, 127, 135, 137, 145, 146, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 181, 182, 209], "explicit": [7, 123, 145, 156], "segment": [7, 63, 67, 73, 93, 102, 184, 185, 237], "deal": [7, 196, 250], "we": [7, 8, 9, 28, 44, 67, 73, 75, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 110, 111, 112, 117, 131, 132, 135, 137, 146, 151, 152, 153, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 182, 196, 214, 239, 242, 245, 246, 247, 250, 251, 252], "bert": [7, 15, 19, 20, 21, 22, 23, 25, 27, 30, 34, 35, 39, 42, 47, 51, 54, 57, 74, 85, 87, 88, 92, 93, 98, 99, 102, 103, 110, 111, 112, 132, 133, 134, 153, 168], "offlin": [7, 222], "step": [7, 28, 44, 50, 94, 108, 132, 141, 222, 242, 246], "align": [7, 165, 166], "target": [7, 107, 120, 151, 152, 153, 159, 160, 162, 182, 188, 196, 209, 224], "label": [7, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 73, 75, 78, 79, 95, 106, 114, 119, 129, 130, 131, 132, 134, 140, 141, 148, 149, 168, 172, 177, 185, 209, 222, 231, 242, 246], "loss": [7, 85, 93, 97, 132, 168, 242], "A": [7, 8, 50, 63, 67, 68, 69, 70, 71, 72, 85, 102, 103, 109, 114, 117, 120, 122, 125, 126, 127, 134, 135, 137, 138, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 173, 174, 181, 182, 195, 209, 222, 229, 233, 239, 244, 246, 252], "ingredi": 7, "our": [7, 85, 90, 93, 94, 95, 96, 97, 98, 102, 103, 107, 108, 110, 111, 117, 146, 153, 156, 157, 158, 159, 162, 164, 165, 167, 168, 214, 224, 251], "appli": [7, 10, 28, 44, 50, 67, 75, 80, 81, 114, 115, 132, 133, 141, 145, 151, 152, 168, 172, 173, 191, 198, 209, 214, 215, 218, 231], "over": [7, 80, 93, 99, 110, 111, 112, 153, 157, 161, 162, 173, 176, 182, 214, 222, 242], "region": 7, "onli": [7, 9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 89, 95, 96, 99, 107, 112, 123, 125, 135, 137, 145, 146, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 180, 185, 199, 208, 209, 231], "forc": [7, 86, 151, 152, 209, 228], "combin": [7, 17, 18, 23, 27, 32, 36, 49, 56, 74, 93, 98, 109, 117, 153, 159, 162, 168, 172, 173, 185], "acoust": 7, "continu": [7, 130, 151, 152, 156, 170, 192, 209, 242], "reli": [7, 78, 79, 112, 117], "primarili": [7, 106], "consist": [7, 65, 68, 69, 70, 71, 72, 85, 92, 98, 125, 143, 149, 164, 185, 200, 233], "unsupervis": [7, 110, 111, 112, 117, 153, 156], "rather": [7, 67, 86, 151, 152, 209], "than": [7, 44, 50, 67, 86, 93, 94, 97, 108, 110, 111, 112, 117, 119, 127, 131, 137, 151, 152, 155, 156, 157, 158, 159, 160, 164, 165, 167, 173, 174, 209, 246], "intrins": [7, 67], "qualiti": [7, 73, 105, 106, 156, 158, 159, 162, 165, 167], "assign": [7, 44, 114, 133, 148], "simpl": [7, 60, 87, 88, 114, 156, 247], "k": [7, 9, 68, 69, 70, 71, 72, 74, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 190, 209], "mean": [7, 9, 11, 17, 18, 23, 27, 32, 36, 44, 49, 56, 67, 68, 69, 70, 71, 72, 73, 74, 75, 86, 100, 105, 106, 110, 117, 119, 123, 124, 137, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 181, 190, 196, 198, 209, 246, 247, 250], "teacher": 7, "100": [7, 28, 44, 51, 75, 94, 108, 110, 117, 137, 146, 159, 200], "two": [7, 44, 69, 70, 71, 72, 73, 78, 79, 85, 92, 94, 107, 108, 109, 110, 111, 115, 152, 165, 183, 198, 229, 231, 246], "iter": [7, 78, 79, 85, 94, 108, 143, 158, 185, 222, 242], "either": [7, 9, 28, 50, 75, 79, 90, 91, 104, 114, 117, 119, 125, 148, 149, 168, 185, 188, 196, 197, 200, 224, 247], "match": [7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 68, 81, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 112, 114, 121, 122, 123, 124, 125, 126, 135, 143, 145, 153, 156, 158, 167, 182, 185, 188, 198, 208, 209, 245], "improv": [7, 85, 87, 88, 90, 92, 96, 97, 102, 103, 106, 110, 111, 131, 132, 156, 157, 158, 162, 163, 164, 165, 166, 168, 170, 251], "upon": [7, 82, 117, 151, 152, 167, 209], "state": [7, 14, 16, 20, 22, 24, 26, 28, 29, 31, 33, 35, 38, 40, 41, 43, 44, 46, 48, 50, 52, 53, 55, 58, 67, 73, 75, 85, 87, 88, 90, 95, 96, 97, 98, 99, 102, 103, 106, 112, 117, 132, 153, 156, 157, 162, 163, 164, 165, 168, 197, 243, 246], "art": [7, 28, 44, 67, 73, 75, 85, 87, 88, 90, 95, 96, 97, 98, 99, 102, 103, 106, 112, 117, 132, 153, 156, 162, 163, 164, 165, 168, 197], "wav2vec": [7, 8], "perform": [7, 67, 68, 73, 75, 81, 85, 90, 92, 93, 95, 96, 97, 101, 102, 103, 105, 107, 109, 110, 111, 112, 132, 149, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 170, 173], "librispeech": 7, "960h": 7, "libri": 7, "light": [7, 93, 112, 117, 196, 240, 249, 251], "60": [7, 93, 145, 154, 158], "000h": 7, "benchmark": [7, 9, 70, 75, 85, 92, 93, 95, 96, 110, 111, 153, 155, 157, 158, 161, 162, 164, 165, 167, 168, 237], "10min": 7, "1h": 7, "10h": 7, "100h": 7, "fine": [7, 9, 63, 87, 88, 93, 95, 99, 134, 153, 157, 158, 164, 165, 168, 235], "tune": [7, 9, 63, 70, 87, 88, 93, 95, 99, 134, 153, 157, 158, 164, 165, 168], "subset": [7, 162], "1b": 7, "show": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 195, 197, 200, 201, 214, 225, 229, 231, 232, 233, 234, 235, 242, 245, 246, 247, 251], "19": [7, 76, 89, 95, 101, 127, 233, 235], "13": [7, 10, 11, 63, 110, 111, 115, 143, 164, 167, 191, 235], "rel": [7, 90, 92, 110, 123, 124, 131, 155, 162, 172, 245], "wer": 7, "reduct": [7, 85, 173], "dev": [7, 73, 85, 96, 107], "other": [7, 10, 44, 67, 74, 82, 90, 100, 101, 104, 105, 106, 107, 115, 117, 135, 148, 153, 156, 159, 167, 168, 172, 179, 180, 190, 191, 239, 246], "test": [7, 28, 44, 50, 66, 67, 68, 70, 72, 73, 74, 75, 78, 79, 87, 88, 107, 109, 120, 122, 125, 126, 131, 132, 141, 143, 152, 156, 157, 164, 165, 173, 174, 179, 185, 229, 231, 232, 233, 234, 235, 246, 252], "evalu": [7, 28, 44, 50, 90, 95, 97, 98, 106, 110, 111, 141, 153, 154, 157, 159, 162, 163, 164, 167, 205, 222], "batchsiz": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 68, 69, 70, 71, 72, 84, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112, 128, 132, 139, 140, 153, 160, 171, 172, 202, 209], "size": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 115, 117, 132, 140, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 202, 209, 229, 245, 250, 251], "batch": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 68, 69, 70, 71, 72, 74, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112, 132, 140, 151, 152, 153, 160, 172, 209], "4": [7, 9, 68, 69, 70, 71, 72, 86, 87, 88, 89, 92, 95, 96, 97, 98, 99, 101, 109, 125, 131, 133, 137, 138, 143, 151, 152, 153, 156, 159, 162, 165, 167, 183, 232, 235, 239], "refer": [7, 9, 63, 67, 69, 70, 71, 72, 73, 75, 85, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 110, 111, 112, 117, 134, 137, 138, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 185, 188, 189, 197, 209, 212, 239, 240, 246, 248, 249], "ml": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 70, 73, 74, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 137, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 195, 196, 197, 199, 200, 201, 222, 242, 246, 250], "audio_cont": [7, 8, 9, 187], "setstag": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 138, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 188, 190, 200, 201, 246, 247], "processedaudiofloat": [7, 8, 9], "createdatafram": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 138, 143, 145, 146, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 197, 200, 201, 214, 222, 242, 245, 246, 247, 251], "rawfloat": [7, 8, 9], "todf": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 138, 143, 145, 146, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 195, 197, 200, 201, 214, 245, 246, 247, 251], "fit": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 141, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 188, 190, 196, 199, 200, 201, 215, 220, 222, 242, 246, 247, 250], "select": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 76, 86, 91, 93, 109, 115, 117, 119, 131, 132, 134, 137, 138, 149, 151, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 180, 185, 187, 189, 191, 192, 195, 197, 200, 201, 214, 222, 242, 247], "truncat": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 66, 67, 68, 70, 73, 74, 75, 76, 78, 79, 81, 86, 109, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 188, 189, 191, 192, 197, 200, 201, 214, 229, 233, 245, 246, 247], "mister": [7, 8], "quilter": [7, 8, 9], "THE": [7, 8, 81], "apostl": [7, 8, 9], "OF": [7, 8, 85], "midl": [7, 8], "clase": [7, 8], "AND": [7, 8], "glad": [7, 8, 9], "TO": [7, 8, 231, 252], "welcom": [7, 8, 9, 240], "hi": [7, 8, 9, 82, 134, 146, 159], "gospel": [7, 8, 9], "parent": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 195, 197, 198, 200, 201, 205, 209, 212, 228], "undefin": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 195, 197, 198, 200, 201, 205, 209, 212, 228], "doc": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 195, 197, 198, 200, 201, 205, 209, 212, 227, 228, 229, 234, 252], "configproto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 119, 132, 140, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172], "tensorflow": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 117, 119, 132, 140, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172], "get": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 107, 110, 111, 112, 117, 119, 129, 132, 140, 143, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 177, 182, 185, 187, 189, 190, 191, 195, 196, 197, 205, 209, 212, 219, 240, 242, 246, 251, 252], "config_proto": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 107, 110, 111, 112, 119, 132, 140, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172], "serializetostr": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 107, 110, 111, 112, 119, 132, 140, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172], "folder": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 132, 141, 146, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 174, 177, 225, 231, 237], "spark_sess": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "restor": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 119, 120, 122, 126, 131, 132, 134, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185], "lang": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 119, 120, 122, 126, 131, 132, 134, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185, 224, 225, 246, 251], "en": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 112, 114, 115, 119, 120, 122, 126, 131, 132, 134, 143, 146, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185, 224, 225, 232, 246, 251, 252], "remote_loc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 119, 120, 122, 126, 131, 132, 134, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185, 224, 225], "remot": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 119, 120, 122, 126, 131, 132, 134, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185, 224, 225], "address": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 119, 120, 122, 126, 131, 132, 134, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185], "resourc": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 119, 120, 122, 125, 126, 131, 132, 134, 135, 141, 143, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 179, 182, 185, 199, 210, 213, 223, 225, 231, 232, 233, 234, 235, 246, 252], "Will": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 119, 120, 122, 126, 131, 132, 134, 143, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185], "repositori": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 119, 120, 122, 126, 131, 132, 134, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185, 224, 243], "otherwis": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 119, 120, 122, 126, 131, 132, 134, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 176, 182, 185, 188, 209, 222], "b": [7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 107, 110, 111, 112, 119, 122, 126, 130, 131, 132, 133, 134, 140, 145, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 185, 196, 214, 224, 231, 234, 252], "wav2vec2": 8, "framework": [8, 68, 153, 160, 163, 168, 239], "alexei": 8, "baevski": 8, "henri": 8, "zhou": 8, "michael": [8, 179], "auli": 8, "asr_wav2vec2_base_960h": 8, "wav2vec2forctctestspec": 8, "whisper": 9, "automat": [9, 115, 117, 134, 160, 173, 245, 246], "recognit": [9, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 67, 70, 75, 90, 128, 131, 132, 134, 237], "asr": 9, "system": [9, 86, 117, 151, 152, 153, 156, 158, 159, 162, 198, 209], "680": 9, "000": [9, 51, 117, 156, 162, 185, 200], "hour": [9, 82, 123, 124], "multilingu": [9, 110, 111, 154, 159, 162, 166, 185], "multitask": [9, 97, 156], "collect": [9, 70, 106, 117, 157, 164, 222, 242], "web": [9, 63, 81, 90, 156, 165, 222, 242], "It": [9, 15, 17, 18, 21, 23, 27, 28, 30, 32, 34, 36, 39, 44, 47, 49, 50, 51, 54, 56, 57, 66, 67, 68, 73, 74, 80, 81, 87, 88, 90, 92, 93, 94, 98, 102, 103, 108, 110, 111, 114, 117, 127, 149, 152, 153, 155, 160, 164, 166, 170, 172, 173, 174, 180, 191, 196, 225, 229, 239, 245, 250], "well": [9, 65, 69, 71, 75, 78, 79, 80, 95, 107, 110, 111, 117, 137, 153, 154, 167, 200], "translat": [9, 123, 153, 156, 159, 160, 162, 168, 185, 237], "those": [9, 90, 115, 133, 246, 247], "english": [9, 50, 90, 101, 117, 159, 161, 162, 173, 176, 185, 225], "moment": [9, 152, 198], "greedi": [9, 68, 69, 70, 71, 72, 74, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "search": [9, 68, 69, 70, 71, 72, 74, 89, 123, 153, 154, 158, 159, 162, 170, 173, 209], "task": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 67, 68, 73, 75, 85, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 101, 106, 107, 110, 111, 112, 117, 134, 150, 153, 155, 156, 160, 161, 162, 167, 168, 199, 202, 209, 237], "asr_whisper_tiny_opt": 9, "whisperforctctestspec": 9, "robust": [9, 97, 165], "larg": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 67, 69, 70, 71, 72, 73, 74, 75, 80, 82, 85, 86, 92, 93, 95, 96, 99, 106, 110, 111, 112, 117, 119, 122, 126, 132, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 166, 167, 174, 198], "scale": [9, 67, 73, 74, 75, 85, 86, 93, 95, 98, 99, 110, 111, 151, 152, 153, 155, 156, 157, 158, 159, 162, 164, 165, 168, 209], "weak": [9, 95], "studi": [9, 93, 102, 103, 153, 163, 168], "capabl": [9, 66, 73, 93, 112, 154, 156, 158, 161, 165], "simpli": [9, 81, 97, 247], "amount": [9, 75, 107, 117, 126, 151, 152, 156, 166, 185, 196, 209, 250], "transcript": 9, "internet": 9, "when": [9, 10, 11, 15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57, 67, 73, 74, 75, 80, 81, 85, 86, 95, 115, 123, 124, 127, 132, 137, 151, 152, 153, 156, 159, 164, 165, 168, 172, 173, 176, 180, 185, 196, 209, 231, 246, 247, 250], "gener": [9, 28, 44, 67, 68, 69, 70, 71, 72, 73, 74, 85, 86, 89, 91, 93, 95, 97, 98, 101, 104, 106, 112, 115, 117, 131, 132, 134, 137, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 177, 191, 192, 198, 209, 222, 228, 237, 242, 245, 246, 247], "standard": [9, 67, 70, 73, 74, 75, 81, 98, 123, 124, 153, 162, 173, 174, 182, 209], "often": [9, 85, 102, 103, 112], "competit": [9, 110, 111, 117, 159], "prior": [9, 67, 93, 97, 98, 137, 163, 172, 229], "fulli": [9, 101, 224], "zero": [9, 66, 95, 109, 134, 156], "shot": [9, 66, 95, 134, 156], "transfer": [9, 75, 93, 95, 107, 110, 111, 153, 156, 168], "without": [9, 66, 87, 88, 95, 97, 110, 111, 117, 152, 156, 161, 185, 229], "ani": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 89, 94, 95, 97, 107, 108, 114, 117, 132, 156, 159, 168, 172, 190, 191, 225, 237, 243, 246, 247, 252], "compar": [9, 73, 75, 85, 92, 93, 96, 97, 99, 112, 117, 146, 153, 155, 157, 167, 168, 172, 222, 242], "human": [9, 92, 117, 155, 157, 158, 162, 164], "accuraci": [9, 67, 73, 78, 79, 87, 88, 94, 107, 108, 110, 111, 131, 132, 143, 161, 173, 185, 242], "infer": [9, 17, 18, 23, 27, 32, 36, 49, 56, 66, 86, 87, 88, 90, 93, 112, 151, 152, 155, 157, 161, 163, 195], "code": [9, 63, 66, 92, 94, 97, 98, 101, 102, 103, 108, 110, 111, 117, 119, 153, 155, 161, 163, 165, 166, 167, 168, 229, 243, 251], "serv": [9, 73, 243], "foundat": [9, 157, 158], "further": [9, 10, 85, 97, 117, 131, 132, 137, 165, 201], "work": [9, 67, 93, 97, 98, 106, 119, 137, 151, 153, 157, 159, 160, 164, 168, 179, 209, 239, 245, 247, 251], "e": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 79, 81, 95, 96, 97, 98, 99, 114, 115, 131, 132, 153, 156, 159, 160, 165, 168, 170, 172, 176, 200, 209, 222, 242], "g": [9, 11, 13, 15, 16, 19, 21, 22, 25, 26, 30, 31, 34, 35, 37, 39, 40, 42, 43, 45, 47, 48, 54, 55, 57, 58, 67, 79, 81, 95, 96, 97, 99, 115, 131, 132, 153, 156, 160, 165, 168, 172, 176, 200, 209, 222, 242], "check": [9, 68, 70, 89, 95, 101, 132, 145, 171, 172, 173, 174, 196, 201, 224, 237, 246, 251], "descript": [9, 79, 97, 104, 117, 123, 157, 164, 173, 180, 208, 210, 237], "minoutputlength": [9, 64, 68, 69, 70, 71, 72, 74, 150, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "minimum": [9, 44, 50, 68, 69, 70, 71, 72, 74, 94, 108, 115, 117, 119, 129, 131, 132, 135, 145, 146, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 181, 182, 209, 231], "sequenc": [9, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 68, 69, 70, 71, 72, 73, 74, 75, 86, 98, 100, 105, 106, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 176, 198, 209], "maxoutputlength": [9, 64, 68, 69, 70, 71, 72, 74, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "maximum": [9, 28, 44, 50, 63, 65, 68, 69, 70, 71, 72, 74, 94, 108, 115, 117, 129, 131, 132, 135, 137, 140, 145, 146, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 181, 182, 209], "dosampl": [9, 64, 68, 69, 70, 71, 72, 74, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "sampl": [9, 68, 69, 70, 71, 72, 74, 137, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "decod": [9, 60, 65, 68, 69, 70, 71, 72, 74, 86, 92, 98, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "temperatur": [9, 64, 68, 69, 70, 71, 72, 74, 136, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "next": [9, 42, 68, 69, 70, 71, 72, 74, 102, 103, 117, 123, 124, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "probabl": [9, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 68, 69, 70, 71, 72, 74, 117, 137, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 173, 209], "topk": [9, 64, 68, 69, 70, 71, 72, 74, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "highest": [9, 68, 69, 70, 71, 72, 74, 137, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 173, 209], "vocabulari": [9, 68, 69, 70, 71, 72, 74, 94, 108, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 209], "keep": [9, 68, 69, 70, 71, 72, 74, 75, 80, 86, 117, 135, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "filter": [9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 110, 111, 117, 130, 131, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 176, 209, 214, 225], "topp": [9, 64, 68, 69, 70, 71, 72, 74, 136, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "most": [9, 68, 69, 70, 71, 72, 74, 80, 82, 90, 93, 98, 99, 117, 132, 137, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "add": [9, 68, 69, 70, 71, 72, 74, 109, 123, 124, 145, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 182, 198, 209, 237, 246], "top_p": [9, 68, 69, 70, 71, 72, 74, 137, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "higher": [9, 68, 69, 70, 71, 72, 74, 109, 117, 137, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "kept": [9, 68, 69, 70, 71, 72, 74, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "repetitionpenalti": [9, 64, 68, 69, 70, 71, 72, 74, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "repetit": [9, 68, 69, 70, 71, 72, 74, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "penalti": [9, 68, 69, 70, 71, 72, 74, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "norepeatngrams": [9, 64, 68, 69, 70, 71, 72, 74, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "ngram": [9, 68, 69, 70, 71, 72, 74, 91, 127, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "occur": [9, 68, 69, 70, 71, 72, 74, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "onc": [9, 68, 69, 70, 71, 72, 74, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "beamsiz": [9, 64, 68, 69, 70, 71, 72, 74, 150, 153, 154, 158, 159, 162, 202, 209], "beam": [9, 68, 69, 70, 71, 72, 74, 153, 154, 158, 159, 162, 209], "mr": [9, 159], "middl": [9, 180, 185], "langaug": [9, 224], "xx": [9, 23, 56, 110, 111, 119, 155, 159, 160, 162], "do": [9, 10, 82, 107, 117, 130, 154, 176, 182, 196, 242, 246, 250], "convert": [10, 60, 74, 76, 81, 91, 99, 104, 109, 123, 124, 127, 130, 135, 137, 153, 168, 181, 183, 185, 188, 191, 192, 222, 242, 249], "back": [10, 82, 137, 153], "try": [10, 172, 231], "re": [10, 89, 95, 101, 246], "analysi": [10, 28, 44, 50, 96, 97, 112, 147, 148, 168, 207, 237, 247], "york": [10, 134, 191], "jersei": [10, 191], "aren": [10, 191], "t": [10, 17, 18, 23, 27, 32, 36, 49, 56, 82, 86, 93, 102, 120, 135, 146, 148, 151, 152, 164, 182, 191, 209], "far": [10, 137, 156, 191], "apart": [10, 78, 79, 191], "actual": [10, 127, 191, 201], "id": [10, 44, 61, 68, 69, 70, 71, 72, 81, 110, 114, 137, 138, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 188, 189, 191, 197, 201, 209, 222, 231], "defin": [10, 11, 130, 131, 132, 172, 176, 180, 191, 214, 222, 224, 242, 246, 250], "amongst": [10, 191], "thing": [10, 158, 172, 191], "explain_document_dl": [10, 191, 196, 214, 224], "chunktodoc": 10, "chunkconvert": 10, "explainresult": [10, 191], "selectexpr": [10, 11, 28, 51, 63, 66, 67, 73, 74, 75, 78, 79, 81, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 117, 120, 122, 123, 124, 125, 126, 127, 130, 133, 134, 135, 143, 145, 146, 148, 152, 160, 175, 176, 179, 181, 182, 183, 188, 190, 191, 214, 231, 232, 233, 245, 246, 251], "explod": [10, 11, 28, 51, 63, 78, 79, 80, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 117, 122, 124, 125, 126, 127, 130, 133, 134, 143, 145, 146, 160, 183, 190, 191, 214, 228, 231, 233, 245, 246, 251], "col": [10, 78, 79, 114, 122, 130, 133, 170, 188, 190, 191, 192, 197, 214, 245], "7": [10, 50, 73, 87, 88, 92, 123, 124, 138, 143, 156, 157, 161, 164, 165, 191, 233, 235, 239, 245], "loc": [10, 16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 115, 130, 131, 132, 191, 196, 214, 224, 231], "22": [10, 191, 231, 245], "part": [11, 90, 117, 120, 142, 143, 151, 152, 157, 175, 185, 188, 209, 233, 237, 252], "tag": [11, 28, 44, 50, 81, 90, 129, 130, 131, 132, 133, 142, 143, 185, 214, 222, 231, 233, 234, 237, 252], "order": [11, 80, 97, 112, 114, 117, 123, 151, 152, 153, 157, 164, 173, 174, 196, 201, 209, 214, 246, 247, 250, 252], "meaning": [11, 175], "phrase": [11, 90, 94, 108, 122, 126], "onto": [11, 214, 247], "pars": [11, 77, 78, 79, 90, 114, 120, 123, 124, 172, 173, 174, 196, 198, 200, 224, 229, 231, 233], "regular": [11, 80, 125, 131, 145], "express": [11, 50, 63, 80, 123, 125, 145], "wrap": 11, "angl": [11, 106], "bracket": 11, "easili": [11, 96, 143, 190, 242], "distinguish": 11, "itself": [11, 117, 162, 168, 185, 199, 247], "form": [11, 28, 44, 50, 109, 114, 120, 122, 123, 125, 126, 146, 148, 173, 174, 185, 190, 222, 231, 232, 246], "peter": [11, 98, 120, 135, 143, 146, 173, 175, 231], "piper": [11, 120, 143, 175], "employe": [11, 120, 143, 175], "pick": [11, 120, 143, 175], "peck": [11, 120, 143, 175], "pickl": [11, 120, 143, 175], "pepper": [11, 120, 143, 175], "nnp": [11, 143, 196, 214, 231, 232, 233, 234, 245, 250, 251, 252], "nn": [11, 143, 231, 232, 233, 234, 252], "vbp": [11, 143, 196, 232, 245, 250, 251], "vbg": [11, 143], "IN": [11, 143, 196, 214, 232, 233, 234, 245, 250, 251], "jj": [11, 143, 196, 214, 231, 233, 245, 250, 251, 252], "enclos": 11, "treat": [11, 172, 185], "group": [11, 86, 151, 152, 157, 161, 166, 182, 209], "so": [11, 17, 18, 23, 28, 36, 49, 50, 56, 82, 117, 130, 137, 146, 159, 199, 222, 242], "here": [11, 120, 214, 229, 246], "specif": [11, 51, 68, 78, 79, 81, 87, 88, 93, 106, 107, 115, 117, 132, 153, 156, 158, 159, 162, 167, 170, 177, 196, 199, 222, 250], "noun": [11, 232], "success": [11, 90, 99, 156], "grammar": [11, 151, 152, 202, 209], "parser": [11, 78, 79, 115, 237], "Of": [11, 85, 185], "postag": 11, "11": [11, 76, 110, 111, 123, 124, 127, 143, 235], "21": [11, 123, 124, 133, 143, 235], "35": [11, 143, 154, 235], "39": [11, 133, 138, 143, 233, 235], "52": [11, 133, 143, 233], "58": [11, 73, 143], "choicesdelimit": [12, 13, 19, 37, 45], "setchoicesdelimit": [12, 13, 19, 37, 45], "coalescesent": [12, 14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 118, 119], "getclass": [12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 54, 55, 56, 57, 58, 64, 67, 73, 75, 128, 134], "setcoalescesent": [12, 15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 118, 119], "maxsentencelength": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 68, 69, 70, 71, 72, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 112, 202, 209], "setmaxsentencelength": [12, 18, 48, 49, 56, 84, 94, 108, 202, 209], "dropout": [12, 28, 50, 128, 132], "setdropout": [12, 28, 50, 128, 132, 246], "setshuffleperepoch": [12, 44, 222, 242], "setthreshold": [12, 44, 50, 116, 117, 118, 119, 202, 209, 222, 242], "setverbos": [12, 44, 128, 131, 132, 139, 141], "shuffleperepoch": [12, 44], "threshold": [12, 44, 50, 86, 94, 108, 116, 117, 118, 119, 131, 134, 151, 152, 172, 185, 202, 209], "setthresholdlabel": [12, 50, 118, 119], "thresholdlabel": [12, 50, 118, 119], "classifi": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 67, 73, 117, 190, 246], "dl": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 119, 132, 134, 173, 174], "albert": [13, 14, 15, 16, 85], "choic": [13, 19, 37, 45, 102, 103, 125, 158, 161], "linear": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 73, 86, 151, 152, 156, 209], "layer": [13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 85, 86, 87, 88, 92, 96, 112, 151, 152, 209], "pool": [13, 15, 19, 21, 25, 30, 34, 37, 39, 42, 45, 47, 54, 57, 86, 91, 96, 100, 104, 105, 106, 151, 152, 209], "softmax": [13, 15, 17, 18, 19, 21, 23, 25, 27, 32, 34, 36, 37, 39, 42, 45, 47, 49, 54, 56, 57, 92, 94, 108, 172, 209], "rocstori": [13, 19, 37, 45], "swag": [13, 19, 37, 45], "spanclassifi": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53], "document_quest": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53], "document_context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53], "answer": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 68, 69, 70, 71, 72, 78, 79, 80, 87, 88, 96, 112, 134, 153, 154, 156, 161, 168, 196, 237], "albert_base_uncased_multiple_choic": 13, "allow": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 74, 96, 101, 107, 131, 132, 135, 145, 146, 153, 167, 181, 182, 199, 208], "faster": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 86, 93, 96, 151, 152, 173, 174, 209], "requir": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 68, 69, 70, 71, 72, 75, 76, 78, 79, 85, 88, 89, 92, 95, 96, 101, 107, 110, 111, 117, 132, 135, 149, 172, 183, 185, 188, 190, 195, 201, 237, 240, 245, 246, 247], "8": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 67, 78, 79, 81, 85, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112, 123, 127, 132, 133, 137, 138, 141, 156, 165, 172, 183, 185, 231, 235, 239], "ignor": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 68, 69, 70, 71, 72, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112, 122, 127, 130, 134, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 173, 176, 196, 209], "case": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 79, 80, 81, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112, 114, 119, 122, 126, 135, 154, 157, 164, 172, 173, 176, 182, 188, 209, 231, 232, 246], "512": [13, 15, 17, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36, 37, 39, 42, 45, 47, 49, 51, 54, 56, 57, 82, 89, 95, 96, 99, 100, 101, 105, 106, 160, 209], "question": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 51, 52, 53, 65, 68, 69, 70, 71, 72, 78, 79, 87, 88, 96, 102, 103, 112, 134, 143, 153, 154, 156, 161, 168, 196, 237], "context": [13, 14, 19, 20, 24, 29, 33, 37, 38, 41, 45, 46, 52, 53, 86, 87, 88, 94, 96, 101, 108, 112, 137, 149, 151, 152, 157, 165, 166, 172, 182, 209], "questionansw": [13, 19, 20, 37, 45], "eiffel": [13, 19, 37, 45], "tower": [13, 19, 37, 45], "countri": [13, 19, 37, 45, 172], "germani": [13, 19, 37, 45], "franc": [13, 19, 27, 37, 45, 160], "itali": [13, 19, 37, 45], "split": [13, 19, 37, 45, 66, 67, 73, 74, 75, 80, 82, 86, 145, 146, 151, 152, 160, 179, 180, 181, 185, 209, 228], "bert_base_uncased_multiple_choic": [13, 19, 37], "span": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 153, 167, 168, 229], "squad": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 85, 87, 88, 92, 99, 102, 103, 153], "comput": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 67, 73, 75, 85, 92, 93, 97, 107, 156, 160, 161, 162, 170, 174, 185, 196, 250], "logit": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 32, 33, 34, 36, 38, 39, 41, 42, 46, 47, 49, 52, 53, 54, 56, 57, 137, 151, 152, 209], "albert_base_qa_squad2": 14, "128": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 85, 87, 88, 90, 92, 93, 97, 102, 103, 110, 111, 112, 222, 242], "what": [14, 20, 24, 29, 33, 38, 41, 46, 50, 52, 53, 65, 67, 70, 71, 78, 79, 117, 119, 134, 137, 160, 162, 172, 180, 232, 243], "": [14, 17, 18, 20, 23, 24, 27, 29, 32, 33, 36, 38, 41, 46, 49, 52, 53, 56, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 85, 89, 90, 92, 93, 94, 95, 98, 101, 102, 103, 107, 108, 110, 111, 114, 117, 125, 132, 135, 137, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 180, 181, 182, 185, 187, 191, 196, 209, 214, 220, 222, 229, 239, 240, 242, 245, 246, 247, 250], "my": [14, 16, 17, 20, 22, 24, 28, 29, 31, 33, 35, 38, 40, 41, 42, 43, 46, 48, 50, 52, 53, 55, 58, 80, 81, 82, 125, 127, 134, 137, 145, 155, 156, 157, 159, 163, 164, 165, 166, 176, 179, 181, 198, 246], "clara": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 134], "live": [14, 16, 20, 22, 24, 29, 31, 33, 35, 38, 40, 41, 43, 46, 48, 52, 53, 55, 58, 134, 156, 157, 222, 242], "berkelei": [14, 20, 24, 29, 33, 38, 41, 46, 52, 53, 163, 164, 165, 166], "instead": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 53, 54, 56, 57, 88, 117, 119, 123, 124, 168, 190, 191, 195, 196, 250], "per": [14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 89, 95, 101, 110, 111, 119, 123, 127, 129, 130, 131, 132, 137, 140, 185, 196, 198, 214, 224, 228, 231], "averag": [14, 15, 17, 18, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 36, 38, 39, 42, 46, 47, 49, 51, 53, 54, 56, 57, 89, 91, 95, 97, 101, 104, 110, 111, 119, 132, 143, 170, 209], "regress": [15, 21, 25, 30, 34, 39, 42, 47, 54, 57, 153, 168, 229], "multi": [15, 21, 25, 28, 30, 34, 39, 42, 44, 47, 50, 54, 57, 85, 107, 110, 111, 117, 119, 160, 209], "sequenceclassifi": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57], "albert_base_sequence_classifier_imdb": 15, "activ": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 117, 166, 195, 202, 209, 239], "calcul": [15, 17, 18, 21, 23, 25, 27, 28, 32, 34, 36, 39, 42, 44, 47, 49, 50, 54, 56, 57, 109, 127, 132, 141, 148, 170, 209], "sigmoid": [15, 17, 18, 21, 23, 25, 27, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 209], "love": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 88, 103, 111, 146, 149, 246], "movi": [15, 18, 21, 23, 28, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 149, 155, 246], "child": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57], "pretti": [15, 18, 21, 23, 30, 32, 34, 36, 39, 44, 47, 49, 54, 56, 57, 117], "bore": [15, 18, 21, 23, 30, 32, 34, 36, 39, 47, 49, 54, 56, 57], "neg": [15, 18, 21, 23, 25, 30, 32, 34, 36, 39, 47, 49, 50, 54, 56, 57, 148, 149, 170, 209, 222, 242], "limit": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 73, 75, 82, 85, 90, 98, 99, 106, 109, 112, 117, 149, 168, 173, 209], "almost": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57], "help": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 72, 78, 79, 80, 85, 86, 137, 138, 151, 152, 154, 157, 158, 160, 164, 182, 198, 209, 222, 242, 247, 251], "feed": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57], "entir": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 47, 49, 54, 56, 57, 67, 100, 105, 106, 160, 165], "one": [15, 17, 18, 21, 23, 25, 27, 30, 32, 34, 36, 39, 42, 44, 47, 49, 54, 56, 57, 63, 67, 73, 74, 75, 78, 79, 81, 87, 88, 99, 104, 110, 111, 112, 117, 119, 123, 125, 130, 137, 146, 152, 165, 173, 179, 198, 201, 209, 229, 242, 246], "token_classifi": [16, 26, 40, 43, 48, 55, 58], "albert_base_token_classifier_conll03": 16, "tokenclassifi": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58], "john": [16, 22, 31, 35, 40, 43, 48, 55, 58, 63, 88, 103, 111, 114, 115, 133, 135, 146, 192, 235], "lenon": [16, 22, 31, 35, 40, 43, 48, 55, 58], "born": [16, 22, 31, 35, 40, 43, 48, 55, 58, 156, 157], "london": [16, 22, 31, 35, 40, 43, 48, 55, 58], "pari": [16, 22, 31, 35, 40, 43, 48, 55, 58, 134], "sarah": [16, 22, 31, 35, 40, 43, 48, 55, 58], "o": [16, 22, 26, 31, 35, 40, 43, 48, 55, 58, 130, 131, 132, 133, 196, 214, 224, 231, 234, 252], "modelforsequenceclassif": [17, 18, 23, 27, 32, 36, 49, 56], "nli": [17, 18, 23, 27, 32, 36, 49, 56], "natur": [17, 18, 23, 27, 32, 36, 49, 50, 56, 75, 85, 86, 87, 88, 90, 92, 93, 94, 99, 107, 108, 112, 119, 153, 156, 161, 166, 168, 188, 197, 201], "don": [17, 18, 23, 27, 32, 36, 49, 56, 93, 102, 135], "hardcod": [17, 18, 23, 27, 32, 36, 49, 56], "potenti": [17, 18, 23, 27, 32, 36, 49, 56, 73, 155, 159, 163, 165, 172], "thei": [17, 18, 23, 27, 32, 36, 49, 51, 56, 78, 79, 80, 132, 135, 137, 152, 156, 199, 232, 246], "chosen": [17, 18, 23, 27, 32, 36, 49, 56, 78, 79, 132, 137], "runtim": [17, 18, 23, 27, 32, 36, 49, 56], "usual": [17, 18, 23, 27, 32, 36, 49, 56, 75, 201, 225], "slower": [17, 18, 23, 27, 32, 36, 49, 56], "flexibl": [17, 18, 23, 27, 32, 36, 49, 56, 66, 68, 73], "loop": [17, 18, 23, 36, 49, 56], "through": [17, 18, 23, 36, 49, 56, 85, 99, 115, 117, 127, 159, 162, 164, 192, 247], "longer": [17, 18, 23, 36, 49, 56, 85, 94, 98, 108, 119, 157, 160, 161, 251], "pass": [17, 18, 23, 27, 32, 36, 49, 56, 137], "pose": [17, 18, 23, 27, 32, 36, 49, 56], "premis": [17, 18, 23, 27, 32, 36, 49, 56], "hypothesi": [17, 18, 23, 27, 32, 36, 49, 56], "pair": [17, 18, 23, 27, 32, 36, 49, 56, 66, 95, 101, 115, 159, 222], "albert_base_zero_shot_classifier_onnx": 17, "iphon": 17, "resolv": 17, "asap": 17, "urgent": 17, "albert_zero_shot_classifier_onnx": 17, "bart": [17, 18, 153], "bartforsequenceclassif": 18, "bart_large_zero_shot_classifier_mnli": 18, "bert_base_cased_qa_squad2": 20, "bert_base_sequence_classifier_imdb": 21, "bert_base_token_classifier_conll03": 22, "bert_zero_shot_classifier_mnli": 23, "camembert": [24, 25, 26, 90], "camembert_base_qa_fquad": 24, "fr": [24, 25, 27, 90, 119, 159, 162], "sequence_classifi": 25, "camembert_base_sequence_classifier_allocin": 25, "j": [25, 114], "ai": [25, 137, 138, 153, 158, 222, 242], "ador\u00e9": 25, "ce": 25, "film": 25, "lorsqu": 25, "\u00e9tai": 25, "enfant": 25, "je": 25, "d\u00e9test": 25, "\u00e7a": 25, "camembert_base_token_classifier_wikin": 26, "georg": 26, "washington": 26, "est": [26, 90, 119, 160], "all\u00e9": 26, "\u00e0": 26, "camembert_zero_shot_classifier_xnli_onnx": 27, "multi_class": 27, "setcandidatelabel": [27, 66, 202, 209], "sport": 27, "politiqu": 27, "scienc": [27, 97, 117, 163, 167, 243], "l": [27, 68], "\u00e9quip": 27, "de": [27, 75, 90, 117, 119, 159, 160], "joue": 27, "aujourd": 27, "hui": 27, "au": 27, "parc": 27, "princ": 27, "classifierdl": [28, 246], "univers": [28, 78, 79, 106, 107, 155, 160, 162, 163, 164, 165, 166], "deep": [28, 87, 88, 96, 117, 131, 146, 172, 209], "dnn": 28, "built": [28, 44, 155, 197, 239], "insid": [28, 44, 130, 143, 182, 231], "instanti": [28, 44, 50, 78, 79, 94, 108, 109, 114, 120, 122, 125, 126, 131, 132, 135, 143, 146, 148, 149, 170, 172, 173, 174, 179, 180, 185, 229, 231, 232], "dataset": [28, 44, 50, 78, 79, 90, 94, 95, 97, 98, 99, 102, 103, 106, 108, 109, 117, 119, 131, 132, 141, 146, 156, 158, 159, 162, 163, 165, 167, 172, 185, 220, 224, 231, 232, 233, 234, 240, 249], "monitor": [28, 44, 50, 132, 137, 138, 221, 222, 242], "metric": [28, 44, 50, 132, 174, 222], "done": [28, 44, 50, 102, 103, 131, 132, 247], "settestdataset": [28, 44, 50, 132, 139, 141], "method": [28, 44, 50, 85, 86, 93, 94, 97, 99, 108, 112, 117, 132, 151, 152, 170, 209, 225, 241], "expect": [28, 44, 50, 89, 95, 101, 112, 132, 152, 182, 198, 214], "path": [28, 44, 50, 65, 70, 78, 79, 94, 108, 109, 114, 115, 120, 122, 125, 126, 131, 132, 134, 135, 141, 146, 148, 151, 152, 156, 172, 173, 174, 177, 182, 195, 196, 209, 212, 213, 222, 224, 229, 231, 232, 233, 234, 237, 242], "parquet": [28, 44, 50, 132, 141, 187], "datafram": [28, 44, 50, 94, 108, 109, 132, 141, 143, 170, 185, 195, 196, 209, 210, 214, 220, 222, 224, 229, 231, 232, 233, 234, 242, 246, 250, 252], "ha": [28, 44, 50, 51, 66, 67, 73, 74, 75, 80, 81, 82, 85, 92, 93, 96, 102, 103, 106, 109, 117, 120, 125, 132, 141, 146, 148, 152, 153, 154, 159, 162, 163, 165, 168, 173, 174, 185, 187, 188, 195, 196, 209, 222, 225, 233, 242, 246, 247], "same": [28, 44, 50, 63, 85, 99, 102, 109, 110, 114, 115, 132, 137, 141, 155, 164, 165, 168, 170, 199, 222, 247], "also": [28, 44, 50, 66, 67, 68, 70, 72, 73, 74, 75, 81, 85, 96, 98, 109, 110, 111, 114, 115, 117, 123, 125, 130, 131, 132, 141, 146, 149, 153, 155, 165, 167, 176, 196, 200, 229, 239, 242, 246, 247, 248, 249, 251], "follow": [28, 44, 50, 63, 72, 76, 81, 96, 98, 109, 117, 123, 124, 125, 130, 132, 135, 145, 165, 183, 200, 242, 244, 247], "preprocessingpipelin": [28, 44, 50, 132, 141], "randomsplit": [28, 44, 50, 132, 141], "write": [28, 44, 50, 109, 132, 141, 155, 167, 173, 174, 247], "overwrit": [28, 44, 50, 132, 133, 141, 222], "test_data": [28, 44, 50, 132, 141], "usag": [28, 44, 50, 63, 78, 79, 80, 81, 82, 85, 86, 87, 88, 90, 91, 93, 96, 102, 107, 109, 110, 112, 114, 117, 119, 120, 123, 124, 125, 126, 131, 132, 135, 143, 145, 146, 148, 149, 151, 152, 153, 160, 168, 170, 172, 173, 175, 176, 180, 182, 185], "64": [28, 44, 50, 85, 132, 140, 246], "coeffici": [28, 50, 131, 132], "5": [28, 44, 50, 63, 73, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 119, 123, 124, 127, 130, 132, 137, 138, 143, 149, 156, 164, 165, 166, 185, 190, 196, 209, 214, 222, 224, 232, 233, 234, 235, 242, 245, 246, 252], "enableoutputlog": [28, 44, 50, 132, 139, 141], "stdout": [28, 44, 50, 132, 141], "addit": [28, 44, 50, 78, 79, 87, 88, 114, 131, 132, 137, 141, 145, 152, 156, 167, 182, 222, 229, 245, 246], "evaluationlogextend": [28, 44, 50, 132, 139, 141], "valid": [28, 44, 50, 123, 132, 141, 146, 172, 242], "displai": [28, 44, 50, 141, 156, 222, 229, 242], "lr": [28, 44, 50, 128, 132, 139, 140, 185], "rate": [28, 44, 50, 68, 76, 94, 102, 103, 108, 109, 132, 140, 151, 152, 170, 172, 209], "005": [28, 50, 132, 140], "maxepoch": [28, 44, 50, 128, 129, 131, 132, 139, 140], "epoch": [28, 44, 50, 129, 131, 132, 140, 141, 146, 171, 172, 222], "30": [28, 50, 117, 123, 124, 130, 140, 160, 196, 214, 224, 235, 245], "outputlogspath": [28, 44, 50, 132, 139, 141, 144, 146], "randomse": [28, 44, 50, 128, 129, 131, 132, 139, 140], "random": [28, 44, 50, 94, 108, 129, 131, 132, 137, 140, 160, 170, 190], "seed": [28, 44, 50, 84, 94, 108, 129, 131, 132, 140, 151, 152, 160, 202, 209], "shuffl": [28, 44, 129, 140, 153], "testdataset": [28, 44, 50, 132, 139, 141, 222, 242], "statist": [28, 44, 50, 109, 117, 132, 141], "validationsplit": [28, 44, 50, 132, 139, 141, 144, 146], "choos": [28, 44, 50, 91, 104, 132, 137, 141, 146, 173, 209], "proport": [28, 44, 50, 132, 141, 146, 149], "against": [28, 44, 50, 114, 117, 122, 126, 132, 141, 146, 164, 165, 199], "between": [28, 44, 50, 68, 73, 78, 79, 80, 82, 99, 102, 103, 107, 110, 111, 112, 115, 132, 137, 141, 145, 146, 159, 161, 162, 172, 209], "off": [28, 44, 50, 107, 110, 111, 132, 141, 146, 163], "verbos": [28, 44, 50, 128, 131, 132, 139, 141], "accept": [28, 44, 50, 137], "singl": [28, 44, 50, 68, 95, 97, 109, 115, 117, 153, 159, 170, 179, 180, 182, 198, 209, 228, 231], "item": [28, 50, 109, 137, 222, 231, 242], "doubl": [28, 50, 148, 187, 200], "In": [28, 44, 50, 67, 75, 82, 90, 92, 93, 98, 99, 101, 109, 112, 114, 117, 119, 120, 122, 125, 126, 145, 146, 148, 152, 153, 156, 157, 159, 161, 162, 164, 166, 167, 168, 173, 174, 185, 222, 233, 242, 246, 247, 251, 252], "csv": [28, 50, 114, 141, 200, 246], "best": [28, 50, 85, 90, 95, 97, 102, 103, 117, 119, 132, 137, 153, 155, 159, 167, 246], "wach": [28, 246], "ever": [28, 50, 81, 246], "opinion": [28, 50, 246], "win": [28, 50, 246], "award": [28, 50, 246], "terribl": [28, 50, 246], "act": [28, 50, 205, 246], "bad": [28, 50, 148, 222, 242, 246], "realli": [28, 50, 137, 149, 246], "Then": [28, 44, 131, 132, 159, 162, 201, 222, 239, 246], "trane": 28, "smallcorpu": [28, 50, 246], "header": [28, 50, 51, 198, 200, 246], "src": [28, 50, 66, 67, 73, 74, 75, 78, 79, 109, 120, 122, 125, 126, 131, 132, 143, 152, 173, 174, 179, 185, 231, 232, 233, 234, 235, 246, 252], "useembed": [28, 44, 50, 107, 246], "docclassifi": [28, 44, 50, 246], "setbatchs": [28, 44, 50, 84, 86, 96, 128, 132, 139, 140, 151, 152, 171, 172, 202, 209, 222, 242, 246], "setmaxepoch": [28, 44, 50, 128, 129, 131, 132, 139, 140, 222, 242, 246], "20": [28, 42, 51, 67, 80, 112, 130, 151, 153, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 196, 200, 214, 224, 246], "setlr": [28, 44, 50, 128, 132, 139, 140, 222, 242, 246], "5e": [28, 50, 246], "pipelinemodel": [28, 42, 44, 50, 78, 79, 81, 94, 108, 131, 132, 149, 172, 173, 174, 185, 196, 199, 222, 225, 246, 249], "v": [28, 44, 50, 76, 92, 99, 109, 117, 119, 122, 132, 140, 141, 155, 174, 209, 214], "your": [28, 44, 50, 78, 82, 86, 93, 94, 102, 104, 108, 120, 122, 125, 126, 130, 131, 132, 135, 137, 138, 143, 148, 149, 151, 152, 172, 173, 179, 180, 185, 190, 239, 240, 244, 246, 249, 250, 252], "own": [28, 44, 50, 78, 94, 108, 120, 122, 125, 126, 131, 132, 135, 143, 148, 149, 172, 173, 179, 180, 185, 240, 249, 250, 252], "classifierdl_use_trec6": [28, 246], "trec": 28, "sarcasmdl": [28, 246], "classifierdl_use_sarcasm": [28, 246], "sarcasm": [28, 246], "m": [28, 82, 123, 124, 154, 159, 229, 235, 246], "readi": [28, 224, 239, 246], "could": [28, 93, 117, 125, 141, 172, 245, 246, 247], "put": [28, 214, 246], "word": [28, 68, 69, 70, 71, 72, 73, 75, 78, 79, 85, 91, 92, 94, 96, 102, 104, 107, 108, 109, 112, 114, 115, 117, 120, 127, 130, 133, 134, 135, 143, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 180, 182, 184, 185, 196, 214, 224, 229, 233, 234, 237, 245, 246], "wake": [28, 246], "am": [28, 80, 123, 124, 151, 155, 156, 157, 158, 159, 163, 164, 165, 166, 179, 246], "mondai": [28, 246], "arrays_zip": [28, 78, 79, 117, 246], "out": [28, 68, 69, 70, 71, 72, 86, 89, 95, 101, 117, 120, 135, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 175, 176, 246], "deberta": [29, 30, 31, 32, 92], "deberta_v3_xsmall_qa_squad2": 29, "v2": [30, 31, 87, 88, 92, 167], "v3": [30, 31], "deberta_v3_xsmall_sequence_classifier_imdb": 30, "deberta_base_sequence_classifier_imdb": 30, "deberta_v3_xsmall_token_classifier_conll03": 31, "deberta_base_zero_shot_classifier_mnli_anli_v3": 32, "distilbert": [33, 34, 36, 37, 93], "distilbert_base_cased_qa_squad2": 33, "distilbert_base_sequence_classifier_imdb": 34, "distilbert_base_token_classifier_conll03": 35, "distilbert_base_zero_shot_classifier_uncased_mnli": 36, "distilbert_base_uncased_multiple_choic": 37, "longform": [38, 39, 40, 98], "longformer_base_base_qa_squad2": 38, "longformer_base_sequence_classifier_imdb": 39, "4096": [39, 85, 98, 152, 209], "xlnet_base_token_classifier_conll03": [40, 58], "longformer_base_token_classifier_conll03": 40, "mpnet": [41, 42, 99], "mpnet_base_question_answering_squad2": 41, "mpnet_sequence_classifier_ukr_messag": 42, "drive": 42, "car": 42, "bu": 42, "arriv": 42, "minut": [42, 44], "pineappl": 42, "pizza": 42, "worst": 42, "transport": 42, "movement": 42, "food": [42, 137, 138, 152], "mpnet_base_sequence_classifier_imdb": 42, "xlm": [43, 52, 53, 54, 55, 110, 111], "roberta": [43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 74, 90, 92, 98, 99, 102, 103, 110, 111, 134, 153], "mpnet_base_token_classifi": [43, 55], "multiclassifierdl": 44, "bidirect": [44, 87, 88, 96, 112, 153], "gru": 44, "convolut": [44, 67, 75], "machin": [44, 67, 80, 82, 94, 108, 117, 131, 153, 156, 159, 160, 162, 168, 222, 229, 244], "strongli": 44, "relat": [44, 78, 79, 115, 251], "variant": [44, 76, 98, 107, 165], "mai": [44, 82, 86, 137, 151, 152, 157, 159, 164, 188, 209, 229, 245, 246, 247, 250, 251], "multiclass": [44, 209], "categor": [44, 225], "precis": [44, 78, 79, 82, 209], "constraint": 44, "mani": [44, 70, 92, 102, 103, 117, 137, 153, 155, 156, 157, 159, 160, 162, 168, 185], "formal": 44, "find": [44, 78, 79, 101, 102, 103, 106, 107, 114, 115, 120, 123, 153, 156, 167, 229], "x": [44, 68, 214, 231, 239, 252], "binari": [44, 195, 202, 210, 222, 228, 229], "y": [44, 82, 239], "multiclassifi": [44, 222, 242], "001": [44, 76, 131, 132], "10": [44, 63, 78, 117, 123, 124, 133, 137, 154, 159, 170, 173, 222, 235, 245], "44": [44, 94, 108, 143, 162], "ed58abb40640f983": 44, "pn": 44, "newsyou": 44, "toxic": [44, 162, 164], "a1237f726b5f5d89": 44, "dude": 44, "place": [44, 75, 152], "obscen": 44, "insult": 44, "24b0d6c8733c2abe": 44, "thank": [44, 112, 117, 154, 235], "8c4478fb239bcfc0": 44, "gee": 44, "traindataset": [44, 222, 242], "printschema": [44, 187, 189, 195, 197, 229], "root": [44, 63, 78, 79, 115, 187, 189, 195, 197, 229, 232], "setcleanupmod": [44, 186, 189, 197], "shrink": [44, 189, 197], "1e": [44, 222, 242], "setvalidationsplit": [44, 139, 141, 144, 146], "multiclassifierdl_use_tox": 44, "comment": [44, 117], "jigsaw": 44, "good": [44, 90, 93, 107, 149], "stuff": 44, "wtf": 44, "kind": [44, 117, 123, 124], "crap": 44, "roberta_base_uncased_multiple_choic": 45, "roberta_base_qa_squad2": [46, 134], "roberta_base_sequence_classifier_imdb": 47, "roberta_base_token_classifier_conll03": 48, "roberta_base_zero_shot_classifier_nli": 49, "sentimentdl": 50, "affect": [50, 182, 209], "subject": [50, 78, 79], "view": 50, "product": [50, 163], "review": [50, 137, 218], "tweet": 50, "interpret": [50, 80, 114, 212], "posit": [50, 92, 93, 99, 110, 111, 112, 117, 130, 137, 148, 149, 152, 170, 181, 185, 201, 209, 222, 242], "final": [50, 80, 98, 102, 103, 110, 111, 119, 132, 159, 172, 246], "otheriws": [50, 119], "neutral": [50, 119], "score": [50, 87, 88, 110, 111, 117, 119, 131, 132, 134, 148, 149, 156], "less": [50, 93, 119, 123, 127, 131, 160, 164, 173], "watch": [50, 149, 155], "32": [50, 85, 86, 96, 151, 152, 209, 235, 245, 251], "p": [50, 81, 94, 108, 119, 132, 141, 151, 152, 159, 180, 209, 229], "sentimentdl_use_imdb": 50, "imdb": 50, "sentimentdl_use_twitt": 50, "wow": 50, "video": [50, 117], "awesom": 50, "bruh": 50, "damn": 50, "wast": [50, 149], "implement": [51, 94, 108, 110, 134, 146, 172, 193, 194], "tapa": 51, "design": [51, 67, 73, 76, 87, 88, 102, 103, 106, 122, 153, 158, 160, 163, 167, 222, 242], "about": [51, 65, 70, 78, 79, 102, 103, 109, 117, 134, 137, 145, 155, 174, 196, 199, 237, 245, 247, 250, 251], "tabular": [51, 200], "tabl": [51, 170, 200, 202, 206], "tri": 51, "share": [51, 117, 247], "its": [51, 75, 92, 93, 98, 112, 117, 143, 148, 152, 153, 160, 161, 163, 164, 165, 166, 167, 176, 222, 233], "table_qa_tapas_base_finetuned_wtq": 51, "table_json": 51, "document_t": [51, 200], "stage": [51, 170, 196, 199, 222, 242, 246, 247, 250], "json_data": 51, "monei": [51, 200], "ag": [51, 89, 95, 101, 200], "donald": [51, 200], "trump": [51, 200], "75": [51, 117, 165, 200], "elon": [51, 200], "musk": [51, 200], "55": [51, 133, 200, 235], "AS": [51, 63, 134], "who": [51, 80, 82, 158, 180, 246], "earn": 51, "count": [51, 137, 172], "old": [51, 63, 233], "xlm_roberta_base_qa_squad2": [52, 53], "xlm_roberta_base_mc": 52, "xlm_roberta_base_sequence_classifier_imdb": 54, "xlm_roberta_large_zero_shot_classifier_xnli_anli": 56, "xlmroberta": 56, "xlnet": [57, 58, 99, 112], "xlnet_base_sequence_classifier_imdb": 57, "bullet": [59, 60, 61, 229], "cleanpostfixpattern": [59, 60], "cleanprefixpattern": [59, 60], "cleanermod": [59, 60], "dash": [59, 60], "extrawhitespac": [59, 60], "ignorecas": [59, 60], "setbullet": [59, 60], "setcleanpostfixpattern": [59, 60], "setcleanprefixpattern": [59, 60], "setcleanermod": [59, 60], "setdash": [59, 60], "setextrawhitespac": [59, 60], "setignorecas": [59, 60], "setstrip": [59, 60], "settrailingpunctu": [59, 60], "strip": [59, 60], "trailingpunctu": [59, 60], "emailaddress": [59, 61], "emaildatetimetzpattern": [59, 61], "extractormod": [59, 61], "imageurlpattern": [59, 61], "ipaddressnamepattern": [59, 61], "ipaddresspattern": [59, 61], "mapiidpattern": [59, 61], "setemailaddress": [59, 61], "setemaildatetimetzpattern": [59, 61], "setextractormod": [59, 61], "setimageurlpattern": [59, 61], "setindex": [59, 61], "setipaddressnamepattern": [59, 61], "setipaddresspattern": [59, 61], "setmapiidpattern": [59, 61], "settextpattern": [59, 61], "setusphonenumberspattern": [59, 61], "textpattern": [59, 61], "usphonenumberspattern": [59, 61], "handl": [60, 153, 161, 212, 230], "postfix": 60, "regex": [60, 80, 81, 114, 123, 125, 135, 172, 173, 174, 181, 182, 185], "prefix": [60, 130, 151, 152, 178, 180, 182, 209, 222, 242], "clean": [60, 81, 135, 153, 168, 201, 247], "bytes_string_to_str": 60, "clean_non_ascii_char": 60, "clean_ordered_bullet": 60, "clean_postfix": 60, "clean_prefix": 60, "remove_punctu": 60, "replace_unicode_quot": 60, "utf": [60, 81], "remov": [60, 81, 102, 103, 135, 149, 181, 190, 191, 192, 237], "extra": [60, 172, 173, 246], "whitespac": [60, 80, 82, 181, 185, 188], "oper": [60, 93, 98, 172, 180, 245], "lead": [60, 85, 90, 100, 105, 106, 110, 111, 158], "trail": 60, "punctuat": [60, 135, 145], "specifi": [61, 67, 86, 133, 134, 137, 146, 151, 152, 170, 209, 231, 232], "email": [61, 227, 229], "timestamp": 61, "includ": [61, 73, 81, 87, 88, 94, 96, 106, 108, 110, 111, 112, 115, 117, 123, 130, 131, 132, 137, 153, 154, 156, 157, 163, 165, 166, 167, 168, 170, 172, 191, 195, 212, 222, 229, 234, 239, 243, 245, 246, 247, 252], "zone": [61, 106], "email_d": 61, "email_address": 61, "ip_address": 61, "ip_address_nam": 61, "mapi_id": 61, "us_phone_numb": 61, "image_url": 61, "text_aft": 61, "text_befor": 61, "url": [61, 97, 229], "after": [61, 76, 78, 79, 94, 102, 103, 107, 108, 123, 124, 130, 137, 155, 161, 180, 201, 222, 239, 245, 246], "befor": [61, 81, 109, 123, 124, 153, 168, 173, 181, 185, 239, 242], "ip": 61, "mapi": 61, "u": [61, 78, 79, 92, 93, 117, 124, 130, 131, 132, 196, 214, 224, 232, 244, 247, 252], "phone": [61, 117, 165], "maxsegmentlength": [62, 63], "setmaxsegmentlength": [62, 63], "settextgenr": [62, 63], "textgenr": [62, 63], "corefer": 63, "resolut": [63, 73], "spanbert": 63, "identifi": [63, 109, 117, 122, 125, 137, 138, 167, 181, 182, 213, 222, 247], "given": [63, 67, 73, 74, 75, 80, 82, 97, 114, 117, 134, 151, 152, 153, 156, 163, 168, 172, 173, 174, 176, 195, 208, 209, 220, 222, 237], "told": [63, 124], "mari": [63, 88, 103, 111, 146], "he": [63, 80, 82, 92, 124, 159, 180, 235], "borrow": 63, "book": [63, 81, 156, 172, 232], "her": [63, 134], "link": [63, 224], "ontonot": 63, "corefresolut": 63, "spanbert_base_coref": 63, "genr": 63, "One": [63, 97, 117, 152, 180, 183], "bc": 63, "broadcast": 63, "convers": 63, "bn": [63, 159], "nw": 63, "wire": 63, "pt": [63, 159], "pivot": [63, 106], "testament": 63, "tc": 63, "telephon": 63, "wb": 63, "mz": 63, "getcandidatelabel": [64, 66], "croppct": [64, 67], "dorescal": [64, 67, 73, 74, 202, 209], "rescalefactor": [64, 67, 73, 74, 202, 209], "setcroppct": [64, 67], "setdorescal": [64, 67, 202, 209], "setrescalefactor": [64, 67, 202, 209], "ignoretokenid": [64, 68, 69, 70, 71, 72, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "imagegeneratemod": [64, 68], "numofparallelimag": [64, 68], "setbeams": [64, 68, 69, 70, 71, 72, 74, 150, 153, 154, 158, 159, 162, 202, 209], "setdosampl": [64, 68, 69, 70, 71, 72, 74, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "setignoretokenid": [64, 68, 69, 70, 71, 72, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "setimagegeneratemod": [64, 68], "setmaxoutputlength": [64, 68, 69, 70, 71, 72, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "setminoutputlength": [64, 68, 69, 70, 71, 72, 150, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "setnorepeatngrams": [64, 68, 69, 70, 71, 72, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "setnumofparallelimag": [64, 68], "setrepetitionpenalti": [64, 68, 69, 70, 71, 72, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "settemperatur": [64, 68, 69, 70, 71, 72, 136, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "settopk": [64, 68, 69, 70, 71, 72, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "settopp": [64, 68, 69, 70, 71, 72, 136, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 202, 209], "blip": 65, "visual": [65, 67, 68, 69, 70, 71, 72, 73, 222], "vision": [65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 165], "togeth": [65, 69, 71, 97, 152], "visualqaclassifi": [65, 68, 69, 70, 71, 72], "blip_vqa_bas": 65, "50": [65, 68, 69, 70, 71, 72, 132, 133, 143, 153, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 235], "image_df": [65, 70], "sparksessionfortest": [65, 70], "images_path": [65, 70], "test_df": [65, 68, 69, 70, 71, 72], "withcolumn": [65, 70, 152], "lit": [65, 70, 152], "pictur": [65, 69, 70, 71], "setsiz": [65, 202, 209], "384": [65, 68], "cat_imag": [65, 69, 70, 71, 72], "jpg": [65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 152], "cat": [65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 152], "abov": [65, 109, 115, 233], "skip": [65, 94, 108, 115, 172], "blip_vqa_tf": 65, "clip": [66, 152], "contrast": [66, 95, 97, 98, 101, 122, 168], "neural": [66, 75, 87, 88, 92, 132, 146, 153, 160], "network": [66, 75, 87, 88, 96, 132, 146], "abil": [66, 106, 117, 153, 155, 156, 161], "hard": [66, 175], "make": [66, 67, 73, 81, 86, 90, 98, 99, 110, 111, 117, 137, 138, 146, 149, 151, 152, 153, 158, 161, 167, 173, 239, 248, 252], "veri": [66, 74, 75, 80, 90, 96, 110, 111, 112, 149, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 196, 245, 247, 250, 251], "gpt": [66, 102, 137, 153, 156, 165], "imageclassifi": [66, 67, 73, 74, 75], "zero_shot_classifier_clip_vit_base_patch32": 66, "huggingfac": [66, 67, 68, 70, 72, 73, 74, 75, 90, 164, 165], "librari": [66, 67, 68, 70, 72, 73, 74, 75, 86, 119, 151, 152, 188, 189, 190, 197, 201, 240, 251], "clipforzeroshotclassificationtestspec": 66, "candidatelabel": [66, 202, 209], "imagedf": [66, 67, 73, 74, 75], "dropinvalid": [66, 67, 73, 74, 75], "photo": 66, "bird": [66, 74, 152], "dog": [66, 74, 152], "hen": [66, 67, 73, 74, 75, 152], "hippo": [66, 67, 73, 75, 152], "room": [66, 74, 152, 198], "tractor": [66, 67, 73, 74, 75, 152], "ostrich": [66, 67, 73, 74, 75, 152], "ox": [66, 67, 73, 74, 75, 152], "pipelinedf": [66, 67, 73, 74, 75], "revers": [66, 67, 73, 74, 75, 152], "image_nam": [66, 67, 73, 74, 75, 152], "palac": [66, 67, 73, 74, 75, 152], "jpeg": [66, 67, 73, 74, 75, 152, 195], "egyptian_cat": [66, 67, 73, 74, 75, 152], "hippopotamu": [66, 67, 73, 74, 75, 152], "junco": [66, 67, 73, 74, 75, 152], "bluetick": [66, 67, 73, 74, 75, 152], "chihuahua": [66, 67, 73, 74, 75, 152], "image_classifier_vit_base_patch16_224": [66, 75], "convnet": 67, "convnext": 67, "2020": [67, 117, 123, 124, 146], "zhuang": 67, "liu": [67, 73, 92, 102, 103], "hanzi": 67, "mao": 67, "chao": 67, "yuan": 67, "wu": 67, "christoph": 67, "feichtenhof": 67, "trevor": 67, "darrel": 67, "sain": 67, "xie": 67, "pure": [67, 75, 160], "inspir": [67, 149, 163, 173, 174, 218], "claim": 67, "outperform": [67, 70, 95, 98, 99, 101, 106, 107, 110, 111, 112, 117, 155, 156, 157, 158, 164, 167], "convnextforimageclassificationtestspec": 67, "roar": 67, "began": 67, "introduct": 67, "vit": [67, 74, 75], "quickli": [67, 137], "supersed": 67, "vanilla": 67, "hand": [67, 180], "face": [67, 106], "difficulti": 67, "detect": [67, 73, 107, 118, 119, 137, 138, 144, 145, 146, 237], "semant": [67, 73, 89, 96, 97, 106, 107, 170, 185], "hierarch": [67, 73, 94, 108], "swin": [67, 73], "reintroduc": 67, "sever": [67, 152, 167, 228, 252], "practic": [67, 90, 153, 161, 168], "viabl": 67, "backbon": [67, 73, 112], "demonstr": [67, 73, 93, 98, 106, 117, 156, 158, 159, 160], "remark": [67, 158], "wide": [67, 81, 87, 88, 92, 93, 95, 110, 111, 153, 157, 167], "varieti": [67, 98, 99, 110, 111, 154, 251], "howev": [67, 85, 99, 104, 106, 112, 117, 135, 157, 159, 162, 225, 245], "effect": [67, 73, 74, 75, 98, 106, 137, 145, 153, 159, 161, 162, 168, 209], "hybrid": 67, "still": [67, 156, 222], "credit": 67, "superior": [67, 158], "inher": 67, "induct": [67, 93], "bias": [67, 93, 163, 164], "reexamin": 67, "space": [67, 94, 106, 108, 109, 127, 152, 170, 201], "achiev": [67, 92, 95, 97, 98, 99, 102, 103, 110, 111, 112, 132, 153, 155, 156, 157, 160, 162, 165, 168, 196, 250], "gradual": 67, "modern": [67, 162], "resnet": 67, "toward": [67, 152, 156, 162], "discov": [67, 243], "compon": [67, 75, 106, 187, 195, 250], "contribut": [67, 157, 164], "along": [67, 115, 195], "wai": [67, 78, 79, 114, 115, 163, 164, 165, 166, 199, 224], "outcom": 67, "explor": [67, 106, 153, 159, 164, 168], "famili": [67, 81, 95, 157, 158, 165, 229], "dub": [67, 110, 111], "construct": [67, 94, 108, 182, 224, 249], "compet": 67, "favor": 67, "term": [67, 117], "scalabl": [67, 229], "87": [67, 73], "imagenet": [67, 73, 75], "coco": [67, 73], "ade20k": [67, 73], "while": [67, 68, 73, 75, 85, 93, 97, 109, 117, 137, 141, 152, 156, 159, 162, 222, 242, 247], "maintain": 67, "simplic": [67, 153], "effici": [67, 73, 92, 94, 107, 108, 158, 160, 161, 167, 245], "dores": [67, 73, 74, 75, 202, 209], "resiz": [67, 73, 74, 75, 209], "certain": [67, 73, 74, 75, 172, 209], "donorm": [67, 73, 74, 75, 202, 209], "deviat": [67, 73, 74, 75, 209], "featureextractortyp": [67, 73, 74, 75, 202, 209], "architectur": [67, 68, 73, 74, 75, 85, 87, 88, 92, 102, 119, 132, 146, 153, 162, 163, 166, 168, 209], "featur": [67, 72, 73, 74, 75, 78, 94, 100, 105, 106, 108, 117, 127, 131, 141, 149, 152, 161, 170, 209, 222, 249], "imagemean": [67, 73, 74, 75, 202, 209], "imagestd": [67, 73, 74, 75, 202, 209], "resampl": [67, 73, 74, 75, 202, 209], "pil": [67, 73, 74, 75, 209], "nearest": [67, 73, 74, 75, 170, 209], "bilinear": [67, 73, 74, 75, 209], "bicub": [67, 73, 74, 75, 209], "do_res": [67, 73, 74, 75, 209], "tupl": [67, 73, 74, 75, 198, 209, 220], "rescal": [67, 73, 74, 209], "factor": [67, 73, 74, 86, 110, 111, 112, 151, 152, 153, 168, 172, 209], "percentag": [67, 109, 172, 185], "crop": 67, "tabbi": [67, 73], "river": [67, 73, 75], "hors": [67, 73, 75], "amphibiu": [67, 73, 75], "snowbird": [67, 73, 75], "struthio": [67, 73, 75], "camelu": [67, 73, 75], "thresher": 67, "thrasher": 67, "thresh": 67, "image_classifier_convnext_tiny_224_loc": 67, "determin": [67, 110, 198, 209], "smaller": [67, 82, 93, 94, 108], "224": 67, "256": [67, 152], "edg": [67, 93, 115, 155, 158], "afterward": 67, "boolean": [67, 123, 209], "255": [67, 209], "janu": 68, "alongsid": [68, 70, 167], "novel": [68, 92, 99, 106, 112, 117, 153, 162], "autoregress": [68, 112], "unifi": [68, 153, 168], "multimod": [68, 70, 72, 152, 155, 195], "understand": [68, 87, 88, 93, 99, 110, 112, 117, 153, 158, 164, 165, 167, 168, 185, 245], "decoupl": 68, "separ": [68, 80, 82, 93, 102, 125, 127, 145, 146, 173, 182, 185, 191, 214, 228, 231, 244], "pathwai": 68, "allevi": 68, "conflict": 68, "role": [68, 198], "enhanc": [68, 92, 149, 153, 158, 161, 164], "surpass": [68, 73, 92, 101, 155, 161], "previou": [68, 73, 97, 99, 110, 111, 156, 158, 162, 166, 205, 246], "exce": [68, 102, 103, 137], "deepseek": 68, "llm": [68, 70, 106, 157, 158, 164, 167], "3b": [68, 167], "approxim": [68, 170], "500b": 68, "emploi": [68, 82, 112], "siglip": 68, "downsampl": 68, "16": [68, 85, 112, 133, 233, 245], "janus_1_3b_int4": 68, "suit": [68, 70, 72, 105], "larger": [68, 70, 74, 86, 90, 93, 102, 103, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170], "assist": [68, 70, 71, 72, 154, 158, 167, 198, 214], "use_openvino": [68, 69, 70, 71, 72, 87, 88, 95, 101, 102, 110, 154, 155, 157, 158, 159, 161, 162, 164, 165, 166, 167], "parallel": [68, 86, 145, 146, 196, 209, 231, 250], "http": [68, 69, 70, 71, 72, 85, 90, 92, 94, 96, 97, 101, 107, 108, 137, 138, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 185, 209, 229, 243], "arxiv": [68, 69, 70, 71, 72, 98, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "pdf": [68, 69, 70, 71, 72, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209, 227, 228, 229], "1909": [68, 69, 70, 71, 72, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "05858": [68, 69, 70, 71, 72, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "__": [68, 69, 70, 71, 72, 81, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 190, 191, 209], "gram": [68, 69, 70, 71, 72, 89, 94, 95, 101, 108, 117, 127, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "ctrl": [68, 69, 70, 71, 72, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "condit": [68, 69, 70, 71, 72, 87, 88, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "control": [68, 69, 70, 71, 72, 137, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 209], "cumul": [68, 69, 70, 71, 72, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209], "llava": 69, "llava_1_5_7b_hf": 69, "unusu": [69, 70, 71, 72], "aspect": [69, 70, 71, 161], "presenc": [69, 70, 71, 151, 152, 209], "ly": [69, 70, 71, 72, 152], "pink": [69, 70, 71, 72, 152], "couch": [69, 70, 71, 72, 74], "llama": [70, 86, 151, 152, 157, 158, 161, 164, 195, 198], "compris": [70, 137], "11b": 70, "90b": 70, "These": [70, 73, 85, 102, 103, 106, 112, 117, 131, 156, 158, 198, 224, 244], "optim": [70, 86, 94, 102, 103, 105, 106, 108, 132, 134, 146, 151, 152, 154, 157, 158, 164, 165, 209], "reason": [70, 80, 82, 137, 154, 164, 165, 167], "caption": [70, 74, 152], "open": [70, 101, 119, 154, 155, 157, 158, 159, 163, 164, 165, 167, 182, 188, 189, 190, 197, 201, 243], "proprietari": [70, 163], "industri": [70, 81], "llama_3_2_11b_vision_instruct_int4": 70, "begin_of_text": 70, "start_header_id": [70, 158, 198], "end_header_id": [70, 158, 198], "eot_id": [70, 198], "phi_3_vision_128k_instruct": 71, "phi3v": 71, "qwen2": [72, 166], "integr": [72, 112, 117, 136, 160, 222, 242, 244], "respons": [72, 137, 146, 157, 158, 164, 167], "queri": [72, 89, 95, 101, 157, 161, 166, 170, 243], "qwen2_vl_2b_instruct_int4": 72, "im_end": 72, "im_start": 72, "vision_start": 72, "image_pad": 72, "vision_end": 72, "describ": [72, 78, 79, 101, 115, 117, 160], "becaus": [72, 137, 148, 239], "swinimageclassif": 73, "shift": 73, "window": [73, 74, 94, 98, 107, 108, 117, 132, 161, 166, 172], "ze": 73, "yutong": 73, "lin": 73, "yue": [73, 162], "cao": 73, "han": 73, "hu": [73, 159], "yixuan": 73, "zheng": 73, "zhang": 73, "stephen": 73, "bain": 73, "guo": 73, "basic": [73, 117, 145, 198, 239, 245], "whose": [73, 165], "scheme": [73, 102, 153], "bring": [73, 159, 246], "greater": [73, 117, 137, 151, 152, 209], "attent": [73, 75, 86, 92, 98, 137, 151, 152, 157, 161, 166, 209], "non": [73, 155, 159, 164, 182, 185], "overlap": [73, 80, 82, 122, 126], "cross": [73, 110, 111, 133], "connect": 73, "image_classifier_swin_base_patch4_window7_224": 73, "swinforimageclassificationtest": 73, "present": [73, 85, 95, 96, 98, 102, 103, 107, 110, 111, 115, 137, 141, 146, 153, 160, 170], "call": [73, 87, 88, 93, 95, 106, 117, 137, 156, 157, 164, 165, 220, 225, 231, 246, 252], "purpos": [73, 93, 95, 146], "adapt": [73, 166], "aris": 73, "domain": [73, 97, 106, 117, 156, 229], "variat": 73, "high": [73, 86, 105, 106, 107, 110, 111, 151, 152, 153, 159, 160, 162, 165, 167, 209, 229], "variou": [73, 106, 112, 161, 164, 167, 229, 238], "complex": [73, 96, 106, 107, 117, 161, 173, 174], "respect": [73, 92, 109, 131, 132, 165, 233], "broad": [73, 80, 156], "rang": [73, 87, 88, 92, 93, 95, 97, 110, 111, 151, 152, 153, 157, 158, 164, 209], "1k": 73, "dens": [73, 87, 88, 89, 159, 165, 170], "box": [73, 159, 162, 229], "ap": 73, "51": [73, 189, 197, 233], "53": [73, 122, 126], "miou": 73, "val": 73, "Its": [73, 79, 134, 153], "margin": [73, 99, 112, 229], "prove": 73, "benefici": [73, 117], "mlp": 73, "visionencoderdecod": 74, "auto": [74, 153, 177], "beit": 74, "deit": 74, "gpt2": [74, 156], "image_captioning_vit_gpt2": 74, "visionencoderdecodertestspec": 74, "nreturnsequ": [74, 202, 209], "computation": [74, 96, 102, 103, 112, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168], "expens": [74, 96, 102, 103, 112, 148, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 173], "especi": [74, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168], "recommend": [74, 86, 96, 112, 137, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 239], "imagecapt": 74, "fill": [74, 153, 237], "furnitur": 74, "lai": [74, 162], "anoth": [74, 152, 209, 247], "brown": [74, 152], "bear": 74, "bodi": [74, 152, 229], "water": [74, 152], "flock": 74, "chicken": [74, 152], "stand": [74, 87, 88, 152, 161], "lush": 74, "green": [74, 152], "field": [74, 94, 108, 109, 114, 126, 152, 163, 164, 165, 166, 237], "small": [74, 75, 81, 85, 86, 90, 93, 94, 101, 108, 120, 143, 151, 152, 162, 164, 165, 167, 196, 209, 233, 250], "wet": 74, "ground": 74, "wooden": 74, "floor": [74, 152], "wear": [74, 152], "blue": 74, "sweater": [74, 152], "man": [74, 86, 152, 156, 157], "cow": 74, "altern": [75, 117, 137, 148, 172, 173, 174, 196, 200, 246, 251], "vitimageclassificationtestspec": 75, "becom": [75, 85, 93, 117, 163], "facto": [75, 117], "remain": [75, 81, 85, 93, 117, 237], "conjunct": 75, "overal": [75, 109, 112, 155, 165], "structur": [75, 134, 182, 201, 245], "relianc": [75, 106], "cnn": [75, 119, 132, 146], "necessari": [75, 93, 242, 249], "directli": [75, 159, 162, 196, 222, 225, 242], "patch": 75, "mid": 75, "cifar": 75, "vtab": 75, "etc": [75, 91, 95, 97, 99, 155, 166, 190, 201, 242], "attain": 75, "excel": [75, 112, 161, 229], "substanti": [75, 87, 88], "fewer": [75, 85, 97, 170], "worth": 75, "16x16": 75, "egyptian": [75, 162], "date_chunk": 76, "omicron": 76, "covid": 76, "world": [76, 80, 81, 82, 100, 105, 106, 161, 163, 164, 165, 166, 179, 222, 235, 242], "health": 76, "organ": [76, 117, 160, 198], "nov": [76, 123, 124, 233], "26": [76, 130, 196, 214, 224, 235], "2021": [76, 123, 124], "118": [76, 200], "121": 76, "01": [76, 123, 124, 125], "dependencytreebank": [77, 78], "numberofiter": [77, 78, 79], "setconllu": [77, 78, 79], "setdependencytreebank": [77, 78], "setnumberofiter": [77, 78, 79], "conll2009": [77, 79], "setconll2009": [77, 79], "conllformat": [77, 79], "traindependencypip": [77, 79], "trainopt": [77, 79], "trainparamet": [77, 79], "dependencypars": [78, 79, 115], "unlabel": [78, 87, 88, 153, 156, 168], "grammat": [78, 79], "inform": [78, 79, 97, 99, 109, 110, 117, 123, 130, 151, 152, 153, 172, 189, 197, 229, 234, 240, 242, 243, 244, 245, 246, 252], "relationship": [78, 79, 107, 115], "tell": [78, 79, 117, 214], "verb": [78, 79, 232], "modifi": [78, 79, 102, 103, 130, 137, 146], "particular": [78, 79, 117, 225, 246], "treebank": 78, "penn": 78, "converg": [78, 79, 143, 185], "better": [78, 79, 85, 92, 99, 112, 117, 131, 143, 145, 146, 149, 153, 155, 157, 185], "postagg": [78, 79, 115, 131, 143], "dependency_treebank": 78, "emptydataset": [78, 79], "tree": [78, 115], "bank": 78, "dep": 78, "dependency_conllu": [78, 115], "typeddependencyparsermdoel": 78, "union": [78, 79], "worker": [78, 79], "turner": [78, 79], "newal": [78, 79], "sai": [78, 79, 117, 182], "disappoint": [78, 79], "talk": [78, 79, 137], "stricken": [78, 79], "firm": [78, 79], "feder": [78, 79], "mogul": [78, 79], "typeddependencypars": [79, 115], "beforehand": 79, "2009": 79, "dependency_typ": [79, 115], "train_smal": 79, "txt": [79, 94, 108, 109, 120, 122, 125, 126, 143, 146, 148, 172, 173, 174, 179, 182, 227, 229, 233, 234, 252], "typdep": 79, "dependency_typed_conllu": [79, 115], "amod": 79, "flat": [79, 115, 192], "nsubj": [79, 115, 192, 232], "parataxi": 79, "pipe": 79, "roughli": 80, "subtext": 80, "perfect": [80, 82], "observ": [80, 82, 107], "seen": [80, 82, 153], "addition": [80, 82, 112, 132, 143, 161, 166, 189, 197, 224], "trim": [80, 82], "individu": [80, 82, 117, 172], "documentcharactertextsplittertest": 80, "decreas": [80, 137, 170], "prioriti": [80, 173, 182], "brioni": 80, "lodg": 80, "serpentin": 80, "aven": 80, "19798": 80, "39395": 80, "19597": 80, "did": [80, 117, 161, 166], "woman": 80, "think": 80, "39371": 80, "59242": 80, "19871": 80, "But": [80, 82, 89, 95, 101], "said": [80, 82], "million": [80, 101, 117, 133, 156], "red": [80, 152], "men": 80, "59166": 80, "77833": 80, "18667": 80, "friend": 80, "enthusiast": 80, "musician": 80, "being": [80, 93, 132, 137, 141, 153, 157, 160, 165, 168, 170], "himself": 80, "capab": 80, "77835": 80, "97769": 80, "19934": 80, "And": 80, "yet": [80, 225], "convinc": 80, "come": [80, 117, 130, 137, 157, 163], "li": [80, 165], "97771": 80, "117248": 80, "19477": 80, "she": [80, 180], "had": [80, 117, 137], "slate": 80, "colour": 80, "brim": 80, "straw": 80, "hat": 80, "feather": 80, "117250": 80, "137242": 80, "19992": 80, "That": [80, 117, 180, 222, 242, 247], "littl": [80, 146, 251], "paradox": 80, "profoundli": 80, "singulari": 80, "137244": 80, "157171": 80, "19927": 80, "raw": [81, 152, 156, 180, 182, 185, 195, 245, 247], "scrape": 81, "page": [81, 156, 163, 224, 228, 240, 241, 249, 251], "xml": 81, "dirti": [81, 135], "want": [81, 82, 114, 133, 225, 247], "pretty_al": 81, "normalizeddocu": 81, "div": [81, 229], "theworldsgreatest": 81, "right": [81, 87, 88, 153, 185], "hide": 81, "toptext": 81, "style": [81, 119, 168, 229], "font": [81, 229], "sego": 81, "ui": 81, "arial": 81, "san": [81, 117, 229], "serif": [81, 229], "largest": [81, 117, 156], "develop": [81, 117, 157, 158, 160, 162, 163, 164, 167, 215], "site": [81, 117, 155], "h1": 81, "300": 81, "160": 81, "lorem": [81, 122, 126], "ipsum": [81, 122, 126], "typeset": 81, "been": [81, 90, 156, 157, 158, 164, 183, 201, 225], "1500": [81, 159], "unknown": [81, 82, 119], "printer": 81, "took": [81, 162], "gallei": 81, "scrambl": 81, "specimen": 81, "surviv": 81, "five": [81, 133, 152], "centuri": [81, 161, 185], "leap": 81, "electron": 81, "essenti": [81, 156, 163], "unchang": 81, "popularis": 81, "1960": 81, "letraset": 81, "sheet": [81, 240], "passag": [81, 89, 95, 101], "recent": [81, 87, 88, 92, 102, 103, 117, 137, 153], "desktop": 81, "publish": [81, 102, 103], "softwar": [81, 167], "aldu": 81, "pagemak": 81, "measur": [82, 93, 102, 103, 153, 165, 222], "futur": [82, 146, 153, 168], "techniqu": [82, 85, 92, 153, 156, 158, 162, 168, 170], "documenttokensplittertest": 82, "immens": 82, "faculti": 82, "extraordinari": 82, "power": [82, 87, 88, 153, 163, 168, 229], "2950": 82, "5707": 82, "2757": 82, "chang": [82, 97, 209, 218], "cloth": 82, "imagin": 82, "deduc": 82, "As": [82, 85, 87, 88, 89, 93, 95, 101, 117, 137, 163, 228], "5659": 82, "8483": 82, "2824": 82, "quarter": 82, "receiv": [82, 233, 252], "Be": 82, "chamber": 82, "8427": 82, "11241": 82, "2814": 82, "piti": 82, "miss": [82, 123, 124, 188], "client": 82, "never": [82, 149, 246], "mind": [82, 162], "him": [82, 124], "11188": 82, "13970": 82, "2782": 82, "person": [82, 114, 232], "me": [82, 124, 158], "wish": 82, "agent": 82, "conf": 82, "13918": 82, "16898": 82, "2980": 82, "letter": [82, 135, 156, 157, 172, 233, 252], "secret": 82, "marriag": 82, "16836": 82, "19744": 82, "2908": 82, "seven": 82, "hundr": [82, 110, 111], "holm": [82, 172], "scribbl": 82, "receipt": 82, "shee": 82, "19683": 82, "22551": 82, "2868": 82, "defragmentationthreshold": [84, 86, 151, 152, 202, 209], "flashattent": [84, 86, 151, 152, 202, 209], "getmetadata": [84, 86, 202, 209], "gpusplitmod": [84, 86, 151, 152, 202, 209], "grpattnn": [84, 86, 151, 152, 202, 209], "grpattnw": [84, 86, 151, 152, 202, 209], "maingpu": [84, 86, 151, 152, 202, 209], "nbatch": [84, 86, 151, 152, 202, 209], "nchunk": [84, 86, 151, 152, 202, 209], "nctx": [84, 86, 151, 152, 202, 209], "ngpulay": [84, 86, 151, 152, 202, 209], "nsequenc": [84, 86, 151, 152, 202, 209], "nthread": [84, 86, 151, 152, 202, 209], "nthreadsbatch": [84, 86, 151, 152, 202, 209], "nubatch": [84, 86, 151, 152, 202, 209], "nokvoffload": [84, 86, 151, 152, 202, 209], "numastrategi": [84, 86, 151, 152, 202, 209], "poolingtyp": [84, 86, 151, 152, 202, 209], "ropefreqbas": [84, 86, 151, 152, 202, 209], "ropefreqscal": [84, 86, 151, 152, 202, 209], "ropescalingtyp": [84, 86, 151, 152, 202, 209], "setdefragmentationthreshold": [84, 86, 202, 209], "setflashattent": [84, 86, 202, 209], "setgpusplitmod": [84, 86, 202, 209], "setgrpattnn": [84, 86, 202, 209], "setgrpattnw": [84, 86, 202, 209], "setmaingpu": [84, 86, 202, 209], "setnbatch": [84, 86, 202, 209], "setnchunk": [84, 86, 202, 209], "setnctx": [84, 86, 151, 152, 202, 209], "setngpulay": [84, 86, 151, 152, 202, 209], "setnparallel": [84, 86, 202, 209], "setnsequ": [84, 86, 202, 209], "setnthread": [84, 86, 202, 209], "setnthreadsbatch": [84, 86, 202, 209], "setnubatch": [84, 86, 202, 209], "setnokvoffload": [84, 86, 202, 209], "setnumastrategi": [84, 86, 202, 209], "setpoolingtyp": [84, 86, 202, 209], "setropefreqbas": [84, 86, 202, 209], "setropefreqscal": [84, 86, 202, 209], "setropescalingtyp": [84, 86, 202, 209], "settensorsplit": [84, 86, 202, 209], "setusemlock": [84, 86, 202, 209], "setusemmap": [84, 86, 202, 209], "setyarnattnfactor": [84, 86, 202, 209], "setyarnbetafast": [84, 86, 202, 209], "setyarnbetaslow": [84, 86, 202, 209], "setyarnextfactor": [84, 86, 202, 209], "setyarnorigctx": [84, 86, 202, 209], "tensorsplit": [84, 86, 151, 152, 202, 209], "usemlock": [84, 86, 151, 152, 202, 209], "usemmap": [84, 86, 151, 152, 202, 209], "yarnattnfactor": [84, 86, 151, 152, 202, 209], "yarnbetafast": [84, 86, 151, 152, 202, 209], "yarnbetaslow": [84, 86, 151, 152, 202, 209], "yarnextfactor": [84, 86, 151, 152, 202, 209], "yarnorigctx": [84, 86, 151, 152, 202, 209], "islong": [84, 88], "setislong": [84, 88], "poolingstrategi": [84, 91, 100, 104, 105, 106], "setpoolingstrategi": [84, 91, 100, 104, 105, 106], "setskipoov": [84, 91], "skipoov": [84, 91], "maxit": [84, 94, 108], "mincount": [84, 94, 108, 171, 172], "numpartit": [84, 94, 108], "setmaxit": [84, 94, 108], "setmincount": [84, 94, 108, 171, 172], "setnumpartit": [84, 94, 108], "setse": [84, 94, 108, 202, 209], "setsteps": [84, 94, 108], "setvectors": [84, 94, 108], "setwindows": [84, 94, 108, 116, 117], "stepsiz": [84, 94, 108], "vectors": [84, 94, 108], "windows": [84, 94, 108, 116, 117], "getvector": [84, 94, 108], "poolinglay": [84, 96], "setpoolinglay": [84, 96], "setinstruct": [84, 97], "loadsp": [84, 107], "setloadsp": [84, 107], "readcaches": [84, 109], "setreadcaches": [84, 109], "setwritebuffers": [84, 109], "writebuffers": [84, 109], "databas": [84, 109, 113, 114, 121, 122, 212], "loadstorag": [84, 109, 113, 114, 121, 122, 202, 212], "overallcoverag": [84, 109], "withcoveragecolumn": [84, 109], "lite": 85, "googl": [85, 87, 88, 92, 94, 96, 102, 103, 107, 108, 117, 168, 232], "research": [85, 87, 88, 92, 94, 108, 154, 160, 162, 163, 164, 168], "toyota": 85, "technolog": 85, "institut": 85, "chicago": 85, "offici": [85, 117, 130, 131, 132, 196, 214, 224, 243], "tf": [85, 107], "wrapper": 85, "port": 85, "albert_base_uncas": 85, "albert_bas": 85, "768": [85, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112], "emb": [85, 101, 105], "dim": [85, 86, 151, 152, 209], "12m": 85, "albert_large_uncas": 85, "albert_larg": 85, "1024": [85, 96, 98, 112], "24": [85, 112, 122, 126, 130, 172, 196, 214, 224, 245], "18m": 85, "albert_xlarge_uncas": 85, "albert_xlarg": 85, "2048": 85, "60m": 85, "albert_xxlarge_uncas": 85, "albert_xxlarg": 85, "235m": 85, "sentencepiec": [85, 92, 107], "everi": [85, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 111, 112, 132, 149, 160, 172, 189, 197, 199, 209, 247], "dimens": [85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 202, 209], "repeat": [85, 137, 151, 152, 209], "footprint": 85, "cost": [85, 161, 172, 173], "FOR": 85, "tfhub": [85, 96, 107], "q": 85, "increas": [85, 86, 89, 95, 101, 109, 117, 137, 151, 152, 153, 156, 159, 170, 173, 174, 209], "downstream": [85, 90, 92, 96, 97, 98, 112, 153, 156, 168], "some": [85, 86, 88, 110, 117, 132, 146, 151, 152, 155, 156, 158, 165, 199, 209, 222, 229, 235, 245, 246, 250, 251], "point": [85, 87, 88, 145, 146, 189, 197, 229, 231], "harder": 85, "tpu": 85, "consumpt": [85, 107, 109], "speed": [85, 131, 155, 160, 161], "devlin": [85, 102, 103], "et": [85, 102, 103, 119, 159], "al": [85, 102, 103], "2019": [85, 90, 92, 102, 103, 110, 111, 153], "comprehens": [85, 106, 153, 155, 156, 158, 161, 166, 167], "empir": [85, 87, 88, 110, 111, 112], "evid": 85, "focus": [85, 105, 117, 137, 152, 167], "inter": 85, "coher": [85, 154, 156], "establish": 85, "glue": [85, 87, 88, 93, 99, 102, 103, 110, 111, 153], "race": [85, 92, 102, 103], "finished_embed": [85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "setoutputasvector": [85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 186, 190], "setcleanannot": [85, 92, 93, 96, 98, 102, 104, 107, 109, 110, 112, 186, 190, 191, 192], "80": [85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 125, 190, 201], "1342473030090332": [85, 92], "3855540752410889": [85, 92], "9818322062492371": [85, 92], "784737348556518": [85, 92], "847029983997345": [85, 92], "047153353691101": [85, 92], "1520637571811676": [85, 92], "6245765686035156": [85, 92], "009860038757324219": [85, 92], "13450059294700623": [85, 92], "707749128341675": [85, 92], "2916892766952": [85, 92], "04192575812339783": [85, 92], "5764210224151611": [85, 92], "3196685314178467": [85, 92], "527840495109": [85, 92], "15583214163780212": [85, 92], "1614152491092682": [85, 92], "28423872590065": [85, 92], "135491415858268": [85, 92], "cpp": [86, 151, 152, 195, 198], "cl": [86, 89, 100, 105, 106, 209], "nomic_embed_text_v1": 86, "q8_0": 86, "gguf": 86, "autoggufembeddingstest": 86, "notebook": [86, 151, 152, 167, 170, 198, 222, 239, 242], "thread": [86, 151, 152, 209], "prompt": [86, 137, 151, 152, 165, 198, 209], "logic": [86, 151, 152, 164, 165, 209], "bla": [86, 151, 152, 209], "physic": [86, 151, 152, 209], "maxim": [86, 112, 151, 152, 172, 209], "store": [86, 115, 151, 152, 200, 209, 224, 228, 235, 243], "vram": [86, 151, 152, 209], "across": [86, 96, 151, 152, 156, 157, 158, 161, 170, 209], "main": [86, 114, 151, 152, 170, 182, 209, 240, 245, 249, 252], "scratch": [86, 151, 152, 209], "tensor": [86, 96, 151, 152, 209], "distribut": [86, 94, 108, 151, 152, 209], "rope": [86, 151, 152, 209], "frequenc": [86, 137, 149, 151, 152, 172, 173, 174, 185, 209], "ntk": [86, 151, 152, 209], "awar": [86, 151, 152, 172, 209], "expand": [86, 151, 152, 161, 209], "yarn": [86, 151, 152, 209], "extrapol": [86, 151, 152, 209], "mix": [86, 96, 151, 152, 209], "sqrt": [86, 151, 152, 209], "magnitud": [86, 97, 151, 152, 173, 174, 209], "low": [86, 89, 110, 111, 151, 152, 162, 167, 172, 209], "correct": [86, 110, 151, 152, 172, 173, 174, 185, 209], "beta": [86, 151, 152, 166, 209], "alpha": [86, 151, 152, 155, 172, 209], "kv": [86, 151, 152, 209], "cach": [86, 109, 151, 152, 153, 168, 170, 209, 225], "defragment": [86, 151, 152, 209], "strategi": [86, 91, 100, 104, 105, 106, 121, 123, 125, 145, 151, 152, 172, 208, 209], "numa": [86, 151, 152, 209], "unless": [86, 151, 152, 209], "unspecifi": [86, 151, 152, 209], "flash": [86, 151, 152, 209], "pageout": [86, 151, 152, 209], "mlock": [86, 151, 152, 209], "ram": [86, 151, 152, 209], "swap": [86, 151, 152, 173, 209], "compress": [86, 151, 152, 209], "disabl": [86, 149, 151, 152, 189, 197, 209], "offload": [86, 151, 152, 209], "sure": [86, 149, 151, 152, 239], "adjust": [86, 151, 152, 209], "accord": [86, 117, 151, 152, 157, 172, 231], "hardwar": [86, 151, 152], "avoid": [86, 99, 148, 151, 152, 209], "error": [86, 151, 152, 172], "99": [86, 151, 152], "moon": [86, 100, 105, 106], "jupit": 86, "77": 86, "total": [86, 146, 152, 185], "79": [86, 123, 124], "confirm": 86, "satellit": 86, "made": [86, 92, 107, 242], "ones": [86, 152], "034486726": 86, "07770534": 86, "15982522": 86, "017873349": 86, "013914132": 86, "0365736": 86, "nparallel": [86, 209], "alia": [86, 151, 152, 209, 214], "small_bert_l2_768": 87, "introduc": [87, 88, 93, 96, 97, 98, 99, 106, 153, 157, 158, 161, 165, 167, 168], "unlik": [87, 88, 97, 110, 117, 163, 180], "jointli": [87, 88], "both": [87, 88, 95, 96, 101, 107, 115, 137, 153, 158, 163, 165, 166, 246, 247], "left": [87, 88, 152, 153, 162, 185, 205], "just": [87, 88, 93, 102, 127, 132], "modif": [87, 88], "conceptu": [87, 88], "obtain": [87, 88, 90, 95, 107, 162], "eleven": [87, 88], "push": [87, 88, 237], "absolut": [87, 88], "multinli": [87, 88], "86": [87, 88, 92], "v1": [87, 88, 101], "f1": [87, 88, 110, 111, 132, 156], "93": [87, 88], "83": [87, 88, 92, 233, 234, 252], "small_bert_l2_128": 87, "3497989177703857": [87, 97], "480538547039032": [87, 97], "3238905668258667": [87, 97], "612930893898010": [87, 97], "1357314586639404": 87, "32984697818756104": 87, "6032363176345825": 87, "6791689395904": 87, "8244884014129639": 87, "27088963985443115": 87, "059438943862915": 87, "9817547798156": 87, "1648050546646118": 87, "4725411534309387": 87, "5938255786895752": 87, "5780693292617": 87, "9125322699546814": 87, "4563939869403839": 87, "3975459933280945": 87, "81611204147338": 87, "openvino": [87, 88, 95, 102, 110], "backend": [87, 88, 95, 102, 110, 198], "sentence_bert_embed": 88, "sent_small_bert_l2_768": 88, "long": [88, 98, 101, 106, 112, 152, 161, 165, 209], "sent_small_bert_l2_128": 88, "orang": [88, 103, 111], "8951074481010437": [88, 103, 111], "13753940165042877": [88, 103, 111], "3108254075050354": [88, 103, 111], "65693199634552": [88, 103, 111], "6180210709571838": [88, 103, 111], "12179657071828842": [88, 103, 111], "191165953874588": [88, 103, 111], "4497021436691": [88, 103, 111], "822715163230896": [88, 103, 111], "7568016648292542": [88, 103, 111], "1165061742067337": [88, 103, 111], "59048593044281": [88, 103, 111], "bge": 89, "baai": 89, "dimension": [89, 107], "retriev": [89, 95, 97, 105, 109, 120, 170, 173, 174, 175, 222, 224, 239, 242, 246, 247], "bge_bas": 89, "useclstoken": [89, 202, 209], "protein": [89, 95, 101], "femal": [89, 95, 101], "eat": [89, 95, 101], "guidelin": [89, 95, 101], "cdc": [89, 95, 101], "women": [89, 95, 101], "70": [89, 95, 97, 101, 157, 158, 164], "46": [89, 95, 101, 235], "dai": [89, 95, 101, 123, 124, 172], "chart": [89, 95, 101, 222, 242], "ll": [89, 95, 101, 185], "marathon": [89, 95, 101], "below": [89, 95, 101, 115, 251], "0190285e": [89, 95, 101], "005974853": [89, 95, 101], "072875895": [89, 95, 101], "007944068": [89, 95, 101], "026059335": [89, 95, 101], "0080": [89, 95, 101], "050514214": [89, 95, 101], "010061974": [89, 95, 101], "04340176": [89, 95, 101], "020937217": [89, 95, 101], "05170225": [89, 95, 101], "01157857": [89, 95, 101], "bge_small_en_v1": 89, "tasti": 90, "french": [90, 117, 159, 160, 162, 176], "loui": 90, "martin": 90, "muller": 90, "pedro": 90, "javier": 90, "ortiz": 90, "su\u00e1rez": 90, "yoann": 90, "dupont": 90, "laurent": 90, "romari": 90, "\u00e9ric": 90, "villemont": 90, "la": [90, 137, 160], "clergeri": 90, "djam\u00e9": 90, "seddah": 90, "beno\u00eet": 90, "sagot": 90, "facebook": [90, 92, 110, 111, 153], "138gb": 90, "camembert_bas": 90, "camembertembeddingstestspec": 90, "co": [90, 117, 164, 165], "now": [90, 146, 196, 239, 247], "ubiquit": [90, 163], "despit": [90, 153, 165], "concaten": [90, 185], "except": [90, 127, 132, 178, 182], "investig": [90, 93, 107], "feasibl": 90, "monolingu": [90, 110, 111], "crawl": [90, 153, 168], "prefer": [90, 115, 165, 192], "wikipedia": [90, 119, 156, 229], "surprisingli": [90, 107], "4gb": 90, "130": 90, "gb": 90, "reach": [90, 117, 156, 185], "four": [90, 146, 152, 183, 185], "c": [90, 94, 108, 117, 159, 160, 185, 239], "un": [90, 119], "08442357927560806": 90, "12863239645957947": 90, "03835778683423996": 90, "200479581952": 90, "048462312668561935": 90, "12637358903884888": 90, "27429091930389404": 90, "07516729831": 90, "02690504491329193": 90, "12104076147079468": 90, "012526623904705048": 90, "031543646007": 90, "05877285450696945": 90, "08773420006036758": 90, "06381352990865707": 90, "122621834278": 90, "aggreg": [91, 104, 170], "sum": [91, 96, 104, 209], "discard": [91, 134], "oov": 91, "55661": 91, "42829502": 91, "86661": 91, "409785": 91, "06316501": 91, "120775": 91, "0732005": 91, "40674996": 91, "22938299": 91, "50597": 91, "288195": 91, "555655": 91, "465145": 91, "140118": 91, "17417": 91, "095253006": 91, "0530925": 91, "218465": 91, "714395": 91, "79860497": 91, "0129999": 91, "139705": 91, "177955": 91, "1887775": 91, "45545": 91, "20030999": 91, "461557": 91, "07891501": 91, "disentangl": 92, "pengcheng": 92, "xiaodong": 92, "jianfeng": 92, "gao": 92, "weizhu": 92, "chen": [92, 102, 103], "2018": [92, 102, 103], "build": [92, 93, 102, 103, 115, 117, 122, 156, 157, 159, 163, 164, 167, 222, 239, 242], "half": [92, 117], "deberta_v3_bas": 92, "microsoft": [92, 95, 99, 101, 160, 164, 165], "www": [92, 229], "blog": 92, "superglu": 92, "progress": [92, 146, 181], "significantli": [92, 96, 102, 103, 110, 111, 117, 165, 167], "mechan": [92, 98], "weight": [92, 96, 101, 117, 131, 133, 154, 163, 167, 172], "among": [92, 99, 155, 164, 165], "matric": 92, "second": [92, 96, 125, 145, 176, 181, 198, 246], "mnli": 92, "9": [92, 110, 111, 127, 138, 151, 155, 159, 165, 245, 250, 251], "90": 92, "91": 92, "88": 92, "publicli": [92, 110, 111, 165], "github": [92, 97, 101, 102, 106, 160, 163, 167, 224, 240], "fast": [93, 149, 157, 160, 196, 250], "cheap": 93, "distil": 93, "40": [93, 95, 133, 151, 152, 154, 157, 158, 160, 162], "uncas": 93, "run": [93, 117, 170, 222, 225, 239, 243, 251], "preserv": [93, 130, 181, 201], "95": [93, 152], "distilbert_base_cas": 93, "doesn": [93, 102], "token_type_id": [93, 102], "indic": [93, 102, 181, 185], "belong": [93, 102, 165], "sep_token": [93, 102], "sep": 93, "position_id": 93, "ad": [93, 96, 137, 172, 198, 229], "though": [93, 117], "let": [93, 137, 180, 239, 246], "know": [93, 160, 199], "cheaper": 93, "lighter": 93, "preval": 93, "constrain": [93, 151, 152, 209], "budget": 93, "counterpart": 93, "leverag": [93, 99, 222, 242], "knowledg": [93, 117, 163, 164, 165, 166, 192, 239], "reduc": [93, 99, 161, 164, 173, 174, 201], "retain": 93, "97": [93, 123, 124, 185], "tripl": [93, 115], "cosin": [93, 106], "distanc": [93, 152, 170, 172, 173, 174], "devic": 93, "proof": 93, "concept": [93, 247], "experi": [93, 106, 112, 137, 153, 155, 161, 222, 243], "1127224713563919": 93, "1982710212469101": 93, "5360898375511169": 93, "272536993026733": 93, "35534414649009705": 93, "13215228915214539": 93, "40981462597846985": 93, "14036104083061": 93, "328085333108902": 93, "06269335001707077": 93, "017595693469047546": 93, "024373905733": 93, "15617232024669647": 93, "2967822253704071": 93, "22324979305267334": 93, "04568954557180": 93, "45411425828933716": 93, "01173491682857275": 93, "190129816532135": 93, "1178255230188369": 93, "corpu": [94, 96, 108, 117, 120, 143, 153, 168, 171, 172, 174, 233, 252], "algorithm": [94, 108, 117, 131, 149, 172, 173, 174, 175, 229], "partit": [94, 108, 228, 231], "appear": [94, 108, 137, 152, 172], "divid": [94, 108], "1000": [94, 108, 115, 131], "025": [94, 108, 149], "estim": [94, 108, 177, 193, 220, 246], "composition": [94, 108], "sherlockholm": [94, 108, 172, 252], "numiter": [94, 108], "equal": [94, 108], "doc2vec_gigaword_300": 94, "06222493574023247": [94, 108], "011579325422644615": [94, 108], "009919632226228714": [94, 108], "109361454844": [94, 108], "doc2vec_wiki": 94, "e5": 95, "weakli": [95, 101], "tailor": [95, 97, 162], "e5_smal": 95, "unilm": [95, 101], "manner": [95, 117], "signal": [95, 96], "curat": [95, 101], "ccpair": 95, "readili": 95, "strong": [95, 110, 111, 163, 164, 165, 166], "conduct": [95, 106], "extens": [95, 106, 161, 167, 218], "56": [95, 233], "beir": 95, "mteb": 95, "bm25": 95, "baselin": [95, 107, 156], "beat": 95, "exist": [95, 96, 106, 137, 155, 159, 172, 190, 192, 209, 222, 237], "elmo": 96, "billion": [96, 154, 156, 157, 158, 161, 164, 165, 167], "lookup": [96, 109, 112, 122, 151, 152, 173, 174, 209, 212], "word_emb": 96, "shape": 96, "batch_siz": 96, "max_length": 96, "lstm_outputs1": 96, "lstm": [96, 132], "lstm_outputs2": 96, "trainabl": 96, "contextu": [96, 153, 158, 162, 172], "characterist": 96, "syntax": 96, "vari": [96, 137], "linguist": [96, 185], "polysemi": 96, "bilm": 96, "six": [96, 173, 174], "textual": [96, 97, 106, 161], "entail": 96, "expos": 96, "crucial": [96, 106], "semi": 96, "662458181381226e": 96, "2541114091873169": 96, "6275503039360046": 96, "5787073969841": 96, "19154725968837738": 96, "22998669743537903": 96, "2894386649131775": 96, "21524395048618": 96, "10400570929050446": 96, "12288510054349899": 96, "07056470215320587": 96, "246389418840": 96, "49932169914245605": 96, "12706467509269714": 96, "30969417095184326": 96, "2643227577209": 96, "8871506452560425": 96, "20039963722229004": 96, "0601330995559692": 96, "0348707810044": 96, "instructor": 97, "finetun": [97, 98, 112], "financ": 97, "sota": [97, 106, 112], "divers": [97, 107, 153, 156, 158, 167, 168, 243], "medicin": 97, "instructor_bas": 97, "summar": [97, 98, 117, 153, 154, 156, 160, 168, 209, 237], "embedd": 97, "hkunlp": 97, "explain": [97, 222, 242, 249, 251], "special": [97, 172, 185, 247], "330": 97, "mixtur": [97, 162, 166], "66": [97, 133], "unseen": 97, "suggest": [97, 156], "mitig": [97, 106], "io": 97, "dynam": [97, 151, 152, 160, 209], "scalar": 97, "degre": 97, "freedom": 97, "horava": 97, "lifshitz": 97, "graviti": 97, "iz": 98, "beltagi": 98, "matthew": 98, "arman": 98, "cohan": 98, "checkpoint": [98, 163], "mlm": [98, 99], "096": 98, "longformer_base_4096": 98, "unabl": 98, "quadrat": 98, "linearli": 98, "easi": 98, "thousand": [98, 159, 162], "drop": [98, 176], "motiv": 98, "global": [98, 162], "text8": 98, "enwik8": 98, "wikihop": 98, "triviaqa": 98, "led": [98, 102, 103, 117], "found": [98, 109, 117, 173, 180, 188, 231, 249], "18792399764060974": [98, 102], "14591649174690247": [98, 102], "20547787845134735": [98, 102], "1468472778797": [98, 102], "22845706343650818": [98, 102], "18073144555091858": [98, 102], "09725798666477203": [98, 102], "0417917296290": [98, 102], "07037967443466187": [98, 102], "14801117777824402": [98, 102], "03603338822722435": [98, 102], "17893412709": [98, 102], "08734266459941864": [98, 102], "2486150562763214": [98, 102], "009067727252840996": [98, 102], "24408400058": [98, 102], "22409197688102722": [98, 102], "4312366545200348": [98, 102], "1401449590921402": [98, 102], "356410235166549": [98, 102], "adopt": [99, 161], "permut": [99, 112], "inherit": 99, "advantag": [99, 199], "all_mpnet_base_v2": 99, "neglect": [99, 112], "plm": 99, "doe": [99, 110, 117, 130, 159, 160, 162, 196, 199, 225, 247, 250, 251], "full": [99, 101, 112, 166, 167, 246], "thu": [99, 117], "suffer": [99, 112], "discrep": [99, 112], "auxiliari": 99, "160gb": 99, "corpora": [99, 117, 122], "down": [99, 132, 246, 247], "stream": [99, 137, 151, 152, 155, 209], "experiment": [99, 117], "022502584": 99, "078291744": 99, "023030775": 99, "0051000593": 99, "080340415": 99, "039": 99, "041702367": 99, "0010974605": 99, "015534201": 99, "07092203": 99, "0017729357": 99, "04661": 99, "mxbai": 100, "mxbai_large_v1": 100, "hello": [100, 105, 106, 122, 126, 151, 154, 179, 198, 235], "50387806": [100, 105, 106], "5861606": [100, 105, 106], "35129607": [100, 105, 106], "76046336": [100, 105, 106], "32446072": [100, 105, 106], "117674336": [100, 105, 106], "6660665": [100, 105, 106], "961762": [100, 105, 106], "24854276": [100, 105, 106], "1018044": [100, 105, 106], "6569202": [100, 105, 106], "027635604": [100, 105, 106], "1915": [100, 105, 106], "cls_avg": [100, 105, 106], "avg": [100, 105, 106], "nomic": 101, "8192": 101, "ada": [101, 138], "002": [101, 138], "short": [101, 106], "nomic_embed_v1": 101, "technic": [101, 163], "report": [101, 102, 103, 107, 153, 163, 222, 242], "reproduc": [101, 159, 222, 242, 243], "opendata": 101, "licens": [101, 167], "loader": 101, "235": 101, "replic": [101, 102, 103, 153], "embedtext": 101, "nomicai": 101, "contrastor": 101, "robustli": [102, 103, 134], "yinhan": [102, 103], "myle": [102, 103, 110, 111], "ott": [102, 103, 110, 111], "naman": [102, 103, 110, 111], "goyal": [102, 103, 110, 111], "jingfei": [102, 103], "du": [102, 103, 119], "mandar": [102, 103], "joshi": [102, 103], "danqi": [102, 103], "omer": [102, 103], "levi": [102, 103], "mike": [102, 103], "lewi": [102, 103], "luke": [102, 103, 110, 111], "zettlemoy": [102, 103, 110, 111], "veselin": [102, 103, 110, 111], "stoyanov": [102, 103, 110, 111], "hyperparamet": [102, 103], "mini": [102, 103, 165], "roberta_bas": 102, "bpe": 102, "signific": [102, 103, 110, 111, 117, 120, 157, 166], "gain": [102, 103, 110, 111, 153, 159], "care": [102, 103, 182], "comparison": [102, 103, 107, 166, 176], "privat": [102, 103], "impact": [102, 103], "carefulli": [102, 103, 137, 167], "undertrain": [102, 103], "highlight": [102, 103], "previous": [102, 103, 117], "overlook": [102, 103], "rais": [102, 103, 117, 127, 132, 222], "sent_roberta_bas": 103, "embeddingssent": 104, "22093398869037628": 104, "25130119919776917": 104, "41810303926467896": 104, "380883991718": 104, "snowflak": 105, "arctic": 105, "snowflake_artic_m": 105, "uae": 106, "satur": 106, "uae_large_v1": 106, "st": 106, "vanish": 106, "gradient": [106, 131], "issu": [106, 185, 240], "core": 106, "idea": [106, 112], "advers": 106, "imped": 106, "hinder": 106, "furthermor": [106, 112], "examin": 106, "scenario": [106, 149], "were": [106, 109, 132, 222, 242], "uae_smal": 106, "tfhub_us": 107, "op": 107, "lingual": [107, 110, 111, 117, 119, 160], "accur": [107, 149, 153, 173], "trade": [107, 110, 111], "tend": 107, "With": [107, 112, 117, 167], "minim": [107, 134, 160], "encourag": [107, 158], "weat": 107, "bia": [107, 137, 151, 152, 166, 209], "freeli": 107, "04616805538535118": 107, "022307956591248512": 107, "044395286589860916": 107, "0016493503": 107, "changeabl": 107, "nor": [107, 117], "word2vec_gigaword_300": 108, "word2vec_wiki": 108, "setstoragepath": [109, 122, 202, 212], "line": [109, 114, 122, 126, 137, 146, 148, 172, 224, 229, 231, 233], "39658191506190343": 109, "630968081620067": 109, "5393722253731201": 109, "8428180123359783": 109, "7535235923631415": 109, "9699218875629833": 109, "10397182122983872": 109, "11833962569383116": 109, "stress": 109, "0492683418305907": 109, "9415954572751959": 109, "47624463167525755": 109, "16790967216778263": 109, "induc": 109, "1535748762292387": 109, "33498936903209897": 109, "9235178224122094": 109, "1158772920395934": 109, "dump": 109, "disk": [109, 246, 247], "10000": 109, "random_embeddings_dim4": 109, "setstorageref": [109, 202, 212], "glove_4d": 109, "setdimens": [109, 202, 209], "patient": 109, "diagnos": 109, "diabet": 109, "9439099431037903": 109, "4707513153553009": 109, "806300163269043": 109, "16176554560661316": 109, "7966810464859009": 109, "5551124811172485": 109, "8861005902290344": 109, "28284206986427307": 109, "025029370561242104": 109, "35177749395370483": 109, "052506182342767715": 109, "1887107789516449": 109, "08617766946554184": 109, "8399239182472229": 109, "5395117998123169": 109, "7864698767662048": 109, "6599600911140442": 109, "16109347343444824": 109, "6041093468666077": 109, "8913561105728149": 109, "5955275893211365": 109, "01899011991918087": 109, "4397728443145752": 109, "8911281824111938": 109, "9840458631515503": 109, "7599489092826843": 109, "9417727589607239": 109, "8624503016471863": 109, "glove_100d": [109, 132], "There": [109, 114, 115, 152, 180, 244, 246, 247, 252], "conveni": 109, "coverag": [109, 207], "stat": 109, "whole": [109, 163, 212, 224], "570580005645752": 109, "44183000922203064": 109, "7010200023651123": 109, "417129993438720": 109, "542639970779419": 109, "4147599935531616": 109, "0321999788284302": 109, "4024400115013122": 109, "2708599865436554": 109, "04400600120425224": 109, "020260000601410866": 109, "17395000159": 109, "6191999912261963": 109, "14650000631809235": 109, "08592499792575836": 109, "2629800140857": 109, "3397899866104126": 109, "20940999686717987": 109, "46347999572753906": 109, "6479200124740": 109, "storage_ref": [109, 114, 122, 212], "embeddings_col": 109, "coverateresult": 109, "wordsoverallcoverag": 109, "resultdf": 109, "output_col": 109, "wordscoverag": 109, "cov_embed": 109, "alexi": [110, 111], "conneau": [110, 111], "kartikai": [110, 111], "khandelw": [110, 111], "vishrav": [110, 111], "chaudhari": [110, 111], "guillaum": [110, 111], "wenzek": [110, 111], "francisco": [110, 111, 117], "guzman": 110, "edouard": [110, 111], "grave": [110, 111], "5tb": [110, 111], "commoncrawl": [110, 111], "xlm_roberta_bas": 110, "abl": [110, 159, 168, 222, 245], "terabyt": [110, 111], "r": [110, 111, 117, 154, 229], "mbert": [110, 111], "xnli": [110, 111], "mlqa": [110, 111], "particularli": [110, 111, 153], "swahili": [110, 111, 159, 162], "urdu": [110, 111, 159, 162], "capac": [110, 111, 156, 159], "dilut": [110, 111], "sacrif": [110, 111], "ri": [110, 111], "05969233065843582": 110, "030789051204919815": 110, "04443822056055069": 110, "09564960747": 110, "038839809596538544": 110, "011712731793522835": 110, "019954433664679527": 110, "0667808502": 110, "03952755779027939": 110, "03455188870429993": 110, "019103847444057465": 110, "04311436787": 110, "09579929709434509": 110, "02494969218969345": 110, "014753809198737144": 110, "10259044915": 110, "004710011184215546": 110, "022148698568344116": 110, "011723337695002556": 110, "013356896": 110, "guzm\u00e3": 111, "sent_xlm_roberta_bas": 111, "xl": [112, 227, 229], "exhibit": 112, "involv": [112, 146, 163], "rank": [112, 155, 170, 172], "xlnet_large_cas": 112, "xlnet_base_cas": 112, "zihangdai": 112, "denois": [112, 153], "autoencod": [112, 153], "corrupt": [112, 153], "pro": 112, "con": 112, "likelihood": [112, 137], "overcom": 112, "formul": 112, "6287205219268799": 112, "4865287244319916": 112, "186111718416214": 112, "234187275171279": 112, "1967450380325317": 112, "2746637463569641": 112, "9481253027915955": 112, "3431355059146881": 112, "0777631998062134": 112, "092679977416992": 112, "5331977605819702": 112, "11190271377563": 112, "8349916934967041": 112, "45627787709236145": 112, "7890847325325012": 112, "028069257736": 112, "134845569729805": 112, "11672890186309814": 112, "4945235550403595": 112, "66587203741073": 112, "alphabet": [113, 114, 135], "patternsresourc": [113, 114], "sentencematch": [113, 114], "setalphabetresourc": [113, 114], "setpatternsresourc": [113, 114], "setsentencematch": [113, 114], "setusestorag": [113, 114], "usestorag": [113, 114], "entityrul": 114, "exact": [114, 122, 126, 137], "definit": [114, 134, 231], "json": [114, 137, 200, 222, 235], "jsonl": 114, "might": [114, 132, 185, 251], "rule": [114, 121, 123, 125, 148, 178, 180, 182, 208, 213], "winterfel": 114, "jon": 114, "snow": [114, 133, 152, 172], "stark": 114, "eddard": 114, "rocksdb": 114, "lord": 114, "29": [114, 133, 185, 233, 235], "38": [114, 165, 235], "plain": [114, 229, 252], "entity_pattern": 114, "graph": [115, 132, 160, 172, 177, 192], "node": [115, 202, 206], "relev": [115, 117, 137, 149], "taken": 115, "implicitli": 115, "public": [115, 225, 237, 246], "travers": 115, "merg": [115, 122, 126], "neighbor": [115, 170], "symbol": [115, 172, 185], "coordin": [115, 145, 229], "remoteloc": 115, "rdf": [115, 192], "nertagg": [115, 131, 132, 133], "morn": [115, 192], "flight": [115, 192], "denver": [115, 192], "18": [115, 123, 124, 127, 130, 133, 152, 196, 214, 224, 245], "path1": 115, "iob": [115, 130, 131, 132], "iob2": [115, 130], "getstopword": [116, 117], "maxngram": [116, 117], "minngram": [116, 117], "nkeyword": [116, 117], "setmaxngram": [116, 117], "setminngram": [116, 117], "setnkeyword": [116, 117], "yake": 117, "independ": [117, 173, 174, 180], "grow": 117, "autom": 117, "adequ": 117, "emerg": [117, 153, 168], "tool": [117, 137, 153, 167, 229], "thesauri": 117, "neither": 117, "written": [117, 160], "plethora": 117, "situat": [117, 146], "access": [117, 163], "restrict": [117, 164], "therefor": [117, 250], "sent": 117, "boundari": [117, 145, 146, 149, 182, 185], "detector": [117, 123, 148], "section": [117, 189, 197, 242, 244, 250], "tweakabl": 117, "upper": 117, "bound": [117, 145, 146, 149], "occurr": [117, 208], "stop": [117, 131, 136, 137, 151, 152, 154, 158, 168, 176, 209, 226, 237], "campo": 117, "mangaravit": 117, "pasquali": 117, "jatowt": 117, "jorg": 117, "nune": 117, "journal": [117, 185], "elsevi": 117, "vol": 117, "509": 117, "pp": [117, 185], "257": 117, "289": 117, "turn": [117, 201, 246], "fly": 117, "demand": 117, "within": [117, 143, 149, 153, 156, 182, 188], "resort": 117, "alwai": [117, 137, 158, 163, 164, 165, 166, 168], "solut": [117, 161], "articl": [117, 172], "rest": [117, 130], "extern": [117, 120, 125, 126, 131, 132, 172, 177, 199, 213, 231, 232, 233, 234, 239], "merit": 117, "ten": 117, "carri": 117, "twenti": 117, "setcontextchar": [117, 178, 182], "acquir": 117, "kaggl": [117, 167], "platform": [117, 137, 138, 222, 244], "host": 117, "transact": 117, "somewhat": 117, "vagu": 117, "cloud": 117, "confer": 117, "week": [117, 123, 124, 179], "announc": [117, 133], "earli": 117, "tomorrow": [117, 123, 124], "founder": 117, "ceo": 117, "anthoni": 117, "goldbloom": 117, "declin": 117, "deni": 117, "acquisit": 117, "happen": 117, "rumor": 117, "scientist": 117, "ben": 117, "hamner": 117, "2010": 117, "servic": [117, 137, 160], "got": 117, "even": [117, 123, 155, 158, 168], "few": [117, 182, 233, 252], "competitor": 117, "drivendata": 117, "topcod": 117, "hackerrank": 117, "manag": [117, 225, 239, 243], "stai": 117, "ahead": 117, "nich": 117, "bui": [117, 232], "commun": [117, 157, 158, 163, 164], "mindshar": 117, "too": [117, 148, 245], "plenti": 117, "project": [117, 151, 160, 163, 167, 170, 222, 240, 243], "bit": [117, 146, 251], "histori": [117, 146, 172], "earlier": 117, "month": [117, 123, 124, 233, 252], "team": [117, 160, 222, 242], "around": [117, 152, 162], "youtub": 117, "technologi": 117, "interest": [117, 163, 164, 165, 166], "kernel": 117, "On": [117, 155, 156, 160], "analyz": [117, 149], "compani": [117, 160], "script": [117, 159, 162], "centric": [117, 159, 162], "job": [117, 188], "board": [117, 143, 233], "unclear": 117, "crunchbas": 117, "pitchbook": 117, "launch": 117, "investor": 117, "ventur": 117, "sv": [117, 159], "angel": [117, 155], "levchin": 117, "naravik": 117, "chie": 117, "economist": 117, "hal": 117, "varian": 117, "khosla": 117, "yuri": 117, "milner": 117, "resulttupl": 117, "ascend": 117, "orderbi": 117, "32051516486864573": 117, "37786450577630676": 117, "39922830978423146": 117, "40224744669493756": 117, "41584827825302534": 117, "danish": [117, 159, 162, 176], "dutch": [117, 159, 162, 176], "finnish": [117, 159, 162, 176], "german": [117, 159, 162, 176, 231, 252], "hungarian": [117, 159, 162, 176], "italian": [117, 137, 159, 162, 172, 176], "norwegian": [117, 159, 162, 176], "portugues": [117, 159, 162, 176], "russian": [117, 159, 162, 176], "spanish": [117, 159, 162, 176], "swedish": [117, 159, 162, 176], "turkish": [117, 159, 162, 176], "ld": 119, "identif": [119, 212], "rnn": 119, "tatoeba": 119, "140": 119, "wiki": 119, "languagedetector": 119, "ld_wiki_tatoeba_cnn_21": 119, "advanc": [119, 158, 161, 167, 188, 198, 201], "java": [119, 225, 229, 239], "scala": [119, 229], "program": [119, 167], "biblioth\u00e8qu": 119, "traitement": 119, "pour": 119, "le": [119, 160], "avanc\u00e9": 119, "langag": 119, "naturel": 119, "programm": 119, "ist": 119, "ein": 119, "textverarbeitungsbibliothek": 119, "f\u00fcr": 119, "fortgeschritten": 119, "nat\u00fcrlich": 119, "sprachverarbeitung": 119, "die": 119, "programmiersprachen": 119, "und": 119, "lemma": [120, 148, 196, 224, 232, 247, 250, 251], "predefin": [120, 122, 125, 126, 148], "lemmas_smal": [120, 148], "keydelimit": 120, "valuedelimit": 120, "correspend": 120, "key_delimit": 120, "value_delimit": 120, "fromlemma": 120, "lemma_antbnc": 120, "mergeoverlap": [121, 122, 126], "setent": [121, 122, 126, 128, 129, 179], "setmergeoverlap": [121, 122, 126], "settoken": [121, 122], "searchtri": [121, 122, 126], "aggressivematch": [121, 123], "anchordatedai": [121, 123, 124], "anchordatemonth": [121, 123, 124], "anchordateyear": [121, 123, 124], "defaultdaywhenmiss": [121, 123, 124], "inputformat": [121, 123, 186, 200], "outputformat": [121, 123], "readmonthfirst": [121, 123, 124], "relaxedfactorystrategi": [121, 123], "setaggressivematch": [121, 123], "setanchordatedai": [121, 123, 124], "setanchordatemonth": [121, 123, 124], "setanchordateyear": [121, 123, 124], "setdefaultdaywhenmiss": [121, 123], "setinputformat": [121, 123, 186, 200], "setoutputformat": [121, 123, 124], "setreadmonthfirst": [121, 123], "setrelaxedfactorystrategi": [121, 123], "setsourcelanguag": [121, 123], "sourcelanguag": [121, 123], "externalrul": [121, 125], "setexternalrul": [121, 125], "setrul": [121, 125], "setstrategi": [121, 125], "buildfromtoken": [121, 126], "entityvalu": [121, 126], "setbuildfromtoken": [121, 126], "setentityvalu": [121, 126], "trie": 122, "dolor": [122, 126], "magna": [122, 126], "aliqua": [122, 126], "sit": [122, 126, 152], "laborum": [122, 126], "entityextractor": [122, 126, 179], "59": [122, 123, 124, 126], "tokenizer_model": 122, "btm": 122, "tmvocab": 122, "tmedg": 122, "tmnode": 122, "1978": [123, 124], "28": [123, 124, 130, 196, 214, 224, 235, 245], "1984": [123, 124], "04": [123, 124], "02": [123, 124], "1980": [123, 124], "31st": [123, 124], "april": [123, 124], "year": [123, 124, 156, 157, 179, 233], "2008": [123, 124], "fri": [123, 124], "1997": [123, 124], "jan": [123, 124], "sun": [123, 124], "1st": [123, 124], "thursdai": [123, 124], "wednesdai": [123, 124], "todai": [123, 124, 154, 162, 235], "yesterdai": [123, 124], "0600h": [123, 124], "06": [123, 124], "00": [123, 124], "6pm": [123, 124], "23": [123, 124, 125, 133, 143, 233, 234, 235, 252], "1988": [123, 124], "31": [123, 124, 125, 133, 143, 233], "dateformat": [123, 124], "desir": [123, 124], "yyyi": [123, 124], "mm": [123, 124, 185], "dd": [123, 124, 125], "anchor": [123, 124], "januari": [123, 124], "15": [123, 235], "aggress": 123, "attempt": [123, 173], "ambigu": 123, "juli": 123, "07": 123, "05": [123, 152], "2015": 123, "relax": [123, 152], "Not": [123, 132, 199], "5th": 123, "match_first": [123, 125, 202, 208], "exhaust": 123, "saw": 124, "visit": [124, 137], "57": [124, 133], "65": [124, 133], "d": [125, 135, 182, 244], "1970": 125, "match_al": [125, 202, 208], "match_complet": [125, 202, 208], "ceremoni": 125, "71": 125, "short_dat": 125, "regardless": 126, "27": [126, 143, 145, 233], "48": [126, 185, 235], "null": 127, "empti": [127, 152, 170, 177, 188, 196], "join": [127, 143, 200, 233], "minepoch": [128, 129, 131, 132], "setminepoch": [128, 129, 131], "setrandomse": [128, 129, 132, 139, 140, 150, 160], "nerhasnoschema": [128, 130], "preserveposit": [128, 130, 178, 181, 186, 201], "setnerhasnoschema": [128, 130], "setpreserveposit": [128, 130, 178, 181, 186, 201], "setwhitelist": [128, 130, 178, 180], "whitelist": [128, 130, 178, 180], "c0": [128, 131], "externalfeatur": [128, 131], "includeconfid": [128, 131, 132], "l2": [128, 131], "lossep": [128, 131], "minw": [128, 131], "setc0": [128, 131], "setexternalfeatur": [128, 131], "setincludeconfid": [128, 131, 132], "setl2": [128, 131], "setlossep": [128, 131], "setminw": [128, 131], "bestmodelmetr": [128, 132], "enablememoryoptim": [128, 132], "includeallconfidencescor": [128, 132], "setbestmodelmetr": [128, 132], "setenablememoryoptim": [128, 132], "setincludeallconfidencescor": [128, 132], "setpo": [128, 132], "setusebestmodel": [128, 132], "setusecontrib": [128, 132], "usebestmodel": [128, 132], "usecontrib": [128, 132], "nerword": [128, 133], "newnerent": [128, 133], "replaceent": [128, 133], "setnerword": [128, 133], "setnewnerent": [128, 133], "setreplaceent": [128, 133], "ignoreent": [128, 134], "predictionthreshold": [128, 134], "setentitydefinit": [128, 134], "setpredictionthreshold": [128, 134], "recogn": [129, 130, 131, 132, 133, 134, 172], "friendli": [130, 137, 160], "outsid": 130, "14": [130, 143, 183, 196, 214, 224, 233], "ekeu": [130, 131, 132, 196, 214, 224], "36": [130, 143, 196, 214, 224, 233, 235], "baghdad": [130, 131, 132, 196, 214, 224], "37": [130, 196, 214, 224], "nercrf": 131, "crf": [131, 132], "2003": [131, 132, 185, 231, 252], "exclud": [131, 132], "decai": [131, 132], "2250000": 131, "ep": 131, "confid": [131, 132, 134], "trainingdata": [131, 132, 146, 173, 174, 231], "readdataset": [131, 132, 143, 185, 230, 231, 232, 233, 234, 235, 252], "conll2003": [131, 132, 231, 252], "eng": [131, 132, 231, 252], "c0valu": 131, "l2valu": 131, "verbosevalu": 131, "prerequisit": [131, 132, 133, 246], "nerdl": 132, "char": [132, 135, 146], "bilstm": 132, "tagger": [132, 233, 252], "rage": 132, "contrib": 132, "cell": [132, 200], "slightli": [132, 146], "slow": 132, "micro": 132, "macro": 132, "nermodel": 132, "setnewresult": 133, "overwritten": 133, "lab": 133, "42": [133, 143], "45": [133, 143, 233, 235], "47": [133, 233, 235], "ner_overwritten": 133, "cardin": 133, "rw": 133, "zeroshotn": 134, "zer_shot_n": 134, "entitydefinit": 134, "citi": 134, "town": 134, "01f": 134, "zero_shot_n": 134, "hellen": 134, "5328949": 134, "9360068": 134, "83294415": 134, "45366877": 134, "shortcut": 134, "zero_shot_ner_roberta": 134, "stem": [135, 175, 196, 224, 250, 251], "henc": 135, "pl": [135, 159], "slang": 135, "alphanumer": 135, "za": 135, "z": [135, 151, 152, 182, 209], "brother": 135, "dont": [135, 149], "sensit": [135, 173, 176, 182], "bestof": [136, 137], "echo": [136, 137], "frequencypenalti": [136, 137, 151, 152, 202, 209], "logitbia": [136, 137], "logprob": [136, 137], "maxtoken": [136, 137], "numberofcomplet": [136, 137], "presencepenalti": [136, 137, 151, 152, 202, 209], "setbestof": [136, 137], "setecho": [136, 137], "setfrequencypenalti": [136, 137, 202, 209], "setlogitbia": [136, 137], "setlogprob": [136, 137], "setmaxtoken": [136, 137], "setmodel": [136, 137, 138, 144, 146], "setnumberofcomplet": [136, 137], "setpresencepenalti": [136, 137, 202, 209], "setstop": [136, 137], "setsuffix": [136, 137, 178, 180], "setus": [136, 137, 138], "suffix": [136, 137, 151, 152, 178, 180, 182, 209, 246], "request": [137, 138, 167], "complet": [137, 151, 152, 167, 209, 222, 243, 246], "api": [137, 138, 229, 240, 242, 246, 249], "executor": [137, 138], "insert": [137, 173, 174, 246], "nucleu": 137, "mass": 137, "penal": [137, 151, 152, 209], "topic": 137, "verbatim": 137, "best_of": 137, "server": [137, 151, 152, 251], "side": [137, 152, 155, 185], "abus": [137, 138], "pleasur": 137, "dine": 137, "fiorita": 137, "truli": [137, 163], "delight": 137, "menu": 137, "boast": 137, "wonder": 137, "classic": 137, "dish": 137, "exquisit": 137, "prepar": [137, 187, 189, 195, 197], "staff": [137, 148], "227": 137, "barbecu": 137, "joe": 137, "dinner": 137, "amaz": 137, "pull": [137, 167], "pork": 137, "smoke": 137, "turkei": 137, "brisket": 137, "rib": 137, "sandwich": 137, "opt": 137, "172": 137, "overallr": 137, "reviewbodi": 137, "enjoi": [137, 152, 155], "meal": 137, "restaur": [137, 148], "flavour": 137, "beautifulli": [137, 152], "cannot": 137, "candid": [137, 172, 173, 174, 182], "consum": 137, "quota": 137, "ensur": [137, 161, 162, 167], "max_token": 137, "mathemat": [137, 155], "ban": 137, "exclus": 137, "50256": 137, "prevent": 137, "endoftext": 137, "plu": [137, 156], "determinist": 137, "alter": 137, "empty_df": 138, "sample_text": 138, "delici": 138, "waiter": 138, "sample_df": 138, "002297497": 138, "009297881": 138, "015739758": 138, "0076794787": 138, "004737794": 138, "01487661": 138, "009856389": 138, "03823238": 138, "0069305706": 138, "028610818": 138, "025208998": 138, "018138802": 138, "0036271256": 138, "025539026": 138, "204275e": 138, "016374426": 138, "02828079": 138, "0054073683": 138, "009710415": 138, "016399812": 138, "015397037": 138, "00427766": 138, "006987691": 138, "0072859847": 138, "003874646": 138, "018544989": 138, "008752067": 138, "022657635": 138, "011493831": 138, "023901584": 138, "015638212": 138, "0035192322": 138, "034932107": 138, "0041919798": 138, "02612292": 138, "021515233": 138, "005715182": 138, "011754045": 138, "008453773": 138, "004080913": 138, "019179657": 138, "014419649": 138, "00893612": 138, "0063911034": 138, "045670684": 138, "017884934": 138, "005610462": 138, "219344e": 138, "02211182": 138, "0039539794": 138, "021007499": 138, "017631067": 138, "011696924": 138, "02260686": 138, "016336346": 138, "017174106": 138, "008466466": 138, "0015922225": 138, "025094759": 138, "024967825": 138, "007806412": 138, "005794516": 138, "022187982": 138, "0029162979": 138, "0060959826": 138, "025564414": 138, "008104706": 138, "0010178483": 138, "9823447e": 138, "0046425937": 138, "02074094": 138, "013467647": 138, "004626727": 138, "016006319": 138, "0166156": 138, "008948814": 138, "007616012": 138, "013619968": 138, "0069749975": 138, "0052677416": 138, "009881775": 138, "04592455": 138, "0030464048": 138, "024003131": 138, "02301305": 138, "006981344": 138, "023571556": 138, "009938896": 138, "006537077": 138, "033332746": 138, "002690991": 138, "019928563": 138, "0017596161": 138, "001090835": 138, "022683023": 138, "005007528": 138, "01540973": 138, "031530287": 138, "0054676617": 138, "015980931": 138, "0051471544": 138, "019890483": 138, "009386734": 138, "0062133963": 138, "031174876": 138, "009405775": 138, "015270104": 138, "028864685": 138, "021020193": 138, "018303815": 138, "0029210579": 138, "012693353": 138, "005102728": 138, "049580235": 138, "04300508": 138, "1293065e": 138, "0215787": 138, "016894853": 138, "0065434235": 138, "041431103": 138, "662815e": 138, "03351045": 138, "0128901": 138, "010510096": 138, "807209e": 138, "01835459": 138, "2869726e": 138, "01309954": 138, "011982525": 138, "005813556": 138, "0070194243": 138, "008637827": 138, "018456135": 138, "5521466e": 138, "019141577": 138, "021896034": 138, "02975322": 138, "0043220865": 138, "0015160623": 138, "0052074483": 138, "0149527695": 138, "0213883": 138, "018836936": 138, "01105591": 138, "0074636918": 138, "022632249": 138, "0036810723": 138, "006286383": 138, "025678653": 138, "027773056": 138, "03668379": 138, "00445854": 138, "013911915": 138, "008015852": 138, "0056739287": 138, "010281616": 138, "0057659554": 138, "00872668": 138, "010649723": 138, "0787844e": 138, "032164957": 138, "023838118": 138, "002641804": 138, "030387888": 138, "029626286": 138, "016602905": 138, "0021784967": 138, "0010519617": 138, "0116524985": 138, "018519603": 138, "007552545": 138, "007419265": 138, "0011090817": 138, "0044331537": 138, "009989669": 138, "007533505": 138, "0061943564": 138, "0057088356": 138, "028230017": 138, "0042554466": 138, "029321646": 138, "024790118": 138, "015676292": 138, "018202268": 138, "0075017717": 138, "00865052": 138, "0063942764": 138, "0020118963": 138, "036963046": 138, "002335577": 138, "020804405": 138, "6888937": 138, "019598536": 138, "0034748053": 138, "0067401705": 138, "02835695": 138, "023393849": 138, "0071527045": 138, "010586256": 138, "0096088685": 138, "009488282": 138, "021337526": 138, "6766098e": 138, "019801632": 138, "0022705235": 138, "009558095": 138, "0020753632": 138, "708839e": 138, "0066449703": 138, "04130417": 138, "011220924": 138, "013391487": 138, "027722282": 138, "011366897": 138, "4434706e": 138, "015460504": 138, "549375e": 138, "01449581": 138, "008529933": 138, "018875016": 138, "017745307": 138, "009437508": 138, "024587024": 138, "013010687": 138, "008993241": 138, "005093208": 138, "024218917": 138, "024066597": 138, "0037857925": 138, "031047942": 138, "015003543": 138, "023266915": 138, "03021018": 138, "0069115306": 138, "010154682": 138, "011430364": 138, "030311726": 138, "01764376": 138, "0020975766": 138, "006746517": 138, "009748495": 138, "01665368": 138, "003658859": 138, "02789999": 138, "0040682196": 138, "0031289116": 138, "029905539": 138, "016882159": 138, "0021689767": 138, "023228835": 138, "011773085": 138, "014292715": 138, "019827018": 138, "029575512": 138, "0015803224": 138, "018405361": 138, "002776671": 138, "019370057": 138, "027569963": 138, "008460119": 138, "012445833": 138, "0028322043": 138, "0052804346": 138, "006422837": 138, "009335961": 138, "02354617": 138, "0010345082": 138, "018900402": 138, "0029908712": 138, "0068544107": 138, "010148335": 138, "007939693": 138, "0072796377": 138, "020537846": 138, "010928977": 138, "029880153": 138, "0038492593": 138, "002795711": 138, "01892579": 138, "029956313": 138, "024612412": 138, "00446806": 138, "026452947": 138, "017605681": 138, "041177236": 138, "02018243": 138, "014648129": 138, "021553313": 138, "0015017823": 138, "0034874987": 138, "034170505": 138, "036125284": 138, "02805231": 138, "018430749": 138, "003404992": 138, "009329614": 138, "020766325": 138, "012560072": 138, "01707256": 138, "011538258": 138, "007711212": 138, "01332802": 138, "007412918": 138, "022492621": 138, "0059055826": 138, "025754813": 138, "01904003": 138, "013353407": 138, "0026005507": 138, "022530701": 138, "007895266": 138, "842112e": 138, "028103083": 138, "013962688": 138, "019979337": 138, "02115982": 138, "0029305778": 138, "01340418": 138, "01609517": 138, "011880978": 138, "016793307": 138, "0048837676": 138, "013036073": 138, "025767507": 138, "030337114": 138, "022454541": 138, "018824242": 138, "0019785764": 138, "006146756": 138, "0021055099": 138, "0014525956": 138, "011157458": 138, "005293128": 138, "011468444": 138, "021591393": 138, "0051535014": 138, "005597769": 138, "1935701e": 138, "012731433": 138, "0034208586": 138, "024688572": 138, "0018103895": 138, "001299482": 138, "005461315": 138, "024878971": 138, "030565593": 138, "016717145": 138, "013226474": 138, "008764761": 138, "007355798": 138, "0070638508": 138, "005734222": 138, "012084072": 138, "023749264": 138, "028813912": 138, "015892077": 138, "0033573918": 138, "0052201413": 138, "01672984": 138, "0014105488": 138, "02184526": 138, "019560456": 138, "0063752364": 138, "008777454": 138, "00418246": 138, "013861141": 138, "012877407": 138, "009500975": 138, "005804036": 138, "0013859555": 138, "025335932": 138, "01779608": 138, "01537165": 138, "0019722297": 138, "011081297": 138, "0073875315": 138, "0015795291": 138, "015968239": 138, "013454954": 138, "0026592575": 138, "0020944031": 138, "014140395": 138, "0023339903": 138, "0064989966": 138, "0030828982": 138, "0046870206": 138, "013239168": 138, "017491441": 138, "011106684": 138, "029702445": 138, "003696939": 138, "013784981": 138, "017250266": 138, "0037762725": 138, "021413686": 138, "017047172": 138, "019268509": 138, "006898837": 138, "013924608": 138, "009266147": 138, "0023577902": 138, "020905953": 138, "005264568": 138, "0014875022": 138, "0064513967": 138, "003044818": 138, "0073431046": 138, "0012431552": 138, "0021166166": 138, "0019404964": 138, "018646536": 138, "6913787e": 138, "01518125": 138, "0013581888": 138, "016755225": 138, "5418405e": 138, "0076921717": 138, "016780613": 138, "56008e": 138, "010948017": 138, "956349e": 138, "006108676": 138, "011290737": 138, "027443029": 138, "008910734": 138, "012858367": 138, "016844079": 138, "017592987": 138, "01476237": 138, "0039793663": 138, "008066626": 138, "0018421229": 138, "03422128": 138, "016526746": 138, "022200674": 138, "0010051549": 138, "004474407": 138, "6767073e": 138, "007749292": 138, "026249854": 138, "006670357": 138, "014775063": 138, "02589444": 138, "0023530303": 138, "0066068904": 138, "0067147836": 138, "0012542619": 138, "018671922": 138, "0022498968": 138, "0048552076": 138, "0031463648": 138, "0217691": 138, "011849245": 138, "0026735375": 138, "011024177": 138, "01733912": 138, "0073621445": 138, "012407753": 138, "0032939252": 138, "0072288644": 138, "014457729": 138, "0011781019": 138, "009615215": 138, "0141150085": 138, "025376e": 138, "04615303": 138, "031631835": 138, "005131288": 138, "006594197": 138, "025386706": 138, "028204631": 138, "023482703": 138, "013086847": 138, "022314915": 138, "2082416e": 138, "023457317": 138, "006013476": 138, "0125029525": 138, "0021404168": 138, "023977743": 138, "0033542186": 138, "029423192": 138, "0019960299": 138, "0076477453": 138, "080113e": 138, "030413274": 138, "008790147": 138, "013493034": 138, "078089505": 138, "004842514": 138, "015232024": 138, "00825068": 138, "036785338": 138, "335175e": 138, "03891782": 138, "004680674": 138, "005451795": 138, "012134845": 138, "02490436": 138, "007101931": 138, "026351402": 138, "0043093935": 138, "0059595294": 138, "024561638": 138, "019331977": 138, "02385081": 138, "008206253": 138, "015942851": 138, "027138388": 138, "01521933": 138, "0043728603": 138, "025500946": 138, "026173694": 138, "0011558884": 138, "023381157": 138, "0016207825": 138, "001237602": 138, "0049916613": 138, "0024085636": 138, "015587438": 138, "0048203007": 138, "35144e": 138, "012255432": 138, "0048742476": 138, "0062546497": 138, "04051718": 138, "0051090745": 138, "016932933": 138, "0016660026": 138, "02774767": 138, "050976507": 138, "03043866": 138, "0028655245": 138, "0023292303": 138, "0104275895": 138, "004360167": 138, "011144764": 138, "024282385": 138, "013988075": 138, "016234798": 138, "014698903": 138, "037673872": 138, "0054644886": 138, "020461684": 138, "012598153": 138, "012363326": 138, "002833791": 138, "0029274046": 138, "01243314": 138, "0037413659": 138, "012820287": 138, "0070511578": 138, "017364508": 138, "0025545373": 138, "0034843255": 138, "009773882": 138, "0010368882": 138, "009894469": 138, "330013e": 138, "008237986": 138, "0013804021": 138, "0035890455": 138, "029194713": 138, "022721102": 138, "026605267": 138, "011151111": 138, "0054200618": 138, "0043919003": 138, "0022181633": 138, "0025402573": 138, "015562051": 138, "021984888": 138, "025145533": 138, "008422039": 138, "0032590183": 138, "008130092": 138, "0019309763": 138, "009278841": 138, "981743e": 138, "04363975": 138, "008510893": 138, "011360551": 138, "025069373": 138, "004252273": 138, "011132071": 138, "020474378": 138, "014889303": 138, "01896387": 138, "0075461986": 138, "012096765": 138, "030489434": 138, "012166579": 138, "032393437": 138, "0035763523": 138, "009018627": 138, "007438305": 138, "0064196633": 138, "025056679": 138, "012230045": 138, "821482e": 138, "0124839125": 138, "0014454556": 138, "012744127": 138, "007159051": 138, "010402203": 138, "010053135": 138, "0042808335": 138, "0025307373": 138, "004128513": 138, "010890896": 138, "025716733": 138, "024155451": 138, "04023793": 138, "015257411": 138, "0129154865": 138, "013264554": 138, "028636204": 138, "023520783": 138, "004890114": 138, "008022199": 138, "016184025": 138, "051535014": 138, "011792125": 138, "009291534": 138, "031707995": 138, "039476328": 138, "004699714": 138, "014216555": 138, "01480045": 138, "0065053436": 138, "0044997935": 138, "021705633": 138, "0904366e": 138, "019585844": 138, "0036842457": 138, "455769e": 138, "006727477": 138, "0108718565": 138, "0046076872": 138, "0303625": 138, "02967706": 138, "026554495": 138, "014825836": 138, "009786575": 138, "009285187": 138, "020931339": 138, "003630299": 138, "004693367": 138, "009589829": 138, "013886528": 138, "017694535": 138, "027493803": 138, "004982141": 138, "0071717445": 138, "03297733": 138, "007571585": 138, "006276863": 138, "016069785": 138, "0464047e": 138, "0025450173": 138, "015358957": 138, "018494215": 138, "7068556e": 138, "027646123": 138, "0011114617": 138, "013429567": 138, "007920653": 138, "0050011813": 138, "013543808": 138, "014381569": 138, "0047346205": 138, "018798856": 138, "019674698": 138, "012629886": 138, "029803993": 138, "009862735": 138, "0033732585": 138, "013048767": 138, "009456548": 138, "03815622": 138, "286778e": 138, "0040301397": 138, "014254635": 138, "0038809928": 138, "016666373": 138, "6997105e": 138, "017351814": 138, "015549357": 138, "02952474": 138, "00431574": 138, "009818309": 138, "470635e": 138, "011404978": 138, "025082065": 138, "021908727": 138, "018951176": 138, "022936888": 138, "013658048": 138, "004671154": 138, "0296009": 138, "0127949": 138, "018341895": 138, "6842424e": 138, "01292818": 138, "0036429923": 138, "030083247": 138, "00215311": 138, "024206225": 138, "02619908": 138, "009837349": 138, "010256229": 138, "008168173": 138, "0100340955": 138, "013150314": 138, "02188334": 138, "010935323": 138, "008371267": 138, "00857436": 138, "0036144322": 138, "009697721": 138, "007863532": 138, "018100722": 138, "019446217": 138, "023495397": 138, "0037032857": 138, "009380388": 138, "027265321": 138, "007140011": 138, "015193944": 138, "004556914": 138, "013632661": 138, "0056358487": 138, "01040855": 138, "0050519546": 138, "008155479": 138, "9020106e": 138, "032571144": 138, "0048076073": 138, "0060293428": 138, "016031705": 138, "021781793": 138, "0015866691": 138, "0016088824": 138, "024752038": 138, "0019547765": 138, "012369673": 138, "015320877": 138, "012706046": 138, "009082094": 138, "010249883": 138, "019128883": 138, "02543748": 138, "0084982": 138, "0032970984": 138, "012991647": 138, "022479929": 138, "02316537": 138, "0012312552": 138, "0042840065": 138, "018227655": 138, "005731049": 138, "02604676": 138, "006689397": 138, "006305423": 138, "018075334": 138, "019484296": 138, "01783416": 138, "0012130085": 138, "015866691": 138, "020626698": 138, "039882515": 138, "008682254": 138, "0022546567": 138, "009323268": 138, "035871416": 138, "014330796": 138, "0145465825": 138, "023216143": 138, "011531911": 138, "020372832": 138, "00641649": 138, "013531114": 138, "016437892": 138, "013124927": 138, "019814324": 138, "0015136823": 138, "016247492": 138, "004753661": 138, "013823061": 138, "007907959": 138, "027113002": 138, "009932549": 138, "009659641": 138, "0044807536": 138, "009850042": 138, "014191168": 138, "042954307": 138, "024701266": 138, "01059895": 138, "0047885673": 138, "021629473": 138, "006651317": 138, "031098714": 138, "0058262493": 138, "0051249415": 138, "0065180366": 138, "0519563e": 138, "009792922": 138, "0423958": 138, "010992444": 138, "008739374": 138, "002449817": 138, "012045992": 138, "014089622": 138, "0018310162": 138, "014406956": 138, "033180423": 138, "0052709146": 138, "0016802826": 138, "012750473": 138, "018329201": 138, "005750089": 138, "048234742": 138, "01771992": 138, "009240761": 138, "789961e": 138, "017669147": 138, "01730104": 138, "0026529108": 138, "022543395": 138, "017288346": 138, "007971426": 138, "019065415": 138, "007857186": 138, "0481933e": 138, "016488666": 138, "709636e": 138, "009348654": 138, "0049281945": 138, "0059436625": 138, "020956725": 138, "003538272": 138, "0038905127": 138, "0016485492": 138, "0044141137": 138, "01271874": 138, "01483853": 138, "01245218": 138, "0023657237": 138, "0037794458": 138, "5497736e": 138, "00882188": 138, "015815917": 138, "016767919": 138, "005185235": 138, "018049948": 138, "007685825": 138, "21934114": 138, "012007912": 138, "005039261": 138, "037445392": 138, "4307736e": 138, "031403355": 138, "0018468829": 138, "0024656837": 138, "01722488": 138, "013213781": 138, "011512871": 138, "0015811158": 138, "0035287521": 138, "0062419563": 138, "0048456877": 138, "025120145": 138, "023800036": 138, "0269697e": 138, "03554139": 138, "01071319": 138, "2110125e": 138, "017313734": 138, "03777542": 138, "0019944431": 138, "04402055": 138, "02442201": 138, "018976564": 138, "005873849": 138, "006924224": 138, "003865126": 138, "0057437425": 138, "0038206992": 138, "013163007": 138, "01646328": 138, "02446009": 138, "018748082": 138, "027239935": 138, "0032479118": 138, "03653147": 138, "015206637": 138, "018773468": 138, "00643553": 138, "010141989": 138, "009183641": 138, "02025859": 138, "019852404": 138, "006054729": 138, "010630683": 138, "009481935": 138, "059881e": 138, "03005786": 138, "014851223": 138, "014280022": 138, "003274885": 138, "0014168955": 138, "025005905": 138, "9089613e": 138, "022302222": 138, "008999587": 138, "010097562": 138, "024942439": 138, "012807593": 138, "019547764": 138, "034957495": 138, "026833748": 138, "7683392e": 138, "0068417173": 138, "011182844": 138, "016907547": 138, "03013402": 138, "0041062995": 138, "014571969": 138, "02070286": 138, "011335164": 138, "012725086": 138, "8341785e": 138, "0013653288": 138, "017859548": 138, "0056802756": 138, "006556117": 138, "0033002717": 138, "011398631": 138, "010954363": 138, "055139925": 138, "009424815": 138, "004959928": 138, "028788524": 138, "0031241516": 138, "0027465243": 138, "036810722": 138, "0031828582": 138, "005543822": 138, "0026053106": 138, "6973375e": 138, "017935708": 138, "0015406557": 138, "0023911104": 138, "016945627": 138, "0035636588": 138, "02396505": 138, "01911619": 138, "0029448578": 138, "033408906": 138, "020550538": 138, "01294722": 138, "011500178": 138, "011988872": 138, "025424786": 138, "011887325": 138, "038587794": 138, "003395472": 138, "007946039": 138, "019966645": 138, "033713546": 138, "018189576": 138, "026859134": 138, "012223699": 138, "024802811": 138, "099946e": 138, "0010448216": 138, "005020221": 138, "012356979": 138, "007590625": 138, "03089562": 138, "014521196": 138, "017212186": 138, "024917051": 138, "020169739": 138, "044680603": 138, "005658062": 138, "013835755": 138, "3776127e": 138, "0028496578": 138, "006467263": 138, "053007443": 138, "011614418": 138, "0056453687": 138, "16145945": 138, "0091963345": 138, "024548944": 138, "016425198": 138, "015701678": 138, "862344e": 138, "023190755": 138, "0074509983": 138, "018088028": 138, "010205456": 138, "010383163": 138, "033028103": 138, "0023324036": 138, "019052723": 138, "016590212": 138, "4408938e": 138, "02324153": 138, "019623924": 138, "0383847": 138, "002686231": 138, "0010852817": 138, "0076223584": 138, "002762391": 138, "030540207": 138, "0037667525": 138, "011005137": 138, "0017850028": 138, "005984916": 138, "0029353378": 138, "02555172": 138, "00855532": 138, "010287963": 138, "2544602e": 138, "0065624635": 138, "017808774": 138, "03528752": 138, "013188394": 138, "027925376": 138, "0014248289": 138, "009342308": 138, "0017247093": 138, "023596942": 138, "004709234": 138, "037369233": 138, "016082479": 138, "0011963486": 138, "00222451": 138, "014165782": 138, "0014414889": 138, "0058865426": 138, "2633766e": 138, "012274472": 138, "011328817": 138, "0020372833": 138, "0013026553": 138, "00635937": 138, "00651169": 138, "0024672705": 138, "0026640175": 138, "0033669118": 138, "0074763848": 138, "311968e": 138, "023444623": 138, "017656455": 138, "0065243836": 138, "021832567": 138, "02320345": 138, "015092397": 138, "034119733": 138, "025983294": 138, "021324834": 138, "015663598": 138, "00417294": 138, "014965463": 138, "014203862": 138, "0074319583": 138, "007381185": 138, "0035446188": 138, "009310574": 138, "02562788": 138, "01101783": 138, "009050361": 138, "010484709": 138, "005835769": 138, "0036620323": 138, "0055565154": 138, "028712364": 138, "033586614": 138, "027087616": 138, "019509684": 138, "005166195": 138, "020042805": 138, "019903177": 138, "010738577": 138, "038816273": 138, "014990849": 138, "025412092": 138, "030464048": 138, "009158255": 138, "046609994": 138, "9095457e": 138, "0016675893": 138, "012921833": 138, "2828116e": 138, "0033288319": 138, "10784273": 138, "022898808": 138, "020563232": 138, "020487072": 138, "0063117696": 138, "005299475": 138, "013442261": 138, "0112590045": 138, "015282797": 138, "013581888": 138, "023723876": 138, "00847916": 138, "025221692": 138, "028686978": 138, "8655227e": 138, "005169368": 138, "0765446e": 138, "011436711": 138, "004963101": 138, "0067592105": 138, "007527158": 138, "029854767": 138, "0072098244": 138, "011246311": 138, "009945242": 138, "017326428": 138, "004052353": 138, "011684231": 138, "311375e": 138, "026986068": 138, "012801247": 138, "0023815904": 138, "047600072": 138, "006886144": 138, "004464887": 138, "9809546e": 138, "018684616": 138, "022924196": 138, "0070575043": 138, "0037730993": 138, "025830973": 138, "029651672": 138, "0046140337": 138, "041710358": 138, "0058960626": 138, "0018706829": 138, "0065878504": 138, "0067338236": 138, "0011431951": 138, "020233205": 138, "008218946": 138, "015930157": 138, "0024022171": 138, "0051439814": 138, "0120777255": 138, "00895516": 138, "010116602": 138, "038638566": 138, "0056231553": 138, "840722e": 138, "009754842": 138, "0074256114": 138, "0011773085": 138, "7314436e": 138, "02014435": 138, "010186416": 138, "0067211306": 138, "015828611": 138, "0043665133": 138, "0112526575": 138, "031073328": 138, "018126108": 138, "014432343": 138, "0021118566": 138, "017389894": 138, "023635022": 138, "0062736897": 138, "040187154": 138, "006905184": 138, "0068163304": 138, "0087838005": 138, "010072175": 138, "00832684": 138, "01061799": 138, "01268066": 138, "0137088215": 138, "007926999": 138, "01711064": 138, "00885996": 138, "015422424": 138, "0052011013": 138, "022327607": 138, "0092280675": 138, "022251448": 138, "0045251804": 138, "5886433e": 138, "020360138": 138, "021870647": 138, "013251861": 138, "027595349": 138, "01094167": 138, "011550951": 138, "0033034452": 138, "026072146": 138, "030032473": 138, "00411582": 138, "012185619": 138, "0096215615": 138, "002618004": 138, "006575157": 138, "03675995": 138, "010986097": 138, "023673104": 138, "011900018": 138, "016044399": 138, "0040206197": 138, "018722696": 138, "0038873393": 138, "011163804": 138, "01919235": 138, "015790531": 138, "0013692954": 138, "011836552": 138, "005096381": 138, "031200262": 138, "0358968": 138, "009126521": 138, "013696128": 138, "014711596": 138, "018608455": 138, "03922246": 138, "0179484": 138, "0069178776": 138, "010909937": 138, "013569194": 138, "019839711": 138, "024447398": 138, "01086551": 138, "010294309": 138, "024726652": 138, "016679065": 138, "0013145554": 138, "004617207": 138, "004690194": 138, "013315327": 138, "0112653505": 138, "0016009491": 138, "003998406": 138, "025272466": 138, "0030051514": 138, "007869879": 138, "031251036": 138, "005375635": 138, "0046203807": 138, "0030099114": 138, "0071273176": 138, "012020606": 138, "016285572": 138, "033865865": 138, "04290353": 138, "009107481": 138, "007400225": 138, "018253041": 138, "016704453": 138, "003957153": 138, "022644943": 138, "0074446513": 138, "012122152": 138, "0013796088": 138, "019014644": 138, "026909908": 138, "003035298": 138, "012153885": 138, "020499766": 138, "006010303": 138, "004026966": 138, "3466855e": 138, "001078935": 138, "0051725414": 138, "0014906756": 138, "009526362": 138, "016310958": 138, "010357776": 138, "0145338895": 138, "015993625": 138, "025259772": 138, "036937658": 138, "0044014202": 138, "008713987": 138, "003931766": 138, "0053597684": 138, "02797615": 138, "020093577": 138, "004550567": 138, "024434704": 138, "0029956312": 138, "6632223e": 138, "51248e": 138, "028915457": 138, "023470009": 138, "008675907": 138, "014013462": 138, "0031527115": 138, "0018865496": 138, "0033986452": 138, "040974144": 138, "002589444": 138, "0018516429": 138, "049504075": 138, "00884092": 138, "004541047": 138, "014076929": 138, "015473197": 138, "0027211376": 138, "031327195": 138, "041126464": 138, "018595763": 138, "0104593225": 138, "01938275": 138, "0027592175": 138, "setenableoutputlog": [139, 141, 222, 242], "setevaluationlogextend": [139, 141], "setoutputlogspath": [139, 141, 144, 146, 222, 242], "assum": 141, "getniter": [142, 143, 184, 185], "niter": [142, 143, 184, 185], "poscol": [142, 143, 184, 185, 231], "setiter": [142, 143], "setposcolumn": [142, 143, 184, 185], "member": [143, 224], "helper": [143, 152, 185, 192, 214, 233, 234, 235, 240, 249, 252], "datasetpath": 143, "pierr": [143, 233], "vinken": [143, 233], "34": [143, 233, 235], "md": [143, 233], "vb": [143, 231, 233, 252], "41": [143, 145, 233, 235], "43": [143, 145, 233, 235], "dt": [143, 233, 234, 252], "49": [143, 233], "anc": [143, 233, 252], "trainingperceptrondf": 143, "trainedpo": 143, "cd": [143, 231, 233], "pos_anc": 143, "25": [143, 145, 233, 235], "33": [143, 235], "detectlist": [144, 145], "setcustombound": [144, 145, 146], "setcustomboundsstrategi": [144, 145], "setdetectlist": [144, 145], "setexplodesent": [144, 145, 146], "setsplitlength": [144, 145, 146], "setuseabbrevi": [144, 145], "setusecustomboundsonli": [144, 145, 146], "custombound": [144, 145, 146], "customboundsstrategi": [144, 145], "explodesent": [144, 145, 146, 231, 232], "splitlength": [144, 145, 146], "useabbrevi": [144, 145], "usecustomboundsonli": [144, 145, 146], "epochsnumb": [144, 146], "impossiblepenultim": [144, 146], "modelarchitectur": [144, 146], "setepochsnumb": [144, 146], "setimpossiblepenultim": [144, 146], "ii": 145, "abbrevi": 145, "period": 145, "geo": 145, "1026": 145, "253": 145, "553": 145, "ellipsi": 145, "quotat": 145, "mark": [145, 146, 185], "exclam": 145, "breaker": 145, "pragmaticcontentformatt": 145, "explicitli": [145, 146, 176, 214, 246], "prepend": [145, 188], "break": [145, 162], "append": [145, 172, 246], "forcibli": [145, 146], "99999": [145, 146, 182], "nhow": 145, "third": [145, 176, 221, 231, 240], "sentencedetectordl": [146, 160], "imposs": [146, 185], "penultim": 146, "eo": 146, "stefan": 146, "schweter": 146, "sajawel": 146, "ahm": 146, "cover": [146, 153, 159, 162, 168, 185], "broken": 146, "moder": 146, "lack": 146, "easier": [146, 191, 248, 252], "polit": 146, "successor": 146, "great": 146, "heritag": [146, 167], "bequeath": 146, "nelson": 146, "mandela": 146, "epochs_numb": 146, "impossible_penultim": 146, "model_architectur": 146, "output_logs_path": 146, "validation_split": 146, "sentencedl": 146, "sentencesdl": 146, "helen": 146, "peopl": 146, "decrementmultipli": [147, 148], "enablescor": [147, 148], "incrementmultipli": [147, 148], "negativemultipli": [147, 148], "positivemultipli": [147, 148], "reversemultipli": [147, 148], "featurelimit": [147, 149], "importantfeatureratio": [147, 149], "prunecorpu": [147, 149], "sentimentcol": [147, 149], "setprunecorpu": [147, 149], "setsentimentcol": [147, 149], "unimportantfeaturestep": [147, 149], "els": 148, "cool": 148, "superb": 148, "uninspir": 148, "sentimentscor": 148, "nice": [148, 222, 242], "multipli": 148, "decrement": 148, "increment": [148, 181], "revert": 148, "entri": [148, 189, 197, 225], "sttr": 148, "sda": [148, 149], "pragmat": 148, "viveknsenti": 149, "analys": 149, "vivek": 149, "narayanan": 149, "give": 149, "transit": [149, 172], "unfrequ": 149, "scope": 149, "naiv": 149, "bay": 149, "vivekn": 149, "train_senti": 149, "result_senti": 149, "final_senti": 149, "cast": [149, 187], "horribl": 149, "go": [149, 246], "again": [149, 180], "anyon": 149, "protagonist": 149, "music": 149, "boost": 149, "dirt": 149, "lookahead": 149, "unimport": 149, "sentiment_vivekn": 149, "setcach": [150, 153], "usecach": [150, 153, 168], "setstoptokenid": [150, 154, 158], "stoptokenid": [150, 154, 158], "setsrclang": [150, 159, 162], "settgtlang": [150, 159, 162], "srclang": [150, 159, 162], "tgtlang": [150, 159, 162], "langid": [150, 160], "maxinputlength": [150, 160], "setlangid": [150, 160], "setmaxinputlength": [150, 160], "maxnewtoken": [150, 168], "setmaxnewtoken": [150, 168], "setstopateo": [150, 168], "setusecach": [150, 168], "stopateo": [150, 168], "settabl": [151, 152], "explan": [151, 152, 172, 249], "phi3": [151, 165], "5_mini_4k_instruct_q4_gguf": 151, "autoggufmodeltest": 151, "nthreadsdraft": [151, 152, 202, 209], "draft": [151, 152, 209], "nthreadsbatchdraft": [151, 152, 202, 209], "ndraft": [151, 152, 202, 209], "specul": [151, 152, 209], "psplit": [151, 152, 202, 209], "ngpulayersdraft": [151, 152, 202, 209], "modeldraft": [151, 152, 202, 209], "modelalia": [151, 152, 202, 209], "lookupcachestaticfilepath": [151, 152, 202, 209], "updat": [151, 152, 172, 209], "lookupcachedynamicfilepath": [151, 152, 202, 209], "inputprefixbo": [151, 152, 202, 209], "bo": [151, 152, 209], "preced": [151, 152, 209, 246], "systemprompt": [151, 152, 202, 209], "chattempl": [151, 152, 186, 198, 202, 209], "chat": [151, 152, 155, 157, 158, 164, 165, 166, 198, 209], "templat": [151, 152, 198, 209], "inputprefix": [151, 152, 202, 209], "inputsuffix": [151, 152, 202, 209], "infil": [151, 152, 209], "cacheprompt": [151, 152, 202, 209], "rememb": [151, 152, 172, 209], "reprocess": [151, 152, 209], "npredict": [151, 152, 202, 209], "minp": [151, 152, 202, 209], "min": [151, 152, 172, 209], "tfsz": [151, 152, 202, 209], "tail": [151, 152, 209], "free": [151, 152, 160, 209], "typicalp": [151, 152, 202, 209], "typic": [151, 152, 156, 209], "dynatemprang": [151, 152, 209], "dynatempexpon": [151, 152, 209], "expon": [151, 152, 209], "repeatlastn": [151, 152, 202, 209], "repeatpenalti": [151, 152, 202, 209], "mirostat": [151, 152, 202, 209], "mirostattau": [151, 152, 202, 209], "entropi": [151, 152, 209], "tau": [151, 152, 209], "mirostateta": [151, 152, 202, 209], "eta": [151, 152, 209], "penalizenl": [151, 152, 202, 209], "newlin": [151, 152, 172, 209], "nkeep": [151, 152, 202, 209], "rng": [151, 152, 209], "nprob": [151, 152, 202, 209], "minkeep": [151, 152, 202, 209], "sampler": [151, 152, 202, 209], "least": [151, 152, 185, 209], "bnf": [151, 152, 209], "penaltyprompt": [151, 152, 202, 209], "overrid": [151, 152, 209, 220], "ignoreeo": [151, 152, 202, 209], "impli": [151, 152, 209], "inf": [151, 152, 209], "disabletokenid": [151, 152, 202, 209], "stopstr": [151, 152, 202, 209], "usechattempl": [151, 152, 202, 209], "setnpredict": [151, 152, 202, 209], "setpenalizenl": [151, 152, 202, 209], "78": [151, 165, 233], "ingest": 152, "At": [152, 198, 247], "hasllamacppinferenceproperti": 152, "hasllamacppmodelproperti": 152, "preprocess": [152, 222, 242], "loadimagesasbyt": [152, 186, 195], "llava_v1": 152, "5_7b_q4_0_gguf": 152, "autoggufvisionmodeltest": 152, "caption_docu": 152, "imagespath": 152, "setminkeep": [152, 202, 209], "setminp": [152, 202, 209], "setnprob": [152, 202, 209], "setrepeatlastn": [152, 202, 209], "setrepeatpenalti": [152, 202, 209], "setstopstr": [152, 202, 209], "settfsz": [152, 202, 209], "settypicalp": [152, 202, 209], "depict": 152, "ornat": 152, "ceil": 152, "decor": 152, "wall": 152, "chair": 152, "throughout": 152, "cushion": 152, "surfac": 152, "possibli": 152, "bed": 152, "sofa": 152, "scene": 152, "sleep": 152, "hold": [152, 196, 250], "swim": 152, "aquarium": 152, "seem": 152, "babi": 152, "adult": 152, "young": 152, "gather": [152, 224], "neck": 152, "grass": 152, "speci": 152, "held": 152, "black": 152, "white": [152, 172], "chest": 152, "someth": 152, "anim": 152, "vicin": 152, "collar": 152, "stare": 152, "front": 152, "owner": 152, "comfort": 152, "seat": 152, "yellow": 152, "wheel": 152, "tire": 152, "park": 152, "bull": 152, "horn": 152, "grassi": 152, "modelpath": 152, "mmprojpath": 152, "captur": [153, 170], "past": [153, 160, 225], "incorpor": [153, 165], "versatil": [153, 161, 167], "valuabl": [153, 167], "summari": [153, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 168], "distilbart_xsum_12_6": 153, "barttestspec": 153, "ab": 153, "1910": 153, "13461": 153, "pytorch": [153, 159, 162], "fairseq": [153, 159, 162], "arbitrari": 153, "nois": 153, "reconstruct": [153, 201], "tranform": 153, "randomli": 153, "dialogu": [153, 157, 158, 164], "roug": 153, "bleu": [153, 159, 162], "ablat": 153, "influenc": [153, 172], "200": [153, 162, 168], "rich": [153, 168], "rise": [153, 168], "methodologi": [153, 168], "landscap": [153, 168], "systemat": [153, 168], "dozen": [153, 168], "insight": [153, 168], "coloss": [153, 168], "facilit": [153, 168], "use_cach": 153, "command": 154, "c4ai": 154, "highli": 154, "rag": [154, 170], "c4ai_command_r_v01_int4": 154, "bos_token": 154, "start_of_turn_token": 154, "user_token": 154, "end_of_turn_token": 154, "chatbot_token": 154, "ask": [154, 229], "excit": [154, 157], "whatev": 154, "minicpm": 155, "unveil": 155, "seri": [155, 163, 166], "2b": 155, "4b": [155, 166], "close": [155, 157, 158, 163, 164], "mistral": [155, 161], "7b": [155, 157, 161, 163, 164, 165, 166, 167], "chines": [155, 159, 162, 185], "llama2": [155, 157], "13b": [155, 157, 161, 166, 167], "mpt": 155, "30b": 155, "falcon": 155, "40b": 155, "mtbench": 155, "closest": 155, "70b": [155, 157, 158], "vicuna": 155, "33b": [155, 167], "v0": 155, "zephyr": 155, "dpo": 155, "multimodel": 155, "phi": [155, 164, 165], "6b": 155, "qwen": [155, 166], "vl": 155, "deploi": [155, 160, 165, 243], "smartphon": 155, "verbal": 155, "cpm": 155, "mini_cpm_2b_8bit": 155, "shengdinghu": 155, "notion": 155, "d4d3a8c426424654a4e80e42a711cb20": 155, "openbmb": 155, "leonardo": [155, 156, 157, 161, 163, 164, 165, 166], "student": [155, 163, 164, 165, 166], "california": [155, 163, 164, 165, 166], "lo": [155, 159], "passion": [155, 163, 164, 165, 166], "cultur": 155, "plai": 155, "basketbal": 155, "caus": [156, 182], "goal": [156, 162, 185], "direct": [156, 159, 162, 165], "10x": 156, "synthet": [156, 164, 165], "unpreced": 156, "prime": 156, "lengthi": 156, "benefit": 156, "suffici": 156, "learner": 156, "taskspecif": 156, "webpag": [156, 243], "webtext": 156, "coqa": 156, "exceed": [156, 158], "127": 156, "fashion": [156, 170], "5b": [156, 166], "underfit": 156, "reflect": [156, 159], "paragraph": [156, 172, 229], "promis": 156, "1776": [156, 157], "came": [156, 157], "kingdom": [156, 157], "4k": [157, 165], "reinforc": [157, 158, 164], "feedback": [157, 158, 164], "rlhf": [157, 158], "safeti": [157, 158, 162, 164, 165], "chatgpt": 157, "llam2": [157, 164], "facebookresearch": [157, 158], "suitabl": [157, 164], "substitut": [157, 164], "llama_2_7b_chat_hf_int4": 157, "cut": 158, "8b": [158, 166], "expans": 158, "offer": [158, 161, 163, 246, 248, 251], "known": 158, "llama3": 158, "llama_3_7b_instruct_hf_int4": 158, "latest": 158, "meta": [158, 222, 229, 244], "commerci": [158, 160, 163], "aim": [158, 162, 170], "foster": 158, "collabor": [158, 167], "minion": 158, "chatbot": 158, "respond": 158, "speak": 158, "oooh": 158, "yeah": 158, "bana": 158, "na": 158, "m2m100": 159, "seq": [159, 162], "900": 159, "m2m100_418m": 159, "afrikaan": [159, 162], "af": 159, "amhar": [159, 162], "arab": [159, 162], "asturian": [159, 162], "ast": 159, "azerbaijani": [159, 162], "az": 159, "bashkir": [159, 162], "ba": 159, "belarusian": [159, 162], "bulgarian": [159, 162], "bg": 159, "bengali": [159, 162], "breton": 159, "br": [159, 229], "bosnian": [159, 162], "catalan": [159, 162], "valencian": 159, "ca": 159, "cebuano": [159, 162], "ceb": 159, "czech": [159, 162], "welsh": [159, 162], "cy": 159, "da": [159, 161], "greeek": 159, "el": 159, "estonian": [159, 162], "persian": [159, 162], "fa": 159, "fulah": 159, "ff": 159, "fi": 159, "western": [159, 162], "frisian": 159, "fy": 159, "irish": [159, 162], "ga": 159, "gaelic": [159, 162], "scottish": [159, 162], "gd": 159, "galician": [159, 162], "gl": 159, "gujarati": [159, 162], "gu": 159, "hausa": [159, 162], "hebrew": [159, 162], "hindi": [159, 162], "croatian": [159, 162], "hr": 159, "haitian": [159, 162], "creol": [159, 162], "ht": 159, "armenian": [159, 162], "hy": 159, "indonesian": [159, 162], "igbo": [159, 162], "ig": 159, "iloko": 159, "ilo": 159, "iceland": [159, 162], "japanes": [159, 162, 185], "ja": 159, "javanes": [159, 162], "jv": 159, "georgian": [159, 162], "ka": 159, "kazakh": [159, 162], "kk": 159, "central": [159, 162, 243], "khmer": [159, 162], "km": 159, "kannada": [159, 162], "kn": 159, "korean": [159, 162, 185], "ko": 159, "luxembourgish": [159, 162], "letzeburgesch": 159, "lb": 159, "ganda": [159, 162], "lg": 159, "lingala": [159, 162], "ln": 159, "lao": [159, 162], "lithuanian": [159, 162], "lt": 159, "latvian": [159, 162], "lv": 159, "malagasi": [159, 162], "mg": 159, "macedonian": [159, 162], "mk": 159, "malayalam": [159, 162], "mongolian": [159, 162], "mn": 159, "marathi": [159, 162], "malai": [159, 162], "burmes": [159, 162], "nepali": [159, 162], "ne": 159, "flemish": 159, "nl": 159, "northern": [159, 162], "sotho": [159, 162], "occitan": [159, 162], "post": [159, 165], "oc": 159, "oriya": 159, "panjabi": [159, 162], "punjabi": 159, "pa": [159, 234, 252], "polish": [159, 162], "pushto": 159, "pashto": [159, 162], "romanian": [159, 162], "moldavian": 159, "moldovan": 159, "ro": 159, "ru": 159, "sindhi": [159, 162], "sd": 159, "sinhala": [159, 162], "sinhales": 159, "si": 159, "slovak": [159, 162], "sk": 159, "slovenian": [159, 162], "sl": 159, "somali": [159, 162], "albanian": [159, 162], "sq": 159, "serbian": [159, 162], "sr": 159, "swati": [159, 162], "ss": 159, "sundanes": [159, 162], "su": 159, "sw": 159, "tamil": [159, 162], "ta": [159, 162], "thai": [159, 162], "th": 159, "tagalog": [159, 162], "tl": 159, "tswana": [159, 162], "tn": 159, "tr": 159, "ukrainian": [159, 162], "uk": 159, "ur": 159, "uzbek": [159, 162], "uz": 159, "vietnames": [159, 162], "vi": 159, "wolof": [159, 162], "wo": 159, "xhosa": [159, 162], "xh": 159, "yiddish": [159, 162], "yi": 159, "yoruba": [159, 162], "yo": 159, "zh": [159, 185], "zulu": [159, 162], "zu": 159, "beyond": [159, 162], "massiv": 159, "worldwid": 159, "mine": [159, 162], "spars": [159, 162], "focu": [159, 162, 165], "wmt": 159, "m2m": 159, "\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b": [159, 162], "life": [159, 162], "chocol": [159, 162], "marian": 160, "mainli": 160, "academ": [160, 165], "notabl": [160, 161], "edinburgh": 160, "adam": 160, "mickiewicz": 160, "pozna\u0144": 160, "contributor": 160, "mariannmt": 160, "engin": [160, 179, 202, 209], "behind": [160, 162, 163, 164], "opus_mt_en_fr": 160, "differenti": 160, "toolkit": 160, "capit": [160, 172], "quell": 160, "capital": 160, "devrait": 160, "savoir": 160, "fran\u00e7ai": 160, "34b": [161, 167], "strike": 161, "balanc": [161, 209], "rival": [161, 165], "codellama": [161, 167], "latter": 161, "gqa": [161, 166], "quicker": 161, "compromis": 161, "streamlin": [161, 222, 242], "smoother": 161, "slide": [161, 166, 229], "swa": [161, 166], "reliabl": [161, 222, 242], "mistral_7b": 161, "vinci": 161, "invent": 161, "microscop": 161, "No": [161, 162, 232, 245], "late": 161, "16th": 161, "nllb": 162, "nllb_distilled_600m_8int": 162, "acehnes": 162, "ace_arab": 162, "latin": 162, "ace_latn": 162, "mesopotamian": 162, "acm_arab": 162, "izzi": 162, "adeni": 162, "acq_arab": 162, "tunisian": 162, "aeb_arab": 162, "afr_latn": 162, "south": 162, "levantin": 162, "ajp_arab": 162, "akan": 162, "aka_latn": 162, "amh_ethi": 162, "north": 162, "apc_arab": 162, "arb_arab": 162, "roman": 162, "arb_latn": 162, "najdi": 162, "ars_arab": 162, "moroccan": 162, "ary_arab": 162, "arz_arab": 162, "assames": 162, "asm_beng": 162, "ast_latn": 162, "awadhi": 162, "awa_deva": 162, "aymara": 162, "ayr_latn": 162, "azb_arab": 162, "azj_latn": 162, "bak_cyrl": 162, "bambara": 162, "bam_latn": 162, "balines": 162, "ban_latn": 162, "bel_cyrl": 162, "bemba": 162, "bem_latn": 162, "ben_beng": 162, "bhojpuri": 162, "bho_deva": 162, "banjar": 162, "bjn_arab": 162, "bjn_latn": 162, "tibetan": 162, "bod_tibt": 162, "bos_latn": 162, "bugines": 162, "bug_latn": 162, "bul_cyrl": 162, "cat_latn": 162, "ceb_latn": 162, "ces_latn": 162, "chokw": 162, "cjk_latn": 162, "kurdish": 162, "ckb_arab": 162, "crimean": 162, "tatar": 162, "crh_latn": 162, "cym_latn": 162, "dan_latn": 162, "deu_latn": 162, "southwestern": 162, "dinka": 162, "dik_latn": 162, "dyula": 162, "dyu_latn": 162, "dzongkha": 162, "dzo_tibt": 162, "greek": 162, "ell_grek": 162, "eng_latn": 162, "esperanto": 162, "epo_latn": 162, "est_latn": 162, "basqu": 162, "eus_latn": 162, "ew": 162, "ewe_latn": 162, "faroes": 162, "fao_latn": 162, "fijian": 162, "fij_latn": 162, "fin_latn": 162, "fon": 162, "fon_latn": 162, "fra_latn": 162, "friulian": 162, "fur_latn": 162, "nigerian": 162, "fulfuld": 162, "fuv_latn": 162, "gla_latn": 162, "gle_latn": 162, "glg_latn": 162, "guarani": 162, "grn_latn": 162, "guj_gujr": 162, "hat_latn": 162, "hau_latn": 162, "heb_hebr": 162, "hin_deva": 162, "chhattisgarhi": 162, "hne_deva": 162, "hrv_latn": 162, "hun_latn": 162, "hye_armn": 162, "ibo_latn": 162, "ilocano": 162, "ilo_latn": 162, "ind_latn": 162, "isl_latn": 162, "ita_latn": 162, "jav_latn": 162, "jpn_jpan": 162, "kabyl": 162, "kab_latn": 162, "jingpho": 162, "kac_latn": 162, "kamba": 162, "kam_latn": 162, "kan_knda": 162, "kashmiri": 162, "kas_arab": 162, "devanagari": 162, "kas_deva": 162, "kat_geor": 162, "kanuri": 162, "knc_arab": 162, "knc_latn": 162, "kaz_cyrl": 162, "kabiy\u00e8": 162, "kbp_latn": 162, "kabuverdianu": 162, "kea_latn": 162, "khm_khmr": 162, "kikuyu": 162, "kik_latn": 162, "kinyarwanda": 162, "kin_latn": 162, "kyrgyz": 162, "kir_cyrl": 162, "kimbundu": 162, "kmb_latn": 162, "kmr_latn": 162, "kikongo": 162, "kon_latn": 162, "kor_hang": 162, "lao_laoo": 162, "ligurian": 162, "lij_latn": 162, "limburgish": 162, "lim_latn": 162, "lin_latn": 162, "lit_latn": 162, "lombard": 162, "lmo_latn": 162, "latgalian": 162, "ltg_latn": 162, "ltz_latn": 162, "luba": 162, "kasai": 162, "lua_latn": 162, "lug_latn": 162, "luo": 162, "luo_latn": 162, "mizo": 162, "lus_latn": 162, "lvs_latn": 162, "magahi": 162, "mag_deva": 162, "maithili": 162, "mai_deva": 162, "mal_mlym": 162, "mar_deva": 162, "minangkabau": 162, "min_arab": 162, "min_latn": 162, "mkd_cyrl": 162, "plateau": 162, "plt_latn": 162, "maltes": 162, "mlt_latn": 162, "meitei": 162, "mni_beng": 162, "halh": 162, "khk_cyrl": 162, "mossi": 162, "mos_latn": 162, "maori": 162, "mri_latn": 162, "mya_mymr": 162, "nld_latn": 162, "nynorsk": 162, "nno_latn": 162, "bokm\u00e5l": 162, "nob_latn": 162, "npi_deva": 162, "nso_latn": 162, "nuer": 162, "nus_latn": 162, "nyanja": 162, "nya_latn": 162, "oci_latn": 162, "west": 162, "oromo": 162, "gaz_latn": 162, "odia": 162, "ory_orya": 162, "pangasinan": 162, "pag_latn": 162, "eastern": 162, "pan_guru": 162, "papiamento": 162, "pap_latn": 162, "pes_arab": 162, "pol_latn": 162, "por_latn": 162, "dari": 162, "prs_arab": 162, "southern": 162, "pbt_arab": 162, "ayacucho": 162, "quechua": 162, "quy_latn": 162, "ron_latn": 162, "rundi": 162, "run_latn": 162, "rus_cyrl": 162, "sango": 162, "sag_latn": 162, "sanskrit": 162, "san_deva": 162, "santali": 162, "sat_olck": 162, "sicilian": 162, "scn_latn": 162, "shan": 162, "shn_mymr": 162, "sin_sinh": 162, "slk_latn": 162, "slv_latn": 162, "samoan": 162, "smo_latn": 162, "shona": 162, "sna_latn": 162, "snd_arab": 162, "som_latn": 162, "sot_latn": 162, "spa_latn": 162, "tosk": 162, "als_latn": 162, "sardinian": 162, "srd_latn": 162, "srp_cyrl": 162, "ssw_latn": 162, "sun_latn": 162, "swe_latn": 162, "swh_latn": 162, "silesian": 162, "szl_latn": 162, "tam_taml": 162, "tat_cyrl": 162, "telugu": 162, "tel_telu": 162, "tajik": 162, "tgk_cyrl": 162, "tgl_latn": 162, "tha_thai": 162, "tigrinya": 162, "tir_ethi": 162, "tamasheq": 162, "taq_latn": 162, "tifinagh": 162, "taq_tfng": 162, "tok": 162, "pisin": 162, "tpi_latn": 162, "tsn_latn": 162, "tsonga": 162, "tso_latn": 162, "turkmen": 162, "tuk_latn": 162, "tumbuka": 162, "tum_latn": 162, "tur_latn": 162, "twi": 162, "twi_latn": 162, "atla": 162, "tamazight": 162, "tzm_tfng": 162, "uyghur": 162, "uig_arab": 162, "ukr_cyrl": 162, "umbundu": 162, "umb_latn": 162, "urd_arab": 162, "uzn_latn": 162, "venetian": 162, "vec_latn": 162, "vie_latn": 162, "warai": 162, "war_latn": 162, "wol_latn": 162, "xho_latn": 162, "ydd_hebr": 162, "yor_latn": 162, "yue_hant": 162, "simplifi": [162, 229], "zho_han": 162, "tradit": 162, "zho_hant": 162, "zsm_latn": 162, "zul_latn": 162, "driven": 162, "erad": 162, "barrier": 162, "solidifi": 162, "artifici": [162, 163, 164, 165, 166], "intellig": [162, 163, 164, 165, 166], "effort": [162, 163], "coalesc": 162, "leav": 162, "vast": 162, "major": 162, "mostli": 162, "safe": 162, "ethic": 162, "consider": 162, "exploratori": 162, "interview": 162, "nativ": [162, 243], "speaker": 162, "narrow": 162, "gap": 162, "gate": [162, 163], "expert": 162, "counteract": 162, "overfit": 162, "critic": 162, "flore": 162, "assess": [162, 164, 165], "groundwork": 162, "realiz": 162, "olmo": 163, "dolma": 163, "soon": 163, "olmo_1b_int4": 163, "lm": [163, 172], "surg": 163, "interfac": [163, 222, 242, 250], "undisclos": 163, "scientif": [163, 167], "risk": 163, "believ": 163, "hope": 163, "empow": 163, "strengthen": 163, "wave": 163, "innov": [163, 165], "skill": [163, 164, 165, 166], "textbook": 164, "augment": 164, "websit": [164, 165], "educ": 164, "sens": [164, 165, 251], "showcas": [164, 165], "nearli": 164, "hasn": 164, "intent": [164, 199], "craft": 164, "vital": 164, "societ": 164, "phi2": 164, "medium": 165, "14b": [165, 166], "lightweight": 165, "128k": 165, "underw": 165, "math": [165, 167], "phi_3_mini_128k_instruct": 165, "big": 165, "trillion": [165, 167], "mixtral": 165, "8x7b": 165, "69": [165, 233], "mmlu": 165, "mt": 165, "bench": 165, "enough": 165, "compos": 165, "heavili": 165, "8t": 165, "moreov": 165, "qwen1": 166, "72b": 166, "stabl": 166, "32k": 166, "swiglu": 166, "qkv": 166, "qwen_7": 166, "5b_chat": 166, "starcoder2": 167, "predecessor": 167, "starcoder2transform": 167, "bigcod": 167, "starcod": 167, "partnership": 167, "swh": 167, "stack": 167, "digit": 167, "archiv": 167, "619": 167, "15b": 167, "thoroughli": 167, "starcoderbas": 167, "twice": 167, "although": 167, "deepseekcod": 167, "openrail": 167, "transpar": 167, "regard": [167, 208], "persist": [167, 231], "swhid": 167, "def": [167, 214], "t5": 168, "reconsid": 168, "hyper": 168, "t5_small": 168, "encount": 168, "aggregationmethod": [169, 170], "asretriev": [169, 170], "asretrieverqueri": [169, 170], "bucketlength": [169, 170], "identityrank": [169, 170], "numhasht": [169, 170], "numberofneighbour": [169, 170], "setaggregationmethod": [169, 170], "setbucketlength": [169, 170], "setidentityrank": [169, 170], "setnumhasht": [169, 170], "setnumberofneighbour": [169, 170], "setsimilaritymethod": [169, 170], "setvisibledist": [169, 170], "similaritymethod": [169, 170], "visibledist": [169, 170], "extractnearestneighbor": [169, 170], "getoutputcol": [169, 170, 186, 187, 189, 190, 191, 195, 197, 202, 205], "outputcol": [169, 170, 186, 187, 189, 190, 191, 192, 195, 197, 198, 202, 205, 228], "setextractnearestneighbor": [169, 170], "documentsimilarityrank": 170, "lsh": 170, "lib": 170, "execut": [170, 196, 246, 250], "ranker": 170, "jupyt": [170, 222, 239, 242], "doc_similarity_rank": [170, 202, 206], "enablecach": [170, 202, 209], "rdd": [170, 209], "neighbour": 170, "brp": 170, "bucket": 170, "euclidean": 170, "hash": 170, "ident": 170, "debug": 170, "document_similarity_ranker_finish": 170, "finished_doc_similarity_rankings_id": 170, "finished_doc_similarity_rankings_neighbor": 170, "docsimrankerpipelin": 170, "1510101612": 170, "1634839239": 170, "12448559591306324": 170, "612640902": 170, "1274183715": 170, "1220122862046063": 170, "1320876223": 170, "1293373212": 170, "17848855164122393": 170, "1548374770": 170, "1719102856": 170, "23297156732534166": 170, "wise": 170, "inclus": 170, "visibl": 170, "addregexclass": [171, 172], "addvocabclass": [171, 172], "casestrategi": [171, 172], "classcount": [171, 172], "compoundcount": [171, 172], "errorthreshold": [171, 172], "finalr": [171, 172], "initialr": [171, 172], "languagemodelclass": [171, 172], "maxcandid": [171, 172], "maxsentlen": [171, 172], "maxwindowlen": [171, 172], "setcasestrategi": [171, 172], "setclasscount": [171, 172], "setcompoundcount": [171, 172], "setepoch": [171, 172], "seterrorthreshold": [171, 172], "setfinalr": [171, 172], "setinitialr": [171, 172], "setlanguagemodelclass": [171, 172], "setmaxcandid": [171, 172], "setmaxsentlen": [171, 172], "setmaxwindowlen": [171, 172], "settradeoff": [171, 172], "setvalidationfract": [171, 172], "setweighteddistpath": [171, 172], "setwordmaxdist": [171, 172], "tradeoff": [171, 172], "validationfract": [171, 172], "weighteddistpath": [171, 172], "wordmaxdist": [171, 172], "comparelowcas": [171, 172], "correctsymbol": [171, 172], "gamma": [171, 172], "getwordclass": [171, 172], "idsvocab": [171, 172], "setclass": [171, 172], "setcomparelowcas": [171, 172], "setcorrectsymbol": [171, 172], "setgamma": [171, 172], "setidsvocab": [171, 172], "setvocabfreq": [171, 172], "setvocabid": [171, 172], "setweight": [171, 172], "updateregexclass": [171, 172], "updatevocabclass": [171, 172], "vocabfreq": [171, 172], "vocabid": [171, 172], "doublevari": [171, 173], "dupslimit": [171, 173, 174], "frequencyprior": [171, 173], "intersect": [171, 173], "reductlimit": [171, 173], "setdoublevari": [171, 173], "setfrequencyprior": [171, 173], "setshortcircuit": [171, 173], "shortcircuit": [171, 173], "vowelswaplimit": [171, 173], "wordsizeignor": [171, 173], "deletesthreshold": [171, 174], "frequencythreshold": [171, 174, 184, 185], "maxeditdist": [171, 174], "setdeletesthreshold": [171, 174], "setfrequencythreshold": [171, 174, 184, 185], "setmaxeditdist": [171, 174], "spell": [171, 172, 173, 174, 196, 201, 237, 249, 250, 251], "contextspellcheck": 172, "noisi": 172, "surround": [172, 200], "edit": [172, 173, 174], "subword": 172, "checker": [172, 173, 174, 249], "uppercas": 172, "perplex": 172, "nlm": 172, "datapoint": 172, "vocab": 172, "compound": 172, "levenshtein": [172, 173, 174], "depth": [172, 249], "sherlock": 172, "spellcheck": [172, 173, 174], "1650": 172, "_name_": 172, "userdist": 172, "sentlen": 172, "fraction": 172, "dist": 172, "spellcheck_dl": 172, "decis": 172, "usenewlin": 172, "cold": 172, "dreari": 172, "smow": 172, "norvigsweet": 173, "norvig": 173, "bayesian": 173, "tokenpattern": 173, "ham": 173, "duplic": [173, 174], "vowel": 173, "corrector": 173, "gummi": [173, 174], "gummic": [173, 174], "gummier": [173, 174], "gummiest": [173, 174], "gummifer": [173, 174], "basi": [173, 174], "sensitivti": 173, "token_pattern": [173, 174], "symmetr": [173, 174], "delet": [173, 174, 246], "damerau": [173, 174], "transpos": [173, 174], "spellcheck_norvig": 173, "symspel": [173, 174], "somtim": 173, "wrrite": [173, 174], "wordz": [173, 174], "erong": [173, 174], "sometim": [173, 174, 246], "wrong": [173, 174], "symmetricdelet": 174, "deriv": 174, "teach": 174, "patttern": 174, "spellcheck_sd": 174, "spmetim": 174, "employ": 175, "mllib": [176, 229, 243], "stopwordsremov": 176, "cleantoken": [176, 190, 201], "stopwords_en": 176, "forth": 176, "defaultparamswrit": 177, "defaultparamsread": 177, "assertiondlapproach": 177, "medicalnerapproach": 177, "srt": 177, "greaph": 177, "infix": [178, 180, 182], "setinfix": [178, 180], "setprefix": [178, 180], "positionalmask": [178, 181], "setpositionalmask": [178, 181], "settolowercas": [178, 181, 184, 185], "tolowercas": [178, 181, 184, 185], "addcontextchar": [178, 182], "addexcept": [178, 182], "addinfixpattern": [178, 182], "addsplitchar": [178, 182], "casesensitiveexcept": [178, 182], "contextchar": [178, 182], "exceptionspath": [178, 182], "getcasesensitiveexcept": [178, 182], "getcontextchar": [178, 182], "getexcept": [178, 182], "getinfixpattern": [178, 182], "getprefixpattern": [178, 182], "getsplitchar": [178, 182], "getsuffixpattern": [178, 182], "infixpattern": [178, 182], "prefixpattern": [178, 182], "setcasesensitiveexcept": [178, 182], "setexcept": [178, 182], "setexceptionspath": [178, 182], "setinfixpattern": [178, 182], "setprefixpattern": [178, 182], "setsplitchar": [178, 182], "setsuffixpattern": [178, 182], "settargetpattern": [178, 182], "splitchar": [178, 182], "suffixpattern": [178, 182], "targetpattern": [178, 182], "flatten": 179, "artist": 179, "benezar": 179, "robert": 179, "farendel": 179, "graduat": 179, "luca": 179, "qam": 180, "guarante": 181, "flag": 181, "eventu": 181, "nthi": 181, "tokenizedsent": 182, "rulefactori": [182, 208], "grab": 182, "sub": 182, "won": 182, "didn": 182, "jane": 182, "boyfriend": 182, "piec": 182, "token_rul": 182, "factori": 182, "17": [183, 233, 235], "ambiguitythreshold": [184, 185], "enableregextoken": [184, 185], "getambiguitythreshold": [184, 185], "getfrequencythreshold": [184, 185], "setambiguitythreshold": [184, 185], "setenableregextoken": [184, 185], "setniter": [184, 185], "wordsegment": 185, "correspond": [185, 222], "rr": 185, "likewis": 185, "themselv": 185, "\u4e0a\u6d77": 185, "\u8ba1\u5212": 185, "\u5230": 185, "\u672c": 185, "\u4e16\u7eaa": 185, "\u672b": 185, "\u5b9e\u73b0": 185, "\u4eba\u5747": 185, "\u56fd\u5185": 185, "\u751f\u4ea7": 185, "\u603b\u503c": 185, "\u4e94\u5343": 185, "\u7f8e\u5143": 185, "\u4e0a": 185, "\u6d77": 185, "\u8ba1": 185, "\u5212": 185, "\u4e16": 185, "\u7eaa": 185, "\u5b9e": 185, "\u73b0": 185, "\u4eba": 185, "\u5747": 185, "\u56fd": 185, "\u5185": 185, "\u751f": 185, "\u4ea7": 185, "\u603b": 185, "ll\u503c": 185, "\u4e94": 185, "\u5343": 185, "\u7f8e": 185, "\u5143": 185, "shanghai": 185, "plan": 185, "dollar": 185, "capita": 185, "gdp": 185, "tip": 185, "frame": 185, "frequent": 185, "xue": 185, "nianwen": 185, "volum": 185, "februari": 185, "aclweb": 185, "aclanthologi": 185, "o03": 185, "4002": 185, "chinese_train": 185, "utf8": 185, "\u5341": 185, "\u56db": 185, "\u4e0d": 185, "\u662f": 185, "trainingdataset": 185, "plit": 185, "words_seg": 185, "wordseg_pku": 185, "\u7136\u800c": 185, "\u9019\u6a23\u7684\u8655\u7406\u4e5f\u884d\u751f\u4e86\u4e00\u4e9b\u554f\u984c": 185, "\u9019\u6a23": 185, "\u7684": 185, "\u8655\u7406": 185, "\u4e5f": 185, "\u884d\u751f": 185, "\u4e86": 185, "\u4e00\u4e9b": 185, "\u554f\u984c": 185, "chunkcol": [186, 188], "failonmiss": [186, 188], "isarrai": [186, 188], "setchunkcol": [186, 188], "setfailonmiss": [186, 188], "setisarrai": [186, 188], "setstartcol": [186, 188], "setstartcolbytokenindex": [186, 188], "startcol": [186, 188], "startcolbytokenindex": [186, 188], "cleanupmod": [186, 189, 197], "idcol": [186, 189, 197], "metadatacol": [186, 189, 197], "setidcol": [186, 189, 197], "setmetadatacol": [186, 189, 197], "cleanannot": [186, 190, 191, 192], "outputasvector": [186, 190], "annotationsplitsymbol": [186, 191], "includemetadata": [186, 191], "outputasarrai": [186, 191, 192], "parseembeddingsvector": [186, 191], "setannotationsplitsymbol": [186, 191], "setincludemetadata": [186, 191, 247], "setoutputasarrai": [186, 191, 192], "setparseembeddingsvector": [186, 191], "setvaluesplitsymbol": [186, 191], "valuesplitsymbol": [186, 191], "settextcol": [186, 195], "textcol": [186, 195, 231, 232], "fullannot": [186, 196, 223, 224], "fullannotateimag": [186, 196, 223, 224], "getignoreunsupport": [186, 196], "setignoreunsupport": [186, 196], "addassist": [186, 198], "setaddassist": [186, 198], "setchattempl": [186, 198, 202, 209], "csvdelimit": [186, 200], "escapecsvdelimit": [186, 200], "setcsvdelimit": [186, 200], "setescapecsvdelimit": [186, 200], "inferschema": 187, "librispeech_asr_dummy_clean_audio_array_parquet": 187, "float_arrai": 187, "stringtyp": [188, 214], "fail": 188, "chunkassembl": 188, "cleanup": [189, 197], "inplac": [189, 197], "inplace_ful": [189, 197], "shrink_ful": [189, 197], "each_ful": [189, 197], "delete_ful": [189, 197], "usabl": 190, "lda": 190, "forest": 190, "featurecol": 190, "gloveembed": 190, "finished_sentence_embed": 190, "resultwiths": 190, "1619900017976761": 190, "045552998781204224": 190, "03229299932718277": 190, "685609996318": 190, "42416998744010925": 190, "1378999948501587": 190, "5717899799346924": 190, "5078899860382": 190, "08621499687433243": 190, "15772999823093414": 190, "06067200005054474": 190, "395359992980": 190, "4970499873161316": 190, "7164199948310852": 190, "40119001269340515": 190, "05761000141501": 190, "08170200139284134": 190, "7159299850463867": 190, "20677000284194946": 190, "0295659992843": 190, "ouput": 190, "finishedresult": 192, "java_obj": [193, 218, 220], "javaobject": [193, 194, 220], "abc": [193, 220], "classmethod": [195, 216], "png": 195, "gif": 195, "bmp": 195, "parse_embed": [196, 224], "principl": [196, 250], "everyth": [196, 250, 251], "happi": [196, 245, 247, 250, 251], "prp": [196, 232, 233, 245, 250, 251, 252], "rb": [196, 233, 245, 250, 251, 252], "optional_target": [196, 224], "explain_document_pipelin": [196, 214, 224, 245, 250, 251], "dict_kei": [196, 224], "path_to_imag": [196, 224], "unsupport": 196, "text2": 197, "document1": 197, "document2": 197, "assembl": 198, "messag": [198, 244], "arg": [199, 216, 218, 238], "kwarg": 199, "javaestim": [199, 203, 220], "decid": 199, "behav": 199, "exactli": 199, "pipeline_model": [199, 222, 242], "intend": 199, "tab": [200, 222, 242], "escap": 200, "quot": 200, "defailt": 200, "comma": 200, "table_csv": 200, "csv_data": 200, "input_format": 200, "cleantext": 201, "opensourc": 201, "getlazyannot": [202, 205], "lazyannot": [202, 205], "setlazyannot": [202, 205], "features": [202, 209], "paddingsid": [202, 209], "paddingvalu": [202, 209], "returnattentionmask": [202, 209], "samplingr": [202, 209], "setdonorm": [202, 209], "setfeatures": [202, 209], "setpaddingsid": [202, 209], "setpaddingvalu": [202, 209], "setreturnattentionmask": [202, 209], "setsamplingr": [202, 209], "getbatchs": [202, 209], "contradictionidparam": [202, 209], "entailmentidparam": [202, 209], "setcontradictionidparam": [202, 209], "setentailmentidparam": [202, 209], "getcasesensit": [202, 209], "getactiv": [202, 209], "getmultilabel": [202, 209], "multilabel": [202, 209], "setactiv": [202, 209], "setmultilabel": [202, 209], "getuseclstoken": [202, 209], "setuseclstoken": [202, 209], "getdimens": [202, 209], "getenablecach": [202, 209], "setenablecach": [202, 209], "getengin": [202, 209], "setnreturnsequ": [202, 209], "setdores": [202, 209], "setfeatureextractortyp": [202, 209], "setimagemean": [202, 209], "setimagestd": [202, 209], "setresampl": [202, 209], "dynamictemperatureexpon": [202, 209], "dynamictemperaturerang": [202, 209], "setcacheprompt": [202, 209], "setdisabletokenid": [202, 209], "setdynamictemperatureexpon": [202, 209], "setdynamictemperaturerang": [202, 209], "setembed": [202, 209], "setgrammar": [202, 209], "setignoreeo": [202, 209], "setinputprefix": [202, 209], "setinputprefixbo": [202, 209], "setinputsuffix": [202, 209], "setlookupcachedynamicfilepath": [202, 209], "setlookupcachestaticfilepath": [202, 209], "setloraadapt": [202, 209], "setmirostat": [202, 209], "setmirostateta": [202, 209], "setmirostattau": [202, 209], "setmodelalia": [202, 209], "setmodeldraft": [202, 209], "setndraft": [202, 209], "setngpulayersdraft": [202, 209], "setnkeep": [202, 209], "setnthreadsbatchdraft": [202, 209], "setnthreadsdraft": [202, 209], "setpsplit": [202, 209], "setpenaltyprompt": [202, 209], "setsampl": [202, 209], "setsystemprompt": [202, 209], "settokenbia": [202, 209], "settokenidbia": [202, 209], "setusechattempl": [202, 209], "max_length_limit": [202, 209], "getmaxsentencelength": [202, 209], "getstoragepath": [202, 212], "storagepath": [202, 212], "savestorag": [202, 212], "enableinmemorystorag": [202, 212], "getenableinmemorystorag": [202, 212], "getincludestorag": [202, 212], "includestorag": [202, 212], "setenableinmemorystorag": [202, 212], "setincludestorag": [202, 212], "getstorageref": [202, 212], "storageref": [202, 212], "javamlwrit": [203, 204, 211, 217, 228], "javamodel": [204, 220], "lazili": 205, "renam": 205, "lazi": 205, "cov_obj": 207, "constant": [208, 210], "recal": 209, "loraadapt": 209, "tokenbia": 209, "tokenidbia": 209, "fo": 213, "output_column": 214, "vbz": [214, 231, 252], "f": [214, 222, 242], "filter_po": 214, "epeu": 214, "output_typ": 214, "udf": 214, "userdefinedfunct": 214, "nnp_token": 214, "lambda": 214, "annotatyon_typ": 214, "structfield": 214, "integertyp": 214, "maptyp": 214, "floattyp": 214, "chunks_df": 214, "pos_chunk": 214, "getdatafram": [215, 218], "new_java_arrai": [215, 218], "new_java_array_integ": [215, 218], "new_java_array_str": [215, 218], "new_java_obj": [215, 218], "spark_vers": [215, 218], "getparamvalu": [215, 219], "getter_attr": [215, 219], "setparamvalu": [215, 219], "transform_recurs": [215, 220], "kwd": 216, "javamlread": [216, 228], "mlreader": 216, "clazz": 216, "rl": 216, "javatransform": [217, 228], "javawrapp": 218, "jdf": 218, "pylist": 218, "java_class": 218, "todo": 218, "paramnam": 219, "log_asset": [221, 222], "log_asset_data": [221, 222], "log_completed_run": [221, 222], "log_metr": [221, 222, 242], "log_paramet": [221, 222], "log_pipeline_paramet": [221, 222, 242], "log_visu": [221, 222, 242], "parti": [221, 240], "workspac": 222, "project_nam": [222, 242], "comet_mod": [222, 242], "experiment_id": 222, "experiment_kwarg": 222, "logger": [222, 242], "practition": [222, 242], "lifecycl": [222, 242, 244], "track": [222, 242, 243], "outputlogpath": [222, 242], "onlin": [222, 242], "reus": 222, "importerror": 222, "instal": [222, 240, 244], "output_log_path": [222, 242], "embd": [222, 242], "logdir": [222, 242], "attribut": 222, "comet_ml": [222, 242], "submit": [222, 239, 242], "outstand": 222, "asset_path": 222, "upload": [222, 237], "asset": 222, "attach": [222, 229], "log_file_path": 222, "sklearn": [222, 242], "multilabelbinar": [222, 242], "classification_report": [222, 242], "preds_df": [222, 242], "topanda": [222, 242], "mlb": [222, 242], "y_true": [222, 242], "fit_transform": [222, 242], "y_pred": [222, 242], "output_dict": [222, 242], "html": [222, 227, 229, 242], "viz": [222, 242], "colum": [222, 242], "ner_chunk": [222, 242], "sparknlp_displai": [222, 242], "nervisu": [222, 242], "idx": [222, 242], "enumer": [222, 242], "label_col": [222, 242], "document_col": [222, 242], "return_html": [222, 242], "interv": 222, "refresh": 222, "from_disk": [223, 224], "clearcach": [223, 225], "downloadmodel": [223, 225], "downloadmodeldirectli": [223, 225], "downloadpipelin": [223, 225], "showavailableannot": [223, 225], "showpublicmodel": [223, 225, 246], "showpublicpipelin": [223, 225, 251], "showuncategorizedresourc": [223, 225], "disk_loc": 224, "light_model": 224, "onto_100": 225, "onto_300": 225, "ner_dl_bert": 225, "similarli": 225, "check_spel": [225, 251], "match_datetim": [225, 251], "clear": 225, "j_dwn": 225, "pythonresourcedownload": 225, "obj": [225, 232], "unzip": [225, 237], "argument": [225, 237], "filer": 225, "pagenumcol": [227, 228], "partitionnum": [227, 228], "setpagenumcol": [227, 228], "setpartitionnum": [227, 228], "setstoresplittedpdf": [227, 228], "storesplittedpdf": [227, 228], "ppt": [227, 229], "hasinputcol": 228, "hasoutputcol": 228, "powerpoint": 229, "html_df": 229, "Or": 229, "shorthand": 229, "pdf_df": 229, "email_df": 229, "docpath": 229, "doc_df": 229, "docsdf": 229, "elementtyp": 229, "filepath": 229, "cheer": 229, "sent_to": 229, "danilo": 229, "burbano": 229, "sent_from": 229, "mimetyp": 229, "narrativetext": 229, "equiv": 229, "charset": 229, "iso": 229, "8859": 229, "css": 229, "bottom": 229, "ltr": 229, "apto": 229, "aptos_embeddedfont": 229, "aptos_msfontservic": 229, "calibri": 229, "helvetica": 229, "12pt": 229, "rgb": 229, "nbsp": 229, "elementtoproof": 229, "filenam": 229, "contenttyp": 229, "filename2": 229, "htmlpath": 229, "titl": [229, 234, 237, 252], "pagenumb": 229, "illustr": 229, "literatur": 229, "permiss": 229, "pdfpath": 229, "pptdf": 229, "listitem": 229, "layout": 229, "_textfram": 229, "add_paragraph": 229, "subsequ": 229, "lot": 229, "xlsdf": 229, "readjsonfil": [230, 235], "documentcol": [231, 232], "sentencecol": [231, 232], "tokencol": 231, "conlllabelindex": 231, "conllposindex": 231, "conlldocidcol": 231, "doc_id": [231, 234], "labelcol": 231, "includedocid": 231, "docstart": [231, 252], "eu": [231, 252], "np": [231, 252], "reject": [231, 252], "vp": [231, 252], "misc": [231, 252], "boycott": [231, 252], "british": [231, 252], "lamb": [231, 252], "blackburn": 231, "brussel": 231, "1996": 231, "08": 231, "storage_level": 231, "storagelevel": 231, "lift": 231, "disk_onli": 231, "uposcol": 232, "upo": 232, "xposcol": 232, "xpo": 232, "sent_id": 232, "sell": 232, "pron": 232, "nom": 232, "plur": 232, "_": 232, "tens": 232, "conj": 232, "cc": 232, "spaceaft": 232, "punct": 232, "conllufil": [232, 252], "conlldataset": [232, 252], "morph": 232, "Into": 232, "googleo": 232, "sconj": 232, "propn": 232, "adp": 232, "wp": 232, "vbd": [232, 233, 252], "ago": [233, 252], "posdf": 233, "61": 233, "67": [233, 234, 252], "nonexecut": 233, "76": 233, "director": 233, "81": 233, "84": 233, "outputposcol": 233, "outputdocumentcol": 233, "outputtextcol": 233, "medic": [234, 252], "medment": [234, 252], "25763772": [234, 252], "dctn4": [234, 252], "t116": [234, 252], "t123": [234, 252], "c4308010": [234, 252], "63": [234, 252], "chronic": [234, 252], "pseudomona": [234, 252], "aeruginosa": [234, 252], "infect": [234, 252], "t047": [234, 252], "c0854135": [234, 252], "82": [234, 252], "cystic": [234, 252], "fibrosi": [234, 252], "c0010674": [234, 252], "120": [234, 252], "124": [234, 252], "139": [234, 252], "pubtatorfil": 234, "corpus_pubtator_sampl": 234, "pubtatordataset": 234, "finished_token": [234, 247], "finished_po": 234, "finished_n": 234, "finished_token_metadata": 234, "finished_pos_metadata": 234, "finished_label_metadata": 234, "mo": 234, "ispaddedtoken": 234, "pad": 234, "token_spac": 235, "sentence_end": 235, "spaci": 235, "multi_doc_token": 235, "went": 235, "night": 235, "bought": 235, "bread": 235, "54": 235, "jsonfilepath": 235, "model_data": 237, "dictionary_for_upload": 237, "model_zip_path": 237, "pythoncod": 237, "git_token": 237, "predictedent": 237, "sparknlpvers": 237, "howtous": 237, "livedemo": 237, "runincolab": 237, "scalacod": 237, "nlucod": 237, "datasourc": 237, "includedmodel": 237, "info": 237, "zip_path": 237, "zip": 237, "folder_path": 237, "quick": [239, 242, 247], "environ": [239, 243], "pypi": 239, "pip": 239, "anaconda": 239, "shell": 239, "compil": 239, "sbt": 239, "assembli": 239, "oracl": 239, "openjdk": 239, "0_292": 239, "sparknlp": [239, 242, 245, 246, 247, 248, 250, 251, 252], "python3": 239, "bin": 239, "manual": [239, 245], "cheat": 240, "guid": [240, 243], "overview": [241, 249], "workflow": 242, "dedic": 242, "account": 242, "inspect": 242, "init": 242, "sparknlp_experi": 242, "offline_directori": 242, "later": 242, "record": 243, "registri": 243, "send": 244, "mlflow": 244, "clearli": 245, "explain_document_ml": [245, 250, 251], "approx": [245, 250, 251], "mb": [245, 250, 251], "ok": [245, 250, 251], "spearhead": 246, "produc": 246, "declar": 246, "accordingli": 246, "extra_loc": 246, "classifierdl_use_trec50": 246, "classifierdl_use_spam": 246, "column_nam": 246, "interchang": 247, "road": 247, "proce": 247, "constantli": 251, "train_po": 252, "training_conl": 252, "train_corpu": 252, "withcolumnrenam": 252, "trainingpubtatordf": 252, "corpus_pubt": 252}, "objects": {"": [[1, 0, 0, "-", "sparknlp"]], "sparknlp": [[2, 0, 0, "-", "annotation"], [3, 0, 0, "-", "annotation_audio"], [4, 0, 0, "-", "annotation_image"], [5, 0, 0, "-", "annotator"], [186, 0, 0, "-", "base"], [202, 0, 0, "-", "common"], [214, 0, 0, "-", "functions"], [215, 0, 0, "-", "internal"], [221, 0, 0, "-", "logging"], [223, 0, 0, "-", "pretrained"], [1, 4, 1, "", "read"], [227, 0, 0, "-", "reader"], [1, 4, 1, "", "start"], [230, 0, 0, "-", "training"], [237, 0, 0, "-", "upload_to_hub"], [238, 0, 0, "-", "util"], [1, 4, 1, "", "version"]], "sparknlp.annotation": [[2, 1, 1, "", "Annotation"]], "sparknlp.annotation.Annotation": [[2, 2, 1, "", "arrayType"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "dataType"], [2, 2, 1, "", "fromRow"], [2, 2, 1, "", "toRow"]], "sparknlp.annotation_audio": [[3, 1, 1, "", "AnnotationAudio"]], "sparknlp.annotation_audio.AnnotationAudio": [[3, 2, 1, "", "copy"]], "sparknlp.annotation_image": [[4, 1, 1, "", "AnnotationImage"]], "sparknlp.annotation_image.AnnotationImage": [[4, 2, 1, "", "copy"]], "sparknlp.annotator": [[6, 0, 0, "-", "audio"], [10, 0, 0, "-", "chunk2_doc"], [11, 0, 0, "-", "chunker"], [12, 0, 0, "-", "classifier_dl"], [59, 0, 0, "-", "cleaners"], [62, 0, 0, "-", "coref"], [64, 0, 0, "-", "cv"], [76, 0, 0, "-", "date2_chunk"], [77, 0, 0, "-", "dependency"], [80, 0, 0, "-", "document_character_text_splitter"], [81, 0, 0, "-", "document_normalizer"], [82, 0, 0, "-", "document_token_splitter"], [84, 0, 0, "-", "embeddings"], [113, 0, 0, "-", "er"], [115, 0, 0, "-", "graph_extraction"], [116, 0, 0, "-", "keyword_extraction"], [118, 0, 0, "-", "ld_dl"], [120, 0, 0, "-", "lemmatizer"], [121, 0, 0, "-", "matcher"], [127, 0, 0, "-", "n_gram_generator"], [128, 0, 0, "-", "ner"], [135, 0, 0, "-", "normalizer"], [136, 0, 0, "-", "openai"], [139, 0, 0, "-", "param"], [142, 0, 0, "-", "pos"], [144, 0, 0, "-", "sentence"], [147, 0, 0, "-", "sentiment"], [150, 0, 0, "-", "seq2seq"], [169, 0, 0, "-", "similarity"], [171, 0, 0, "-", "spell_check"], [175, 0, 0, "-", "stemmer"], [176, 0, 0, "-", "stop_words_cleaner"], [177, 0, 0, "-", "tf_ner_dl_graph_builder"], [178, 0, 0, "-", "token"], [183, 0, 0, "-", "token2_chunk"], [184, 0, 0, "-", "ws"]], "sparknlp.annotator.audio": [[7, 0, 0, "-", "hubert_for_ctc"], [8, 0, 0, "-", "wav2vec2_for_ctc"], [9, 0, 0, "-", "whisper_for_ctc"]], "sparknlp.annotator.audio.hubert_for_ctc": [[7, 1, 1, "", "HubertForCTC"]], "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC": [[7, 3, 1, "", "configProtoBytes"], [7, 3, 1, "", "inputAnnotatorTypes"], [7, 2, 1, "", "loadSavedModel"], [7, 3, 1, "", "name"], [7, 3, 1, "", "outputAnnotatorType"], [7, 2, 1, "", "pretrained"], [7, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[8, 1, 1, "", "Wav2Vec2ForCTC"]], "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC": [[8, 3, 1, "", "configProtoBytes"], [8, 3, 1, "", "inputAnnotatorTypes"], [8, 2, 1, "", "loadSavedModel"], [8, 3, 1, "", "name"], [8, 3, 1, "", "outputAnnotatorType"], [8, 2, 1, "", "pretrained"], [8, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.audio.whisper_for_ctc": [[9, 1, 1, "", "WhisperForCTC"]], "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC": [[9, 3, 1, "", "configProtoBytes"], [9, 2, 1, "", "getIsMultilingual"], [9, 2, 1, "", "getLanguage"], [9, 3, 1, "", "inputAnnotatorTypes"], [9, 3, 1, "", "isMultilingual"], [9, 3, 1, "", "language"], [9, 2, 1, "", "loadSavedModel"], [9, 3, 1, "", "name"], [9, 3, 1, "", "outputAnnotatorType"], [9, 2, 1, "", "pretrained"], [9, 2, 1, "", "setConfigProtoBytes"], [9, 2, 1, "", "setLanguage"], [9, 2, 1, "", "setTask"]], "sparknlp.annotator.chunk2_doc": [[10, 1, 1, "", "Chunk2Doc"]], "sparknlp.annotator.chunk2_doc.Chunk2Doc": [[10, 3, 1, "", "inputAnnotatorTypes"], [10, 3, 1, "", "name"], [10, 3, 1, "", "outputAnnotatorType"], [10, 2, 1, "", "setParams"]], "sparknlp.annotator.chunker": [[11, 1, 1, "", "Chunker"]], "sparknlp.annotator.chunker.Chunker": [[11, 3, 1, "", "inputAnnotatorTypes"], [11, 3, 1, "", "name"], [11, 3, 1, "", "outputAnnotatorType"], [11, 3, 1, "", "regexParsers"], [11, 2, 1, "", "setRegexParsers"]], "sparknlp.annotator.classifier_dl": [[13, 0, 0, "-", "albert_for_multiple_choice"], [14, 0, 0, "-", "albert_for_question_answering"], [15, 0, 0, "-", "albert_for_sequence_classification"], [16, 0, 0, "-", "albert_for_token_classification"], [17, 0, 0, "-", "albert_for_zero_shot_classification"], [18, 0, 0, "-", "bart_for_zero_shot_classification"], [19, 0, 0, "-", "bert_for_multiple_choice"], [20, 0, 0, "-", "bert_for_question_answering"], [21, 0, 0, "-", "bert_for_sequence_classification"], [22, 0, 0, "-", "bert_for_token_classification"], [23, 0, 0, "-", "bert_for_zero_shot_classification"], [24, 0, 0, "-", "camembert_for_question_answering"], [25, 0, 0, "-", "camembert_for_sequence_classification"], [26, 0, 0, "-", "camembert_for_token_classification"], [27, 0, 0, "-", "camembert_for_zero_shot_classification"], [28, 0, 0, "-", "classifier_dl"], [29, 0, 0, "-", "deberta_for_question_answering"], [30, 0, 0, "-", "deberta_for_sequence_classification"], [31, 0, 0, "-", "deberta_for_token_classification"], [32, 0, 0, "-", "deberta_for_zero_shot_classification"], [33, 0, 0, "-", "distil_bert_for_question_answering"], [34, 0, 0, "-", "distil_bert_for_sequence_classification"], [35, 0, 0, "-", "distil_bert_for_token_classification"], [36, 0, 0, "-", "distil_bert_for_zero_shot_classification"], [37, 0, 0, "-", "distilbert_for_multiple_choice"], [38, 0, 0, "-", "longformer_for_question_answering"], [39, 0, 0, "-", "longformer_for_sequence_classification"], [40, 0, 0, "-", "longformer_for_token_classification"], [41, 0, 0, "-", "mpnet_for_question_answering"], [42, 0, 0, "-", "mpnet_for_sequence_classification"], [43, 0, 0, "-", "mpnet_for_token_classification"], [44, 0, 0, "-", "multi_classifier_dl"], [45, 0, 0, "-", "roberta_for_multiple_choice"], [46, 0, 0, "-", "roberta_for_question_answering"], [47, 0, 0, "-", "roberta_for_sequence_classification"], [48, 0, 0, "-", "roberta_for_token_classification"], [49, 0, 0, "-", "roberta_for_zero_shot_classification"], [50, 0, 0, "-", "sentiment_dl"], [51, 0, 0, "-", "tapas_for_question_answering"], [52, 0, 0, "-", "xlm_roberta_for_multiple_choice"], [53, 0, 0, "-", "xlm_roberta_for_question_answering"], [54, 0, 0, "-", "xlm_roberta_for_sequence_classification"], [55, 0, 0, "-", "xlm_roberta_for_token_classification"], [56, 0, 0, "-", "xlm_roberta_for_zero_shot_classification"], [57, 0, 0, "-", "xlnet_for_sequence_classification"], [58, 0, 0, "-", "xlnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[13, 1, 1, "", "AlbertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice": [[13, 3, 1, "", "choicesDelimiter"], [13, 3, 1, "", "inputAnnotatorTypes"], [13, 2, 1, "", "loadSavedModel"], [13, 3, 1, "", "name"], [13, 3, 1, "", "outputAnnotatorType"], [13, 2, 1, "", "pretrained"], [13, 2, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[14, 1, 1, "", "AlbertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering": [[14, 3, 1, "", "coalesceSentences"], [14, 3, 1, "", "configProtoBytes"], [14, 3, 1, "", "inputAnnotatorTypes"], [14, 2, 1, "", "loadSavedModel"], [14, 3, 1, "", "name"], [14, 3, 1, "", "outputAnnotatorType"], [14, 2, 1, "", "pretrained"], [14, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[15, 1, 1, "", "AlbertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification": [[15, 3, 1, "", "coalesceSentences"], [15, 3, 1, "", "configProtoBytes"], [15, 2, 1, "", "getClasses"], [15, 3, 1, "", "inputAnnotatorTypes"], [15, 2, 1, "", "loadSavedModel"], [15, 3, 1, "", "name"], [15, 3, 1, "", "outputAnnotatorType"], [15, 2, 1, "", "pretrained"], [15, 2, 1, "", "setCoalesceSentences"], [15, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[16, 1, 1, "", "AlbertForTokenClassification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification": [[16, 3, 1, "", "configProtoBytes"], [16, 2, 1, "", "getClasses"], [16, 3, 1, "", "inputAnnotatorTypes"], [16, 2, 1, "", "loadSavedModel"], [16, 3, 1, "", "name"], [16, 3, 1, "", "outputAnnotatorType"], [16, 2, 1, "", "pretrained"], [16, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[17, 1, 1, "", "AlbertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification": [[17, 3, 1, "", "coalesceSentences"], [17, 3, 1, "", "configProtoBytes"], [17, 2, 1, "", "getClasses"], [17, 3, 1, "", "inputAnnotatorTypes"], [17, 2, 1, "", "loadSavedModel"], [17, 3, 1, "", "name"], [17, 3, 1, "", "outputAnnotatorType"], [17, 2, 1, "", "pretrained"], [17, 2, 1, "", "setCoalesceSentences"], [17, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[18, 1, 1, "", "BartForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification": [[18, 3, 1, "", "coalesceSentences"], [18, 3, 1, "", "configProtoBytes"], [18, 2, 1, "", "getClasses"], [18, 3, 1, "", "inputAnnotatorTypes"], [18, 2, 1, "", "loadSavedModel"], [18, 3, 1, "", "maxSentenceLength"], [18, 3, 1, "", "name"], [18, 3, 1, "", "outputAnnotatorType"], [18, 2, 1, "", "pretrained"], [18, 2, 1, "", "setCoalesceSentences"], [18, 2, 1, "", "setConfigProtoBytes"], [18, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[19, 1, 1, "", "BertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice": [[19, 3, 1, "", "choicesDelimiter"], [19, 3, 1, "", "inputAnnotatorTypes"], [19, 2, 1, "", "loadSavedModel"], [19, 3, 1, "", "name"], [19, 3, 1, "", "outputAnnotatorType"], [19, 2, 1, "", "pretrained"], [19, 2, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[20, 1, 1, "", "BertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering": [[20, 3, 1, "", "coalesceSentences"], [20, 3, 1, "", "configProtoBytes"], [20, 3, 1, "", "inputAnnotatorTypes"], [20, 2, 1, "", "loadSavedModel"], [20, 3, 1, "", "name"], [20, 3, 1, "", "outputAnnotatorType"], [20, 2, 1, "", "pretrained"], [20, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[21, 1, 1, "", "BertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification": [[21, 3, 1, "", "coalesceSentences"], [21, 3, 1, "", "configProtoBytes"], [21, 2, 1, "", "getClasses"], [21, 3, 1, "", "inputAnnotatorTypes"], [21, 2, 1, "", "loadSavedModel"], [21, 3, 1, "", "name"], [21, 3, 1, "", "outputAnnotatorType"], [21, 2, 1, "", "pretrained"], [21, 2, 1, "", "setCoalesceSentences"], [21, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[22, 1, 1, "", "BertForTokenClassification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification": [[22, 3, 1, "", "configProtoBytes"], [22, 2, 1, "", "getClasses"], [22, 3, 1, "", "inputAnnotatorTypes"], [22, 2, 1, "", "loadSavedModel"], [22, 3, 1, "", "name"], [22, 3, 1, "", "outputAnnotatorType"], [22, 2, 1, "", "pretrained"], [22, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[23, 1, 1, "", "BertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification": [[23, 3, 1, "", "coalesceSentences"], [23, 3, 1, "", "configProtoBytes"], [23, 2, 1, "", "getClasses"], [23, 3, 1, "", "inputAnnotatorTypes"], [23, 2, 1, "", "loadSavedModel"], [23, 3, 1, "", "name"], [23, 3, 1, "", "outputAnnotatorType"], [23, 2, 1, "", "pretrained"], [23, 2, 1, "", "setCoalesceSentences"], [23, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[24, 1, 1, "", "CamemBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering": [[24, 3, 1, "", "coalesceSentences"], [24, 3, 1, "", "configProtoBytes"], [24, 3, 1, "", "inputAnnotatorTypes"], [24, 2, 1, "", "loadSavedModel"], [24, 3, 1, "", "name"], [24, 3, 1, "", "outputAnnotatorType"], [24, 2, 1, "", "pretrained"], [24, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[25, 1, 1, "", "CamemBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification": [[25, 3, 1, "", "coalesceSentences"], [25, 3, 1, "", "configProtoBytes"], [25, 2, 1, "", "getClasses"], [25, 3, 1, "", "inputAnnotatorTypes"], [25, 2, 1, "", "loadSavedModel"], [25, 3, 1, "", "name"], [25, 3, 1, "", "outputAnnotatorType"], [25, 2, 1, "", "pretrained"], [25, 2, 1, "", "setCoalesceSentences"], [25, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[26, 1, 1, "", "CamemBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification": [[26, 3, 1, "", "configProtoBytes"], [26, 2, 1, "", "getClasses"], [26, 3, 1, "", "inputAnnotatorTypes"], [26, 2, 1, "", "loadSavedModel"], [26, 3, 1, "", "name"], [26, 3, 1, "", "outputAnnotatorType"], [26, 2, 1, "", "pretrained"], [26, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[27, 1, 1, "", "CamemBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification": [[27, 3, 1, "", "coalesceSentences"], [27, 3, 1, "", "configProtoBytes"], [27, 2, 1, "", "getClasses"], [27, 3, 1, "", "inputAnnotatorTypes"], [27, 2, 1, "", "loadSavedModel"], [27, 3, 1, "", "name"], [27, 3, 1, "", "outputAnnotatorType"], [27, 2, 1, "", "pretrained"], [27, 2, 1, "", "setCoalesceSentences"], [27, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[28, 1, 1, "", "ClassifierDLApproach"], [28, 1, 1, "", "ClassifierDLModel"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach": [[28, 3, 1, "", "dropout"], [28, 3, 1, "", "inputAnnotatorTypes"], [28, 3, 1, "", "outputAnnotatorType"], [28, 2, 1, "", "setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel": [[28, 3, 1, "", "classes"], [28, 3, 1, "", "configProtoBytes"], [28, 3, 1, "", "inputAnnotatorTypes"], [28, 3, 1, "", "name"], [28, 3, 1, "", "outputAnnotatorType"], [28, 2, 1, "", "pretrained"], [28, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[29, 1, 1, "", "DeBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering": [[29, 3, 1, "", "coalesceSentences"], [29, 3, 1, "", "configProtoBytes"], [29, 3, 1, "", "inputAnnotatorTypes"], [29, 2, 1, "", "loadSavedModel"], [29, 3, 1, "", "name"], [29, 3, 1, "", "outputAnnotatorType"], [29, 2, 1, "", "pretrained"], [29, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[30, 1, 1, "", "DeBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification": [[30, 3, 1, "", "coalesceSentences"], [30, 3, 1, "", "configProtoBytes"], [30, 2, 1, "", "getClasses"], [30, 3, 1, "", "inputAnnotatorTypes"], [30, 2, 1, "", "loadSavedModel"], [30, 3, 1, "", "name"], [30, 3, 1, "", "outputAnnotatorType"], [30, 2, 1, "", "pretrained"], [30, 2, 1, "", "setCoalesceSentences"], [30, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[31, 1, 1, "", "DeBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification": [[31, 3, 1, "", "configProtoBytes"], [31, 2, 1, "", "getClasses"], [31, 3, 1, "", "inputAnnotatorTypes"], [31, 2, 1, "", "loadSavedModel"], [31, 3, 1, "", "name"], [31, 3, 1, "", "outputAnnotatorType"], [31, 2, 1, "", "pretrained"], [31, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[32, 1, 1, "", "DeBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification": [[32, 3, 1, "", "coalesceSentences"], [32, 3, 1, "", "configProtoBytes"], [32, 2, 1, "", "getClasses"], [32, 3, 1, "", "inputAnnotatorTypes"], [32, 2, 1, "", "loadSavedModel"], [32, 3, 1, "", "name"], [32, 3, 1, "", "outputAnnotatorType"], [32, 2, 1, "", "pretrained"], [32, 2, 1, "", "setCoalesceSentences"], [32, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[33, 1, 1, "", "DistilBertForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering": [[33, 3, 1, "", "coalesceSentences"], [33, 3, 1, "", "configProtoBytes"], [33, 3, 1, "", "inputAnnotatorTypes"], [33, 2, 1, "", "loadSavedModel"], [33, 3, 1, "", "name"], [33, 3, 1, "", "outputAnnotatorType"], [33, 2, 1, "", "pretrained"], [33, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[34, 1, 1, "", "DistilBertForSequenceClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification": [[34, 3, 1, "", "coalesceSentences"], [34, 3, 1, "", "configProtoBytes"], [34, 2, 1, "", "getClasses"], [34, 3, 1, "", "inputAnnotatorTypes"], [34, 2, 1, "", "loadSavedModel"], [34, 3, 1, "", "name"], [34, 3, 1, "", "outputAnnotatorType"], [34, 2, 1, "", "pretrained"], [34, 2, 1, "", "setCoalesceSentences"], [34, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[35, 1, 1, "", "DistilBertForTokenClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification": [[35, 3, 1, "", "configProtoBytes"], [35, 2, 1, "", "getClasses"], [35, 3, 1, "", "inputAnnotatorTypes"], [35, 2, 1, "", "loadSavedModel"], [35, 3, 1, "", "name"], [35, 3, 1, "", "outputAnnotatorType"], [35, 2, 1, "", "pretrained"], [35, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[36, 1, 1, "", "DistilBertForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification": [[36, 3, 1, "", "coalesceSentences"], [36, 3, 1, "", "configProtoBytes"], [36, 2, 1, "", "getClasses"], [36, 3, 1, "", "inputAnnotatorTypes"], [36, 2, 1, "", "loadSavedModel"], [36, 3, 1, "", "name"], [36, 3, 1, "", "outputAnnotatorType"], [36, 2, 1, "", "pretrained"], [36, 2, 1, "", "setCoalesceSentences"], [36, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[37, 1, 1, "", "DistilBertForMultipleChoice"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice": [[37, 3, 1, "", "choicesDelimiter"], [37, 3, 1, "", "inputAnnotatorTypes"], [37, 2, 1, "", "loadSavedModel"], [37, 3, 1, "", "name"], [37, 3, 1, "", "outputAnnotatorType"], [37, 2, 1, "", "pretrained"], [37, 2, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[38, 1, 1, "", "LongformerForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering": [[38, 3, 1, "", "coalesceSentences"], [38, 3, 1, "", "configProtoBytes"], [38, 3, 1, "", "inputAnnotatorTypes"], [38, 2, 1, "", "loadSavedModel"], [38, 3, 1, "", "name"], [38, 3, 1, "", "outputAnnotatorType"], [38, 2, 1, "", "pretrained"], [38, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[39, 1, 1, "", "LongformerForSequenceClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification": [[39, 3, 1, "", "coalesceSentences"], [39, 3, 1, "", "configProtoBytes"], [39, 2, 1, "", "getClasses"], [39, 3, 1, "", "inputAnnotatorTypes"], [39, 2, 1, "", "loadSavedModel"], [39, 3, 1, "", "name"], [39, 3, 1, "", "outputAnnotatorType"], [39, 2, 1, "", "pretrained"], [39, 2, 1, "", "setCoalesceSentences"], [39, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[40, 1, 1, "", "LongformerForTokenClassification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification": [[40, 3, 1, "", "configProtoBytes"], [40, 2, 1, "", "getClasses"], [40, 3, 1, "", "inputAnnotatorTypes"], [40, 2, 1, "", "loadSavedModel"], [40, 3, 1, "", "name"], [40, 3, 1, "", "outputAnnotatorType"], [40, 2, 1, "", "pretrained"], [40, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[41, 1, 1, "", "MPNetForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering": [[41, 3, 1, "", "inputAnnotatorTypes"], [41, 2, 1, "", "loadSavedModel"], [41, 3, 1, "", "name"], [41, 3, 1, "", "outputAnnotatorType"], [41, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[42, 1, 1, "", "MPNetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification": [[42, 3, 1, "", "coalesceSentences"], [42, 2, 1, "", "getClasses"], [42, 3, 1, "", "inputAnnotatorTypes"], [42, 2, 1, "", "loadSavedModel"], [42, 3, 1, "", "name"], [42, 3, 1, "", "outputAnnotatorType"], [42, 2, 1, "", "pretrained"], [42, 2, 1, "", "setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[43, 1, 1, "", "MPNetForTokenClassification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification": [[43, 3, 1, "", "configProtoBytes"], [43, 2, 1, "", "getClasses"], [43, 3, 1, "", "inputAnnotatorTypes"], [43, 2, 1, "", "loadSavedModel"], [43, 3, 1, "", "name"], [43, 3, 1, "", "outputAnnotatorType"], [43, 2, 1, "", "pretrained"], [43, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[44, 1, 1, "", "MultiClassifierDLApproach"], [44, 1, 1, "", "MultiClassifierDLModel"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach": [[44, 3, 1, "", "inputAnnotatorTypes"], [44, 3, 1, "", "outputAnnotatorType"], [44, 2, 1, "", "setShufflePerEpoch"], [44, 2, 1, "", "setThreshold"], [44, 2, 1, "", "setVerbose"], [44, 3, 1, "", "shufflePerEpoch"], [44, 3, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel": [[44, 3, 1, "", "classes"], [44, 3, 1, "", "configProtoBytes"], [44, 3, 1, "", "inputAnnotatorTypes"], [44, 3, 1, "", "name"], [44, 3, 1, "", "outputAnnotatorType"], [44, 2, 1, "", "pretrained"], [44, 2, 1, "", "setConfigProtoBytes"], [44, 2, 1, "", "setThreshold"], [44, 3, 1, "", "threshold"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[45, 1, 1, "", "RoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice": [[45, 3, 1, "", "choicesDelimiter"], [45, 3, 1, "", "inputAnnotatorTypes"], [45, 2, 1, "", "loadSavedModel"], [45, 3, 1, "", "name"], [45, 3, 1, "", "outputAnnotatorType"], [45, 2, 1, "", "pretrained"], [45, 2, 1, "", "setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[46, 1, 1, "", "RoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering": [[46, 3, 1, "", "coalesceSentences"], [46, 3, 1, "", "configProtoBytes"], [46, 3, 1, "", "inputAnnotatorTypes"], [46, 2, 1, "", "loadSavedModel"], [46, 3, 1, "", "name"], [46, 3, 1, "", "outputAnnotatorType"], [46, 2, 1, "", "pretrained"], [46, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[47, 1, 1, "", "RoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification": [[47, 3, 1, "", "coalesceSentences"], [47, 3, 1, "", "configProtoBytes"], [47, 2, 1, "", "getClasses"], [47, 3, 1, "", "inputAnnotatorTypes"], [47, 2, 1, "", "loadSavedModel"], [47, 3, 1, "", "name"], [47, 3, 1, "", "outputAnnotatorType"], [47, 2, 1, "", "pretrained"], [47, 2, 1, "", "setCoalesceSentences"], [47, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[48, 1, 1, "", "RoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification": [[48, 3, 1, "", "configProtoBytes"], [48, 2, 1, "", "getClasses"], [48, 3, 1, "", "inputAnnotatorTypes"], [48, 2, 1, "", "loadSavedModel"], [48, 3, 1, "", "maxSentenceLength"], [48, 3, 1, "", "name"], [48, 3, 1, "", "outputAnnotatorType"], [48, 2, 1, "", "pretrained"], [48, 2, 1, "", "setConfigProtoBytes"], [48, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[49, 1, 1, "", "RoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification": [[49, 3, 1, "", "coalesceSentences"], [49, 3, 1, "", "configProtoBytes"], [49, 2, 1, "", "getClasses"], [49, 3, 1, "", "inputAnnotatorTypes"], [49, 2, 1, "", "loadSavedModel"], [49, 3, 1, "", "maxSentenceLength"], [49, 3, 1, "", "name"], [49, 3, 1, "", "outputAnnotatorType"], [49, 2, 1, "", "pretrained"], [49, 2, 1, "", "setCoalesceSentences"], [49, 2, 1, "", "setConfigProtoBytes"], [49, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[50, 1, 1, "", "SentimentDLApproach"], [50, 1, 1, "", "SentimentDLModel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach": [[50, 3, 1, "", "dropout"], [50, 3, 1, "", "inputAnnotatorTypes"], [50, 3, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "setDropout"], [50, 2, 1, "", "setThreshold"], [50, 2, 1, "", "setThresholdLabel"], [50, 3, 1, "", "threshold"], [50, 3, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel": [[50, 3, 1, "", "classes"], [50, 3, 1, "", "configProtoBytes"], [50, 3, 1, "", "inputAnnotatorTypes"], [50, 3, 1, "", "name"], [50, 3, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "pretrained"], [50, 2, 1, "", "setConfigProtoBytes"], [50, 2, 1, "", "setThreshold"], [50, 2, 1, "", "setThresholdLabel"], [50, 3, 1, "", "threshold"], [50, 3, 1, "", "thresholdLabel"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[51, 1, 1, "", "TapasForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering": [[51, 3, 1, "", "inputAnnotatorTypes"], [51, 2, 1, "", "loadSavedModel"], [51, 3, 1, "", "name"], [51, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[52, 1, 1, "", "XlmRoBertaForMultipleChoice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice": [[52, 3, 1, "", "inputAnnotatorTypes"], [52, 2, 1, "", "loadSavedModel"], [52, 3, 1, "", "name"], [52, 3, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[53, 1, 1, "", "XlmRoBertaForQuestionAnswering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering": [[53, 3, 1, "", "coalesceSentences"], [53, 3, 1, "", "configProtoBytes"], [53, 3, 1, "", "inputAnnotatorTypes"], [53, 2, 1, "", "loadSavedModel"], [53, 3, 1, "", "name"], [53, 3, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "pretrained"], [53, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[54, 1, 1, "", "XlmRoBertaForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification": [[54, 3, 1, "", "coalesceSentences"], [54, 3, 1, "", "configProtoBytes"], [54, 2, 1, "", "getClasses"], [54, 3, 1, "", "inputAnnotatorTypes"], [54, 2, 1, "", "loadSavedModel"], [54, 3, 1, "", "name"], [54, 3, 1, "", "outputAnnotatorType"], [54, 2, 1, "", "pretrained"], [54, 2, 1, "", "setCoalesceSentences"], [54, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[55, 1, 1, "", "XlmRoBertaForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification": [[55, 3, 1, "", "configProtoBytes"], [55, 2, 1, "", "getClasses"], [55, 3, 1, "", "inputAnnotatorTypes"], [55, 2, 1, "", "loadSavedModel"], [55, 3, 1, "", "name"], [55, 3, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "pretrained"], [55, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[56, 1, 1, "", "XlmRoBertaForZeroShotClassification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification": [[56, 3, 1, "", "coalesceSentences"], [56, 3, 1, "", "configProtoBytes"], [56, 2, 1, "", "getClasses"], [56, 3, 1, "", "inputAnnotatorTypes"], [56, 2, 1, "", "loadSavedModel"], [56, 3, 1, "", "maxSentenceLength"], [56, 3, 1, "", "name"], [56, 3, 1, "", "outputAnnotatorType"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setCoalesceSentences"], [56, 2, 1, "", "setConfigProtoBytes"], [56, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[57, 1, 1, "", "XlnetForSequenceClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification": [[57, 3, 1, "", "coalesceSentences"], [57, 3, 1, "", "configProtoBytes"], [57, 2, 1, "", "getClasses"], [57, 3, 1, "", "inputAnnotatorTypes"], [57, 2, 1, "", "loadSavedModel"], [57, 3, 1, "", "name"], [57, 3, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setCoalesceSentences"], [57, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[58, 1, 1, "", "XlnetForTokenClassification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification": [[58, 3, 1, "", "configProtoBytes"], [58, 2, 1, "", "getClasses"], [58, 3, 1, "", "inputAnnotatorTypes"], [58, 2, 1, "", "loadSavedModel"], [58, 3, 1, "", "name"], [58, 3, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cleaners": [[60, 0, 0, "-", "cleaner"], [61, 0, 0, "-", "extractor"]], "sparknlp.annotator.cleaners.cleaner": [[60, 1, 1, "", "Cleaner"]], "sparknlp.annotator.cleaners.cleaner.Cleaner": [[60, 3, 1, "", "bullets"], [60, 3, 1, "", "cleanPostfixPattern"], [60, 3, 1, "", "cleanPrefixPattern"], [60, 3, 1, "", "cleanerMode"], [60, 3, 1, "", "dashes"], [60, 3, 1, "", "encoding"], [60, 3, 1, "", "extraWhitespace"], [60, 3, 1, "", "ignoreCase"], [60, 3, 1, "", "inputAnnotatorTypes"], [60, 3, 1, "", "lowercase"], [60, 3, 1, "", "name"], [60, 3, 1, "", "outputAnnotatorType"], [60, 2, 1, "", "setBullets"], [60, 2, 1, "", "setCleanPostfixPattern"], [60, 2, 1, "", "setCleanPrefixPattern"], [60, 2, 1, "", "setCleanerMode"], [60, 2, 1, "", "setDashes"], [60, 2, 1, "", "setEncoding"], [60, 2, 1, "", "setExtraWhitespace"], [60, 2, 1, "", "setIgnoreCase"], [60, 2, 1, "", "setLowercase"], [60, 2, 1, "", "setStrip"], [60, 2, 1, "", "setTrailingPunctuation"], [60, 3, 1, "", "strip"], [60, 3, 1, "", "trailingPunctuation"]], "sparknlp.annotator.cleaners.extractor": [[61, 1, 1, "", "Extractor"]], "sparknlp.annotator.cleaners.extractor.Extractor": [[61, 3, 1, "", "emailAddress"], [61, 3, 1, "", "emailDateTimeTzPattern"], [61, 3, 1, "", "extractorMode"], [61, 3, 1, "", "imageUrlPattern"], [61, 3, 1, "", "index"], [61, 3, 1, "", "inputAnnotatorTypes"], [61, 3, 1, "", "ipAddressNamePattern"], [61, 3, 1, "", "ipAddressPattern"], [61, 3, 1, "", "mapiIdPattern"], [61, 3, 1, "", "name"], [61, 3, 1, "", "outputAnnotatorType"], [61, 2, 1, "", "setEmailAddress"], [61, 2, 1, "", "setEmailDateTimeTzPattern"], [61, 2, 1, "", "setExtractorMode"], [61, 2, 1, "", "setImageUrlPattern"], [61, 2, 1, "", "setIndex"], [61, 2, 1, "", "setIpAddressNamePattern"], [61, 2, 1, "", "setIpAddressPattern"], [61, 2, 1, "", "setMapiIdPattern"], [61, 2, 1, "", "setTextPattern"], [61, 2, 1, "", "setUsPhoneNumbersPattern"], [61, 3, 1, "", "textPattern"], [61, 3, 1, "", "usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[63, 0, 0, "-", "spanbert_coref"]], "sparknlp.annotator.coref.spanbert_coref": [[63, 1, 1, "", "SpanBertCorefModel"]], "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel": [[63, 3, 1, "", "configProtoBytes"], [63, 3, 1, "", "inputAnnotatorTypes"], [63, 2, 1, "", "loadSavedModel"], [63, 3, 1, "", "maxSegmentLength"], [63, 3, 1, "", "name"], [63, 3, 1, "", "outputAnnotatorType"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setConfigProtoBytes"], [63, 2, 1, "", "setMaxSegmentLength"], [63, 2, 1, "", "setTextGenre"], [63, 3, 1, "", "textGenre"]], "sparknlp.annotator.cv": [[65, 0, 0, "-", "blip_for_question_answering"], [66, 0, 0, "-", "clip_for_zero_shot_classification"], [67, 0, 0, "-", "convnext_for_image_classification"], [68, 0, 0, "-", "janus_for_multimodal"], [69, 0, 0, "-", "llava_for_multimodal"], [70, 0, 0, "-", "mllama_for_multimodal"], [71, 0, 0, "-", "phi3_vision_for_multimodal"], [72, 0, 0, "-", "qwen2vl_transformer"], [73, 0, 0, "-", "swin_for_image_classification"], [74, 0, 0, "-", "vision_encoder_decoder_for_image_captioning"], [75, 0, 0, "-", "vit_for_image_classification"]], "sparknlp.annotator.cv.blip_for_question_answering": [[65, 1, 1, "", "BLIPForQuestionAnswering"]], "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering": [[65, 3, 1, "", "configProtoBytes"], [65, 3, 1, "", "inputAnnotatorTypes"], [65, 2, 1, "", "loadSavedModel"], [65, 3, 1, "", "maxSentenceLength"], [65, 3, 1, "", "name"], [65, 3, 1, "", "outputAnnotatorType"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setMaxSentenceSize"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[66, 1, 1, "", "CLIPForZeroShotClassification"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification": [[66, 3, 1, "", "configProtoBytes"], [66, 2, 1, "", "getCandidateLabels"], [66, 3, 1, "", "inputAnnotatorTypes"], [66, 2, 1, "", "loadSavedModel"], [66, 3, 1, "", "name"], [66, 3, 1, "", "outputAnnotatorType"], [66, 2, 1, "", "pretrained"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[67, 1, 1, "", "ConvNextForImageClassification"]], "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification": [[67, 3, 1, "", "configProtoBytes"], [67, 3, 1, "", "cropPct"], [67, 3, 1, "", "doRescale"], [67, 2, 1, "", "getClasses"], [67, 3, 1, "", "inputAnnotatorTypes"], [67, 2, 1, "", "loadSavedModel"], [67, 3, 1, "", "name"], [67, 3, 1, "", "outputAnnotatorType"], [67, 2, 1, "", "pretrained"], [67, 3, 1, "", "rescaleFactor"], [67, 2, 1, "", "setConfigProtoBytes"], [67, 2, 1, "", "setCropPct"], [67, 2, 1, "", "setDoRescale"], [67, 2, 1, "", "setRescaleFactor"]], "sparknlp.annotator.cv.janus_for_multimodal": [[68, 1, 1, "", "JanusForMultiModal"]], "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal": [[68, 3, 1, "", "beamSize"], [68, 3, 1, "", "configProtoBytes"], [68, 3, 1, "", "doSample"], [68, 3, 1, "", "ignoreTokenIds"], [68, 3, 1, "", "imageGenerateMode"], [68, 3, 1, "", "inputAnnotatorTypes"], [68, 2, 1, "", "loadSavedModel"], [68, 3, 1, "", "maxOutputLength"], [68, 3, 1, "", "minOutputLength"], [68, 3, 1, "", "name"], [68, 3, 1, "", "noRepeatNgramSize"], [68, 3, 1, "", "numOfParallelImages"], [68, 3, 1, "", "outputAnnotatorType"], [68, 2, 1, "", "pretrained"], [68, 3, 1, "", "repetitionPenalty"], [68, 2, 1, "", "setBeamSize"], [68, 2, 1, "", "setConfigProtoBytes"], [68, 2, 1, "", "setDoSample"], [68, 2, 1, "", "setIgnoreTokenIds"], [68, 2, 1, "", "setImageGenerateMode"], [68, 2, 1, "", "setMaxOutputLength"], [68, 2, 1, "", "setMaxSentenceSize"], [68, 2, 1, "", "setMinOutputLength"], [68, 2, 1, "", "setNoRepeatNgramSize"], [68, 2, 1, "", "setNumOfParallelImages"], [68, 2, 1, "", "setRepetitionPenalty"], [68, 2, 1, "", "setTemperature"], [68, 2, 1, "", "setTopK"], [68, 2, 1, "", "setTopP"], [68, 3, 1, "", "temperature"], [68, 3, 1, "", "topK"], [68, 3, 1, "", "topP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[69, 1, 1, "", "LLAVAForMultiModal"]], "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal": [[69, 3, 1, "", "beamSize"], [69, 3, 1, "", "configProtoBytes"], [69, 3, 1, "", "doSample"], [69, 3, 1, "", "ignoreTokenIds"], [69, 3, 1, "", "inputAnnotatorTypes"], [69, 2, 1, "", "loadSavedModel"], [69, 3, 1, "", "maxOutputLength"], [69, 3, 1, "", "minOutputLength"], [69, 3, 1, "", "name"], [69, 3, 1, "", "noRepeatNgramSize"], [69, 3, 1, "", "outputAnnotatorType"], [69, 2, 1, "", "pretrained"], [69, 3, 1, "", "repetitionPenalty"], [69, 2, 1, "", "setBeamSize"], [69, 2, 1, "", "setConfigProtoBytes"], [69, 2, 1, "", "setDoSample"], [69, 2, 1, "", "setIgnoreTokenIds"], [69, 2, 1, "", "setMaxOutputLength"], [69, 2, 1, "", "setMaxSentenceSize"], [69, 2, 1, "", "setMinOutputLength"], [69, 2, 1, "", "setNoRepeatNgramSize"], [69, 2, 1, "", "setRepetitionPenalty"], [69, 2, 1, "", "setTemperature"], [69, 2, 1, "", "setTopK"], [69, 2, 1, "", "setTopP"], [69, 3, 1, "", "temperature"], [69, 3, 1, "", "topK"], [69, 3, 1, "", "topP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[70, 1, 1, "", "MLLamaForMultimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal": [[70, 3, 1, "", "beamSize"], [70, 3, 1, "", "configProtoBytes"], [70, 3, 1, "", "doSample"], [70, 3, 1, "", "ignoreTokenIds"], [70, 3, 1, "", "inputAnnotatorTypes"], [70, 2, 1, "", "loadSavedModel"], [70, 3, 1, "", "maxOutputLength"], [70, 3, 1, "", "minOutputLength"], [70, 3, 1, "", "name"], [70, 3, 1, "", "noRepeatNgramSize"], [70, 3, 1, "", "outputAnnotatorType"], [70, 2, 1, "", "pretrained"], [70, 3, 1, "", "repetitionPenalty"], [70, 2, 1, "", "setBeamSize"], [70, 2, 1, "", "setConfigProtoBytes"], [70, 2, 1, "", "setDoSample"], [70, 2, 1, "", "setIgnoreTokenIds"], [70, 2, 1, "", "setMaxOutputLength"], [70, 2, 1, "", "setMaxSentenceSize"], [70, 2, 1, "", "setMinOutputLength"], [70, 2, 1, "", "setNoRepeatNgramSize"], [70, 2, 1, "", "setRepetitionPenalty"], [70, 2, 1, "", "setTemperature"], [70, 2, 1, "", "setTopK"], [70, 2, 1, "", "setTopP"], [70, 3, 1, "", "temperature"], [70, 3, 1, "", "topK"], [70, 3, 1, "", "topP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[71, 1, 1, "", "Phi3Vision"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision": [[71, 3, 1, "", "beamSize"], [71, 3, 1, "", "configProtoBytes"], [71, 3, 1, "", "doSample"], [71, 3, 1, "", "ignoreTokenIds"], [71, 3, 1, "", "inputAnnotatorTypes"], [71, 2, 1, "", "loadSavedModel"], [71, 3, 1, "", "maxOutputLength"], [71, 3, 1, "", "minOutputLength"], [71, 3, 1, "", "name"], [71, 3, 1, "", "noRepeatNgramSize"], [71, 3, 1, "", "outputAnnotatorType"], [71, 2, 1, "", "pretrained"], [71, 3, 1, "", "repetitionPenalty"], [71, 2, 1, "", "setBeamSize"], [71, 2, 1, "", "setConfigProtoBytes"], [71, 2, 1, "", "setDoSample"], [71, 2, 1, "", "setIgnoreTokenIds"], [71, 2, 1, "", "setMaxOutputLength"], [71, 2, 1, "", "setMaxSentenceSize"], [71, 2, 1, "", "setMinOutputLength"], [71, 2, 1, "", "setNoRepeatNgramSize"], [71, 2, 1, "", "setRepetitionPenalty"], [71, 2, 1, "", "setTemperature"], [71, 2, 1, "", "setTopK"], [71, 2, 1, "", "setTopP"], [71, 3, 1, "", "temperature"], [71, 3, 1, "", "topK"], [71, 3, 1, "", "topP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[72, 1, 1, "", "Qwen2VLTransformer"]], "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer": [[72, 3, 1, "", "beamSize"], [72, 3, 1, "", "configProtoBytes"], [72, 3, 1, "", "doSample"], [72, 3, 1, "", "ignoreTokenIds"], [72, 3, 1, "", "inputAnnotatorTypes"], [72, 2, 1, "", "loadSavedModel"], [72, 3, 1, "", "maxOutputLength"], [72, 3, 1, "", "minOutputLength"], [72, 3, 1, "", "name"], [72, 3, 1, "", "noRepeatNgramSize"], [72, 3, 1, "", "outputAnnotatorType"], [72, 2, 1, "", "pretrained"], [72, 3, 1, "", "repetitionPenalty"], [72, 2, 1, "", "setBeamSize"], [72, 2, 1, "", "setConfigProtoBytes"], [72, 2, 1, "", "setDoSample"], [72, 2, 1, "", "setIgnoreTokenIds"], [72, 2, 1, "", "setMaxOutputLength"], [72, 2, 1, "", "setMaxSentenceSize"], [72, 2, 1, "", "setMinOutputLength"], [72, 2, 1, "", "setNoRepeatNgramSize"], [72, 2, 1, "", "setRepetitionPenalty"], [72, 2, 1, "", "setTemperature"], [72, 2, 1, "", "setTopK"], [72, 2, 1, "", "setTopP"], [72, 3, 1, "", "temperature"], [72, 3, 1, "", "topK"], [72, 3, 1, "", "topP"]], "sparknlp.annotator.cv.swin_for_image_classification": [[73, 1, 1, "", "SwinForImageClassification"]], "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification": [[73, 3, 1, "", "configProtoBytes"], [73, 2, 1, "", "getClasses"], [73, 3, 1, "", "inputAnnotatorTypes"], [73, 2, 1, "", "loadSavedModel"], [73, 3, 1, "", "name"], [73, 3, 1, "", "outputAnnotatorType"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[74, 1, 1, "", "VisionEncoderDecoderForImageCaptioning"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning": [[74, 3, 1, "", "configProtoBytes"], [74, 3, 1, "", "inputAnnotatorTypes"], [74, 2, 1, "", "loadSavedModel"], [74, 3, 1, "", "name"], [74, 3, 1, "", "outputAnnotatorType"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[75, 1, 1, "", "ViTForImageClassification"]], "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification": [[75, 3, 1, "", "configProtoBytes"], [75, 2, 1, "", "getClasses"], [75, 3, 1, "", "inputAnnotatorTypes"], [75, 2, 1, "", "loadSavedModel"], [75, 3, 1, "", "name"], [75, 3, 1, "", "outputAnnotatorType"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.date2_chunk": [[76, 1, 1, "", "Date2Chunk"]], "sparknlp.annotator.date2_chunk.Date2Chunk": [[76, 3, 1, "", "entityName"], [76, 3, 1, "", "inputAnnotatorTypes"], [76, 3, 1, "", "name"], [76, 3, 1, "", "outputAnnotatorType"], [76, 2, 1, "", "setEntityName"]], "sparknlp.annotator.dependency": [[78, 0, 0, "-", "dependency_parser"], [79, 0, 0, "-", "typed_dependency_parser"]], "sparknlp.annotator.dependency.dependency_parser": [[78, 1, 1, "", "DependencyParserApproach"], [78, 1, 1, "", "DependencyParserModel"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach": [[78, 3, 1, "", "conllU"], [78, 3, 1, "", "dependencyTreeBank"], [78, 3, 1, "", "inputAnnotatorTypes"], [78, 3, 1, "", "numberOfIterations"], [78, 3, 1, "", "outputAnnotatorType"], [78, 2, 1, "", "setConllU"], [78, 2, 1, "", "setDependencyTreeBank"], [78, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel": [[78, 3, 1, "", "inputAnnotatorTypes"], [78, 3, 1, "", "name"], [78, 3, 1, "", "outputAnnotatorType"], [78, 3, 1, "", "perceptron"], [78, 2, 1, "", "pretrained"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[79, 1, 1, "", "TypedDependencyParserApproach"], [79, 1, 1, "", "TypedDependencyParserModel"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach": [[79, 3, 1, "", "conll2009"], [79, 3, 1, "", "conllU"], [79, 3, 1, "", "inputAnnotatorTypes"], [79, 3, 1, "", "numberOfIterations"], [79, 3, 1, "", "outputAnnotatorType"], [79, 2, 1, "", "setConll2009"], [79, 2, 1, "", "setConllU"], [79, 2, 1, "", "setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel": [[79, 3, 1, "", "conllFormat"], [79, 3, 1, "", "inputAnnotatorTypes"], [79, 3, 1, "", "name"], [79, 3, 1, "", "outputAnnotatorType"], [79, 2, 1, "", "pretrained"], [79, 3, 1, "", "trainDependencyPipe"], [79, 3, 1, "", "trainOptions"], [79, 3, 1, "", "trainParameters"]], "sparknlp.annotator.document_character_text_splitter": [[80, 1, 1, "", "DocumentCharacterTextSplitter"]], "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter": [[80, 3, 1, "", "chunkOverlap"], [80, 3, 1, "", "chunkSize"], [80, 3, 1, "", "explodeSplits"], [80, 3, 1, "", "inputAnnotatorTypes"], [80, 3, 1, "", "keepSeparators"], [80, 3, 1, "", "outputAnnotatorType"], [80, 3, 1, "", "patternsAreRegex"], [80, 2, 1, "", "setChunkOverlap"], [80, 2, 1, "", "setChunkSize"], [80, 2, 1, "", "setExplodeSplits"], [80, 2, 1, "", "setKeepSeparators"], [80, 2, 1, "", "setPatternsAreRegex"], [80, 2, 1, "", "setSplitPatterns"], [80, 2, 1, "", "setTrimWhitespace"], [80, 3, 1, "", "splitPatterns"], [80, 3, 1, "", "trimWhitespace"]], "sparknlp.annotator.document_normalizer": [[81, 1, 1, "", "DocumentNormalizer"]], "sparknlp.annotator.document_normalizer.DocumentNormalizer": [[81, 3, 1, "", "action"], [81, 3, 1, "", "encoding"], [81, 3, 1, "", "inputAnnotatorTypes"], [81, 3, 1, "", "lowercase"], [81, 3, 1, "", "outputAnnotatorType"], [81, 3, 1, "", "patterns"], [81, 3, 1, "", "policy"], [81, 3, 1, "", "replacement"], [81, 2, 1, "", "setAction"], [81, 2, 1, "", "setEncoding"], [81, 2, 1, "", "setLowercase"], [81, 2, 1, "", "setPatterns"], [81, 2, 1, "", "setPolicy"], [81, 2, 1, "", "setReplacement"]], "sparknlp.annotator.document_token_splitter": [[82, 1, 1, "", "DocumentTokenSplitter"]], "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter": [[82, 3, 1, "", "explodeSplits"], [82, 3, 1, "", "inputAnnotatorTypes"], [82, 3, 1, "", "numTokens"], [82, 3, 1, "", "outputAnnotatorType"], [82, 2, 1, "", "setExplodeSplits"], [82, 2, 1, "", "setNumTokens"], [82, 2, 1, "", "setTokenOverlap"], [82, 2, 1, "", "setTrimWhitespace"], [82, 3, 1, "", "tokenOverlap"], [82, 3, 1, "", "trimWhitespace"]], "sparknlp.annotator.embeddings": [[85, 0, 0, "-", "albert_embeddings"], [86, 0, 0, "-", "auto_gguf_embeddings"], [87, 0, 0, "-", "bert_embeddings"], [88, 0, 0, "-", "bert_sentence_embeddings"], [89, 0, 0, "-", "bge_embeddings"], [90, 0, 0, "-", "camembert_embeddings"], [91, 0, 0, "-", "chunk_embeddings"], [92, 0, 0, "-", "deberta_embeddings"], [93, 0, 0, "-", "distil_bert_embeddings"], [94, 0, 0, "-", "doc2vec"], [95, 0, 0, "-", "e5_embeddings"], [96, 0, 0, "-", "elmo_embeddings"], [97, 0, 0, "-", "instructor_embeddings"], [98, 0, 0, "-", "longformer_embeddings"], [99, 0, 0, "-", "mpnet_embeddings"], [100, 0, 0, "-", "mxbai_embeddings"], [101, 0, 0, "-", "nomic_embeddings"], [102, 0, 0, "-", "roberta_embeddings"], [103, 0, 0, "-", "roberta_sentence_embeddings"], [104, 0, 0, "-", "sentence_embeddings"], [105, 0, 0, "-", "snowflake_embeddings"], [106, 0, 0, "-", "uae_embeddings"], [107, 0, 0, "-", "universal_sentence_encoder"], [108, 0, 0, "-", "word2vec"], [109, 0, 0, "-", "word_embeddings"], [110, 0, 0, "-", "xlm_roberta_embeddings"], [111, 0, 0, "-", "xlm_roberta_sentence_embeddings"], [112, 0, 0, "-", "xlnet_embeddings"]], "sparknlp.annotator.embeddings.albert_embeddings": [[85, 1, 1, "", "AlbertEmbeddings"]], "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings": [[85, 3, 1, "", "configProtoBytes"], [85, 3, 1, "", "inputAnnotatorTypes"], [85, 2, 1, "", "loadSavedModel"], [85, 3, 1, "", "name"], [85, 3, 1, "", "outputAnnotatorType"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[86, 1, 1, "", "AutoGGUFEmbeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings": [[86, 3, 1, "", "defragmentationThreshold"], [86, 3, 1, "", "embedding"], [86, 3, 1, "", "flashAttention"], [86, 2, 1, "", "getMetadata"], [86, 3, 1, "", "gpuSplitMode"], [86, 3, 1, "", "grpAttnN"], [86, 3, 1, "", "grpAttnW"], [86, 3, 1, "", "inputAnnotatorTypes"], [86, 2, 1, "", "loadSavedModel"], [86, 3, 1, "", "mainGpu"], [86, 3, 1, "", "nBatch"], [86, 3, 1, "", "nChunks"], [86, 3, 1, "", "nCtx"], [86, 3, 1, "", "nGpuLayers"], [86, 3, 1, "", "nSequences"], [86, 3, 1, "", "nThreads"], [86, 3, 1, "", "nThreadsBatch"], [86, 3, 1, "", "nUbatch"], [86, 3, 1, "", "name"], [86, 3, 1, "", "noKvOffload"], [86, 3, 1, "", "numaStrategy"], [86, 3, 1, "", "outputAnnotatorType"], [86, 3, 1, "", "poolingType"], [86, 2, 1, "", "pretrained"], [86, 3, 1, "", "ropeFreqBase"], [86, 3, 1, "", "ropeFreqScale"], [86, 3, 1, "", "ropeScalingType"], [86, 2, 1, "", "setDefragmentationThreshold"], [86, 2, 1, "", "setFlashAttention"], [86, 2, 1, "", "setGpuSplitMode"], [86, 2, 1, "", "setGrpAttnN"], [86, 2, 1, "", "setGrpAttnW"], [86, 2, 1, "", "setMainGpu"], [86, 2, 1, "", "setNBatch"], [86, 2, 1, "", "setNChunks"], [86, 2, 1, "", "setNCtx"], [86, 2, 1, "", "setNGpuLayers"], [86, 2, 1, "", "setNParallel"], [86, 2, 1, "", "setNSequences"], [86, 2, 1, "", "setNThreads"], [86, 2, 1, "", "setNThreadsBatch"], [86, 2, 1, "", "setNUbatch"], [86, 2, 1, "", "setNoKvOffload"], [86, 2, 1, "", "setNumaStrategy"], [86, 2, 1, "", "setPoolingType"], [86, 2, 1, "", "setRopeFreqBase"], [86, 2, 1, "", "setRopeFreqScale"], [86, 2, 1, "", "setRopeScalingType"], [86, 2, 1, "", "setTensorSplit"], [86, 2, 1, "", "setUseMlock"], [86, 2, 1, "", "setUseMmap"], [86, 2, 1, "", "setYarnAttnFactor"], [86, 2, 1, "", "setYarnBetaFast"], [86, 2, 1, "", "setYarnBetaSlow"], [86, 2, 1, "", "setYarnExtFactor"], [86, 2, 1, "", "setYarnOrigCtx"], [86, 3, 1, "", "tensorSplit"], [86, 3, 1, "", "useMlock"], [86, 3, 1, "", "useMmap"], [86, 3, 1, "", "yarnAttnFactor"], [86, 3, 1, "", "yarnBetaFast"], [86, 3, 1, "", "yarnBetaSlow"], [86, 3, 1, "", "yarnExtFactor"], [86, 3, 1, "", "yarnOrigCtx"]], "sparknlp.annotator.embeddings.bert_embeddings": [[87, 1, 1, "", "BertEmbeddings"]], "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings": [[87, 3, 1, "", "configProtoBytes"], [87, 3, 1, "", "inputAnnotatorTypes"], [87, 2, 1, "", "loadSavedModel"], [87, 3, 1, "", "name"], [87, 3, 1, "", "outputAnnotatorType"], [87, 2, 1, "", "pretrained"], [87, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[88, 1, 1, "", "BertSentenceEmbeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings": [[88, 3, 1, "", "configProtoBytes"], [88, 3, 1, "", "inputAnnotatorTypes"], [88, 3, 1, "", "isLong"], [88, 2, 1, "", "loadSavedModel"], [88, 3, 1, "", "name"], [88, 3, 1, "", "outputAnnotatorType"], [88, 2, 1, "", "pretrained"], [88, 2, 1, "", "setConfigProtoBytes"], [88, 2, 1, "", "setIsLong"]], "sparknlp.annotator.embeddings.bge_embeddings": [[89, 1, 1, "", "BGEEmbeddings"]], "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings": [[89, 3, 1, "", "configProtoBytes"], [89, 3, 1, "", "inputAnnotatorTypes"], [89, 2, 1, "", "loadSavedModel"], [89, 3, 1, "", "name"], [89, 3, 1, "", "outputAnnotatorType"], [89, 2, 1, "", "pretrained"], [89, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[90, 1, 1, "", "CamemBertEmbeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings": [[90, 3, 1, "", "configProtoBytes"], [90, 3, 1, "", "inputAnnotatorTypes"], [90, 2, 1, "", "loadSavedModel"], [90, 3, 1, "", "name"], [90, 3, 1, "", "outputAnnotatorType"], [90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[91, 1, 1, "", "ChunkEmbeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings": [[91, 3, 1, "", "inputAnnotatorTypes"], [91, 3, 1, "", "name"], [91, 3, 1, "", "outputAnnotatorType"], [91, 3, 1, "", "poolingStrategy"], [91, 2, 1, "", "setPoolingStrategy"], [91, 2, 1, "", "setSkipOOV"], [91, 3, 1, "", "skipOOV"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[92, 1, 1, "", "DeBertaEmbeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings": [[92, 3, 1, "", "configProtoBytes"], [92, 3, 1, "", "inputAnnotatorTypes"], [92, 2, 1, "", "loadSavedModel"], [92, 3, 1, "", "name"], [92, 3, 1, "", "outputAnnotatorType"], [92, 2, 1, "", "pretrained"], [92, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[93, 1, 1, "", "DistilBertEmbeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings": [[93, 3, 1, "", "configProtoBytes"], [93, 3, 1, "", "inputAnnotatorTypes"], [93, 2, 1, "", "loadSavedModel"], [93, 3, 1, "", "name"], [93, 3, 1, "", "outputAnnotatorType"], [93, 2, 1, "", "pretrained"], [93, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.doc2vec": [[94, 1, 1, "", "Doc2VecApproach"], [94, 1, 1, "", "Doc2VecModel"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach": [[94, 3, 1, "", "inputAnnotatorTypes"], [94, 3, 1, "", "maxIter"], [94, 3, 1, "", "maxSentenceLength"], [94, 3, 1, "", "minCount"], [94, 3, 1, "", "numPartitions"], [94, 3, 1, "", "outputAnnotatorType"], [94, 3, 1, "", "seed"], [94, 2, 1, "", "setMaxIter"], [94, 2, 1, "", "setMaxSentenceLength"], [94, 2, 1, "", "setMinCount"], [94, 2, 1, "", "setNumPartitions"], [94, 2, 1, "", "setSeed"], [94, 2, 1, "", "setStepSize"], [94, 2, 1, "", "setVectorSize"], [94, 2, 1, "", "setWindowSize"], [94, 3, 1, "", "stepSize"], [94, 3, 1, "", "vectorSize"], [94, 3, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel": [[94, 2, 1, "", "getVectors"], [94, 3, 1, "", "inputAnnotatorTypes"], [94, 3, 1, "", "name"], [94, 3, 1, "", "outputAnnotatorType"], [94, 2, 1, "", "pretrained"], [94, 2, 1, "", "setVectorSize"], [94, 3, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.e5_embeddings": [[95, 1, 1, "", "E5Embeddings"]], "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings": [[95, 3, 1, "", "configProtoBytes"], [95, 3, 1, "", "inputAnnotatorTypes"], [95, 2, 1, "", "loadSavedModel"], [95, 3, 1, "", "name"], [95, 3, 1, "", "outputAnnotatorType"], [95, 2, 1, "", "pretrained"], [95, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[96, 1, 1, "", "ElmoEmbeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings": [[96, 3, 1, "", "batchSize"], [96, 3, 1, "", "configProtoBytes"], [96, 3, 1, "", "inputAnnotatorTypes"], [96, 2, 1, "", "loadSavedModel"], [96, 3, 1, "", "name"], [96, 3, 1, "", "outputAnnotatorType"], [96, 3, 1, "", "poolingLayer"], [96, 2, 1, "", "pretrained"], [96, 2, 1, "", "setBatchSize"], [96, 2, 1, "", "setConfigProtoBytes"], [96, 2, 1, "", "setPoolingLayer"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[97, 1, 1, "", "InstructorEmbeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings": [[97, 3, 1, "", "configProtoBytes"], [97, 3, 1, "", "inputAnnotatorTypes"], [97, 3, 1, "", "instruction"], [97, 2, 1, "", "loadSavedModel"], [97, 3, 1, "", "name"], [97, 3, 1, "", "outputAnnotatorType"], [97, 2, 1, "", "pretrained"], [97, 2, 1, "", "setConfigProtoBytes"], [97, 2, 1, "", "setInstruction"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[98, 1, 1, "", "LongformerEmbeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings": [[98, 3, 1, "", "configProtoBytes"], [98, 3, 1, "", "inputAnnotatorTypes"], [98, 2, 1, "", "loadSavedModel"], [98, 3, 1, "", "name"], [98, 3, 1, "", "outputAnnotatorType"], [98, 2, 1, "", "pretrained"], [98, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[99, 1, 1, "", "MPNetEmbeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings": [[99, 3, 1, "", "configProtoBytes"], [99, 3, 1, "", "inputAnnotatorTypes"], [99, 2, 1, "", "loadSavedModel"], [99, 3, 1, "", "name"], [99, 3, 1, "", "outputAnnotatorType"], [99, 2, 1, "", "pretrained"], [99, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[100, 1, 1, "", "MxbaiEmbeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings": [[100, 3, 1, "", "inputAnnotatorTypes"], [100, 2, 1, "", "loadSavedModel"], [100, 3, 1, "", "name"], [100, 3, 1, "", "outputAnnotatorType"], [100, 3, 1, "", "poolingStrategy"], [100, 2, 1, "", "pretrained"], [100, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[101, 1, 1, "", "NomicEmbeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings": [[101, 3, 1, "", "configProtoBytes"], [101, 3, 1, "", "inputAnnotatorTypes"], [101, 2, 1, "", "loadSavedModel"], [101, 3, 1, "", "name"], [101, 3, 1, "", "outputAnnotatorType"], [101, 2, 1, "", "pretrained"], [101, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[102, 1, 1, "", "RoBertaEmbeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings": [[102, 3, 1, "", "configProtoBytes"], [102, 3, 1, "", "inputAnnotatorTypes"], [102, 2, 1, "", "loadSavedModel"], [102, 3, 1, "", "name"], [102, 3, 1, "", "outputAnnotatorType"], [102, 2, 1, "", "pretrained"], [102, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[103, 1, 1, "", "RoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings": [[103, 3, 1, "", "configProtoBytes"], [103, 3, 1, "", "inputAnnotatorTypes"], [103, 2, 1, "", "loadSavedModel"], [103, 3, 1, "", "name"], [103, 3, 1, "", "outputAnnotatorType"], [103, 2, 1, "", "pretrained"], [103, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[104, 1, 1, "", "SentenceEmbeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings": [[104, 3, 1, "", "inputAnnotatorTypes"], [104, 3, 1, "", "name"], [104, 3, 1, "", "outputAnnotatorType"], [104, 3, 1, "", "poolingStrategy"], [104, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[105, 1, 1, "", "SnowFlakeEmbeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings": [[105, 3, 1, "", "inputAnnotatorTypes"], [105, 2, 1, "", "loadSavedModel"], [105, 3, 1, "", "name"], [105, 3, 1, "", "outputAnnotatorType"], [105, 3, 1, "", "poolingStrategy"], [105, 2, 1, "", "pretrained"], [105, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[106, 1, 1, "", "UAEEmbeddings"]], "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings": [[106, 3, 1, "", "inputAnnotatorTypes"], [106, 2, 1, "", "loadSavedModel"], [106, 3, 1, "", "name"], [106, 3, 1, "", "outputAnnotatorType"], [106, 3, 1, "", "poolingStrategy"], [106, 2, 1, "", "pretrained"], [106, 2, 1, "", "setPoolingStrategy"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[107, 1, 1, "", "UniversalSentenceEncoder"]], "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder": [[107, 3, 1, "", "configProtoBytes"], [107, 3, 1, "", "inputAnnotatorTypes"], [107, 3, 1, "", "loadSP"], [107, 2, 1, "", "loadSavedModel"], [107, 3, 1, "", "name"], [107, 3, 1, "", "outputAnnotatorType"], [107, 2, 1, "", "pretrained"], [107, 2, 1, "", "setConfigProtoBytes"], [107, 2, 1, "", "setLoadSP"]], "sparknlp.annotator.embeddings.word2vec": [[108, 1, 1, "", "Word2VecApproach"], [108, 1, 1, "", "Word2VecModel"]], "sparknlp.annotator.embeddings.word2vec.Word2VecApproach": [[108, 3, 1, "", "inputAnnotatorTypes"], [108, 3, 1, "", "maxIter"], [108, 3, 1, "", "maxSentenceLength"], [108, 3, 1, "", "minCount"], [108, 3, 1, "", "numPartitions"], [108, 3, 1, "", "outputAnnotatorType"], [108, 3, 1, "", "seed"], [108, 2, 1, "", "setMaxIter"], [108, 2, 1, "", "setMaxSentenceLength"], [108, 2, 1, "", "setMinCount"], [108, 2, 1, "", "setNumPartitions"], [108, 2, 1, "", "setSeed"], [108, 2, 1, "", "setStepSize"], [108, 2, 1, "", "setVectorSize"], [108, 2, 1, "", "setWindowSize"], [108, 3, 1, "", "stepSize"], [108, 3, 1, "", "vectorSize"], [108, 3, 1, "", "windowSize"]], "sparknlp.annotator.embeddings.word2vec.Word2VecModel": [[108, 2, 1, "", "getVectors"], [108, 3, 1, "", "inputAnnotatorTypes"], [108, 3, 1, "", "name"], [108, 3, 1, "", "outputAnnotatorType"], [108, 2, 1, "", "pretrained"], [108, 2, 1, "", "setVectorSize"], [108, 3, 1, "", "vectorSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[109, 1, 1, "", "WordEmbeddings"], [109, 1, 1, "", "WordEmbeddingsModel"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings": [[109, 3, 1, "", "inputAnnotatorTypes"], [109, 3, 1, "", "name"], [109, 3, 1, "", "outputAnnotatorType"], [109, 3, 1, "", "readCacheSize"], [109, 2, 1, "", "setReadCacheSize"], [109, 2, 1, "", "setWriteBufferSize"], [109, 3, 1, "", "writeBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel": [[109, 3, 1, "", "databases"], [109, 3, 1, "", "inputAnnotatorTypes"], [109, 2, 1, "", "loadStorage"], [109, 3, 1, "", "name"], [109, 3, 1, "", "outputAnnotatorType"], [109, 2, 1, "", "overallCoverage"], [109, 2, 1, "", "pretrained"], [109, 3, 1, "", "readCacheSize"], [109, 2, 1, "", "setReadCacheSize"], [109, 2, 1, "", "withCoverageColumn"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[110, 1, 1, "", "XlmRoBertaEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings": [[110, 3, 1, "", "configProtoBytes"], [110, 3, 1, "", "inputAnnotatorTypes"], [110, 2, 1, "", "loadSavedModel"], [110, 3, 1, "", "name"], [110, 3, 1, "", "outputAnnotatorType"], [110, 2, 1, "", "pretrained"], [110, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[111, 1, 1, "", "XlmRoBertaSentenceEmbeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings": [[111, 3, 1, "", "configProtoBytes"], [111, 3, 1, "", "inputAnnotatorTypes"], [111, 2, 1, "", "loadSavedModel"], [111, 3, 1, "", "name"], [111, 3, 1, "", "outputAnnotatorType"], [111, 2, 1, "", "pretrained"], [111, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[112, 1, 1, "", "XlnetEmbeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings": [[112, 3, 1, "", "configProtoBytes"], [112, 3, 1, "", "inputAnnotatorTypes"], [112, 2, 1, "", "loadSavedModel"], [112, 3, 1, "", "name"], [112, 3, 1, "", "outputAnnotatorType"], [112, 2, 1, "", "pretrained"], [112, 2, 1, "", "setConfigProtoBytes"]], "sparknlp.annotator.er": [[114, 0, 0, "-", "entity_ruler"]], "sparknlp.annotator.er.entity_ruler": [[114, 1, 1, "", "EntityRulerApproach"], [114, 1, 1, "", "EntityRulerModel"]], "sparknlp.annotator.er.entity_ruler.EntityRulerApproach": [[114, 3, 1, "", "alphabet"], [114, 3, 1, "", "inputAnnotatorTypes"], [114, 3, 1, "", "name"], [114, 3, 1, "", "optionalInputAnnotatorTypes"], [114, 3, 1, "", "outputAnnotatorType"], [114, 3, 1, "", "patternsResource"], [114, 3, 1, "", "sentenceMatch"], [114, 2, 1, "", "setAlphabetResource"], [114, 2, 1, "", "setPatternsResource"], [114, 2, 1, "", "setSentenceMatch"], [114, 2, 1, "", "setUseStorage"], [114, 3, 1, "", "useStorage"]], "sparknlp.annotator.er.entity_ruler.EntityRulerModel": [[114, 3, 1, "", "database"], [114, 3, 1, "", "inputAnnotatorTypes"], [114, 2, 1, "", "loadStorage"], [114, 3, 1, "", "name"], [114, 3, 1, "", "optionalInputAnnotatorTypes"], [114, 3, 1, "", "outputAnnotatorType"], [114, 2, 1, "", "pretrained"]], "sparknlp.annotator.graph_extraction": [[115, 1, 1, "", "GraphExtraction"]], "sparknlp.annotator.graph_extraction.GraphExtraction": [[115, 3, 1, "", "delimiter"], [115, 3, 1, "", "dependencyParserModel"], [115, 3, 1, "", "entityTypes"], [115, 3, 1, "", "explodeEntities"], [115, 3, 1, "", "includeEdges"], [115, 3, 1, "", "inputAnnotatorTypes"], [115, 3, 1, "", "maxSentenceSize"], [115, 3, 1, "", "mergeEntities"], [115, 3, 1, "", "mergeEntitiesIOBFormat"], [115, 3, 1, "", "minSentenceSize"], [115, 3, 1, "", "name"], [115, 3, 1, "", "optionalInputAnnotatorTypes"], [115, 3, 1, "", "outputAnnotatorType"], [115, 3, 1, "", "posModel"], [115, 3, 1, "", "relationshipTypes"], [115, 3, 1, "", "rootTokens"], [115, 2, 1, "", "setDelimiter"], [115, 2, 1, "", "setDependencyParserModel"], [115, 2, 1, "", "setEntityTypes"], [115, 2, 1, "", "setExplodeEntities"], [115, 2, 1, "", "setIncludeEdges"], [115, 2, 1, "", "setMaxSentenceSize"], [115, 2, 1, "", "setMergeEntities"], [115, 2, 1, "", "setMergeEntitiesIOBFormat"], [115, 2, 1, "", "setMinSentenceSize"], [115, 2, 1, "", "setPosModel"], [115, 2, 1, "", "setRelationshipTypes"], [115, 2, 1, "", "setRootTokens"], [115, 2, 1, "", "setTypedDependencyParserModel"], [115, 3, 1, "", "typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[117, 0, 0, "-", "yake_keyword_extraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[117, 1, 1, "", "YakeKeywordExtraction"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction": [[117, 2, 1, "", "getStopWords"], [117, 3, 1, "", "inputAnnotatorTypes"], [117, 2, 1, "", "loadDefaultStopWords"], [117, 3, 1, "", "maxNGrams"], [117, 3, 1, "", "minNGrams"], [117, 3, 1, "", "nKeywords"], [117, 3, 1, "", "name"], [117, 3, 1, "", "outputAnnotatorType"], [117, 2, 1, "", "setMaxNGrams"], [117, 2, 1, "", "setMinNGrams"], [117, 2, 1, "", "setNKeywords"], [117, 2, 1, "", "setStopWords"], [117, 2, 1, "", "setThreshold"], [117, 2, 1, "", "setWindowSize"], [117, 3, 1, "", "stopWords"], [117, 3, 1, "", "threshold"], [117, 3, 1, "", "windowSize"]], "sparknlp.annotator.ld_dl": [[119, 0, 0, "-", "language_detector_dl"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[119, 1, 1, "", "LanguageDetectorDL"]], "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL": [[119, 3, 1, "", "coalesceSentences"], [119, 3, 1, "", "configProtoBytes"], [119, 3, 1, "", "inputAnnotatorTypes"], [119, 3, 1, "", "languages"], [119, 3, 1, "", "name"], [119, 3, 1, "", "outputAnnotatorType"], [119, 2, 1, "", "pretrained"], [119, 2, 1, "", "setCoalesceSentences"], [119, 2, 1, "", "setConfigProtoBytes"], [119, 2, 1, "", "setThreshold"], [119, 2, 1, "", "setThresholdLabel"], [119, 3, 1, "", "threshold"], [119, 3, 1, "", "thresholdLabel"]], "sparknlp.annotator.lemmatizer": [[120, 1, 1, "", "Lemmatizer"], [120, 1, 1, "", "LemmatizerModel"]], "sparknlp.annotator.lemmatizer.Lemmatizer": [[120, 3, 1, "", "dictionary"], [120, 3, 1, "", "formCol"], [120, 3, 1, "", "inputAnnotatorTypes"], [120, 3, 1, "", "lemmaCol"], [120, 3, 1, "", "outputAnnotatorType"], [120, 2, 1, "", "setDictionary"], [120, 2, 1, "", "setFormCol"], [120, 2, 1, "", "setLemmaCol"]], "sparknlp.annotator.lemmatizer.LemmatizerModel": [[120, 3, 1, "", "inputAnnotatorTypes"], [120, 3, 1, "", "name"], [120, 3, 1, "", "outputAnnotatorType"], [120, 2, 1, "", "pretrained"]], "sparknlp.annotator.matcher": [[122, 0, 0, "-", "big_text_matcher"], [123, 0, 0, "-", "date_matcher"], [124, 0, 0, "-", "multi_date_matcher"], [125, 0, 0, "-", "regex_matcher"], [126, 0, 0, "-", "text_matcher"]], "sparknlp.annotator.matcher.big_text_matcher": [[122, 1, 1, "", "BigTextMatcher"], [122, 1, 1, "", "BigTextMatcherModel"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher": [[122, 3, 1, "", "caseSensitive"], [122, 3, 1, "", "entities"], [122, 3, 1, "", "inputAnnotatorTypes"], [122, 3, 1, "", "mergeOverlapping"], [122, 3, 1, "", "outputAnnotatorType"], [122, 2, 1, "", "setCaseSensitive"], [122, 2, 1, "", "setEntities"], [122, 2, 1, "", "setMergeOverlapping"], [122, 2, 1, "", "setTokenizer"], [122, 3, 1, "", "tokenizer"]], "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel": [[122, 3, 1, "", "caseSensitive"], [122, 3, 1, "", "databases"], [122, 3, 1, "", "inputAnnotatorTypes"], [122, 2, 1, "", "loadStorage"], [122, 3, 1, "", "mergeOverlapping"], [122, 3, 1, "", "name"], [122, 3, 1, "", "outputAnnotatorType"], [122, 2, 1, "", "pretrained"], [122, 3, 1, "", "searchTrie"], [122, 2, 1, "", "setCaseSensitive"], [122, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.date_matcher": [[123, 1, 1, "", "DateMatcher"], [123, 1, 1, "", "DateMatcherUtils"]], "sparknlp.annotator.matcher.date_matcher.DateMatcher": [[123, 3, 1, "", "inputAnnotatorTypes"], [123, 3, 1, "", "name"], [123, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils": [[123, 3, 1, "", "aggressiveMatching"], [123, 3, 1, "", "anchorDateDay"], [123, 3, 1, "", "anchorDateMonth"], [123, 3, 1, "", "anchorDateYear"], [123, 3, 1, "", "defaultDayWhenMissing"], [123, 3, 1, "", "inputFormats"], [123, 3, 1, "", "outputFormat"], [123, 3, 1, "", "readMonthFirst"], [123, 3, 1, "", "relaxedFactoryStrategy"], [123, 2, 1, "", "setAggressiveMatching"], [123, 2, 1, "", "setAnchorDateDay"], [123, 2, 1, "", "setAnchorDateMonth"], [123, 2, 1, "", "setAnchorDateYear"], [123, 2, 1, "", "setDefaultDayWhenMissing"], [123, 2, 1, "", "setInputFormats"], [123, 2, 1, "", "setOutputFormat"], [123, 2, 1, "", "setReadMonthFirst"], [123, 2, 1, "", "setRelaxedFactoryStrategy"], [123, 2, 1, "", "setSourceLanguage"], [123, 3, 1, "", "sourceLanguage"]], "sparknlp.annotator.matcher.multi_date_matcher": [[124, 1, 1, "", "MultiDateMatcher"]], "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher": [[124, 3, 1, "", "inputAnnotatorTypes"], [124, 3, 1, "", "name"], [124, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.regex_matcher": [[125, 1, 1, "", "RegexMatcher"], [125, 1, 1, "", "RegexMatcherModel"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcher": [[125, 3, 1, "", "delimiter"], [125, 3, 1, "", "externalRules"], [125, 3, 1, "", "inputAnnotatorTypes"], [125, 3, 1, "", "outputAnnotatorType"], [125, 3, 1, "", "rules"], [125, 2, 1, "", "setDelimiter"], [125, 2, 1, "", "setExternalRules"], [125, 2, 1, "", "setRules"], [125, 2, 1, "", "setStrategy"], [125, 3, 1, "", "strategy"]], "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel": [[125, 3, 1, "", "inputAnnotatorTypes"], [125, 3, 1, "", "name"], [125, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.matcher.text_matcher": [[126, 1, 1, "", "TextMatcher"], [126, 1, 1, "", "TextMatcherModel"]], "sparknlp.annotator.matcher.text_matcher.TextMatcher": [[126, 3, 1, "", "buildFromTokens"], [126, 3, 1, "", "caseSensitive"], [126, 3, 1, "", "entities"], [126, 3, 1, "", "entityValue"], [126, 3, 1, "", "inputAnnotatorTypes"], [126, 3, 1, "", "mergeOverlapping"], [126, 3, 1, "", "outputAnnotatorType"], [126, 2, 1, "", "setBuildFromTokens"], [126, 2, 1, "", "setCaseSensitive"], [126, 2, 1, "", "setEntities"], [126, 2, 1, "", "setEntityValue"], [126, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher.TextMatcherModel": [[126, 3, 1, "", "buildFromTokens"], [126, 3, 1, "", "entityValue"], [126, 3, 1, "", "inputAnnotatorTypes"], [126, 3, 1, "", "mergeOverlapping"], [126, 3, 1, "", "name"], [126, 3, 1, "", "outputAnnotatorType"], [126, 2, 1, "", "pretrained"], [126, 3, 1, "", "searchTrie"], [126, 2, 1, "", "setBuildFromTokens"], [126, 2, 1, "", "setEntityValue"], [126, 2, 1, "", "setMergeOverlapping"]], "sparknlp.annotator.n_gram_generator": [[127, 1, 1, "", "NGramGenerator"]], "sparknlp.annotator.n_gram_generator.NGramGenerator": [[127, 3, 1, "", "delimiter"], [127, 3, 1, "", "enableCumulative"], [127, 3, 1, "", "inputAnnotatorTypes"], [127, 3, 1, "", "n"], [127, 3, 1, "", "name"], [127, 3, 1, "", "outputAnnotatorType"], [127, 2, 1, "", "setDelimiter"], [127, 2, 1, "", "setEnableCumulative"], [127, 2, 1, "", "setN"]], "sparknlp.annotator.ner": [[129, 0, 0, "-", "ner_approach"], [130, 0, 0, "-", "ner_converter"], [131, 0, 0, "-", "ner_crf"], [132, 0, 0, "-", "ner_dl"], [133, 0, 0, "-", "ner_overwriter"], [134, 0, 0, "-", "zero_shot_ner_model"]], "sparknlp.annotator.ner.ner_approach": [[129, 1, 1, "", "NerApproach"]], "sparknlp.annotator.ner.ner_approach.NerApproach": [[129, 3, 1, "", "entities"], [129, 2, 1, "", "getLabelColumn"], [129, 3, 1, "", "labelColumn"], [129, 3, 1, "", "maxEpochs"], [129, 3, 1, "", "minEpochs"], [129, 3, 1, "", "randomSeed"], [129, 2, 1, "", "setEntities"], [129, 2, 1, "", "setLabelColumn"], [129, 2, 1, "", "setMaxEpochs"], [129, 2, 1, "", "setMinEpochs"], [129, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.ner.ner_converter": [[130, 1, 1, "", "NerConverter"]], "sparknlp.annotator.ner.ner_converter.NerConverter": [[130, 3, 1, "", "inputAnnotatorTypes"], [130, 3, 1, "", "name"], [130, 3, 1, "", "nerHasNoSchema"], [130, 3, 1, "", "outputAnnotatorType"], [130, 3, 1, "", "preservePosition"], [130, 2, 1, "", "setNerHasNoSchema"], [130, 2, 1, "", "setPreservePosition"], [130, 2, 1, "", "setWhiteList"], [130, 3, 1, "", "whiteList"]], "sparknlp.annotator.ner.ner_crf": [[131, 1, 1, "", "NerCrfApproach"], [131, 1, 1, "", "NerCrfModel"]], "sparknlp.annotator.ner.ner_crf.NerCrfApproach": [[131, 3, 1, "", "c0"], [131, 3, 1, "", "externalFeatures"], [131, 3, 1, "", "includeConfidence"], [131, 3, 1, "", "inputAnnotatorTypes"], [131, 3, 1, "", "l2"], [131, 3, 1, "", "lossEps"], [131, 3, 1, "", "minW"], [131, 3, 1, "", "outputAnnotatorType"], [131, 2, 1, "", "setC0"], [131, 2, 1, "", "setExternalFeatures"], [131, 2, 1, "", "setIncludeConfidence"], [131, 2, 1, "", "setL2"], [131, 2, 1, "", "setLossEps"], [131, 2, 1, "", "setMinW"], [131, 2, 1, "", "setVerbose"], [131, 3, 1, "", "verbose"]], "sparknlp.annotator.ner.ner_crf.NerCrfModel": [[131, 3, 1, "", "includeConfidence"], [131, 3, 1, "", "inputAnnotatorTypes"], [131, 3, 1, "", "name"], [131, 3, 1, "", "outputAnnotatorType"], [131, 2, 1, "", "pretrained"], [131, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_dl": [[132, 1, 1, "", "NerDLApproach"], [132, 1, 1, "", "NerDLModel"]], "sparknlp.annotator.ner.ner_dl.NerDLApproach": [[132, 3, 1, "", "batchSize"], [132, 3, 1, "", "bestModelMetric"], [132, 3, 1, "", "configProtoBytes"], [132, 3, 1, "", "dropout"], [132, 3, 1, "", "enableMemoryOptimizer"], [132, 3, 1, "", "graphFolder"], [132, 3, 1, "", "includeAllConfidenceScores"], [132, 3, 1, "", "includeConfidence"], [132, 3, 1, "", "inputAnnotatorTypes"], [132, 3, 1, "", "lr"], [132, 3, 1, "", "outputAnnotatorType"], [132, 3, 1, "", "po"], [132, 2, 1, "", "setBatchSize"], [132, 2, 1, "", "setBestModelMetric"], [132, 2, 1, "", "setConfigProtoBytes"], [132, 2, 1, "", "setDropout"], [132, 2, 1, "", "setEnableMemoryOptimizer"], [132, 2, 1, "", "setGraphFolder"], [132, 2, 1, "", "setIncludeAllConfidenceScores"], [132, 2, 1, "", "setIncludeConfidence"], [132, 2, 1, "", "setLr"], [132, 2, 1, "", "setPo"], [132, 2, 1, "", "setUseBestModel"], [132, 2, 1, "", "setUseContrib"], [132, 3, 1, "", "useBestModel"], [132, 3, 1, "", "useContrib"]], "sparknlp.annotator.ner.ner_dl.NerDLModel": [[132, 3, 1, "", "classes"], [132, 3, 1, "", "configProtoBytes"], [132, 3, 1, "", "includeAllConfidenceScores"], [132, 3, 1, "", "includeConfidence"], [132, 3, 1, "", "inputAnnotatorTypes"], [132, 3, 1, "", "name"], [132, 3, 1, "", "outputAnnotatorType"], [132, 2, 1, "", "pretrained"], [132, 2, 1, "", "setConfigProtoBytes"], [132, 2, 1, "", "setIncludeAllConfidenceScores"], [132, 2, 1, "", "setIncludeConfidence"]], "sparknlp.annotator.ner.ner_overwriter": [[133, 1, 1, "", "NerOverwriter"]], "sparknlp.annotator.ner.ner_overwriter.NerOverwriter": [[133, 3, 1, "", "inputAnnotatorTypes"], [133, 3, 1, "", "name"], [133, 3, 1, "", "nerWords"], [133, 3, 1, "", "newNerEntity"], [133, 3, 1, "", "outputAnnotatorType"], [133, 3, 1, "", "replaceEntities"], [133, 2, 1, "", "setNerWords"], [133, 2, 1, "", "setNewNerEntity"], [133, 2, 1, "", "setReplaceEntities"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[134, 1, 1, "", "ZeroShotNerModel"]], "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel": [[134, 2, 1, "", "getClasses"], [134, 3, 1, "", "ignoreEntities"], [134, 3, 1, "", "inputAnnotatorTypes"], [134, 2, 1, "", "load"], [134, 3, 1, "", "name"], [134, 3, 1, "", "outputAnnotatorType"], [134, 3, 1, "", "predictionThreshold"], [134, 2, 1, "", "pretrained"], [134, 2, 1, "", "setEntityDefinitions"], [134, 2, 1, "", "setPredictionThreshold"]], "sparknlp.annotator.normalizer": [[135, 1, 1, "", "Normalizer"], [135, 1, 1, "", "NormalizerModel"]], "sparknlp.annotator.normalizer.Normalizer": [[135, 3, 1, "", "cleanupPatterns"], [135, 3, 1, "", "inputAnnotatorTypes"], [135, 3, 1, "", "lowercase"], [135, 3, 1, "", "maxLength"], [135, 3, 1, "", "minLength"], [135, 3, 1, "", "outputAnnotatorType"], [135, 2, 1, "", "setCleanupPatterns"], [135, 2, 1, "", "setLowercase"], [135, 2, 1, "", "setMaxLength"], [135, 2, 1, "", "setMinLength"], [135, 2, 1, "", "setSlangDictionary"], [135, 3, 1, "", "slangDictionary"], [135, 3, 1, "", "slangMatchCase"]], "sparknlp.annotator.normalizer.NormalizerModel": [[135, 3, 1, "", "cleanupPatterns"], [135, 3, 1, "", "inputAnnotatorTypes"], [135, 3, 1, "", "lowercase"], [135, 3, 1, "", "name"], [135, 3, 1, "", "outputAnnotatorType"], [135, 3, 1, "", "slangMatchCase"]], "sparknlp.annotator.openai": [[137, 0, 0, "-", "openai_completion"], [138, 0, 0, "-", "openai_embeddings"]], "sparknlp.annotator.openai.openai_completion": [[137, 1, 1, "", "OpenAICompletion"]], "sparknlp.annotator.openai.openai_completion.OpenAICompletion": [[137, 3, 1, "", "bestOf"], [137, 3, 1, "", "echo"], [137, 3, 1, "", "frequencyPenalty"], [137, 3, 1, "", "inputAnnotatorTypes"], [137, 3, 1, "", "logitBias"], [137, 3, 1, "", "logprobs"], [137, 3, 1, "", "maxTokens"], [137, 3, 1, "", "model"], [137, 3, 1, "", "name"], [137, 3, 1, "", "numberOfCompletions"], [137, 3, 1, "", "outputAnnotatorType"], [137, 3, 1, "", "presencePenalty"], [137, 2, 1, "", "setBestOf"], [137, 2, 1, "", "setEcho"], [137, 2, 1, "", "setFrequencyPenalty"], [137, 2, 1, "", "setLogitBias"], [137, 2, 1, "", "setLogprobs"], [137, 2, 1, "", "setMaxTokens"], [137, 2, 1, "", "setModel"], [137, 2, 1, "", "setNumberOfCompletions"], [137, 2, 1, "", "setPresencePenalty"], [137, 2, 1, "", "setStop"], [137, 2, 1, "", "setSuffix"], [137, 2, 1, "", "setTemperature"], [137, 2, 1, "", "setTopP"], [137, 2, 1, "", "setUser"], [137, 3, 1, "", "stop"], [137, 3, 1, "", "suffix"], [137, 3, 1, "", "temperature"], [137, 3, 1, "", "topP"], [137, 3, 1, "", "user"]], "sparknlp.annotator.openai.openai_embeddings": [[138, 1, 1, "", "OpenAIEmbeddings"]], "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings": [[138, 3, 1, "", "inputAnnotatorTypes"], [138, 3, 1, "", "model"], [138, 3, 1, "", "name"], [138, 3, 1, "", "outputAnnotatorType"], [138, 2, 1, "", "setModel"], [138, 2, 1, "", "setUser"], [138, 3, 1, "", "user"]], "sparknlp.annotator.param": [[140, 0, 0, "-", "classifier_encoder"], [141, 0, 0, "-", "evaluation_dl_params"]], "sparknlp.annotator.param.classifier_encoder": [[140, 1, 1, "", "ClassifierEncoder"]], "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder": [[140, 3, 1, "", "batchSize"], [140, 3, 1, "", "configProtoBytes"], [140, 3, 1, "", "labelColumn"], [140, 3, 1, "", "lr"], [140, 3, 1, "", "maxEpochs"], [140, 3, 1, "", "randomSeed"], [140, 2, 1, "", "setBatchSize"], [140, 2, 1, "", "setConfigProtoBytes"], [140, 2, 1, "", "setLabelColumn"], [140, 2, 1, "", "setLr"], [140, 2, 1, "", "setMaxEpochs"], [140, 2, 1, "", "setRandomSeed"]], "sparknlp.annotator.param.evaluation_dl_params": [[141, 1, 1, "", "EvaluationDLParams"]], "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams": [[141, 3, 1, "", "enableOutputLogs"], [141, 3, 1, "", "evaluationLogExtended"], [141, 3, 1, "", "outputLogsPath"], [141, 2, 1, "", "setEnableOutputLogs"], [141, 2, 1, "", "setEvaluationLogExtended"], [141, 2, 1, "", "setOutputLogsPath"], [141, 2, 1, "", "setTestDataset"], [141, 2, 1, "", "setValidationSplit"], [141, 2, 1, "", "setVerbose"], [141, 3, 1, "", "testDataset"], [141, 3, 1, "", "validationSplit"], [141, 3, 1, "", "verbose"]], "sparknlp.annotator.pos": [[143, 0, 0, "-", "perceptron"]], "sparknlp.annotator.pos.perceptron": [[143, 1, 1, "", "PerceptronApproach"], [143, 1, 1, "", "PerceptronModel"]], "sparknlp.annotator.pos.perceptron.PerceptronApproach": [[143, 2, 1, "", "getNIterations"], [143, 3, 1, "", "inputAnnotatorTypes"], [143, 3, 1, "", "nIterations"], [143, 3, 1, "", "outputAnnotatorType"], [143, 3, 1, "", "posCol"], [143, 2, 1, "", "setIterations"], [143, 2, 1, "", "setPosColumn"]], "sparknlp.annotator.pos.perceptron.PerceptronModel": [[143, 3, 1, "", "inputAnnotatorTypes"], [143, 3, 1, "", "name"], [143, 3, 1, "", "outputAnnotatorType"], [143, 2, 1, "", "pretrained"]], "sparknlp.annotator.sentence": [[145, 0, 0, "-", "sentence_detector"], [146, 0, 0, "-", "sentence_detector_dl"]], "sparknlp.annotator.sentence.sentence_detector": [[145, 1, 1, "", "SentenceDetector"], [145, 1, 1, "", "SentenceDetectorParams"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetector": [[145, 3, 1, "", "detectLists"], [145, 3, 1, "", "inputAnnotatorTypes"], [145, 3, 1, "", "name"], [145, 3, 1, "", "outputAnnotatorType"], [145, 2, 1, "", "setCustomBounds"], [145, 2, 1, "", "setCustomBoundsStrategy"], [145, 2, 1, "", "setDetectLists"], [145, 2, 1, "", "setExplodeSentences"], [145, 2, 1, "", "setMaxLength"], [145, 2, 1, "", "setMinLength"], [145, 2, 1, "", "setSplitLength"], [145, 2, 1, "", "setUseAbbreviations"], [145, 2, 1, "", "setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams": [[145, 3, 1, "", "customBounds"], [145, 3, 1, "", "customBoundsStrategy"], [145, 3, 1, "", "explodeSentences"], [145, 3, 1, "", "maxLength"], [145, 3, 1, "", "minLength"], [145, 3, 1, "", "splitLength"], [145, 3, 1, "", "useAbbreviations"], [145, 3, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[146, 1, 1, "", "SentenceDetectorDLApproach"], [146, 1, 1, "", "SentenceDetectorDLModel"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach": [[146, 3, 1, "", "epochsNumber"], [146, 3, 1, "", "explodeSentences"], [146, 3, 1, "", "impossiblePenultimates"], [146, 3, 1, "", "inputAnnotatorTypes"], [146, 3, 1, "", "modelArchitecture"], [146, 3, 1, "", "name"], [146, 3, 1, "", "outputAnnotatorType"], [146, 3, 1, "", "outputLogsPath"], [146, 2, 1, "", "setEpochsNumber"], [146, 2, 1, "", "setExplodeSentences"], [146, 2, 1, "", "setImpossiblePenultimates"], [146, 2, 1, "", "setModel"], [146, 2, 1, "", "setOutputLogsPath"], [146, 2, 1, "", "setValidationSplit"], [146, 3, 1, "", "validationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel": [[146, 3, 1, "", "customBounds"], [146, 3, 1, "", "explodeSentences"], [146, 3, 1, "", "impossiblePenultimates"], [146, 3, 1, "", "inputAnnotatorTypes"], [146, 3, 1, "", "maxLength"], [146, 3, 1, "", "minLength"], [146, 3, 1, "", "modelArchitecture"], [146, 3, 1, "", "name"], [146, 3, 1, "", "outputAnnotatorType"], [146, 2, 1, "", "pretrained"], [146, 2, 1, "", "setCustomBounds"], [146, 2, 1, "", "setExplodeSentences"], [146, 2, 1, "", "setImpossiblePenultimates"], [146, 2, 1, "", "setMaxLength"], [146, 2, 1, "", "setMinLength"], [146, 2, 1, "", "setModel"], [146, 2, 1, "", "setSplitLength"], [146, 2, 1, "", "setUseCustomBoundsOnly"], [146, 3, 1, "", "splitLength"], [146, 3, 1, "", "useCustomBoundsOnly"]], "sparknlp.annotator.sentiment": [[148, 0, 0, "-", "sentiment_detector"], [149, 0, 0, "-", "vivekn_sentiment"]], "sparknlp.annotator.sentiment.sentiment_detector": [[148, 1, 1, "", "SentimentDetector"], [148, 1, 1, "", "SentimentDetectorModel"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector": [[148, 3, 1, "", "decrementMultiplier"], [148, 3, 1, "", "dictionary"], [148, 3, 1, "", "enableScore"], [148, 3, 1, "", "incrementMultiplier"], [148, 3, 1, "", "inputAnnotatorTypes"], [148, 3, 1, "", "negativeMultiplier"], [148, 3, 1, "", "outputAnnotatorType"], [148, 3, 1, "", "positiveMultiplier"], [148, 3, 1, "", "reverseMultiplier"], [148, 2, 1, "", "setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel": [[148, 3, 1, "", "inputAnnotatorTypes"], [148, 3, 1, "", "name"], [148, 3, 1, "", "outputAnnotatorType"], [148, 3, 1, "", "positiveMultiplier"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[149, 1, 1, "", "ViveknSentimentApproach"], [149, 1, 1, "", "ViveknSentimentModel"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach": [[149, 3, 1, "", "featureLimit"], [149, 3, 1, "", "importantFeatureRatio"], [149, 3, 1, "", "inputAnnotatorTypes"], [149, 3, 1, "", "outputAnnotatorType"], [149, 3, 1, "", "pruneCorpus"], [149, 3, 1, "", "sentimentCol"], [149, 2, 1, "", "setPruneCorpus"], [149, 2, 1, "", "setSentimentCol"], [149, 3, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel": [[149, 3, 1, "", "featureLimit"], [149, 3, 1, "", "importantFeatureRatio"], [149, 3, 1, "", "inputAnnotatorTypes"], [149, 3, 1, "", "name"], [149, 3, 1, "", "outputAnnotatorType"], [149, 2, 1, "", "pretrained"], [149, 3, 1, "", "unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[151, 0, 0, "-", "auto_gguf_model"], [152, 0, 0, "-", "auto_gguf_vision_model"], [153, 0, 0, "-", "bart_transformer"], [154, 0, 0, "-", "cohere_transformer"], [155, 0, 0, "-", "cpm_transformer"], [156, 0, 0, "-", "gpt2_transformer"], [157, 0, 0, "-", "llama2_transformer"], [158, 0, 0, "-", "llama3_transformer"], [159, 0, 0, "-", "m2m100_transformer"], [160, 0, 0, "-", "marian_transformer"], [161, 0, 0, "-", "mistral_transformer"], [162, 0, 0, "-", "nllb_transformer"], [163, 0, 0, "-", "olmo_transformer"], [164, 0, 0, "-", "phi2_transformer"], [165, 0, 0, "-", "phi3_transformer"], [166, 0, 0, "-", "qwen_transformer"], [167, 0, 0, "-", "starcoder_transformer"], [168, 0, 0, "-", "t5_transformer"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[151, 1, 1, "", "AutoGGUFModel"]], "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel": [[151, 3, 1, "", "inputAnnotatorTypes"], [151, 2, 1, "", "loadSavedModel"], [151, 3, 1, "", "name"], [151, 3, 1, "", "outputAnnotatorType"], [151, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[152, 1, 1, "", "AutoGGUFVisionModel"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel": [[152, 3, 1, "", "inputAnnotatorTypes"], [152, 2, 1, "", "loadSavedModel"], [152, 3, 1, "", "name"], [152, 3, 1, "", "outputAnnotatorType"], [152, 2, 1, "", "pretrained"]], "sparknlp.annotator.seq2seq.bart_transformer": [[153, 1, 1, "", "BartTransformer"]], "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer": [[153, 3, 1, "", "beamSize"], [153, 3, 1, "", "configProtoBytes"], [153, 3, 1, "", "doSample"], [153, 3, 1, "", "ignoreTokenIds"], [153, 3, 1, "", "inputAnnotatorTypes"], [153, 2, 1, "", "loadSavedModel"], [153, 3, 1, "", "maxOutputLength"], [153, 3, 1, "", "minOutputLength"], [153, 3, 1, "", "name"], [153, 3, 1, "", "noRepeatNgramSize"], [153, 3, 1, "", "outputAnnotatorType"], [153, 2, 1, "", "pretrained"], [153, 3, 1, "", "repetitionPenalty"], [153, 2, 1, "", "setBeamSize"], [153, 2, 1, "", "setCache"], [153, 2, 1, "", "setConfigProtoBytes"], [153, 2, 1, "", "setDoSample"], [153, 2, 1, "", "setIgnoreTokenIds"], [153, 2, 1, "", "setMaxOutputLength"], [153, 2, 1, "", "setMinOutputLength"], [153, 2, 1, "", "setNoRepeatNgramSize"], [153, 2, 1, "", "setRepetitionPenalty"], [153, 2, 1, "", "setTask"], [153, 2, 1, "", "setTemperature"], [153, 2, 1, "", "setTopK"], [153, 2, 1, "", "setTopP"], [153, 3, 1, "", "task"], [153, 3, 1, "", "temperature"], [153, 3, 1, "", "topK"], [153, 3, 1, "", "topP"], [153, 3, 1, "", "useCache"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[154, 1, 1, "", "CoHereTransformer"]], "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer": [[154, 3, 1, "", "beamSize"], [154, 3, 1, "", "configProtoBytes"], [154, 3, 1, "", "doSample"], [154, 3, 1, "", "ignoreTokenIds"], [154, 3, 1, "", "inputAnnotatorTypes"], [154, 2, 1, "", "loadSavedModel"], [154, 3, 1, "", "maxOutputLength"], [154, 3, 1, "", "minOutputLength"], [154, 3, 1, "", "name"], [154, 3, 1, "", "noRepeatNgramSize"], [154, 3, 1, "", "outputAnnotatorType"], [154, 2, 1, "", "pretrained"], [154, 3, 1, "", "repetitionPenalty"], [154, 2, 1, "", "setBeamSize"], [154, 2, 1, "", "setConfigProtoBytes"], [154, 2, 1, "", "setDoSample"], [154, 2, 1, "", "setIgnoreTokenIds"], [154, 2, 1, "", "setMaxOutputLength"], [154, 2, 1, "", "setMinOutputLength"], [154, 2, 1, "", "setNoRepeatNgramSize"], [154, 2, 1, "", "setRepetitionPenalty"], [154, 2, 1, "", "setStopTokenIds"], [154, 2, 1, "", "setTemperature"], [154, 2, 1, "", "setTopK"], [154, 2, 1, "", "setTopP"], [154, 3, 1, "", "stopTokenIds"], [154, 3, 1, "", "temperature"], [154, 3, 1, "", "topK"], [154, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[155, 1, 1, "", "CPMTransformer"]], "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer": [[155, 3, 1, "", "configProtoBytes"], [155, 3, 1, "", "doSample"], [155, 3, 1, "", "ignoreTokenIds"], [155, 3, 1, "", "inputAnnotatorTypes"], [155, 2, 1, "", "loadSavedModel"], [155, 3, 1, "", "maxOutputLength"], [155, 3, 1, "", "minOutputLength"], [155, 3, 1, "", "name"], [155, 3, 1, "", "noRepeatNgramSize"], [155, 3, 1, "", "outputAnnotatorType"], [155, 2, 1, "", "pretrained"], [155, 3, 1, "", "repetitionPenalty"], [155, 2, 1, "", "setConfigProtoBytes"], [155, 2, 1, "", "setDoSample"], [155, 2, 1, "", "setIgnoreTokenIds"], [155, 2, 1, "", "setMaxOutputLength"], [155, 2, 1, "", "setMinOutputLength"], [155, 2, 1, "", "setNoRepeatNgramSize"], [155, 2, 1, "", "setRepetitionPenalty"], [155, 2, 1, "", "setTemperature"], [155, 2, 1, "", "setTopK"], [155, 2, 1, "", "setTopP"], [155, 3, 1, "", "temperature"], [155, 3, 1, "", "topK"], [155, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[156, 1, 1, "", "GPT2Transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer": [[156, 3, 1, "", "configProtoBytes"], [156, 3, 1, "", "doSample"], [156, 3, 1, "", "ignoreTokenIds"], [156, 3, 1, "", "inputAnnotatorTypes"], [156, 2, 1, "", "loadSavedModel"], [156, 3, 1, "", "maxOutputLength"], [156, 3, 1, "", "minOutputLength"], [156, 3, 1, "", "name"], [156, 3, 1, "", "noRepeatNgramSize"], [156, 3, 1, "", "outputAnnotatorType"], [156, 2, 1, "", "pretrained"], [156, 3, 1, "", "repetitionPenalty"], [156, 2, 1, "", "setConfigProtoBytes"], [156, 2, 1, "", "setDoSample"], [156, 2, 1, "", "setIgnoreTokenIds"], [156, 2, 1, "", "setMaxOutputLength"], [156, 2, 1, "", "setMinOutputLength"], [156, 2, 1, "", "setNoRepeatNgramSize"], [156, 2, 1, "", "setRepetitionPenalty"], [156, 2, 1, "", "setTask"], [156, 2, 1, "", "setTemperature"], [156, 2, 1, "", "setTopK"], [156, 2, 1, "", "setTopP"], [156, 3, 1, "", "task"], [156, 3, 1, "", "temperature"], [156, 3, 1, "", "topK"], [156, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[157, 1, 1, "", "LLAMA2Transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer": [[157, 3, 1, "", "configProtoBytes"], [157, 3, 1, "", "doSample"], [157, 3, 1, "", "ignoreTokenIds"], [157, 3, 1, "", "inputAnnotatorTypes"], [157, 2, 1, "", "loadSavedModel"], [157, 3, 1, "", "maxOutputLength"], [157, 3, 1, "", "minOutputLength"], [157, 3, 1, "", "name"], [157, 3, 1, "", "noRepeatNgramSize"], [157, 3, 1, "", "outputAnnotatorType"], [157, 2, 1, "", "pretrained"], [157, 3, 1, "", "repetitionPenalty"], [157, 2, 1, "", "setConfigProtoBytes"], [157, 2, 1, "", "setDoSample"], [157, 2, 1, "", "setIgnoreTokenIds"], [157, 2, 1, "", "setMaxOutputLength"], [157, 2, 1, "", "setMinOutputLength"], [157, 2, 1, "", "setNoRepeatNgramSize"], [157, 2, 1, "", "setRepetitionPenalty"], [157, 2, 1, "", "setTemperature"], [157, 2, 1, "", "setTopK"], [157, 2, 1, "", "setTopP"], [157, 3, 1, "", "temperature"], [157, 3, 1, "", "topK"], [157, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[158, 1, 1, "", "LLAMA3Transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer": [[158, 3, 1, "", "beamSize"], [158, 3, 1, "", "configProtoBytes"], [158, 3, 1, "", "doSample"], [158, 3, 1, "", "ignoreTokenIds"], [158, 3, 1, "", "inputAnnotatorTypes"], [158, 2, 1, "", "loadSavedModel"], [158, 3, 1, "", "maxOutputLength"], [158, 3, 1, "", "minOutputLength"], [158, 3, 1, "", "name"], [158, 3, 1, "", "noRepeatNgramSize"], [158, 3, 1, "", "outputAnnotatorType"], [158, 2, 1, "", "pretrained"], [158, 3, 1, "", "repetitionPenalty"], [158, 2, 1, "", "setBeamSize"], [158, 2, 1, "", "setConfigProtoBytes"], [158, 2, 1, "", "setDoSample"], [158, 2, 1, "", "setIgnoreTokenIds"], [158, 2, 1, "", "setMaxOutputLength"], [158, 2, 1, "", "setMinOutputLength"], [158, 2, 1, "", "setNoRepeatNgramSize"], [158, 2, 1, "", "setRepetitionPenalty"], [158, 2, 1, "", "setStopTokenIds"], [158, 2, 1, "", "setTemperature"], [158, 2, 1, "", "setTopK"], [158, 2, 1, "", "setTopP"], [158, 3, 1, "", "stopTokenIds"], [158, 3, 1, "", "temperature"], [158, 3, 1, "", "topK"], [158, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[159, 1, 1, "", "M2M100Transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer": [[159, 3, 1, "", "beamSize"], [159, 3, 1, "", "configProtoBytes"], [159, 3, 1, "", "doSample"], [159, 3, 1, "", "ignoreTokenIds"], [159, 3, 1, "", "inputAnnotatorTypes"], [159, 2, 1, "", "loadSavedModel"], [159, 3, 1, "", "maxOutputLength"], [159, 3, 1, "", "minOutputLength"], [159, 3, 1, "", "name"], [159, 3, 1, "", "noRepeatNgramSize"], [159, 3, 1, "", "outputAnnotatorType"], [159, 2, 1, "", "pretrained"], [159, 3, 1, "", "repetitionPenalty"], [159, 2, 1, "", "setBeamSize"], [159, 2, 1, "", "setConfigProtoBytes"], [159, 2, 1, "", "setDoSample"], [159, 2, 1, "", "setIgnoreTokenIds"], [159, 2, 1, "", "setMaxOutputLength"], [159, 2, 1, "", "setMinOutputLength"], [159, 2, 1, "", "setNoRepeatNgramSize"], [159, 2, 1, "", "setRepetitionPenalty"], [159, 2, 1, "", "setSrcLang"], [159, 2, 1, "", "setTemperature"], [159, 2, 1, "", "setTgtLang"], [159, 2, 1, "", "setTopK"], [159, 2, 1, "", "setTopP"], [159, 3, 1, "", "srcLang"], [159, 3, 1, "", "temperature"], [159, 3, 1, "", "tgtLang"], [159, 3, 1, "", "topK"], [159, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[160, 1, 1, "", "MarianTransformer"]], "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer": [[160, 3, 1, "", "configProtoBytes"], [160, 3, 1, "", "doSample"], [160, 3, 1, "", "ignoreTokenIds"], [160, 3, 1, "", "inputAnnotatorTypes"], [160, 3, 1, "", "langId"], [160, 2, 1, "", "loadSavedModel"], [160, 3, 1, "", "maxInputLength"], [160, 3, 1, "", "maxOutputLength"], [160, 3, 1, "", "name"], [160, 3, 1, "", "noRepeatNgramSize"], [160, 3, 1, "", "outputAnnotatorType"], [160, 2, 1, "", "pretrained"], [160, 3, 1, "", "repetitionPenalty"], [160, 2, 1, "", "setConfigProtoBytes"], [160, 2, 1, "", "setDoSample"], [160, 2, 1, "", "setIgnoreTokenIds"], [160, 2, 1, "", "setLangId"], [160, 2, 1, "", "setMaxInputLength"], [160, 2, 1, "", "setMaxOutputLength"], [160, 2, 1, "", "setNoRepeatNgramSize"], [160, 2, 1, "", "setRandomSeed"], [160, 2, 1, "", "setRepetitionPenalty"], [160, 2, 1, "", "setTemperature"], [160, 2, 1, "", "setTopK"], [160, 2, 1, "", "setTopP"], [160, 3, 1, "", "temperature"], [160, 3, 1, "", "topK"], [160, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[161, 1, 1, "", "MistralTransformer"]], "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer": [[161, 3, 1, "", "configProtoBytes"], [161, 3, 1, "", "doSample"], [161, 3, 1, "", "ignoreTokenIds"], [161, 3, 1, "", "inputAnnotatorTypes"], [161, 2, 1, "", "loadSavedModel"], [161, 3, 1, "", "maxOutputLength"], [161, 3, 1, "", "minOutputLength"], [161, 3, 1, "", "name"], [161, 3, 1, "", "noRepeatNgramSize"], [161, 3, 1, "", "outputAnnotatorType"], [161, 2, 1, "", "pretrained"], [161, 3, 1, "", "repetitionPenalty"], [161, 2, 1, "", "setConfigProtoBytes"], [161, 2, 1, "", "setDoSample"], [161, 2, 1, "", "setIgnoreTokenIds"], [161, 2, 1, "", "setMaxOutputLength"], [161, 2, 1, "", "setMinOutputLength"], [161, 2, 1, "", "setNoRepeatNgramSize"], [161, 2, 1, "", "setRepetitionPenalty"], [161, 2, 1, "", "setTemperature"], [161, 2, 1, "", "setTopK"], [161, 2, 1, "", "setTopP"], [161, 3, 1, "", "temperature"], [161, 3, 1, "", "topK"], [161, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[162, 1, 1, "", "NLLBTransformer"]], "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer": [[162, 3, 1, "", "beamSize"], [162, 3, 1, "", "configProtoBytes"], [162, 3, 1, "", "doSample"], [162, 3, 1, "", "ignoreTokenIds"], [162, 3, 1, "", "inputAnnotatorTypes"], [162, 2, 1, "", "loadSavedModel"], [162, 3, 1, "", "maxOutputLength"], [162, 3, 1, "", "minOutputLength"], [162, 3, 1, "", "name"], [162, 3, 1, "", "noRepeatNgramSize"], [162, 3, 1, "", "outputAnnotatorType"], [162, 2, 1, "", "pretrained"], [162, 3, 1, "", "repetitionPenalty"], [162, 2, 1, "", "setBeamSize"], [162, 2, 1, "", "setConfigProtoBytes"], [162, 2, 1, "", "setDoSample"], [162, 2, 1, "", "setIgnoreTokenIds"], [162, 2, 1, "", "setMaxOutputLength"], [162, 2, 1, "", "setMinOutputLength"], [162, 2, 1, "", "setNoRepeatNgramSize"], [162, 2, 1, "", "setRepetitionPenalty"], [162, 2, 1, "", "setSrcLang"], [162, 2, 1, "", "setTemperature"], [162, 2, 1, "", "setTgtLang"], [162, 2, 1, "", "setTopK"], [162, 2, 1, "", "setTopP"], [162, 3, 1, "", "srcLang"], [162, 3, 1, "", "temperature"], [162, 3, 1, "", "tgtLang"], [162, 3, 1, "", "topK"], [162, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[163, 1, 1, "", "OLMoTransformer"]], "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer": [[163, 3, 1, "", "configProtoBytes"], [163, 3, 1, "", "doSample"], [163, 3, 1, "", "ignoreTokenIds"], [163, 3, 1, "", "inputAnnotatorTypes"], [163, 2, 1, "", "loadSavedModel"], [163, 3, 1, "", "maxOutputLength"], [163, 3, 1, "", "minOutputLength"], [163, 3, 1, "", "name"], [163, 3, 1, "", "noRepeatNgramSize"], [163, 3, 1, "", "outputAnnotatorType"], [163, 2, 1, "", "pretrained"], [163, 3, 1, "", "repetitionPenalty"], [163, 2, 1, "", "setConfigProtoBytes"], [163, 2, 1, "", "setDoSample"], [163, 2, 1, "", "setIgnoreTokenIds"], [163, 2, 1, "", "setMaxOutputLength"], [163, 2, 1, "", "setMinOutputLength"], [163, 2, 1, "", "setNoRepeatNgramSize"], [163, 2, 1, "", "setRepetitionPenalty"], [163, 2, 1, "", "setTemperature"], [163, 2, 1, "", "setTopK"], [163, 2, 1, "", "setTopP"], [163, 3, 1, "", "temperature"], [163, 3, 1, "", "topK"], [163, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[164, 1, 1, "", "Phi2Transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer": [[164, 3, 1, "", "configProtoBytes"], [164, 3, 1, "", "doSample"], [164, 3, 1, "", "ignoreTokenIds"], [164, 3, 1, "", "inputAnnotatorTypes"], [164, 2, 1, "", "loadSavedModel"], [164, 3, 1, "", "maxOutputLength"], [164, 3, 1, "", "minOutputLength"], [164, 3, 1, "", "name"], [164, 3, 1, "", "noRepeatNgramSize"], [164, 3, 1, "", "outputAnnotatorType"], [164, 2, 1, "", "pretrained"], [164, 3, 1, "", "repetitionPenalty"], [164, 2, 1, "", "setConfigProtoBytes"], [164, 2, 1, "", "setDoSample"], [164, 2, 1, "", "setIgnoreTokenIds"], [164, 2, 1, "", "setMaxOutputLength"], [164, 2, 1, "", "setMinOutputLength"], [164, 2, 1, "", "setNoRepeatNgramSize"], [164, 2, 1, "", "setRepetitionPenalty"], [164, 2, 1, "", "setTemperature"], [164, 2, 1, "", "setTopK"], [164, 2, 1, "", "setTopP"], [164, 3, 1, "", "temperature"], [164, 3, 1, "", "topK"], [164, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[165, 1, 1, "", "Phi3Transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer": [[165, 3, 1, "", "configProtoBytes"], [165, 3, 1, "", "doSample"], [165, 3, 1, "", "ignoreTokenIds"], [165, 3, 1, "", "inputAnnotatorTypes"], [165, 2, 1, "", "loadSavedModel"], [165, 3, 1, "", "maxOutputLength"], [165, 3, 1, "", "minOutputLength"], [165, 3, 1, "", "name"], [165, 3, 1, "", "noRepeatNgramSize"], [165, 3, 1, "", "outputAnnotatorType"], [165, 2, 1, "", "pretrained"], [165, 3, 1, "", "repetitionPenalty"], [165, 2, 1, "", "setConfigProtoBytes"], [165, 2, 1, "", "setDoSample"], [165, 2, 1, "", "setIgnoreTokenIds"], [165, 2, 1, "", "setMaxOutputLength"], [165, 2, 1, "", "setMinOutputLength"], [165, 2, 1, "", "setNoRepeatNgramSize"], [165, 2, 1, "", "setRepetitionPenalty"], [165, 2, 1, "", "setTemperature"], [165, 2, 1, "", "setTopK"], [165, 2, 1, "", "setTopP"], [165, 3, 1, "", "temperature"], [165, 3, 1, "", "topK"], [165, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[166, 1, 1, "", "QwenTransformer"]], "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer": [[166, 3, 1, "", "configProtoBytes"], [166, 3, 1, "", "doSample"], [166, 3, 1, "", "ignoreTokenIds"], [166, 3, 1, "", "inputAnnotatorTypes"], [166, 2, 1, "", "loadSavedModel"], [166, 3, 1, "", "maxOutputLength"], [166, 3, 1, "", "minOutputLength"], [166, 3, 1, "", "name"], [166, 3, 1, "", "noRepeatNgramSize"], [166, 3, 1, "", "outputAnnotatorType"], [166, 2, 1, "", "pretrained"], [166, 3, 1, "", "repetitionPenalty"], [166, 2, 1, "", "setConfigProtoBytes"], [166, 2, 1, "", "setDoSample"], [166, 2, 1, "", "setIgnoreTokenIds"], [166, 2, 1, "", "setMaxOutputLength"], [166, 2, 1, "", "setMinOutputLength"], [166, 2, 1, "", "setNoRepeatNgramSize"], [166, 2, 1, "", "setRepetitionPenalty"], [166, 2, 1, "", "setTemperature"], [166, 2, 1, "", "setTopK"], [166, 2, 1, "", "setTopP"], [166, 3, 1, "", "temperature"], [166, 3, 1, "", "topK"], [166, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[167, 1, 1, "", "StarCoderTransformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer": [[167, 3, 1, "", "configProtoBytes"], [167, 3, 1, "", "doSample"], [167, 3, 1, "", "ignoreTokenIds"], [167, 3, 1, "", "inputAnnotatorTypes"], [167, 2, 1, "", "loadSavedModel"], [167, 3, 1, "", "maxOutputLength"], [167, 3, 1, "", "minOutputLength"], [167, 3, 1, "", "name"], [167, 3, 1, "", "noRepeatNgramSize"], [167, 3, 1, "", "outputAnnotatorType"], [167, 2, 1, "", "pretrained"], [167, 3, 1, "", "repetitionPenalty"], [167, 2, 1, "", "setConfigProtoBytes"], [167, 2, 1, "", "setDoSample"], [167, 2, 1, "", "setIgnoreTokenIds"], [167, 2, 1, "", "setMaxOutputLength"], [167, 2, 1, "", "setMinOutputLength"], [167, 2, 1, "", "setNoRepeatNgramSize"], [167, 2, 1, "", "setRepetitionPenalty"], [167, 2, 1, "", "setTemperature"], [167, 2, 1, "", "setTopK"], [167, 2, 1, "", "setTopP"], [167, 3, 1, "", "temperature"], [167, 3, 1, "", "topK"], [167, 3, 1, "", "topP"]], "sparknlp.annotator.seq2seq.t5_transformer": [[168, 1, 1, "", "T5Transformer"]], "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer": [[168, 3, 1, "", "configProtoBytes"], [168, 3, 1, "", "doSample"], [168, 3, 1, "", "ignoreTokenIds"], [168, 3, 1, "", "inputAnnotatorTypes"], [168, 2, 1, "", "loadSavedModel"], [168, 3, 1, "", "maxNewTokens"], [168, 3, 1, "", "maxOutputLength"], [168, 3, 1, "", "minOutputLength"], [168, 3, 1, "", "name"], [168, 3, 1, "", "noRepeatNgramSize"], [168, 3, 1, "", "outputAnnotatorType"], [168, 2, 1, "", "pretrained"], [168, 3, 1, "", "repetitionPenalty"], [168, 2, 1, "", "setConfigProtoBytes"], [168, 2, 1, "", "setDoSample"], [168, 2, 1, "", "setIgnoreTokenIds"], [168, 2, 1, "", "setMaxNewTokens"], [168, 2, 1, "", "setMaxOutputLength"], [168, 2, 1, "", "setMinOutputLength"], [168, 2, 1, "", "setNoRepeatNgramSize"], [168, 2, 1, "", "setRepetitionPenalty"], [168, 2, 1, "", "setStopAtEos"], [168, 2, 1, "", "setTask"], [168, 2, 1, "", "setTemperature"], [168, 2, 1, "", "setTopK"], [168, 2, 1, "", "setTopP"], [168, 2, 1, "", "setUseCache"], [168, 3, 1, "", "stopAtEos"], [168, 3, 1, "", "task"], [168, 3, 1, "", "temperature"], [168, 3, 1, "", "topK"], [168, 3, 1, "", "topP"], [168, 3, 1, "", "useCache"]], "sparknlp.annotator.similarity": [[170, 0, 0, "-", "document_similarity_ranker"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[170, 1, 1, "", "DocumentSimilarityRankerApproach"], [170, 1, 1, "", "DocumentSimilarityRankerFinisher"], [170, 1, 1, "", "DocumentSimilarityRankerModel"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach": [[170, 3, 1, "", "aggregationMethod"], [170, 2, 1, "", "asRetriever"], [170, 3, 1, "", "asRetrieverQuery"], [170, 3, 1, "", "bucketLength"], [170, 3, 1, "", "identityRanking"], [170, 3, 1, "", "inputAnnotatorTypes"], [170, 3, 1, "", "numHashTables"], [170, 3, 1, "", "numberOfNeighbours"], [170, 3, 1, "", "outputAnnotatorType"], [170, 2, 1, "", "setAggregationMethod"], [170, 2, 1, "", "setBucketLength"], [170, 2, 1, "", "setIdentityRanking"], [170, 2, 1, "", "setNumHashTables"], [170, 2, 1, "", "setNumberOfNeighbours"], [170, 2, 1, "", "setSimilarityMethod"], [170, 2, 1, "", "setVisibleDistances"], [170, 3, 1, "", "similarityMethod"], [170, 3, 1, "", "visibleDistances"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher": [[170, 3, 1, "", "extractNearestNeighbor"], [170, 2, 1, "", "getInputCols"], [170, 2, 1, "", "getOutputCols"], [170, 3, 1, "", "inputCols"], [170, 3, 1, "", "name"], [170, 3, 1, "", "outputCols"], [170, 2, 1, "", "setExtractNearestNeighbor"], [170, 2, 1, "", "setInputCols"], [170, 2, 1, "", "setOutputCols"], [170, 2, 1, "", "setParams"]], "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel": [[170, 3, 1, "", "inputAnnotatorTypes"], [170, 3, 1, "", "name"], [170, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.spell_check": [[172, 0, 0, "-", "context_spell_checker"], [173, 0, 0, "-", "norvig_sweeting"], [174, 0, 0, "-", "symmetric_delete"]], "sparknlp.annotator.spell_check.context_spell_checker": [[172, 1, 1, "", "ContextSpellCheckerApproach"], [172, 1, 1, "", "ContextSpellCheckerModel"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach": [[172, 2, 1, "", "addRegexClass"], [172, 2, 1, "", "addVocabClass"], [172, 3, 1, "", "batchSize"], [172, 3, 1, "", "caseStrategy"], [172, 3, 1, "", "classCount"], [172, 3, 1, "", "compoundCount"], [172, 3, 1, "", "configProtoBytes"], [172, 3, 1, "", "epochs"], [172, 3, 1, "", "errorThreshold"], [172, 3, 1, "", "finalRate"], [172, 3, 1, "", "graphFolder"], [172, 3, 1, "", "initialRate"], [172, 3, 1, "", "inputAnnotatorTypes"], [172, 3, 1, "", "languageModelClasses"], [172, 3, 1, "", "maxCandidates"], [172, 3, 1, "", "maxSentLen"], [172, 3, 1, "", "maxWindowLen"], [172, 3, 1, "", "minCount"], [172, 3, 1, "", "name"], [172, 3, 1, "", "outputAnnotatorType"], [172, 2, 1, "", "setBatchSize"], [172, 2, 1, "", "setCaseStrategy"], [172, 2, 1, "", "setClassCount"], [172, 2, 1, "", "setCompoundCount"], [172, 2, 1, "", "setConfigProtoBytes"], [172, 2, 1, "", "setEpochs"], [172, 2, 1, "", "setErrorThreshold"], [172, 2, 1, "", "setFinalRate"], [172, 2, 1, "", "setGraphFolder"], [172, 2, 1, "", "setInitialRate"], [172, 2, 1, "", "setLanguageModelClasses"], [172, 2, 1, "", "setMaxCandidates"], [172, 2, 1, "", "setMaxSentLen"], [172, 2, 1, "", "setMaxWindowLen"], [172, 2, 1, "", "setMinCount"], [172, 2, 1, "", "setTradeoff"], [172, 2, 1, "", "setValidationFraction"], [172, 2, 1, "", "setWeightedDistPath"], [172, 2, 1, "", "setWordMaxDistance"], [172, 3, 1, "", "tradeoff"], [172, 3, 1, "", "validationFraction"], [172, 3, 1, "", "weightedDistPath"], [172, 3, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel": [[172, 3, 1, "", "caseStrategy"], [172, 3, 1, "", "classes"], [172, 3, 1, "", "compareLowcase"], [172, 3, 1, "", "configProtoBytes"], [172, 3, 1, "", "correctSymbols"], [172, 3, 1, "", "errorThreshold"], [172, 3, 1, "", "gamma"], [172, 2, 1, "", "getWordClasses"], [172, 3, 1, "", "idsVocab"], [172, 3, 1, "", "inputAnnotatorTypes"], [172, 3, 1, "", "maxCandidates"], [172, 3, 1, "", "maxWindowLen"], [172, 3, 1, "", "name"], [172, 3, 1, "", "outputAnnotatorType"], [172, 2, 1, "", "pretrained"], [172, 2, 1, "", "setCaseStrategy"], [172, 2, 1, "", "setClasses"], [172, 2, 1, "", "setCompareLowcase"], [172, 2, 1, "", "setConfigProtoBytes"], [172, 2, 1, "", "setCorrectSymbols"], [172, 2, 1, "", "setErrorThreshold"], [172, 2, 1, "", "setGamma"], [172, 2, 1, "", "setIdsVocab"], [172, 2, 1, "", "setMaxCandidates"], [172, 2, 1, "", "setMaxWindowLen"], [172, 2, 1, "", "setTradeoff"], [172, 2, 1, "", "setVocabFreq"], [172, 2, 1, "", "setVocabIds"], [172, 2, 1, "", "setWeights"], [172, 2, 1, "", "setWordMaxDistance"], [172, 3, 1, "", "tradeoff"], [172, 2, 1, "", "updateRegexClass"], [172, 2, 1, "", "updateVocabClass"], [172, 3, 1, "", "vocabFreq"], [172, 3, 1, "", "vocabIds"], [172, 3, 1, "", "wordMaxDistance"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[173, 1, 1, "", "NorvigSweetingApproach"], [173, 1, 1, "", "NorvigSweetingModel"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach": [[173, 3, 1, "", "caseSensitive"], [173, 3, 1, "", "dictionary"], [173, 3, 1, "", "doubleVariants"], [173, 3, 1, "", "dupsLimit"], [173, 3, 1, "", "frequencyPriority"], [173, 3, 1, "", "inputAnnotatorTypes"], [173, 3, 1, "", "intersections"], [173, 3, 1, "", "outputAnnotatorType"], [173, 3, 1, "", "reductLimit"], [173, 2, 1, "", "setCaseSensitive"], [173, 2, 1, "", "setDictionary"], [173, 2, 1, "", "setDoubleVariants"], [173, 2, 1, "", "setFrequencyPriority"], [173, 2, 1, "", "setShortCircuit"], [173, 3, 1, "", "shortCircuit"], [173, 3, 1, "", "vowelSwapLimit"], [173, 3, 1, "", "wordSizeIgnore"]], "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel": [[173, 3, 1, "", "inputAnnotatorTypes"], [173, 3, 1, "", "name"], [173, 3, 1, "", "outputAnnotatorType"], [173, 2, 1, "", "pretrained"]], "sparknlp.annotator.spell_check.symmetric_delete": [[174, 1, 1, "", "SymmetricDeleteApproach"], [174, 1, 1, "", "SymmetricDeleteModel"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach": [[174, 3, 1, "", "corpus"], [174, 3, 1, "", "deletesThreshold"], [174, 3, 1, "", "dictionary"], [174, 3, 1, "", "dupsLimit"], [174, 3, 1, "", "frequencyThreshold"], [174, 3, 1, "", "inputAnnotatorTypes"], [174, 3, 1, "", "maxEditDistance"], [174, 3, 1, "", "outputAnnotatorType"], [174, 2, 1, "", "setDeletesThreshold"], [174, 2, 1, "", "setDictionary"], [174, 2, 1, "", "setFrequencyThreshold"], [174, 2, 1, "", "setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel": [[174, 3, 1, "", "inputAnnotatorTypes"], [174, 3, 1, "", "name"], [174, 3, 1, "", "outputAnnotatorType"], [174, 2, 1, "", "pretrained"]], "sparknlp.annotator.stemmer": [[175, 1, 1, "", "Stemmer"]], "sparknlp.annotator.stemmer.Stemmer": [[175, 3, 1, "", "inputAnnotatorTypes"], [175, 3, 1, "", "language"], [175, 3, 1, "", "name"], [175, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.stop_words_cleaner": [[176, 1, 1, "", "StopWordsCleaner"]], "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner": [[176, 3, 1, "", "caseSensitive"], [176, 3, 1, "", "inputAnnotatorTypes"], [176, 2, 1, "", "loadDefaultStopWords"], [176, 3, 1, "", "locale"], [176, 3, 1, "", "name"], [176, 3, 1, "", "outputAnnotatorType"], [176, 2, 1, "", "pretrained"], [176, 2, 1, "", "setCaseSensitive"], [176, 2, 1, "", "setLocale"], [176, 2, 1, "", "setStopWords"], [176, 3, 1, "", "stopWords"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[177, 1, 1, "", "TFNerDLGraphBuilder"], [177, 1, 1, "", "TFNerDLGraphBuilderModel"]], "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder": [[177, 2, 1, "", "getGraphFile"], [177, 2, 1, "", "getGraphFolder"], [177, 2, 1, "", "getHiddenUnitsNumber"], [177, 2, 1, "", "getInputCols"], [177, 2, 1, "", "getLabelColumn"], [177, 3, 1, "", "graphFile"], [177, 3, 1, "", "graphFolder"], [177, 3, 1, "", "hiddenUnitsNumber"], [177, 3, 1, "", "inputAnnotatorTypes"], [177, 3, 1, "", "inputCols"], [177, 2, 1, "", "inputColsValidation"], [177, 3, 1, "", "labelColumn"], [177, 2, 1, "", "setGraphFile"], [177, 2, 1, "", "setGraphFolder"], [177, 2, 1, "", "setHiddenUnitsNumber"], [177, 2, 1, "", "setInputCols"], [177, 2, 1, "", "setLabelColumn"]], "sparknlp.annotator.token": [[179, 0, 0, "-", "chunk_tokenizer"], [180, 0, 0, "-", "recursive_tokenizer"], [181, 0, 0, "-", "regex_tokenizer"], [182, 0, 0, "-", "tokenizer"]], "sparknlp.annotator.token.chunk_tokenizer": [[179, 1, 1, "", "ChunkTokenizer"], [179, 1, 1, "", "ChunkTokenizerModel"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer": [[179, 3, 1, "", "inputAnnotatorTypes"], [179, 3, 1, "", "name"]], "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel": [[179, 3, 1, "", "inputAnnotatorTypes"], [179, 3, 1, "", "name"]], "sparknlp.annotator.token.recursive_tokenizer": [[180, 1, 1, "", "RecursiveTokenizer"], [180, 1, 1, "", "RecursiveTokenizerModel"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer": [[180, 3, 1, "", "infixes"], [180, 3, 1, "", "inputAnnotatorTypes"], [180, 3, 1, "", "name"], [180, 3, 1, "", "outputAnnotatorType"], [180, 3, 1, "", "prefixes"], [180, 2, 1, "", "setInfixes"], [180, 2, 1, "", "setPrefixes"], [180, 2, 1, "", "setSuffixes"], [180, 2, 1, "", "setWhitelist"], [180, 3, 1, "", "suffixes"], [180, 3, 1, "", "whitelist"]], "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel": [[180, 3, 1, "", "inputAnnotatorTypes"], [180, 3, 1, "", "name"], [180, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.token.regex_tokenizer": [[181, 1, 1, "", "RegexTokenizer"]], "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer": [[181, 3, 1, "", "inputAnnotatorTypes"], [181, 3, 1, "", "maxLength"], [181, 3, 1, "", "minLength"], [181, 3, 1, "", "name"], [181, 3, 1, "", "outputAnnotatorType"], [181, 3, 1, "", "pattern"], [181, 3, 1, "", "positionalMask"], [181, 3, 1, "", "preservePosition"], [181, 2, 1, "", "setMaxLength"], [181, 2, 1, "", "setMinLength"], [181, 2, 1, "", "setPattern"], [181, 2, 1, "", "setPositionalMask"], [181, 2, 1, "", "setPreservePosition"], [181, 2, 1, "", "setToLowercase"], [181, 2, 1, "", "setTrimWhitespace"], [181, 3, 1, "", "toLowercase"], [181, 3, 1, "", "trimWhitespace"]], "sparknlp.annotator.token.tokenizer": [[182, 1, 1, "", "Tokenizer"], [182, 1, 1, "", "TokenizerModel"]], "sparknlp.annotator.token.tokenizer.Tokenizer": [[182, 2, 1, "", "addContextChars"], [182, 2, 1, "", "addException"], [182, 2, 1, "", "addInfixPattern"], [182, 2, 1, "", "addSplitChars"], [182, 3, 1, "", "caseSensitiveExceptions"], [182, 3, 1, "", "contextChars"], [182, 3, 1, "", "exceptions"], [182, 3, 1, "", "exceptionsPath"], [182, 2, 1, "", "getCaseSensitiveExceptions"], [182, 2, 1, "", "getContextChars"], [182, 2, 1, "", "getExceptions"], [182, 2, 1, "", "getInfixPatterns"], [182, 2, 1, "", "getPrefixPattern"], [182, 2, 1, "", "getSplitChars"], [182, 2, 1, "", "getSuffixPattern"], [182, 3, 1, "", "infixPatterns"], [182, 3, 1, "", "inputAnnotatorTypes"], [182, 3, 1, "", "maxLength"], [182, 3, 1, "", "minLength"], [182, 3, 1, "", "name"], [182, 3, 1, "", "outputAnnotatorType"], [182, 3, 1, "", "prefixPattern"], [182, 2, 1, "", "setCaseSensitiveExceptions"], [182, 2, 1, "", "setContextChars"], [182, 2, 1, "", "setExceptions"], [182, 2, 1, "", "setExceptionsPath"], [182, 2, 1, "", "setInfixPatterns"], [182, 2, 1, "", "setMaxLength"], [182, 2, 1, "", "setMinLength"], [182, 2, 1, "", "setPrefixPattern"], [182, 2, 1, "", "setSplitChars"], [182, 2, 1, "", "setSplitPattern"], [182, 2, 1, "", "setSuffixPattern"], [182, 2, 1, "", "setTargetPattern"], [182, 3, 1, "", "splitChars"], [182, 3, 1, "", "splitPattern"], [182, 3, 1, "", "suffixPattern"], [182, 3, 1, "", "targetPattern"]], "sparknlp.annotator.token.tokenizer.TokenizerModel": [[182, 2, 1, "", "addSplitChars"], [182, 3, 1, "", "caseSensitiveExceptions"], [182, 3, 1, "", "exceptions"], [182, 3, 1, "", "inputAnnotatorTypes"], [182, 3, 1, "", "name"], [182, 3, 1, "", "outputAnnotatorType"], [182, 2, 1, "", "pretrained"], [182, 3, 1, "", "rules"], [182, 2, 1, "", "setSplitChars"], [182, 2, 1, "", "setSplitPattern"], [182, 3, 1, "", "splitChars"], [182, 3, 1, "", "splitPattern"], [182, 3, 1, "", "targetPattern"]], "sparknlp.annotator.token2_chunk": [[183, 1, 1, "", "Token2Chunk"]], "sparknlp.annotator.token2_chunk.Token2Chunk": [[183, 3, 1, "", "inputAnnotatorTypes"], [183, 3, 1, "", "name"], [183, 3, 1, "", "outputAnnotatorType"]], "sparknlp.annotator.ws": [[185, 0, 0, "-", "word_segmenter"]], "sparknlp.annotator.ws.word_segmenter": [[185, 1, 1, "", "WordSegmenterApproach"], [185, 1, 1, "", "WordSegmenterModel"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach": [[185, 3, 1, "", "ambiguityThreshold"], [185, 3, 1, "", "enableRegexTokenizer"], [185, 3, 1, "", "frequencyThreshold"], [185, 2, 1, "", "getAmbiguityThreshold"], [185, 2, 1, "", "getFrequencyThreshold"], [185, 2, 1, "", "getNIterations"], [185, 3, 1, "", "inputAnnotatorTypes"], [185, 3, 1, "", "nIterations"], [185, 3, 1, "", "name"], [185, 3, 1, "", "outputAnnotatorType"], [185, 3, 1, "", "pattern"], [185, 3, 1, "", "posCol"], [185, 2, 1, "", "setAmbiguityThreshold"], [185, 2, 1, "", "setEnableRegexTokenizer"], [185, 2, 1, "", "setFrequencyThreshold"], [185, 2, 1, "", "setNIterations"], [185, 2, 1, "", "setPattern"], [185, 2, 1, "", "setPosColumn"], [185, 2, 1, "", "setToLowercase"], [185, 3, 1, "", "toLowercase"]], "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel": [[185, 3, 1, "", "enableRegexTokenizer"], [185, 3, 1, "", "inputAnnotatorTypes"], [185, 3, 1, "", "name"], [185, 3, 1, "", "outputAnnotatorType"], [185, 3, 1, "", "pattern"], [185, 2, 1, "", "pretrained"], [185, 2, 1, "", "setEnableRegexTokenizer"], [185, 2, 1, "", "setPattern"], [185, 2, 1, "", "setToLowercase"], [185, 3, 1, "", "toLowercase"]], "sparknlp.base": [[187, 0, 0, "-", "audio_assembler"], [188, 0, 0, "-", "doc2_chunk"], [189, 0, 0, "-", "document_assembler"], [190, 0, 0, "-", "embeddings_finisher"], [191, 0, 0, "-", "finisher"], [192, 0, 0, "-", "graph_finisher"], [193, 0, 0, "-", "has_recursive_fit"], [194, 0, 0, "-", "has_recursive_transform"], [195, 0, 0, "-", "image_assembler"], [196, 0, 0, "-", "light_pipeline"], [197, 0, 0, "-", "multi_document_assembler"], [198, 0, 0, "-", "prompt_assembler"], [199, 0, 0, "-", "recursive_pipeline"], [200, 0, 0, "-", "table_assembler"], [201, 0, 0, "-", "token_assembler"]], "sparknlp.base.audio_assembler": [[187, 1, 1, "", "AudioAssembler"]], "sparknlp.base.audio_assembler.AudioAssembler": [[187, 2, 1, "", "getOutputCol"], [187, 3, 1, "", "inputCol"], [187, 3, 1, "", "name"], [187, 3, 1, "", "outputAnnotatorType"], [187, 3, 1, "", "outputCol"], [187, 2, 1, "", "setInputCol"], [187, 2, 1, "", "setOutputCol"], [187, 2, 1, "", "setParams"]], "sparknlp.base.doc2_chunk": [[188, 1, 1, "", "Doc2Chunk"]], "sparknlp.base.doc2_chunk.Doc2Chunk": [[188, 3, 1, "", "chunkCol"], [188, 3, 1, "", "failOnMissing"], [188, 3, 1, "", "inputAnnotatorTypes"], [188, 3, 1, "", "isArray"], [188, 3, 1, "", "lowerCase"], [188, 3, 1, "", "name"], [188, 3, 1, "", "outputAnnotatorType"], [188, 2, 1, "", "setChunkCol"], [188, 2, 1, "", "setFailOnMissing"], [188, 2, 1, "", "setIsArray"], [188, 2, 1, "", "setLowerCase"], [188, 2, 1, "", "setParams"], [188, 2, 1, "", "setStartCol"], [188, 2, 1, "", "setStartColByTokenIndex"], [188, 3, 1, "", "startCol"], [188, 3, 1, "", "startColByTokenIndex"]], "sparknlp.base.document_assembler": [[189, 1, 1, "", "DocumentAssembler"]], "sparknlp.base.document_assembler.DocumentAssembler": [[189, 3, 1, "", "cleanupMode"], [189, 2, 1, "", "getOutputCol"], [189, 3, 1, "", "idCol"], [189, 3, 1, "", "inputCol"], [189, 3, 1, "", "metadataCol"], [189, 3, 1, "", "name"], [189, 3, 1, "", "outputAnnotatorType"], [189, 3, 1, "", "outputCol"], [189, 2, 1, "", "setCleanupMode"], [189, 2, 1, "", "setIdCol"], [189, 2, 1, "", "setInputCol"], [189, 2, 1, "", "setMetadataCol"], [189, 2, 1, "", "setOutputCol"], [189, 2, 1, "", "setParams"]], "sparknlp.base.embeddings_finisher": [[190, 1, 1, "", "EmbeddingsFinisher"]], "sparknlp.base.embeddings_finisher.EmbeddingsFinisher": [[190, 3, 1, "", "cleanAnnotations"], [190, 2, 1, "", "getInputCols"], [190, 2, 1, "", "getOutputCols"], [190, 3, 1, "", "inputCols"], [190, 3, 1, "", "name"], [190, 3, 1, "", "outputAsVector"], [190, 3, 1, "", "outputCols"], [190, 2, 1, "", "setCleanAnnotations"], [190, 2, 1, "", "setInputCols"], [190, 2, 1, "", "setOutputAsVector"], [190, 2, 1, "", "setOutputCols"], [190, 2, 1, "", "setParams"]], "sparknlp.base.finisher": [[191, 1, 1, "", "Finisher"]], "sparknlp.base.finisher.Finisher": [[191, 3, 1, "", "annotationSplitSymbol"], [191, 3, 1, "", "cleanAnnotations"], [191, 2, 1, "", "getInputCols"], [191, 2, 1, "", "getOutputCols"], [191, 3, 1, "", "includeMetadata"], [191, 3, 1, "", "inputCols"], [191, 3, 1, "", "name"], [191, 3, 1, "", "outputAsArray"], [191, 3, 1, "", "outputCols"], [191, 3, 1, "", "parseEmbeddingsVectors"], [191, 2, 1, "", "setAnnotationSplitSymbol"], [191, 2, 1, "", "setCleanAnnotations"], [191, 2, 1, "", "setIncludeMetadata"], [191, 2, 1, "", "setInputCols"], [191, 2, 1, "", "setOutputAsArray"], [191, 2, 1, "", "setOutputCols"], [191, 2, 1, "", "setParams"], [191, 2, 1, "", "setParseEmbeddingsVectors"], [191, 2, 1, "", "setValueSplitSymbol"], [191, 3, 1, "", "valueSplitSymbol"]], "sparknlp.base.graph_finisher": [[192, 1, 1, "", "GraphFinisher"]], "sparknlp.base.graph_finisher.GraphFinisher": [[192, 3, 1, "", "cleanAnnotations"], [192, 3, 1, "", "inputCol"], [192, 3, 1, "", "name"], [192, 3, 1, "", "outputAsArray"], [192, 3, 1, "", "outputCol"], [192, 2, 1, "", "setCleanAnnotations"], [192, 2, 1, "", "setInputCol"], [192, 2, 1, "", "setOutputAsArray"], [192, 2, 1, "", "setOutputCol"], [192, 2, 1, "", "setParams"]], "sparknlp.base.has_recursive_fit": [[193, 1, 1, "", "HasRecursiveFit"]], "sparknlp.base.has_recursive_transform": [[194, 1, 1, "", "HasRecursiveTransform"]], "sparknlp.base.image_assembler": [[195, 1, 1, "", "ImageAssembler"]], "sparknlp.base.image_assembler.ImageAssembler": [[195, 2, 1, "", "getOutputCol"], [195, 3, 1, "", "inputCol"], [195, 2, 1, "", "loadImagesAsBytes"], [195, 3, 1, "", "name"], [195, 3, 1, "", "outputAnnotatorType"], [195, 3, 1, "", "outputCol"], [195, 2, 1, "", "setInputCol"], [195, 2, 1, "", "setOutputCol"], [195, 2, 1, "", "setParams"], [195, 2, 1, "", "setTextCol"], [195, 3, 1, "", "textCol"]], "sparknlp.base.light_pipeline": [[196, 1, 1, "", "LightPipeline"]], "sparknlp.base.light_pipeline.LightPipeline": [[196, 2, 1, "", "annotate"], [196, 2, 1, "", "fullAnnotate"], [196, 2, 1, "", "fullAnnotateImage"], [196, 2, 1, "", "getIgnoreUnsupported"], [196, 2, 1, "", "setIgnoreUnsupported"], [196, 2, 1, "", "transform"]], "sparknlp.base.multi_document_assembler": [[197, 1, 1, "", "MultiDocumentAssembler"]], "sparknlp.base.multi_document_assembler.MultiDocumentAssembler": [[197, 3, 1, "", "cleanupMode"], [197, 2, 1, "", "getOutputCols"], [197, 3, 1, "", "idCol"], [197, 3, 1, "", "inputCols"], [197, 3, 1, "", "metadataCol"], [197, 3, 1, "", "name"], [197, 3, 1, "", "outputAnnotatorType"], [197, 3, 1, "", "outputCols"], [197, 2, 1, "", "setCleanupMode"], [197, 2, 1, "", "setIdCol"], [197, 2, 1, "", "setInputCols"], [197, 2, 1, "", "setMetadataCol"], [197, 2, 1, "", "setOutputCols"], [197, 2, 1, "", "setParams"]], "sparknlp.base.prompt_assembler": [[198, 1, 1, "", "PromptAssembler"]], "sparknlp.base.prompt_assembler.PromptAssembler": [[198, 3, 1, "", "addAssistant"], [198, 3, 1, "", "chatTemplate"], [198, 3, 1, "", "inputCol"], [198, 3, 1, "", "name"], [198, 3, 1, "", "outputAnnotatorType"], [198, 3, 1, "", "outputCol"], [198, 2, 1, "", "setAddAssistant"], [198, 2, 1, "", "setChatTemplate"], [198, 2, 1, "", "setInputCol"], [198, 2, 1, "", "setOutputCol"], [198, 2, 1, "", "setParams"]], "sparknlp.base.recursive_pipeline": [[199, 1, 1, "", "RecursivePipeline"], [199, 1, 1, "", "RecursivePipelineModel"]], "sparknlp.base.table_assembler": [[200, 1, 1, "", "TableAssembler"]], "sparknlp.base.table_assembler.TableAssembler": [[200, 3, 1, "", "csvDelimiter"], [200, 3, 1, "", "escapeCsvDelimiter"], [200, 3, 1, "", "inputAnnotatorTypes"], [200, 3, 1, "", "inputFormat"], [200, 3, 1, "", "name"], [200, 3, 1, "", "outputAnnotatorType"], [200, 2, 1, "", "setCsvDelimiter"], [200, 2, 1, "", "setEscapeCsvDelimiter"], [200, 2, 1, "", "setInputFormat"]], "sparknlp.base.token_assembler": [[201, 1, 1, "", "TokenAssembler"]], "sparknlp.base.token_assembler.TokenAssembler": [[201, 3, 1, "", "inputAnnotatorTypes"], [201, 3, 1, "", "name"], [201, 3, 1, "", "outputAnnotatorType"], [201, 3, 1, "", "preservePosition"], [201, 2, 1, "", "setParams"], [201, 2, 1, "", "setPreservePosition"]], "sparknlp.common": [[203, 0, 0, "-", "annotator_approach"], [204, 0, 0, "-", "annotator_model"], [205, 0, 0, "-", "annotator_properties"], [206, 0, 0, "-", "annotator_type"], [207, 0, 0, "-", "coverage_result"], [208, 0, 0, "-", "match_strategy"], [209, 0, 0, "-", "properties"], [210, 0, 0, "-", "read_as"], [211, 0, 0, "-", "recursive_annotator_approach"], [212, 0, 0, "-", "storage"], [213, 0, 0, "-", "utils"]], "sparknlp.common.annotator_approach": [[203, 1, 1, "", "AnnotatorApproach"]], "sparknlp.common.annotator_model": [[204, 1, 1, "", "AnnotatorModel"]], "sparknlp.common.annotator_model.AnnotatorModel": [[204, 2, 1, "", "setParams"]], "sparknlp.common.annotator_properties": [[205, 1, 1, "", "AnnotatorProperties"]], "sparknlp.common.annotator_properties.AnnotatorProperties": [[205, 2, 1, "", "getInputCols"], [205, 2, 1, "", "getLazyAnnotator"], [205, 2, 1, "", "getOutputCol"], [205, 3, 1, "", "inputAnnotatorTypes"], [205, 3, 1, "", "inputCols"], [205, 2, 1, "", "inputColsValidation"], [205, 3, 1, "", "lazyAnnotator"], [205, 3, 1, "", "optionalInputAnnotatorTypes"], [205, 3, 1, "", "outputAnnotatorType"], [205, 3, 1, "", "outputCol"], [205, 2, 1, "", "setInputCols"], [205, 2, 1, "", "setLazyAnnotator"], [205, 2, 1, "", "setOutputCol"]], "sparknlp.common.annotator_type": [[206, 1, 1, "", "AnnotatorType"]], "sparknlp.common.annotator_type.AnnotatorType": [[206, 3, 1, "", "AUDIO"], [206, 3, 1, "", "CATEGORY"], [206, 3, 1, "", "CHUNK"], [206, 3, 1, "", "DATE"], [206, 3, 1, "", "DEPENDENCY"], [206, 3, 1, "", "DOCUMENT"], [206, 3, 1, "", "DOC_SIMILARITY_RANKINGS"], [206, 3, 1, "", "DUMMY"], [206, 3, 1, "", "ENTITY"], [206, 3, 1, "", "IMAGE"], [206, 3, 1, "", "LABELED_DEPENDENCY"], [206, 3, 1, "", "LANGUAGE"], [206, 3, 1, "", "NAMED_ENTITY"], [206, 3, 1, "", "NEGEX"], [206, 3, 1, "", "NODE"], [206, 3, 1, "", "POS"], [206, 3, 1, "", "SENTENCE_EMBEDDINGS"], [206, 3, 1, "", "SENTIMENT"], [206, 3, 1, "", "TABLE"], [206, 3, 1, "", "TOKEN"], [206, 3, 1, "", "WORDPIECE"], [206, 3, 1, "", "WORD_EMBEDDINGS"]], "sparknlp.common.coverage_result": [[207, 1, 1, "", "CoverageResult"]], "sparknlp.common.match_strategy": [[208, 1, 1, "", "MatchStrategy"]], "sparknlp.common.match_strategy.MatchStrategy": [[208, 3, 1, "", "MATCH_ALL"], [208, 3, 1, "", "MATCH_COMPLETE"], [208, 3, 1, "", "MATCH_FIRST"]], "sparknlp.common.properties": [[209, 1, 1, "", "HasAudioFeatureProperties"], [209, 1, 1, "", "HasBatchedAnnotate"], [209, 1, 1, "", "HasBatchedAnnotateAudio"], [209, 1, 1, "", "HasBatchedAnnotateImage"], [209, 1, 1, "", "HasCandidateLabelsProperties"], [209, 1, 1, "", "HasCaseSensitiveProperties"], [209, 1, 1, "", "HasClassifierActivationProperties"], [209, 1, 1, "", "HasClsTokenProperties"], [209, 1, 1, "", "HasEmbeddingsProperties"], [209, 1, 1, "", "HasEnableCachingProperties"], [209, 1, 1, "", "HasEngine"], [209, 1, 1, "", "HasGeneratorProperties"], [209, 1, 1, "", "HasImageFeatureProperties"], [209, 1, 1, "", "HasLlamaCppProperties"], [209, 1, 1, "", "HasLongMaxSentenceLengthLimit"], [209, 1, 1, "", "HasMaxSentenceLengthLimit"], [209, 1, 1, "", "HasRescaleFactor"]], "sparknlp.common.properties.HasAudioFeatureProperties": [[209, 3, 1, "", "doNormalize"], [209, 3, 1, "", "featureSize"], [209, 3, 1, "", "paddingSide"], [209, 3, 1, "", "paddingValue"], [209, 3, 1, "", "returnAttentionMask"], [209, 3, 1, "", "samplingRate"], [209, 2, 1, "", "setDoNormalize"], [209, 2, 1, "", "setFeatureSize"], [209, 2, 1, "", "setPaddingSide"], [209, 2, 1, "", "setPaddingValue"], [209, 2, 1, "", "setReturnAttentionMask"], [209, 2, 1, "", "setSamplingRate"]], "sparknlp.common.properties.HasBatchedAnnotate": [[209, 3, 1, "", "batchSize"], [209, 2, 1, "", "getBatchSize"], [209, 2, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateAudio": [[209, 3, 1, "", "batchSize"], [209, 2, 1, "", "getBatchSize"], [209, 2, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasBatchedAnnotateImage": [[209, 3, 1, "", "batchSize"], [209, 2, 1, "", "getBatchSize"], [209, 2, 1, "", "setBatchSize"]], "sparknlp.common.properties.HasCandidateLabelsProperties": [[209, 3, 1, "", "candidateLabels"], [209, 3, 1, "", "contradictionIdParam"], [209, 3, 1, "", "entailmentIdParam"], [209, 2, 1, "", "setCandidateLabels"], [209, 2, 1, "", "setContradictionIdParam"], [209, 2, 1, "", "setEntailmentIdParam"]], "sparknlp.common.properties.HasCaseSensitiveProperties": [[209, 3, 1, "", "caseSensitive"], [209, 2, 1, "", "getCaseSensitive"], [209, 2, 1, "", "setCaseSensitive"]], "sparknlp.common.properties.HasClassifierActivationProperties": [[209, 3, 1, "", "activation"], [209, 2, 1, "", "getActivation"], [209, 2, 1, "", "getMultilabel"], [209, 3, 1, "", "multilabel"], [209, 2, 1, "", "setActivation"], [209, 2, 1, "", "setMultilabel"], [209, 2, 1, "", "setThreshold"], [209, 3, 1, "", "threshold"]], "sparknlp.common.properties.HasClsTokenProperties": [[209, 2, 1, "", "getUseCLSToken"], [209, 2, 1, "", "setUseCLSToken"], [209, 3, 1, "", "useCLSToken"]], "sparknlp.common.properties.HasEmbeddingsProperties": [[209, 3, 1, "", "dimension"], [209, 2, 1, "", "getDimension"], [209, 2, 1, "", "setDimension"]], "sparknlp.common.properties.HasEnableCachingProperties": [[209, 3, 1, "", "enableCaching"], [209, 2, 1, "", "getEnableCaching"], [209, 2, 1, "", "setEnableCaching"]], "sparknlp.common.properties.HasEngine": [[209, 3, 1, "", "engine"], [209, 2, 1, "", "getEngine"]], "sparknlp.common.properties.HasGeneratorProperties": [[209, 3, 1, "", "beamSize"], [209, 3, 1, "", "doSample"], [209, 3, 1, "", "maxOutputLength"], [209, 3, 1, "", "minOutputLength"], [209, 3, 1, "", "nReturnSequences"], [209, 3, 1, "", "noRepeatNgramSize"], [209, 3, 1, "", "repetitionPenalty"], [209, 2, 1, "", "setBeamSize"], [209, 2, 1, "", "setDoSample"], [209, 2, 1, "", "setMaxOutputLength"], [209, 2, 1, "", "setMinOutputLength"], [209, 2, 1, "", "setNReturnSequences"], [209, 2, 1, "", "setNoRepeatNgramSize"], [209, 2, 1, "", "setRepetitionPenalty"], [209, 2, 1, "", "setTask"], [209, 2, 1, "", "setTemperature"], [209, 2, 1, "", "setTopK"], [209, 2, 1, "", "setTopP"], [209, 3, 1, "", "task"], [209, 3, 1, "", "temperature"], [209, 3, 1, "", "topK"], [209, 3, 1, "", "topP"]], "sparknlp.common.properties.HasImageFeatureProperties": [[209, 3, 1, "", "doNormalize"], [209, 3, 1, "", "doResize"], [209, 3, 1, "", "featureExtractorType"], [209, 3, 1, "", "imageMean"], [209, 3, 1, "", "imageStd"], [209, 3, 1, "", "resample"], [209, 2, 1, "", "setDoNormalize"], [209, 2, 1, "", "setDoResize"], [209, 2, 1, "", "setFeatureExtractorType"], [209, 2, 1, "", "setImageMean"], [209, 2, 1, "", "setImageStd"], [209, 2, 1, "", "setResample"], [209, 2, 1, "", "setSize"], [209, 3, 1, "", "size"]], "sparknlp.common.properties.HasLlamaCppProperties": [[209, 3, 1, "", "cachePrompt"], [209, 3, 1, "", "chatTemplate"], [209, 3, 1, "", "defragmentationThreshold"], [209, 3, 1, "", "disableTokenIds"], [209, 3, 1, "", "dynamicTemperatureExponent"], [209, 3, 1, "", "dynamicTemperatureRange"], [209, 3, 1, "", "embedding"], [209, 3, 1, "", "flashAttention"], [209, 3, 1, "", "frequencyPenalty"], [209, 2, 1, "", "getMetadata"], [209, 3, 1, "", "gpuSplitMode"], [209, 3, 1, "", "grammar"], [209, 3, 1, "", "grpAttnN"], [209, 3, 1, "", "grpAttnW"], [209, 3, 1, "", "ignoreEos"], [209, 3, 1, "", "inputPrefix"], [209, 3, 1, "", "inputPrefixBos"], [209, 3, 1, "", "inputSuffix"], [209, 3, 1, "", "lookupCacheDynamicFilePath"], [209, 3, 1, "", "lookupCacheStaticFilePath"], [209, 3, 1, "", "mainGpu"], [209, 3, 1, "", "minKeep"], [209, 3, 1, "", "minP"], [209, 3, 1, "", "miroStat"], [209, 3, 1, "", "miroStatEta"], [209, 3, 1, "", "miroStatTau"], [209, 3, 1, "", "modelAlias"], [209, 3, 1, "", "modelDraft"], [209, 3, 1, "", "nBatch"], [209, 3, 1, "", "nChunks"], [209, 3, 1, "", "nCtx"], [209, 3, 1, "", "nDraft"], [209, 3, 1, "", "nGpuLayers"], [209, 3, 1, "", "nGpuLayersDraft"], [209, 3, 1, "", "nKeep"], [209, 3, 1, "", "nPredict"], [209, 3, 1, "", "nProbs"], [209, 3, 1, "", "nSequences"], [209, 3, 1, "", "nThreads"], [209, 3, 1, "", "nThreadsBatch"], [209, 3, 1, "", "nThreadsBatchDraft"], [209, 3, 1, "", "nThreadsDraft"], [209, 3, 1, "", "nUbatch"], [209, 3, 1, "", "noKvOffload"], [209, 3, 1, "", "numaStrategy"], [209, 3, 1, "", "pSplit"], [209, 3, 1, "", "penalizeNl"], [209, 3, 1, "", "penaltyPrompt"], [209, 3, 1, "", "poolingType"], [209, 3, 1, "", "presencePenalty"], [209, 3, 1, "", "repeatLastN"], [209, 3, 1, "", "repeatPenalty"], [209, 3, 1, "", "ropeFreqBase"], [209, 3, 1, "", "ropeFreqScale"], [209, 3, 1, "", "ropeScalingType"], [209, 3, 1, "", "samplers"], [209, 3, 1, "", "seed"], [209, 2, 1, "", "setCachePrompt"], [209, 2, 1, "", "setChatTemplate"], [209, 2, 1, "", "setDefragmentationThreshold"], [209, 2, 1, "", "setDisableTokenIds"], [209, 2, 1, "", "setDynamicTemperatureExponent"], [209, 2, 1, "", "setDynamicTemperatureRange"], [209, 2, 1, "", "setEmbedding"], [209, 2, 1, "", "setFlashAttention"], [209, 2, 1, "", "setFrequencyPenalty"], [209, 2, 1, "", "setGpuSplitMode"], [209, 2, 1, "", "setGrammar"], [209, 2, 1, "", "setGrpAttnN"], [209, 2, 1, "", "setGrpAttnW"], [209, 2, 1, "", "setIgnoreEos"], [209, 2, 1, "", "setInputPrefix"], [209, 2, 1, "", "setInputPrefixBos"], [209, 2, 1, "", "setInputSuffix"], [209, 2, 1, "", "setLookupCacheDynamicFilePath"], [209, 2, 1, "", "setLookupCacheStaticFilePath"], [209, 2, 1, "", "setLoraAdapters"], [209, 2, 1, "", "setMainGpu"], [209, 2, 1, "", "setMinKeep"], [209, 2, 1, "", "setMinP"], [209, 2, 1, "", "setMiroStat"], [209, 2, 1, "", "setMiroStatEta"], [209, 2, 1, "", "setMiroStatTau"], [209, 2, 1, "", "setModelAlias"], [209, 2, 1, "", "setModelDraft"], [209, 2, 1, "", "setNBatch"], [209, 2, 1, "", "setNChunks"], [209, 2, 1, "", "setNCtx"], [209, 2, 1, "", "setNDraft"], [209, 2, 1, "", "setNGpuLayers"], [209, 2, 1, "", "setNGpuLayersDraft"], [209, 2, 1, "", "setNKeep"], [209, 2, 1, "", "setNParallel"], [209, 2, 1, "", "setNPredict"], [209, 2, 1, "", "setNProbs"], [209, 2, 1, "", "setNSequences"], [209, 2, 1, "", "setNThreads"], [209, 2, 1, "", "setNThreadsBatch"], [209, 2, 1, "", "setNThreadsBatchDraft"], [209, 2, 1, "", "setNThreadsDraft"], [209, 2, 1, "", "setNUbatch"], [209, 2, 1, "", "setNoKvOffload"], [209, 2, 1, "", "setNumaStrategy"], [209, 2, 1, "", "setPSplit"], [209, 2, 1, "", "setPenalizeNl"], [209, 2, 1, "", "setPenaltyPrompt"], [209, 2, 1, "", "setPoolingType"], [209, 2, 1, "", "setPresencePenalty"], [209, 2, 1, "", "setRepeatLastN"], [209, 2, 1, "", "setRepeatPenalty"], [209, 2, 1, "", "setRopeFreqBase"], [209, 2, 1, "", "setRopeFreqScale"], [209, 2, 1, "", "setRopeScalingType"], [209, 2, 1, "", "setSamplers"], [209, 2, 1, "", "setSeed"], [209, 2, 1, "", "setStopStrings"], [209, 2, 1, "", "setSystemPrompt"], [209, 2, 1, "", "setTemperature"], [209, 2, 1, "", "setTensorSplit"], [209, 2, 1, "", "setTfsZ"], [209, 2, 1, "", "setTokenBias"], [209, 2, 1, "", "setTokenIdBias"], [209, 2, 1, "", "setTopK"], [209, 2, 1, "", "setTopP"], [209, 2, 1, "", "setTypicalP"], [209, 2, 1, "", "setUseChatTemplate"], [209, 2, 1, "", "setUseMlock"], [209, 2, 1, "", "setUseMmap"], [209, 2, 1, "", "setYarnAttnFactor"], [209, 2, 1, "", "setYarnBetaFast"], [209, 2, 1, "", "setYarnBetaSlow"], [209, 2, 1, "", "setYarnExtFactor"], [209, 2, 1, "", "setYarnOrigCtx"], [209, 3, 1, "", "stopStrings"], [209, 3, 1, "", "systemPrompt"], [209, 3, 1, "", "temperature"], [209, 3, 1, "", "tensorSplit"], [209, 3, 1, "", "tfsZ"], [209, 3, 1, "", "topK"], [209, 3, 1, "", "topP"], [209, 3, 1, "", "typicalP"], [209, 3, 1, "", "useChatTemplate"], [209, 3, 1, "", "useMlock"], [209, 3, 1, "", "useMmap"], [209, 3, 1, "", "yarnAttnFactor"], [209, 3, 1, "", "yarnBetaFast"], [209, 3, 1, "", "yarnBetaSlow"], [209, 3, 1, "", "yarnExtFactor"], [209, 3, 1, "", "yarnOrigCtx"]], "sparknlp.common.properties.HasLongMaxSentenceLengthLimit": [[209, 3, 1, "", "max_length_limit"]], "sparknlp.common.properties.HasMaxSentenceLengthLimit": [[209, 2, 1, "", "getMaxSentenceLength"], [209, 3, 1, "", "maxSentenceLength"], [209, 3, 1, "", "max_length_limit"], [209, 2, 1, "", "setMaxSentenceLength"]], "sparknlp.common.properties.HasRescaleFactor": [[209, 3, 1, "", "doRescale"], [209, 3, 1, "", "rescaleFactor"], [209, 2, 1, "", "setDoRescale"], [209, 2, 1, "", "setRescaleFactor"]], "sparknlp.common.read_as": [[210, 1, 1, "", "ReadAs"]], "sparknlp.common.read_as.ReadAs": [[210, 3, 1, "", "BINARY"], [210, 3, 1, "", "SPARK"], [210, 3, 1, "", "TEXT"]], "sparknlp.common.recursive_annotator_approach": [[211, 1, 1, "", "RecursiveAnnotatorApproach"]], "sparknlp.common.storage": [[212, 1, 1, "", "HasStorage"], [212, 1, 1, "", "HasStorageModel"], [212, 1, 1, "", "HasStorageOptions"], [212, 1, 1, "", "HasStorageRef"]], "sparknlp.common.storage.HasStorage": [[212, 2, 1, "", "getStoragePath"], [212, 2, 1, "", "setStoragePath"], [212, 3, 1, "", "storagePath"]], "sparknlp.common.storage.HasStorageModel": [[212, 2, 1, "", "loadStorage"], [212, 2, 1, "", "loadStorages"], [212, 2, 1, "", "saveStorage"]], "sparknlp.common.storage.HasStorageOptions": [[212, 3, 1, "", "enableInMemoryStorage"], [212, 2, 1, "", "getEnableInMemoryStorage"], [212, 2, 1, "", "getIncludeStorage"], [212, 3, 1, "", "includeStorage"], [212, 2, 1, "", "setEnableInMemoryStorage"], [212, 2, 1, "", "setIncludeStorage"]], "sparknlp.common.storage.HasStorageRef": [[212, 2, 1, "", "getStorageRef"], [212, 2, 1, "", "setStorageRef"], [212, 3, 1, "", "storageRef"]], "sparknlp.common.utils": [[213, 4, 1, "", "ExternalResource"], [213, 4, 1, "", "RegexRule"]], "sparknlp.functions": [[214, 4, 1, "", "explode_annotations_col"], [214, 4, 1, "", "filter_by_annotations_col"], [214, 4, 1, "", "map_annotations"], [214, 4, 1, "", "map_annotations_array"], [214, 4, 1, "", "map_annotations_col"], [214, 4, 1, "", "map_annotations_cols"], [214, 4, 1, "", "map_annotations_strict"]], "sparknlp.internal": [[216, 0, 0, "-", "annotator_java_ml"], [217, 0, 0, "-", "annotator_transformer"], [218, 0, 0, "-", "extended_java_wrapper"], [219, 0, 0, "-", "params_getters_setters"], [220, 0, 0, "-", "recursive"]], "sparknlp.internal.annotator_java_ml": [[216, 1, 1, "", "AnnotatorJavaMLReadable"], [216, 1, 1, "", "AnnotatorJavaMLReader"]], "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable": [[216, 2, 1, "", "read"]], "sparknlp.internal.annotator_transformer": [[217, 1, 1, "", "AnnotatorTransformer"]], "sparknlp.internal.annotator_transformer.AnnotatorTransformer": [[217, 3, 1, "", "outputAnnotatorType"]], "sparknlp.internal.extended_java_wrapper": [[218, 1, 1, "", "ExtendedJavaWrapper"]], "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper": [[218, 2, 1, "", "apply"], [218, 2, 1, "", "getDataFrame"], [218, 2, 1, "", "new_java_array"], [218, 2, 1, "", "new_java_array_integer"], [218, 2, 1, "", "new_java_array_string"], [218, 2, 1, "", "new_java_obj"], [218, 2, 1, "", "spark_version"]], "sparknlp.internal.params_getters_setters": [[219, 1, 1, "", "ParamsGettersSetters"]], "sparknlp.internal.params_getters_setters.ParamsGettersSetters": [[219, 2, 1, "", "getParamValue"], [219, 3, 1, "", "getter_attrs"], [219, 2, 1, "", "setParamValue"]], "sparknlp.internal.recursive": [[220, 1, 1, "", "RecursiveEstimator"], [220, 1, 1, "", "RecursiveTransformer"]], "sparknlp.internal.recursive.RecursiveEstimator": [[220, 2, 1, "", "fit"]], "sparknlp.internal.recursive.RecursiveTransformer": [[220, 2, 1, "", "transform_recursive"]], "sparknlp.logging": [[222, 0, 0, "-", "comet"]], "sparknlp.logging.comet": [[222, 1, 1, "", "CometLogger"]], "sparknlp.logging.comet.CometLogger": [[222, 2, 1, "", "end"], [222, 2, 1, "", "log_asset"], [222, 2, 1, "", "log_asset_data"], [222, 2, 1, "", "log_completed_run"], [222, 2, 1, "", "log_metrics"], [222, 2, 1, "", "log_parameters"], [222, 2, 1, "", "log_pipeline_parameters"], [222, 2, 1, "", "log_visualization"], [222, 2, 1, "", "monitor"]], "sparknlp.pretrained": [[224, 0, 0, "-", "pretrained_pipeline"], [225, 0, 0, "-", "resource_downloader"], [226, 0, 0, "-", "utils"]], "sparknlp.pretrained.pretrained_pipeline": [[224, 1, 1, "", "PretrainedPipeline"]], "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline": [[224, 2, 1, "", "annotate"], [224, 2, 1, "", "from_disk"], [224, 2, 1, "", "fullAnnotate"], [224, 2, 1, "", "fullAnnotateImage"], [224, 2, 1, "", "transform"]], "sparknlp.pretrained.resource_downloader": [[225, 1, 1, "", "ResourceDownloader"]], "sparknlp.pretrained.resource_downloader.ResourceDownloader": [[225, 2, 1, "", "clearCache"], [225, 2, 1, "", "downloadModel"], [225, 2, 1, "", "downloadModelDirectly"], [225, 2, 1, "", "downloadPipeline"], [225, 2, 1, "", "showAvailableAnnotators"], [225, 2, 1, "", "showPublicModels"], [225, 2, 1, "", "showPublicPipelines"], [225, 2, 1, "", "showUnCategorizedResources"]], "sparknlp.pretrained.utils": [[226, 4, 1, "", "printProgress"]], "sparknlp.reader": [[228, 0, 0, "-", "pdf_to_text"], [229, 0, 0, "-", "sparknlp_reader"]], "sparknlp.reader.pdf_to_text": [[228, 1, 1, "", "PdfToText"]], "sparknlp.reader.pdf_to_text.PdfToText": [[228, 3, 1, "", "pageNumCol"], [228, 3, 1, "", "partitionNum"], [228, 2, 1, "", "setInputCol"], [228, 2, 1, "", "setOutputCol"], [228, 2, 1, "", "setPageNumCol"], [228, 2, 1, "", "setPartitionNum"], [228, 2, 1, "", "setStoreSplittedPdf"], [228, 3, 1, "", "storeSplittedPdf"]], "sparknlp.reader.sparknlp_reader": [[229, 1, 1, "", "SparkNLPReader"]], "sparknlp.reader.sparknlp_reader.SparkNLPReader": [[229, 2, 1, "", "doc"], [229, 2, 1, "", "email"], [229, 2, 1, "", "html"], [229, 2, 1, "", "pdf"], [229, 2, 1, "", "ppt"], [229, 2, 1, "", "txt"], [229, 2, 1, "", "xls"]], "sparknlp.training": [[231, 0, 0, "-", "conll"], [232, 0, 0, "-", "conllu"], [233, 0, 0, "-", "pos"], [234, 0, 0, "-", "pub_tator"], [235, 0, 0, "-", "spacy_to_annotation"]], "sparknlp.training.conll": [[231, 1, 1, "", "CoNLL"]], "sparknlp.training.conll.CoNLL": [[231, 2, 1, "", "readDataset"]], "sparknlp.training.conllu": [[232, 1, 1, "", "CoNLLU"]], "sparknlp.training.conllu.CoNLLU": [[232, 2, 1, "", "readDataset"]], "sparknlp.training.pos": [[233, 1, 1, "", "POS"]], "sparknlp.training.pos.POS": [[233, 2, 1, "", "readDataset"]], "sparknlp.training.pub_tator": [[234, 1, 1, "", "PubTator"]], "sparknlp.training.pub_tator.PubTator": [[234, 2, 1, "", "readDataset"]], "sparknlp.training.spacy_to_annotation": [[235, 1, 1, "", "SpacyToAnnotation"]], "sparknlp.training.spacy_to_annotation.SpacyToAnnotation": [[235, 2, 1, "", "readJsonFile"]], "sparknlp.upload_to_hub": [[237, 1, 1, "", "PushToHub"]], "sparknlp.upload_to_hub.PushToHub": [[237, 2, 1, "", "check_for_required_info"], [237, 2, 1, "", "create_docs"], [237, 3, 1, "", "list_of_tasks"], [237, 2, 1, "", "push_to_hub"], [237, 2, 1, "", "unzip_directory"], [237, 2, 1, "", "zip_directory"]], "sparknlp.util": [[238, 1, 1, "", "CoNLLGenerator"], [238, 4, 1, "", "get_config_path"]], "sparknlp.util.CoNLLGenerator": [[238, 2, 1, "", "exportConllFiles"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"sparknlp": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238], "packag": [1, 5, 6, 12, 59, 62, 64, 77, 84, 113, 116, 118, 121, 128, 136, 139, 142, 144, 147, 150, 169, 171, 178, 184, 186, 202, 215, 221, 223, 227, 230], "subpackag": [1, 5], "submodul": [1, 5, 6, 12, 59, 62, 64, 77, 84, 113, 116, 118, 121, 128, 136, 139, 142, 144, 147, 150, 169, 171, 178, 184, 186, 202, 215, 221, 223, 227, 230], "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241], "content": [1, 5, 6, 12, 59, 62, 64, 77, 84, 113, 116, 118, 121, 128, 136, 139, 142, 144, 147, 150, 169, 171, 178, 184, 186, 202, 215, 221, 223, 227, 230, 240], "annot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 245, 246, 247], "annotation_audio": 3, "annotation_imag": 4, "audio": [6, 7, 8, 9], "hubert_for_ctc": 7, "wav2vec2_for_ctc": 8, "whisper_for_ctc": 9, "chunk2_doc": 10, "chunker": 11, "classifier_dl": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "albert_for_multiple_choic": 13, "albert_for_question_answ": 14, "albert_for_sequence_classif": 15, "albert_for_token_classif": 16, "albert_for_zero_shot_classif": 17, "bart_for_zero_shot_classif": 18, "bert_for_multiple_choic": 19, "bert_for_question_answ": 20, "bert_for_sequence_classif": 21, "bert_for_token_classif": 22, "bert_for_zero_shot_classif": 23, "camembert_for_question_answ": 24, "camembert_for_sequence_classif": 25, "camembert_for_token_classif": 26, "camembert_for_zero_shot_classif": 27, "exampl": [27, 32], "deberta_for_question_answ": 29, "deberta_for_sequence_classif": 30, "deberta_for_token_classif": 31, "deberta_for_zero_shot_classif": 32, "return": [32, 68], "distil_bert_for_question_answ": 33, "distil_bert_for_sequence_classif": 34, "distil_bert_for_token_classif": 35, "distil_bert_for_zero_shot_classif": 36, "distilbert_for_multiple_choic": 37, "longformer_for_question_answ": 38, "longformer_for_sequence_classif": 39, "longformer_for_token_classif": 40, "mpnet_for_question_answ": 41, "mpnet_for_sequence_classif": 42, "mpnet_for_token_classif": 43, "multi_classifier_dl": 44, "roberta_for_multiple_choic": 45, "roberta_for_question_answ": 46, "roberta_for_sequence_classif": 47, "roberta_for_token_classif": 48, "roberta_for_zero_shot_classif": 49, "sentiment_dl": 50, "tapas_for_question_answ": 51, "xlm_roberta_for_multiple_choic": 52, "xlm_roberta_for_question_answ": 53, "xlm_roberta_for_sequence_classif": 54, "xlm_roberta_for_token_classif": 55, "xlm_roberta_for_zero_shot_classif": 56, "xlnet_for_sequence_classif": 57, "xlnet_for_token_classif": 58, "cleaner": [59, 60, 61], "extractor": 61, "coref": [62, 63], "spanbert_coref": 63, "cv": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], "blip_for_question_answ": 65, "clip_for_zero_shot_classif": 66, "convnext_for_image_classif": 67, "janus_for_multimod": 68, "refer": [68, 241], "llava_for_multimod": 69, "mllama_for_multimod": 70, "phi3_vision_for_multimod": 71, "qwen2vl_transform": 72, "swin_for_image_classif": 73, "vision_encoder_decoder_for_image_capt": 74, "vit_for_image_classif": 75, "date2_chunk": 76, "depend": [77, 78, 79], "dependency_pars": 78, "typed_dependency_pars": 79, "document_character_text_splitt": 80, "document_norm": 81, "document_token_splitt": 82, "document_token_splitter_test": 83, "embed": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "albert_embed": 85, "auto_gguf_embed": 86, "bert_embed": 87, "bert_sentence_embed": 88, "bge_embed": 89, "camembert_embed": 90, "chunk_embed": 91, "deberta_embed": 92, "distil_bert_embed": 93, "doc2vec": 94, "e5_embed": 95, "elmo_embed": 96, "instructor_embed": 97, "longformer_embed": 98, "mpnet_embed": 99, "mxbai_embed": 100, "nomic_embed": 101, "roberta_embed": 102, "roberta_sentence_embed": 103, "sentence_embed": 104, "snowflake_embed": 105, "uae_embed": 106, "universal_sentence_encod": 107, "word2vec": 108, "word_embed": 109, "xlm_roberta_embed": 110, "xlm_roberta_sentence_embed": 111, "xlnet_embed": 112, "er": [113, 114], "entity_rul": 114, "graph_extract": 115, "keyword_extract": [116, 117], "yake_keyword_extract": 117, "ld_dl": [118, 119], "language_detector_dl": 119, "lemmat": 120, "matcher": [121, 122, 123, 124, 125, 126], "big_text_match": 122, "date_match": 123, "multi_date_match": 124, "regex_match": 125, "text_match": 126, "n_gram_gener": 127, "ner": [128, 129, 130, 131, 132, 133, 134], "ner_approach": 129, "ner_convert": 130, "ner_crf": 131, "ner_dl": 132, "ner_overwrit": 133, "zero_shot_ner_model": 134, "normal": 135, "openai": [136, 137, 138], "openai_complet": 137, "openai_embed": 138, "param": [139, 140, 141], "classifier_encod": 140, "evaluation_dl_param": 141, "po": [142, 143, 233, 252], "perceptron": 143, "sentenc": [144, 145, 146, 247], "sentence_detector": 145, "sentence_detector_dl": 146, "sentiment": [147, 148, 149], "sentiment_detector": 148, "vivekn_senti": 149, "seq2seq": [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "auto_gguf_model": 151, "auto_gguf_vision_model": 152, "bart_transform": 153, "cohere_transform": 154, "cpm_transform": 155, "gpt2_transform": 156, "llama2_transform": 157, "llama3_transform": 158, "m2m100_transform": 159, "marian_transform": 160, "mistral_transform": 161, "nllb_transform": 162, "olmo_transform": 163, "phi2_transform": 164, "phi3_transform": 165, "qwen_transform": 166, "starcoder_transform": 167, "t5_transform": 168, "similar": [169, 170], "document_similarity_rank": 170, "spell_check": [171, 172, 173, 174], "context_spell_check": 172, "norvig_sweet": 173, "symmetric_delet": 174, "stemmer": 175, "stop_words_clean": 176, "tf_ner_dl_graph_build": 177, "token": [178, 179, 180, 181, 182, 247], "chunk_token": 179, "recursive_token": 180, "regex_token": 181, "token2_chunk": 183, "w": [184, 185], "word_segment": 185, "base": [186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "audio_assembl": 187, "doc2_chunk": 188, "document_assembl": 189, "embeddings_finish": 190, "finish": [191, 247], "graph_finish": 192, "has_recursive_fit": 193, "has_recursive_transform": 194, "image_assembl": 195, "light_pipelin": 196, "multi_document_assembl": 197, "prompt_assembl": 198, "recursive_pipelin": 199, "table_assembl": 200, "token_assembl": 201, "common": [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 246], "annotator_approach": 203, "annotator_model": 204, "annotator_properti": 205, "annotator_typ": 206, "coverage_result": 207, "match_strategi": 208, "properti": 209, "read_a": 210, "recursive_annotator_approach": 211, "storag": 212, "util": [213, 226, 238], "function": [214, 246, 248], "intern": [215, 216, 217, 218, 219, 220], "annotator_java_ml": 216, "annotator_transform": 217, "extended_java_wrapp": 218, "params_getters_sett": 219, "recurs": 220, "log": [221, 222, 242, 244], "comet": [222, 242], "pretrain": [223, 224, 225, 226, 246, 250, 251], "pretrained_pipelin": 224, "resource_download": 225, "reader": [227, 228, 229], "pdf_to_text": 228, "sparknlp_read": 229, "train": [230, 231, 232, 233, 234, 235, 236, 252], "conll": [231, 252], "conllu": [232, 252], "pub_tat": 234, "spacy_to_annot": 235, "tfgraph": 236, "upload_to_hub": 237, "get": [239, 247], "start": 239, "spark": [239, 240, 242, 247, 251], "nlp": [239, 240, 242, 251], "cheat": 239, "sheet": 239, "requir": 239, "instal": [239, 242], "us": [239, 242, 251], "conda": 239, "virtualenv": 239, "session": 239, "from": 239, "python": 239, "document": 240, "api": 241, "A": 242, "meta": 242, "machin": [242, 243], "learn": [242, 243], "platform": [242, 243], "pipelin": [242, 247, 250, 251], "paramet": 242, "evalu": 242, "metric": 242, "visual": 242, "run": 242, "an": 242, "offlin": 242, "experi": 242, "mlflow": 243, "lifecycl": 243, "third": 244, "parti": 244, "project": 244, "approach": 246, "model": 246, "note": 246, "avail": [246, 251], "set": 247, "up": 247, "your": 247, "own": 247, "type": 247, "necessari": 247, "import": 247, "construct": 247, "documentassembl": 247, "data": 247, "detect": 247, "out": 247, "put": 247, "all": 247, "togeth": 247, "ml": [247, 251], "helper": 248, "user": 249, "guid": 249, "light": 250, "convert": 250, "pipelinemodel": 250, "download": 251, "As": 251, "lightpipelin": 251, "load": 252, "dataset": 252, "spell": 252, "checker": 252, "pubtat": 252}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"sparknlp": [[0, "sparknlp"]], "sparknlp package": [[1, "sparknlp-package"]], "Subpackages": [[1, "subpackages"], [5, "subpackages"]], "Submodules": [[1, "submodules"], [5, "submodules"], [6, "submodules"], [12, "submodules"], [59, "submodules"], [62, "submodules"], [64, "submodules"], [77, "submodules"], [84, "submodules"], [113, "submodules"], [116, "submodules"], [118, "submodules"], [121, "submodules"], [128, "submodules"], [136, "submodules"], [139, "submodules"], [142, "submodules"], [144, "submodules"], [147, "submodules"], [150, "submodules"], [169, "submodules"], [171, "submodules"], [178, "submodules"], [184, "submodules"], [186, "submodules"], [202, "submodules"], [215, "submodules"], [221, "submodules"], [223, "submodules"], [227, "submodules"], [230, "submodules"]], "Module contents": [[1, "module-sparknlp"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [12, "module-sparknlp.annotator.classifier_dl"], [59, "module-sparknlp.annotator.cleaners"], [62, "module-sparknlp.annotator.coref"], [64, "module-sparknlp.annotator.cv"], [77, "module-sparknlp.annotator.dependency"], [84, "module-sparknlp.annotator.embeddings"], [113, "module-sparknlp.annotator.er"], [116, "module-sparknlp.annotator.keyword_extraction"], [118, "module-sparknlp.annotator.ld_dl"], [121, "module-sparknlp.annotator.matcher"], [128, "module-sparknlp.annotator.ner"], [136, "module-sparknlp.annotator.openai"], [139, "module-sparknlp.annotator.param"], [142, "module-sparknlp.annotator.pos"], [144, "module-sparknlp.annotator.sentence"], [147, "module-sparknlp.annotator.sentiment"], [150, "module-sparknlp.annotator.seq2seq"], [169, "module-sparknlp.annotator.similarity"], [171, "module-sparknlp.annotator.spell_check"], [178, "module-sparknlp.annotator.token"], [184, "module-sparknlp.annotator.ws"], [186, "module-sparknlp.base"], [202, "module-sparknlp.common"], [215, "module-sparknlp.internal"], [221, "module-sparknlp.logging"], [223, "module-sparknlp.pretrained"], [227, "module-sparknlp.reader"], [230, "module-sparknlp.training"]], "sparknlp.annotation module": [[2, "module-sparknlp.annotation"]], "sparknlp.annotation_audio module": [[3, "module-sparknlp.annotation_audio"]], "sparknlp.annotation_image module": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator package": [[5, "sparknlp-annotator-package"]], "sparknlp.annotator.audio package": [[6, "sparknlp-annotator-audio-package"]], "sparknlp.annotator.audio.hubert_for_ctc module": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "sparknlp.annotator.audio.wav2vec2_for_ctc module": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "sparknlp.annotator.audio.whisper_for_ctc module": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "sparknlp.annotator.chunk2_doc module": [[10, "module-sparknlp.annotator.chunk2_doc"]], "sparknlp.annotator.chunker module": [[11, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl package": [[12, "sparknlp-annotator-classifier-dl-package"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice module": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering module": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification module": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification module": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification module": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification module": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice module": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering module": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification module": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification module": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification module": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering module": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification module": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification module": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification module": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "Examples": [[27, "examples"], [32, "examples"]], "sparknlp.annotator.classifier_dl.classifier_dl module": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering module": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification module": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification module": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification module": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "Returns": [[32, "returns"], [32, "id1"], [68, "returns"], [68, "id1"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering module": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification module": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification module": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification module": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice module": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering module": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification module": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification module": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering module": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification module": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification module": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl module": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice module": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering module": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification module": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification module": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification module": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.sentiment_dl module": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering module": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice module": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering module": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification module": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification module": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification module": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification module": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification module": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners package": [[59, "sparknlp-annotator-cleaners-package"]], "sparknlp.annotator.cleaners.cleaner module": [[60, "module-sparknlp.annotator.cleaners.cleaner"]], "sparknlp.annotator.cleaners.extractor module": [[61, "module-sparknlp.annotator.cleaners.extractor"]], "sparknlp.annotator.coref package": [[62, "sparknlp-annotator-coref-package"]], "sparknlp.annotator.coref.spanbert_coref module": [[63, "module-sparknlp.annotator.coref.spanbert_coref"]], "sparknlp.annotator.cv package": [[64, "sparknlp-annotator-cv-package"]], "sparknlp.annotator.cv.blip_for_question_answering module": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification module": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "sparknlp.annotator.cv.convnext_for_image_classification module": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "sparknlp.annotator.cv.janus_for_multimodal module": [[68, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "References": [[68, "references"]], "sparknlp.annotator.cv.llava_for_multimodal module": [[69, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "sparknlp.annotator.cv.mllama_for_multimodal module": [[70, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal module": [[71, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "sparknlp.annotator.cv.qwen2vl_transformer module": [[72, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "sparknlp.annotator.cv.swin_for_image_classification module": [[73, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning module": [[74, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "sparknlp.annotator.cv.vit_for_image_classification module": [[75, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "sparknlp.annotator.date2_chunk module": [[76, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency package": [[77, "sparknlp-annotator-dependency-package"]], "sparknlp.annotator.dependency.dependency_parser module": [[78, "module-sparknlp.annotator.dependency.dependency_parser"]], "sparknlp.annotator.dependency.typed_dependency_parser module": [[79, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "sparknlp.annotator.document_character_text_splitter module": [[80, "module-sparknlp.annotator.document_character_text_splitter"]], "sparknlp.annotator.document_normalizer module": [[81, "module-sparknlp.annotator.document_normalizer"]], "sparknlp.annotator.document_token_splitter module": [[82, "module-sparknlp.annotator.document_token_splitter"]], "sparknlp.annotator.document_token_splitter_test module": [[83, "sparknlp-annotator-document-token-splitter-test-module"]], "sparknlp.annotator.embeddings package": [[84, "sparknlp-annotator-embeddings-package"]], "sparknlp.annotator.embeddings.albert_embeddings module": [[85, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings module": [[86, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "sparknlp.annotator.embeddings.bert_embeddings module": [[87, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings module": [[88, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp.annotator.embeddings.bge_embeddings module": [[89, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "sparknlp.annotator.embeddings.camembert_embeddings module": [[90, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "sparknlp.annotator.embeddings.chunk_embeddings module": [[91, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "sparknlp.annotator.embeddings.deberta_embeddings module": [[92, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "sparknlp.annotator.embeddings.distil_bert_embeddings module": [[93, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "sparknlp.annotator.embeddings.doc2vec module": [[94, "module-sparknlp.annotator.embeddings.doc2vec"]], "sparknlp.annotator.embeddings.e5_embeddings module": [[95, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "sparknlp.annotator.embeddings.elmo_embeddings module": [[96, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "sparknlp.annotator.embeddings.instructor_embeddings module": [[97, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "sparknlp.annotator.embeddings.longformer_embeddings module": [[98, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "sparknlp.annotator.embeddings.mpnet_embeddings module": [[99, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "sparknlp.annotator.embeddings.mxbai_embeddings module": [[100, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "sparknlp.annotator.embeddings.nomic_embeddings module": [[101, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "sparknlp.annotator.embeddings.roberta_embeddings module": [[102, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings module": [[103, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.sentence_embeddings module": [[104, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "sparknlp.annotator.embeddings.snowflake_embeddings module": [[105, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "sparknlp.annotator.embeddings.uae_embeddings module": [[106, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "sparknlp.annotator.embeddings.universal_sentence_encoder module": [[107, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "sparknlp.annotator.embeddings.word2vec module": [[108, "module-sparknlp.annotator.embeddings.word2vec"]], "sparknlp.annotator.embeddings.word_embeddings module": [[109, "module-sparknlp.annotator.embeddings.word_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings module": [[110, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings module": [[111, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "sparknlp.annotator.embeddings.xlnet_embeddings module": [[112, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er package": [[113, "sparknlp-annotator-er-package"]], "sparknlp.annotator.er.entity_ruler module": [[114, "module-sparknlp.annotator.er.entity_ruler"]], "sparknlp.annotator.graph_extraction module": [[115, "module-sparknlp.annotator.graph_extraction"]], "sparknlp.annotator.keyword_extraction package": [[116, "sparknlp-annotator-keyword-extraction-package"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction module": [[117, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "sparknlp.annotator.ld_dl package": [[118, "sparknlp-annotator-ld-dl-package"]], "sparknlp.annotator.ld_dl.language_detector_dl module": [[119, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "sparknlp.annotator.lemmatizer module": [[120, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher package": [[121, "sparknlp-annotator-matcher-package"]], "sparknlp.annotator.matcher.big_text_matcher module": [[122, "module-sparknlp.annotator.matcher.big_text_matcher"]], "sparknlp.annotator.matcher.date_matcher module": [[123, "module-sparknlp.annotator.matcher.date_matcher"]], "sparknlp.annotator.matcher.multi_date_matcher module": [[124, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "sparknlp.annotator.matcher.regex_matcher module": [[125, "module-sparknlp.annotator.matcher.regex_matcher"]], "sparknlp.annotator.matcher.text_matcher module": [[126, "module-sparknlp.annotator.matcher.text_matcher"]], "sparknlp.annotator.n_gram_generator module": [[127, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner package": [[128, "sparknlp-annotator-ner-package"]], "sparknlp.annotator.ner.ner_approach module": [[129, "module-sparknlp.annotator.ner.ner_approach"]], "sparknlp.annotator.ner.ner_converter module": [[130, "module-sparknlp.annotator.ner.ner_converter"]], "sparknlp.annotator.ner.ner_crf module": [[131, "module-sparknlp.annotator.ner.ner_crf"]], "sparknlp.annotator.ner.ner_dl module": [[132, "module-sparknlp.annotator.ner.ner_dl"]], "sparknlp.annotator.ner.ner_overwriter module": [[133, "module-sparknlp.annotator.ner.ner_overwriter"]], "sparknlp.annotator.ner.zero_shot_ner_model module": [[134, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "sparknlp.annotator.normalizer module": [[135, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai package": [[136, "sparknlp-annotator-openai-package"]], "sparknlp.annotator.openai.openai_completion module": [[137, "module-sparknlp.annotator.openai.openai_completion"]], "sparknlp.annotator.openai.openai_embeddings module": [[138, "module-sparknlp.annotator.openai.openai_embeddings"]], "sparknlp.annotator.param package": [[139, "sparknlp-annotator-param-package"]], "sparknlp.annotator.param.classifier_encoder module": [[140, "module-sparknlp.annotator.param.classifier_encoder"]], "sparknlp.annotator.param.evaluation_dl_params module": [[141, "module-sparknlp.annotator.param.evaluation_dl_params"]], "sparknlp.annotator.pos package": [[142, "sparknlp-annotator-pos-package"]], "sparknlp.annotator.pos.perceptron module": [[143, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence package": [[144, "sparknlp-annotator-sentence-package"]], "sparknlp.annotator.sentence.sentence_detector module": [[145, "module-sparknlp.annotator.sentence.sentence_detector"]], "sparknlp.annotator.sentence.sentence_detector_dl module": [[146, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "sparknlp.annotator.sentiment package": [[147, "sparknlp-annotator-sentiment-package"]], "sparknlp.annotator.sentiment.sentiment_detector module": [[148, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "sparknlp.annotator.sentiment.vivekn_sentiment module": [[149, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "sparknlp.annotator.seq2seq package": [[150, "sparknlp-annotator-seq2seq-package"]], "sparknlp.annotator.seq2seq.auto_gguf_model module": [[151, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model module": [[152, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "sparknlp.annotator.seq2seq.bart_transformer module": [[153, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "sparknlp.annotator.seq2seq.cohere_transformer module": [[154, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "sparknlp.annotator.seq2seq.cpm_transformer module": [[155, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "sparknlp.annotator.seq2seq.gpt2_transformer module": [[156, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "sparknlp.annotator.seq2seq.llama2_transformer module": [[157, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "sparknlp.annotator.seq2seq.llama3_transformer module": [[158, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "sparknlp.annotator.seq2seq.m2m100_transformer module": [[159, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "sparknlp.annotator.seq2seq.marian_transformer module": [[160, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "sparknlp.annotator.seq2seq.mistral_transformer module": [[161, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "sparknlp.annotator.seq2seq.nllb_transformer module": [[162, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "sparknlp.annotator.seq2seq.olmo_transformer module": [[163, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "sparknlp.annotator.seq2seq.phi2_transformer module": [[164, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "sparknlp.annotator.seq2seq.phi3_transformer module": [[165, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "sparknlp.annotator.seq2seq.qwen_transformer module": [[166, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "sparknlp.annotator.seq2seq.starcoder_transformer module": [[167, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "sparknlp.annotator.seq2seq.t5_transformer module": [[168, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "sparknlp.annotator.similarity package": [[169, "sparknlp-annotator-similarity-package"]], "sparknlp.annotator.similarity.document_similarity_ranker module": [[170, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "sparknlp.annotator.spell_check package": [[171, "sparknlp-annotator-spell-check-package"]], "sparknlp.annotator.spell_check.context_spell_checker module": [[172, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "sparknlp.annotator.spell_check.norvig_sweeting module": [[173, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "sparknlp.annotator.spell_check.symmetric_delete module": [[174, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "sparknlp.annotator.stemmer module": [[175, "module-sparknlp.annotator.stemmer"]], "sparknlp.annotator.stop_words_cleaner module": [[176, "module-sparknlp.annotator.stop_words_cleaner"]], "sparknlp.annotator.tf_ner_dl_graph_builder module": [[177, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token package": [[178, "sparknlp-annotator-token-package"]], "sparknlp.annotator.token.chunk_tokenizer module": [[179, "module-sparknlp.annotator.token.chunk_tokenizer"]], "sparknlp.annotator.token.recursive_tokenizer module": [[180, "module-sparknlp.annotator.token.recursive_tokenizer"]], "sparknlp.annotator.token.regex_tokenizer module": [[181, "module-sparknlp.annotator.token.regex_tokenizer"]], "sparknlp.annotator.token.tokenizer module": [[182, "module-sparknlp.annotator.token.tokenizer"]], "sparknlp.annotator.token2_chunk module": [[183, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws package": [[184, "sparknlp-annotator-ws-package"]], "sparknlp.annotator.ws.word_segmenter module": [[185, "module-sparknlp.annotator.ws.word_segmenter"]], "sparknlp.base package": [[186, "sparknlp-base-package"]], "sparknlp.base.audio_assembler module": [[187, "module-sparknlp.base.audio_assembler"]], "sparknlp.base.doc2_chunk module": [[188, "module-sparknlp.base.doc2_chunk"]], "sparknlp.base.document_assembler module": [[189, "module-sparknlp.base.document_assembler"]], "sparknlp.base.embeddings_finisher module": [[190, "module-sparknlp.base.embeddings_finisher"]], "sparknlp.base.finisher module": [[191, "module-sparknlp.base.finisher"]], "sparknlp.base.graph_finisher module": [[192, "module-sparknlp.base.graph_finisher"]], "sparknlp.base.has_recursive_fit module": [[193, "module-sparknlp.base.has_recursive_fit"]], "sparknlp.base.has_recursive_transform module": [[194, "module-sparknlp.base.has_recursive_transform"]], "sparknlp.base.image_assembler module": [[195, "module-sparknlp.base.image_assembler"]], "sparknlp.base.light_pipeline module": [[196, "module-sparknlp.base.light_pipeline"]], "sparknlp.base.multi_document_assembler module": [[197, "module-sparknlp.base.multi_document_assembler"]], "sparknlp.base.prompt_assembler module": [[198, "module-sparknlp.base.prompt_assembler"]], "sparknlp.base.recursive_pipeline module": [[199, "module-sparknlp.base.recursive_pipeline"]], "sparknlp.base.table_assembler module": [[200, "module-sparknlp.base.table_assembler"]], "sparknlp.base.token_assembler module": [[201, "module-sparknlp.base.token_assembler"]], "sparknlp.common package": [[202, "sparknlp-common-package"]], "sparknlp.common.annotator_approach module": [[203, "module-sparknlp.common.annotator_approach"]], "sparknlp.common.annotator_model module": [[204, "module-sparknlp.common.annotator_model"]], "sparknlp.common.annotator_properties module": [[205, "module-sparknlp.common.annotator_properties"]], "sparknlp.common.annotator_type module": [[206, "module-sparknlp.common.annotator_type"]], "sparknlp.common.coverage_result module": [[207, "module-sparknlp.common.coverage_result"]], "sparknlp.common.match_strategy module": [[208, "module-sparknlp.common.match_strategy"]], "sparknlp.common.properties module": [[209, "module-sparknlp.common.properties"]], "sparknlp.common.read_as module": [[210, "module-sparknlp.common.read_as"]], "sparknlp.common.recursive_annotator_approach module": [[211, "module-sparknlp.common.recursive_annotator_approach"]], "sparknlp.common.storage module": [[212, "module-sparknlp.common.storage"]], "sparknlp.common.utils module": [[213, "module-sparknlp.common.utils"]], "sparknlp.functions module": [[214, "module-sparknlp.functions"]], "sparknlp.internal package": [[215, "sparknlp-internal-package"]], "sparknlp.internal.annotator_java_ml module": [[216, "module-sparknlp.internal.annotator_java_ml"]], "sparknlp.internal.annotator_transformer module": [[217, "module-sparknlp.internal.annotator_transformer"]], "sparknlp.internal.extended_java_wrapper module": [[218, "module-sparknlp.internal.extended_java_wrapper"]], "sparknlp.internal.params_getters_setters module": [[219, "module-sparknlp.internal.params_getters_setters"]], "sparknlp.internal.recursive module": [[220, "module-sparknlp.internal.recursive"]], "sparknlp.logging package": [[221, "sparknlp-logging-package"]], "sparknlp.logging.comet module": [[222, "module-sparknlp.logging.comet"]], "sparknlp.pretrained package": [[223, "sparknlp-pretrained-package"]], "sparknlp.pretrained.pretrained_pipeline module": [[224, "module-sparknlp.pretrained.pretrained_pipeline"]], "sparknlp.pretrained.resource_downloader module": [[225, "module-sparknlp.pretrained.resource_downloader"]], "sparknlp.pretrained.utils module": [[226, "module-sparknlp.pretrained.utils"]], "sparknlp.reader package": [[227, "sparknlp-reader-package"]], "sparknlp.reader.pdf_to_text module": [[228, "module-sparknlp.reader.pdf_to_text"]], "sparknlp.reader.sparknlp_reader module": [[229, "module-sparknlp.reader.sparknlp_reader"]], "sparknlp.training package": [[230, "sparknlp-training-package"]], "sparknlp.training.conll module": [[231, "module-sparknlp.training.conll"]], "sparknlp.training.conllu module": [[232, "module-sparknlp.training.conllu"]], "sparknlp.training.pos module": [[233, "module-sparknlp.training.pos"]], "sparknlp.training.pub_tator module": [[234, "module-sparknlp.training.pub_tator"]], "sparknlp.training.spacy_to_annotation module": [[235, "module-sparknlp.training.spacy_to_annotation"]], "sparknlp.training.tfgraphs module": [[236, "sparknlp-training-tfgraphs-module"]], "sparknlp.upload_to_hub module": [[237, "module-sparknlp.upload_to_hub"]], "sparknlp.util module": [[238, "module-sparknlp.util"]], "Getting Started": [[239, "getting-started"]], "Spark NLP Cheat Sheet": [[239, "spark-nlp-cheat-sheet"]], "Requirements": [[239, "requirements"]], "Installation": [[239, "installation"], [242, "installation"]], "Using Conda": [[239, "using-conda"]], "Using Virtualenv": [[239, "using-virtualenv"]], "Starting a Spark NLP Session from Python": [[239, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[240, "spark-nlp-documentation"]], "Content": [[240, "content"]], "API Reference": [[241, "api-reference"]], "Modules": [[241, "modules"]], "Comet - A meta machine learning platform": [[242, "comet-a-meta-machine-learning-platform"]], "Using Comet with Spark NLP": [[242, "using-comet-with-spark-nlp"]], "Logging Pipeline Parameters": [[242, "logging-pipeline-parameters"]], "Logging Evaluation Metrics": [[242, "logging-evaluation-metrics"]], "Logging Visualizations": [[242, "logging-visualizations"]], "Running An Offline Experiment": [[242, "running-an-offline-experiment"]], "MLflow - a platform for the machine learning lifecycle": [[243, "mlflow-a-platform-for-the-machine-learning-lifecycle"]], "Third Party Projects": [[244, "third-party-projects"]], "Logging": [[244, "logging"]], "Annotation": [[245, "annotation"]], "Annotators": [[246, "annotators"]], "Annotator Approaches": [[246, "annotator-approaches"]], "Annotator Models": [[246, "annotator-models"]], "Note": [[246, "note"]], "Pretrained Models": [[246, "pretrained-models"]], "Common Functions": [[246, "common-functions"]], "Available Annotators": [[246, "available-annotators"]], "Setting up your own pipeline": [[247, "setting-up-your-own-pipeline"]], "Annotator types": [[247, "annotator-types"]], "Necessary imports": [[247, "necessary-imports"]], "Constructing the Pipeline": [[247, "constructing-the-pipeline"]], "DocumentAssembler: Getting data in": [[247, "documentassembler-getting-data-in"]], "Sentence detection and tokenization": [[247, "sentence-detection-and-tokenization"]], "Finisher: Getting data out": [[247, "finisher-getting-data-out"]], "Putting it all together as a Spark ML Pipeline": [[247, "putting-it-all-together-as-a-spark-ml-pipeline"]], "Helper Functions": [[248, "helper-functions"]], "User Guide": [[249, "user-guide"]], "Light Pipelines": [[250, "light-pipelines"]], "Converting PipelineModels": [[250, "converting-pipelinemodels"]], "Pretrained Light Pipelines": [[250, "pretrained-light-pipelines"]], "Pretrained Pipelines": [[251, "pretrained-pipelines"]], "Downloading and using a pretrained pipeline": [[251, "downloading-and-using-a-pretrained-pipeline"]], "As a Spark ML Pipeline": [[251, "as-a-spark-ml-pipeline"]], "As a Spark NLP LightPipeline": [[251, "as-a-spark-nlp-lightpipeline"]], "Available Pipelines": [[251, "available-pipelines"]], "Loading datasets for training": [[252, "loading-datasets-for-training"]], "POS Dataset": [[252, "pos-dataset"]], "CoNLL Dataset": [[252, "conll-dataset"]], "CoNLLU Dataset": [[252, "conllu-dataset"]], "Spell Checkers Dataset": [[252, "spell-checkers-dataset"]], "PubTator Dataset": [[252, "pubtator-dataset"]]}, "indexentries": {"module": [[1, "module-sparknlp"], [2, "module-sparknlp.annotation"], [3, "module-sparknlp.annotation_audio"], [4, "module-sparknlp.annotation_image"], [5, "module-sparknlp.annotator"], [6, "module-sparknlp.annotator.audio"], [7, "module-sparknlp.annotator.audio.hubert_for_ctc"], [8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"], [9, "module-sparknlp.annotator.audio.whisper_for_ctc"], [10, "module-sparknlp.annotator.chunk2_doc"], [11, "module-sparknlp.annotator.chunker"], [12, "module-sparknlp.annotator.classifier_dl"], [13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"], [14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"], [15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"], [16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"], [17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"], [18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"], [19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"], [20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"], [21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"], [22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"], [23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"], [24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"], [25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"], [26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"], [27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"], [28, "module-sparknlp.annotator.classifier_dl.classifier_dl"], [29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"], [30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"], [31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"], [32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"], [33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"], [34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"], [35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"], [36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"], [37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"], [38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"], [39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"], [40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"], [41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"], [42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"], [43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"], [44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"], [45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"], [46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"], [47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"], [48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"], [49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"], [50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"], [51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"], [52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"], [53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"], [54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"], [55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"], [56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"], [57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"], [58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"], [59, "module-sparknlp.annotator.cleaners"], [60, "module-sparknlp.annotator.cleaners.cleaner"], [61, "module-sparknlp.annotator.cleaners.extractor"], [62, "module-sparknlp.annotator.coref"], [63, "module-sparknlp.annotator.coref.spanbert_coref"], [64, "module-sparknlp.annotator.cv"], [65, "module-sparknlp.annotator.cv.blip_for_question_answering"], [66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"], [67, "module-sparknlp.annotator.cv.convnext_for_image_classification"], [68, "module-sparknlp.annotator.cv.janus_for_multimodal"], [69, "module-sparknlp.annotator.cv.llava_for_multimodal"], [70, "module-sparknlp.annotator.cv.mllama_for_multimodal"], [71, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"], [72, "module-sparknlp.annotator.cv.qwen2vl_transformer"], [73, "module-sparknlp.annotator.cv.swin_for_image_classification"], [74, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"], [75, "module-sparknlp.annotator.cv.vit_for_image_classification"], [76, "module-sparknlp.annotator.date2_chunk"], [77, "module-sparknlp.annotator.dependency"], [78, "module-sparknlp.annotator.dependency.dependency_parser"], [79, "module-sparknlp.annotator.dependency.typed_dependency_parser"], [80, "module-sparknlp.annotator.document_character_text_splitter"], [81, "module-sparknlp.annotator.document_normalizer"], [82, "module-sparknlp.annotator.document_token_splitter"], [84, "module-sparknlp.annotator.embeddings"], [85, "module-sparknlp.annotator.embeddings.albert_embeddings"], [86, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"], [87, "module-sparknlp.annotator.embeddings.bert_embeddings"], [88, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"], [89, "module-sparknlp.annotator.embeddings.bge_embeddings"], [90, "module-sparknlp.annotator.embeddings.camembert_embeddings"], [91, "module-sparknlp.annotator.embeddings.chunk_embeddings"], [92, "module-sparknlp.annotator.embeddings.deberta_embeddings"], [93, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"], [94, "module-sparknlp.annotator.embeddings.doc2vec"], [95, "module-sparknlp.annotator.embeddings.e5_embeddings"], [96, "module-sparknlp.annotator.embeddings.elmo_embeddings"], [97, "module-sparknlp.annotator.embeddings.instructor_embeddings"], [98, "module-sparknlp.annotator.embeddings.longformer_embeddings"], [99, "module-sparknlp.annotator.embeddings.mpnet_embeddings"], [100, "module-sparknlp.annotator.embeddings.mxbai_embeddings"], [101, "module-sparknlp.annotator.embeddings.nomic_embeddings"], [102, "module-sparknlp.annotator.embeddings.roberta_embeddings"], [103, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"], [104, "module-sparknlp.annotator.embeddings.sentence_embeddings"], [105, "module-sparknlp.annotator.embeddings.snowflake_embeddings"], [106, "module-sparknlp.annotator.embeddings.uae_embeddings"], [107, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"], [108, "module-sparknlp.annotator.embeddings.word2vec"], [109, "module-sparknlp.annotator.embeddings.word_embeddings"], [110, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"], [111, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"], [112, "module-sparknlp.annotator.embeddings.xlnet_embeddings"], [113, "module-sparknlp.annotator.er"], [114, "module-sparknlp.annotator.er.entity_ruler"], [115, "module-sparknlp.annotator.graph_extraction"], [116, "module-sparknlp.annotator.keyword_extraction"], [117, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"], [118, "module-sparknlp.annotator.ld_dl"], [119, "module-sparknlp.annotator.ld_dl.language_detector_dl"], [120, "module-sparknlp.annotator.lemmatizer"], [121, "module-sparknlp.annotator.matcher"], [122, "module-sparknlp.annotator.matcher.big_text_matcher"], [123, "module-sparknlp.annotator.matcher.date_matcher"], [124, "module-sparknlp.annotator.matcher.multi_date_matcher"], [125, "module-sparknlp.annotator.matcher.regex_matcher"], [126, "module-sparknlp.annotator.matcher.text_matcher"], [127, "module-sparknlp.annotator.n_gram_generator"], [128, "module-sparknlp.annotator.ner"], [129, "module-sparknlp.annotator.ner.ner_approach"], [130, "module-sparknlp.annotator.ner.ner_converter"], [131, "module-sparknlp.annotator.ner.ner_crf"], [132, "module-sparknlp.annotator.ner.ner_dl"], [133, "module-sparknlp.annotator.ner.ner_overwriter"], [134, "module-sparknlp.annotator.ner.zero_shot_ner_model"], [135, "module-sparknlp.annotator.normalizer"], [136, "module-sparknlp.annotator.openai"], [137, "module-sparknlp.annotator.openai.openai_completion"], [138, "module-sparknlp.annotator.openai.openai_embeddings"], [139, "module-sparknlp.annotator.param"], [140, "module-sparknlp.annotator.param.classifier_encoder"], [141, "module-sparknlp.annotator.param.evaluation_dl_params"], [142, "module-sparknlp.annotator.pos"], [143, "module-sparknlp.annotator.pos.perceptron"], [144, "module-sparknlp.annotator.sentence"], [145, "module-sparknlp.annotator.sentence.sentence_detector"], [146, "module-sparknlp.annotator.sentence.sentence_detector_dl"], [147, "module-sparknlp.annotator.sentiment"], [148, "module-sparknlp.annotator.sentiment.sentiment_detector"], [149, "module-sparknlp.annotator.sentiment.vivekn_sentiment"], [150, "module-sparknlp.annotator.seq2seq"], [151, "module-sparknlp.annotator.seq2seq.auto_gguf_model"], [152, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"], [153, "module-sparknlp.annotator.seq2seq.bart_transformer"], [154, "module-sparknlp.annotator.seq2seq.cohere_transformer"], [155, "module-sparknlp.annotator.seq2seq.cpm_transformer"], [156, "module-sparknlp.annotator.seq2seq.gpt2_transformer"], [157, "module-sparknlp.annotator.seq2seq.llama2_transformer"], [158, "module-sparknlp.annotator.seq2seq.llama3_transformer"], [159, "module-sparknlp.annotator.seq2seq.m2m100_transformer"], [160, "module-sparknlp.annotator.seq2seq.marian_transformer"], [161, "module-sparknlp.annotator.seq2seq.mistral_transformer"], [162, "module-sparknlp.annotator.seq2seq.nllb_transformer"], [163, "module-sparknlp.annotator.seq2seq.olmo_transformer"], [164, "module-sparknlp.annotator.seq2seq.phi2_transformer"], [165, "module-sparknlp.annotator.seq2seq.phi3_transformer"], [166, "module-sparknlp.annotator.seq2seq.qwen_transformer"], [167, "module-sparknlp.annotator.seq2seq.starcoder_transformer"], [168, "module-sparknlp.annotator.seq2seq.t5_transformer"], [169, "module-sparknlp.annotator.similarity"], [170, "module-sparknlp.annotator.similarity.document_similarity_ranker"], [171, "module-sparknlp.annotator.spell_check"], [172, "module-sparknlp.annotator.spell_check.context_spell_checker"], [173, "module-sparknlp.annotator.spell_check.norvig_sweeting"], [174, "module-sparknlp.annotator.spell_check.symmetric_delete"], [175, "module-sparknlp.annotator.stemmer"], [176, "module-sparknlp.annotator.stop_words_cleaner"], [177, "module-sparknlp.annotator.tf_ner_dl_graph_builder"], [178, "module-sparknlp.annotator.token"], [179, "module-sparknlp.annotator.token.chunk_tokenizer"], [180, "module-sparknlp.annotator.token.recursive_tokenizer"], [181, "module-sparknlp.annotator.token.regex_tokenizer"], [182, "module-sparknlp.annotator.token.tokenizer"], [183, "module-sparknlp.annotator.token2_chunk"], [184, "module-sparknlp.annotator.ws"], [185, "module-sparknlp.annotator.ws.word_segmenter"], [186, "module-sparknlp.base"], [187, "module-sparknlp.base.audio_assembler"], [188, "module-sparknlp.base.doc2_chunk"], [189, "module-sparknlp.base.document_assembler"], [190, "module-sparknlp.base.embeddings_finisher"], [191, "module-sparknlp.base.finisher"], [192, "module-sparknlp.base.graph_finisher"], [193, "module-sparknlp.base.has_recursive_fit"], [194, "module-sparknlp.base.has_recursive_transform"], [195, "module-sparknlp.base.image_assembler"], [196, "module-sparknlp.base.light_pipeline"], [197, "module-sparknlp.base.multi_document_assembler"], [198, "module-sparknlp.base.prompt_assembler"], [199, "module-sparknlp.base.recursive_pipeline"], [200, "module-sparknlp.base.table_assembler"], [201, "module-sparknlp.base.token_assembler"], [202, "module-sparknlp.common"], [203, "module-sparknlp.common.annotator_approach"], [204, "module-sparknlp.common.annotator_model"], [205, "module-sparknlp.common.annotator_properties"], [206, "module-sparknlp.common.annotator_type"], [207, "module-sparknlp.common.coverage_result"], [208, "module-sparknlp.common.match_strategy"], [209, "module-sparknlp.common.properties"], [210, "module-sparknlp.common.read_as"], [211, "module-sparknlp.common.recursive_annotator_approach"], [212, "module-sparknlp.common.storage"], [213, "module-sparknlp.common.utils"], [214, "module-sparknlp.functions"], [215, "module-sparknlp.internal"], [216, "module-sparknlp.internal.annotator_java_ml"], [217, "module-sparknlp.internal.annotator_transformer"], [218, "module-sparknlp.internal.extended_java_wrapper"], [219, "module-sparknlp.internal.params_getters_setters"], [220, "module-sparknlp.internal.recursive"], [221, "module-sparknlp.logging"], [222, "module-sparknlp.logging.comet"], [223, "module-sparknlp.pretrained"], [224, "module-sparknlp.pretrained.pretrained_pipeline"], [225, "module-sparknlp.pretrained.resource_downloader"], [226, "module-sparknlp.pretrained.utils"], [227, "module-sparknlp.reader"], [228, "module-sparknlp.reader.pdf_to_text"], [229, "module-sparknlp.reader.sparknlp_reader"], [230, "module-sparknlp.training"], [231, "module-sparknlp.training.conll"], [232, "module-sparknlp.training.conllu"], [233, "module-sparknlp.training.pos"], [234, "module-sparknlp.training.pub_tator"], [235, "module-sparknlp.training.spacy_to_annotation"], [237, "module-sparknlp.upload_to_hub"], [238, "module-sparknlp.util"]], "read() (in module sparknlp)": [[1, "sparknlp.read"]], "sparknlp": [[1, "module-sparknlp"]], "start() (in module sparknlp)": [[1, "sparknlp.start"]], "version() (in module sparknlp)": [[1, "sparknlp.version"]], "annotation (class in sparknlp.annotation)": [[2, "sparknlp.annotation.Annotation"]], "arraytype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.arrayType"]], "copy() (annotation method)": [[2, "sparknlp.annotation.Annotation.copy"]], "datatype() (annotation static method)": [[2, "sparknlp.annotation.Annotation.dataType"]], "fromrow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.fromRow"]], "sparknlp.annotation": [[2, "module-sparknlp.annotation"]], "torow() (annotation static method)": [[2, "sparknlp.annotation.Annotation.toRow"]], "annotationaudio (class in sparknlp.annotation_audio)": [[3, "sparknlp.annotation_audio.AnnotationAudio"]], "copy() (annotationaudio method)": [[3, "sparknlp.annotation_audio.AnnotationAudio.copy"]], "sparknlp.annotation_audio": [[3, "module-sparknlp.annotation_audio"]], "annotationimage (class in sparknlp.annotation_image)": [[4, "sparknlp.annotation_image.AnnotationImage"]], "copy() (annotationimage method)": [[4, "sparknlp.annotation_image.AnnotationImage.copy"]], "sparknlp.annotation_image": [[4, "module-sparknlp.annotation_image"]], "sparknlp.annotator": [[5, "module-sparknlp.annotator"]], "sparknlp.annotator.audio": [[6, "module-sparknlp.annotator.audio"]], "hubertforctc (class in sparknlp.annotator.audio.hubert_for_ctc)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC"]], "configprotobytes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.configProtoBytes"]], "inputannotatortypes (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.loadSavedModel"]], "name (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.name"]], "outputannotatortype (hubertforctc attribute)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.outputAnnotatorType"]], "pretrained() (hubertforctc static method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.pretrained"]], "setconfigprotobytes() (hubertforctc method)": [[7, "sparknlp.annotator.audio.hubert_for_ctc.HubertForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.hubert_for_ctc": [[7, "module-sparknlp.annotator.audio.hubert_for_ctc"]], "wav2vec2forctc (class in sparknlp.annotator.audio.wav2vec2_for_ctc)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC"]], "configprotobytes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.configProtoBytes"]], "inputannotatortypes (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.inputAnnotatorTypes"]], "loadsavedmodel() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.loadSavedModel"]], "name (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.name"]], "outputannotatortype (wav2vec2forctc attribute)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.outputAnnotatorType"]], "pretrained() (wav2vec2forctc static method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.pretrained"]], "setconfigprotobytes() (wav2vec2forctc method)": [[8, "sparknlp.annotator.audio.wav2vec2_for_ctc.Wav2Vec2ForCTC.setConfigProtoBytes"]], "sparknlp.annotator.audio.wav2vec2_for_ctc": [[8, "module-sparknlp.annotator.audio.wav2vec2_for_ctc"]], "whisperforctc (class in sparknlp.annotator.audio.whisper_for_ctc)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC"]], "configprotobytes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.configProtoBytes"]], "getismultilingual() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getIsMultilingual"]], "getlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.getLanguage"]], "inputannotatortypes (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.inputAnnotatorTypes"]], "ismultilingual (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.isMultilingual"]], "language (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.language"]], "loadsavedmodel() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.loadSavedModel"]], "name (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.name"]], "outputannotatortype (whisperforctc attribute)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.outputAnnotatorType"]], "pretrained() (whisperforctc static method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.pretrained"]], "setconfigprotobytes() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setConfigProtoBytes"]], "setlanguage() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setLanguage"]], "settask() (whisperforctc method)": [[9, "sparknlp.annotator.audio.whisper_for_ctc.WhisperForCTC.setTask"]], "sparknlp.annotator.audio.whisper_for_ctc": [[9, "module-sparknlp.annotator.audio.whisper_for_ctc"]], "chunk2doc (class in sparknlp.annotator.chunk2_doc)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc"]], "inputannotatortypes (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.inputAnnotatorTypes"]], "name (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.name"]], "outputannotatortype (chunk2doc attribute)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.outputAnnotatorType"]], "setparams() (chunk2doc method)": [[10, "sparknlp.annotator.chunk2_doc.Chunk2Doc.setParams"]], "sparknlp.annotator.chunk2_doc": [[10, "module-sparknlp.annotator.chunk2_doc"]], "chunker (class in sparknlp.annotator.chunker)": [[11, "sparknlp.annotator.chunker.Chunker"]], "inputannotatortypes (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.inputAnnotatorTypes"]], "name (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.name"]], "outputannotatortype (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.outputAnnotatorType"]], "regexparsers (chunker attribute)": [[11, "sparknlp.annotator.chunker.Chunker.regexParsers"]], "setregexparsers() (chunker method)": [[11, "sparknlp.annotator.chunker.Chunker.setRegexParsers"]], "sparknlp.annotator.chunker": [[11, "module-sparknlp.annotator.chunker"]], "sparknlp.annotator.classifier_dl": [[12, "module-sparknlp.annotator.classifier_dl"]], "albertformultiplechoice (class in sparknlp.annotator.classifier_dl.albert_for_multiple_choice)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice"]], "choicesdelimiter (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.loadSavedModel"]], "name (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.name"]], "outputannotatortype (albertformultiplechoice attribute)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.outputAnnotatorType"]], "pretrained() (albertformultiplechoice static method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (albertformultiplechoice method)": [[13, "sparknlp.annotator.classifier_dl.albert_for_multiple_choice.AlbertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.albert_for_multiple_choice": [[13, "module-sparknlp.annotator.classifier_dl.albert_for_multiple_choice"]], "albertforquestionanswering (class in sparknlp.annotator.classifier_dl.albert_for_question_answering)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering"]], "coalescesentences (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.coalesceSentences"]], "configprotobytes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.loadSavedModel"]], "name (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.name"]], "outputannotatortype (albertforquestionanswering attribute)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (albertforquestionanswering static method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (albertforquestionanswering method)": [[14, "sparknlp.annotator.classifier_dl.albert_for_question_answering.AlbertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_question_answering": [[14, "module-sparknlp.annotator.classifier_dl.albert_for_question_answering"]], "albertforsequenceclassification (class in sparknlp.annotator.classifier_dl.albert_for_sequence_classification)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification"]], "coalescesentences (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.coalesceSentences"]], "configprotobytes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.configProtoBytes"]], "getclasses() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.getClasses"]], "inputannotatortypes (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.loadSavedModel"]], "name (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.name"]], "outputannotatortype (albertforsequenceclassification attribute)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.outputAnnotatorType"]], "pretrained() (albertforsequenceclassification static method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.pretrained"]], "setcoalescesentences() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforsequenceclassification method)": [[15, "sparknlp.annotator.classifier_dl.albert_for_sequence_classification.AlbertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_sequence_classification": [[15, "module-sparknlp.annotator.classifier_dl.albert_for_sequence_classification"]], "albertfortokenclassification (class in sparknlp.annotator.classifier_dl.albert_for_token_classification)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification"]], "configprotobytes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.configProtoBytes"]], "getclasses() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.getClasses"]], "inputannotatortypes (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.loadSavedModel"]], "name (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.name"]], "outputannotatortype (albertfortokenclassification attribute)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.outputAnnotatorType"]], "pretrained() (albertfortokenclassification static method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.pretrained"]], "setconfigprotobytes() (albertfortokenclassification method)": [[16, "sparknlp.annotator.classifier_dl.albert_for_token_classification.AlbertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_token_classification": [[16, "module-sparknlp.annotator.classifier_dl.albert_for_token_classification"]], "albertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification"]], "coalescesentences (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.coalesceSentences"]], "configprotobytes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.configProtoBytes"]], "getclasses() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.getClasses"]], "inputannotatortypes (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.loadSavedModel"]], "name (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.name"]], "outputannotatortype (albertforzeroshotclassification attribute)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (albertforzeroshotclassification static method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.pretrained"]], "setcoalescesentences() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (albertforzeroshotclassification method)": [[17, "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification.AlbertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification": [[17, "module-sparknlp.annotator.classifier_dl.albert_for_zero_shot_classification"]], "bartforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification"]], "coalescesentences (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.coalesceSentences"]], "configprotobytes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.configProtoBytes"]], "getclasses() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.getClasses"]], "inputannotatortypes (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.loadSavedModel"]], "maxsentencelength (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.maxSentenceLength"]], "name (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.name"]], "outputannotatortype (bartforzeroshotclassification attribute)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bartforzeroshotclassification static method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.pretrained"]], "setcoalescesentences() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (bartforzeroshotclassification method)": [[18, "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification.BartForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification": [[18, "module-sparknlp.annotator.classifier_dl.bart_for_zero_shot_classification"]], "bertformultiplechoice (class in sparknlp.annotator.classifier_dl.bert_for_multiple_choice)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice"]], "choicesdelimiter (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.loadSavedModel"]], "name (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.name"]], "outputannotatortype (bertformultiplechoice attribute)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.outputAnnotatorType"]], "pretrained() (bertformultiplechoice static method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (bertformultiplechoice method)": [[19, "sparknlp.annotator.classifier_dl.bert_for_multiple_choice.BertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.bert_for_multiple_choice": [[19, "module-sparknlp.annotator.classifier_dl.bert_for_multiple_choice"]], "bertforquestionanswering (class in sparknlp.annotator.classifier_dl.bert_for_question_answering)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering"]], "coalescesentences (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.coalesceSentences"]], "configprotobytes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.loadSavedModel"]], "name (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.name"]], "outputannotatortype (bertforquestionanswering attribute)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (bertforquestionanswering static method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (bertforquestionanswering method)": [[20, "sparknlp.annotator.classifier_dl.bert_for_question_answering.BertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_question_answering": [[20, "module-sparknlp.annotator.classifier_dl.bert_for_question_answering"]], "bertforsequenceclassification (class in sparknlp.annotator.classifier_dl.bert_for_sequence_classification)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification"]], "coalescesentences (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.coalesceSentences"]], "configprotobytes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.configProtoBytes"]], "getclasses() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.getClasses"]], "inputannotatortypes (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.loadSavedModel"]], "name (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.name"]], "outputannotatortype (bertforsequenceclassification attribute)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.outputAnnotatorType"]], "pretrained() (bertforsequenceclassification static method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.pretrained"]], "setcoalescesentences() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforsequenceclassification method)": [[21, "sparknlp.annotator.classifier_dl.bert_for_sequence_classification.BertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_sequence_classification": [[21, "module-sparknlp.annotator.classifier_dl.bert_for_sequence_classification"]], "bertfortokenclassification (class in sparknlp.annotator.classifier_dl.bert_for_token_classification)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification"]], "configprotobytes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.configProtoBytes"]], "getclasses() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.getClasses"]], "inputannotatortypes (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.loadSavedModel"]], "name (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.name"]], "outputannotatortype (bertfortokenclassification attribute)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.outputAnnotatorType"]], "pretrained() (bertfortokenclassification static method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.pretrained"]], "setconfigprotobytes() (bertfortokenclassification method)": [[22, "sparknlp.annotator.classifier_dl.bert_for_token_classification.BertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_token_classification": [[22, "module-sparknlp.annotator.classifier_dl.bert_for_token_classification"]], "bertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification"]], "coalescesentences (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.coalesceSentences"]], "configprotobytes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.configProtoBytes"]], "getclasses() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.getClasses"]], "inputannotatortypes (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.loadSavedModel"]], "name (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.name"]], "outputannotatortype (bertforzeroshotclassification attribute)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (bertforzeroshotclassification static method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.pretrained"]], "setcoalescesentences() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (bertforzeroshotclassification method)": [[23, "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification.BertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification": [[23, "module-sparknlp.annotator.classifier_dl.bert_for_zero_shot_classification"]], "camembertforquestionanswering (class in sparknlp.annotator.classifier_dl.camembert_for_question_answering)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering"]], "coalescesentences (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.loadSavedModel"]], "name (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.name"]], "outputannotatortype (camembertforquestionanswering attribute)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (camembertforquestionanswering static method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (camembertforquestionanswering method)": [[24, "sparknlp.annotator.classifier_dl.camembert_for_question_answering.CamemBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_question_answering": [[24, "module-sparknlp.annotator.classifier_dl.camembert_for_question_answering"]], "camembertforsequenceclassification (class in sparknlp.annotator.classifier_dl.camembert_for_sequence_classification)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification"]], "coalescesentences (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.coalesceSentences"]], "configprotobytes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.configProtoBytes"]], "getclasses() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.getClasses"]], "inputannotatortypes (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.loadSavedModel"]], "name (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.name"]], "outputannotatortype (camembertforsequenceclassification attribute)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (camembertforsequenceclassification static method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.pretrained"]], "setcoalescesentences() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforsequenceclassification method)": [[25, "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification.CamemBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_sequence_classification": [[25, "module-sparknlp.annotator.classifier_dl.camembert_for_sequence_classification"]], "camembertfortokenclassification (class in sparknlp.annotator.classifier_dl.camembert_for_token_classification)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification"]], "configprotobytes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.configProtoBytes"]], "getclasses() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.getClasses"]], "inputannotatortypes (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.loadSavedModel"]], "name (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.name"]], "outputannotatortype (camembertfortokenclassification attribute)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.outputAnnotatorType"]], "pretrained() (camembertfortokenclassification static method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.pretrained"]], "setconfigprotobytes() (camembertfortokenclassification method)": [[26, "sparknlp.annotator.classifier_dl.camembert_for_token_classification.CamemBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_token_classification": [[26, "module-sparknlp.annotator.classifier_dl.camembert_for_token_classification"]], "camembertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification"]], "coalescesentences (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.configProtoBytes"]], "getclasses() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.getClasses"]], "inputannotatortypes (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.loadSavedModel"]], "name (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.name"]], "outputannotatortype (camembertforzeroshotclassification attribute)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (camembertforzeroshotclassification static method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (camembertforzeroshotclassification method)": [[27, "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification.CamemBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification": [[27, "module-sparknlp.annotator.classifier_dl.camembert_for_zero_shot_classification"]], "classifierdlapproach (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach"]], "classifierdlmodel (class in sparknlp.annotator.classifier_dl.classifier_dl)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel"]], "classes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.classes"]], "configprotobytes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.configProtoBytes"]], "dropout (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.dropout"]], "inputannotatortypes (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.inputAnnotatorTypes"]], "name (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.name"]], "outputannotatortype (classifierdlapproach attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (classifierdlmodel attribute)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.outputAnnotatorType"]], "pretrained() (classifierdlmodel static method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.pretrained"]], "setconfigprotobytes() (classifierdlmodel method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLModel.setConfigProtoBytes"]], "setdropout() (classifierdlapproach method)": [[28, "sparknlp.annotator.classifier_dl.classifier_dl.ClassifierDLApproach.setDropout"]], "sparknlp.annotator.classifier_dl.classifier_dl": [[28, "module-sparknlp.annotator.classifier_dl.classifier_dl"]], "debertaforquestionanswering (class in sparknlp.annotator.classifier_dl.deberta_for_question_answering)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering"]], "coalescesentences (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.loadSavedModel"]], "name (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.name"]], "outputannotatortype (debertaforquestionanswering attribute)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (debertaforquestionanswering static method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (debertaforquestionanswering method)": [[29, "sparknlp.annotator.classifier_dl.deberta_for_question_answering.DeBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_question_answering": [[29, "module-sparknlp.annotator.classifier_dl.deberta_for_question_answering"]], "debertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.deberta_for_sequence_classification)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification"]], "coalescesentences (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.configProtoBytes"]], "getclasses() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.getClasses"]], "inputannotatortypes (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.loadSavedModel"]], "name (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.name"]], "outputannotatortype (debertaforsequenceclassification attribute)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (debertaforsequenceclassification static method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforsequenceclassification method)": [[30, "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification.DeBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_sequence_classification": [[30, "module-sparknlp.annotator.classifier_dl.deberta_for_sequence_classification"]], "debertafortokenclassification (class in sparknlp.annotator.classifier_dl.deberta_for_token_classification)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification"]], "configprotobytes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.configProtoBytes"]], "getclasses() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.getClasses"]], "inputannotatortypes (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.loadSavedModel"]], "name (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.name"]], "outputannotatortype (debertafortokenclassification attribute)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (debertafortokenclassification static method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (debertafortokenclassification method)": [[31, "sparknlp.annotator.classifier_dl.deberta_for_token_classification.DeBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_token_classification": [[31, "module-sparknlp.annotator.classifier_dl.deberta_for_token_classification"]], "debertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification"]], "coalescesentences (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.loadSavedModel"]], "name (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.name"]], "outputannotatortype (debertaforzeroshotclassification attribute)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (debertaforzeroshotclassification static method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (debertaforzeroshotclassification method)": [[32, "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification.DeBertaForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification": [[32, "module-sparknlp.annotator.classifier_dl.deberta_for_zero_shot_classification"]], "distilbertforquestionanswering (class in sparknlp.annotator.classifier_dl.distil_bert_for_question_answering)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering"]], "coalescesentences (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.coalesceSentences"]], "configprotobytes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.loadSavedModel"]], "name (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.name"]], "outputannotatortype (distilbertforquestionanswering attribute)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.outputAnnotatorType"]], "pretrained() (distilbertforquestionanswering static method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.pretrained"]], "setconfigprotobytes() (distilbertforquestionanswering method)": [[33, "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering.DistilBertForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_question_answering": [[33, "module-sparknlp.annotator.classifier_dl.distil_bert_for_question_answering"]], "distilbertforsequenceclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification"]], "coalescesentences (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.loadSavedModel"]], "name (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.name"]], "outputannotatortype (distilbertforsequenceclassification attribute)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (distilbertforsequenceclassification static method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforsequenceclassification method)": [[34, "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification.DistilBertForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification": [[34, "module-sparknlp.annotator.classifier_dl.distil_bert_for_sequence_classification"]], "distilbertfortokenclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_token_classification)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification"]], "configprotobytes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.configProtoBytes"]], "getclasses() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.getClasses"]], "inputannotatortypes (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.loadSavedModel"]], "name (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.name"]], "outputannotatortype (distilbertfortokenclassification attribute)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.outputAnnotatorType"]], "pretrained() (distilbertfortokenclassification static method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.pretrained"]], "setconfigprotobytes() (distilbertfortokenclassification method)": [[35, "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification.DistilBertForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_token_classification": [[35, "module-sparknlp.annotator.classifier_dl.distil_bert_for_token_classification"]], "distilbertforzeroshotclassification (class in sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification"]], "coalescesentences (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.coalesceSentences"]], "configprotobytes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.configProtoBytes"]], "getclasses() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.getClasses"]], "inputannotatortypes (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.loadSavedModel"]], "name (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.name"]], "outputannotatortype (distilbertforzeroshotclassification attribute)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.outputAnnotatorType"]], "pretrained() (distilbertforzeroshotclassification static method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.pretrained"]], "setcoalescesentences() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (distilbertforzeroshotclassification method)": [[36, "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification.DistilBertForZeroShotClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification": [[36, "module-sparknlp.annotator.classifier_dl.distil_bert_for_zero_shot_classification"]], "distilbertformultiplechoice (class in sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice"]], "choicesdelimiter (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.loadSavedModel"]], "name (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.name"]], "outputannotatortype (distilbertformultiplechoice attribute)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.outputAnnotatorType"]], "pretrained() (distilbertformultiplechoice static method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.pretrained"]], "setchoicesdelimiter() (distilbertformultiplechoice method)": [[37, "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice.DistilBertForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice": [[37, "module-sparknlp.annotator.classifier_dl.distilbert_for_multiple_choice"]], "longformerforquestionanswering (class in sparknlp.annotator.classifier_dl.longformer_for_question_answering)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering"]], "coalescesentences (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.coalesceSentences"]], "configprotobytes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.loadSavedModel"]], "name (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.name"]], "outputannotatortype (longformerforquestionanswering attribute)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.outputAnnotatorType"]], "pretrained() (longformerforquestionanswering static method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.pretrained"]], "setconfigprotobytes() (longformerforquestionanswering method)": [[38, "sparknlp.annotator.classifier_dl.longformer_for_question_answering.LongformerForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_question_answering": [[38, "module-sparknlp.annotator.classifier_dl.longformer_for_question_answering"]], "longformerforsequenceclassification (class in sparknlp.annotator.classifier_dl.longformer_for_sequence_classification)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification"]], "coalescesentences (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.coalesceSentences"]], "configprotobytes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.configProtoBytes"]], "getclasses() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.getClasses"]], "inputannotatortypes (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.loadSavedModel"]], "name (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.name"]], "outputannotatortype (longformerforsequenceclassification attribute)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.outputAnnotatorType"]], "pretrained() (longformerforsequenceclassification static method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.pretrained"]], "setcoalescesentences() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (longformerforsequenceclassification method)": [[39, "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification.LongformerForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_sequence_classification": [[39, "module-sparknlp.annotator.classifier_dl.longformer_for_sequence_classification"]], "longformerfortokenclassification (class in sparknlp.annotator.classifier_dl.longformer_for_token_classification)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification"]], "configprotobytes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.configProtoBytes"]], "getclasses() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.getClasses"]], "inputannotatortypes (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.loadSavedModel"]], "name (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.name"]], "outputannotatortype (longformerfortokenclassification attribute)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.outputAnnotatorType"]], "pretrained() (longformerfortokenclassification static method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.pretrained"]], "setconfigprotobytes() (longformerfortokenclassification method)": [[40, "sparknlp.annotator.classifier_dl.longformer_for_token_classification.LongformerForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.longformer_for_token_classification": [[40, "module-sparknlp.annotator.classifier_dl.longformer_for_token_classification"]], "mpnetforquestionanswering (class in sparknlp.annotator.classifier_dl.mpnet_for_question_answering)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering"]], "inputannotatortypes (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.loadSavedModel"]], "name (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.name"]], "outputannotatortype (mpnetforquestionanswering attribute)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.outputAnnotatorType"]], "pretrained() (mpnetforquestionanswering static method)": [[41, "sparknlp.annotator.classifier_dl.mpnet_for_question_answering.MPNetForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.mpnet_for_question_answering": [[41, "module-sparknlp.annotator.classifier_dl.mpnet_for_question_answering"]], "mpnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification"]], "coalescesentences (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.coalesceSentences"]], "getclasses() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.getClasses"]], "inputannotatortypes (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.loadSavedModel"]], "name (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.name"]], "outputannotatortype (mpnetforsequenceclassification attribute)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.outputAnnotatorType"]], "pretrained() (mpnetforsequenceclassification static method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.pretrained"]], "setcoalescesentences() (mpnetforsequenceclassification method)": [[42, "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification.MPNetForSequenceClassification.setCoalesceSentences"]], "sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification": [[42, "module-sparknlp.annotator.classifier_dl.mpnet_for_sequence_classification"]], "mpnetfortokenclassification (class in sparknlp.annotator.classifier_dl.mpnet_for_token_classification)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification"]], "configprotobytes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.configProtoBytes"]], "getclasses() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.getClasses"]], "inputannotatortypes (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.loadSavedModel"]], "name (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.name"]], "outputannotatortype (mpnetfortokenclassification attribute)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.outputAnnotatorType"]], "pretrained() (mpnetfortokenclassification static method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.pretrained"]], "setconfigprotobytes() (mpnetfortokenclassification method)": [[43, "sparknlp.annotator.classifier_dl.mpnet_for_token_classification.MPNetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.mpnet_for_token_classification": [[43, "module-sparknlp.annotator.classifier_dl.mpnet_for_token_classification"]], "multiclassifierdlapproach (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach"]], "multiclassifierdlmodel (class in sparknlp.annotator.classifier_dl.multi_classifier_dl)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel"]], "classes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.classes"]], "configprotobytes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.configProtoBytes"]], "inputannotatortypes (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.inputAnnotatorTypes"]], "name (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.name"]], "outputannotatortype (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.outputAnnotatorType"]], "pretrained() (multiclassifierdlmodel static method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.pretrained"]], "setconfigprotobytes() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setConfigProtoBytes"]], "setshuffleperepoch() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setShufflePerEpoch"]], "setthreshold() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setThreshold"]], "setthreshold() (multiclassifierdlmodel method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.setThreshold"]], "setverbose() (multiclassifierdlapproach method)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.setVerbose"]], "shuffleperepoch (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.shufflePerEpoch"]], "sparknlp.annotator.classifier_dl.multi_classifier_dl": [[44, "module-sparknlp.annotator.classifier_dl.multi_classifier_dl"]], "threshold (multiclassifierdlapproach attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLApproach.threshold"]], "threshold (multiclassifierdlmodel attribute)": [[44, "sparknlp.annotator.classifier_dl.multi_classifier_dl.MultiClassifierDLModel.threshold"]], "robertaformultiplechoice (class in sparknlp.annotator.classifier_dl.roberta_for_multiple_choice)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice"]], "choicesdelimiter (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.choicesDelimiter"]], "inputannotatortypes (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.loadSavedModel"]], "name (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.name"]], "outputannotatortype (robertaformultiplechoice attribute)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (robertaformultiplechoice static method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.pretrained"]], "setchoicesdelimiter() (robertaformultiplechoice method)": [[45, "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice.RoBertaForMultipleChoice.setChoicesDelimiter"]], "sparknlp.annotator.classifier_dl.roberta_for_multiple_choice": [[45, "module-sparknlp.annotator.classifier_dl.roberta_for_multiple_choice"]], "robertaforquestionanswering (class in sparknlp.annotator.classifier_dl.roberta_for_question_answering)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering"]], "coalescesentences (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.loadSavedModel"]], "name (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.name"]], "outputannotatortype (robertaforquestionanswering attribute)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (robertaforquestionanswering static method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (robertaforquestionanswering method)": [[46, "sparknlp.annotator.classifier_dl.roberta_for_question_answering.RoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_question_answering": [[46, "module-sparknlp.annotator.classifier_dl.roberta_for_question_answering"]], "robertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.roberta_for_sequence_classification)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification"]], "coalescesentences (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.loadSavedModel"]], "name (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.name"]], "outputannotatortype (robertaforsequenceclassification attribute)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (robertaforsequenceclassification static method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforsequenceclassification method)": [[47, "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification.RoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.roberta_for_sequence_classification": [[47, "module-sparknlp.annotator.classifier_dl.roberta_for_sequence_classification"]], "robertafortokenclassification (class in sparknlp.annotator.classifier_dl.roberta_for_token_classification)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification"]], "configprotobytes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.configProtoBytes"]], "getclasses() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.getClasses"]], "inputannotatortypes (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.loadSavedModel"]], "maxsentencelength (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.maxSentenceLength"]], "name (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.name"]], "outputannotatortype (robertafortokenclassification attribute)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (robertafortokenclassification static method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertafortokenclassification method)": [[48, "sparknlp.annotator.classifier_dl.roberta_for_token_classification.RoBertaForTokenClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_token_classification": [[48, "module-sparknlp.annotator.classifier_dl.roberta_for_token_classification"]], "robertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification"]], "coalescesentences (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.maxSentenceLength"]], "name (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.name"]], "outputannotatortype (robertaforzeroshotclassification attribute)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (robertaforzeroshotclassification static method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (robertaforzeroshotclassification method)": [[49, "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification.RoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification": [[49, "module-sparknlp.annotator.classifier_dl.roberta_for_zero_shot_classification"]], "sentimentdlapproach (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach"]], "sentimentdlmodel (class in sparknlp.annotator.classifier_dl.sentiment_dl)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel"]], "classes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.classes"]], "configprotobytes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.configProtoBytes"]], "dropout (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.dropout"]], "inputannotatortypes (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.inputAnnotatorTypes"]], "name (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.name"]], "outputannotatortype (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.outputAnnotatorType"]], "outputannotatortype (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.outputAnnotatorType"]], "pretrained() (sentimentdlmodel static method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.pretrained"]], "setconfigprotobytes() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setConfigProtoBytes"]], "setdropout() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setDropout"]], "setthreshold() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThreshold"]], "setthreshold() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThreshold"]], "setthresholdlabel() (sentimentdlapproach method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.setThresholdLabel"]], "setthresholdlabel() (sentimentdlmodel method)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.setThresholdLabel"]], "sparknlp.annotator.classifier_dl.sentiment_dl": [[50, "module-sparknlp.annotator.classifier_dl.sentiment_dl"]], "threshold (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.threshold"]], "threshold (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.threshold"]], "thresholdlabel (sentimentdlapproach attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLApproach.thresholdLabel"]], "thresholdlabel (sentimentdlmodel attribute)": [[50, "sparknlp.annotator.classifier_dl.sentiment_dl.SentimentDLModel.thresholdLabel"]], "tapasforquestionanswering (class in sparknlp.annotator.classifier_dl.tapas_for_question_answering)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering"]], "inputannotatortypes (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.loadSavedModel"]], "name (tapasforquestionanswering attribute)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.name"]], "pretrained() (tapasforquestionanswering static method)": [[51, "sparknlp.annotator.classifier_dl.tapas_for_question_answering.TapasForQuestionAnswering.pretrained"]], "sparknlp.annotator.classifier_dl.tapas_for_question_answering": [[51, "module-sparknlp.annotator.classifier_dl.tapas_for_question_answering"]], "xlmrobertaformultiplechoice (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice"]], "inputannotatortypes (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.loadSavedModel"]], "name (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.name"]], "outputannotatortype (xlmrobertaformultiplechoice attribute)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.outputAnnotatorType"]], "pretrained() (xlmrobertaformultiplechoice static method)": [[52, "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice.XlmRoBertaForMultipleChoice.pretrained"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice": [[52, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_multiple_choice"]], "xlmrobertaforquestionanswering (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering"]], "coalescesentences (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.coalesceSentences"]], "configprotobytes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.loadSavedModel"]], "name (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.name"]], "outputannotatortype (xlmrobertaforquestionanswering attribute)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.outputAnnotatorType"]], "pretrained() (xlmrobertaforquestionanswering static method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.pretrained"]], "setconfigprotobytes() (xlmrobertaforquestionanswering method)": [[53, "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering.XlmRoBertaForQuestionAnswering.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering": [[53, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_question_answering"]], "xlmrobertaforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification"]], "coalescesentences (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.configProtoBytes"]], "getclasses() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.getClasses"]], "inputannotatortypes (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.loadSavedModel"]], "name (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.name"]], "outputannotatortype (xlmrobertaforsequenceclassification attribute)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforsequenceclassification static method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforsequenceclassification method)": [[54, "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification.XlmRoBertaForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification": [[54, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_sequence_classification"]], "xlmrobertafortokenclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification"]], "configprotobytes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.configProtoBytes"]], "getclasses() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.getClasses"]], "inputannotatortypes (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.loadSavedModel"]], "name (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.name"]], "outputannotatortype (xlmrobertafortokenclassification attribute)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.outputAnnotatorType"]], "pretrained() (xlmrobertafortokenclassification static method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.pretrained"]], "setconfigprotobytes() (xlmrobertafortokenclassification method)": [[55, "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification.XlmRoBertaForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification": [[55, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_token_classification"]], "xlmrobertaforzeroshotclassification (class in sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification"]], "coalescesentences (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.coalesceSentences"]], "configprotobytes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.configProtoBytes"]], "getclasses() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.getClasses"]], "inputannotatortypes (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.loadSavedModel"]], "maxsentencelength (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.maxSentenceLength"]], "name (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.name"]], "outputannotatortype (xlmrobertaforzeroshotclassification attribute)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.outputAnnotatorType"]], "pretrained() (xlmrobertaforzeroshotclassification static method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.pretrained"]], "setcoalescesentences() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setConfigProtoBytes"]], "setmaxsentencelength() (xlmrobertaforzeroshotclassification method)": [[56, "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification.XlmRoBertaForZeroShotClassification.setMaxSentenceLength"]], "sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification": [[56, "module-sparknlp.annotator.classifier_dl.xlm_roberta_for_zero_shot_classification"]], "xlnetforsequenceclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification"]], "coalescesentences (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.coalesceSentences"]], "configprotobytes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.configProtoBytes"]], "getclasses() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.getClasses"]], "inputannotatortypes (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.loadSavedModel"]], "name (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.name"]], "outputannotatortype (xlnetforsequenceclassification attribute)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.outputAnnotatorType"]], "pretrained() (xlnetforsequenceclassification static method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.pretrained"]], "setcoalescesentences() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (xlnetforsequenceclassification method)": [[57, "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification.XlnetForSequenceClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification": [[57, "module-sparknlp.annotator.classifier_dl.xlnet_for_sequence_classification"]], "xlnetfortokenclassification (class in sparknlp.annotator.classifier_dl.xlnet_for_token_classification)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification"]], "configprotobytes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.configProtoBytes"]], "getclasses() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.getClasses"]], "inputannotatortypes (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.loadSavedModel"]], "name (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.name"]], "outputannotatortype (xlnetfortokenclassification attribute)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.outputAnnotatorType"]], "pretrained() (xlnetfortokenclassification static method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.pretrained"]], "setconfigprotobytes() (xlnetfortokenclassification method)": [[58, "sparknlp.annotator.classifier_dl.xlnet_for_token_classification.XlnetForTokenClassification.setConfigProtoBytes"]], "sparknlp.annotator.classifier_dl.xlnet_for_token_classification": [[58, "module-sparknlp.annotator.classifier_dl.xlnet_for_token_classification"]], "sparknlp.annotator.cleaners": [[59, "module-sparknlp.annotator.cleaners"]], "cleaner (class in sparknlp.annotator.cleaners.cleaner)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner"]], "bullets (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.bullets"]], "cleanpostfixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPostfixPattern"]], "cleanprefixpattern (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanPrefixPattern"]], "cleanermode (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.cleanerMode"]], "dashes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.dashes"]], "encoding (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.encoding"]], "extrawhitespace (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.extraWhitespace"]], "ignorecase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.ignoreCase"]], "inputannotatortypes (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.inputAnnotatorTypes"]], "lowercase (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.lowercase"]], "name (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.name"]], "outputannotatortype (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.outputAnnotatorType"]], "setbullets() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setBullets"]], "setcleanpostfixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPostfixPattern"]], "setcleanprefixpattern() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanPrefixPattern"]], "setcleanermode() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setCleanerMode"]], "setdashes() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setDashes"]], "setencoding() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setEncoding"]], "setextrawhitespace() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setExtraWhitespace"]], "setignorecase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setIgnoreCase"]], "setlowercase() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setLowercase"]], "setstrip() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setStrip"]], "settrailingpunctuation() (cleaner method)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.setTrailingPunctuation"]], "sparknlp.annotator.cleaners.cleaner": [[60, "module-sparknlp.annotator.cleaners.cleaner"]], "strip (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.strip"]], "trailingpunctuation (cleaner attribute)": [[60, "sparknlp.annotator.cleaners.cleaner.Cleaner.trailingPunctuation"]], "extractor (class in sparknlp.annotator.cleaners.extractor)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor"]], "emailaddress (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailAddress"]], "emaildatetimetzpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.emailDateTimeTzPattern"]], "extractormode (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.extractorMode"]], "imageurlpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.imageUrlPattern"]], "index (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.index"]], "inputannotatortypes (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.inputAnnotatorTypes"]], "ipaddressnamepattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressNamePattern"]], "ipaddresspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.ipAddressPattern"]], "mapiidpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.mapiIdPattern"]], "name (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.name"]], "outputannotatortype (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.outputAnnotatorType"]], "setemailaddress() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailAddress"]], "setemaildatetimetzpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setEmailDateTimeTzPattern"]], "setextractormode() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setExtractorMode"]], "setimageurlpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setImageUrlPattern"]], "setindex() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIndex"]], "setipaddressnamepattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressNamePattern"]], "setipaddresspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setIpAddressPattern"]], "setmapiidpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setMapiIdPattern"]], "settextpattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setTextPattern"]], "setusphonenumberspattern() (extractor method)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.setUsPhoneNumbersPattern"]], "sparknlp.annotator.cleaners.extractor": [[61, "module-sparknlp.annotator.cleaners.extractor"]], "textpattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.textPattern"]], "usphonenumberspattern (extractor attribute)": [[61, "sparknlp.annotator.cleaners.extractor.Extractor.usPhoneNumbersPattern"]], "sparknlp.annotator.coref": [[62, "module-sparknlp.annotator.coref"]], "spanbertcorefmodel (class in sparknlp.annotator.coref.spanbert_coref)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel"]], "configprotobytes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.configProtoBytes"]], "inputannotatortypes (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.inputAnnotatorTypes"]], "loadsavedmodel() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.loadSavedModel"]], "maxsegmentlength (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.maxSegmentLength"]], "name (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.name"]], "outputannotatortype (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.outputAnnotatorType"]], "pretrained() (spanbertcorefmodel static method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.pretrained"]], "setconfigprotobytes() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setConfigProtoBytes"]], "setmaxsegmentlength() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setMaxSegmentLength"]], "settextgenre() (spanbertcorefmodel method)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.setTextGenre"]], "sparknlp.annotator.coref.spanbert_coref": [[63, "module-sparknlp.annotator.coref.spanbert_coref"]], "textgenre (spanbertcorefmodel attribute)": [[63, "sparknlp.annotator.coref.spanbert_coref.SpanBertCorefModel.textGenre"]], "sparknlp.annotator.cv": [[64, "module-sparknlp.annotator.cv"]], "blipforquestionanswering (class in sparknlp.annotator.cv.blip_for_question_answering)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering"]], "configprotobytes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.configProtoBytes"]], "inputannotatortypes (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.inputAnnotatorTypes"]], "loadsavedmodel() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.loadSavedModel"]], "maxsentencelength (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.maxSentenceLength"]], "name (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.name"]], "outputannotatortype (blipforquestionanswering attribute)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.outputAnnotatorType"]], "pretrained() (blipforquestionanswering static method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.pretrained"]], "setmaxsentencesize() (blipforquestionanswering method)": [[65, "sparknlp.annotator.cv.blip_for_question_answering.BLIPForQuestionAnswering.setMaxSentenceSize"]], "sparknlp.annotator.cv.blip_for_question_answering": [[65, "module-sparknlp.annotator.cv.blip_for_question_answering"]], "clipforzeroshotclassification (class in sparknlp.annotator.cv.clip_for_zero_shot_classification)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification"]], "configprotobytes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.configProtoBytes"]], "getcandidatelabels() (clipforzeroshotclassification method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.getCandidateLabels"]], "inputannotatortypes (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.inputAnnotatorTypes"]], "loadsavedmodel() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.loadSavedModel"]], "name (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.name"]], "outputannotatortype (clipforzeroshotclassification attribute)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.outputAnnotatorType"]], "pretrained() (clipforzeroshotclassification static method)": [[66, "sparknlp.annotator.cv.clip_for_zero_shot_classification.CLIPForZeroShotClassification.pretrained"]], "sparknlp.annotator.cv.clip_for_zero_shot_classification": [[66, "module-sparknlp.annotator.cv.clip_for_zero_shot_classification"]], "convnextforimageclassification (class in sparknlp.annotator.cv.convnext_for_image_classification)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification"]], "configprotobytes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.configProtoBytes"]], "croppct (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.cropPct"]], "dorescale (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.doRescale"]], "getclasses() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.getClasses"]], "inputannotatortypes (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.loadSavedModel"]], "name (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.name"]], "outputannotatortype (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.outputAnnotatorType"]], "pretrained() (convnextforimageclassification static method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.pretrained"]], "rescalefactor (convnextforimageclassification attribute)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.rescaleFactor"]], "setconfigprotobytes() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setConfigProtoBytes"]], "setcroppct() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setCropPct"]], "setdorescale() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setDoRescale"]], "setrescalefactor() (convnextforimageclassification method)": [[67, "sparknlp.annotator.cv.convnext_for_image_classification.ConvNextForImageClassification.setRescaleFactor"]], "sparknlp.annotator.cv.convnext_for_image_classification": [[67, "module-sparknlp.annotator.cv.convnext_for_image_classification"]], "janusformultimodal (class in sparknlp.annotator.cv.janus_for_multimodal)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal"]], "beamsize (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.beamSize"]], "configprotobytes (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.configProtoBytes"]], "dosample (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.doSample"]], "ignoretokenids (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.ignoreTokenIds"]], "imagegeneratemode (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.imageGenerateMode"]], "inputannotatortypes (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (janusformultimodal static method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.loadSavedModel"]], "maxoutputlength (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.maxOutputLength"]], "minoutputlength (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.minOutputLength"]], "name (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.name"]], "norepeatngramsize (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.noRepeatNgramSize"]], "numofparallelimages (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.numOfParallelImages"]], "outputannotatortype (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.outputAnnotatorType"]], "pretrained() (janusformultimodal static method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.pretrained"]], "repetitionpenalty (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.repetitionPenalty"]], "setbeamsize() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setBeamSize"]], "setconfigprotobytes() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setConfigProtoBytes"]], "setdosample() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setDoSample"]], "setignoretokenids() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setIgnoreTokenIds"]], "setimagegeneratemode() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setImageGenerateMode"]], "setmaxoutputlength() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNoRepeatNgramSize"]], "setnumofparallelimages() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setNumOfParallelImages"]], "setrepetitionpenalty() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setRepetitionPenalty"]], "settemperature() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTemperature"]], "settopk() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopK"]], "settopp() (janusformultimodal method)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.setTopP"]], "sparknlp.annotator.cv.janus_for_multimodal": [[68, "module-sparknlp.annotator.cv.janus_for_multimodal"]], "temperature (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.temperature"]], "topk (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topK"]], "topp (janusformultimodal attribute)": [[68, "sparknlp.annotator.cv.janus_for_multimodal.JanusForMultiModal.topP"]], "llavaformultimodal (class in sparknlp.annotator.cv.llava_for_multimodal)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal"]], "beamsize (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.beamSize"]], "configprotobytes (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.configProtoBytes"]], "dosample (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.doSample"]], "ignoretokenids (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.ignoreTokenIds"]], "inputannotatortypes (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.inputAnnotatorTypes"]], "loadsavedmodel() (llavaformultimodal static method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.loadSavedModel"]], "maxoutputlength (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.maxOutputLength"]], "minoutputlength (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.minOutputLength"]], "name (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.name"]], "norepeatngramsize (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.noRepeatNgramSize"]], "outputannotatortype (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.outputAnnotatorType"]], "pretrained() (llavaformultimodal static method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.pretrained"]], "repetitionpenalty (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.repetitionPenalty"]], "setbeamsize() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setBeamSize"]], "setconfigprotobytes() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setConfigProtoBytes"]], "setdosample() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setDoSample"]], "setignoretokenids() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setIgnoreTokenIds"]], "setmaxoutputlength() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxOutputLength"]], "setmaxsentencesize() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMaxSentenceSize"]], "setminoutputlength() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setMinOutputLength"]], "setnorepeatngramsize() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setRepetitionPenalty"]], "settemperature() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTemperature"]], "settopk() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopK"]], "settopp() (llavaformultimodal method)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.setTopP"]], "sparknlp.annotator.cv.llava_for_multimodal": [[69, "module-sparknlp.annotator.cv.llava_for_multimodal"]], "temperature (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.temperature"]], "topk (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topK"]], "topp (llavaformultimodal attribute)": [[69, "sparknlp.annotator.cv.llava_for_multimodal.LLAVAForMultiModal.topP"]], "mllamaformultimodal (class in sparknlp.annotator.cv.mllama_for_multimodal)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal"]], "beamsize (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.beamSize"]], "configprotobytes (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.configProtoBytes"]], "dosample (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.doSample"]], "ignoretokenids (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.ignoreTokenIds"]], "inputannotatortypes (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.inputAnnotatorTypes"]], "loadsavedmodel() (mllamaformultimodal static method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.loadSavedModel"]], "maxoutputlength (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.maxOutputLength"]], "minoutputlength (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.minOutputLength"]], "name (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.name"]], "norepeatngramsize (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.noRepeatNgramSize"]], "outputannotatortype (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.outputAnnotatorType"]], "pretrained() (mllamaformultimodal static method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.pretrained"]], "repetitionpenalty (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.repetitionPenalty"]], "setbeamsize() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setBeamSize"]], "setconfigprotobytes() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setConfigProtoBytes"]], "setdosample() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setDoSample"]], "setignoretokenids() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setIgnoreTokenIds"]], "setmaxoutputlength() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxOutputLength"]], "setmaxsentencesize() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMaxSentenceSize"]], "setminoutputlength() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setMinOutputLength"]], "setnorepeatngramsize() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setRepetitionPenalty"]], "settemperature() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTemperature"]], "settopk() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopK"]], "settopp() (mllamaformultimodal method)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.setTopP"]], "sparknlp.annotator.cv.mllama_for_multimodal": [[70, "module-sparknlp.annotator.cv.mllama_for_multimodal"]], "temperature (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.temperature"]], "topk (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topK"]], "topp (mllamaformultimodal attribute)": [[70, "sparknlp.annotator.cv.mllama_for_multimodal.MLLamaForMultimodal.topP"]], "phi3vision (class in sparknlp.annotator.cv.phi3_vision_for_multimodal)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision"]], "beamsize (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.beamSize"]], "configprotobytes (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.configProtoBytes"]], "dosample (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.doSample"]], "ignoretokenids (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.ignoreTokenIds"]], "inputannotatortypes (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.inputAnnotatorTypes"]], "loadsavedmodel() (phi3vision static method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.loadSavedModel"]], "maxoutputlength (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.maxOutputLength"]], "minoutputlength (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.minOutputLength"]], "name (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.name"]], "norepeatngramsize (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.noRepeatNgramSize"]], "outputannotatortype (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.outputAnnotatorType"]], "pretrained() (phi3vision static method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.pretrained"]], "repetitionpenalty (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.repetitionPenalty"]], "setbeamsize() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setBeamSize"]], "setconfigprotobytes() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setConfigProtoBytes"]], "setdosample() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setDoSample"]], "setignoretokenids() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxOutputLength"]], "setmaxsentencesize() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMaxSentenceSize"]], "setminoutputlength() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setMinOutputLength"]], "setnorepeatngramsize() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setRepetitionPenalty"]], "settemperature() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTemperature"]], "settopk() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopK"]], "settopp() (phi3vision method)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.setTopP"]], "sparknlp.annotator.cv.phi3_vision_for_multimodal": [[71, "module-sparknlp.annotator.cv.phi3_vision_for_multimodal"]], "temperature (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.temperature"]], "topk (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topK"]], "topp (phi3vision attribute)": [[71, "sparknlp.annotator.cv.phi3_vision_for_multimodal.Phi3Vision.topP"]], "qwen2vltransformer (class in sparknlp.annotator.cv.qwen2vl_transformer)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer"]], "beamsize (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.beamSize"]], "configprotobytes (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.configProtoBytes"]], "dosample (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.doSample"]], "ignoretokenids (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.ignoreTokenIds"]], "inputannotatortypes (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwen2vltransformer static method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.loadSavedModel"]], "maxoutputlength (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.maxOutputLength"]], "minoutputlength (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.minOutputLength"]], "name (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.name"]], "norepeatngramsize (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.noRepeatNgramSize"]], "outputannotatortype (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.outputAnnotatorType"]], "pretrained() (qwen2vltransformer static method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.pretrained"]], "repetitionpenalty (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.repetitionPenalty"]], "setbeamsize() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setBeamSize"]], "setconfigprotobytes() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setConfigProtoBytes"]], "setdosample() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setDoSample"]], "setignoretokenids() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxOutputLength"]], "setmaxsentencesize() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMaxSentenceSize"]], "setminoutputlength() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setRepetitionPenalty"]], "settemperature() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTemperature"]], "settopk() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopK"]], "settopp() (qwen2vltransformer method)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.setTopP"]], "sparknlp.annotator.cv.qwen2vl_transformer": [[72, "module-sparknlp.annotator.cv.qwen2vl_transformer"]], "temperature (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.temperature"]], "topk (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topK"]], "topp (qwen2vltransformer attribute)": [[72, "sparknlp.annotator.cv.qwen2vl_transformer.Qwen2VLTransformer.topP"]], "swinforimageclassification (class in sparknlp.annotator.cv.swin_for_image_classification)": [[73, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification"]], "configprotobytes (swinforimageclassification attribute)": [[73, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.configProtoBytes"]], "getclasses() (swinforimageclassification method)": [[73, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.getClasses"]], "inputannotatortypes (swinforimageclassification attribute)": [[73, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (swinforimageclassification static method)": [[73, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.loadSavedModel"]], "name (swinforimageclassification attribute)": [[73, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.name"]], "outputannotatortype (swinforimageclassification attribute)": [[73, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.outputAnnotatorType"]], "pretrained() (swinforimageclassification static method)": [[73, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.pretrained"]], "setconfigprotobytes() (swinforimageclassification method)": [[73, "sparknlp.annotator.cv.swin_for_image_classification.SwinForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.swin_for_image_classification": [[73, "module-sparknlp.annotator.cv.swin_for_image_classification"]], "visionencoderdecoderforimagecaptioning (class in sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning)": [[74, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning"]], "configprotobytes (visionencoderdecoderforimagecaptioning attribute)": [[74, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.configProtoBytes"]], "inputannotatortypes (visionencoderdecoderforimagecaptioning attribute)": [[74, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.inputAnnotatorTypes"]], "loadsavedmodel() (visionencoderdecoderforimagecaptioning static method)": [[74, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.loadSavedModel"]], "name (visionencoderdecoderforimagecaptioning attribute)": [[74, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.name"]], "outputannotatortype (visionencoderdecoderforimagecaptioning attribute)": [[74, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.outputAnnotatorType"]], "pretrained() (visionencoderdecoderforimagecaptioning static method)": [[74, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.pretrained"]], "setconfigprotobytes() (visionencoderdecoderforimagecaptioning method)": [[74, "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning.VisionEncoderDecoderForImageCaptioning.setConfigProtoBytes"]], "sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning": [[74, "module-sparknlp.annotator.cv.vision_encoder_decoder_for_image_captioning"]], "vitforimageclassification (class in sparknlp.annotator.cv.vit_for_image_classification)": [[75, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification"]], "configprotobytes (vitforimageclassification attribute)": [[75, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.configProtoBytes"]], "getclasses() (vitforimageclassification method)": [[75, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.getClasses"]], "inputannotatortypes (vitforimageclassification attribute)": [[75, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.inputAnnotatorTypes"]], "loadsavedmodel() (vitforimageclassification static method)": [[75, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.loadSavedModel"]], "name (vitforimageclassification attribute)": [[75, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.name"]], "outputannotatortype (vitforimageclassification attribute)": [[75, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.outputAnnotatorType"]], "pretrained() (vitforimageclassification static method)": [[75, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.pretrained"]], "setconfigprotobytes() (vitforimageclassification method)": [[75, "sparknlp.annotator.cv.vit_for_image_classification.ViTForImageClassification.setConfigProtoBytes"]], "sparknlp.annotator.cv.vit_for_image_classification": [[75, "module-sparknlp.annotator.cv.vit_for_image_classification"]], "date2chunk (class in sparknlp.annotator.date2_chunk)": [[76, "sparknlp.annotator.date2_chunk.Date2Chunk"]], "entityname (date2chunk attribute)": [[76, "sparknlp.annotator.date2_chunk.Date2Chunk.entityName"]], "inputannotatortypes (date2chunk attribute)": [[76, "sparknlp.annotator.date2_chunk.Date2Chunk.inputAnnotatorTypes"]], "name (date2chunk attribute)": [[76, "sparknlp.annotator.date2_chunk.Date2Chunk.name"]], "outputannotatortype (date2chunk attribute)": [[76, "sparknlp.annotator.date2_chunk.Date2Chunk.outputAnnotatorType"]], "setentityname() (date2chunk method)": [[76, "sparknlp.annotator.date2_chunk.Date2Chunk.setEntityName"]], "sparknlp.annotator.date2_chunk": [[76, "module-sparknlp.annotator.date2_chunk"]], "sparknlp.annotator.dependency": [[77, "module-sparknlp.annotator.dependency"]], "dependencyparserapproach (class in sparknlp.annotator.dependency.dependency_parser)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach"]], "dependencyparsermodel (class in sparknlp.annotator.dependency.dependency_parser)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel"]], "conllu (dependencyparserapproach attribute)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.conllU"]], "dependencytreebank (dependencyparserapproach attribute)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.dependencyTreeBank"]], "inputannotatortypes (dependencyparserapproach attribute)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (dependencyparsermodel attribute)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.inputAnnotatorTypes"]], "name (dependencyparsermodel attribute)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.name"]], "numberofiterations (dependencyparserapproach attribute)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.numberOfIterations"]], "outputannotatortype (dependencyparserapproach attribute)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (dependencyparsermodel attribute)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.outputAnnotatorType"]], "perceptron (dependencyparsermodel attribute)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.perceptron"]], "pretrained() (dependencyparsermodel static method)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserModel.pretrained"]], "setconllu() (dependencyparserapproach method)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setConllU"]], "setdependencytreebank() (dependencyparserapproach method)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setDependencyTreeBank"]], "setnumberofiterations() (dependencyparserapproach method)": [[78, "sparknlp.annotator.dependency.dependency_parser.DependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.dependency_parser": [[78, "module-sparknlp.annotator.dependency.dependency_parser"]], "typeddependencyparserapproach (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach"]], "typeddependencyparsermodel (class in sparknlp.annotator.dependency.typed_dependency_parser)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel"]], "conll2009 (typeddependencyparserapproach attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conll2009"]], "conllformat (typeddependencyparsermodel attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.conllFormat"]], "conllu (typeddependencyparserapproach attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.conllU"]], "inputannotatortypes (typeddependencyparserapproach attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (typeddependencyparsermodel attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.inputAnnotatorTypes"]], "name (typeddependencyparsermodel attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.name"]], "numberofiterations (typeddependencyparserapproach attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.numberOfIterations"]], "outputannotatortype (typeddependencyparserapproach attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.outputAnnotatorType"]], "outputannotatortype (typeddependencyparsermodel attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.outputAnnotatorType"]], "pretrained() (typeddependencyparsermodel static method)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.pretrained"]], "setconll2009() (typeddependencyparserapproach method)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConll2009"]], "setconllu() (typeddependencyparserapproach method)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setConllU"]], "setnumberofiterations() (typeddependencyparserapproach method)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserApproach.setNumberOfIterations"]], "sparknlp.annotator.dependency.typed_dependency_parser": [[79, "module-sparknlp.annotator.dependency.typed_dependency_parser"]], "traindependencypipe (typeddependencyparsermodel attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainDependencyPipe"]], "trainoptions (typeddependencyparsermodel attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainOptions"]], "trainparameters (typeddependencyparsermodel attribute)": [[79, "sparknlp.annotator.dependency.typed_dependency_parser.TypedDependencyParserModel.trainParameters"]], "documentcharactertextsplitter (class in sparknlp.annotator.document_character_text_splitter)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter"]], "chunkoverlap (documentcharactertextsplitter attribute)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkOverlap"]], "chunksize (documentcharactertextsplitter attribute)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.chunkSize"]], "explodesplits (documentcharactertextsplitter attribute)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.explodeSplits"]], "inputannotatortypes (documentcharactertextsplitter attribute)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.inputAnnotatorTypes"]], "keepseparators (documentcharactertextsplitter attribute)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.keepSeparators"]], "outputannotatortype (documentcharactertextsplitter attribute)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.outputAnnotatorType"]], "patternsareregex (documentcharactertextsplitter attribute)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.patternsAreRegex"]], "setchunkoverlap() (documentcharactertextsplitter method)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkOverlap"]], "setchunksize() (documentcharactertextsplitter method)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setChunkSize"]], "setexplodesplits() (documentcharactertextsplitter method)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setExplodeSplits"]], "setkeepseparators() (documentcharactertextsplitter method)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setKeepSeparators"]], "setpatternsareregex() (documentcharactertextsplitter method)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setPatternsAreRegex"]], "setsplitpatterns() (documentcharactertextsplitter method)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setSplitPatterns"]], "settrimwhitespace() (documentcharactertextsplitter method)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_character_text_splitter": [[80, "module-sparknlp.annotator.document_character_text_splitter"]], "splitpatterns (documentcharactertextsplitter attribute)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.splitPatterns"]], "trimwhitespace (documentcharactertextsplitter attribute)": [[80, "sparknlp.annotator.document_character_text_splitter.DocumentCharacterTextSplitter.trimWhitespace"]], "documentnormalizer (class in sparknlp.annotator.document_normalizer)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer"]], "action (documentnormalizer attribute)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.action"]], "encoding (documentnormalizer attribute)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.encoding"]], "inputannotatortypes (documentnormalizer attribute)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.inputAnnotatorTypes"]], "lowercase (documentnormalizer attribute)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.lowercase"]], "outputannotatortype (documentnormalizer attribute)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.outputAnnotatorType"]], "patterns (documentnormalizer attribute)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.patterns"]], "policy (documentnormalizer attribute)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.policy"]], "replacement (documentnormalizer attribute)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.replacement"]], "setaction() (documentnormalizer method)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setAction"]], "setencoding() (documentnormalizer method)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setEncoding"]], "setlowercase() (documentnormalizer method)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setLowercase"]], "setpatterns() (documentnormalizer method)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPatterns"]], "setpolicy() (documentnormalizer method)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setPolicy"]], "setreplacement() (documentnormalizer method)": [[81, "sparknlp.annotator.document_normalizer.DocumentNormalizer.setReplacement"]], "sparknlp.annotator.document_normalizer": [[81, "module-sparknlp.annotator.document_normalizer"]], "documenttokensplitter (class in sparknlp.annotator.document_token_splitter)": [[82, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter"]], "explodesplits (documenttokensplitter attribute)": [[82, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.explodeSplits"]], "inputannotatortypes (documenttokensplitter attribute)": [[82, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.inputAnnotatorTypes"]], "numtokens (documenttokensplitter attribute)": [[82, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.numTokens"]], "outputannotatortype (documenttokensplitter attribute)": [[82, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.outputAnnotatorType"]], "setexplodesplits() (documenttokensplitter method)": [[82, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setExplodeSplits"]], "setnumtokens() (documenttokensplitter method)": [[82, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setNumTokens"]], "settokenoverlap() (documenttokensplitter method)": [[82, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTokenOverlap"]], "settrimwhitespace() (documenttokensplitter method)": [[82, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.setTrimWhitespace"]], "sparknlp.annotator.document_token_splitter": [[82, "module-sparknlp.annotator.document_token_splitter"]], "tokenoverlap (documenttokensplitter attribute)": [[82, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.tokenOverlap"]], "trimwhitespace (documenttokensplitter attribute)": [[82, "sparknlp.annotator.document_token_splitter.DocumentTokenSplitter.trimWhitespace"]], "sparknlp.annotator.embeddings": [[84, "module-sparknlp.annotator.embeddings"]], "albertembeddings (class in sparknlp.annotator.embeddings.albert_embeddings)": [[85, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings"]], "configprotobytes (albertembeddings attribute)": [[85, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.configProtoBytes"]], "inputannotatortypes (albertembeddings attribute)": [[85, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (albertembeddings static method)": [[85, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.loadSavedModel"]], "name (albertembeddings attribute)": [[85, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.name"]], "outputannotatortype (albertembeddings attribute)": [[85, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.outputAnnotatorType"]], "pretrained() (albertembeddings static method)": [[85, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.pretrained"]], "setconfigprotobytes() (albertembeddings method)": [[85, "sparknlp.annotator.embeddings.albert_embeddings.AlbertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.albert_embeddings": [[85, "module-sparknlp.annotator.embeddings.albert_embeddings"]], "autoggufembeddings (class in sparknlp.annotator.embeddings.auto_gguf_embeddings)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings"]], "defragmentationthreshold (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.defragmentationThreshold"]], "embedding (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.embedding"]], "flashattention (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.flashAttention"]], "getmetadata() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.getMetadata"]], "gpusplitmode (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.gpuSplitMode"]], "grpattnn (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnN"]], "grpattnw (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.grpAttnW"]], "inputannotatortypes (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufembeddings static method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.loadSavedModel"]], "maingpu (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.mainGpu"]], "nbatch (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nBatch"]], "nchunks (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nChunks"]], "nctx (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nCtx"]], "ngpulayers (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nGpuLayers"]], "nsequences (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nSequences"]], "nthreads (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreads"]], "nthreadsbatch (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nThreadsBatch"]], "nubatch (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.nUbatch"]], "name (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.name"]], "nokvoffload (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.noKvOffload"]], "numastrategy (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.numaStrategy"]], "outputannotatortype (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.outputAnnotatorType"]], "poolingtype (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.poolingType"]], "pretrained() (autoggufembeddings static method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.pretrained"]], "ropefreqbase (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqBase"]], "ropefreqscale (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeFreqScale"]], "ropescalingtype (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.ropeScalingType"]], "setdefragmentationthreshold() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setDefragmentationThreshold"]], "setflashattention() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setFlashAttention"]], "setgpusplitmode() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGpuSplitMode"]], "setgrpattnn() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnN"]], "setgrpattnw() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setGrpAttnW"]], "setmaingpu() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setMainGpu"]], "setnbatch() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNBatch"]], "setnchunks() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNChunks"]], "setnctx() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNCtx"]], "setngpulayers() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNGpuLayers"]], "setnparallel() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNParallel"]], "setnsequences() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNSequences"]], "setnthreads() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreads"]], "setnthreadsbatch() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNThreadsBatch"]], "setnubatch() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNUbatch"]], "setnokvoffload() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNoKvOffload"]], "setnumastrategy() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setNumaStrategy"]], "setpoolingtype() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setPoolingType"]], "setropefreqbase() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqBase"]], "setropefreqscale() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeFreqScale"]], "setropescalingtype() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setRopeScalingType"]], "settensorsplit() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setTensorSplit"]], "setusemlock() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMlock"]], "setusemmap() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setUseMmap"]], "setyarnattnfactor() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnAttnFactor"]], "setyarnbetafast() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaFast"]], "setyarnbetaslow() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnBetaSlow"]], "setyarnextfactor() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnExtFactor"]], "setyarnorigctx() (autoggufembeddings method)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.setYarnOrigCtx"]], "sparknlp.annotator.embeddings.auto_gguf_embeddings": [[86, "module-sparknlp.annotator.embeddings.auto_gguf_embeddings"]], "tensorsplit (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.tensorSplit"]], "usemlock (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMlock"]], "usemmap (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.useMmap"]], "yarnattnfactor (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnAttnFactor"]], "yarnbetafast (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaFast"]], "yarnbetaslow (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnBetaSlow"]], "yarnextfactor (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnExtFactor"]], "yarnorigctx (autoggufembeddings attribute)": [[86, "sparknlp.annotator.embeddings.auto_gguf_embeddings.AutoGGUFEmbeddings.yarnOrigCtx"]], "bertembeddings (class in sparknlp.annotator.embeddings.bert_embeddings)": [[87, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings"]], "configprotobytes (bertembeddings attribute)": [[87, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.configProtoBytes"]], "inputannotatortypes (bertembeddings attribute)": [[87, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bertembeddings static method)": [[87, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.loadSavedModel"]], "name (bertembeddings attribute)": [[87, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.name"]], "outputannotatortype (bertembeddings attribute)": [[87, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.outputAnnotatorType"]], "pretrained() (bertembeddings static method)": [[87, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.pretrained"]], "setconfigprotobytes() (bertembeddings method)": [[87, "sparknlp.annotator.embeddings.bert_embeddings.BertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bert_embeddings": [[87, "module-sparknlp.annotator.embeddings.bert_embeddings"]], "bertsentenceembeddings (class in sparknlp.annotator.embeddings.bert_sentence_embeddings)": [[88, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings"]], "configprotobytes (bertsentenceembeddings attribute)": [[88, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (bertsentenceembeddings attribute)": [[88, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.inputAnnotatorTypes"]], "islong (bertsentenceembeddings attribute)": [[88, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.isLong"]], "loadsavedmodel() (bertsentenceembeddings static method)": [[88, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.loadSavedModel"]], "name (bertsentenceembeddings attribute)": [[88, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.name"]], "outputannotatortype (bertsentenceembeddings attribute)": [[88, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentenceembeddings static method)": [[88, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (bertsentenceembeddings method)": [[88, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setConfigProtoBytes"]], "setislong() (bertsentenceembeddings method)": [[88, "sparknlp.annotator.embeddings.bert_sentence_embeddings.BertSentenceEmbeddings.setIsLong"]], "sparknlp.annotator.embeddings.bert_sentence_embeddings": [[88, "module-sparknlp.annotator.embeddings.bert_sentence_embeddings"]], "bgeembeddings (class in sparknlp.annotator.embeddings.bge_embeddings)": [[89, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings"]], "configprotobytes (bgeembeddings attribute)": [[89, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.configProtoBytes"]], "inputannotatortypes (bgeembeddings attribute)": [[89, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (bgeembeddings static method)": [[89, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.loadSavedModel"]], "name (bgeembeddings attribute)": [[89, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.name"]], "outputannotatortype (bgeembeddings attribute)": [[89, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.outputAnnotatorType"]], "pretrained() (bgeembeddings static method)": [[89, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.pretrained"]], "setconfigprotobytes() (bgeembeddings method)": [[89, "sparknlp.annotator.embeddings.bge_embeddings.BGEEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.bge_embeddings": [[89, "module-sparknlp.annotator.embeddings.bge_embeddings"]], "camembertembeddings (class in sparknlp.annotator.embeddings.camembert_embeddings)": [[90, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings"]], "configprotobytes (camembertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.configProtoBytes"]], "inputannotatortypes (camembertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (camembertembeddings static method)": [[90, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.loadSavedModel"]], "name (camembertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.name"]], "outputannotatortype (camembertembeddings attribute)": [[90, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.outputAnnotatorType"]], "pretrained() (camembertembeddings static method)": [[90, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.pretrained"]], "setconfigprotobytes() (camembertembeddings method)": [[90, "sparknlp.annotator.embeddings.camembert_embeddings.CamemBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.camembert_embeddings": [[90, "module-sparknlp.annotator.embeddings.camembert_embeddings"]], "chunkembeddings (class in sparknlp.annotator.embeddings.chunk_embeddings)": [[91, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings"]], "inputannotatortypes (chunkembeddings attribute)": [[91, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.inputAnnotatorTypes"]], "name (chunkembeddings attribute)": [[91, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.name"]], "outputannotatortype (chunkembeddings attribute)": [[91, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.outputAnnotatorType"]], "poolingstrategy (chunkembeddings attribute)": [[91, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.poolingStrategy"]], "setpoolingstrategy() (chunkembeddings method)": [[91, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setPoolingStrategy"]], "setskipoov() (chunkembeddings method)": [[91, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.setSkipOOV"]], "skipoov (chunkembeddings attribute)": [[91, "sparknlp.annotator.embeddings.chunk_embeddings.ChunkEmbeddings.skipOOV"]], "sparknlp.annotator.embeddings.chunk_embeddings": [[91, "module-sparknlp.annotator.embeddings.chunk_embeddings"]], "debertaembeddings (class in sparknlp.annotator.embeddings.deberta_embeddings)": [[92, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings"]], "configprotobytes (debertaembeddings attribute)": [[92, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (debertaembeddings attribute)": [[92, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (debertaembeddings static method)": [[92, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.loadSavedModel"]], "name (debertaembeddings attribute)": [[92, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.name"]], "outputannotatortype (debertaembeddings attribute)": [[92, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.outputAnnotatorType"]], "pretrained() (debertaembeddings static method)": [[92, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.pretrained"]], "setconfigprotobytes() (debertaembeddings method)": [[92, "sparknlp.annotator.embeddings.deberta_embeddings.DeBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.deberta_embeddings": [[92, "module-sparknlp.annotator.embeddings.deberta_embeddings"]], "distilbertembeddings (class in sparknlp.annotator.embeddings.distil_bert_embeddings)": [[93, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings"]], "configprotobytes (distilbertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.configProtoBytes"]], "inputannotatortypes (distilbertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (distilbertembeddings static method)": [[93, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.loadSavedModel"]], "name (distilbertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.name"]], "outputannotatortype (distilbertembeddings attribute)": [[93, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.outputAnnotatorType"]], "pretrained() (distilbertembeddings static method)": [[93, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.pretrained"]], "setconfigprotobytes() (distilbertembeddings method)": [[93, "sparknlp.annotator.embeddings.distil_bert_embeddings.DistilBertEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.distil_bert_embeddings": [[93, "module-sparknlp.annotator.embeddings.distil_bert_embeddings"]], "doc2vecapproach (class in sparknlp.annotator.embeddings.doc2vec)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach"]], "doc2vecmodel (class in sparknlp.annotator.embeddings.doc2vec)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel"]], "getvectors() (doc2vecmodel method)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.getVectors"]], "inputannotatortypes (doc2vecapproach attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (doc2vecmodel attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.inputAnnotatorTypes"]], "maxiter (doc2vecapproach attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxIter"]], "maxsentencelength (doc2vecapproach attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.maxSentenceLength"]], "mincount (doc2vecapproach attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.minCount"]], "name (doc2vecmodel attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.name"]], "numpartitions (doc2vecapproach attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.numPartitions"]], "outputannotatortype (doc2vecapproach attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.outputAnnotatorType"]], "outputannotatortype (doc2vecmodel attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.outputAnnotatorType"]], "pretrained() (doc2vecmodel static method)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.pretrained"]], "seed (doc2vecapproach attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.seed"]], "setmaxiter() (doc2vecapproach method)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxIter"]], "setmaxsentencelength() (doc2vecapproach method)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMaxSentenceLength"]], "setmincount() (doc2vecapproach method)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setMinCount"]], "setnumpartitions() (doc2vecapproach method)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setNumPartitions"]], "setseed() (doc2vecapproach method)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setSeed"]], "setstepsize() (doc2vecapproach method)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setStepSize"]], "setvectorsize() (doc2vecapproach method)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setVectorSize"]], "setvectorsize() (doc2vecmodel method)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.setVectorSize"]], "setwindowsize() (doc2vecapproach method)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.doc2vec": [[94, "module-sparknlp.annotator.embeddings.doc2vec"]], "stepsize (doc2vecapproach attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.stepSize"]], "vectorsize (doc2vecapproach attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.vectorSize"]], "vectorsize (doc2vecmodel attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecModel.vectorSize"]], "windowsize (doc2vecapproach attribute)": [[94, "sparknlp.annotator.embeddings.doc2vec.Doc2VecApproach.windowSize"]], "e5embeddings (class in sparknlp.annotator.embeddings.e5_embeddings)": [[95, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings"]], "configprotobytes (e5embeddings attribute)": [[95, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.configProtoBytes"]], "inputannotatortypes (e5embeddings attribute)": [[95, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.inputAnnotatorTypes"]], "loadsavedmodel() (e5embeddings static method)": [[95, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.loadSavedModel"]], "name (e5embeddings attribute)": [[95, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.name"]], "outputannotatortype (e5embeddings attribute)": [[95, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.outputAnnotatorType"]], "pretrained() (e5embeddings static method)": [[95, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.pretrained"]], "setconfigprotobytes() (e5embeddings method)": [[95, "sparknlp.annotator.embeddings.e5_embeddings.E5Embeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.e5_embeddings": [[95, "module-sparknlp.annotator.embeddings.e5_embeddings"]], "elmoembeddings (class in sparknlp.annotator.embeddings.elmo_embeddings)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings"]], "batchsize (elmoembeddings attribute)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.batchSize"]], "configprotobytes (elmoembeddings attribute)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.configProtoBytes"]], "inputannotatortypes (elmoembeddings attribute)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (elmoembeddings static method)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.loadSavedModel"]], "name (elmoembeddings attribute)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.name"]], "outputannotatortype (elmoembeddings attribute)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.outputAnnotatorType"]], "poolinglayer (elmoembeddings attribute)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.poolingLayer"]], "pretrained() (elmoembeddings static method)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.pretrained"]], "setbatchsize() (elmoembeddings method)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setBatchSize"]], "setconfigprotobytes() (elmoembeddings method)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setConfigProtoBytes"]], "setpoolinglayer() (elmoembeddings method)": [[96, "sparknlp.annotator.embeddings.elmo_embeddings.ElmoEmbeddings.setPoolingLayer"]], "sparknlp.annotator.embeddings.elmo_embeddings": [[96, "module-sparknlp.annotator.embeddings.elmo_embeddings"]], "instructorembeddings (class in sparknlp.annotator.embeddings.instructor_embeddings)": [[97, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings"]], "configprotobytes (instructorembeddings attribute)": [[97, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.configProtoBytes"]], "inputannotatortypes (instructorembeddings attribute)": [[97, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.inputAnnotatorTypes"]], "instruction (instructorembeddings attribute)": [[97, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.instruction"]], "loadsavedmodel() (instructorembeddings static method)": [[97, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.loadSavedModel"]], "name (instructorembeddings attribute)": [[97, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.name"]], "outputannotatortype (instructorembeddings attribute)": [[97, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.outputAnnotatorType"]], "pretrained() (instructorembeddings static method)": [[97, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.pretrained"]], "setconfigprotobytes() (instructorembeddings method)": [[97, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setConfigProtoBytes"]], "setinstruction() (instructorembeddings method)": [[97, "sparknlp.annotator.embeddings.instructor_embeddings.InstructorEmbeddings.setInstruction"]], "sparknlp.annotator.embeddings.instructor_embeddings": [[97, "module-sparknlp.annotator.embeddings.instructor_embeddings"]], "longformerembeddings (class in sparknlp.annotator.embeddings.longformer_embeddings)": [[98, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings"]], "configprotobytes (longformerembeddings attribute)": [[98, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.configProtoBytes"]], "inputannotatortypes (longformerembeddings attribute)": [[98, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (longformerembeddings static method)": [[98, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.loadSavedModel"]], "name (longformerembeddings attribute)": [[98, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.name"]], "outputannotatortype (longformerembeddings attribute)": [[98, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.outputAnnotatorType"]], "pretrained() (longformerembeddings static method)": [[98, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.pretrained"]], "setconfigprotobytes() (longformerembeddings method)": [[98, "sparknlp.annotator.embeddings.longformer_embeddings.LongformerEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.longformer_embeddings": [[98, "module-sparknlp.annotator.embeddings.longformer_embeddings"]], "mpnetembeddings (class in sparknlp.annotator.embeddings.mpnet_embeddings)": [[99, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings"]], "configprotobytes (mpnetembeddings attribute)": [[99, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.configProtoBytes"]], "inputannotatortypes (mpnetembeddings attribute)": [[99, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mpnetembeddings static method)": [[99, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.loadSavedModel"]], "name (mpnetembeddings attribute)": [[99, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.name"]], "outputannotatortype (mpnetembeddings attribute)": [[99, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.outputAnnotatorType"]], "pretrained() (mpnetembeddings static method)": [[99, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.pretrained"]], "setconfigprotobytes() (mpnetembeddings method)": [[99, "sparknlp.annotator.embeddings.mpnet_embeddings.MPNetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.mpnet_embeddings": [[99, "module-sparknlp.annotator.embeddings.mpnet_embeddings"]], "mxbaiembeddings (class in sparknlp.annotator.embeddings.mxbai_embeddings)": [[100, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings"]], "inputannotatortypes (mxbaiembeddings attribute)": [[100, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (mxbaiembeddings static method)": [[100, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.loadSavedModel"]], "name (mxbaiembeddings attribute)": [[100, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.name"]], "outputannotatortype (mxbaiembeddings attribute)": [[100, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.outputAnnotatorType"]], "poolingstrategy (mxbaiembeddings attribute)": [[100, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.poolingStrategy"]], "pretrained() (mxbaiembeddings static method)": [[100, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.pretrained"]], "setpoolingstrategy() (mxbaiembeddings method)": [[100, "sparknlp.annotator.embeddings.mxbai_embeddings.MxbaiEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.mxbai_embeddings": [[100, "module-sparknlp.annotator.embeddings.mxbai_embeddings"]], "nomicembeddings (class in sparknlp.annotator.embeddings.nomic_embeddings)": [[101, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings"]], "configprotobytes (nomicembeddings attribute)": [[101, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.configProtoBytes"]], "inputannotatortypes (nomicembeddings attribute)": [[101, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (nomicembeddings static method)": [[101, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.loadSavedModel"]], "name (nomicembeddings attribute)": [[101, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.name"]], "outputannotatortype (nomicembeddings attribute)": [[101, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.outputAnnotatorType"]], "pretrained() (nomicembeddings static method)": [[101, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.pretrained"]], "setconfigprotobytes() (nomicembeddings method)": [[101, "sparknlp.annotator.embeddings.nomic_embeddings.NomicEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.nomic_embeddings": [[101, "module-sparknlp.annotator.embeddings.nomic_embeddings"]], "robertaembeddings (class in sparknlp.annotator.embeddings.roberta_embeddings)": [[102, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings"]], "configprotobytes (robertaembeddings attribute)": [[102, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (robertaembeddings attribute)": [[102, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertaembeddings static method)": [[102, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.loadSavedModel"]], "name (robertaembeddings attribute)": [[102, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.name"]], "outputannotatortype (robertaembeddings attribute)": [[102, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (robertaembeddings static method)": [[102, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (robertaembeddings method)": [[102, "sparknlp.annotator.embeddings.roberta_embeddings.RoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_embeddings": [[102, "module-sparknlp.annotator.embeddings.roberta_embeddings"]], "robertasentenceembeddings (class in sparknlp.annotator.embeddings.roberta_sentence_embeddings)": [[103, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings"]], "configprotobytes (robertasentenceembeddings attribute)": [[103, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (robertasentenceembeddings attribute)": [[103, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (robertasentenceembeddings static method)": [[103, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.loadSavedModel"]], "name (robertasentenceembeddings attribute)": [[103, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.name"]], "outputannotatortype (robertasentenceembeddings attribute)": [[103, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (robertasentenceembeddings static method)": [[103, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (robertasentenceembeddings method)": [[103, "sparknlp.annotator.embeddings.roberta_sentence_embeddings.RoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.roberta_sentence_embeddings": [[103, "module-sparknlp.annotator.embeddings.roberta_sentence_embeddings"]], "sentenceembeddings (class in sparknlp.annotator.embeddings.sentence_embeddings)": [[104, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings"]], "inputannotatortypes (sentenceembeddings attribute)": [[104, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.inputAnnotatorTypes"]], "name (sentenceembeddings attribute)": [[104, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.name"]], "outputannotatortype (sentenceembeddings attribute)": [[104, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.outputAnnotatorType"]], "poolingstrategy (sentenceembeddings attribute)": [[104, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.poolingStrategy"]], "setpoolingstrategy() (sentenceembeddings method)": [[104, "sparknlp.annotator.embeddings.sentence_embeddings.SentenceEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.sentence_embeddings": [[104, "module-sparknlp.annotator.embeddings.sentence_embeddings"]], "snowflakeembeddings (class in sparknlp.annotator.embeddings.snowflake_embeddings)": [[105, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings"]], "inputannotatortypes (snowflakeembeddings attribute)": [[105, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (snowflakeembeddings static method)": [[105, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.loadSavedModel"]], "name (snowflakeembeddings attribute)": [[105, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.name"]], "outputannotatortype (snowflakeembeddings attribute)": [[105, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.outputAnnotatorType"]], "poolingstrategy (snowflakeembeddings attribute)": [[105, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.poolingStrategy"]], "pretrained() (snowflakeembeddings static method)": [[105, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.pretrained"]], "setpoolingstrategy() (snowflakeembeddings method)": [[105, "sparknlp.annotator.embeddings.snowflake_embeddings.SnowFlakeEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.snowflake_embeddings": [[105, "module-sparknlp.annotator.embeddings.snowflake_embeddings"]], "uaeembeddings (class in sparknlp.annotator.embeddings.uae_embeddings)": [[106, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings"]], "inputannotatortypes (uaeembeddings attribute)": [[106, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (uaeembeddings static method)": [[106, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.loadSavedModel"]], "name (uaeembeddings attribute)": [[106, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.name"]], "outputannotatortype (uaeembeddings attribute)": [[106, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.outputAnnotatorType"]], "poolingstrategy (uaeembeddings attribute)": [[106, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.poolingStrategy"]], "pretrained() (uaeembeddings static method)": [[106, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.pretrained"]], "setpoolingstrategy() (uaeembeddings method)": [[106, "sparknlp.annotator.embeddings.uae_embeddings.UAEEmbeddings.setPoolingStrategy"]], "sparknlp.annotator.embeddings.uae_embeddings": [[106, "module-sparknlp.annotator.embeddings.uae_embeddings"]], "universalsentenceencoder (class in sparknlp.annotator.embeddings.universal_sentence_encoder)": [[107, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder"]], "configprotobytes (universalsentenceencoder attribute)": [[107, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.configProtoBytes"]], "inputannotatortypes (universalsentenceencoder attribute)": [[107, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.inputAnnotatorTypes"]], "loadsp (universalsentenceencoder attribute)": [[107, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSP"]], "loadsavedmodel() (universalsentenceencoder static method)": [[107, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.loadSavedModel"]], "name (universalsentenceencoder attribute)": [[107, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.name"]], "outputannotatortype (universalsentenceencoder attribute)": [[107, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.outputAnnotatorType"]], "pretrained() (universalsentenceencoder static method)": [[107, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.pretrained"]], "setconfigprotobytes() (universalsentenceencoder method)": [[107, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setConfigProtoBytes"]], "setloadsp() (universalsentenceencoder method)": [[107, "sparknlp.annotator.embeddings.universal_sentence_encoder.UniversalSentenceEncoder.setLoadSP"]], "sparknlp.annotator.embeddings.universal_sentence_encoder": [[107, "module-sparknlp.annotator.embeddings.universal_sentence_encoder"]], "word2vecapproach (class in sparknlp.annotator.embeddings.word2vec)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach"]], "word2vecmodel (class in sparknlp.annotator.embeddings.word2vec)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecModel"]], "getvectors() (word2vecmodel method)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.getVectors"]], "inputannotatortypes (word2vecapproach attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.inputAnnotatorTypes"]], "inputannotatortypes (word2vecmodel attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.inputAnnotatorTypes"]], "maxiter (word2vecapproach attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxIter"]], "maxsentencelength (word2vecapproach attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.maxSentenceLength"]], "mincount (word2vecapproach attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.minCount"]], "name (word2vecmodel attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.name"]], "numpartitions (word2vecapproach attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.numPartitions"]], "outputannotatortype (word2vecapproach attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.outputAnnotatorType"]], "outputannotatortype (word2vecmodel attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.outputAnnotatorType"]], "pretrained() (word2vecmodel static method)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.pretrained"]], "seed (word2vecapproach attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.seed"]], "setmaxiter() (word2vecapproach method)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxIter"]], "setmaxsentencelength() (word2vecapproach method)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMaxSentenceLength"]], "setmincount() (word2vecapproach method)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setMinCount"]], "setnumpartitions() (word2vecapproach method)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setNumPartitions"]], "setseed() (word2vecapproach method)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setSeed"]], "setstepsize() (word2vecapproach method)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setStepSize"]], "setvectorsize() (word2vecapproach method)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setVectorSize"]], "setvectorsize() (word2vecmodel method)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.setVectorSize"]], "setwindowsize() (word2vecapproach method)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.setWindowSize"]], "sparknlp.annotator.embeddings.word2vec": [[108, "module-sparknlp.annotator.embeddings.word2vec"]], "stepsize (word2vecapproach attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.stepSize"]], "vectorsize (word2vecapproach attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.vectorSize"]], "vectorsize (word2vecmodel attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecModel.vectorSize"]], "windowsize (word2vecapproach attribute)": [[108, "sparknlp.annotator.embeddings.word2vec.Word2VecApproach.windowSize"]], "wordembeddings (class in sparknlp.annotator.embeddings.word_embeddings)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings"]], "wordembeddingsmodel (class in sparknlp.annotator.embeddings.word_embeddings)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel"]], "databases (wordembeddingsmodel attribute)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.databases"]], "inputannotatortypes (wordembeddings attribute)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.inputAnnotatorTypes"]], "inputannotatortypes (wordembeddingsmodel attribute)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.inputAnnotatorTypes"]], "loadstorage() (wordembeddingsmodel static method)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.loadStorage"]], "name (wordembeddings attribute)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.name"]], "name (wordembeddingsmodel attribute)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.name"]], "outputannotatortype (wordembeddings attribute)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.outputAnnotatorType"]], "outputannotatortype (wordembeddingsmodel attribute)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.outputAnnotatorType"]], "overallcoverage() (wordembeddingsmodel static method)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.overallCoverage"]], "pretrained() (wordembeddingsmodel static method)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.pretrained"]], "readcachesize (wordembeddings attribute)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.readCacheSize"]], "readcachesize (wordembeddingsmodel attribute)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.readCacheSize"]], "setreadcachesize() (wordembeddings method)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setReadCacheSize"]], "setreadcachesize() (wordembeddingsmodel method)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.setReadCacheSize"]], "setwritebuffersize() (wordembeddings method)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.setWriteBufferSize"]], "sparknlp.annotator.embeddings.word_embeddings": [[109, "module-sparknlp.annotator.embeddings.word_embeddings"]], "withcoveragecolumn() (wordembeddingsmodel static method)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddingsModel.withCoverageColumn"]], "writebuffersize (wordembeddings attribute)": [[109, "sparknlp.annotator.embeddings.word_embeddings.WordEmbeddings.writeBufferSize"]], "xlmrobertaembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_embeddings)": [[110, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings"]], "configprotobytes (xlmrobertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertaembeddings static method)": [[110, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.loadSavedModel"]], "name (xlmrobertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.name"]], "outputannotatortype (xlmrobertaembeddings attribute)": [[110, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertaembeddings static method)": [[110, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertaembeddings method)": [[110, "sparknlp.annotator.embeddings.xlm_roberta_embeddings.XlmRoBertaEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_embeddings": [[110, "module-sparknlp.annotator.embeddings.xlm_roberta_embeddings"]], "xlmrobertasentenceembeddings (class in sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings)": [[111, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings"]], "configprotobytes (xlmrobertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.configProtoBytes"]], "inputannotatortypes (xlmrobertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlmrobertasentenceembeddings static method)": [[111, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.loadSavedModel"]], "name (xlmrobertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.name"]], "outputannotatortype (xlmrobertasentenceembeddings attribute)": [[111, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.outputAnnotatorType"]], "pretrained() (xlmrobertasentenceembeddings static method)": [[111, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.pretrained"]], "setconfigprotobytes() (xlmrobertasentenceembeddings method)": [[111, "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings.XlmRoBertaSentenceEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings": [[111, "module-sparknlp.annotator.embeddings.xlm_roberta_sentence_embeddings"]], "xlnetembeddings (class in sparknlp.annotator.embeddings.xlnet_embeddings)": [[112, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings"]], "configprotobytes (xlnetembeddings attribute)": [[112, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.configProtoBytes"]], "inputannotatortypes (xlnetembeddings attribute)": [[112, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.inputAnnotatorTypes"]], "loadsavedmodel() (xlnetembeddings static method)": [[112, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.loadSavedModel"]], "name (xlnetembeddings attribute)": [[112, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.name"]], "outputannotatortype (xlnetembeddings attribute)": [[112, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.outputAnnotatorType"]], "pretrained() (xlnetembeddings static method)": [[112, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.pretrained"]], "setconfigprotobytes() (xlnetembeddings method)": [[112, "sparknlp.annotator.embeddings.xlnet_embeddings.XlnetEmbeddings.setConfigProtoBytes"]], "sparknlp.annotator.embeddings.xlnet_embeddings": [[112, "module-sparknlp.annotator.embeddings.xlnet_embeddings"]], "sparknlp.annotator.er": [[113, "module-sparknlp.annotator.er"]], "entityrulerapproach (class in sparknlp.annotator.er.entity_ruler)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach"]], "entityrulermodel (class in sparknlp.annotator.er.entity_ruler)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerModel"]], "alphabet (entityrulerapproach attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.alphabet"]], "database (entityrulermodel attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.database"]], "inputannotatortypes (entityrulerapproach attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.inputAnnotatorTypes"]], "inputannotatortypes (entityrulermodel attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.inputAnnotatorTypes"]], "loadstorage() (entityrulermodel static method)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.loadStorage"]], "name (entityrulerapproach attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.name"]], "name (entityrulermodel attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.name"]], "optionalinputannotatortypes (entityrulerapproach attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (entityrulermodel attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (entityrulerapproach attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.outputAnnotatorType"]], "outputannotatortype (entityrulermodel attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.outputAnnotatorType"]], "patternsresource (entityrulerapproach attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.patternsResource"]], "pretrained() (entityrulermodel static method)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerModel.pretrained"]], "sentencematch (entityrulerapproach attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.sentenceMatch"]], "setalphabetresource() (entityrulerapproach method)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerapproach method)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setPatternsResource"]], "setsentencematch() (entityrulerapproach method)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setSentenceMatch"]], "setusestorage() (entityrulerapproach method)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.setUseStorage"]], "sparknlp.annotator.er.entity_ruler": [[114, "module-sparknlp.annotator.er.entity_ruler"]], "usestorage (entityrulerapproach attribute)": [[114, "sparknlp.annotator.er.entity_ruler.EntityRulerApproach.useStorage"]], "graphextraction (class in sparknlp.annotator.graph_extraction)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction"]], "delimiter (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.delimiter"]], "dependencyparsermodel (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.dependencyParserModel"]], "entitytypes (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.entityTypes"]], "explodeentities (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.explodeEntities"]], "includeedges (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.includeEdges"]], "inputannotatortypes (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.inputAnnotatorTypes"]], "maxsentencesize (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.maxSentenceSize"]], "mergeentities (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntities"]], "mergeentitiesiobformat (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.mergeEntitiesIOBFormat"]], "minsentencesize (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.minSentenceSize"]], "name (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.name"]], "optionalinputannotatortypes (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.optionalInputAnnotatorTypes"]], "outputannotatortype (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.outputAnnotatorType"]], "posmodel (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.posModel"]], "relationshiptypes (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.relationshipTypes"]], "roottokens (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.rootTokens"]], "setdelimiter() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setDelimiter"]], "setdependencyparsermodel() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setDependencyParserModel"]], "setentitytypes() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setEntityTypes"]], "setexplodeentities() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setExplodeEntities"]], "setincludeedges() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setIncludeEdges"]], "setmaxsentencesize() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setMaxSentenceSize"]], "setmergeentities() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntities"]], "setmergeentitiesiobformat() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setMergeEntitiesIOBFormat"]], "setminsentencesize() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setMinSentenceSize"]], "setposmodel() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setPosModel"]], "setrelationshiptypes() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setRelationshipTypes"]], "setroottokens() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setRootTokens"]], "settypeddependencyparsermodel() (graphextraction method)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.setTypedDependencyParserModel"]], "sparknlp.annotator.graph_extraction": [[115, "module-sparknlp.annotator.graph_extraction"]], "typeddependencyparsermodel (graphextraction attribute)": [[115, "sparknlp.annotator.graph_extraction.GraphExtraction.typedDependencyParserModel"]], "sparknlp.annotator.keyword_extraction": [[116, "module-sparknlp.annotator.keyword_extraction"]], "yakekeywordextraction (class in sparknlp.annotator.keyword_extraction.yake_keyword_extraction)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction"]], "getstopwords() (yakekeywordextraction method)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.getStopWords"]], "inputannotatortypes (yakekeywordextraction attribute)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.inputAnnotatorTypes"]], "loaddefaultstopwords() (yakekeywordextraction method)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.loadDefaultStopWords"]], "maxngrams (yakekeywordextraction attribute)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.maxNGrams"]], "minngrams (yakekeywordextraction attribute)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.minNGrams"]], "nkeywords (yakekeywordextraction attribute)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.nKeywords"]], "name (yakekeywordextraction attribute)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.name"]], "outputannotatortype (yakekeywordextraction attribute)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.outputAnnotatorType"]], "setmaxngrams() (yakekeywordextraction method)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMaxNGrams"]], "setminngrams() (yakekeywordextraction method)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setMinNGrams"]], "setnkeywords() (yakekeywordextraction method)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setNKeywords"]], "setstopwords() (yakekeywordextraction method)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setStopWords"]], "setthreshold() (yakekeywordextraction method)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setThreshold"]], "setwindowsize() (yakekeywordextraction method)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.setWindowSize"]], "sparknlp.annotator.keyword_extraction.yake_keyword_extraction": [[117, "module-sparknlp.annotator.keyword_extraction.yake_keyword_extraction"]], "stopwords (yakekeywordextraction attribute)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.stopWords"]], "threshold (yakekeywordextraction attribute)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.threshold"]], "windowsize (yakekeywordextraction attribute)": [[117, "sparknlp.annotator.keyword_extraction.yake_keyword_extraction.YakeKeywordExtraction.windowSize"]], "sparknlp.annotator.ld_dl": [[118, "module-sparknlp.annotator.ld_dl"]], "languagedetectordl (class in sparknlp.annotator.ld_dl.language_detector_dl)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL"]], "coalescesentences (languagedetectordl attribute)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.coalesceSentences"]], "configprotobytes (languagedetectordl attribute)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.configProtoBytes"]], "inputannotatortypes (languagedetectordl attribute)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.inputAnnotatorTypes"]], "languages (languagedetectordl attribute)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.languages"]], "name (languagedetectordl attribute)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.name"]], "outputannotatortype (languagedetectordl attribute)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.outputAnnotatorType"]], "pretrained() (languagedetectordl static method)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.pretrained"]], "setcoalescesentences() (languagedetectordl method)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setCoalesceSentences"]], "setconfigprotobytes() (languagedetectordl method)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setConfigProtoBytes"]], "setthreshold() (languagedetectordl method)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThreshold"]], "setthresholdlabel() (languagedetectordl method)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.setThresholdLabel"]], "sparknlp.annotator.ld_dl.language_detector_dl": [[119, "module-sparknlp.annotator.ld_dl.language_detector_dl"]], "threshold (languagedetectordl attribute)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.threshold"]], "thresholdlabel (languagedetectordl attribute)": [[119, "sparknlp.annotator.ld_dl.language_detector_dl.LanguageDetectorDL.thresholdLabel"]], "lemmatizer (class in sparknlp.annotator.lemmatizer)": [[120, "sparknlp.annotator.lemmatizer.Lemmatizer"]], "lemmatizermodel (class in sparknlp.annotator.lemmatizer)": [[120, "sparknlp.annotator.lemmatizer.LemmatizerModel"]], "dictionary (lemmatizer attribute)": [[120, "sparknlp.annotator.lemmatizer.Lemmatizer.dictionary"]], "formcol (lemmatizer attribute)": [[120, "sparknlp.annotator.lemmatizer.Lemmatizer.formCol"]], "inputannotatortypes (lemmatizer attribute)": [[120, "sparknlp.annotator.lemmatizer.Lemmatizer.inputAnnotatorTypes"]], "inputannotatortypes (lemmatizermodel attribute)": [[120, "sparknlp.annotator.lemmatizer.LemmatizerModel.inputAnnotatorTypes"]], "lemmacol (lemmatizer attribute)": [[120, "sparknlp.annotator.lemmatizer.Lemmatizer.lemmaCol"]], "name (lemmatizermodel attribute)": [[120, "sparknlp.annotator.lemmatizer.LemmatizerModel.name"]], "outputannotatortype (lemmatizer attribute)": [[120, "sparknlp.annotator.lemmatizer.Lemmatizer.outputAnnotatorType"]], "outputannotatortype (lemmatizermodel attribute)": [[120, "sparknlp.annotator.lemmatizer.LemmatizerModel.outputAnnotatorType"]], "pretrained() (lemmatizermodel static method)": [[120, "sparknlp.annotator.lemmatizer.LemmatizerModel.pretrained"]], "setdictionary() (lemmatizer method)": [[120, "sparknlp.annotator.lemmatizer.Lemmatizer.setDictionary"]], "setformcol() (lemmatizer method)": [[120, "sparknlp.annotator.lemmatizer.Lemmatizer.setFormCol"]], "setlemmacol() (lemmatizer method)": [[120, "sparknlp.annotator.lemmatizer.Lemmatizer.setLemmaCol"]], "sparknlp.annotator.lemmatizer": [[120, "module-sparknlp.annotator.lemmatizer"]], "sparknlp.annotator.matcher": [[121, "module-sparknlp.annotator.matcher"]], "bigtextmatcher (class in sparknlp.annotator.matcher.big_text_matcher)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher"]], "bigtextmatchermodel (class in sparknlp.annotator.matcher.big_text_matcher)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel"]], "casesensitive (bigtextmatcher attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.caseSensitive"]], "casesensitive (bigtextmatchermodel attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.caseSensitive"]], "databases (bigtextmatchermodel attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.databases"]], "entities (bigtextmatcher attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.entities"]], "inputannotatortypes (bigtextmatcher attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (bigtextmatchermodel attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.inputAnnotatorTypes"]], "loadstorage() (bigtextmatchermodel static method)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.loadStorage"]], "mergeoverlapping (bigtextmatcher attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.mergeOverlapping"]], "mergeoverlapping (bigtextmatchermodel attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.mergeOverlapping"]], "name (bigtextmatchermodel attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.name"]], "outputannotatortype (bigtextmatcher attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.outputAnnotatorType"]], "outputannotatortype (bigtextmatchermodel attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.outputAnnotatorType"]], "pretrained() (bigtextmatchermodel static method)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.pretrained"]], "searchtrie (bigtextmatchermodel attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.searchTrie"]], "setcasesensitive() (bigtextmatcher method)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setCaseSensitive"]], "setcasesensitive() (bigtextmatchermodel method)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setCaseSensitive"]], "setentities() (bigtextmatcher method)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setEntities"]], "setmergeoverlapping() (bigtextmatcher method)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (bigtextmatchermodel method)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcherModel.setMergeOverlapping"]], "settokenizer() (bigtextmatcher method)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.setTokenizer"]], "sparknlp.annotator.matcher.big_text_matcher": [[122, "module-sparknlp.annotator.matcher.big_text_matcher"]], "tokenizer (bigtextmatcher attribute)": [[122, "sparknlp.annotator.matcher.big_text_matcher.BigTextMatcher.tokenizer"]], "datematcher (class in sparknlp.annotator.matcher.date_matcher)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcher"]], "datematcherutils (class in sparknlp.annotator.matcher.date_matcher)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils"]], "aggressivematching (datematcherutils attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.aggressiveMatching"]], "anchordateday (datematcherutils attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateDay"]], "anchordatemonth (datematcherutils attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateMonth"]], "anchordateyear (datematcherutils attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.anchorDateYear"]], "defaultdaywhenmissing (datematcherutils attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.defaultDayWhenMissing"]], "inputannotatortypes (datematcher attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcher.inputAnnotatorTypes"]], "inputformats (datematcherutils attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.inputFormats"]], "name (datematcher attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcher.name"]], "outputannotatortype (datematcher attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcher.outputAnnotatorType"]], "outputformat (datematcherutils attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.outputFormat"]], "readmonthfirst (datematcherutils attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.readMonthFirst"]], "relaxedfactorystrategy (datematcherutils attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.relaxedFactoryStrategy"]], "setaggressivematching() (datematcherutils method)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAggressiveMatching"]], "setanchordateday() (datematcherutils method)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateDay"]], "setanchordatemonth() (datematcherutils method)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateMonth"]], "setanchordateyear() (datematcherutils method)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setAnchorDateYear"]], "setdefaultdaywhenmissing() (datematcherutils method)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setDefaultDayWhenMissing"]], "setinputformats() (datematcherutils method)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setInputFormats"]], "setoutputformat() (datematcherutils method)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setOutputFormat"]], "setreadmonthfirst() (datematcherutils method)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setReadMonthFirst"]], "setrelaxedfactorystrategy() (datematcherutils method)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setRelaxedFactoryStrategy"]], "setsourcelanguage() (datematcherutils method)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.setSourceLanguage"]], "sourcelanguage (datematcherutils attribute)": [[123, "sparknlp.annotator.matcher.date_matcher.DateMatcherUtils.sourceLanguage"]], "sparknlp.annotator.matcher.date_matcher": [[123, "module-sparknlp.annotator.matcher.date_matcher"]], "multidatematcher (class in sparknlp.annotator.matcher.multi_date_matcher)": [[124, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher"]], "inputannotatortypes (multidatematcher attribute)": [[124, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.inputAnnotatorTypes"]], "name (multidatematcher attribute)": [[124, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.name"]], "outputannotatortype (multidatematcher attribute)": [[124, "sparknlp.annotator.matcher.multi_date_matcher.MultiDateMatcher.outputAnnotatorType"]], "sparknlp.annotator.matcher.multi_date_matcher": [[124, "module-sparknlp.annotator.matcher.multi_date_matcher"]], "regexmatcher (class in sparknlp.annotator.matcher.regex_matcher)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher"]], "regexmatchermodel (class in sparknlp.annotator.matcher.regex_matcher)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel"]], "delimiter (regexmatcher attribute)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.delimiter"]], "externalrules (regexmatcher attribute)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.externalRules"]], "inputannotatortypes (regexmatcher attribute)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.inputAnnotatorTypes"]], "inputannotatortypes (regexmatchermodel attribute)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.inputAnnotatorTypes"]], "name (regexmatchermodel attribute)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.name"]], "outputannotatortype (regexmatcher attribute)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.outputAnnotatorType"]], "outputannotatortype (regexmatchermodel attribute)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcherModel.outputAnnotatorType"]], "rules (regexmatcher attribute)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.rules"]], "setdelimiter() (regexmatcher method)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setDelimiter"]], "setexternalrules() (regexmatcher method)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setExternalRules"]], "setrules() (regexmatcher method)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setRules"]], "setstrategy() (regexmatcher method)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.setStrategy"]], "sparknlp.annotator.matcher.regex_matcher": [[125, "module-sparknlp.annotator.matcher.regex_matcher"]], "strategy (regexmatcher attribute)": [[125, "sparknlp.annotator.matcher.regex_matcher.RegexMatcher.strategy"]], "textmatcher (class in sparknlp.annotator.matcher.text_matcher)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher"]], "textmatchermodel (class in sparknlp.annotator.matcher.text_matcher)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel"]], "buildfromtokens (textmatcher attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.buildFromTokens"]], "buildfromtokens (textmatchermodel attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.buildFromTokens"]], "casesensitive (textmatcher attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.caseSensitive"]], "entities (textmatcher attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entities"]], "entityvalue (textmatcher attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.entityValue"]], "entityvalue (textmatchermodel attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.entityValue"]], "inputannotatortypes (textmatcher attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.inputAnnotatorTypes"]], "inputannotatortypes (textmatchermodel attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.inputAnnotatorTypes"]], "mergeoverlapping (textmatcher attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.mergeOverlapping"]], "mergeoverlapping (textmatchermodel attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.mergeOverlapping"]], "name (textmatchermodel attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.name"]], "outputannotatortype (textmatcher attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.outputAnnotatorType"]], "outputannotatortype (textmatchermodel attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.outputAnnotatorType"]], "pretrained() (textmatchermodel static method)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.pretrained"]], "searchtrie (textmatchermodel attribute)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.searchTrie"]], "setbuildfromtokens() (textmatcher method)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setBuildFromTokens"]], "setbuildfromtokens() (textmatchermodel method)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setBuildFromTokens"]], "setcasesensitive() (textmatcher method)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setCaseSensitive"]], "setentities() (textmatcher method)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntities"]], "setentityvalue() (textmatcher method)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setEntityValue"]], "setentityvalue() (textmatchermodel method)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setEntityValue"]], "setmergeoverlapping() (textmatcher method)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcher.setMergeOverlapping"]], "setmergeoverlapping() (textmatchermodel method)": [[126, "sparknlp.annotator.matcher.text_matcher.TextMatcherModel.setMergeOverlapping"]], "sparknlp.annotator.matcher.text_matcher": [[126, "module-sparknlp.annotator.matcher.text_matcher"]], "ngramgenerator (class in sparknlp.annotator.n_gram_generator)": [[127, "sparknlp.annotator.n_gram_generator.NGramGenerator"]], "delimiter (ngramgenerator attribute)": [[127, "sparknlp.annotator.n_gram_generator.NGramGenerator.delimiter"]], "enablecumulative (ngramgenerator attribute)": [[127, "sparknlp.annotator.n_gram_generator.NGramGenerator.enableCumulative"]], "inputannotatortypes (ngramgenerator attribute)": [[127, "sparknlp.annotator.n_gram_generator.NGramGenerator.inputAnnotatorTypes"]], "n (ngramgenerator attribute)": [[127, "sparknlp.annotator.n_gram_generator.NGramGenerator.n"]], "name (ngramgenerator attribute)": [[127, "sparknlp.annotator.n_gram_generator.NGramGenerator.name"]], "outputannotatortype (ngramgenerator attribute)": [[127, "sparknlp.annotator.n_gram_generator.NGramGenerator.outputAnnotatorType"]], "setdelimiter() (ngramgenerator method)": [[127, "sparknlp.annotator.n_gram_generator.NGramGenerator.setDelimiter"]], "setenablecumulative() (ngramgenerator method)": [[127, "sparknlp.annotator.n_gram_generator.NGramGenerator.setEnableCumulative"]], "setn() (ngramgenerator method)": [[127, "sparknlp.annotator.n_gram_generator.NGramGenerator.setN"]], "sparknlp.annotator.n_gram_generator": [[127, "module-sparknlp.annotator.n_gram_generator"]], "sparknlp.annotator.ner": [[128, "module-sparknlp.annotator.ner"]], "nerapproach (class in sparknlp.annotator.ner.ner_approach)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach"]], "entities (nerapproach attribute)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach.entities"]], "getlabelcolumn() (nerapproach method)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach.getLabelColumn"]], "labelcolumn (nerapproach attribute)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach.labelColumn"]], "maxepochs (nerapproach attribute)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach.maxEpochs"]], "minepochs (nerapproach attribute)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach.minEpochs"]], "randomseed (nerapproach attribute)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach.randomSeed"]], "setentities() (nerapproach method)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach.setEntities"]], "setlabelcolumn() (nerapproach method)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach.setLabelColumn"]], "setmaxepochs() (nerapproach method)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach.setMaxEpochs"]], "setminepochs() (nerapproach method)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach.setMinEpochs"]], "setrandomseed() (nerapproach method)": [[129, "sparknlp.annotator.ner.ner_approach.NerApproach.setRandomSeed"]], "sparknlp.annotator.ner.ner_approach": [[129, "module-sparknlp.annotator.ner.ner_approach"]], "nerconverter (class in sparknlp.annotator.ner.ner_converter)": [[130, "sparknlp.annotator.ner.ner_converter.NerConverter"]], "inputannotatortypes (nerconverter attribute)": [[130, "sparknlp.annotator.ner.ner_converter.NerConverter.inputAnnotatorTypes"]], "name (nerconverter attribute)": [[130, "sparknlp.annotator.ner.ner_converter.NerConverter.name"]], "nerhasnoschema (nerconverter attribute)": [[130, "sparknlp.annotator.ner.ner_converter.NerConverter.nerHasNoSchema"]], "outputannotatortype (nerconverter attribute)": [[130, "sparknlp.annotator.ner.ner_converter.NerConverter.outputAnnotatorType"]], "preserveposition (nerconverter attribute)": [[130, "sparknlp.annotator.ner.ner_converter.NerConverter.preservePosition"]], "setnerhasnoschema() (nerconverter method)": [[130, "sparknlp.annotator.ner.ner_converter.NerConverter.setNerHasNoSchema"]], "setpreserveposition() (nerconverter method)": [[130, "sparknlp.annotator.ner.ner_converter.NerConverter.setPreservePosition"]], "setwhitelist() (nerconverter method)": [[130, "sparknlp.annotator.ner.ner_converter.NerConverter.setWhiteList"]], "sparknlp.annotator.ner.ner_converter": [[130, "module-sparknlp.annotator.ner.ner_converter"]], "whitelist (nerconverter attribute)": [[130, "sparknlp.annotator.ner.ner_converter.NerConverter.whiteList"]], "nercrfapproach (class in sparknlp.annotator.ner.ner_crf)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach"]], "nercrfmodel (class in sparknlp.annotator.ner.ner_crf)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfModel"]], "c0 (nercrfapproach attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.c0"]], "externalfeatures (nercrfapproach attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.externalFeatures"]], "includeconfidence (nercrfapproach attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.includeConfidence"]], "includeconfidence (nercrfmodel attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfModel.includeConfidence"]], "inputannotatortypes (nercrfapproach attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.inputAnnotatorTypes"]], "inputannotatortypes (nercrfmodel attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfModel.inputAnnotatorTypes"]], "l2 (nercrfapproach attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.l2"]], "losseps (nercrfapproach attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.lossEps"]], "minw (nercrfapproach attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.minW"]], "name (nercrfmodel attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfModel.name"]], "outputannotatortype (nercrfapproach attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.outputAnnotatorType"]], "outputannotatortype (nercrfmodel attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfModel.outputAnnotatorType"]], "pretrained() (nercrfmodel static method)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfModel.pretrained"]], "setc0() (nercrfapproach method)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setC0"]], "setexternalfeatures() (nercrfapproach method)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setExternalFeatures"]], "setincludeconfidence() (nercrfapproach method)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setIncludeConfidence"]], "setincludeconfidence() (nercrfmodel method)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfModel.setIncludeConfidence"]], "setl2() (nercrfapproach method)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setL2"]], "setlosseps() (nercrfapproach method)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setLossEps"]], "setminw() (nercrfapproach method)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setMinW"]], "setverbose() (nercrfapproach method)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.setVerbose"]], "sparknlp.annotator.ner.ner_crf": [[131, "module-sparknlp.annotator.ner.ner_crf"]], "verbose (nercrfapproach attribute)": [[131, "sparknlp.annotator.ner.ner_crf.NerCrfApproach.verbose"]], "nerdlapproach (class in sparknlp.annotator.ner.ner_dl)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach"]], "nerdlmodel (class in sparknlp.annotator.ner.ner_dl)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel"]], "batchsize (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.batchSize"]], "bestmodelmetric (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.bestModelMetric"]], "classes (nerdlmodel attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel.classes"]], "configprotobytes (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.configProtoBytes"]], "configprotobytes (nerdlmodel attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel.configProtoBytes"]], "dropout (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.dropout"]], "enablememoryoptimizer (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.enableMemoryOptimizer"]], "graphfolder (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.graphFolder"]], "includeallconfidencescores (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeAllConfidenceScores"]], "includeallconfidencescores (nerdlmodel attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeAllConfidenceScores"]], "includeconfidence (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.includeConfidence"]], "includeconfidence (nerdlmodel attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel.includeConfidence"]], "inputannotatortypes (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (nerdlmodel attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel.inputAnnotatorTypes"]], "lr (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.lr"]], "name (nerdlmodel attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel.name"]], "outputannotatortype (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.outputAnnotatorType"]], "outputannotatortype (nerdlmodel attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel.outputAnnotatorType"]], "po (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.po"]], "pretrained() (nerdlmodel static method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel.pretrained"]], "setbatchsize() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBatchSize"]], "setbestmodelmetric() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setBestModelMetric"]], "setconfigprotobytes() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (nerdlmodel method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel.setConfigProtoBytes"]], "setdropout() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setDropout"]], "setenablememoryoptimizer() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setEnableMemoryOptimizer"]], "setgraphfolder() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setGraphFolder"]], "setincludeallconfidencescores() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeAllConfidenceScores"]], "setincludeallconfidencescores() (nerdlmodel method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeAllConfidenceScores"]], "setincludeconfidence() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setIncludeConfidence"]], "setincludeconfidence() (nerdlmodel method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLModel.setIncludeConfidence"]], "setlr() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setLr"]], "setpo() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setPo"]], "setusebestmodel() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseBestModel"]], "setusecontrib() (nerdlapproach method)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.setUseContrib"]], "sparknlp.annotator.ner.ner_dl": [[132, "module-sparknlp.annotator.ner.ner_dl"]], "usebestmodel (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useBestModel"]], "usecontrib (nerdlapproach attribute)": [[132, "sparknlp.annotator.ner.ner_dl.NerDLApproach.useContrib"]], "neroverwriter (class in sparknlp.annotator.ner.ner_overwriter)": [[133, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter"]], "inputannotatortypes (neroverwriter attribute)": [[133, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.inputAnnotatorTypes"]], "name (neroverwriter attribute)": [[133, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.name"]], "nerwords (neroverwriter attribute)": [[133, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.nerWords"]], "newnerentity (neroverwriter attribute)": [[133, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.newNerEntity"]], "outputannotatortype (neroverwriter attribute)": [[133, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.outputAnnotatorType"]], "replaceentities (neroverwriter attribute)": [[133, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.replaceEntities"]], "setnerwords() (neroverwriter method)": [[133, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNerWords"]], "setnewnerentity() (neroverwriter method)": [[133, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setNewNerEntity"]], "setreplaceentities() (neroverwriter method)": [[133, "sparknlp.annotator.ner.ner_overwriter.NerOverwriter.setReplaceEntities"]], "sparknlp.annotator.ner.ner_overwriter": [[133, "module-sparknlp.annotator.ner.ner_overwriter"]], "zeroshotnermodel (class in sparknlp.annotator.ner.zero_shot_ner_model)": [[134, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[134, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[134, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[134, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[134, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[134, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[134, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[134, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[134, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[134, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[134, "sparknlp.annotator.ner.zero_shot_ner_model.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp.annotator.ner.zero_shot_ner_model": [[134, "module-sparknlp.annotator.ner.zero_shot_ner_model"]], "normalizer (class in sparknlp.annotator.normalizer)": [[135, "sparknlp.annotator.normalizer.Normalizer"]], "normalizermodel (class in sparknlp.annotator.normalizer)": [[135, "sparknlp.annotator.normalizer.NormalizerModel"]], "cleanuppatterns (normalizer attribute)": [[135, "sparknlp.annotator.normalizer.Normalizer.cleanupPatterns"]], "cleanuppatterns (normalizermodel attribute)": [[135, "sparknlp.annotator.normalizer.NormalizerModel.cleanupPatterns"]], "inputannotatortypes (normalizer attribute)": [[135, "sparknlp.annotator.normalizer.Normalizer.inputAnnotatorTypes"]], "inputannotatortypes (normalizermodel attribute)": [[135, "sparknlp.annotator.normalizer.NormalizerModel.inputAnnotatorTypes"]], "lowercase (normalizer attribute)": [[135, "sparknlp.annotator.normalizer.Normalizer.lowercase"]], "lowercase (normalizermodel attribute)": [[135, "sparknlp.annotator.normalizer.NormalizerModel.lowercase"]], "maxlength (normalizer attribute)": [[135, "sparknlp.annotator.normalizer.Normalizer.maxLength"]], "minlength (normalizer attribute)": [[135, "sparknlp.annotator.normalizer.Normalizer.minLength"]], "name (normalizermodel attribute)": [[135, "sparknlp.annotator.normalizer.NormalizerModel.name"]], "outputannotatortype (normalizer attribute)": [[135, "sparknlp.annotator.normalizer.Normalizer.outputAnnotatorType"]], "outputannotatortype (normalizermodel attribute)": [[135, "sparknlp.annotator.normalizer.NormalizerModel.outputAnnotatorType"]], "setcleanuppatterns() (normalizer method)": [[135, "sparknlp.annotator.normalizer.Normalizer.setCleanupPatterns"]], "setlowercase() (normalizer method)": [[135, "sparknlp.annotator.normalizer.Normalizer.setLowercase"]], "setmaxlength() (normalizer method)": [[135, "sparknlp.annotator.normalizer.Normalizer.setMaxLength"]], "setminlength() (normalizer method)": [[135, "sparknlp.annotator.normalizer.Normalizer.setMinLength"]], "setslangdictionary() (normalizer method)": [[135, "sparknlp.annotator.normalizer.Normalizer.setSlangDictionary"]], "slangdictionary (normalizer attribute)": [[135, "sparknlp.annotator.normalizer.Normalizer.slangDictionary"]], "slangmatchcase (normalizer attribute)": [[135, "sparknlp.annotator.normalizer.Normalizer.slangMatchCase"]], "slangmatchcase (normalizermodel attribute)": [[135, "sparknlp.annotator.normalizer.NormalizerModel.slangMatchCase"]], "sparknlp.annotator.normalizer": [[135, "module-sparknlp.annotator.normalizer"]], "sparknlp.annotator.openai": [[136, "module-sparknlp.annotator.openai"]], "openaicompletion (class in sparknlp.annotator.openai.openai_completion)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion"]], "bestof (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.bestOf"]], "echo (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.echo"]], "frequencypenalty (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.frequencyPenalty"]], "inputannotatortypes (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.inputAnnotatorTypes"]], "logitbias (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logitBias"]], "logprobs (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.logprobs"]], "maxtokens (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.maxTokens"]], "model (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.model"]], "name (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.name"]], "numberofcompletions (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.numberOfCompletions"]], "outputannotatortype (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.outputAnnotatorType"]], "presencepenalty (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.presencePenalty"]], "setbestof() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setBestOf"]], "setecho() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setEcho"]], "setfrequencypenalty() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setFrequencyPenalty"]], "setlogitbias() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogitBias"]], "setlogprobs() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setLogprobs"]], "setmaxtokens() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setMaxTokens"]], "setmodel() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setModel"]], "setnumberofcompletions() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setNumberOfCompletions"]], "setpresencepenalty() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setPresencePenalty"]], "setstop() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setStop"]], "setsuffix() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setSuffix"]], "settemperature() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTemperature"]], "settopp() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setTopP"]], "setuser() (openaicompletion method)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.setUser"]], "sparknlp.annotator.openai.openai_completion": [[137, "module-sparknlp.annotator.openai.openai_completion"]], "stop (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.stop"]], "suffix (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.suffix"]], "temperature (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.temperature"]], "topp (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.topP"]], "user (openaicompletion attribute)": [[137, "sparknlp.annotator.openai.openai_completion.OpenAICompletion.user"]], "openaiembeddings (class in sparknlp.annotator.openai.openai_embeddings)": [[138, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings"]], "inputannotatortypes (openaiembeddings attribute)": [[138, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.inputAnnotatorTypes"]], "model (openaiembeddings attribute)": [[138, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.model"]], "name (openaiembeddings attribute)": [[138, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.name"]], "outputannotatortype (openaiembeddings attribute)": [[138, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.outputAnnotatorType"]], "setmodel() (openaiembeddings method)": [[138, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setModel"]], "setuser() (openaiembeddings method)": [[138, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.setUser"]], "sparknlp.annotator.openai.openai_embeddings": [[138, "module-sparknlp.annotator.openai.openai_embeddings"]], "user (openaiembeddings attribute)": [[138, "sparknlp.annotator.openai.openai_embeddings.OpenAIEmbeddings.user"]], "sparknlp.annotator.param": [[139, "module-sparknlp.annotator.param"]], "classifierencoder (class in sparknlp.annotator.param.classifier_encoder)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder"]], "batchsize (classifierencoder attribute)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.batchSize"]], "configprotobytes (classifierencoder attribute)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.configProtoBytes"]], "labelcolumn (classifierencoder attribute)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.labelColumn"]], "lr (classifierencoder attribute)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.lr"]], "maxepochs (classifierencoder attribute)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.maxEpochs"]], "randomseed (classifierencoder attribute)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.randomSeed"]], "setbatchsize() (classifierencoder method)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setBatchSize"]], "setconfigprotobytes() (classifierencoder method)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setConfigProtoBytes"]], "setlabelcolumn() (classifierencoder method)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLabelColumn"]], "setlr() (classifierencoder method)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setLr"]], "setmaxepochs() (classifierencoder method)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setMaxEpochs"]], "setrandomseed() (classifierencoder method)": [[140, "sparknlp.annotator.param.classifier_encoder.ClassifierEncoder.setRandomSeed"]], "sparknlp.annotator.param.classifier_encoder": [[140, "module-sparknlp.annotator.param.classifier_encoder"]], "evaluationdlparams (class in sparknlp.annotator.param.evaluation_dl_params)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams"]], "enableoutputlogs (evaluationdlparams attribute)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.enableOutputLogs"]], "evaluationlogextended (evaluationdlparams attribute)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.evaluationLogExtended"]], "outputlogspath (evaluationdlparams attribute)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.outputLogsPath"]], "setenableoutputlogs() (evaluationdlparams method)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEnableOutputLogs"]], "setevaluationlogextended() (evaluationdlparams method)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setEvaluationLogExtended"]], "setoutputlogspath() (evaluationdlparams method)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setOutputLogsPath"]], "settestdataset() (evaluationdlparams method)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setTestDataset"]], "setvalidationsplit() (evaluationdlparams method)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setValidationSplit"]], "setverbose() (evaluationdlparams method)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.setVerbose"]], "sparknlp.annotator.param.evaluation_dl_params": [[141, "module-sparknlp.annotator.param.evaluation_dl_params"]], "testdataset (evaluationdlparams attribute)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.testDataset"]], "validationsplit (evaluationdlparams attribute)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.validationSplit"]], "verbose (evaluationdlparams attribute)": [[141, "sparknlp.annotator.param.evaluation_dl_params.EvaluationDLParams.verbose"]], "sparknlp.annotator.pos": [[142, "module-sparknlp.annotator.pos"]], "perceptronapproach (class in sparknlp.annotator.pos.perceptron)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronApproach"]], "perceptronmodel (class in sparknlp.annotator.pos.perceptron)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronModel"]], "getniterations() (perceptronapproach method)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronApproach.getNIterations"]], "inputannotatortypes (perceptronapproach attribute)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronApproach.inputAnnotatorTypes"]], "inputannotatortypes (perceptronmodel attribute)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronModel.inputAnnotatorTypes"]], "niterations (perceptronapproach attribute)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronApproach.nIterations"]], "name (perceptronmodel attribute)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronModel.name"]], "outputannotatortype (perceptronapproach attribute)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronApproach.outputAnnotatorType"]], "outputannotatortype (perceptronmodel attribute)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronModel.outputAnnotatorType"]], "poscol (perceptronapproach attribute)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronApproach.posCol"]], "pretrained() (perceptronmodel static method)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronModel.pretrained"]], "setiterations() (perceptronapproach method)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setIterations"]], "setposcolumn() (perceptronapproach method)": [[143, "sparknlp.annotator.pos.perceptron.PerceptronApproach.setPosColumn"]], "sparknlp.annotator.pos.perceptron": [[143, "module-sparknlp.annotator.pos.perceptron"]], "sparknlp.annotator.sentence": [[144, "module-sparknlp.annotator.sentence"]], "sentencedetector (class in sparknlp.annotator.sentence.sentence_detector)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector"]], "sentencedetectorparams (class in sparknlp.annotator.sentence.sentence_detector)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams"]], "custombounds (sentencedetectorparams attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBounds"]], "customboundsstrategy (sentencedetectorparams attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.customBoundsStrategy"]], "detectlists (sentencedetector attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.detectLists"]], "explodesentences (sentencedetectorparams attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.explodeSentences"]], "inputannotatortypes (sentencedetector attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.inputAnnotatorTypes"]], "maxlength (sentencedetectorparams attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.maxLength"]], "minlength (sentencedetectorparams attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.minLength"]], "name (sentencedetector attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.name"]], "outputannotatortype (sentencedetector attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.outputAnnotatorType"]], "setcustombounds() (sentencedetector method)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBounds"]], "setcustomboundsstrategy() (sentencedetector method)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setCustomBoundsStrategy"]], "setdetectlists() (sentencedetector method)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setDetectLists"]], "setexplodesentences() (sentencedetector method)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setExplodeSentences"]], "setmaxlength() (sentencedetector method)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMaxLength"]], "setminlength() (sentencedetector method)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setMinLength"]], "setsplitlength() (sentencedetector method)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setSplitLength"]], "setuseabbreviations() (sentencedetector method)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseAbbreviations"]], "setusecustomboundsonly() (sentencedetector method)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetector.setUseCustomBoundsOnly"]], "sparknlp.annotator.sentence.sentence_detector": [[145, "module-sparknlp.annotator.sentence.sentence_detector"]], "splitlength (sentencedetectorparams attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.splitLength"]], "useabbreviations (sentencedetectorparams attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useAbbreviations"]], "usecustomboundsonly (sentencedetectorparams attribute)": [[145, "sparknlp.annotator.sentence.sentence_detector.SentenceDetectorParams.useCustomBoundsOnly"]], "sentencedetectordlapproach (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach"]], "sentencedetectordlmodel (class in sparknlp.annotator.sentence.sentence_detector_dl)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel"]], "custombounds (sentencedetectordlmodel attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.customBounds"]], "epochsnumber (sentencedetectordlapproach attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.epochsNumber"]], "explodesentences (sentencedetectordlapproach attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.explodeSentences"]], "explodesentences (sentencedetectordlmodel attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.explodeSentences"]], "impossiblepenultimates (sentencedetectordlapproach attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.impossiblePenultimates"]], "impossiblepenultimates (sentencedetectordlmodel attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.impossiblePenultimates"]], "inputannotatortypes (sentencedetectordlapproach attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentencedetectordlmodel attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.inputAnnotatorTypes"]], "maxlength (sentencedetectordlmodel attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.maxLength"]], "minlength (sentencedetectordlmodel attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.minLength"]], "modelarchitecture (sentencedetectordlapproach attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.modelArchitecture"]], "modelarchitecture (sentencedetectordlmodel attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.modelArchitecture"]], "name (sentencedetectordlapproach attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.name"]], "name (sentencedetectordlmodel attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.name"]], "outputannotatortype (sentencedetectordlapproach attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputAnnotatorType"]], "outputannotatortype (sentencedetectordlmodel attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.outputAnnotatorType"]], "outputlogspath (sentencedetectordlapproach attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.outputLogsPath"]], "pretrained() (sentencedetectordlmodel static method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.pretrained"]], "setcustombounds() (sentencedetectordlmodel method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setCustomBounds"]], "setepochsnumber() (sentencedetectordlapproach method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setEpochsNumber"]], "setexplodesentences() (sentencedetectordlapproach method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setExplodeSentences"]], "setexplodesentences() (sentencedetectordlmodel method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setExplodeSentences"]], "setimpossiblepenultimates() (sentencedetectordlapproach method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setImpossiblePenultimates"]], "setimpossiblepenultimates() (sentencedetectordlmodel method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setImpossiblePenultimates"]], "setmaxlength() (sentencedetectordlmodel method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMaxLength"]], "setminlength() (sentencedetectordlmodel method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setMinLength"]], "setmodel() (sentencedetectordlapproach method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setModel"]], "setmodel() (sentencedetectordlmodel method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setModel"]], "setoutputlogspath() (sentencedetectordlapproach method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setOutputLogsPath"]], "setsplitlength() (sentencedetectordlmodel method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setSplitLength"]], "setusecustomboundsonly() (sentencedetectordlmodel method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.setUseCustomBoundsOnly"]], "setvalidationsplit() (sentencedetectordlapproach method)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.setValidationSplit"]], "sparknlp.annotator.sentence.sentence_detector_dl": [[146, "module-sparknlp.annotator.sentence.sentence_detector_dl"]], "splitlength (sentencedetectordlmodel attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.splitLength"]], "usecustomboundsonly (sentencedetectordlmodel attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLModel.useCustomBoundsOnly"]], "validationsplit (sentencedetectordlapproach attribute)": [[146, "sparknlp.annotator.sentence.sentence_detector_dl.SentenceDetectorDLApproach.validationSplit"]], "sparknlp.annotator.sentiment": [[147, "module-sparknlp.annotator.sentiment"]], "sentimentdetector (class in sparknlp.annotator.sentiment.sentiment_detector)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector"]], "sentimentdetectormodel (class in sparknlp.annotator.sentiment.sentiment_detector)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel"]], "decrementmultiplier (sentimentdetector attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.decrementMultiplier"]], "dictionary (sentimentdetector attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.dictionary"]], "enablescore (sentimentdetector attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.enableScore"]], "incrementmultiplier (sentimentdetector attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.incrementMultiplier"]], "inputannotatortypes (sentimentdetector attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.inputAnnotatorTypes"]], "inputannotatortypes (sentimentdetectormodel attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.inputAnnotatorTypes"]], "name (sentimentdetectormodel attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.name"]], "negativemultiplier (sentimentdetector attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.negativeMultiplier"]], "outputannotatortype (sentimentdetector attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.outputAnnotatorType"]], "outputannotatortype (sentimentdetectormodel attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.outputAnnotatorType"]], "positivemultiplier (sentimentdetector attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.positiveMultiplier"]], "positivemultiplier (sentimentdetectormodel attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetectorModel.positiveMultiplier"]], "reversemultiplier (sentimentdetector attribute)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.reverseMultiplier"]], "setdictionary() (sentimentdetector method)": [[148, "sparknlp.annotator.sentiment.sentiment_detector.SentimentDetector.setDictionary"]], "sparknlp.annotator.sentiment.sentiment_detector": [[148, "module-sparknlp.annotator.sentiment.sentiment_detector"]], "viveknsentimentapproach (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach"]], "viveknsentimentmodel (class in sparknlp.annotator.sentiment.vivekn_sentiment)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel"]], "featurelimit (viveknsentimentapproach attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.featureLimit"]], "featurelimit (viveknsentimentmodel attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.featureLimit"]], "importantfeatureratio (viveknsentimentapproach attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.importantFeatureRatio"]], "importantfeatureratio (viveknsentimentmodel attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.importantFeatureRatio"]], "inputannotatortypes (viveknsentimentapproach attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.inputAnnotatorTypes"]], "inputannotatortypes (viveknsentimentmodel attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.inputAnnotatorTypes"]], "name (viveknsentimentmodel attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.name"]], "outputannotatortype (viveknsentimentapproach attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.outputAnnotatorType"]], "outputannotatortype (viveknsentimentmodel attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.outputAnnotatorType"]], "pretrained() (viveknsentimentmodel static method)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.pretrained"]], "prunecorpus (viveknsentimentapproach attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.pruneCorpus"]], "sentimentcol (viveknsentimentapproach attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.sentimentCol"]], "setprunecorpus() (viveknsentimentapproach method)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setPruneCorpus"]], "setsentimentcol() (viveknsentimentapproach method)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.setSentimentCol"]], "sparknlp.annotator.sentiment.vivekn_sentiment": [[149, "module-sparknlp.annotator.sentiment.vivekn_sentiment"]], "unimportantfeaturestep (viveknsentimentapproach attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentApproach.unimportantFeatureStep"]], "unimportantfeaturestep (viveknsentimentmodel attribute)": [[149, "sparknlp.annotator.sentiment.vivekn_sentiment.ViveknSentimentModel.unimportantFeatureStep"]], "sparknlp.annotator.seq2seq": [[150, "module-sparknlp.annotator.seq2seq"]], "autoggufmodel (class in sparknlp.annotator.seq2seq.auto_gguf_model)": [[151, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel"]], "inputannotatortypes (autoggufmodel attribute)": [[151, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufmodel static method)": [[151, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.loadSavedModel"]], "name (autoggufmodel attribute)": [[151, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.name"]], "outputannotatortype (autoggufmodel attribute)": [[151, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.outputAnnotatorType"]], "pretrained() (autoggufmodel static method)": [[151, "sparknlp.annotator.seq2seq.auto_gguf_model.AutoGGUFModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_model": [[151, "module-sparknlp.annotator.seq2seq.auto_gguf_model"]], "autoggufvisionmodel (class in sparknlp.annotator.seq2seq.auto_gguf_vision_model)": [[152, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel"]], "inputannotatortypes (autoggufvisionmodel attribute)": [[152, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.inputAnnotatorTypes"]], "loadsavedmodel() (autoggufvisionmodel static method)": [[152, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.loadSavedModel"]], "name (autoggufvisionmodel attribute)": [[152, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.name"]], "outputannotatortype (autoggufvisionmodel attribute)": [[152, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.outputAnnotatorType"]], "pretrained() (autoggufvisionmodel static method)": [[152, "sparknlp.annotator.seq2seq.auto_gguf_vision_model.AutoGGUFVisionModel.pretrained"]], "sparknlp.annotator.seq2seq.auto_gguf_vision_model": [[152, "module-sparknlp.annotator.seq2seq.auto_gguf_vision_model"]], "barttransformer (class in sparknlp.annotator.seq2seq.bart_transformer)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer"]], "beamsize (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.beamSize"]], "configprotobytes (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.configProtoBytes"]], "dosample (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.doSample"]], "ignoretokenids (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.ignoreTokenIds"]], "inputannotatortypes (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (barttransformer static method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.loadSavedModel"]], "maxoutputlength (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.maxOutputLength"]], "minoutputlength (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.minOutputLength"]], "name (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.name"]], "norepeatngramsize (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.noRepeatNgramSize"]], "outputannotatortype (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.outputAnnotatorType"]], "pretrained() (barttransformer static method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.pretrained"]], "repetitionpenalty (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.repetitionPenalty"]], "setbeamsize() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setBeamSize"]], "setcache() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setCache"]], "setconfigprotobytes() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setConfigProtoBytes"]], "setdosample() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setDoSample"]], "setignoretokenids() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMaxOutputLength"]], "setminoutputlength() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setMinOutputLength"]], "setnorepeatngramsize() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setRepetitionPenalty"]], "settask() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTask"]], "settemperature() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTemperature"]], "settopk() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopK"]], "settopp() (barttransformer method)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.setTopP"]], "sparknlp.annotator.seq2seq.bart_transformer": [[153, "module-sparknlp.annotator.seq2seq.bart_transformer"]], "task (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.task"]], "temperature (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.temperature"]], "topk (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topK"]], "topp (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.topP"]], "usecache (barttransformer attribute)": [[153, "sparknlp.annotator.seq2seq.bart_transformer.BartTransformer.useCache"]], "coheretransformer (class in sparknlp.annotator.seq2seq.cohere_transformer)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer"]], "beamsize (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.beamSize"]], "configprotobytes (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.configProtoBytes"]], "dosample (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.doSample"]], "ignoretokenids (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.ignoreTokenIds"]], "inputannotatortypes (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (coheretransformer static method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.loadSavedModel"]], "maxoutputlength (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.maxOutputLength"]], "minoutputlength (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.minOutputLength"]], "name (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.name"]], "norepeatngramsize (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.noRepeatNgramSize"]], "outputannotatortype (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.outputAnnotatorType"]], "pretrained() (coheretransformer static method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.pretrained"]], "repetitionpenalty (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.repetitionPenalty"]], "setbeamsize() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setBeamSize"]], "setconfigprotobytes() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setConfigProtoBytes"]], "setdosample() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setDoSample"]], "setignoretokenids() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMaxOutputLength"]], "setminoutputlength() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setMinOutputLength"]], "setnorepeatngramsize() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setRepetitionPenalty"]], "setstoptokenids() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setStopTokenIds"]], "settemperature() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTemperature"]], "settopk() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopK"]], "settopp() (coheretransformer method)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cohere_transformer": [[154, "module-sparknlp.annotator.seq2seq.cohere_transformer"]], "stoptokenids (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.stopTokenIds"]], "temperature (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.temperature"]], "topk (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topK"]], "topp (coheretransformer attribute)": [[154, "sparknlp.annotator.seq2seq.cohere_transformer.CoHereTransformer.topP"]], "cpmtransformer (class in sparknlp.annotator.seq2seq.cpm_transformer)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer"]], "configprotobytes (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.configProtoBytes"]], "dosample (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.doSample"]], "ignoretokenids (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.ignoreTokenIds"]], "inputannotatortypes (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (cpmtransformer static method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.loadSavedModel"]], "maxoutputlength (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.maxOutputLength"]], "minoutputlength (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.minOutputLength"]], "name (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.name"]], "norepeatngramsize (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.noRepeatNgramSize"]], "outputannotatortype (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.outputAnnotatorType"]], "pretrained() (cpmtransformer static method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.pretrained"]], "repetitionpenalty (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.repetitionPenalty"]], "setconfigprotobytes() (cpmtransformer method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setConfigProtoBytes"]], "setdosample() (cpmtransformer method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setDoSample"]], "setignoretokenids() (cpmtransformer method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (cpmtransformer method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMaxOutputLength"]], "setminoutputlength() (cpmtransformer method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setMinOutputLength"]], "setnorepeatngramsize() (cpmtransformer method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (cpmtransformer method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setRepetitionPenalty"]], "settemperature() (cpmtransformer method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTemperature"]], "settopk() (cpmtransformer method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopK"]], "settopp() (cpmtransformer method)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.setTopP"]], "sparknlp.annotator.seq2seq.cpm_transformer": [[155, "module-sparknlp.annotator.seq2seq.cpm_transformer"]], "temperature (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.temperature"]], "topk (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topK"]], "topp (cpmtransformer attribute)": [[155, "sparknlp.annotator.seq2seq.cpm_transformer.CPMTransformer.topP"]], "gpt2transformer (class in sparknlp.annotator.seq2seq.gpt2_transformer)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer"]], "configprotobytes (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.configProtoBytes"]], "dosample (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.doSample"]], "ignoretokenids (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.ignoreTokenIds"]], "inputannotatortypes (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (gpt2transformer static method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.loadSavedModel"]], "maxoutputlength (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.maxOutputLength"]], "minoutputlength (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.minOutputLength"]], "name (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.name"]], "norepeatngramsize (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.noRepeatNgramSize"]], "outputannotatortype (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.outputAnnotatorType"]], "pretrained() (gpt2transformer static method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.pretrained"]], "repetitionpenalty (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.repetitionPenalty"]], "setconfigprotobytes() (gpt2transformer method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setConfigProtoBytes"]], "setdosample() (gpt2transformer method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setDoSample"]], "setignoretokenids() (gpt2transformer method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (gpt2transformer method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMaxOutputLength"]], "setminoutputlength() (gpt2transformer method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (gpt2transformer method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (gpt2transformer method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setRepetitionPenalty"]], "settask() (gpt2transformer method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTask"]], "settemperature() (gpt2transformer method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTemperature"]], "settopk() (gpt2transformer method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopK"]], "settopp() (gpt2transformer method)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.gpt2_transformer": [[156, "module-sparknlp.annotator.seq2seq.gpt2_transformer"]], "task (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.task"]], "temperature (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.temperature"]], "topk (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topK"]], "topp (gpt2transformer attribute)": [[156, "sparknlp.annotator.seq2seq.gpt2_transformer.GPT2Transformer.topP"]], "llama2transformer (class in sparknlp.annotator.seq2seq.llama2_transformer)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer"]], "configprotobytes (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.configProtoBytes"]], "dosample (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.doSample"]], "ignoretokenids (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.ignoreTokenIds"]], "inputannotatortypes (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama2transformer static method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.loadSavedModel"]], "maxoutputlength (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.maxOutputLength"]], "minoutputlength (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.minOutputLength"]], "name (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.name"]], "norepeatngramsize (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.noRepeatNgramSize"]], "outputannotatortype (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.outputAnnotatorType"]], "pretrained() (llama2transformer static method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.pretrained"]], "repetitionpenalty (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.repetitionPenalty"]], "setconfigprotobytes() (llama2transformer method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setConfigProtoBytes"]], "setdosample() (llama2transformer method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setDoSample"]], "setignoretokenids() (llama2transformer method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama2transformer method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMaxOutputLength"]], "setminoutputlength() (llama2transformer method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama2transformer method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama2transformer method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setRepetitionPenalty"]], "settemperature() (llama2transformer method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTemperature"]], "settopk() (llama2transformer method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopK"]], "settopp() (llama2transformer method)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama2_transformer": [[157, "module-sparknlp.annotator.seq2seq.llama2_transformer"]], "temperature (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.temperature"]], "topk (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topK"]], "topp (llama2transformer attribute)": [[157, "sparknlp.annotator.seq2seq.llama2_transformer.LLAMA2Transformer.topP"]], "llama3transformer (class in sparknlp.annotator.seq2seq.llama3_transformer)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer"]], "beamsize (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.beamSize"]], "configprotobytes (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.configProtoBytes"]], "dosample (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.doSample"]], "ignoretokenids (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.ignoreTokenIds"]], "inputannotatortypes (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (llama3transformer static method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.loadSavedModel"]], "maxoutputlength (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.maxOutputLength"]], "minoutputlength (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.minOutputLength"]], "name (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.name"]], "norepeatngramsize (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.noRepeatNgramSize"]], "outputannotatortype (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.outputAnnotatorType"]], "pretrained() (llama3transformer static method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.pretrained"]], "repetitionpenalty (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.repetitionPenalty"]], "setbeamsize() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setBeamSize"]], "setconfigprotobytes() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setConfigProtoBytes"]], "setdosample() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setDoSample"]], "setignoretokenids() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMaxOutputLength"]], "setminoutputlength() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setRepetitionPenalty"]], "setstoptokenids() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setStopTokenIds"]], "settemperature() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTemperature"]], "settopk() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopK"]], "settopp() (llama3transformer method)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.llama3_transformer": [[158, "module-sparknlp.annotator.seq2seq.llama3_transformer"]], "stoptokenids (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.stopTokenIds"]], "temperature (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.temperature"]], "topk (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topK"]], "topp (llama3transformer attribute)": [[158, "sparknlp.annotator.seq2seq.llama3_transformer.LLAMA3Transformer.topP"]], "m2m100transformer (class in sparknlp.annotator.seq2seq.m2m100_transformer)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer"]], "beamsize (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.beamSize"]], "configprotobytes (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.configProtoBytes"]], "dosample (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.doSample"]], "ignoretokenids (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.ignoreTokenIds"]], "inputannotatortypes (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (m2m100transformer static method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.loadSavedModel"]], "maxoutputlength (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.maxOutputLength"]], "minoutputlength (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.minOutputLength"]], "name (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.name"]], "norepeatngramsize (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.noRepeatNgramSize"]], "outputannotatortype (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.outputAnnotatorType"]], "pretrained() (m2m100transformer static method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.pretrained"]], "repetitionpenalty (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.repetitionPenalty"]], "setbeamsize() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setBeamSize"]], "setconfigprotobytes() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setConfigProtoBytes"]], "setdosample() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setDoSample"]], "setignoretokenids() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMaxOutputLength"]], "setminoutputlength() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setMinOutputLength"]], "setnorepeatngramsize() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setRepetitionPenalty"]], "setsrclang() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setSrcLang"]], "settemperature() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTemperature"]], "settgtlang() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTgtLang"]], "settopk() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopK"]], "settopp() (m2m100transformer method)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.setTopP"]], "sparknlp.annotator.seq2seq.m2m100_transformer": [[159, "module-sparknlp.annotator.seq2seq.m2m100_transformer"]], "srclang (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.srcLang"]], "temperature (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.temperature"]], "tgtlang (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.tgtLang"]], "topk (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topK"]], "topp (m2m100transformer attribute)": [[159, "sparknlp.annotator.seq2seq.m2m100_transformer.M2M100Transformer.topP"]], "mariantransformer (class in sparknlp.annotator.seq2seq.marian_transformer)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer"]], "configprotobytes (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.configProtoBytes"]], "dosample (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.doSample"]], "ignoretokenids (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.ignoreTokenIds"]], "inputannotatortypes (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.inputAnnotatorTypes"]], "langid (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.langId"]], "loadsavedmodel() (mariantransformer static method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.loadSavedModel"]], "maxinputlength (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxInputLength"]], "maxoutputlength (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.maxOutputLength"]], "name (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.name"]], "norepeatngramsize (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.noRepeatNgramSize"]], "outputannotatortype (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.outputAnnotatorType"]], "pretrained() (mariantransformer static method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.pretrained"]], "repetitionpenalty (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.repetitionPenalty"]], "setconfigprotobytes() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setConfigProtoBytes"]], "setdosample() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setDoSample"]], "setignoretokenids() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setIgnoreTokenIds"]], "setlangid() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setLangId"]], "setmaxinputlength() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxInputLength"]], "setmaxoutputlength() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setMaxOutputLength"]], "setnorepeatngramsize() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setNoRepeatNgramSize"]], "setrandomseed() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRandomSeed"]], "setrepetitionpenalty() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setRepetitionPenalty"]], "settemperature() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTemperature"]], "settopk() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopK"]], "settopp() (mariantransformer method)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.setTopP"]], "sparknlp.annotator.seq2seq.marian_transformer": [[160, "module-sparknlp.annotator.seq2seq.marian_transformer"]], "temperature (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.temperature"]], "topk (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topK"]], "topp (mariantransformer attribute)": [[160, "sparknlp.annotator.seq2seq.marian_transformer.MarianTransformer.topP"]], "mistraltransformer (class in sparknlp.annotator.seq2seq.mistral_transformer)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer"]], "configprotobytes (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.configProtoBytes"]], "dosample (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.doSample"]], "ignoretokenids (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.ignoreTokenIds"]], "inputannotatortypes (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (mistraltransformer static method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.loadSavedModel"]], "maxoutputlength (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.maxOutputLength"]], "minoutputlength (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.minOutputLength"]], "name (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.name"]], "norepeatngramsize (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.noRepeatNgramSize"]], "outputannotatortype (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.outputAnnotatorType"]], "pretrained() (mistraltransformer static method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.pretrained"]], "repetitionpenalty (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.repetitionPenalty"]], "setconfigprotobytes() (mistraltransformer method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setConfigProtoBytes"]], "setdosample() (mistraltransformer method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setDoSample"]], "setignoretokenids() (mistraltransformer method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (mistraltransformer method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMaxOutputLength"]], "setminoutputlength() (mistraltransformer method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setMinOutputLength"]], "setnorepeatngramsize() (mistraltransformer method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (mistraltransformer method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setRepetitionPenalty"]], "settemperature() (mistraltransformer method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTemperature"]], "settopk() (mistraltransformer method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopK"]], "settopp() (mistraltransformer method)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.setTopP"]], "sparknlp.annotator.seq2seq.mistral_transformer": [[161, "module-sparknlp.annotator.seq2seq.mistral_transformer"]], "temperature (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.temperature"]], "topk (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topK"]], "topp (mistraltransformer attribute)": [[161, "sparknlp.annotator.seq2seq.mistral_transformer.MistralTransformer.topP"]], "nllbtransformer (class in sparknlp.annotator.seq2seq.nllb_transformer)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer"]], "beamsize (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.beamSize"]], "configprotobytes (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.configProtoBytes"]], "dosample (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.doSample"]], "ignoretokenids (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.ignoreTokenIds"]], "inputannotatortypes (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (nllbtransformer static method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.loadSavedModel"]], "maxoutputlength (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.maxOutputLength"]], "minoutputlength (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.minOutputLength"]], "name (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.name"]], "norepeatngramsize (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.noRepeatNgramSize"]], "outputannotatortype (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.outputAnnotatorType"]], "pretrained() (nllbtransformer static method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.pretrained"]], "repetitionpenalty (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.repetitionPenalty"]], "setbeamsize() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setBeamSize"]], "setconfigprotobytes() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setConfigProtoBytes"]], "setdosample() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setDoSample"]], "setignoretokenids() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMaxOutputLength"]], "setminoutputlength() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setMinOutputLength"]], "setnorepeatngramsize() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setRepetitionPenalty"]], "setsrclang() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setSrcLang"]], "settemperature() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTemperature"]], "settgtlang() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTgtLang"]], "settopk() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopK"]], "settopp() (nllbtransformer method)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.setTopP"]], "sparknlp.annotator.seq2seq.nllb_transformer": [[162, "module-sparknlp.annotator.seq2seq.nllb_transformer"]], "srclang (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.srcLang"]], "temperature (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.temperature"]], "tgtlang (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.tgtLang"]], "topk (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topK"]], "topp (nllbtransformer attribute)": [[162, "sparknlp.annotator.seq2seq.nllb_transformer.NLLBTransformer.topP"]], "olmotransformer (class in sparknlp.annotator.seq2seq.olmo_transformer)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer"]], "configprotobytes (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.configProtoBytes"]], "dosample (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.doSample"]], "ignoretokenids (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.ignoreTokenIds"]], "inputannotatortypes (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (olmotransformer static method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.loadSavedModel"]], "maxoutputlength (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.maxOutputLength"]], "minoutputlength (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.minOutputLength"]], "name (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.name"]], "norepeatngramsize (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.noRepeatNgramSize"]], "outputannotatortype (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.outputAnnotatorType"]], "pretrained() (olmotransformer static method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.pretrained"]], "repetitionpenalty (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.repetitionPenalty"]], "setconfigprotobytes() (olmotransformer method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setConfigProtoBytes"]], "setdosample() (olmotransformer method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setDoSample"]], "setignoretokenids() (olmotransformer method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (olmotransformer method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMaxOutputLength"]], "setminoutputlength() (olmotransformer method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setMinOutputLength"]], "setnorepeatngramsize() (olmotransformer method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (olmotransformer method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setRepetitionPenalty"]], "settemperature() (olmotransformer method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTemperature"]], "settopk() (olmotransformer method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopK"]], "settopp() (olmotransformer method)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.setTopP"]], "sparknlp.annotator.seq2seq.olmo_transformer": [[163, "module-sparknlp.annotator.seq2seq.olmo_transformer"]], "temperature (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.temperature"]], "topk (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topK"]], "topp (olmotransformer attribute)": [[163, "sparknlp.annotator.seq2seq.olmo_transformer.OLMoTransformer.topP"]], "phi2transformer (class in sparknlp.annotator.seq2seq.phi2_transformer)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer"]], "configprotobytes (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.configProtoBytes"]], "dosample (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.doSample"]], "ignoretokenids (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.ignoreTokenIds"]], "inputannotatortypes (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi2transformer static method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.loadSavedModel"]], "maxoutputlength (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.maxOutputLength"]], "minoutputlength (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.minOutputLength"]], "name (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.name"]], "norepeatngramsize (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.noRepeatNgramSize"]], "outputannotatortype (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.outputAnnotatorType"]], "pretrained() (phi2transformer static method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.pretrained"]], "repetitionpenalty (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi2transformer method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setConfigProtoBytes"]], "setdosample() (phi2transformer method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setDoSample"]], "setignoretokenids() (phi2transformer method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi2transformer method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMaxOutputLength"]], "setminoutputlength() (phi2transformer method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi2transformer method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi2transformer method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setRepetitionPenalty"]], "settemperature() (phi2transformer method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTemperature"]], "settopk() (phi2transformer method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopK"]], "settopp() (phi2transformer method)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi2_transformer": [[164, "module-sparknlp.annotator.seq2seq.phi2_transformer"]], "temperature (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.temperature"]], "topk (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topK"]], "topp (phi2transformer attribute)": [[164, "sparknlp.annotator.seq2seq.phi2_transformer.Phi2Transformer.topP"]], "phi3transformer (class in sparknlp.annotator.seq2seq.phi3_transformer)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer"]], "configprotobytes (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.configProtoBytes"]], "dosample (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.doSample"]], "ignoretokenids (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.ignoreTokenIds"]], "inputannotatortypes (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (phi3transformer static method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.loadSavedModel"]], "maxoutputlength (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.maxOutputLength"]], "minoutputlength (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.minOutputLength"]], "name (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.name"]], "norepeatngramsize (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.noRepeatNgramSize"]], "outputannotatortype (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.outputAnnotatorType"]], "pretrained() (phi3transformer static method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.pretrained"]], "repetitionpenalty (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.repetitionPenalty"]], "setconfigprotobytes() (phi3transformer method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setConfigProtoBytes"]], "setdosample() (phi3transformer method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setDoSample"]], "setignoretokenids() (phi3transformer method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setIgnoreTokenIds"]], "setmaxoutputlength() (phi3transformer method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMaxOutputLength"]], "setminoutputlength() (phi3transformer method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setMinOutputLength"]], "setnorepeatngramsize() (phi3transformer method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (phi3transformer method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setRepetitionPenalty"]], "settemperature() (phi3transformer method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTemperature"]], "settopk() (phi3transformer method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopK"]], "settopp() (phi3transformer method)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.setTopP"]], "sparknlp.annotator.seq2seq.phi3_transformer": [[165, "module-sparknlp.annotator.seq2seq.phi3_transformer"]], "temperature (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.temperature"]], "topk (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topK"]], "topp (phi3transformer attribute)": [[165, "sparknlp.annotator.seq2seq.phi3_transformer.Phi3Transformer.topP"]], "qwentransformer (class in sparknlp.annotator.seq2seq.qwen_transformer)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer"]], "configprotobytes (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.configProtoBytes"]], "dosample (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.doSample"]], "ignoretokenids (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.ignoreTokenIds"]], "inputannotatortypes (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (qwentransformer static method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.loadSavedModel"]], "maxoutputlength (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.maxOutputLength"]], "minoutputlength (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.minOutputLength"]], "name (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.name"]], "norepeatngramsize (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.noRepeatNgramSize"]], "outputannotatortype (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.outputAnnotatorType"]], "pretrained() (qwentransformer static method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.pretrained"]], "repetitionpenalty (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.repetitionPenalty"]], "setconfigprotobytes() (qwentransformer method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setConfigProtoBytes"]], "setdosample() (qwentransformer method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setDoSample"]], "setignoretokenids() (qwentransformer method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (qwentransformer method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMaxOutputLength"]], "setminoutputlength() (qwentransformer method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setMinOutputLength"]], "setnorepeatngramsize() (qwentransformer method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (qwentransformer method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setRepetitionPenalty"]], "settemperature() (qwentransformer method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTemperature"]], "settopk() (qwentransformer method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopK"]], "settopp() (qwentransformer method)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.setTopP"]], "sparknlp.annotator.seq2seq.qwen_transformer": [[166, "module-sparknlp.annotator.seq2seq.qwen_transformer"]], "temperature (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.temperature"]], "topk (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topK"]], "topp (qwentransformer attribute)": [[166, "sparknlp.annotator.seq2seq.qwen_transformer.QwenTransformer.topP"]], "starcodertransformer (class in sparknlp.annotator.seq2seq.starcoder_transformer)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer"]], "configprotobytes (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.configProtoBytes"]], "dosample (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.doSample"]], "ignoretokenids (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.ignoreTokenIds"]], "inputannotatortypes (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.inputAnnotatorTypes"]], "loadsavedmodel() (starcodertransformer static method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.loadSavedModel"]], "maxoutputlength (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.maxOutputLength"]], "minoutputlength (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.minOutputLength"]], "name (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.name"]], "norepeatngramsize (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.noRepeatNgramSize"]], "outputannotatortype (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.outputAnnotatorType"]], "pretrained() (starcodertransformer static method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.pretrained"]], "repetitionpenalty (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.repetitionPenalty"]], "setconfigprotobytes() (starcodertransformer method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setConfigProtoBytes"]], "setdosample() (starcodertransformer method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setDoSample"]], "setignoretokenids() (starcodertransformer method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setIgnoreTokenIds"]], "setmaxoutputlength() (starcodertransformer method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMaxOutputLength"]], "setminoutputlength() (starcodertransformer method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setMinOutputLength"]], "setnorepeatngramsize() (starcodertransformer method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (starcodertransformer method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setRepetitionPenalty"]], "settemperature() (starcodertransformer method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTemperature"]], "settopk() (starcodertransformer method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopK"]], "settopp() (starcodertransformer method)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.setTopP"]], "sparknlp.annotator.seq2seq.starcoder_transformer": [[167, "module-sparknlp.annotator.seq2seq.starcoder_transformer"]], "temperature (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.temperature"]], "topk (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topK"]], "topp (starcodertransformer attribute)": [[167, "sparknlp.annotator.seq2seq.starcoder_transformer.StarCoderTransformer.topP"]], "t5transformer (class in sparknlp.annotator.seq2seq.t5_transformer)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer"]], "configprotobytes (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.configProtoBytes"]], "dosample (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.doSample"]], "ignoretokenids (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.ignoreTokenIds"]], "inputannotatortypes (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.inputAnnotatorTypes"]], "loadsavedmodel() (t5transformer static method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.loadSavedModel"]], "maxnewtokens (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxNewTokens"]], "maxoutputlength (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.maxOutputLength"]], "minoutputlength (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.minOutputLength"]], "name (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.name"]], "norepeatngramsize (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.noRepeatNgramSize"]], "outputannotatortype (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.outputAnnotatorType"]], "pretrained() (t5transformer static method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.pretrained"]], "repetitionpenalty (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.repetitionPenalty"]], "setconfigprotobytes() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setConfigProtoBytes"]], "setdosample() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setDoSample"]], "setignoretokenids() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setIgnoreTokenIds"]], "setmaxnewtokens() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxNewTokens"]], "setmaxoutputlength() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMaxOutputLength"]], "setminoutputlength() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setMinOutputLength"]], "setnorepeatngramsize() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setNoRepeatNgramSize"]], "setrepetitionpenalty() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setRepetitionPenalty"]], "setstopateos() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setStopAtEos"]], "settask() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTask"]], "settemperature() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTemperature"]], "settopk() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopK"]], "settopp() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setTopP"]], "setusecache() (t5transformer method)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.setUseCache"]], "sparknlp.annotator.seq2seq.t5_transformer": [[168, "module-sparknlp.annotator.seq2seq.t5_transformer"]], "stopateos (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.stopAtEos"]], "task (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.task"]], "temperature (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.temperature"]], "topk (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topK"]], "topp (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.topP"]], "usecache (t5transformer attribute)": [[168, "sparknlp.annotator.seq2seq.t5_transformer.T5Transformer.useCache"]], "sparknlp.annotator.similarity": [[169, "module-sparknlp.annotator.similarity"]], "documentsimilarityrankerapproach (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach"]], "documentsimilarityrankerfinisher (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher"]], "documentsimilarityrankermodel (class in sparknlp.annotator.similarity.document_similarity_ranker)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel"]], "aggregationmethod (documentsimilarityrankerapproach attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.aggregationMethod"]], "asretriever() (documentsimilarityrankerapproach method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetriever"]], "asretrieverquery (documentsimilarityrankerapproach attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.asRetrieverQuery"]], "bucketlength (documentsimilarityrankerapproach attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.bucketLength"]], "extractnearestneighbor (documentsimilarityrankerfinisher attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.extractNearestNeighbor"]], "getinputcols() (documentsimilarityrankerfinisher method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getInputCols"]], "getoutputcols() (documentsimilarityrankerfinisher method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.getOutputCols"]], "identityranking (documentsimilarityrankerapproach attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.identityRanking"]], "inputannotatortypes (documentsimilarityrankerapproach attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentsimilarityrankermodel attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.inputAnnotatorTypes"]], "inputcols (documentsimilarityrankerfinisher attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.inputCols"]], "name (documentsimilarityrankerfinisher attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.name"]], "name (documentsimilarityrankermodel attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.name"]], "numhashtables (documentsimilarityrankerapproach attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numHashTables"]], "numberofneighbours (documentsimilarityrankerapproach attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.numberOfNeighbours"]], "outputannotatortype (documentsimilarityrankerapproach attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.outputAnnotatorType"]], "outputannotatortype (documentsimilarityrankermodel attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerModel.outputAnnotatorType"]], "outputcols (documentsimilarityrankerfinisher attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.outputCols"]], "setaggregationmethod() (documentsimilarityrankerapproach method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setAggregationMethod"]], "setbucketlength() (documentsimilarityrankerapproach method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setBucketLength"]], "setextractnearestneighbor() (documentsimilarityrankerfinisher method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setExtractNearestNeighbor"]], "setidentityranking() (documentsimilarityrankerapproach method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setIdentityRanking"]], "setinputcols() (documentsimilarityrankerfinisher method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setInputCols"]], "setnumhashtables() (documentsimilarityrankerapproach method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumHashTables"]], "setnumberofneighbours() (documentsimilarityrankerapproach method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setNumberOfNeighbours"]], "setoutputcols() (documentsimilarityrankerfinisher method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setOutputCols"]], "setparams() (documentsimilarityrankerfinisher method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerFinisher.setParams"]], "setsimilaritymethod() (documentsimilarityrankerapproach method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setSimilarityMethod"]], "setvisibledistances() (documentsimilarityrankerapproach method)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.setVisibleDistances"]], "similaritymethod (documentsimilarityrankerapproach attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.similarityMethod"]], "sparknlp.annotator.similarity.document_similarity_ranker": [[170, "module-sparknlp.annotator.similarity.document_similarity_ranker"]], "visibledistances (documentsimilarityrankerapproach attribute)": [[170, "sparknlp.annotator.similarity.document_similarity_ranker.DocumentSimilarityRankerApproach.visibleDistances"]], "sparknlp.annotator.spell_check": [[171, "module-sparknlp.annotator.spell_check"]], "contextspellcheckerapproach (class in sparknlp.annotator.spell_check.context_spell_checker)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach"]], "contextspellcheckermodel (class in sparknlp.annotator.spell_check.context_spell_checker)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel"]], "addregexclass() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addRegexClass"]], "addvocabclass() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.addVocabClass"]], "batchsize (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.batchSize"]], "casestrategy (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.caseStrategy"]], "casestrategy (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.caseStrategy"]], "classcount (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.classCount"]], "classes (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.classes"]], "comparelowcase (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.compareLowcase"]], "compoundcount (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.compoundCount"]], "configprotobytes (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.configProtoBytes"]], "configprotobytes (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.configProtoBytes"]], "correctsymbols (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.correctSymbols"]], "epochs (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.epochs"]], "errorthreshold (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.errorThreshold"]], "errorthreshold (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.errorThreshold"]], "finalrate (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.finalRate"]], "gamma (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.gamma"]], "getwordclasses() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.getWordClasses"]], "graphfolder (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.graphFolder"]], "idsvocab (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.idsVocab"]], "initialrate (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.initialRate"]], "inputannotatortypes (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.inputAnnotatorTypes"]], "languagemodelclasses (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.languageModelClasses"]], "maxcandidates (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxCandidates"]], "maxcandidates (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxCandidates"]], "maxsentlen (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxSentLen"]], "maxwindowlen (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.maxWindowLen"]], "maxwindowlen (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.maxWindowLen"]], "mincount (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.minCount"]], "name (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.name"]], "name (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.name"]], "outputannotatortype (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.outputAnnotatorType"]], "outputannotatortype (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.outputAnnotatorType"]], "pretrained() (contextspellcheckermodel static method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.pretrained"]], "setbatchsize() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setBatchSize"]], "setcasestrategy() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCaseStrategy"]], "setcasestrategy() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCaseStrategy"]], "setclasscount() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setClassCount"]], "setclasses() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setClasses"]], "setcomparelowcase() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCompareLowcase"]], "setcompoundcount() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setCompoundCount"]], "setconfigprotobytes() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setConfigProtoBytes"]], "setcorrectsymbols() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setCorrectSymbols"]], "setepochs() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setEpochs"]], "seterrorthreshold() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setErrorThreshold"]], "seterrorthreshold() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setErrorThreshold"]], "setfinalrate() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setFinalRate"]], "setgamma() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setGamma"]], "setgraphfolder() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setGraphFolder"]], "setidsvocab() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setIdsVocab"]], "setinitialrate() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setInitialRate"]], "setlanguagemodelclasses() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setLanguageModelClasses"]], "setmaxcandidates() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxCandidates"]], "setmaxcandidates() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxCandidates"]], "setmaxsentlen() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxSentLen"]], "setmaxwindowlen() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMaxWindowLen"]], "setmaxwindowlen() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setMaxWindowLen"]], "setmincount() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setMinCount"]], "settradeoff() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setTradeoff"]], "settradeoff() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setTradeoff"]], "setvalidationfraction() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setValidationFraction"]], "setvocabfreq() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabFreq"]], "setvocabids() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setVocabIds"]], "setweighteddistpath() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWeightedDistPath"]], "setweights() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWeights"]], "setwordmaxdistance() (contextspellcheckerapproach method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.setWordMaxDistance"]], "setwordmaxdistance() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.setWordMaxDistance"]], "sparknlp.annotator.spell_check.context_spell_checker": [[172, "module-sparknlp.annotator.spell_check.context_spell_checker"]], "tradeoff (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.tradeoff"]], "tradeoff (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.tradeoff"]], "updateregexclass() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateRegexClass"]], "updatevocabclass() (contextspellcheckermodel method)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.updateVocabClass"]], "validationfraction (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.validationFraction"]], "vocabfreq (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabFreq"]], "vocabids (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.vocabIds"]], "weighteddistpath (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.weightedDistPath"]], "wordmaxdistance (contextspellcheckerapproach attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerApproach.wordMaxDistance"]], "wordmaxdistance (contextspellcheckermodel attribute)": [[172, "sparknlp.annotator.spell_check.context_spell_checker.ContextSpellCheckerModel.wordMaxDistance"]], "norvigsweetingapproach (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach"]], "norvigsweetingmodel (class in sparknlp.annotator.spell_check.norvig_sweeting)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel"]], "casesensitive (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.caseSensitive"]], "dictionary (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dictionary"]], "doublevariants (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.doubleVariants"]], "dupslimit (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.dupsLimit"]], "frequencypriority (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.frequencyPriority"]], "inputannotatortypes (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.inputAnnotatorTypes"]], "inputannotatortypes (norvigsweetingmodel attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.inputAnnotatorTypes"]], "intersections (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.intersections"]], "name (norvigsweetingmodel attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.name"]], "outputannotatortype (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.outputAnnotatorType"]], "outputannotatortype (norvigsweetingmodel attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.outputAnnotatorType"]], "pretrained() (norvigsweetingmodel static method)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingModel.pretrained"]], "reductlimit (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.reductLimit"]], "setcasesensitive() (norvigsweetingapproach method)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setCaseSensitive"]], "setdictionary() (norvigsweetingapproach method)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDictionary"]], "setdoublevariants() (norvigsweetingapproach method)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setDoubleVariants"]], "setfrequencypriority() (norvigsweetingapproach method)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setFrequencyPriority"]], "setshortcircuit() (norvigsweetingapproach method)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.setShortCircuit"]], "shortcircuit (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.shortCircuit"]], "sparknlp.annotator.spell_check.norvig_sweeting": [[173, "module-sparknlp.annotator.spell_check.norvig_sweeting"]], "vowelswaplimit (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.vowelSwapLimit"]], "wordsizeignore (norvigsweetingapproach attribute)": [[173, "sparknlp.annotator.spell_check.norvig_sweeting.NorvigSweetingApproach.wordSizeIgnore"]], "symmetricdeleteapproach (class in sparknlp.annotator.spell_check.symmetric_delete)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach"]], "symmetricdeletemodel (class in sparknlp.annotator.spell_check.symmetric_delete)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel"]], "corpus (symmetricdeleteapproach attribute)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.corpus"]], "deletesthreshold (symmetricdeleteapproach attribute)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.deletesThreshold"]], "dictionary (symmetricdeleteapproach attribute)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dictionary"]], "dupslimit (symmetricdeleteapproach attribute)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.dupsLimit"]], "frequencythreshold (symmetricdeleteapproach attribute)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.frequencyThreshold"]], "inputannotatortypes (symmetricdeleteapproach attribute)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.inputAnnotatorTypes"]], "inputannotatortypes (symmetricdeletemodel attribute)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.inputAnnotatorTypes"]], "maxeditdistance (symmetricdeleteapproach attribute)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.maxEditDistance"]], "name (symmetricdeletemodel attribute)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.name"]], "outputannotatortype (symmetricdeleteapproach attribute)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.outputAnnotatorType"]], "outputannotatortype (symmetricdeletemodel attribute)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.outputAnnotatorType"]], "pretrained() (symmetricdeletemodel static method)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteModel.pretrained"]], "setdeletesthreshold() (symmetricdeleteapproach method)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDeletesThreshold"]], "setdictionary() (symmetricdeleteapproach method)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setDictionary"]], "setfrequencythreshold() (symmetricdeleteapproach method)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setFrequencyThreshold"]], "setmaxeditdistance() (symmetricdeleteapproach method)": [[174, "sparknlp.annotator.spell_check.symmetric_delete.SymmetricDeleteApproach.setMaxEditDistance"]], "sparknlp.annotator.spell_check.symmetric_delete": [[174, "module-sparknlp.annotator.spell_check.symmetric_delete"]], "stemmer (class in sparknlp.annotator.stemmer)": [[175, "sparknlp.annotator.stemmer.Stemmer"]], "inputannotatortypes (stemmer attribute)": [[175, "sparknlp.annotator.stemmer.Stemmer.inputAnnotatorTypes"]], "language (stemmer attribute)": [[175, "sparknlp.annotator.stemmer.Stemmer.language"]], "name (stemmer attribute)": [[175, "sparknlp.annotator.stemmer.Stemmer.name"]], "outputannotatortype (stemmer attribute)": [[175, "sparknlp.annotator.stemmer.Stemmer.outputAnnotatorType"]], "sparknlp.annotator.stemmer": [[175, "module-sparknlp.annotator.stemmer"]], "stopwordscleaner (class in sparknlp.annotator.stop_words_cleaner)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner"]], "casesensitive (stopwordscleaner attribute)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.caseSensitive"]], "inputannotatortypes (stopwordscleaner attribute)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.inputAnnotatorTypes"]], "loaddefaultstopwords() (stopwordscleaner method)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.loadDefaultStopWords"]], "locale (stopwordscleaner attribute)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.locale"]], "name (stopwordscleaner attribute)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.name"]], "outputannotatortype (stopwordscleaner attribute)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.outputAnnotatorType"]], "pretrained() (stopwordscleaner static method)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.pretrained"]], "setcasesensitive() (stopwordscleaner method)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setCaseSensitive"]], "setlocale() (stopwordscleaner method)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setLocale"]], "setstopwords() (stopwordscleaner method)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.setStopWords"]], "sparknlp.annotator.stop_words_cleaner": [[176, "module-sparknlp.annotator.stop_words_cleaner"]], "stopwords (stopwordscleaner attribute)": [[176, "sparknlp.annotator.stop_words_cleaner.StopWordsCleaner.stopWords"]], "tfnerdlgraphbuilder (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder"]], "tfnerdlgraphbuildermodel (class in sparknlp.annotator.tf_ner_dl_graph_builder)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilderModel"]], "getgraphfile() (tfnerdlgraphbuilder method)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFile"]], "getgraphfolder() (tfnerdlgraphbuilder method)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getGraphFolder"]], "gethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getHiddenUnitsNumber"]], "getinputcols() (tfnerdlgraphbuilder method)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getInputCols"]], "getlabelcolumn() (tfnerdlgraphbuilder method)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.getLabelColumn"]], "graphfile (tfnerdlgraphbuilder attribute)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFile"]], "graphfolder (tfnerdlgraphbuilder attribute)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.graphFolder"]], "hiddenunitsnumber (tfnerdlgraphbuilder attribute)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.hiddenUnitsNumber"]], "inputannotatortypes (tfnerdlgraphbuilder attribute)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputAnnotatorTypes"]], "inputcols (tfnerdlgraphbuilder attribute)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputCols"]], "inputcolsvalidation() (tfnerdlgraphbuilder method)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.inputColsValidation"]], "labelcolumn (tfnerdlgraphbuilder attribute)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.labelColumn"]], "setgraphfile() (tfnerdlgraphbuilder method)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFile"]], "setgraphfolder() (tfnerdlgraphbuilder method)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setGraphFolder"]], "sethiddenunitsnumber() (tfnerdlgraphbuilder method)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setHiddenUnitsNumber"]], "setinputcols() (tfnerdlgraphbuilder method)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setInputCols"]], "setlabelcolumn() (tfnerdlgraphbuilder method)": [[177, "sparknlp.annotator.tf_ner_dl_graph_builder.TFNerDLGraphBuilder.setLabelColumn"]], "sparknlp.annotator.tf_ner_dl_graph_builder": [[177, "module-sparknlp.annotator.tf_ner_dl_graph_builder"]], "sparknlp.annotator.token": [[178, "module-sparknlp.annotator.token"]], "chunktokenizer (class in sparknlp.annotator.token.chunk_tokenizer)": [[179, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer"]], "chunktokenizermodel (class in sparknlp.annotator.token.chunk_tokenizer)": [[179, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel"]], "inputannotatortypes (chunktokenizer attribute)": [[179, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (chunktokenizermodel attribute)": [[179, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.inputAnnotatorTypes"]], "name (chunktokenizer attribute)": [[179, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizer.name"]], "name (chunktokenizermodel attribute)": [[179, "sparknlp.annotator.token.chunk_tokenizer.ChunkTokenizerModel.name"]], "sparknlp.annotator.token.chunk_tokenizer": [[179, "module-sparknlp.annotator.token.chunk_tokenizer"]], "recursivetokenizer (class in sparknlp.annotator.token.recursive_tokenizer)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer"]], "recursivetokenizermodel (class in sparknlp.annotator.token.recursive_tokenizer)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel"]], "infixes (recursivetokenizer attribute)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.infixes"]], "inputannotatortypes (recursivetokenizer attribute)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.inputAnnotatorTypes"]], "inputannotatortypes (recursivetokenizermodel attribute)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.inputAnnotatorTypes"]], "name (recursivetokenizer attribute)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.name"]], "name (recursivetokenizermodel attribute)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.name"]], "outputannotatortype (recursivetokenizer attribute)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.outputAnnotatorType"]], "outputannotatortype (recursivetokenizermodel attribute)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizerModel.outputAnnotatorType"]], "prefixes (recursivetokenizer attribute)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.prefixes"]], "setinfixes() (recursivetokenizer method)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setInfixes"]], "setprefixes() (recursivetokenizer method)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setPrefixes"]], "setsuffixes() (recursivetokenizer method)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setSuffixes"]], "setwhitelist() (recursivetokenizer method)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.setWhitelist"]], "sparknlp.annotator.token.recursive_tokenizer": [[180, "module-sparknlp.annotator.token.recursive_tokenizer"]], "suffixes (recursivetokenizer attribute)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.suffixes"]], "whitelist (recursivetokenizer attribute)": [[180, "sparknlp.annotator.token.recursive_tokenizer.RecursiveTokenizer.whitelist"]], "regextokenizer (class in sparknlp.annotator.token.regex_tokenizer)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer"]], "inputannotatortypes (regextokenizer attribute)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.inputAnnotatorTypes"]], "maxlength (regextokenizer attribute)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.maxLength"]], "minlength (regextokenizer attribute)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.minLength"]], "name (regextokenizer attribute)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.name"]], "outputannotatortype (regextokenizer attribute)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.outputAnnotatorType"]], "pattern (regextokenizer attribute)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.pattern"]], "positionalmask (regextokenizer attribute)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.positionalMask"]], "preserveposition (regextokenizer attribute)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.preservePosition"]], "setmaxlength() (regextokenizer method)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMaxLength"]], "setminlength() (regextokenizer method)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setMinLength"]], "setpattern() (regextokenizer method)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPattern"]], "setpositionalmask() (regextokenizer method)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPositionalMask"]], "setpreserveposition() (regextokenizer method)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setPreservePosition"]], "settolowercase() (regextokenizer method)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setToLowercase"]], "settrimwhitespace() (regextokenizer method)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.setTrimWhitespace"]], "sparknlp.annotator.token.regex_tokenizer": [[181, "module-sparknlp.annotator.token.regex_tokenizer"]], "tolowercase (regextokenizer attribute)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.toLowercase"]], "trimwhitespace (regextokenizer attribute)": [[181, "sparknlp.annotator.token.regex_tokenizer.RegexTokenizer.trimWhitespace"]], "tokenizer (class in sparknlp.annotator.token.tokenizer)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer"]], "tokenizermodel (class in sparknlp.annotator.token.tokenizer)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel"]], "addcontextchars() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.addContextChars"]], "addexception() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.addException"]], "addinfixpattern() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.addInfixPattern"]], "addsplitchars() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.addSplitChars"]], "addsplitchars() (tokenizermodel method)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.addSplitChars"]], "casesensitiveexceptions (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.caseSensitiveExceptions"]], "casesensitiveexceptions (tokenizermodel attribute)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.caseSensitiveExceptions"]], "contextchars (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.contextChars"]], "exceptions (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptions"]], "exceptions (tokenizermodel attribute)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.exceptions"]], "exceptionspath (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.exceptionsPath"]], "getcasesensitiveexceptions() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.getCaseSensitiveExceptions"]], "getcontextchars() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.getContextChars"]], "getexceptions() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.getExceptions"]], "getinfixpatterns() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.getInfixPatterns"]], "getprefixpattern() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.getPrefixPattern"]], "getsplitchars() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.getSplitChars"]], "getsuffixpattern() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.getSuffixPattern"]], "infixpatterns (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.infixPatterns"]], "inputannotatortypes (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.inputAnnotatorTypes"]], "inputannotatortypes (tokenizermodel attribute)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.inputAnnotatorTypes"]], "maxlength (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.maxLength"]], "minlength (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.minLength"]], "name (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.name"]], "name (tokenizermodel attribute)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.name"]], "outputannotatortype (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.outputAnnotatorType"]], "outputannotatortype (tokenizermodel attribute)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.outputAnnotatorType"]], "prefixpattern (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.prefixPattern"]], "pretrained() (tokenizermodel static method)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.pretrained"]], "rules (tokenizermodel attribute)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.rules"]], "setcasesensitiveexceptions() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setCaseSensitiveExceptions"]], "setcontextchars() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setContextChars"]], "setexceptions() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptions"]], "setexceptionspath() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setExceptionsPath"]], "setinfixpatterns() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setInfixPatterns"]], "setmaxlength() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setMaxLength"]], "setminlength() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setMinLength"]], "setprefixpattern() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setPrefixPattern"]], "setsplitchars() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitChars"]], "setsplitchars() (tokenizermodel method)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitChars"]], "setsplitpattern() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setSplitPattern"]], "setsplitpattern() (tokenizermodel method)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.setSplitPattern"]], "setsuffixpattern() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setSuffixPattern"]], "settargetpattern() (tokenizer method)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.setTargetPattern"]], "sparknlp.annotator.token.tokenizer": [[182, "module-sparknlp.annotator.token.tokenizer"]], "splitchars (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.splitChars"]], "splitchars (tokenizermodel attribute)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitChars"]], "splitpattern (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.splitPattern"]], "splitpattern (tokenizermodel attribute)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.splitPattern"]], "suffixpattern (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.suffixPattern"]], "targetpattern (tokenizer attribute)": [[182, "sparknlp.annotator.token.tokenizer.Tokenizer.targetPattern"]], "targetpattern (tokenizermodel attribute)": [[182, "sparknlp.annotator.token.tokenizer.TokenizerModel.targetPattern"]], "token2chunk (class in sparknlp.annotator.token2_chunk)": [[183, "sparknlp.annotator.token2_chunk.Token2Chunk"]], "inputannotatortypes (token2chunk attribute)": [[183, "sparknlp.annotator.token2_chunk.Token2Chunk.inputAnnotatorTypes"]], "name (token2chunk attribute)": [[183, "sparknlp.annotator.token2_chunk.Token2Chunk.name"]], "outputannotatortype (token2chunk attribute)": [[183, "sparknlp.annotator.token2_chunk.Token2Chunk.outputAnnotatorType"]], "sparknlp.annotator.token2_chunk": [[183, "module-sparknlp.annotator.token2_chunk"]], "sparknlp.annotator.ws": [[184, "module-sparknlp.annotator.ws"]], "wordsegmenterapproach (class in sparknlp.annotator.ws.word_segmenter)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach"]], "wordsegmentermodel (class in sparknlp.annotator.ws.word_segmenter)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel"]], "ambiguitythreshold (wordsegmenterapproach attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.ambiguityThreshold"]], "enableregextokenizer (wordsegmenterapproach attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.enableRegexTokenizer"]], "enableregextokenizer (wordsegmentermodel attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.enableRegexTokenizer"]], "frequencythreshold (wordsegmenterapproach attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.frequencyThreshold"]], "getambiguitythreshold() (wordsegmenterapproach method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getAmbiguityThreshold"]], "getfrequencythreshold() (wordsegmenterapproach method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getFrequencyThreshold"]], "getniterations() (wordsegmenterapproach method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.getNIterations"]], "inputannotatortypes (wordsegmenterapproach attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.inputAnnotatorTypes"]], "inputannotatortypes (wordsegmentermodel attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.inputAnnotatorTypes"]], "niterations (wordsegmenterapproach attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.nIterations"]], "name (wordsegmenterapproach attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.name"]], "name (wordsegmentermodel attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.name"]], "outputannotatortype (wordsegmenterapproach attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.outputAnnotatorType"]], "outputannotatortype (wordsegmentermodel attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.outputAnnotatorType"]], "pattern (wordsegmenterapproach attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.pattern"]], "pattern (wordsegmentermodel attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pattern"]], "poscol (wordsegmenterapproach attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.posCol"]], "pretrained() (wordsegmentermodel static method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.pretrained"]], "setambiguitythreshold() (wordsegmenterapproach method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setAmbiguityThreshold"]], "setenableregextokenizer() (wordsegmenterapproach method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setEnableRegexTokenizer"]], "setenableregextokenizer() (wordsegmentermodel method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setEnableRegexTokenizer"]], "setfrequencythreshold() (wordsegmenterapproach method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setFrequencyThreshold"]], "setniterations() (wordsegmenterapproach method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setNIterations"]], "setpattern() (wordsegmenterapproach method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPattern"]], "setpattern() (wordsegmentermodel method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setPattern"]], "setposcolumn() (wordsegmenterapproach method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setPosColumn"]], "settolowercase() (wordsegmenterapproach method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.setToLowercase"]], "settolowercase() (wordsegmentermodel method)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.setToLowercase"]], "sparknlp.annotator.ws.word_segmenter": [[185, "module-sparknlp.annotator.ws.word_segmenter"]], "tolowercase (wordsegmenterapproach attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterApproach.toLowercase"]], "tolowercase (wordsegmentermodel attribute)": [[185, "sparknlp.annotator.ws.word_segmenter.WordSegmenterModel.toLowercase"]], "sparknlp.base": [[186, "module-sparknlp.base"]], "audioassembler (class in sparknlp.base.audio_assembler)": [[187, "sparknlp.base.audio_assembler.AudioAssembler"]], "getoutputcol() (audioassembler method)": [[187, "sparknlp.base.audio_assembler.AudioAssembler.getOutputCol"]], "inputcol (audioassembler attribute)": [[187, "sparknlp.base.audio_assembler.AudioAssembler.inputCol"]], "name (audioassembler attribute)": [[187, "sparknlp.base.audio_assembler.AudioAssembler.name"]], "outputannotatortype (audioassembler attribute)": [[187, "sparknlp.base.audio_assembler.AudioAssembler.outputAnnotatorType"]], "outputcol (audioassembler attribute)": [[187, "sparknlp.base.audio_assembler.AudioAssembler.outputCol"]], "setinputcol() (audioassembler method)": [[187, "sparknlp.base.audio_assembler.AudioAssembler.setInputCol"]], "setoutputcol() (audioassembler method)": [[187, "sparknlp.base.audio_assembler.AudioAssembler.setOutputCol"]], "setparams() (audioassembler method)": [[187, "sparknlp.base.audio_assembler.AudioAssembler.setParams"]], "sparknlp.base.audio_assembler": [[187, "module-sparknlp.base.audio_assembler"]], "doc2chunk (class in sparknlp.base.doc2_chunk)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk"]], "chunkcol (doc2chunk attribute)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.chunkCol"]], "failonmissing (doc2chunk attribute)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.failOnMissing"]], "inputannotatortypes (doc2chunk attribute)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.inputAnnotatorTypes"]], "isarray (doc2chunk attribute)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.isArray"]], "lowercase (doc2chunk attribute)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.lowerCase"]], "name (doc2chunk attribute)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.name"]], "outputannotatortype (doc2chunk attribute)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.outputAnnotatorType"]], "setchunkcol() (doc2chunk method)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.setChunkCol"]], "setfailonmissing() (doc2chunk method)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.setFailOnMissing"]], "setisarray() (doc2chunk method)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.setIsArray"]], "setlowercase() (doc2chunk method)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.setLowerCase"]], "setparams() (doc2chunk method)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.setParams"]], "setstartcol() (doc2chunk method)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartCol"]], "setstartcolbytokenindex() (doc2chunk method)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.setStartColByTokenIndex"]], "sparknlp.base.doc2_chunk": [[188, "module-sparknlp.base.doc2_chunk"]], "startcol (doc2chunk attribute)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.startCol"]], "startcolbytokenindex (doc2chunk attribute)": [[188, "sparknlp.base.doc2_chunk.Doc2Chunk.startColByTokenIndex"]], "documentassembler (class in sparknlp.base.document_assembler)": [[189, "sparknlp.base.document_assembler.DocumentAssembler"]], "cleanupmode (documentassembler attribute)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.cleanupMode"]], "getoutputcol() (documentassembler method)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.getOutputCol"]], "idcol (documentassembler attribute)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.idCol"]], "inputcol (documentassembler attribute)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.inputCol"]], "metadatacol (documentassembler attribute)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.metadataCol"]], "name (documentassembler attribute)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.name"]], "outputannotatortype (documentassembler attribute)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.outputAnnotatorType"]], "outputcol (documentassembler attribute)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.outputCol"]], "setcleanupmode() (documentassembler method)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.setCleanupMode"]], "setidcol() (documentassembler method)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.setIdCol"]], "setinputcol() (documentassembler method)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.setInputCol"]], "setmetadatacol() (documentassembler method)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.setMetadataCol"]], "setoutputcol() (documentassembler method)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.setOutputCol"]], "setparams() (documentassembler method)": [[189, "sparknlp.base.document_assembler.DocumentAssembler.setParams"]], "sparknlp.base.document_assembler": [[189, "module-sparknlp.base.document_assembler"]], "embeddingsfinisher (class in sparknlp.base.embeddings_finisher)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher"]], "cleanannotations (embeddingsfinisher attribute)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.cleanAnnotations"]], "getinputcols() (embeddingsfinisher method)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getInputCols"]], "getoutputcols() (embeddingsfinisher method)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.getOutputCols"]], "inputcols (embeddingsfinisher attribute)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.inputCols"]], "name (embeddingsfinisher attribute)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.name"]], "outputasvector (embeddingsfinisher attribute)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputAsVector"]], "outputcols (embeddingsfinisher attribute)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.outputCols"]], "setcleanannotations() (embeddingsfinisher method)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setCleanAnnotations"]], "setinputcols() (embeddingsfinisher method)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setInputCols"]], "setoutputasvector() (embeddingsfinisher method)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputAsVector"]], "setoutputcols() (embeddingsfinisher method)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setOutputCols"]], "setparams() (embeddingsfinisher method)": [[190, "sparknlp.base.embeddings_finisher.EmbeddingsFinisher.setParams"]], "sparknlp.base.embeddings_finisher": [[190, "module-sparknlp.base.embeddings_finisher"]], "finisher (class in sparknlp.base.finisher)": [[191, "sparknlp.base.finisher.Finisher"]], "annotationsplitsymbol (finisher attribute)": [[191, "sparknlp.base.finisher.Finisher.annotationSplitSymbol"]], "cleanannotations (finisher attribute)": [[191, "sparknlp.base.finisher.Finisher.cleanAnnotations"]], "getinputcols() (finisher method)": [[191, "sparknlp.base.finisher.Finisher.getInputCols"]], "getoutputcols() (finisher method)": [[191, "sparknlp.base.finisher.Finisher.getOutputCols"]], "includemetadata (finisher attribute)": [[191, "sparknlp.base.finisher.Finisher.includeMetadata"]], "inputcols (finisher attribute)": [[191, "sparknlp.base.finisher.Finisher.inputCols"]], "name (finisher attribute)": [[191, "sparknlp.base.finisher.Finisher.name"]], "outputasarray (finisher attribute)": [[191, "sparknlp.base.finisher.Finisher.outputAsArray"]], "outputcols (finisher attribute)": [[191, "sparknlp.base.finisher.Finisher.outputCols"]], "parseembeddingsvectors (finisher attribute)": [[191, "sparknlp.base.finisher.Finisher.parseEmbeddingsVectors"]], "setannotationsplitsymbol() (finisher method)": [[191, "sparknlp.base.finisher.Finisher.setAnnotationSplitSymbol"]], "setcleanannotations() (finisher method)": [[191, "sparknlp.base.finisher.Finisher.setCleanAnnotations"]], "setincludemetadata() (finisher method)": [[191, "sparknlp.base.finisher.Finisher.setIncludeMetadata"]], "setinputcols() (finisher method)": [[191, "sparknlp.base.finisher.Finisher.setInputCols"]], "setoutputasarray() (finisher method)": [[191, "sparknlp.base.finisher.Finisher.setOutputAsArray"]], "setoutputcols() (finisher method)": [[191, "sparknlp.base.finisher.Finisher.setOutputCols"]], "setparams() (finisher method)": [[191, "sparknlp.base.finisher.Finisher.setParams"]], "setparseembeddingsvectors() (finisher method)": [[191, "sparknlp.base.finisher.Finisher.setParseEmbeddingsVectors"]], "setvaluesplitsymbol() (finisher method)": [[191, "sparknlp.base.finisher.Finisher.setValueSplitSymbol"]], "sparknlp.base.finisher": [[191, "module-sparknlp.base.finisher"]], "valuesplitsymbol (finisher attribute)": [[191, "sparknlp.base.finisher.Finisher.valueSplitSymbol"]], "graphfinisher (class in sparknlp.base.graph_finisher)": [[192, "sparknlp.base.graph_finisher.GraphFinisher"]], "cleanannotations (graphfinisher attribute)": [[192, "sparknlp.base.graph_finisher.GraphFinisher.cleanAnnotations"]], "inputcol (graphfinisher attribute)": [[192, "sparknlp.base.graph_finisher.GraphFinisher.inputCol"]], "name (graphfinisher attribute)": [[192, "sparknlp.base.graph_finisher.GraphFinisher.name"]], "outputasarray (graphfinisher attribute)": [[192, "sparknlp.base.graph_finisher.GraphFinisher.outputAsArray"]], "outputcol (graphfinisher attribute)": [[192, "sparknlp.base.graph_finisher.GraphFinisher.outputCol"]], "setcleanannotations() (graphfinisher method)": [[192, "sparknlp.base.graph_finisher.GraphFinisher.setCleanAnnotations"]], "setinputcol() (graphfinisher method)": [[192, "sparknlp.base.graph_finisher.GraphFinisher.setInputCol"]], "setoutputasarray() (graphfinisher method)": [[192, "sparknlp.base.graph_finisher.GraphFinisher.setOutputAsArray"]], "setoutputcol() (graphfinisher method)": [[192, "sparknlp.base.graph_finisher.GraphFinisher.setOutputCol"]], "setparams() (graphfinisher method)": [[192, "sparknlp.base.graph_finisher.GraphFinisher.setParams"]], "sparknlp.base.graph_finisher": [[192, "module-sparknlp.base.graph_finisher"]], "hasrecursivefit (class in sparknlp.base.has_recursive_fit)": [[193, "sparknlp.base.has_recursive_fit.HasRecursiveFit"]], "sparknlp.base.has_recursive_fit": [[193, "module-sparknlp.base.has_recursive_fit"]], "hasrecursivetransform (class in sparknlp.base.has_recursive_transform)": [[194, "sparknlp.base.has_recursive_transform.HasRecursiveTransform"]], "sparknlp.base.has_recursive_transform": [[194, "module-sparknlp.base.has_recursive_transform"]], "imageassembler (class in sparknlp.base.image_assembler)": [[195, "sparknlp.base.image_assembler.ImageAssembler"]], "getoutputcol() (imageassembler method)": [[195, "sparknlp.base.image_assembler.ImageAssembler.getOutputCol"]], "inputcol (imageassembler attribute)": [[195, "sparknlp.base.image_assembler.ImageAssembler.inputCol"]], "loadimagesasbytes() (imageassembler class method)": [[195, "sparknlp.base.image_assembler.ImageAssembler.loadImagesAsBytes"]], "name (imageassembler attribute)": [[195, "sparknlp.base.image_assembler.ImageAssembler.name"]], "outputannotatortype (imageassembler attribute)": [[195, "sparknlp.base.image_assembler.ImageAssembler.outputAnnotatorType"]], "outputcol (imageassembler attribute)": [[195, "sparknlp.base.image_assembler.ImageAssembler.outputCol"]], "setinputcol() (imageassembler method)": [[195, "sparknlp.base.image_assembler.ImageAssembler.setInputCol"]], "setoutputcol() (imageassembler method)": [[195, "sparknlp.base.image_assembler.ImageAssembler.setOutputCol"]], "setparams() (imageassembler method)": [[195, "sparknlp.base.image_assembler.ImageAssembler.setParams"]], "settextcol() (imageassembler method)": [[195, "sparknlp.base.image_assembler.ImageAssembler.setTextCol"]], "sparknlp.base.image_assembler": [[195, "module-sparknlp.base.image_assembler"]], "textcol (imageassembler attribute)": [[195, "sparknlp.base.image_assembler.ImageAssembler.textCol"]], "lightpipeline (class in sparknlp.base.light_pipeline)": [[196, "sparknlp.base.light_pipeline.LightPipeline"]], "annotate() (lightpipeline method)": [[196, "sparknlp.base.light_pipeline.LightPipeline.annotate"]], "fullannotate() (lightpipeline method)": [[196, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotate"]], "fullannotateimage() (lightpipeline method)": [[196, "sparknlp.base.light_pipeline.LightPipeline.fullAnnotateImage"]], "getignoreunsupported() (lightpipeline method)": [[196, "sparknlp.base.light_pipeline.LightPipeline.getIgnoreUnsupported"]], "setignoreunsupported() (lightpipeline method)": [[196, "sparknlp.base.light_pipeline.LightPipeline.setIgnoreUnsupported"]], "sparknlp.base.light_pipeline": [[196, "module-sparknlp.base.light_pipeline"]], "transform() (lightpipeline method)": [[196, "sparknlp.base.light_pipeline.LightPipeline.transform"]], "multidocumentassembler (class in sparknlp.base.multi_document_assembler)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler"]], "cleanupmode (multidocumentassembler attribute)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.cleanupMode"]], "getoutputcols() (multidocumentassembler method)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.getOutputCols"]], "idcol (multidocumentassembler attribute)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.idCol"]], "inputcols (multidocumentassembler attribute)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.inputCols"]], "metadatacol (multidocumentassembler attribute)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.metadataCol"]], "name (multidocumentassembler attribute)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.name"]], "outputannotatortype (multidocumentassembler attribute)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputAnnotatorType"]], "outputcols (multidocumentassembler attribute)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.outputCols"]], "setcleanupmode() (multidocumentassembler method)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setCleanupMode"]], "setidcol() (multidocumentassembler method)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setIdCol"]], "setinputcols() (multidocumentassembler method)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setInputCols"]], "setmetadatacol() (multidocumentassembler method)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setMetadataCol"]], "setoutputcols() (multidocumentassembler method)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setOutputCols"]], "setparams() (multidocumentassembler method)": [[197, "sparknlp.base.multi_document_assembler.MultiDocumentAssembler.setParams"]], "sparknlp.base.multi_document_assembler": [[197, "module-sparknlp.base.multi_document_assembler"]], "promptassembler (class in sparknlp.base.prompt_assembler)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler"]], "addassistant (promptassembler attribute)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler.addAssistant"]], "chattemplate (promptassembler attribute)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler.chatTemplate"]], "inputcol (promptassembler attribute)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler.inputCol"]], "name (promptassembler attribute)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler.name"]], "outputannotatortype (promptassembler attribute)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler.outputAnnotatorType"]], "outputcol (promptassembler attribute)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler.outputCol"]], "setaddassistant() (promptassembler method)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler.setAddAssistant"]], "setchattemplate() (promptassembler method)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler.setChatTemplate"]], "setinputcol() (promptassembler method)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler.setInputCol"]], "setoutputcol() (promptassembler method)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler.setOutputCol"]], "setparams() (promptassembler method)": [[198, "sparknlp.base.prompt_assembler.PromptAssembler.setParams"]], "sparknlp.base.prompt_assembler": [[198, "module-sparknlp.base.prompt_assembler"]], "recursivepipeline (class in sparknlp.base.recursive_pipeline)": [[199, "sparknlp.base.recursive_pipeline.RecursivePipeline"]], "recursivepipelinemodel (class in sparknlp.base.recursive_pipeline)": [[199, "sparknlp.base.recursive_pipeline.RecursivePipelineModel"]], "sparknlp.base.recursive_pipeline": [[199, "module-sparknlp.base.recursive_pipeline"]], "tableassembler (class in sparknlp.base.table_assembler)": [[200, "sparknlp.base.table_assembler.TableAssembler"]], "csvdelimiter (tableassembler attribute)": [[200, "sparknlp.base.table_assembler.TableAssembler.csvDelimiter"]], "escapecsvdelimiter (tableassembler attribute)": [[200, "sparknlp.base.table_assembler.TableAssembler.escapeCsvDelimiter"]], "inputannotatortypes (tableassembler attribute)": [[200, "sparknlp.base.table_assembler.TableAssembler.inputAnnotatorTypes"]], "inputformat (tableassembler attribute)": [[200, "sparknlp.base.table_assembler.TableAssembler.inputFormat"]], "name (tableassembler attribute)": [[200, "sparknlp.base.table_assembler.TableAssembler.name"]], "outputannotatortype (tableassembler attribute)": [[200, "sparknlp.base.table_assembler.TableAssembler.outputAnnotatorType"]], "setcsvdelimiter() (tableassembler method)": [[200, "sparknlp.base.table_assembler.TableAssembler.setCsvDelimiter"]], "setescapecsvdelimiter() (tableassembler method)": [[200, "sparknlp.base.table_assembler.TableAssembler.setEscapeCsvDelimiter"]], "setinputformat() (tableassembler method)": [[200, "sparknlp.base.table_assembler.TableAssembler.setInputFormat"]], "sparknlp.base.table_assembler": [[200, "module-sparknlp.base.table_assembler"]], "tokenassembler (class in sparknlp.base.token_assembler)": [[201, "sparknlp.base.token_assembler.TokenAssembler"]], "inputannotatortypes (tokenassembler attribute)": [[201, "sparknlp.base.token_assembler.TokenAssembler.inputAnnotatorTypes"]], "name (tokenassembler attribute)": [[201, "sparknlp.base.token_assembler.TokenAssembler.name"]], "outputannotatortype (tokenassembler attribute)": [[201, "sparknlp.base.token_assembler.TokenAssembler.outputAnnotatorType"]], "preserveposition (tokenassembler attribute)": [[201, "sparknlp.base.token_assembler.TokenAssembler.preservePosition"]], "setparams() (tokenassembler method)": [[201, "sparknlp.base.token_assembler.TokenAssembler.setParams"]], "setpreserveposition() (tokenassembler method)": [[201, "sparknlp.base.token_assembler.TokenAssembler.setPreservePosition"]], "sparknlp.base.token_assembler": [[201, "module-sparknlp.base.token_assembler"]], "sparknlp.common": [[202, "module-sparknlp.common"]], "annotatorapproach (class in sparknlp.common.annotator_approach)": [[203, "sparknlp.common.annotator_approach.AnnotatorApproach"]], "sparknlp.common.annotator_approach": [[203, "module-sparknlp.common.annotator_approach"]], "annotatormodel (class in sparknlp.common.annotator_model)": [[204, "sparknlp.common.annotator_model.AnnotatorModel"]], "setparams() (annotatormodel method)": [[204, "sparknlp.common.annotator_model.AnnotatorModel.setParams"]], "sparknlp.common.annotator_model": [[204, "module-sparknlp.common.annotator_model"]], "annotatorproperties (class in sparknlp.common.annotator_properties)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties"]], "getinputcols() (annotatorproperties method)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.getInputCols"]], "getlazyannotator() (annotatorproperties method)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.getLazyAnnotator"]], "getoutputcol() (annotatorproperties method)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.getOutputCol"]], "inputannotatortypes (annotatorproperties attribute)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.inputAnnotatorTypes"]], "inputcols (annotatorproperties attribute)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.inputCols"]], "inputcolsvalidation() (annotatorproperties method)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.inputColsValidation"]], "lazyannotator (annotatorproperties attribute)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.lazyAnnotator"]], "optionalinputannotatortypes (annotatorproperties attribute)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorproperties attribute)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.outputAnnotatorType"]], "outputcol (annotatorproperties attribute)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.outputCol"]], "setinputcols() (annotatorproperties method)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.setInputCols"]], "setlazyannotator() (annotatorproperties method)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.setLazyAnnotator"]], "setoutputcol() (annotatorproperties method)": [[205, "sparknlp.common.annotator_properties.AnnotatorProperties.setOutputCol"]], "sparknlp.common.annotator_properties": [[205, "module-sparknlp.common.annotator_properties"]], "audio (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.AUDIO"]], "annotatortype (class in sparknlp.common.annotator_type)": [[206, "sparknlp.common.annotator_type.AnnotatorType"]], "category (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.CATEGORY"]], "chunk (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.CHUNK"]], "date (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.DATE"]], "dependency (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.DEPENDENCY"]], "document (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.DOCUMENT"]], "doc_similarity_rankings (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.DOC_SIMILARITY_RANKINGS"]], "dummy (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.DUMMY"]], "entity (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.ENTITY"]], "image (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.IMAGE"]], "labeled_dependency (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.LABELED_DEPENDENCY"]], "language (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.LANGUAGE"]], "named_entity (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.NAMED_ENTITY"]], "negex (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.NEGEX"]], "node (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.NODE"]], "pos (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.POS"]], "sentence_embeddings (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.SENTENCE_EMBEDDINGS"]], "sentiment (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.SENTIMENT"]], "table (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.TABLE"]], "token (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.TOKEN"]], "wordpiece (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.WORDPIECE"]], "word_embeddings (annotatortype attribute)": [[206, "sparknlp.common.annotator_type.AnnotatorType.WORD_EMBEDDINGS"]], "sparknlp.common.annotator_type": [[206, "module-sparknlp.common.annotator_type"]], "coverageresult (class in sparknlp.common.coverage_result)": [[207, "sparknlp.common.coverage_result.CoverageResult"]], "sparknlp.common.coverage_result": [[207, "module-sparknlp.common.coverage_result"]], "match_all (matchstrategy attribute)": [[208, "sparknlp.common.match_strategy.MatchStrategy.MATCH_ALL"]], "match_complete (matchstrategy attribute)": [[208, "sparknlp.common.match_strategy.MatchStrategy.MATCH_COMPLETE"]], "match_first (matchstrategy attribute)": [[208, "sparknlp.common.match_strategy.MatchStrategy.MATCH_FIRST"]], "matchstrategy (class in sparknlp.common.match_strategy)": [[208, "sparknlp.common.match_strategy.MatchStrategy"]], "sparknlp.common.match_strategy": [[208, "module-sparknlp.common.match_strategy"]], "hasaudiofeatureproperties (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties"]], "hasbatchedannotate (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasBatchedAnnotate"]], "hasbatchedannotateaudio (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasBatchedAnnotateAudio"]], "hasbatchedannotateimage (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasBatchedAnnotateImage"]], "hascandidatelabelsproperties (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasCandidateLabelsProperties"]], "hascasesensitiveproperties (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasCaseSensitiveProperties"]], "hasclassifieractivationproperties (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasClassifierActivationProperties"]], "hasclstokenproperties (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasClsTokenProperties"]], "hasembeddingsproperties (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasEmbeddingsProperties"]], "hasenablecachingproperties (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasEnableCachingProperties"]], "hasengine (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasEngine"]], "hasgeneratorproperties (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasGeneratorProperties"]], "hasimagefeatureproperties (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasImageFeatureProperties"]], "hasllamacppproperties (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasLlamaCppProperties"]], "haslongmaxsentencelengthlimit (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit"]], "hasmaxsentencelengthlimit (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasMaxSentenceLengthLimit"]], "hasrescalefactor (class in sparknlp.common.properties)": [[209, "sparknlp.common.properties.HasRescaleFactor"]], "activation (hasclassifieractivationproperties attribute)": [[209, "sparknlp.common.properties.HasClassifierActivationProperties.activation"]], "batchsize (hasbatchedannotate attribute)": [[209, "sparknlp.common.properties.HasBatchedAnnotate.batchSize"]], "batchsize (hasbatchedannotateaudio attribute)": [[209, "sparknlp.common.properties.HasBatchedAnnotateAudio.batchSize"]], "batchsize (hasbatchedannotateimage attribute)": [[209, "sparknlp.common.properties.HasBatchedAnnotateImage.batchSize"]], "beamsize (hasgeneratorproperties attribute)": [[209, "sparknlp.common.properties.HasGeneratorProperties.beamSize"]], "cacheprompt (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.cachePrompt"]], "candidatelabels (hascandidatelabelsproperties attribute)": [[209, "sparknlp.common.properties.HasCandidateLabelsProperties.candidateLabels"]], "casesensitive (hascasesensitiveproperties attribute)": [[209, "sparknlp.common.properties.HasCaseSensitiveProperties.caseSensitive"]], "chattemplate (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.chatTemplate"]], "contradictionidparam (hascandidatelabelsproperties attribute)": [[209, "sparknlp.common.properties.HasCandidateLabelsProperties.contradictionIdParam"]], "defragmentationthreshold (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.defragmentationThreshold"]], "dimension (hasembeddingsproperties attribute)": [[209, "sparknlp.common.properties.HasEmbeddingsProperties.dimension"]], "disabletokenids (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.disableTokenIds"]], "donormalize (hasaudiofeatureproperties attribute)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.doNormalize"]], "donormalize (hasimagefeatureproperties attribute)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.doNormalize"]], "dorescale (hasrescalefactor attribute)": [[209, "sparknlp.common.properties.HasRescaleFactor.doRescale"]], "doresize (hasimagefeatureproperties attribute)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.doResize"]], "dosample (hasgeneratorproperties attribute)": [[209, "sparknlp.common.properties.HasGeneratorProperties.doSample"]], "dynamictemperatureexponent (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureExponent"]], "dynamictemperaturerange (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.dynamicTemperatureRange"]], "embedding (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.embedding"]], "enablecaching (hasenablecachingproperties attribute)": [[209, "sparknlp.common.properties.HasEnableCachingProperties.enableCaching"]], "engine (hasengine attribute)": [[209, "sparknlp.common.properties.HasEngine.engine"]], "entailmentidparam (hascandidatelabelsproperties attribute)": [[209, "sparknlp.common.properties.HasCandidateLabelsProperties.entailmentIdParam"]], "featureextractortype (hasimagefeatureproperties attribute)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.featureExtractorType"]], "featuresize (hasaudiofeatureproperties attribute)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.featureSize"]], "flashattention (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.flashAttention"]], "frequencypenalty (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.frequencyPenalty"]], "getactivation() (hasclassifieractivationproperties method)": [[209, "sparknlp.common.properties.HasClassifierActivationProperties.getActivation"]], "getbatchsize() (hasbatchedannotate method)": [[209, "sparknlp.common.properties.HasBatchedAnnotate.getBatchSize"]], "getbatchsize() (hasbatchedannotateaudio method)": [[209, "sparknlp.common.properties.HasBatchedAnnotateAudio.getBatchSize"]], "getbatchsize() (hasbatchedannotateimage method)": [[209, "sparknlp.common.properties.HasBatchedAnnotateImage.getBatchSize"]], "getcasesensitive() (hascasesensitiveproperties method)": [[209, "sparknlp.common.properties.HasCaseSensitiveProperties.getCaseSensitive"]], "getdimension() (hasembeddingsproperties method)": [[209, "sparknlp.common.properties.HasEmbeddingsProperties.getDimension"]], "getenablecaching() (hasenablecachingproperties method)": [[209, "sparknlp.common.properties.HasEnableCachingProperties.getEnableCaching"]], "getengine() (hasengine method)": [[209, "sparknlp.common.properties.HasEngine.getEngine"]], "getmaxsentencelength() (hasmaxsentencelengthlimit method)": [[209, "sparknlp.common.properties.HasMaxSentenceLengthLimit.getMaxSentenceLength"]], "getmetadata() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.getMetadata"]], "getmultilabel() (hasclassifieractivationproperties method)": [[209, "sparknlp.common.properties.HasClassifierActivationProperties.getMultilabel"]], "getuseclstoken() (hasclstokenproperties method)": [[209, "sparknlp.common.properties.HasClsTokenProperties.getUseCLSToken"]], "gpusplitmode (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.gpuSplitMode"]], "grammar (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.grammar"]], "grpattnn (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnN"]], "grpattnw (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.grpAttnW"]], "ignoreeos (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.ignoreEos"]], "imagemean (hasimagefeatureproperties attribute)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.imageMean"]], "imagestd (hasimagefeatureproperties attribute)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.imageStd"]], "inputprefix (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefix"]], "inputprefixbos (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.inputPrefixBos"]], "inputsuffix (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.inputSuffix"]], "lookupcachedynamicfilepath (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheDynamicFilePath"]], "lookupcachestaticfilepath (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.lookupCacheStaticFilePath"]], "maingpu (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.mainGpu"]], "maxoutputlength (hasgeneratorproperties attribute)": [[209, "sparknlp.common.properties.HasGeneratorProperties.maxOutputLength"]], "maxsentencelength (hasmaxsentencelengthlimit attribute)": [[209, "sparknlp.common.properties.HasMaxSentenceLengthLimit.maxSentenceLength"]], "max_length_limit (haslongmaxsentencelengthlimit attribute)": [[209, "sparknlp.common.properties.HasLongMaxSentenceLengthLimit.max_length_limit"]], "max_length_limit (hasmaxsentencelengthlimit attribute)": [[209, "sparknlp.common.properties.HasMaxSentenceLengthLimit.max_length_limit"]], "minkeep (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.minKeep"]], "minoutputlength (hasgeneratorproperties attribute)": [[209, "sparknlp.common.properties.HasGeneratorProperties.minOutputLength"]], "minp (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.minP"]], "mirostat (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.miroStat"]], "mirostateta (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.miroStatEta"]], "mirostattau (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.miroStatTau"]], "modelalias (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.modelAlias"]], "modeldraft (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.modelDraft"]], "multilabel (hasclassifieractivationproperties attribute)": [[209, "sparknlp.common.properties.HasClassifierActivationProperties.multilabel"]], "nbatch (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nBatch"]], "nchunks (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nChunks"]], "nctx (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nCtx"]], "ndraft (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nDraft"]], "ngpulayers (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayers"]], "ngpulayersdraft (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nGpuLayersDraft"]], "nkeep (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nKeep"]], "npredict (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nPredict"]], "nprobs (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nProbs"]], "nreturnsequences (hasgeneratorproperties attribute)": [[209, "sparknlp.common.properties.HasGeneratorProperties.nReturnSequences"]], "nsequences (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nSequences"]], "nthreads (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nThreads"]], "nthreadsbatch (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatch"]], "nthreadsbatchdraft (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsBatchDraft"]], "nthreadsdraft (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nThreadsDraft"]], "nubatch (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.nUbatch"]], "nokvoffload (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.noKvOffload"]], "norepeatngramsize (hasgeneratorproperties attribute)": [[209, "sparknlp.common.properties.HasGeneratorProperties.noRepeatNgramSize"]], "numastrategy (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.numaStrategy"]], "psplit (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.pSplit"]], "paddingside (hasaudiofeatureproperties attribute)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.paddingSide"]], "paddingvalue (hasaudiofeatureproperties attribute)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.paddingValue"]], "penalizenl (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.penalizeNl"]], "penaltyprompt (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.penaltyPrompt"]], "poolingtype (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.poolingType"]], "presencepenalty (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.presencePenalty"]], "repeatlastn (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.repeatLastN"]], "repeatpenalty (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.repeatPenalty"]], "repetitionpenalty (hasgeneratorproperties attribute)": [[209, "sparknlp.common.properties.HasGeneratorProperties.repetitionPenalty"]], "resample (hasimagefeatureproperties attribute)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.resample"]], "rescalefactor (hasrescalefactor attribute)": [[209, "sparknlp.common.properties.HasRescaleFactor.rescaleFactor"]], "returnattentionmask (hasaudiofeatureproperties attribute)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.returnAttentionMask"]], "ropefreqbase (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqBase"]], "ropefreqscale (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.ropeFreqScale"]], "ropescalingtype (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.ropeScalingType"]], "samplers (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.samplers"]], "samplingrate (hasaudiofeatureproperties attribute)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.samplingRate"]], "seed (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.seed"]], "setactivation() (hasclassifieractivationproperties method)": [[209, "sparknlp.common.properties.HasClassifierActivationProperties.setActivation"]], "setbatchsize() (hasbatchedannotate method)": [[209, "sparknlp.common.properties.HasBatchedAnnotate.setBatchSize"]], "setbatchsize() (hasbatchedannotateaudio method)": [[209, "sparknlp.common.properties.HasBatchedAnnotateAudio.setBatchSize"]], "setbatchsize() (hasbatchedannotateimage method)": [[209, "sparknlp.common.properties.HasBatchedAnnotateImage.setBatchSize"]], "setbeamsize() (hasgeneratorproperties method)": [[209, "sparknlp.common.properties.HasGeneratorProperties.setBeamSize"]], "setcacheprompt() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setCachePrompt"]], "setcandidatelabels() (hascandidatelabelsproperties method)": [[209, "sparknlp.common.properties.HasCandidateLabelsProperties.setCandidateLabels"]], "setcasesensitive() (hascasesensitiveproperties method)": [[209, "sparknlp.common.properties.HasCaseSensitiveProperties.setCaseSensitive"]], "setchattemplate() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setChatTemplate"]], "setcontradictionidparam() (hascandidatelabelsproperties method)": [[209, "sparknlp.common.properties.HasCandidateLabelsProperties.setContradictionIdParam"]], "setdefragmentationthreshold() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setDefragmentationThreshold"]], "setdimension() (hasembeddingsproperties method)": [[209, "sparknlp.common.properties.HasEmbeddingsProperties.setDimension"]], "setdisabletokenids() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setDisableTokenIds"]], "setdonormalize() (hasaudiofeatureproperties method)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.setDoNormalize"]], "setdonormalize() (hasimagefeatureproperties method)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.setDoNormalize"]], "setdorescale() (hasrescalefactor method)": [[209, "sparknlp.common.properties.HasRescaleFactor.setDoRescale"]], "setdoresize() (hasimagefeatureproperties method)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.setDoResize"]], "setdosample() (hasgeneratorproperties method)": [[209, "sparknlp.common.properties.HasGeneratorProperties.setDoSample"]], "setdynamictemperatureexponent() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setDynamicTemperatureRange"]], "setembedding() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setEmbedding"]], "setenablecaching() (hasenablecachingproperties method)": [[209, "sparknlp.common.properties.HasEnableCachingProperties.setEnableCaching"]], "setentailmentidparam() (hascandidatelabelsproperties method)": [[209, "sparknlp.common.properties.HasCandidateLabelsProperties.setEntailmentIdParam"]], "setfeatureextractortype() (hasimagefeatureproperties method)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.setFeatureExtractorType"]], "setfeaturesize() (hasaudiofeatureproperties method)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.setFeatureSize"]], "setflashattention() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setFlashAttention"]], "setfrequencypenalty() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setFrequencyPenalty"]], "setgpusplitmode() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setGpuSplitMode"]], "setgrammar() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setGrammar"]], "setgrpattnn() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnN"]], "setgrpattnw() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setGrpAttnW"]], "setignoreeos() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setIgnoreEos"]], "setimagemean() (hasimagefeatureproperties method)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.setImageMean"]], "setimagestd() (hasimagefeatureproperties method)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.setImageStd"]], "setinputprefix() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefix"]], "setinputprefixbos() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setInputPrefixBos"]], "setinputsuffix() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setInputSuffix"]], "setlookupcachedynamicfilepath() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheDynamicFilePath"]], "setlookupcachestaticfilepath() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setLookupCacheStaticFilePath"]], "setloraadapters() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setLoraAdapters"]], "setmaingpu() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setMainGpu"]], "setmaxoutputlength() (hasgeneratorproperties method)": [[209, "sparknlp.common.properties.HasGeneratorProperties.setMaxOutputLength"]], "setmaxsentencelength() (hasmaxsentencelengthlimit method)": [[209, "sparknlp.common.properties.HasMaxSentenceLengthLimit.setMaxSentenceLength"]], "setminkeep() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setMinKeep"]], "setminoutputlength() (hasgeneratorproperties method)": [[209, "sparknlp.common.properties.HasGeneratorProperties.setMinOutputLength"]], "setminp() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setMinP"]], "setmirostat() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStat"]], "setmirostateta() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatEta"]], "setmirostattau() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setMiroStatTau"]], "setmodelalias() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setModelAlias"]], "setmodeldraft() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setModelDraft"]], "setmultilabel() (hasclassifieractivationproperties method)": [[209, "sparknlp.common.properties.HasClassifierActivationProperties.setMultilabel"]], "setnbatch() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNBatch"]], "setnchunks() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNChunks"]], "setnctx() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNCtx"]], "setndraft() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNDraft"]], "setngpulayers() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayers"]], "setngpulayersdraft() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNGpuLayersDraft"]], "setnkeep() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNKeep"]], "setnparallel() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNParallel"]], "setnpredict() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNPredict"]], "setnprobs() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNProbs"]], "setnreturnsequences() (hasgeneratorproperties method)": [[209, "sparknlp.common.properties.HasGeneratorProperties.setNReturnSequences"]], "setnsequences() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNSequences"]], "setnthreads() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNThreads"]], "setnthreadsbatch() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatch"]], "setnthreadsbatchdraft() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsBatchDraft"]], "setnthreadsdraft() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNThreadsDraft"]], "setnubatch() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNUbatch"]], "setnokvoffload() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNoKvOffload"]], "setnorepeatngramsize() (hasgeneratorproperties method)": [[209, "sparknlp.common.properties.HasGeneratorProperties.setNoRepeatNgramSize"]], "setnumastrategy() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setNumaStrategy"]], "setpsplit() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setPSplit"]], "setpaddingside() (hasaudiofeatureproperties method)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingSide"]], "setpaddingvalue() (hasaudiofeatureproperties method)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.setPaddingValue"]], "setpenalizenl() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setPenalizeNl"]], "setpenaltyprompt() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setPenaltyPrompt"]], "setpoolingtype() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setPoolingType"]], "setpresencepenalty() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setPresencePenalty"]], "setrepeatlastn() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatLastN"]], "setrepeatpenalty() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setRepeatPenalty"]], "setrepetitionpenalty() (hasgeneratorproperties method)": [[209, "sparknlp.common.properties.HasGeneratorProperties.setRepetitionPenalty"]], "setresample() (hasimagefeatureproperties method)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.setResample"]], "setrescalefactor() (hasrescalefactor method)": [[209, "sparknlp.common.properties.HasRescaleFactor.setRescaleFactor"]], "setreturnattentionmask() (hasaudiofeatureproperties method)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.setReturnAttentionMask"]], "setropefreqbase() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqBase"]], "setropefreqscale() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setRopeFreqScale"]], "setropescalingtype() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setRopeScalingType"]], "setsamplers() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setSamplers"]], "setsamplingrate() (hasaudiofeatureproperties method)": [[209, "sparknlp.common.properties.HasAudioFeatureProperties.setSamplingRate"]], "setseed() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setSeed"]], "setsize() (hasimagefeatureproperties method)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.setSize"]], "setstopstrings() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setStopStrings"]], "setsystemprompt() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setSystemPrompt"]], "settask() (hasgeneratorproperties method)": [[209, "sparknlp.common.properties.HasGeneratorProperties.setTask"]], "settemperature() (hasgeneratorproperties method)": [[209, "sparknlp.common.properties.HasGeneratorProperties.setTemperature"]], "settemperature() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setTemperature"]], "settensorsplit() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setTensorSplit"]], "settfsz() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setTfsZ"]], "setthreshold() (hasclassifieractivationproperties method)": [[209, "sparknlp.common.properties.HasClassifierActivationProperties.setThreshold"]], "settokenbias() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setTokenBias"]], "settokenidbias() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setTokenIdBias"]], "settopk() (hasgeneratorproperties method)": [[209, "sparknlp.common.properties.HasGeneratorProperties.setTopK"]], "settopk() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setTopK"]], "settopp() (hasgeneratorproperties method)": [[209, "sparknlp.common.properties.HasGeneratorProperties.setTopP"]], "settopp() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setTopP"]], "settypicalp() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setTypicalP"]], "setuseclstoken() (hasclstokenproperties method)": [[209, "sparknlp.common.properties.HasClsTokenProperties.setUseCLSToken"]], "setusechattemplate() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setUseChatTemplate"]], "setusemlock() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setUseMlock"]], "setusemmap() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setUseMmap"]], "setyarnattnfactor() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setYarnAttnFactor"]], "setyarnbetafast() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaFast"]], "setyarnbetaslow() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setYarnBetaSlow"]], "setyarnextfactor() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setYarnExtFactor"]], "setyarnorigctx() (hasllamacppproperties method)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.setYarnOrigCtx"]], "size (hasimagefeatureproperties attribute)": [[209, "sparknlp.common.properties.HasImageFeatureProperties.size"]], "sparknlp.common.properties": [[209, "module-sparknlp.common.properties"]], "stopstrings (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.stopStrings"]], "systemprompt (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.systemPrompt"]], "task (hasgeneratorproperties attribute)": [[209, "sparknlp.common.properties.HasGeneratorProperties.task"]], "temperature (hasgeneratorproperties attribute)": [[209, "sparknlp.common.properties.HasGeneratorProperties.temperature"]], "temperature (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.temperature"]], "tensorsplit (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.tensorSplit"]], "tfsz (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.tfsZ"]], "threshold (hasclassifieractivationproperties attribute)": [[209, "sparknlp.common.properties.HasClassifierActivationProperties.threshold"]], "topk (hasgeneratorproperties attribute)": [[209, "sparknlp.common.properties.HasGeneratorProperties.topK"]], "topk (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.topK"]], "topp (hasgeneratorproperties attribute)": [[209, "sparknlp.common.properties.HasGeneratorProperties.topP"]], "topp (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.topP"]], "typicalp (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.typicalP"]], "useclstoken (hasclstokenproperties attribute)": [[209, "sparknlp.common.properties.HasClsTokenProperties.useCLSToken"]], "usechattemplate (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.useChatTemplate"]], "usemlock (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.useMlock"]], "usemmap (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.useMmap"]], "yarnattnfactor (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.yarnAttnFactor"]], "yarnbetafast (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaFast"]], "yarnbetaslow (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.yarnBetaSlow"]], "yarnextfactor (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.yarnExtFactor"]], "yarnorigctx (hasllamacppproperties attribute)": [[209, "sparknlp.common.properties.HasLlamaCppProperties.yarnOrigCtx"]], "binary (readas attribute)": [[210, "sparknlp.common.read_as.ReadAs.BINARY"]], "readas (class in sparknlp.common.read_as)": [[210, "sparknlp.common.read_as.ReadAs"]], "spark (readas attribute)": [[210, "sparknlp.common.read_as.ReadAs.SPARK"]], "text (readas attribute)": [[210, "sparknlp.common.read_as.ReadAs.TEXT"]], "sparknlp.common.read_as": [[210, "module-sparknlp.common.read_as"]], "recursiveannotatorapproach (class in sparknlp.common.recursive_annotator_approach)": [[211, "sparknlp.common.recursive_annotator_approach.RecursiveAnnotatorApproach"]], "sparknlp.common.recursive_annotator_approach": [[211, "module-sparknlp.common.recursive_annotator_approach"]], "hasstorage (class in sparknlp.common.storage)": [[212, "sparknlp.common.storage.HasStorage"]], "hasstoragemodel (class in sparknlp.common.storage)": [[212, "sparknlp.common.storage.HasStorageModel"]], "hasstorageoptions (class in sparknlp.common.storage)": [[212, "sparknlp.common.storage.HasStorageOptions"]], "hasstorageref (class in sparknlp.common.storage)": [[212, "sparknlp.common.storage.HasStorageRef"]], "enableinmemorystorage (hasstorageoptions attribute)": [[212, "sparknlp.common.storage.HasStorageOptions.enableInMemoryStorage"]], "getenableinmemorystorage() (hasstorageoptions method)": [[212, "sparknlp.common.storage.HasStorageOptions.getEnableInMemoryStorage"]], "getincludestorage() (hasstorageoptions method)": [[212, "sparknlp.common.storage.HasStorageOptions.getIncludeStorage"]], "getstoragepath() (hasstorage method)": [[212, "sparknlp.common.storage.HasStorage.getStoragePath"]], "getstorageref() (hasstorageref method)": [[212, "sparknlp.common.storage.HasStorageRef.getStorageRef"]], "includestorage (hasstorageoptions attribute)": [[212, "sparknlp.common.storage.HasStorageOptions.includeStorage"]], "loadstorage() (hasstoragemodel static method)": [[212, "sparknlp.common.storage.HasStorageModel.loadStorage"]], "loadstorages() (hasstoragemodel static method)": [[212, "sparknlp.common.storage.HasStorageModel.loadStorages"]], "savestorage() (hasstoragemodel method)": [[212, "sparknlp.common.storage.HasStorageModel.saveStorage"]], "setenableinmemorystorage() (hasstorageoptions method)": [[212, "sparknlp.common.storage.HasStorageOptions.setEnableInMemoryStorage"]], "setincludestorage() (hasstorageoptions method)": [[212, "sparknlp.common.storage.HasStorageOptions.setIncludeStorage"]], "setstoragepath() (hasstorage method)": [[212, "sparknlp.common.storage.HasStorage.setStoragePath"]], "setstorageref() (hasstorageref method)": [[212, "sparknlp.common.storage.HasStorageRef.setStorageRef"]], "sparknlp.common.storage": [[212, "module-sparknlp.common.storage"]], "storagepath (hasstorage attribute)": [[212, "sparknlp.common.storage.HasStorage.storagePath"]], "storageref (hasstorageref attribute)": [[212, "sparknlp.common.storage.HasStorageRef.storageRef"]], "externalresource() (in module sparknlp.common.utils)": [[213, "sparknlp.common.utils.ExternalResource"]], "regexrule() (in module sparknlp.common.utils)": [[213, "sparknlp.common.utils.RegexRule"]], "sparknlp.common.utils": [[213, "module-sparknlp.common.utils"]], "explode_annotations_col() (in module sparknlp.functions)": [[214, "sparknlp.functions.explode_annotations_col"]], "filter_by_annotations_col() (in module sparknlp.functions)": [[214, "sparknlp.functions.filter_by_annotations_col"]], "map_annotations() (in module sparknlp.functions)": [[214, "sparknlp.functions.map_annotations"]], "map_annotations_array() (in module sparknlp.functions)": [[214, "sparknlp.functions.map_annotations_array"]], "map_annotations_col() (in module sparknlp.functions)": [[214, "sparknlp.functions.map_annotations_col"]], "map_annotations_cols() (in module sparknlp.functions)": [[214, "sparknlp.functions.map_annotations_cols"]], "map_annotations_strict() (in module sparknlp.functions)": [[214, "sparknlp.functions.map_annotations_strict"]], "sparknlp.functions": [[214, "module-sparknlp.functions"]], "sparknlp.internal": [[215, "module-sparknlp.internal"]], "annotatorjavamlreadable (class in sparknlp.internal.annotator_java_ml)": [[216, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable"]], "annotatorjavamlreader (class in sparknlp.internal.annotator_java_ml)": [[216, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReader"]], "read() (annotatorjavamlreadable class method)": [[216, "sparknlp.internal.annotator_java_ml.AnnotatorJavaMLReadable.read"]], "sparknlp.internal.annotator_java_ml": [[216, "module-sparknlp.internal.annotator_java_ml"]], "annotatortransformer (class in sparknlp.internal.annotator_transformer)": [[217, "sparknlp.internal.annotator_transformer.AnnotatorTransformer"]], "outputannotatortype (annotatortransformer attribute)": [[217, "sparknlp.internal.annotator_transformer.AnnotatorTransformer.outputAnnotatorType"]], "sparknlp.internal.annotator_transformer": [[217, "module-sparknlp.internal.annotator_transformer"]], "extendedjavawrapper (class in sparknlp.internal.extended_java_wrapper)": [[218, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper"]], "apply() (extendedjavawrapper method)": [[218, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.apply"]], "getdataframe() (extendedjavawrapper method)": [[218, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.getDataFrame"]], "new_java_array() (extendedjavawrapper method)": [[218, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "new_java_array_integer() (extendedjavawrapper method)": [[218, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_integer"]], "new_java_array_string() (extendedjavawrapper method)": [[218, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_string"]], "new_java_obj() (extendedjavawrapper method)": [[218, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.new_java_obj"]], "spark_version() (extendedjavawrapper method)": [[218, "sparknlp.internal.extended_java_wrapper.ExtendedJavaWrapper.spark_version"]], "sparknlp.internal.extended_java_wrapper": [[218, "module-sparknlp.internal.extended_java_wrapper"]], "paramsgetterssetters (class in sparknlp.internal.params_getters_setters)": [[219, "sparknlp.internal.params_getters_setters.ParamsGettersSetters"]], "getparamvalue() (paramsgetterssetters method)": [[219, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getParamValue"]], "getter_attrs (paramsgetterssetters attribute)": [[219, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.getter_attrs"]], "setparamvalue() (paramsgetterssetters method)": [[219, "sparknlp.internal.params_getters_setters.ParamsGettersSetters.setParamValue"]], "sparknlp.internal.params_getters_setters": [[219, "module-sparknlp.internal.params_getters_setters"]], "recursiveestimator (class in sparknlp.internal.recursive)": [[220, "sparknlp.internal.recursive.RecursiveEstimator"]], "recursivetransformer (class in sparknlp.internal.recursive)": [[220, "sparknlp.internal.recursive.RecursiveTransformer"]], "fit() (recursiveestimator method)": [[220, "sparknlp.internal.recursive.RecursiveEstimator.fit"]], "sparknlp.internal.recursive": [[220, "module-sparknlp.internal.recursive"]], "transform_recursive() (recursivetransformer method)": [[220, "sparknlp.internal.recursive.RecursiveTransformer.transform_recursive"]], "sparknlp.logging": [[221, "module-sparknlp.logging"]], "cometlogger (class in sparknlp.logging.comet)": [[222, "sparknlp.logging.comet.CometLogger"]], "end() (cometlogger method)": [[222, "sparknlp.logging.comet.CometLogger.end"]], "log_asset() (cometlogger method)": [[222, "sparknlp.logging.comet.CometLogger.log_asset"]], "log_asset_data() (cometlogger method)": [[222, "sparknlp.logging.comet.CometLogger.log_asset_data"]], "log_completed_run() (cometlogger method)": [[222, "sparknlp.logging.comet.CometLogger.log_completed_run"]], "log_metrics() (cometlogger method)": [[222, "sparknlp.logging.comet.CometLogger.log_metrics"]], "log_parameters() (cometlogger method)": [[222, "sparknlp.logging.comet.CometLogger.log_parameters"]], "log_pipeline_parameters() (cometlogger method)": [[222, "sparknlp.logging.comet.CometLogger.log_pipeline_parameters"]], "log_visualization() (cometlogger method)": [[222, "sparknlp.logging.comet.CometLogger.log_visualization"]], "monitor() (cometlogger method)": [[222, "sparknlp.logging.comet.CometLogger.monitor"]], "sparknlp.logging.comet": [[222, "module-sparknlp.logging.comet"]], "sparknlp.pretrained": [[223, "module-sparknlp.pretrained"]], "pretrainedpipeline (class in sparknlp.pretrained.pretrained_pipeline)": [[224, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline"]], "annotate() (pretrainedpipeline method)": [[224, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.annotate"]], "from_disk() (pretrainedpipeline static method)": [[224, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.from_disk"]], "fullannotate() (pretrainedpipeline method)": [[224, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotate"]], "fullannotateimage() (pretrainedpipeline method)": [[224, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.fullAnnotateImage"]], "sparknlp.pretrained.pretrained_pipeline": [[224, "module-sparknlp.pretrained.pretrained_pipeline"]], "transform() (pretrainedpipeline method)": [[224, "sparknlp.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "resourcedownloader (class in sparknlp.pretrained.resource_downloader)": [[225, "sparknlp.pretrained.resource_downloader.ResourceDownloader"]], "clearcache() (resourcedownloader static method)": [[225, "sparknlp.pretrained.resource_downloader.ResourceDownloader.clearCache"]], "downloadmodel() (resourcedownloader static method)": [[225, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModel"]], "downloadmodeldirectly() (resourcedownloader static method)": [[225, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (resourcedownloader static method)": [[225, "sparknlp.pretrained.resource_downloader.ResourceDownloader.downloadPipeline"]], "showavailableannotators() (resourcedownloader static method)": [[225, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (resourcedownloader static method)": [[225, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicModels"]], "showpublicpipelines() (resourcedownloader static method)": [[225, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (resourcedownloader static method)": [[225, "sparknlp.pretrained.resource_downloader.ResourceDownloader.showUnCategorizedResources"]], "sparknlp.pretrained.resource_downloader": [[225, "module-sparknlp.pretrained.resource_downloader"]], "printprogress() (in module sparknlp.pretrained.utils)": [[226, "sparknlp.pretrained.utils.printProgress"]], "sparknlp.pretrained.utils": [[226, "module-sparknlp.pretrained.utils"]], "sparknlp.reader": [[227, "module-sparknlp.reader"]], "pdftotext (class in sparknlp.reader.pdf_to_text)": [[228, "sparknlp.reader.pdf_to_text.PdfToText"]], "pagenumcol (pdftotext attribute)": [[228, "sparknlp.reader.pdf_to_text.PdfToText.pageNumCol"]], "partitionnum (pdftotext attribute)": [[228, "sparknlp.reader.pdf_to_text.PdfToText.partitionNum"]], "setinputcol() (pdftotext method)": [[228, "sparknlp.reader.pdf_to_text.PdfToText.setInputCol"]], "setoutputcol() (pdftotext method)": [[228, "sparknlp.reader.pdf_to_text.PdfToText.setOutputCol"]], "setpagenumcol() (pdftotext method)": [[228, "sparknlp.reader.pdf_to_text.PdfToText.setPageNumCol"]], "setpartitionnum() (pdftotext method)": [[228, "sparknlp.reader.pdf_to_text.PdfToText.setPartitionNum"]], "setstoresplittedpdf() (pdftotext method)": [[228, "sparknlp.reader.pdf_to_text.PdfToText.setStoreSplittedPdf"]], "sparknlp.reader.pdf_to_text": [[228, "module-sparknlp.reader.pdf_to_text"]], "storesplittedpdf (pdftotext attribute)": [[228, "sparknlp.reader.pdf_to_text.PdfToText.storeSplittedPdf"]], "sparknlpreader (class in sparknlp.reader.sparknlp_reader)": [[229, "sparknlp.reader.sparknlp_reader.SparkNLPReader"]], "doc() (sparknlpreader method)": [[229, "sparknlp.reader.sparknlp_reader.SparkNLPReader.doc"]], "email() (sparknlpreader method)": [[229, "sparknlp.reader.sparknlp_reader.SparkNLPReader.email"]], "html() (sparknlpreader method)": [[229, "sparknlp.reader.sparknlp_reader.SparkNLPReader.html"]], "pdf() (sparknlpreader method)": [[229, "sparknlp.reader.sparknlp_reader.SparkNLPReader.pdf"]], "ppt() (sparknlpreader method)": [[229, "sparknlp.reader.sparknlp_reader.SparkNLPReader.ppt"]], "sparknlp.reader.sparknlp_reader": [[229, "module-sparknlp.reader.sparknlp_reader"]], "txt() (sparknlpreader method)": [[229, "sparknlp.reader.sparknlp_reader.SparkNLPReader.txt"]], "xls() (sparknlpreader method)": [[229, "sparknlp.reader.sparknlp_reader.SparkNLPReader.xls"]], "sparknlp.training": [[230, "module-sparknlp.training"]], "conll (class in sparknlp.training.conll)": [[231, "sparknlp.training.conll.CoNLL"]], "readdataset() (conll method)": [[231, "sparknlp.training.conll.CoNLL.readDataset"]], "sparknlp.training.conll": [[231, "module-sparknlp.training.conll"]], "conllu (class in sparknlp.training.conllu)": [[232, "sparknlp.training.conllu.CoNLLU"]], "readdataset() (conllu method)": [[232, "sparknlp.training.conllu.CoNLLU.readDataset"]], "sparknlp.training.conllu": [[232, "module-sparknlp.training.conllu"]], "pos (class in sparknlp.training.pos)": [[233, "sparknlp.training.pos.POS"]], "readdataset() (pos method)": [[233, "sparknlp.training.pos.POS.readDataset"]], "sparknlp.training.pos": [[233, "module-sparknlp.training.pos"]], "pubtator (class in sparknlp.training.pub_tator)": [[234, "sparknlp.training.pub_tator.PubTator"]], "readdataset() (pubtator method)": [[234, "sparknlp.training.pub_tator.PubTator.readDataset"]], "sparknlp.training.pub_tator": [[234, "module-sparknlp.training.pub_tator"]], "spacytoannotation (class in sparknlp.training.spacy_to_annotation)": [[235, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation"]], "readjsonfile() (spacytoannotation method)": [[235, "sparknlp.training.spacy_to_annotation.SpacyToAnnotation.readJsonFile"]], "sparknlp.training.spacy_to_annotation": [[235, "module-sparknlp.training.spacy_to_annotation"]], "pushtohub (class in sparknlp.upload_to_hub)": [[237, "sparknlp.upload_to_hub.PushToHub"]], "check_for_required_info() (pushtohub method)": [[237, "sparknlp.upload_to_hub.PushToHub.check_for_required_info"]], "create_docs() (pushtohub method)": [[237, "sparknlp.upload_to_hub.PushToHub.create_docs"]], "list_of_tasks (pushtohub attribute)": [[237, "sparknlp.upload_to_hub.PushToHub.list_of_tasks"]], "push_to_hub() (pushtohub method)": [[237, "sparknlp.upload_to_hub.PushToHub.push_to_hub"]], "sparknlp.upload_to_hub": [[237, "module-sparknlp.upload_to_hub"]], "unzip_directory() (pushtohub method)": [[237, "sparknlp.upload_to_hub.PushToHub.unzip_directory"]], "zip_directory() (pushtohub method)": [[237, "sparknlp.upload_to_hub.PushToHub.zip_directory"]], "conllgenerator (class in sparknlp.util)": [[238, "sparknlp.util.CoNLLGenerator"]], "exportconllfiles() (conllgenerator static method)": [[238, "sparknlp.util.CoNLLGenerator.exportConllFiles"]], "get_config_path() (in module sparknlp.util)": [[238, "sparknlp.util.get_config_path"]], "sparknlp.util": [[238, "module-sparknlp.util"]]}})