Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/alab/index", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index", "reference/autosummary/sparknlp_jsl/annotator/context/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index", "reference/autosummary/sparknlp_jsl/annotator/deid/index", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/index", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index", "reference/autosummary/sparknlp_jsl/annotator/merge/index", "reference/autosummary/sparknlp_jsl/annotator/ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/annotator/re/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/router/index", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index", "reference/autosummary/sparknlp_jsl/base/index", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index", "reference/autosummary/sparknlp_jsl/common/index", "reference/autosummary/sparknlp_jsl/compatibility/index", "reference/autosummary/sparknlp_jsl/custom_transformer/index", "reference/autosummary/sparknlp_jsl/eval/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/finance/graph/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/index", "reference/autosummary/sparknlp_jsl/finance/seq_generation/index", "reference/autosummary/sparknlp_jsl/finance/seq_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/functions/index", "reference/autosummary/sparknlp_jsl/index", "reference/autosummary/sparknlp_jsl/internal/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/legal/graph/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/index", "reference/autosummary/sparknlp_jsl/legal/seq_generation/index", "reference/autosummary/sparknlp_jsl/legal/seq_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/modelTracer/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index", "reference/autosummary/sparknlp_jsl/nlp_test/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index", "reference/autosummary/sparknlp_jsl/pretrained/index", "reference/autosummary/sparknlp_jsl/structured_deidentification/index", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index", "reference/autosummary/sparknlp_jsl/training/index", "reference/autosummary/sparknlp_jsl/training_log_parser/index", "reference/autosummary/sparknlp_jsl/updateModels/index", "reference/autosummary/sparknlp_jsl/util/index", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index", "reference/autosummary/sparknlp_jsl/utils/imports/index", "reference/autosummary/sparknlp_jsl/utils/index", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index", "reference/autosummary/sparknlp_jsl/utils/log_parse/index", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index", "reference/index"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/alab/index.rst", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/router/index.rst", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index.rst", "reference/autosummary/sparknlp_jsl/base/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/index.rst", "reference/autosummary/sparknlp_jsl/compatibility/index.rst", "reference/autosummary/sparknlp_jsl/custom_transformer/index.rst", "reference/autosummary/sparknlp_jsl/eval/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/index.rst", "reference/autosummary/sparknlp_jsl/finance/seq_generation/index.rst", "reference/autosummary/sparknlp_jsl/finance/seq_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/functions/index.rst", "reference/autosummary/sparknlp_jsl/index.rst", "reference/autosummary/sparknlp_jsl/internal/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/index.rst", "reference/autosummary/sparknlp_jsl/legal/seq_generation/index.rst", "reference/autosummary/sparknlp_jsl/legal/seq_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/modelTracer/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index.rst", "reference/autosummary/sparknlp_jsl/pretrained/index.rst", "reference/autosummary/sparknlp_jsl/structured_deidentification/index.rst", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index.rst", "reference/autosummary/sparknlp_jsl/training/index.rst", "reference/autosummary/sparknlp_jsl/training_log_parser/index.rst", "reference/autosummary/sparknlp_jsl/updateModels/index.rst", "reference/autosummary/sparknlp_jsl/util/index.rst", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/imports/index.rst", "reference/autosummary/sparknlp_jsl/utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index.rst", "reference/autosummary/sparknlp_jsl/utils/log_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index.rst", "reference/index.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.alab</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.annotation_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_dl_reg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.assertion_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_sentence_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunker_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_log_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.doccument_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.name_obfuscator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.reIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.replacer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation.ner_disambiguator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.doc2_chunk_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.average_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge.chunk_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.iob_tagger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.medical_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_converter_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.date_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.drug_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_ner_chunk_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.resolver_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.source_tracking_metadata_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.tf_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_approach_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_model_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_properties_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.compatibility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.custom_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.eval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.seq_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.seq_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.seq_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.seq_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.modelTracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias.bias_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.structured_deidentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.text_to_documents_columns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training_log_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.updateModels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.alab_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.conll_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.imports</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.licensed_annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.log_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ner_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_nlp_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.training_log_parser_utils</span></code>", "API Reference"], "terms": {"4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "healthcar": [0, 1, 10, 12, 33, 35], "i": [0, 10, 12, 13, 16, 19, 20, 21, 22, 23, 24, 33, 35, 36, 39, 41, 43, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 71, 72, 74, 75, 77, 80, 84, 85, 86, 87, 88, 92, 94, 95, 96, 97, 100, 101, 102, 104, 105, 113, 115, 116, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 169, 173, 174, 177, 178, 179, 181, 183, 184, 185, 196], "commerci": 0, "extens": [0, 74], "clinic": [0, 43, 45, 49, 52, 54, 59, 60, 61, 64, 65, 74, 75, 80, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 113, 115, 119, 120, 125, 126, 129, 130, 135, 136, 138, 142, 144, 148, 149, 154, 155, 158, 160, 165, 166, 167], "biomed": 0, "text": [0, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 80, 83, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 100, 101, 102, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 167, 169, 175, 177, 178, 187], "mine": 0, "If": [0, 10, 12, 13, 22, 23, 24, 33, 35, 36, 41, 43, 47, 49, 50, 51, 53, 59, 61, 62, 64, 65, 75, 77, 80, 84, 86, 88, 104, 110, 113, 115, 131, 136, 142, 144, 161, 166, 169, 173, 181, 185], "you": [0, 10, 33, 41, 42, 43, 50, 52, 62, 64, 92, 102, 110, 113, 115, 142, 144, 181, 183], "don": [0, 51, 177, 178], "t": [0, 10, 23, 24, 51, 62, 64, 177, 178, 183, 196], "have": [0, 23, 24, 41, 43, 50, 51, 52, 54, 75, 80, 84, 92, 100, 113, 119, 120, 129, 131, 136, 142, 148, 149, 158, 161, 166, 169, 173, 177], "subscript": 0, "yet": [0, 24], "can": [0, 10, 23, 33, 41, 44, 45, 47, 49, 51, 59, 60, 61, 62, 64, 65, 71, 75, 80, 84, 86, 89, 97, 105, 113, 115, 126, 130, 131, 135, 136, 142, 144, 155, 160, 161, 165, 166, 173, 174, 177, 178, 183], "ask": 0, "free": [0, 24], "trial": 0, "click": 0, "button": 0, "below": 0, "try": [0, 56, 57, 77, 88, 100, 110, 122, 132, 151, 162], "http": [0, 20, 22, 23, 24, 41, 71], "www": [0, 186], "johnsnowlab": [0, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 92, 94, 95, 96, 97, 99, 100, 102, 113, 115, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167], "com": [0, 24, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 92, 94, 95, 96, 97, 99, 100, 102, 113, 115, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 186], "provid": [0, 22, 23, 24, 41, 43, 50, 60, 62, 64, 84, 85, 108, 115, 131, 135, 136, 144, 161, 165, 166, 181, 184], "specif": [0, 10, 33, 75, 84, 89, 104, 136, 166, 169], "annot": [0, 10, 33, 41, 105, 106, 107, 108, 113, 115, 116, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 140, 142, 144, 145, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 169, 178, 180, 183, 187, 194], "pipelin": [0, 10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 100, 101, 102, 105, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 167, 168, 169, 174, 178, 180, 194], "model": [0, 1, 5, 8, 10, 12, 15, 16, 23, 24, 28, 31, 33, 35, 38, 39, 41, 43, 44, 45, 48, 49, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 74, 75, 77, 80, 83, 84, 85, 86, 87, 92, 94, 95, 96, 97, 100, 104, 107, 110, 113, 115, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 168, 169, 174, 177, 178, 180, 185], "embed": [0, 10, 12, 16, 18, 33, 35, 39, 43, 45, 47, 49, 51, 52, 54, 59, 60, 61, 64, 65, 71, 79, 83, 84, 85, 86, 92, 94, 95, 96, 97, 100, 102, 105, 112, 113, 115, 120, 122, 125, 129, 130, 131, 135, 136, 140, 142, 144, 149, 151, 154, 158, 160, 161, 165, 166, 177, 178], "entiti": [0, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 54, 60, 62, 64, 67, 69, 71, 75, 80, 84, 85, 86, 87, 88, 92, 94, 95, 96, 97, 99, 100, 102, 113, 115, 119, 120, 122, 125, 126, 129, 135, 136, 138, 141, 142, 144, 148, 149, 151, 154, 155, 158, 165, 166, 167, 169, 173, 177, 178, 179, 181, 183, 187], "recognit": [0, 24, 60, 84, 87, 135, 136, 138, 165, 166, 167, 183], "link": [0, 71], "normal": [0, 13, 24, 36, 56, 57, 62, 79, 100, 104, 122, 131, 132, 140, 151, 161, 162, 177], "assert": [0, 10, 33, 41, 47, 51, 79, 118, 127, 140, 147, 156, 183, 184, 187, 191], "statu": [0, 43, 44, 45, 113, 142], "detect": [0, 44, 194], "de": [0, 64], "identif": [0, 181], "relat": [0, 10, 33, 41, 52, 54, 75, 92, 94, 95, 96, 97, 104, 119, 120, 125, 126, 129, 148, 149, 154, 155, 158, 169, 178, 183, 187], "extract": [0, 41, 43, 45, 47, 49, 62, 71, 74, 84, 85, 94, 95, 96, 97, 100, 113, 122, 125, 126, 136, 142, 151, 154, 155, 166, 168, 169, 177, 178, 183], "spell": [0, 112, 177], "check": [0, 10, 33, 43, 62, 104, 185, 196], "correct": [0, 173], "The": [0, 10, 13, 20, 21, 22, 23, 24, 33, 36, 42, 43, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 67, 71, 74, 75, 80, 84, 86, 87, 88, 92, 94, 97, 100, 102, 105, 113, 115, 119, 120, 122, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 148, 149, 151, 155, 158, 160, 161, 162, 165, 166, 167, 168, 174, 177, 179, 180, 181, 183], "librari": [0, 1, 59, 60, 61, 72, 101, 110, 116, 130, 135, 145, 160, 165], "offer": 0, "access": 0, "sever": [0, 23, 43, 47, 64, 113, 115, 142, 144], "transform": [0, 13, 36, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 80, 84, 85, 87, 88, 89, 92, 94, 95, 96, 97, 100, 101, 105, 111, 113, 115, 116, 120, 122, 125, 126, 129, 130, 131, 135, 136, 138, 142, 144, 145, 149, 151, 154, 155, 158, 160, 161, 165, 166, 167, 169], "jsl": [0, 41, 52, 54, 92, 120, 129, 149, 158, 187, 194], "bert": [0, 49, 59, 60, 61, 74, 84, 95, 97, 102, 125, 126, 130, 135, 136, 154, 155, 160, 165, 166], "biobert": [0, 169], "clinicalbert": 0, "glove": [0, 45], "med": 0, "icd": [0, 100, 122, 151], "o": [0, 24, 60, 83, 86, 135, 165, 181, 183, 196], "It": [0, 22, 24, 41, 64, 65, 77, 84, 86, 105, 115, 131, 144, 161, 169, 177, 179, 185], "also": [0, 24, 59, 60, 61, 71, 108, 130, 135, 160, 165, 177], "includ": [0, 21, 41, 43, 80, 84, 86, 96, 103, 113, 136, 142, 166, 177, 178, 187], "over": [0, 19, 64, 177, 178, 194], "50": [0, 10, 24, 33, 52, 54, 62, 77, 84, 92, 119, 120, 129, 136, 148, 149, 158, 166], "pre": [0, 41, 72, 101, 116, 145], "train": [0, 2, 9, 10, 12, 15, 22, 23, 24, 25, 32, 33, 35, 38, 41, 43, 44, 45, 47, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 72, 74, 75, 77, 80, 83, 84, 85, 86, 88, 92, 94, 95, 97, 100, 101, 105, 113, 115, 116, 120, 122, 125, 126, 129, 131, 132, 136, 140, 142, 144, 145, 149, 151, 154, 155, 158, 161, 162, 166, 169, 174, 177], "recogn": [0, 84, 86, 87, 97, 136, 166], "follow": [0, 19, 20, 62, 64, 84, 89, 115, 144, 169, 183, 186], "mani": [0, 18, 50, 71], "more": [0, 18, 19, 22, 23, 59, 61, 64, 72, 89, 101, 115, 116, 130, 135, 144, 145, 160, 165], "support": [0, 10, 33, 84, 131, 161], "sign": [0, 183], "symptom": [0, 75], "treatment": [0, 97, 126, 155, 183], "procedur": 0, "test": [0, 43, 44, 48, 50, 84, 97, 102, 113, 131, 136, 142, 161, 166, 169, 174, 177, 178, 179, 183, 184], "lab": [0, 41, 187], "section": [0, 94], "drug": [0, 75, 86, 97, 126, 155], "name": [0, 6, 10, 12, 20, 22, 24, 29, 33, 35, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 110, 113, 115, 119, 120, 122, 125, 126, 130, 131, 132, 135, 136, 138, 142, 144, 148, 149, 151, 154, 155, 160, 161, 162, 165, 166, 167, 173, 177, 178, 179, 180, 181, 183, 184, 194], "dosag": [0, 75, 86], "strength": [0, 75, 86], "rout": 0, "durat": 0, "frequenc": [0, 24, 86, 177, 178], "risk": 0, "factor": [0, 24], "smoke": 0, "obes": 0, "diabet": [0, 49, 74], "hypertens": 0, "substanc": 0, "abus": 0, "anatomi": 0, "organ": [0, 60, 135, 165, 181], "subdivis": 0, "cell": [0, 12, 18, 19, 20, 22, 23, 24, 35, 60, 84, 135, 136, 165, 166, 173, 181], "structur": [0, 97, 126, 155, 181], "tissu": 0, "gene": 0, "chemic": 0, "demograph": 0, "ag": [0, 64, 80, 83, 115, 139, 144, 181], "gender": [0, 80, 83, 169], "height": [0, 15, 38, 175], "weight": [0, 22, 24, 41, 74, 75, 104, 141, 175], "race": 0, "ethnic": 0, "marit": 0, "vital": [0, 183], "sensit": [0, 47, 62, 74, 94, 96], "data": [0, 22, 23, 24, 41, 43, 44, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 77, 80, 83, 84, 86, 87, 88, 89, 92, 94, 95, 96, 97, 100, 101, 104, 105, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 167, 169, 173, 174, 177, 178, 181, 183], "patient": [0, 43, 44, 51, 52, 54, 62, 65, 92, 113, 120, 129, 142, 149, 158, 181], "address": [0, 49, 52, 54, 59, 60, 61, 74, 75, 85, 87, 97, 119, 120, 126, 130, 131, 135, 138, 148, 149, 155, 160, 161, 165, 167], "phone": [0, 181], "email": [0, 181], "date": [0, 42, 50, 64, 65, 88, 102, 115, 144, 181, 185], "identifi": [0, 48, 50, 80, 102, 174, 181, 196], "For": [0, 19, 24, 47, 59, 60, 64, 72, 74, 83, 84, 87, 95, 97, 101, 115, 116, 125, 126, 130, 131, 135, 136, 138, 144, 145, 154, 155, 160, 161, 165, 166, 167], "inform": [0, 1, 23, 24, 62, 64, 65, 80, 88, 115, 144, 177], "visit": 0, "our": 0, "site": [0, 62], "built": [0, 24, 131, 161], "top": [0, 49, 59, 60, 61, 130, 135, 160, 165, 183], "apach": 0, "x": [0, 13, 20, 21, 24, 36, 173], "us": [0, 1, 10, 12, 18, 19, 20, 22, 23, 24, 35, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 57, 59, 60, 61, 62, 64, 65, 67, 71, 72, 74, 75, 77, 80, 84, 85, 86, 87, 88, 92, 94, 95, 96, 97, 100, 101, 102, 104, 105, 113, 115, 116, 119, 120, 122, 126, 129, 130, 131, 135, 136, 138, 142, 144, 145, 148, 149, 151, 155, 158, 160, 161, 165, 166, 167, 169, 174, 177, 178, 180, 181, 187, 194], "need": [0, 10, 18, 23, 24, 33, 45, 62, 64, 74, 85, 94, 115, 144], "java": [0, 67, 68, 69, 106, 107, 112, 180, 183], "8": [0, 24, 59, 61, 75, 84, 130, 135, 136, 160, 165, 166, 183], "ar": [0, 10, 19, 20, 21, 23, 24, 33, 41, 44, 47, 49, 50, 53, 56, 57, 59, 60, 61, 64, 71, 74, 75, 77, 80, 84, 86, 87, 94, 96, 97, 100, 102, 104, 110, 115, 122, 126, 130, 132, 135, 136, 138, 144, 151, 155, 160, 162, 165, 166, 167, 169, 173, 177, 178, 181, 183, 185, 187, 196], "pyspark": [0, 41, 43, 45, 47, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 72, 74, 75, 77, 80, 83, 84, 85, 86, 88, 92, 94, 95, 97, 100, 101, 110, 113, 115, 116, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 142, 144, 145, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 168, 169, 174, 177, 178, 181, 182, 183, 187, 194], "6": [0, 10, 24, 33, 96, 131, 161, 183], "7": [0, 2, 25, 183], "recommend": [0, 71], "basic": [0, 22, 24], "knowledg": [0, 71], "framework": 0, "work": [0, 84], "environ": 0, "befor": [0, 24, 45, 49, 67, 68, 69, 84, 107], "pleas": [0, 59, 60, 84, 95, 125, 130, 131, 135, 136, 154, 160, 161, 165, 166], "refer": [0, 1, 41, 49, 64, 65, 67, 72, 94, 101, 115, 116, 144, 145], "document": [0, 10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 100, 101, 102, 113, 115, 116, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 169, 173, 177, 178, 187], "first": [0, 23, 24, 48, 50, 62, 74, 84, 136, 166, 183], "let": [0, 49], "": [0, 10, 24, 41, 45, 47, 51, 64, 67, 68, 69, 71, 74, 84, 100, 103, 106, 107, 177, 178, 179], "make": [0, 41, 49, 62, 64, 65, 115, 144, 177], "sure": [0, 41, 64, 115, 144], "version": [0, 10, 33, 44, 86, 104, 108, 110, 111, 140, 180, 185], "oracl": 0, "openjdk": 0, "0_292": 0, "packag": 0, "pip": [0, 183], "extra": [0, 47], "index": [0, 13, 36, 43, 44, 113, 142, 173, 174, 187], "url": [0, 41, 181], "pypi": 0, "secret": [0, 41, 140], "code": [0, 21, 24, 41, 62, 64, 65, 100, 122, 151, 181, 183], "upgrad": 0, "part": [0, 24, 65, 72, 101, 116, 145, 173, 174], "split": [0, 18, 24, 50, 77, 174, 177, 183, 187, 196], "e": [0, 24, 45, 49, 59, 60, 61, 62, 64, 75, 84, 89, 94, 100, 113, 122, 130, 135, 136, 142, 151, 160, 165, 166, 169, 173, 177, 178, 185, 196], "onli": [0, 20, 21, 24, 41, 49, 52, 80, 84, 177, 178, 183], "avail": [0, 10, 21, 33, 59, 60, 80, 84, 130, 131, 135, 136, 160, 161, 165, 166, 180], "user": [0, 62, 86, 178], "valid": [0, 10, 33, 43, 77, 84, 96, 113, 131, 136, 142, 161, 166, 174], "licens": 0, "did": 0, "receiv": [0, 24], "contact": [0, 181], "u": [0, 20, 24, 84, 136, 166, 185], "href": 0, "mailto": 0, "info": [0, 173], "thi": [0, 1, 9, 10, 18, 19, 20, 21, 22, 23, 24, 32, 33, 43, 44, 45, 48, 49, 50, 51, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 74, 80, 84, 86, 94, 95, 96, 107, 108, 113, 115, 131, 132, 136, 142, 144, 161, 162, 166, 168, 169, 174, 177, 178, 179, 181, 183, 185, 196, 197], "simpl": [0, 24], "piec": [0, 50], "import": [0, 10, 33, 41, 43, 45, 47, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 72, 74, 75, 77, 80, 83, 84, 85, 86, 88, 92, 94, 95, 100, 101, 105, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 140, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 175, 183, 190], "sparknlp_jsl": 0, "Or": 0, "sparksess": [0, 41, 59, 60, 61, 97, 110, 126, 130, 135, 155, 160, 165, 169, 174, 177, 178, 181, 182, 187, 194], "modul": [0, 1, 21], "flexibl": [0, 19], "sql": [0, 41, 59, 60, 61, 97, 110, 126, 130, 135, 155, 160, 165, 168, 169, 174, 177, 178, 181, 182, 183, 187, 191, 194], "builder": [0, 104], "appnam": 0, "enterpris": 0, "master": 0, "local": [0, 59, 60, 61, 97, 126, 130, 135, 155, 160, 165], "config": [0, 62], "driver": 0, "memori": [0, 22, 23, 24, 59, 61, 130, 135, 160, 165], "16": [0, 183], "maxresults": 0, "2g": 0, "jar": [0, 41, 187, 194], "nlp_2": 0, "11": [0, 9, 32, 45, 51, 64, 88, 115, 144, 183], "version_publ": 0, "getorcr": 0, "main": [1, 45], "page": [1, 89, 173, 197], "workshop": [1, 24, 72, 84, 101, 116, 131, 136, 145, 161, 166], "hub": [1, 59, 60, 84, 130, 131, 135, 136, 160, 161, 165, 166], "welcom": 1, "python": [1, 19, 20, 21, 24], "legal": [1, 140], "financ": [1, 140], "contain": [1, 22, 23, 24, 41, 43, 44, 45, 52, 54, 59, 60, 61, 64, 65, 72, 80, 84, 86, 92, 94, 100, 101, 103, 104, 106, 107, 108, 113, 115, 116, 119, 120, 122, 129, 130, 135, 136, 142, 144, 145, 148, 149, 151, 158, 160, 165, 166, 169, 174, 178, 179, 181, 183], "how": [1, 47, 49, 59, 60, 61, 71, 77, 80, 84, 86, 130, 131, 135, 160, 161, 165], "exampl": [1, 10, 19, 24, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 100, 101, 102, 105, 113, 115, 116, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 181, 183, 186], "get": [1, 13, 36, 41, 43, 104, 113, 131, 142, 161, 174, 177, 178, 187], "start": [1, 10, 18, 22, 33, 43, 44, 45, 72, 80, 84, 94, 100, 101, 113, 116, 122, 136, 140, 142, 145, 151, 166, 177, 178, 187, 196], "requir": [1, 22, 23, 24, 41, 43, 44, 45, 56, 57, 59, 61, 72, 84, 101, 113, 116, 130, 132, 135, 136, 142, 145, 160, 162, 165, 166, 183], "instal": [1, 10, 41], "session": [1, 15, 16, 38, 39, 41, 169, 174, 177, 178, 187, 194], "from": [1, 9, 10, 12, 16, 18, 20, 22, 23, 24, 32, 33, 35, 39, 41, 42, 43, 45, 47, 48, 49, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 100, 101, 102, 105, 107, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 167, 168, 169, 173, 177, 178, 179, 180, 183, 185, 186, 187], "api": 1, "assertionmodel": [2, 25, 43, 45, 47, 100, 113, 122, 142, 151], "seq_max_len": [2, 25], "feat_siz": [2, 10, 25, 33], "n_class": [2, 10, 25, 33], "devic": [2, 25, 181], "cpu": [2, 23, 25], "sourc": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 144, 145, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 168, 169, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 193, 194, 195, 196], "fully_connected_lay": [2, 25], "input_data": [2, 25], "output_dim": [2, 10, 24, 25, 33], "activation_func": [2, 25], "none": [2, 4, 6, 8, 10, 12, 13, 15, 16, 18, 20, 22, 23, 24, 25, 27, 29, 31, 33, 35, 36, 38, 39, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 92, 94, 95, 96, 97, 99, 100, 102, 107, 113, 115, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 140, 142, 144, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 169, 173, 175, 177, 178, 179, 180, 181, 183, 186, 187, 196], "add_bidirectional_lstm": [2, 25], "n_hidden": [2, 25], "30": [2, 25, 65, 88, 131, 161], "num_lay": [2, 25], "add_optim": [2, 25], "trainset": [2, 25], "testset": [2, 25], "epoch": [2, 25, 43, 77, 84, 113, 131, 136, 142, 161, 166, 177, 184, 193], "batch_siz": [2, 4, 15, 17, 18, 22, 23, 24, 25, 27, 38, 40], "64": [2, 10, 25, 33, 44, 51, 80, 83, 84, 131, 161, 183], "learning_r": [2, 4, 9, 25, 27, 32], "01": [2, 15, 25, 38, 45, 64, 65, 88, 115, 144], "dropout": [2, 15, 24, 25, 38, 43, 77, 84, 113, 131, 136, 142, 161, 166], "15": [2, 10, 25, 33, 65, 80, 83, 88], "epoch_acc": [2, 25], "calc_accuraci": [2, 25], "dataset": [2, 13, 15, 17, 25, 36, 38, 40, 43, 45, 84, 85, 97, 100, 111, 113, 122, 126, 131, 136, 142, 151, 155, 161, 166, 169, 174, 177, 183], "calcul": [2, 23, 24, 25, 43, 84, 100, 113, 136, 142, 166, 169, 174, 177, 178, 179], "accuraci": [2, 8, 25, 31, 84, 136, 166], "confusion_matrix": [2, 25], "sess": [2, 25], "persist_graph": [2, 25], "model_loc": [2, 4, 6, 10, 12, 27, 29, 33, 35], "model_filenam": [2, 4, 6, 10, 12, 27, 29, 33, 35], "assertion_model": [3, 11, 26, 34, 43], "model_id": [4, 27], "get_graph": [4, 27], "is_built": [4, 27], "export_graph": [4, 6, 27, 29], "generate_batch": [4, 27], "input": [4, 9, 18, 19, 20, 22, 23, 24, 27, 32, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 113, 115, 116, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 173, 177, 178, 187, 194], "output": [4, 9, 13, 18, 22, 23, 24, 27, 32, 36, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 113, 115, 116, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 168, 173, 174, 177, 178, 179, 187, 194], "fit_dataset": [4, 27], "training_set": [4, 27], "validation_set": [4, 27], "training_batch_s": [4, 27], "validation_batch_s": [4, 27], "epochs_n": [4, 8, 27, 31], "verbos": [4, 6, 27, 29, 43, 84, 113, 131, 136, 142, 161, 166, 184, 193, 196], "true": [4, 6, 10, 15, 19, 23, 24, 27, 29, 33, 38, 41, 43, 49, 50, 56, 57, 59, 60, 61, 62, 64, 65, 69, 71, 72, 77, 84, 86, 88, 94, 100, 101, 104, 105, 106, 107, 112, 115, 116, 122, 130, 131, 132, 135, 144, 145, 151, 160, 161, 162, 165, 169, 174, 178, 180, 181, 183, 184, 187, 193, 194, 196], "progresstrack": [4, 7, 11, 27, 30, 34], "load_graph": [4, 27], "models_dir": [4, 9, 27, 32], "build": [4, 6, 10, 20, 22, 24, 27, 29, 33], "param": [4, 6, 10, 27, 29, 33, 41, 64, 67, 68, 69, 80, 107, 108, 115, 140, 144, 169, 173, 174, 177, 178, 179, 183, 187, 194], "run_test": [4, 6, 27, 29, 178], "build_param": [5, 10, 28, 33], "genericclassifiermodel": [6, 29, 56, 57, 77, 132, 162], "basetfmodel": [7, 11, 30, 34], "build_model": [7, 11, 30, 34], "generic_classifier_model": [7, 11, 30, 34], "set": [7, 10, 11, 24, 30, 34, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 100, 102, 103, 104, 105, 107, 111, 113, 115, 120, 126, 136, 142, 144, 149, 155, 166, 169, 174, 177, 178, 179, 184, 187, 194], "batches_n": [8, 31], "on_training_start": [8, 31], "on_training_end": [8, 31], "on_batch": [8, 31], "loss": [8, 9, 24, 31, 32, 184, 193], "is_valid": [8, 31], "fals": [8, 10, 12, 13, 15, 19, 22, 23, 24, 31, 33, 35, 36, 38, 41, 43, 44, 45, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 69, 71, 72, 74, 75, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 100, 101, 102, 113, 115, 116, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 139, 140, 142, 144, 145, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 169, 174, 177, 178, 181, 183, 187, 194, 196], "on_epoch": [8, 31], "get_report_interv": [8, 31], "print_progress": [8, 31], "end_of_epoch": [8, 31], "model_op": [9, 32], "gener": [9, 10, 16, 32, 33, 39, 41, 49, 65, 77, 84, 131, 136, 161, 166, 177, 178, 181, 187, 194], "enumer": [9, 32, 187], "deriv": [9, 32], "defin": [9, 22, 32, 41, 45, 47, 51, 56, 57, 62, 80, 86, 88, 96, 132, 162, 178, 187], "new": [9, 24, 32, 41, 43, 44, 53, 65, 84, 86, 87, 94, 95, 100, 104, 108, 111, 122, 125, 138, 151, 154, 167, 168, 169, 173, 183, 185, 196], "init": [9, 32], "10": [9, 10, 15, 19, 32, 33, 38, 44, 52, 54, 65, 89, 92, 100, 120, 122, 129, 149, 151, 158, 174, 183], "model_tensor": [9, 32], "100": [9, 10, 15, 32, 33, 38, 77, 131, 161, 196], "acc": [9, 32], "101": [9, 15, 32, 38], "102": [9, 32], "target": [9, 10, 32, 33, 43, 44, 45, 71, 72, 75, 77, 94, 95, 101, 113, 116, 125, 142, 145, 154], "103": [9, 32], "104": [9, 32], "105": [9, 32], "run_typ": [9, 32], "evalu": [9, 32, 41, 43, 169, 184, 193], "predict": [9, 10, 15, 24, 32, 33, 38, 43, 56, 57, 71, 77, 84, 113, 132, 136, 142, 162, 166, 169, 173, 174, 177, 178, 184, 193, 196], "datasets_dir": [9, 32], "logs_dir": [9, 32], "tmp": [9, 10, 32, 33, 97], "genericclassifi": [9, 32], "default_model_node_nam": [9, 32], "except": [10, 33, 84, 177, 178], "wrongtfvers": [10, 33], "rais": [10, 22, 23, 24, 33, 84], "tensorflow": [10, 12, 16, 21, 23, 33, 35, 39, 43, 59, 60, 61, 77, 84, 94, 113, 130, 131, 135, 136, 142, 160, 161, 165, 166], "current": [10, 24, 33, 59, 60, 61, 80, 88, 97, 104, 110, 126, 130, 135, 155, 160, 165, 196], "xx": [10, 33], "tensorflowaddonsneed": 10, "when": [10, 12, 24, 35, 41, 43, 50, 62, 64, 80, 84, 85, 86, 88, 94, 100, 115, 122, 144, 151, 177, 178, 180], "addon": 10, "tfgraphbuild": [10, 33, 104], "creat": [10, 12, 22, 23, 33, 35, 41, 43, 44, 62, 65, 88, 96, 173, 174, 177, 178, 183], "graph": [10, 12, 33, 35, 43, 84, 94, 104, 113, 127, 136, 140, 142, 156, 166, 184], "ner_dl": [10, 11, 33, 34, 84, 136, 166], "generic_classifi": [10, 11, 33, 34, 79, 140], "assertion_dl": [10, 11, 33, 34, 43, 113, 142], "relation_extract": [10, 33, 79, 93, 123, 127, 152, 156], "nlp": [10, 12, 33, 35, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 67, 68, 69, 71, 72, 73, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 92, 94, 95, 96, 97, 99, 100, 101, 116, 119, 120, 126, 130, 131, 135, 136, 138, 145, 148, 149, 155, 160, 161, 165, 166, 167, 169, 187, 194, 197], "paramet": [10, 23, 33, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 69, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 100, 101, 102, 103, 105, 108, 110, 113, 115, 116, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 168, 173, 174, 177, 178, 181, 183, 184, 185, 186, 193, 194], "dict": [10, 33, 41, 43, 62, 64, 75, 80, 86, 87, 94, 95, 97, 169, 173, 177, 178, 179, 181, 187, 196], "tf_graph": [10, 33, 183], "get_model": [10, 33], "supports_auto_file_nam": [10, 33], "return": [10, 13, 22, 23, 24, 33, 36, 41, 47, 49, 52, 53, 54, 59, 60, 61, 64, 72, 74, 75, 84, 87, 94, 95, 97, 99, 100, 101, 110, 115, 116, 119, 120, 122, 126, 130, 131, 135, 138, 144, 145, 148, 149, 151, 155, 160, 161, 165, 167, 169, 173, 174, 177, 178, 179, 180, 183, 184, 187, 193, 194, 196], "automat": [10, 64, 97, 115, 126, 144, 155, 173], "file": [10, 16, 21, 33, 39, 41, 43, 62, 64, 67, 77, 80, 84, 86, 104, 113, 115, 136, 142, 144, 166, 169, 173, 174, 177, 178, 181, 184, 185, 193, 194], "method": [10, 22, 33, 41, 62, 64, 77, 86, 100, 115, 122, 144, 151, 173, 174, 177, 178, 183, 185, 197], "overridden": [10, 33], "child": [10, 33], "get_model_filenam": [10, 33], "implement": [10, 18, 19, 20, 22, 24, 67, 68, 69, 97, 106, 107, 126, 155, 177, 178], "check_build_param": [10, 33], "given": [10, 18, 22, 24, 33, 52, 54, 65, 74, 75, 80, 92, 97, 120, 126, 129, 149, 155, 158, 169, 177, 178], "get_build_param": [10, 33], "get_build_params_with_default": [10, 33], "default": [10, 12, 22, 23, 24, 33, 35, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 64, 71, 72, 74, 75, 80, 84, 86, 87, 88, 89, 94, 96, 97, 100, 101, 102, 104, 110, 113, 115, 116, 119, 120, 122, 126, 130, 131, 132, 135, 136, 138, 142, 144, 145, 148, 149, 151, 155, 160, 161, 162, 165, 166, 167, 169, 173, 174, 177, 178, 179, 180, 181, 187, 194, 196], "valu": [10, 22, 23, 33, 42, 43, 44, 47, 49, 50, 51, 53, 56, 57, 59, 60, 61, 62, 64, 65, 69, 71, 72, 74, 75, 77, 80, 84, 86, 87, 88, 89, 94, 95, 96, 97, 100, 102, 103, 104, 105, 108, 111, 113, 115, 122, 126, 130, 131, 132, 135, 136, 138, 142, 144, 151, 155, 160, 161, 162, 165, 166, 167, 173, 174, 175, 177, 178, 179, 181, 196], "str": [10, 12, 13, 16, 33, 35, 36, 39, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 71, 72, 74, 75, 77, 80, 83, 84, 86, 87, 89, 94, 95, 96, 97, 100, 102, 103, 104, 105, 110, 119, 120, 126, 130, 131, 135, 138, 148, 149, 155, 160, 161, 165, 167, 169, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 194], "ani": [10, 23, 33, 42, 65, 80, 84, 102, 136, 166, 169, 177, 178], "retriev": [10, 33, 177, 178], "found": [10, 33, 62, 72, 101, 116, 145, 177, 178], "get_model_build_param": [10, 33], "get_model_build_param_explan": [10, 33], "explan": [10, 33], "genericclassifiertfgraphbuild": [10, 33], "tf": [10, 16, 19, 21, 22, 23, 33, 39, 59, 60, 61, 130, 135, 160, 165], "genericclassifierapproach": [10, 33, 77], "extend": [10, 33, 43, 44, 72, 84, 101, 116, 131, 136, 145, 161, 166, 183], "base": [10, 20, 22, 24, 33, 41, 43, 45, 47, 49, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 67, 68, 69, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 92, 94, 95, 97, 100, 101, 106, 107, 108, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 138, 140, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 167, 169, 174, 177, 178, 179, 187], "sparknlp": [10, 33, 43, 45, 47, 49, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 92, 94, 95, 97, 100, 101, 105, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 167, 169, 174, 177, 178, 187], "datafram": [10, 33, 41, 44, 65, 96, 168, 169, 173, 174, 177, 178, 181, 182, 183, 184, 187], "pd": [10, 33, 41, 65, 187], "read_csv": [10, 33], "petfind": [10, 33], "mini": [10, 33], "csv": [10, 33, 51, 62, 64, 86, 105, 115, 131, 144, 161, 177, 178, 183], "dl_param": [10, 33], "input_dim": [10, 33], "302": [10, 33], "hidden_lay": [10, 33], "300": [10, 33, 94], "200": [10, 24, 33, 94], "hidden_act": [10, 33], "tanh": [10, 20, 24, 33, 104], "hidden_act_l2": [10, 33], "batch_norm": [10, 33], "gc_graph": [10, 33], "auto": [10, 33, 104], "save": [10, 12, 16, 33, 35, 39, 41, 43, 52, 59, 60, 61, 64, 77, 84, 92, 97, 113, 126, 130, 131, 135, 136, 142, 155, 160, 161, 165, 166, 169, 173, 174, 177, 178, 186, 194], "gcl": [10, 33], "pb": [10, 33, 77, 94], "we": [10, 22, 24, 41, 50, 51, 52, 54, 56, 57, 64, 71, 77, 92, 100, 115, 119, 120, 122, 129, 131, 132, 144, 148, 149, 151, 158, 161, 162], "modelfil": [10, 77], "gen_clf": [10, 33, 56, 57, 77, 132, 162], "setlabelcolumn": [10, 33, 56, 77, 84, 94, 104, 131, 132, 136, 161, 162, 166], "setinputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 100, 101, 102, 104, 105, 111, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 167], "featur": [10, 24, 33, 45, 77, 80, 105], "setoutputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 100, 101, 102, 105, 111, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 167], "setmodelfil": [10, 33, 77, 94], "setepochsnumb": [10, 33, 77, 94], "setbatchs": [10, 33, 43, 77, 84, 94, 95, 113, 131, 142, 161], "setfeaturesc": [10, 33, 77], "zscore": [10, 33, 77], "setfiximbal": [10, 33, 77, 94], "setlearningr": [10, 33, 43, 77, 94, 113, 142], "001": [10, 24, 33, 77, 84, 94, 136, 166], "setoutputlogspath": [10, 33, 43, 77], "log": [10, 33, 43, 45, 77, 84, 113, 131, 136, 142, 161, 166, 169, 174, 177, 178, 184, 193], "setvalidationsplit": [10, 33, 43, 77, 84, 94], "clf_pipelin": [10, 33], "stage": [10, 33, 41, 43, 45, 47, 48, 51, 62, 64, 71, 80, 83, 85, 86, 88, 89, 94, 95, 96, 100, 113, 115, 122, 125, 142, 144, 151, 154], "features_asm": [10, 33, 77], "bool": [10, 12, 13, 33, 35, 36, 41, 43, 47, 52, 59, 61, 62, 64, 69, 71, 72, 77, 80, 84, 86, 89, 92, 94, 96, 100, 103, 104, 177, 178, 181, 187, 194], "an": [10, 18, 19, 22, 23, 24, 33, 41, 43, 44, 47, 56, 57, 62, 64, 71, 72, 74, 75, 80, 84, 87, 88, 94, 97, 100, 101, 105, 108, 113, 115, 116, 122, 131, 132, 136, 138, 142, 144, 145, 151, 161, 162, 166, 167, 169, 174, 177, 178, 181, 183, 187, 194, 197], "otherwis": [10, 24, 33, 49, 52, 54, 59, 60, 61, 64, 69, 72, 74, 75, 87, 97, 101, 105, 115, 116, 119, 120, 126, 130, 131, 135, 138, 144, 145, 148, 149, 155, 160, 161, 165, 167, 169, 184, 193, 196], "locat": [10, 41, 62, 71, 84, 86, 94, 180, 181, 185], "where": [10, 12, 16, 23, 24, 33, 35, 39, 41, 47, 52, 54, 64, 65, 72, 77, 83, 92, 94, 95, 101, 104, 115, 116, 119, 120, 125, 129, 144, 145, 148, 149, 154, 158, 173, 174, 177, 178, 183, 185], "assertiontfgraphbuild": [10, 33], "assertiondlapproach": [10, 33, 43, 104, 113, 142], "blstm_34_32_30_": [10, 33], "_": [10, 33], "format": [10, 23, 33, 41, 43, 62, 64, 67, 80, 83, 84, 88, 94, 115, 136, 144, 166, 169, 173, 174, 177, 178, 179, 181, 183, 194], "setlabelcol": [10, 33, 43, 45, 57, 77, 100, 113, 122, 142, 151], "label": [10, 33, 41, 43, 45, 53, 56, 57, 59, 60, 61, 64, 77, 80, 83, 84, 86, 87, 94, 95, 97, 99, 100, 104, 112, 113, 115, 122, 126, 130, 131, 132, 135, 136, 138, 141, 142, 144, 151, 155, 160, 161, 162, 165, 166, 167, 173, 174, 177, 183, 184, 187, 194], "chunk": [10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 62, 64, 65, 71, 72, 74, 75, 80, 83, 85, 86, 88, 92, 94, 95, 96, 97, 100, 101, 102, 113, 115, 116, 119, 120, 125, 126, 129, 132, 142, 144, 145, 148, 149, 154, 155, 158, 162, 173, 183, 184, 193, 194, 196], "128": [10, 12, 24, 33, 35, 43, 59, 60, 61, 113, 130, 135, 142, 160, 165], "setdropout": [10, 33, 43, 77, 84, 113, 131, 142, 161], "setepoch": [10, 33, 43, 113, 142], "setstartcol": [10, 33, 43, 45, 72, 113, 142], "setendcol": [10, 33, 43, 45, 113, 142], "end": [10, 23, 33, 43, 44, 45, 80, 83, 84, 94, 113, 142, 177, 178, 187, 196], "setmaxsentlen": [10, 33, 43, 113, 142], "250": [10, 33, 43, 75, 113, 142], "setenableoutputlog": [10, 33, 43], "training_log": [10, 33], "setgraphfold": [10, 33, 43, 84, 104], "nertfgraphbuild": [10, 33], "medicalnerapproach": [10, 33, 84, 104, 136, 166], "embeddings_dim": [10, 12, 33, 35], "nchar": [10, 12, 15, 33, 35, 38], "83": [10, 33], "ntag": [10, 12, 15, 33, 35, 38], "12": [10, 33, 65, 88, 183], "medic": [10, 104, 169, 181, 186], "ner": [10, 15, 16, 33, 38, 39, 41, 43, 45, 49, 52, 54, 60, 64, 65, 71, 74, 75, 79, 80, 92, 97, 112, 113, 115, 120, 126, 127, 129, 134, 140, 142, 144, 149, 155, 156, 158, 163, 169, 174, 177, 178, 183, 187, 194], "is_med": [10, 12, 33, 35, 169], "medical_ner_graph": [10, 33], "nertagg": [10, 33, 74, 84, 94, 95, 125, 136, 154, 166], "sentenc": [10, 13, 15, 33, 36, 38, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 59, 60, 61, 62, 64, 71, 74, 75, 80, 83, 84, 85, 86, 87, 89, 92, 95, 96, 97, 99, 100, 102, 113, 115, 119, 120, 122, 125, 126, 129, 130, 131, 135, 136, 138, 142, 144, 148, 149, 151, 154, 155, 158, 160, 161, 165, 166, 167, 169, 173, 174, 177, 178, 183, 187], "token": [10, 33, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 80, 83, 84, 85, 86, 87, 92, 94, 95, 96, 97, 100, 101, 102, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 167, 173, 174, 177, 178, 183, 187], "setmaxepoch": [10, 33, 84, 131, 136, 161, 166], "setrandomse": [10, 33, 84, 136, 166], "setverbos": [10, 33, 43, 84, 136, 166], "setevaluationlogextend": [10, 33, 43], "setincludeconfid": [10, 33, 43, 84, 174], "ner_log": [10, 33], "setenablememoryoptim": [10, 33, 84], "relationextractiontfgraphbuild": [10, 33], "relationextractionapproach": [10, 33, 94, 104, 183], "6000": [10, 33], "relu": [10, 24, 33, 104], "re_with_bn": [10, 33], "re_approach": [10, 33], "rel": [10, 33, 52, 54, 74, 75, 88, 92, 119, 120, 129, 148, 149, 158, 183], "pos_tag": [10, 33, 75, 94, 96, 97, 173], "train_ner_chunk": [10, 33, 94, 183], "depend": [10, 23, 24, 33, 42, 50, 53, 75, 84, 94, 95, 96, 97, 99, 102, 125, 136, 154, 166, 169, 178, 187], "70": [10, 33, 51], "setfroment": [10, 33, 94], "begin1i": [10, 33], "end1i": [10, 33], "label1": [10, 33, 183], "settoent": [10, 33, 94], "begin2i": [10, 33], "end2i": [10, 33], "label2": [10, 33, 183], "tfgraphbuilderfactori": [10, 33], "factori": [10, 33], "differ": [10, 20, 24, 33, 41, 49, 80, 96, 105, 177, 178, 183, 194], "static": [10, 13, 15, 16, 24, 33, 36, 38, 39, 43, 45, 49, 52, 54, 56, 57, 59, 60, 61, 64, 67, 71, 74, 75, 77, 80, 84, 87, 94, 95, 97, 100, 113, 115, 119, 120, 122, 125, 126, 130, 131, 132, 135, 136, 138, 142, 144, 148, 149, 151, 154, 155, 160, 161, 162, 165, 166, 167, 180, 185], "spark": [10, 33, 41, 42, 43, 44, 48, 49, 51, 52, 54, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 80, 83, 84, 86, 87, 88, 89, 94, 95, 96, 97, 101, 102, 105, 110, 112, 113, 115, 116, 119, 120, 125, 126, 130, 131, 135, 136, 138, 140, 142, 144, 145, 148, 149, 154, 155, 160, 161, 165, 166, 167, 169, 174, 177, 178, 181, 182, 183, 187, 194, 197], "model_nam": [10, 33], "want": [10, 33, 41, 42, 43, 50, 52, 54, 62, 64, 71, 89, 92, 102, 113, 115, 120, 142, 144, 149, 181], "configur": [10, 33, 41], "path": [10, 33, 41, 43, 45, 48, 51, 52, 54, 56, 57, 62, 64, 74, 77, 80, 84, 86, 87, 92, 94, 100, 104, 113, 115, 119, 120, 122, 129, 131, 136, 138, 142, 144, 148, 149, 151, 158, 161, 166, 167, 169, 173, 174, 177, 178, 183, 184, 185, 186, 187, 193, 194], "rb": [10, 33], "filenam": [10, 25, 33], "doesn": [10, 24], "modulenotfounderror": 10, "print_model_param": [10, 33], "allow": [10, 23, 24, 33, 41, 50, 59, 61, 84, 102, 130, 135, 136, 160, 165, 166, 181, 185], "descript": [10, 33, 41, 49, 100, 122, 151, 178, 183], "everi": [10, 19, 33, 41, 84, 136, 166, 177, 180], "create_graph": [11, 14, 34, 37], "dataset_encod": [11, 14, 34, 37], "ner_model": [11, 14, 34, 37, 52, 54, 71, 75, 92, 120, 129, 149, 158], "ner_model_sav": [11, 14, 34, 37], "sentence_group": [11, 14, 34, 37], "tf2contrib": 11, "core_rnn_cel": [11, 21], "fused_rnn_cel": [11, 21], "gru_op": [11, 21], "lstm_op": [11, 21], "rnn": [11, 18, 19, 21, 22, 24], "rnn_cell": [11, 19, 21], "graph_build": [11, 34], "int": [12, 24, 35, 41, 42, 43, 56, 57, 59, 60, 61, 64, 65, 67, 71, 75, 77, 84, 88, 94, 95, 96, 100, 102, 104, 131, 161, 173, 174, 177, 178, 181, 186], "lstm_size": [12, 35], "gpu_devic": [12, 35], "nerdl": [12, 35, 169], "arg": [12, 13, 16, 22, 23, 24, 35, 36, 39, 43, 44, 53, 60, 177, 180, 187], "folder": [12, 16, 35, 39, 43, 59, 60, 61, 77, 84, 95, 97, 104, 113, 125, 126, 130, 131, 135, 136, 142, 154, 155, 160, 161, 165, 166, 185, 194], "number": [12, 22, 23, 24, 35, 41, 43, 45, 49, 56, 57, 64, 65, 77, 80, 84, 95, 100, 104, 113, 115, 125, 131, 132, 136, 142, 144, 154, 161, 162, 166, 169, 173, 174, 177, 178, 181, 186, 196], "uniqu": [12, 35, 71], "tag": [12, 16, 35, 39, 43, 47, 51, 64, 83, 84, 85, 86, 94, 113, 115, 131, 136, 142, 144, 161, 166, 173, 177, 184, 193, 196], "dimens": [12, 19, 22, 24, 35], "word": [12, 13, 35, 36, 52, 54, 64, 71, 83, 86, 87, 115, 120, 131, 138, 144, 149, 161, 167, 169, 177, 178, 196], "charact": [12, 13, 16, 35, 36, 39, 64, 67, 71, 86, 89, 115, 144, 177, 178], "option": [12, 23, 24, 35, 41, 43, 49, 51, 52, 54, 59, 60, 61, 62, 64, 74, 75, 80, 84, 86, 87, 97, 105, 119, 120, 126, 130, 131, 135, 136, 138, 148, 149, 155, 160, 161, 165, 166, 167, 173, 177, 178, 180, 181, 183, 194], "size": [12, 22, 23, 24, 35, 43, 59, 61, 77, 84, 104, 113, 130, 131, 135, 136, 142, 160, 161, 165, 166, 175], "hidden": [12, 15, 24, 35, 38, 60, 104, 135, 165, 175], "lstm": [12, 22, 24, 35, 84, 136, 166], "disk": [12, 16, 35, 39], "which": [12, 19, 23, 24, 35, 45, 49, 51, 59, 60, 61, 62, 64, 74, 75, 80, 84, 86, 87, 88, 89, 94, 95, 97, 100, 105, 110, 113, 122, 126, 130, 135, 136, 138, 142, 151, 155, 160, 165, 166, 167, 173, 174, 177, 178, 185], "gpu": [12, 23, 35, 140], "being": [12, 13, 24, 35, 36, 64, 84, 102, 115, 144], "datasetencod": [13, 36], "embeddings_resolv": [13, 36], "tag2id": [13, 36], "piece_tag": [13, 36], "encod": [13, 16, 36, 39, 87, 94, 95, 96, 97, 104, 125, 126, 131, 138, 154, 155, 161, 167], "shuffl": [13, 36, 131, 161], "lower": [13, 36, 51, 52, 72, 84, 89, 92, 101, 116, 136, 145, 166, 177], "case": [13, 18, 22, 24, 36, 41, 44, 47, 49, 52, 59, 61, 62, 72, 74, 75, 84, 89, 92, 94, 96, 101, 116, 130, 135, 136, 145, 160, 165, 166, 177, 178, 196], "remov": [13, 36, 47, 49, 89, 177, 178], "addit": [13, 24, 36, 45, 64, 84, 100, 122, 131, 136, 151, 161, 166], "white": [13, 36, 47, 51, 65, 86, 175], "space": [13, 23, 24, 36, 173, 177], "process": [13, 24, 36, 43, 47, 51, 59, 60, 61, 72, 77, 80, 84, 86, 94, 95, 96, 100, 101, 113, 116, 122, 125, 130, 135, 136, 142, 145, 151, 154, 160, 165, 166, 169, 174, 177, 178, 194], "get_char_index": [13, 36], "list": [13, 22, 23, 36, 41, 43, 45, 47, 51, 56, 57, 59, 60, 61, 64, 75, 80, 84, 85, 86, 87, 94, 96, 97, 100, 102, 103, 104, 113, 115, 122, 126, 138, 142, 144, 151, 155, 167, 173, 174, 177, 178, 180, 181, 182, 184, 187, 193, 194, 196, 197], "outpu": [13, 36], "layer": [13, 23, 24, 36, 43, 59, 60, 61, 77, 104, 113, 130, 135, 142, 160, 165], "nermodel": [15, 38, 43, 47, 83, 84, 86, 113, 136, 142, 166], "dummy_tag": [15, 38], "use_contrib": [15, 38], "use_gpu_devic": [15, 38], "add_bilstm_char_repr": [15, 38], "dim": [15, 24, 38], "25": [15, 38, 64, 100, 115, 122, 144, 151, 183], "add_cnn_char_repr": [15, 38], "nfilter": [15, 38], "pad": [15, 38], "add_pretrained_word_embed": [15, 38], "add_context_repr": [15, 38], "hidden_s": [15, 38], "residu": [15, 38], "add_inference_lay": [15, 38], "crf": [15, 38, 84, 136, 166], "predictions_op_nam": [15, 38], "add_training_op": [15, 38], "clip_gradi": [15, 38], "train_op_nam": [15, 38], "num_tru": [15, 38], "arrai": [15, 38, 43, 56, 57, 59, 60, 61, 64, 72, 80, 84, 85, 101, 103, 105, 113, 115, 116, 130, 131, 132, 135, 136, 142, 144, 145, 160, 161, 162, 165, 166, 174], "fill": [15, 38], "l": [15, 38, 64, 183], "val": [15, 38], "get_sentence_length": [15, 38], "batch": [15, 18, 23, 24, 38, 41, 43, 59, 61, 77, 84, 104, 113, 130, 131, 135, 136, 142, 160, 161, 165, 166], "idx": [15, 38], "word_embed": [15, 38, 42, 43, 45, 50, 65, 71, 84, 94, 102, 113, 136, 142, 166], "get_sentence_token_length": [15, 38], "tag_id": [15, 38], "get_word_length": [15, 38], "char_id": [15, 38], "get_char_id": [15, 38], "get_from_batch": [15, 38], "get_tag_id": [15, 38], "get_word_embed": [15, 38], "slice": [15, 17, 38, 40, 52, 54, 74, 75, 120, 149], "init_vari": [15, 38], "epoch_start": [15, 38], "epoch_end": [15, 38], "32": [15, 17, 23, 24, 38, 40, 62, 102], "lr": [15, 38, 43, 84, 131, 136, 161, 166], "po": [15, 38, 42, 50, 51, 84, 94, 102, 112, 136, 166, 173, 177, 183, 187], "65": [15, 38], "measur": [15, 38], "20": [15, 24, 38, 65, 77, 88, 131, 161], "get_softmax": [15, 38], "score": [15, 38, 43, 84, 87, 97, 113, 126, 136, 138, 142, 155, 166, 167, 173, 174, 179, 184, 193, 196], "threshold": [15, 38, 51, 64, 71, 86, 87, 94, 95, 100, 115, 144, 173, 174, 184, 193], "close": [15, 38], "nermodelsav": [16, 39], "embeddings_fil": [16, 39], "restore_tensorflow_st": [16, 39], "export_dir": [16, 39], "restor": [16, 39, 49, 52, 54, 59, 60, 61, 74, 75, 84, 87, 97, 119, 120, 126, 130, 131, 135, 138, 148, 149, 155, 160, 161, 165, 167], "directori": [16, 39, 41], "save_model": [16, 39], "separ": [16, 39, 41, 47, 49, 51, 64, 67, 80, 86, 94, 96, 169, 173], "variabl": [16, 20, 22, 24, 39], "sentencegroup": [17, 40], "bucket_length": [17, 40], "get_bucket_id": [17, 40], "length": [17, 22, 23, 40, 41, 43, 45, 59, 60, 61, 64, 71, 80, 104, 113, 115, 130, 135, 142, 144, 160, 165, 174, 177, 178], "core": 18, "embeddingwrapp": 18, "inputprojectionwrapp": 18, "outputprojectionwrapp": 18, "rnncell": [18, 19, 23, 24], "embedding_class": 18, "embedding_s": 18, "initi": [18, 20, 22, 23, 24, 71, 84, 94, 169, 183], "reus": [18, 20, 22, 24], "oper": [18, 19, 23, 24, 49], "ad": [18, 177, 178], "note": [18, 84, 131, 136, 161, 166, 196], "mai": [18, 22, 24, 44, 62, 72, 101, 116, 145], "effici": [18, 19, 22, 23], "wrapper": [18, 20, 24, 112, 183], "instead": [18, 20, 59, 61, 177], "concaten": [18, 23, 49], "whole": [18, 49], "sequenc": [18, 19, 22, 23, 59, 61, 64, 65, 104, 115, 130, 144, 160], "your": [18, 41, 50, 84, 131, 136, 161, 166, 181], "time": [18, 19, 20, 23, 24, 41, 64, 115, 144, 177], "do": [18, 23, 62, 86, 177, 178], "feed": [18, 59, 61], "zero_st": [18, 24], "dtype": [18, 22, 23, 24], "call": [18, 20, 22, 24, 71], "state": [18, 22, 23, 24, 60, 84, 131, 135, 136, 161, 165, 166, 177, 181, 183], "run": [18, 22, 23, 24, 177, 178], "num_proj": [18, 24], "activ": [18, 24, 94, 95, 104, 125, 154, 169, 174, 177, 178], "input_s": [18, 22, 23, 24], "project": [18, 24, 41], "output_s": [18, 22], "directli": [18, 41], "softmax": [18, 100], "construct": [19, 24, 60, 135, 165], "fuse": 19, "fusedrnncel": [19, 22], "abstract": [19, 22, 104, 111], "object": [19, 41, 53, 59, 60, 61, 84, 112, 130, 131, 135, 136, 160, 161, 165, 166, 183], "repres": [19, 24, 41, 47, 49, 51, 64, 80, 115, 144, 194], "A": [19, 22, 23, 24, 62, 75, 77, 80, 83, 84, 85, 86, 87, 97, 100, 104, 122, 126, 138, 151, 155, 167, 173, 174, 177, 180, 181, 183], "entir": [19, 22, 59, 61], "expand": 19, "In": [19, 24, 44, 49, 62, 65, 95, 125, 131, 154, 161], "effect": 19, "recurr": [19, 22, 23, 24, 44, 80, 83], "network": [19, 22, 23, 24, 84, 136, 166], "unlik": [19, 22], "subclass": [19, 22, 67, 68, 69, 107], "onc": [19, 95, 125, 154], "put": [19, 33, 50, 71, 131, 161], "loop": 19, "insid": [19, 131, 161], "usual": [19, 86, 97, 126, 155], "lead": 19, "much": [19, 22, 77, 131, 161], "complex": 19, "less": [19, 23, 64, 115, 144], "must": [19, 22, 23, 24, 43, 45, 65, 72, 101, 113, 116, 142, 145], "__call__": 19, "signatur": 19, "fusedrnncelladaptor": 19, "use_dynamic_rnn": 19, "adaptor": 19, "timereversedfusedrnn": 19, "revers": 19, "compat": [19, 22, 59, 60, 61, 84, 130, 135, 136, 140, 160, 165, 166, 169], "v1": 19, "nn": [19, 51, 85], "basicrnncel": 19, "fw_lstm": 19, "contrib": [19, 21, 84, 136, 166], "bw_lstm": 19, "fw_out": 19, "fw_state": 19, "bw_out": 19, "bw_state": 19, "block": [20, 22], "gru": [20, 24], "op": [20, 21, 22], "layerrnncel": [20, 22], "grublockcel": 20, "num_unit": [20, 22, 24], "cell_siz": 20, "gru_cel": 20, "deprec": [20, 183], "grublockcellv2": 20, "arxiv": [20, 22, 23, 24], "org": [20, 22, 23, 24, 71], "ab": [20, 22, 23, 24], "1406": [20, 24], "1078": [20, 24], "comput": [20, 23, 24, 49, 74, 196], "forward": [20, 23], "propag": [20, 24], "step": [20, 24, 47], "kernel": 20, "mathemat": 20, "equat": [20, 24], "bias": [20, 22, 24], "b_ru": 20, "constant_initi": 20, "b_c": 20, "x_h_prev": 20, "h_prev": 20, "r_bar": 20, "u_bar": 20, "w_ru": 20, "r": [20, 24, 52, 92, 183], "sigmoid": [20, 44, 104], "h_prevr": 20, "circ": [20, 24], "x_h_prevr": 20, "c_bar": 20, "w_c": [20, 24], "c": [20, 24, 64, 67], "h": [20, 24], "input_shap": [20, 22, 24], "temporari": 20, "impl": 20, "scheme": [20, 83, 183], "distribut": [21, 110, 169], "origin": [21, 24, 56, 57, 64, 86, 88, 100, 115, 122, 132, 144, 151, 162, 177, 178, 196], "modifi": [21, 80, 83, 86, 178], "chang": [21, 24, 80, 86, 173, 177, 178], "just": [21, 84, 136, 166, 177, 178], "therefor": [21, 24], "all": [21, 24, 41, 49, 50, 56, 57, 59, 61, 64, 75, 84, 86, 89, 100, 103, 110, 115, 122, 132, 136, 144, 151, 162, 166, 177, 178, 185, 187, 197], "function": [21, 41, 100, 104, 168, 183, 197], "enabl": [21, 24, 43, 47, 51, 69, 84, 136, 166], "lstmblockcel": 22, "forget_bia": [22, 24], "cell_clip": [22, 24], "use_peephol": [22, 24], "lstm_cell": 22, "1409": 22, "2329": 22, "add": [22, 24, 88, 168, 173, 177, 178, 181], "forget": [22, 24], "gate": [22, 24], "order": [22, 24, 49, 80, 103], "reduc": [22, 24], "scale": [22, 24, 77], "begin": [22, 23, 24, 44, 65, 72, 80, 83, 94, 96, 100, 101, 116, 122, 145, 151, 177, 178, 187], "rnn_cell_impl": [22, 24], "lstmcell": [22, 24], "monolith": 22, "should": [22, 24, 33, 41, 43, 49, 62, 67, 68, 69, 71, 74, 84, 86, 107, 113, 131, 136, 142, 161, 166, 169, 173, 174, 177, 178, 179, 180, 183], "faster": [22, 59, 61, 130, 135, 160, 165], "bia": [22, 24, 140, 171], "matric": [22, 24], "long": [22, 24, 44, 183], "scope": [22, 23, 24, 43, 113, 142], "match": [22, 23, 43, 45, 59, 61, 62, 64, 71, 72, 80, 85, 101, 113, 115, 116, 130, 135, 142, 144, 145, 160, 165, 178], "inputs_shap": [22, 24], "short": [22, 24], "term": [22, 24, 43, 44, 51, 56, 57, 64, 67, 113, 115, 132, 142, 144, 162, 177, 178, 181], "lstmblockwrapp": 22, "helper": [22, 23, 181, 185], "housekeep": 22, "altern": 22, "similar": [22, 24, 64, 115, 144, 174, 196], "type": [22, 23, 24, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 113, 115, 116, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 177, 178, 179, 184, 187, 193, 194, 196], "_call_cel": 22, "properti": [22, 23, 64, 108, 115, 144], "unit": [22, 24, 89, 94, 95, 104, 125, 154], "initial_st": 22, "sequence_length": [22, 23], "d": [22, 24, 41, 64, 181], "tensor": [22, 23, 24], "shape": [22, 23, 24], "time_len": 22, "tupl": [22, 23, 24, 173, 177, 178], "initial_cell_st": 22, "initial_output": 22, "self": [22, 24, 53, 105], "_num_unit": 22, "expect": [22, 88, 183], "zero": [22, 23, 87, 97, 126, 138, 155, 167], "ha": [22, 23, 24, 41, 43, 47, 49, 51, 53, 56, 57, 62, 64, 65, 72, 74, 84, 88, 94, 101, 113, 116, 131, 132, 142, 145, 161, 162, 174, 194], "heterogen": 22, "specifi": [22, 24, 43, 56, 57, 64, 65, 75, 77, 80, 83, 84, 94, 97, 103, 126, 132, 155, 162], "each": [22, 23, 24, 41, 43, 45, 49, 56, 57, 64, 74, 77, 80, 84, 97, 113, 115, 126, 131, 132, 136, 142, 144, 155, 161, 162, 166, 169, 173, 174, 177, 178, 179, 187, 194], "int32": [22, 23], "int64": [22, 23], "vector": [22, 23, 24, 49, 56, 57, 77, 105, 132, 162], "element": [22, 23, 173], "pair": [22, 24, 41, 47, 51, 80, 86, 94, 95, 96, 97, 126, 155], "final": [22, 23], "cell_stat": 22, "valueerror": [22, 23, 24], "mismatch": 22, "lstmblockfusedcel": 22, "lstm_fused_cel": 22, "extrem": 22, "singl": [22, 23, 24, 49, 52, 64, 80, 84, 86, 105, 131, 136, 161, 166, 169, 173, 177, 187], "both": [22, 23, 24, 60, 62, 64, 74, 115, 135, 144, 165, 169, 177, 178, 181], "than": [22, 51, 64, 115, 144], "abov": [22, 196], "consist": [22, 24, 49, 64, 97, 115, 126, 144, 155, 173, 174, 177], "stack_bidirectional_rnn": 23, "cells_fw": 23, "cells_bw": 23, "initial_states_fw": 23, "initial_states_bw": 23, "bidirect": [23, 24], "neural": [23, 24, 84, 136, 166], "stack": [23, 24], "combin": [23, 24, 74, 86, 96, 177, 178], "backward": 23, "next": [23, 88], "bidirectional_rnn": 23, "doe": [23, 24, 80], "share": [23, 24], "between": [23, 24, 41, 43, 64, 74, 75, 84, 85, 86, 95, 96, 97, 113, 115, 125, 126, 131, 136, 142, 144, 154, 155, 161, 166, 174, 177, 178, 181, 183, 196], "direct": [23, 24, 41, 94, 95, 96, 104, 125, 154], "intermedi": 23, "As": [23, 24], "describ": [23, 24, 49, 169], "1303": 23, "5778": 23, "instanc": [23, 41, 74, 87, 94, 95, 108, 125, 138, 154, 167, 169], "one": [23, 24, 41, 42, 43, 59, 61, 73, 74, 75, 77, 80, 86, 89, 111, 113, 142, 173, 177, 178, 181], "per": [23, 24, 41, 43, 45, 50, 59, 61, 71, 77, 84, 86, 113, 131, 136, 142, 161, 166, 184, 193, 196], "nest": 23, "appropri": [23, 41, 178], "cell_fw": 23, "state_s": [23, 24], "same": [23, 24, 41, 49, 64, 80, 86, 115, 144, 169, 174, 177, 178], "correspond": [23, 49, 64, 71, 74, 115, 144, 173, 174, 177, 178, 179], "either": [23, 45, 49, 72, 83, 101, 116, 131, 145, 161], "actual": 23, "variablescop": 23, "subgraph": 23, "output_state_fw": 23, "output_state_bw": 23, "depth": [23, 24], "output_states_fw": 23, "output_states_bw": 23, "typeerror": 23, "cell_bw": 23, "empti": [23, 72, 75, 77, 80, 100, 101, 116, 145], "stack_bidirectional_dynamic_rnn": 23, "parallel_iter": 23, "time_major": 23, "swap_memori": 23, "dynam": [23, 24], "max_tim": 23, "iter": [23, 45, 56, 57, 132, 162, 177, 178], "parallel": 23, "those": [23, 65, 86], "tempor": 23, "trade": 23, "off": [23, 44, 84, 113, 131, 136, 142, 161, 166], "take": [23, 59, 61, 64, 74, 77, 105, 108, 115, 130, 144, 160, 173, 174], "while": [23, 41, 44, 88, 100, 122, 151, 169], "smaller": 23, "longer": [23, 80, 174], "bit": [23, 59, 61, 130, 160], "becaus": [23, 67, 68, 69, 107, 183], "avoid": [23, 24, 41, 169, 174, 177, 178], "transpos": 23, "howev": [23, 51], "most": [23, 49, 84, 136, 166, 174], "major": 23, "so": [23, 24, 131, 161], "accept": [23, 131, 161], "emit": 23, "form": [23, 56, 57, 71, 75, 131, 132, 161, 162], "transpar": [23, 175], "swap": [23, 177, 178], "produc": [23, 24, 80, 86], "infer": [23, 24, 84, 97, 126, 136, 155, 166], "back": 23, "prop": 23, "would": [23, 131, 161], "typic": 23, "fit": [23, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 77, 80, 84, 85, 87, 88, 89, 92, 94, 95, 96, 97, 100, 101, 104, 105, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 167, 194], "veri": [23, 64, 115, 144], "minim": [23, 87, 94, 95, 97, 125, 126, 138, 154, 155, 167], "perform": [23, 24, 84, 169, 184, 193, 196], "penalti": 23, "layers_output": 23, "coupledinputforgetgatelstmcel": 24, "proj_clip": 24, "num_unit_shard": 24, "num_proj_shard": 24, "state_is_tupl": 24, "math_op": 24, "layer_norm": 24, "norm_gain": 24, "norm_shift": 24, "non": [24, 43, 75, 89], "peephol": 24, "pdf": [24, 194], "semanticscholar": 24, "1154": 24, "0131eae85b2e11d53df7f1360eeb6476e7f4": 24, "felix": 24, "ger": 24, "jurgen": 24, "schmidhub": 24, "fred": 24, "cummin": 24, "learn": [24, 43, 77, 84, 94, 113, 131, 136, 142, 161, 166], "continu": [24, 100, 122, 151], "iet": 24, "850": 24, "855": 24, "1999": [24, 88], "research": 24, "googl": 24, "pub": 24, "archiv": 24, "43905": 24, "hasim": 24, "sak": 24, "andrew": 24, "senior": 24, "francois": 24, "beaufai": 24, "architectur": [24, 84, 136, 166], "larg": [24, 59, 61, 84, 130, 135, 136, 160, 165, 166], "acoust": 24, "interspeech": 24, "2014": 24, "coupl": 24, "1503": 24, "04069": 24, "greff": 24, "et": 24, "al": 24, "search": [24, 43, 71, 84, 100, 122, 151], "odyssei": 24, "peep": 24, "hole": 24, "connect": [24, 41], "1607": 24, "06450": 24, "jimmi": 24, "lei": 24, "ba": 24, "jami": 24, "ryan": 24, "kiro": 24, "geoffrei": 24, "hinton": 24, "appli": [24, 64, 89, 115, 144, 173, 177, 178, 183], "intern": [24, 86, 108, 140, 180], "nonlinear": 24, "2d": 24, "column": [24, 41, 42, 43, 44, 45, 50, 52, 54, 56, 57, 62, 64, 65, 72, 77, 80, 83, 84, 89, 92, 94, 100, 101, 102, 103, 104, 105, 113, 115, 116, 119, 120, 122, 129, 131, 132, 136, 142, 144, 145, 148, 149, 151, 158, 161, 162, 166, 168, 169, 174, 177, 178, 181, 182, 183, 187], "c_state": 24, "m_state": 24, "after": [24, 44, 45, 56, 57, 59, 60, 61, 88, 130, 132, 135, 160, 162, 165, 177], "read": [24, 43, 62, 64, 74, 80, 86, 87, 105, 131, 138, 161, 167, 173, 177, 178, 183], "previou": [24, 196], "wa": [24, 41, 43, 44, 50, 51, 52, 54, 65, 75, 92, 113, 120, 129, 131, 142, 149, 158, 161], "here": 24, "cannot": 24, "via": [24, 47, 51], "timefreqlstmcel": 24, "feature_s": 24, "frequency_skip": 24, "tara": 24, "n": [24, 45, 49, 71, 84, 136, 166, 186], "sainath": 24, "bo": 24, "li": 24, "pattern": [24, 41, 64, 85, 89, 115, 144, 177, 187], "v": [24, 45, 84, 184, 193], "convolut": 24, "lvcsr": 24, "task": [24, 41, 59, 60, 61, 97, 126, 130, 135, 155, 160, 165, 187], "submit": 24, "2016": 24, "clip": 24, "gridlstmcel": 24, "share_time_frequency_weight": 24, "num_frequency_block": 24, "start_freqindex_list": 24, "end_freqindex_list": 24, "couple_input_forget_g": 24, "grid": [24, 173], "nal": 24, "kalchbrenn": 24, "ivo": 24, "danihelka": 24, "alex": 24, "grave": 24, "proc": 24, "iclr": 24, "1507": 24, "01526": 24, "shared_weight": 24, "flag": [24, 77, 173], "_state_is_tupl": 24, "bidirectionalgridlstmcel": 24, "backward_slice_offset": 24, "gridlstm": 24, "henc": 24, "affect": [24, 49], "real": [24, 84, 136, 166], "onlin": 24, "system": [24, 181], "two": [24, 44, 49, 53, 64, 73, 80, 86, 115, 144], "attentioncellwrapp": 24, "attn_length": 24, "attn_siz": 24, "attn_vec_s": 24, "attent": 24, "1601": 24, "06733": 24, "lstma": 24, "highwaywrapp": 24, "couple_carry_transform_g": 24, "carry_bias_init": 24, "highwai": 24, "k": [24, 56, 57, 100, 174, 177], "srivastava": 24, "j": 24, "preprint": 24, "1505": 24, "00387": 24, "2015": 24, "layernormbasiclstmcel": 24, "dropout_keep_prob": 24, "dropout_prob_se": 24, "1603": 24, "05118": 24, "without": [24, 64, 115, 144, 177, 178], "stanislau": 24, "semeniuta": 24, "aliaksei": 24, "severyn": 24, "erhardt": 24, "barth": 24, "nascel": 24, "use_bia": 24, "kwarg": 24, "na": 24, "paper": 24, "1611": 24, "01578": 24, "barret": 24, "zoph": 24, "quoc": 24, "le": 24, "reinforc": 24, "2017": 24, "ugrnncel": 24, "updat": [24, 173, 185], "ugrnn": 24, "compromis": 24, "vanilla": 24, "There": 24, "determin": [24, 47, 49, 94, 96, 97, 126, 155], "whether": [24, 43, 47, 49, 50, 52, 53, 56, 57, 59, 61, 62, 64, 71, 72, 80, 84, 86, 89, 94, 96, 97, 100, 101, 103, 104, 113, 115, 116, 122, 126, 130, 131, 132, 135, 136, 142, 144, 145, 151, 155, 160, 161, 162, 165, 166, 169, 178, 184], "integr": 24, "instantan": 24, "idea": 24, "feedforward": 24, "09913": 24, "jasmin": 24, "collin": 24, "jascha": 24, "sohl": 24, "dickstein": 24, "david": 24, "sussillo": 24, "capac": 24, "trainabl": 24, "num": 24, "new_output": 24, "ident": 24, "new_stat": 24, "intersectionrnncel": 24, "num_in_proj": 24, "y_activ": 24, "nn_op": 24, "intersect": 24, "well": [24, 184, 193, 196], "design": 24, "improv": [24, 84, 97, 126, 136, 155, 166], "flow": 24, "through": [24, 62], "dimension": 24, "y": 24, "To": [24, 43, 47, 51, 59, 60, 61, 62, 94, 130, 135, 160, 165], "achiev": [24, 49, 84, 136, 166], "subsequ": 24, "deepli": 24, "best": [24, 84, 131, 161, 184], "new_i": 24, "equal": [24, 41, 74, 75], "compiledwrapp": 24, "compile_st": 24, "wrap": [24, 67, 68, 69, 106, 107], "execut": [24, 41, 64, 115, 144], "xla": 24, "jit": 24, "phasedlstmcel": 24, "leak": 24, "ratio_on": 24, "trainable_ratio_on": 24, "period_init_min": 24, "period_init_max": 24, "1000": [24, 100, 122, 151], "phase": 24, "1610": 24, "09513v1": 24, "float32": 24, "float64": 24, "store": [24, 108], "second": [24, 48, 180], "features_s": 24, "lstmstatetupl": 24, "timestep": 24, "convlstmcel": 24, "conv_ndim": 24, "output_channel": 24, "kernel_shap": 24, "skip_connect": 24, "conv_lstm_cel": 24, "1506": 24, "04214v1": 24, "conv1dlstmcel": 24, "conv_1d_lstm_cel": 24, "1d": 24, "conv2dlstmcel": 24, "conv_2d_lstm_cel": 24, "conv3dlstmcel": 24, "conv_3d_lstm_cel": 24, "3d": 24, "glstmcell": 24, "number_of_group": 24, "group": [24, 50, 64, 85], "g": [24, 45, 49, 59, 60, 61, 75, 84, 89, 94, 100, 113, 122, 130, 135, 136, 142, 151, 160, 165, 166, 169, 173, 177, 178, 196], "1703": 24, "10722": 24, "kuchaiev": 24, "b": [24, 43, 59, 60, 61, 80, 83, 84, 85, 86, 87, 94, 135, 138, 165, 167, 173, 196], "ginsburg": 24, "trick": 24, "brief": 24, "sub": 24, "evenli": 24, "fed": 24, "num_input": 24, "known": [24, 85], "divis": 24, "innermost": 24, "incompat": 24, "layernormlstmcel": 24, "srucel": 24, "sru": 24, "fast": 24, "cnn": [24, 84, 136, 166], "cf": 24, "1709": 24, "02755": 24, "variat": 24, "character": 24, "simplifi": 24, "consecut": 24, "tradition": 24, "multipli": 24, "matrix": 24, "w_hh": 24, "ensu": 24, "flavor": 24, "replac": [24, 62, 64, 65, 66, 79, 80, 86, 115, 144, 173, 177, 178], "multipl": [24, 42, 75, 97, 126, 155], "h_": 24, "pointwis": 24, "result": [24, 41, 43, 44, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 77, 80, 83, 84, 85, 87, 88, 89, 92, 94, 95, 96, 97, 101, 105, 113, 115, 116, 120, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 154, 155, 158, 160, 161, 162, 165, 166, 167, 169, 174, 177, 178, 179], "gain": 24, "boolean": [24, 41, 49, 50, 64, 94, 96, 104, 184, 193], "exist": [24, 41, 100, 122, 151, 185], "alreadi": [24, 41, 56, 57, 84, 94, 100, 122, 132, 151, 162], "error": [24, 173, 174], "string": [24, 44, 65, 71, 72, 80, 85, 89, 101, 104, 116, 131, 145, 161, 169, 173, 175, 177, 178, 183], "mistak": 24, "keyword": [24, 42, 50, 79, 102, 191], "argument": 24, "weightnormlstmcel": 24, "norm": 24, "adapt": 24, "1602": 24, "07868": 24, "tim": 24, "saliman": 24, "diederik": 24, "p": [24, 43, 52, 54, 84, 89, 103, 120, 149, 196], "kingma": 24, "reparameter": 24, "acceler": 24, "deep": [24, 43, 113, 131, 142, 161], "indrnncel": 24, "independ": 24, "indrnn": 24, "1803": 24, "04831": 24, "mean": [24, 62, 74, 75, 84, 88, 174, 177, 178], "act": [24, 131, 161], "w": 24, "indygrucel": 24, "kernel_initi": 24, "bias_initi": 24, "grucel": 24, "u_r": 24, "u_z": 24, "5": [24, 44, 51, 52, 54, 62, 64, 71, 74, 75, 80, 83, 84, 89, 95, 115, 120, 125, 131, 136, 144, 149, 154, 161, 166, 173, 177, 178, 179, 180, 183], "respect": [24, 41], "diagon": 24, "hadamard": 24, "product": 24, "r_j": 24, "sigmaleft": 24, "mathbf": 24, "w_rmathbf": 24, "_j": 24, "u_rcirc": 24, "_jright": 24, "z_j": 24, "w_zmathbf": 24, "u_zcirc": 24, "tild": 24, "phileft": 24, "denot": 24, "indygru": 24, "node": 24, "see": [24, 47, 59, 60, 61, 72, 84, 94, 95, 101, 116, 125, 130, 131, 135, 136, 145, 154, 160, 161, 165, 166, 194], "its": [24, 75, 80], "own": [24, 84, 131, 136, 161, 166, 181], "oppos": 24, "nunit": 24, "indylstmcel": 24, "indylstm": 24, "basiclstmcel": 24, "u_f": 24, "u_i": 24, "u_o": 24, "u_c": 24, "regular": [24, 41, 45, 47, 51, 64, 104, 115, 144, 169, 187], "f_t": 24, "sigma_gleft": 24, "w_f": 24, "x_t": 24, "b_fright": 24, "i_t": 24, "w_i": 24, "b_iright": 24, "o_t": 24, "w_o": 24, "b_oright": 24, "c_t": 24, "c_": 24, "sigma_cleft": 24, "b_cright": 24, "baselin": 24, "detail": [24, 41], "analysi": [24, 131, 161], "1903": 24, "08023": 24, "ntmcontrollerst": 24, "ntmcell": 24, "control": [24, 41, 43, 47, 113, 142], "memory_s": 24, "memory_vector_dim": 24, "read_head_num": 24, "write_head_num": 24, "shift_rang": 24, "clip_valu": 24, "ture": 24, "machin": 24, "1807": 24, "08518": 24, "mark": [24, 43, 45, 49, 65, 113, 142], "collier": 24, "joeran": 24, "beel": 24, "turn": [24, 177, 178], "snowkylin": 24, "ntm": 24, "cours": 24, "1410": 24, "5401": 24, "wayn": 24, "prev_stat": 24, "minimalrnncel": 24, "glorot_uniform": 24, "ones": [24, 84, 177], "minimalrnn": 24, "1806": 24, "05394v2": 24, "minmin": 24, "chen": 24, "jeffrei": 24, "pennington": 24, "samuel": 24, "schoenholz": 24, "isometri": 24, "field": [24, 48, 50, 62, 80, 88, 102, 103, 105], "theori": 24, "signal": 24, "icml": 24, "2018": [24, 88], "sum": 24, "cfncell": 24, "chao": 24, "openreview": 24, "net": [24, 45], "id": [24, 41, 48, 65, 72, 181, 187], "s1dizvclg": 24, "thoma": 24, "laurent": 24, "jame": 24, "von": 24, "brecht": 24, "cfn": 24, "goe": 24, "contract": [24, 177, 178], "map": [24, 52, 53, 54, 62, 64, 75, 84, 86, 92, 94, 95, 100, 108, 115, 119, 120, 122, 129, 144, 148, 149, 151, 158, 173, 181, 183], "linear": [24, 59, 60, 61, 104, 130, 135, 160, 165], "decoupl": 24, "tf_graph_1x": [33, 183], "manipul": 41, "json": [41, 52, 54, 62, 92, 119, 120, 129, 148, 149, 158, 169, 174, 177, 178, 183, 187], "export": [41, 183, 187], "layout": 41, "annotationlab": 41, "interact": [41, 173, 181], "john": [41, 65], "snow": 41, "set_credenti": 41, "usernam": [41, 181], "password": 41, "client_secret": 41, "annotationlab_url": 41, "credenti": 41, "client": 41, "get_all_project": 41, "visibl": [41, 64, 115, 144], "rtype": [41, 187], "get_project_config": 41, "project_nam": 41, "create_project": 41, "project_descript": 41, "project_sampl": 41, "project_instruct": 41, "random": [41, 64, 65, 84, 115, 131, 136, 144, 161, 166, 177, 178, 181], "sequenti": [41, 80], "sampl": [41, 65, 169, 173, 177, 178, 186], "show": [41, 43, 44, 47, 49, 50, 51, 52, 54, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 80, 83, 87, 88, 89, 92, 94, 95, 96, 97, 101, 113, 115, 116, 120, 125, 129, 130, 131, 135, 138, 142, 144, 145, 149, 154, 158, 160, 161, 165, 167, 175, 180, 183, 194], "guidelin": 41, "delete_project": 41, "confirm": 41, "delet": 41, "set_project_config": 41, "classification_label": 41, "ner_label": [41, 83, 183], "assertion_label": [41, 183, 187], "relations_label": 41, "classif": [41, 77, 79, 130, 131, 132, 135, 140, 160, 161, 162, 165, 169], "By": [41, 75], "multiclass": 41, "upload_task": 41, "task_list": 41, "title_list": 41, "id_offset": 41, "upload": 41, "custom": [41, 43, 62, 64, 94, 95, 115, 144, 175, 177], "titl": [41, 177, 178, 187], "increment": 41, "offset": [41, 43], "delete_task": 41, "task_id": [41, 183], "get_annot": 41, "output_nam": 41, "save_dir": [41, 194], "write": [41, 103, 173, 194], "get_conll_data": 41, "input_json_path": [41, 187], "exported_conl": 41, "ground_truth": [41, 187], "excluded_label": [41, 183, 187], "excluded_task_id": [41, 187], "excluded_task_titl": [41, 187], "regex_pattern": [41, 177, 187], "io": [41, 177, 178, 194], "conll": [41, 84, 136, 166, 169, 173, 174, 177, 178, 187], "select": [41, 43, 44, 47, 49, 50, 52, 54, 59, 60, 61, 64, 65, 67, 80, 87, 92, 94, 95, 100, 113, 115, 120, 125, 129, 130, 135, 138, 142, 144, 149, 154, 158, 160, 165, 167, 181, 187], "ground": [41, 174, 187], "truth": [41, 174, 187], "complet": [41, 187], "latest": [41, 187], "exclud": [41, 45, 84, 136, 166, 187], "irrelev": [41, 187], "regex": [41, 42, 47, 48, 50, 51, 62, 64, 85, 89, 102, 115, 144, 177, 187], "get_assertion_data": 41, "relevant_ner_label": 41, "unannotated_label": 41, "unannotated_label_strategi": 41, "unannotated_label_strategy_dict": 41, "included_task_id": 41, "seed": [41, 64, 65, 67, 84, 115, 131, 136, 144, 161, 166, 181], "panda": [41, 65, 173, 174, 178, 187], "relev": [41, 49], "assign": [41, 177, 178, 179], "strategi": [41, 80, 173], "occurr": 41, "unannot": 41, "count": [41, 169, 177, 178], "fraction": 41, "absolut": 41, "dictionari": [41, 45, 50, 52, 54, 62, 64, 75, 80, 86, 87, 92, 94, 95, 97, 102, 119, 120, 126, 129, 138, 148, 149, 155, 158, 167, 169, 173, 177, 178, 179], "entity_label": [41, 64, 115, 144], "sample_weight_or_count": 41, "max": [41, 43, 45, 57, 59, 60, 61, 113, 130, 132, 135, 142, 160, 162, 165, 175], "get_relation_extraction_data": 41, "negative_rel": 41, "relation_pair": 41, "negative_relation_strategi": 41, "negative_relation_strategy_dict": 41, "were": [41, 44, 53, 84, 136, 166, 187], "discard": [41, 87, 138, 167], "rest": [41, 47, 51, 80, 86, 174], "plausibl": 41, "possibl": [41, 42, 43, 47, 50, 51, 53, 57, 62, 77, 80, 86, 102, 103, 104, 113, 132, 142, 162, 177, 178], "neg": [41, 43], "entity1": [41, 94, 95, 125, 154], "entity2": [41, 94, 95, 125, 154], "get_classification_data": 41, "generate_preannot": 41, "all_result": 41, "document_column": 41, "ner_column": 41, "assertion_column": 41, "relations_column": 41, "user_nam": 41, "titles_list": 41, "light_pipelin": 41, "fullannot": [41, 42, 178], "full_pipelin": 41, "df": [41, 88, 112, 168, 178, 181, 182, 183], "collect": [41, 105], "documentassembl": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 80, 83, 84, 85, 86, 88, 89, 92, 94, 95, 96, 97, 100, 101, 102, 113, 115, 116, 120, 122, 125, 129, 130, 131, 135, 136, 142, 144, 145, 149, 151, 154, 158, 160, 161, 165, 166, 187], "older": 41, "offeset": 41, "overrit": 41, "upload_preannot": 41, "preannot": 41, "get_iaa_metr": 41, "conll_dir": 41, "annotator_nam": 41, "set_ref_annot": 41, "return_nerdlmetr": 41, "results_token_bas": 41, "iaa": 41, "metric": [41, 84, 169, 177, 178, 179, 184, 193, 196], "present": [41, 43, 47, 80, 83, 86, 100, 113, 122, 142, 151], "comparison": [41, 74, 178], "made": [41, 80], "full": 41, "partial": 41, "nerdlmetr": [41, 112], "report": [41, 174, 177, 178, 186], "annotationmerg": 42, "classnam": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 92, 94, 95, 96, 97, 99, 100, 102, 106, 107, 113, 115, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167], "java_model": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 92, 94, 95, 96, 97, 99, 100, 102, 107, 113, 115, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167], "merg": [42, 56, 57, 79, 83, 99, 132, 140, 162], "inputtyp": [42, 50, 102], "wordpiec": [42, 50, 102], "sentence_embed": [42, 50, 71, 74, 75, 100, 102, 122, 131, 151, 161], "categori": [42, 50, 56, 57, 59, 61, 77, 94, 95, 97, 102, 125, 126, 130, 131, 132, 141, 154, 155, 160, 161, 162], "sentiment": [42, 50, 102, 131, 161], "named_ent": [42, 50, 60, 83, 84, 85, 86, 87, 102, 135, 136, 138, 165, 166, 167], "labeled_depend": [42, 50, 52, 54, 92, 102, 119, 120, 129, 148, 149, 158], "languag": [42, 49, 50, 52, 54, 59, 60, 61, 64, 72, 74, 75, 87, 97, 101, 102, 116, 119, 120, 126, 130, 131, 135, 138, 145, 148, 149, 155, 160, 161, 165, 167, 180, 183], "doc": [42, 100, 122, 151, 169, 173], "test_data": [42, 48, 102, 178, 183], "createdatafram": [42, 43, 44, 48, 49, 51, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 80, 83, 84, 86, 87, 88, 89, 94, 95, 97, 101, 102, 113, 115, 116, 125, 130, 131, 135, 136, 138, 142, 144, 145, 154, 160, 161, 165, 166, 167], "todf": [42, 43, 44, 48, 49, 51, 59, 60, 61, 62, 64, 65, 71, 72, 74, 75, 80, 83, 84, 86, 87, 88, 89, 94, 95, 96, 97, 101, 102, 113, 115, 116, 125, 130, 131, 135, 136, 138, 142, 144, 145, 154, 160, 161, 165, 166, 167], "document1": 42, "document2": [42, 65], "setinputtyp": [42, 102], "all_doc": 42, "setstag": [42, 44, 49, 50, 52, 54, 56, 57, 59, 60, 61, 65, 72, 74, 75, 77, 84, 87, 92, 97, 101, 102, 105, 116, 120, 129, 130, 131, 132, 135, 136, 138, 145, 149, 158, 160, 161, 162, 165, 166, 167], "lp": 42, "lightpipelin": [42, 178, 187], "replic": 42, "23": [42, 48], "inputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 120, 149], "outputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 106, 107, 120, 149], "filter": [42, 47, 50, 51, 53, 86, 96, 102, 174, 177, 178, 180, 183], "algorithm": [43, 45, 56, 57, 113, 132, 142, 162, 177], "absent": [43, 47, 113, 142, 183], "hypothet": [43, 47, 113, 142], "condit": [43, 113, 142], "associated_with_other_person": [43, 113, 142], "etc": [43, 100, 113, 122, 142, 151], "pretrain": [43, 45, 49, 51, 52, 54, 56, 57, 59, 60, 61, 64, 65, 67, 71, 74, 75, 77, 80, 83, 84, 85, 86, 87, 92, 94, 95, 96, 97, 100, 102, 113, 115, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 140, 142, 144, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 185], "assertiondlmodel": [43, 47, 113, 142], "startcol": [43, 45, 72, 101, 113, 116, 142, 145], "endcol": [43, 45, 113, 142], "batchsiz": [43, 59, 61, 77, 84, 95, 113, 125, 130, 131, 135, 136, 142, 154, 160, 161, 165, 166], "optim": [43, 77, 84, 113, 136, 142, 166, 177], "learningr": [43, 77, 113, 142], "rate": [43, 77, 84, 113, 131, 136, 142, 161, 166, 183], "maxsentlen": [43, 113, 142], "graphfold": [43, 84, 104, 113, 136, 142, 166], "extern": [43, 80, 84, 86, 104, 113, 136, 142, 166], "graphfil": [43, 84, 104, 113, 142], "configprotobyt": [43, 59, 60, 61, 84, 113, 130, 131, 135, 136, 142, 160, 161, 165, 166], "configproto": [43, 59, 60, 61, 84, 113, 130, 131, 135, 136, 142, 160, 161, 165, 166], "serial": [43, 59, 60, 61, 84, 113, 130, 131, 135, 136, 142, 160, 161, 165, 166], "byte": [43, 59, 60, 61, 84, 113, 130, 131, 135, 136, 142, 160, 161, 165, 166], "config_proto": [43, 113, 142], "serializetostr": [43, 113, 142], "validationsplit": [43, 77, 84, 113, 131, 136, 142, 161, 166], "choos": [43, 84, 113, 131, 136, 142, 161, 166], "proport": [43, 84, 113, 131, 136, 142, 161, 166, 177, 178, 179], "against": [43, 49, 84, 113, 131, 136, 142, 161, 166, 169, 178], "evaluationlogextend": [43, 84, 113, 136, 142, 166], "mode": [43, 64, 67, 77, 112, 113, 115, 142, 144, 181], "eval": [43, 113, 140, 142], "testdataset": [43, 84, 113, 136, 142, 166], "statist": [43, 84, 113, 136, 142, 166], "dure": [43, 64, 71, 84, 113, 131, 136, 142, 161, 166, 178, 179, 181], "includeconfid": [43, 84, 113, 136, 142, 166], "confid": [43, 47, 51, 52, 54, 80, 84, 86, 87, 92, 97, 100, 113, 119, 120, 126, 129, 136, 138, 142, 148, 149, 155, 158, 166, 167, 174], "metadata": [43, 44, 48, 49, 50, 62, 64, 71, 80, 83, 84, 87, 88, 94, 95, 96, 97, 102, 103, 113, 125, 136, 138, 142, 154, 166, 167], "enableoutputlog": [43, 84, 113, 131, 136, 142, 161, 166], "outputlogspath": [43, 77, 84, 113, 131, 136, 142, 161, 166], "level": [43, 47, 49, 62, 84, 113, 131, 136, 142, 161, 166], "scopewindow": [43, 113, 142], "window": [43, 84, 113, 136, 142, 166], "express": [43, 47, 51, 64, 113, 115, 142, 144], "ml": [43, 45, 47, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 72, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 100, 101, 113, 115, 116, 120, 122, 125, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 149, 151, 154, 158, 160, 161, 162, 165, 166, 167, 168, 194], "document_assembl": [43, 44, 45, 48, 56, 57, 85, 87, 88, 113, 132, 138, 142, 162, 167, 187], "doc2chunk": [43, 65, 72, 88, 101, 116, 145], "setchunkcol": [43, 45, 72, 85, 101, 113, 116, 142, 145], "setstartcolbytokenindex": [43, 72], "setfailonmiss": [43, 72], "setlowercas": [43, 52, 72, 89], "wordembeddingsmodel": [43, 45, 49, 52, 54, 64, 65, 71, 74, 75, 80, 83, 84, 85, 86, 92, 94, 95, 96, 97, 113, 115, 120, 125, 129, 136, 142, 144, 149, 154, 158, 166], "embeddings_clin": [43, 45, 49, 52, 54, 64, 65, 75, 80, 83, 85, 86, 92, 94, 95, 96, 97, 113, 115, 120, 125, 129, 142, 144, 149, 154, 158], "en": [43, 45, 49, 52, 54, 56, 57, 59, 60, 61, 64, 65, 67, 71, 74, 75, 77, 80, 83, 84, 85, 86, 87, 92, 94, 95, 96, 97, 100, 113, 115, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167], "setcasesensit": [43, 45, 47, 56, 57, 59, 60, 61, 62, 85, 95, 100, 102, 113, 122, 130, 132, 135, 142, 151, 160, 162, 165], "012": [43, 113, 142], "015": [43, 113, 142], "setscopewindow": [43, 113, 142], "assertionpipelin": [43, 45, 47, 100, 113, 122, 142, 151], "srt": [43, 104], "setgraphfil": [43, 84, 104], "happen": [43, 84], "setconfigprotobyt": [43, 59, 60, 61, 84], "conf": 43, "contai": 43, "colnam": 43, "start_col": 43, "end_col": [43, 94], "float": [43, 49, 56, 57, 64, 71, 74, 75, 77, 84, 86, 87, 94, 95, 100, 105, 131, 161, 173, 174, 177, 178, 179, 184, 193], "maximum": [43, 56, 57, 84, 95, 96, 104, 131, 132, 136, 161, 162, 166], "row": [43, 50, 183], "settestdataset": 43, "read_a": [43, 51, 62, 64, 80, 86], "reada": [43, 51, 62, 64, 80, 86], "waht": 43, "left": [43, 94, 95, 96, 125, 154], "right": [43, 49, 74, 94, 95, 96, 125, 154], "dl": 43, "approach": [43, 52, 54, 92, 106, 113, 119, 120, 129, 142, 148, 149, 158], "targetnerlabel": [43, 45, 113, 142], "common": [43, 47, 51, 52, 54, 56, 57, 62, 64, 72, 74, 75, 77, 80, 83, 84, 86, 88, 92, 94, 95, 100, 101, 105, 113, 115, 116, 120, 122, 125, 129, 132, 136, 140, 142, 144, 145, 149, 151, 154, 158, 162, 166], "fever": [43, 47, 113, 142], "sore": [43, 47, 113, 142], "throat": [43, 47, 113, 142], "stomach": [43, 47, 51, 113, 142], "pain": [43, 47, 51, 113, 142], "she": [43, 113, 142, 183], "maintain": [43, 113, 142], "epidur": [43, 47, 113, 142], "pca": [43, 47, 113, 142], "sentencedetector": [43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 62, 64, 71, 74, 75, 80, 83, 84, 85, 86, 92, 96, 97, 100, 102, 113, 115, 120, 122, 129, 131, 136, 142, 144, 149, 151, 158, 161, 166], "medicalnermodel": [43, 49, 52, 54, 64, 65, 75, 80, 83, 84, 85, 86, 92, 94, 95, 96, 97, 113, 115, 120, 125, 129, 142, 144, 149, 154, 158], "ner_clin": [43, 84, 97, 113, 136, 142, 166], "nerconvert": [43, 47, 49, 64, 65, 71, 74, 80, 83, 86, 94, 95, 96, 97, 113, 115, 125, 142, 144, 154], "ner_chunk": [43, 47, 49, 52, 54, 64, 65, 71, 74, 75, 79, 82, 83, 86, 92, 94, 95, 96, 97, 113, 115, 120, 125, 129, 142, 144, 149, 154, 158, 177, 178, 194], "clinicalassert": [43, 47, 113, 142], "selectexpr": [43, 44, 47, 49, 51, 52, 54, 62, 71, 72, 74, 75, 80, 83, 87, 88, 89, 94, 95, 96, 97, 101, 113, 116, 120, 125, 131, 138, 142, 145, 149, 154, 161, 167], "truncat": [43, 44, 47, 49, 51, 52, 54, 59, 60, 61, 62, 64, 65, 72, 74, 75, 87, 89, 92, 94, 95, 96, 97, 101, 113, 115, 116, 120, 125, 129, 130, 131, 135, 138, 142, 144, 145, 149, 154, 158, 160, 161, 165, 167], "lang": [43, 45, 49, 52, 54, 56, 57, 59, 60, 61, 64, 67, 71, 74, 75, 77, 80, 84, 87, 94, 95, 97, 100, 113, 115, 119, 120, 122, 125, 126, 130, 131, 132, 135, 136, 138, 142, 144, 148, 149, 151, 154, 155, 160, 161, 162, 165, 166, 167, 180], "remote_loc": [43, 45, 49, 52, 54, 56, 57, 59, 60, 61, 64, 67, 71, 74, 75, 77, 80, 84, 87, 94, 95, 97, 100, 113, 115, 119, 120, 122, 125, 126, 130, 131, 132, 135, 136, 138, 142, 144, 148, 149, 151, 154, 155, 160, 161, 162, 165, 166, 167, 180], "assertionchunkconvert": 44, "some": [44, 64, 75, 84, 115, 136, 144, 166], "issu": [44, 85, 173, 174], "indic": [44, 77, 80], "lose": 44, "popul": 44, "alab": [44, 140, 187], "chunktextcol": 44, "chunkbegincol": 44, "chunkendcol": 44, "outputtokenbegincol": 44, "outputtokenendcol": 44, "angiographi": 44, "bleed": 44, "vessel": 44, "minni": 44, "suppli": 44, "succesfulli": 44, "embol": 44, "57": 44, "discuss": 44, "hi": [44, 49, 74, 87, 138, 167], "pcp": [44, 64, 115, 144], "leon": 44, "clear": 44, "had": [44, 59, 61, 71, 130, 160], "dvt": 44, "ultim": 44, "pe": 44, "felt": [44, 59, 61, 130, 160], "strongli": 44, "he": [44, 49, 74], "anticoagul": 44, "31": [44, 48, 183], "34": [44, 183], "char_begin": 44, "char_end": 44, "convert": [44, 48, 72, 86, 89, 101, 102, 116, 145, 173, 177, 178], "setchunktextcol": 44, "setchunkbegincol": 44, "setchunkendcol": 44, "setoutputtokenbegincol": 44, "token_begin": 44, "setoutputtokenendcol": 44, "token_end": 44, "62": 44, "33": 44, "inputcol": [44, 59, 61, 104, 105, 111, 131, 161], "outputcol": [44, 105, 111, 194], "col": [44, 48, 51, 62, 71, 94, 100, 122, 151], "setparam": [44, 65, 72, 101, 105, 107], "assertionlogregapproach": 45, "regress": [45, 56, 57, 59, 61, 130, 132, 160, 162], "done": [45, 84, 131, 136, 161, 166, 178], "maxit": [45, 56, 57, 132, 162], "regparam": 45, "enetparam": 45, "elast": 45, "beforeparam": 45, "context": [45, 49, 74, 79, 140, 177, 178], "afterparam": 45, "externalfeatur": 45, "nercol": 45, "sentence_detector": [45, 48, 52, 54, 75, 85, 87, 92, 113, 120, 129, 138, 142, 149, 158, 167, 187], "chunker": [45, 79, 85, 113, 140, 142], "Then": [45, 71, 84, 131, 136, 161, 166], "setreg": 45, "setbefor": 45, "setaft": 45, "13": [45, 64, 88, 89, 115, 144, 183], "setmaxit": [45, 56, 57], "lamda": [45, 77], "setenet": 45, "enet": 45, "setnercol": 45, "settargetnerlabel": 45, "assertionlogregmodel": [45, 113, 142], "logreg": [45, 56, 57, 132, 162], "assertionlogreg": 45, "famili": [45, 100], "logarithm": [45, 56, 57, 132, 162], "obtain": [45, 97, 113, 126, 142, 155, 179], "assertionpretrain": 45, "assertiondl": [46, 79, 114, 118, 143, 147], "assertion_chunk_convert": [46, 79], "assertion_dl_reg": [46, 79], "assertionfilter": 47, "come": [47, 49, 51, 80, 100, 122, 151], "criteria": [47, 51, 53, 80], "isin": [47, 51], "whitelist": [47, 51, 86], "ignor": [47, 51, 59, 61, 64, 80, 86, 115, 130, 135, 144, 160, 165, 177], "what": [47, 51, 80, 87, 94, 100, 138, 167, 185], "entitiesconfid": [47, 51], "setcriteria": [47, 51], "setwhitelist": [47, 51, 71, 86], "chunksfilt": 47, "casesensit": [47, 59, 61, 62, 130, 135, 160, 165], "definit": [47, 87, 97, 126, 138, 155, 167], "setregex": [47, 51], "llist": [47, 51], "dash": [47, 51, 94, 96], "chunkconvert": 48, "regexmatch": [48, 50, 62, 102], "my": [48, 87, 131, 138, 161, 167], "rule": [48, 62, 169], "ceremoni": 48, "regex_match": 48, "setexternalrul": [48, 50, 102], "src": [48, 50, 84, 102, 131, 136, 161, 166, 183], "resourc": [48, 49, 50, 52, 54, 59, 60, 61, 74, 75, 80, 84, 86, 87, 97, 102, 105, 119, 120, 126, 130, 131, 135, 136, 138, 148, 149, 155, 160, 161, 165, 166, 167, 180, 183], "matcher": [48, 102], "txt": [48, 50, 64, 102, 115, 144, 177, 178, 183], "delimit": [48, 80, 86], "outdf": 48, "71": 48, "80": 48, "chunkkeyphraseextract": 49, "keyphras": 49, "kei": [49, 50, 52, 87, 92, 97, 102, 103, 126, 138, 155, 167, 169, 173, 174, 179, 181, 196], "phrase": [49, 85], "compar": [49, 169, 178], "broader": 49, "thei": [49, 84, 136, 166, 181], "belong": 49, "candid": [49, 71], "variou": 49, "wai": 49, "ngramgener": 49, "textmatch": 49, "latter": 49, "topn": [49, 71], "selectmostdiffer": 49, "find": [49, 62, 74, 97, 110], "them": [49, 59, 60, 61, 74, 75, 77, 95, 96, 130, 135, 160, 165], "other": [49, 65, 75, 80, 177, 178, 181], "diverg": 49, "maxim": [49, 75, 94], "margin": [49, 175], "mmr": 49, "conjunct": 49, "aim": 49, "goal": 49, "documentlevelprocess": 49, "particular": [49, 97, 100, 122, 126, 151, 155], "concatenatesent": 49, "ner_tagg": [49, 97], "ner_jsl_slim": 49, "ner_tag": [49, 94, 95, 96, 97, 125, 154], "ner_convert": [49, 52, 54, 65, 71, 75, 86, 92, 97, 120, 129, 149, 158], "key_phrase_extractor": 49, "settopn": 49, "setdocumentlevelprocess": 49, "setdiverg": 49, "ner_chunk_key_phras": 49, "her": [49, 74, 87, 138, 167], "becom": [49, 74], "last": [49, 74, 100, 178], "year": [49, 64, 74, 80, 83, 86, 88, 115, 144], "complain": [49, 74], "swell": [49, 74], "forearm": [49, 74], "explod": [49, 51, 52, 54, 62, 71, 74, 75, 80, 83, 87, 89, 94, 95, 96, 97, 120, 125, 131, 138, 149, 154, 161, 167, 169], "AS": [49, 52, 54, 74, 75, 87, 120, 138, 149, 167], "key_phras": 49, "documentsimilar": 49, "mmrscore": 49, "gestat": 49, "mellitu": 49, "28": [49, 183], "old": [49, 64, 80, 83, 84, 86, 94, 95, 115, 144], "7391447825527298": 49, "4366776288430703": 49, "7323921930094919": 49, "44348688715422274": 49, "13577881610104517": 49, "085800103824974": 49, "droppunctu": 49, "integ": [49, 64, 65, 115, 144, 173, 174, 181], "interv": 49, "setselectmostdiffer": 49, "constraint": 49, "paramt": 49, "sens": 49, "setconcatenatesent": 49, "averag": [49, 59, 61, 73, 74, 75], "setdroppunctu": 49, "punctuat": [49, 177, 178], "sbert_jsl_medium_uncas": 49, "download": [49, 52, 54, 59, 60, 61, 74, 75, 87, 97, 119, 120, 126, 130, 131, 135, 138, 148, 149, 155, 160, 161, 165, 167, 180, 185, 186], "load": [49, 52, 54, 59, 60, 61, 62, 64, 74, 75, 77, 84, 87, 92, 97, 115, 119, 120, 126, 129, 130, 131, 135, 136, 138, 144, 148, 149, 155, 158, 160, 161, 165, 166, 167, 169, 180, 183], "sent_small_bert_l2_768": [49, 74, 75], "remot": [49, 52, 54, 59, 60, 61, 74, 75, 87, 97, 119, 120, 126, 130, 131, 135, 138, 148, 149, 155, 160, 161, 165, 167, 180], "Will": [49, 52, 54, 59, 60, 61, 74, 75, 87, 97, 119, 120, 126, 130, 131, 135, 138, 148, 149, 155, 160, 161, 165, 167], "repositori": [49, 52, 54, 59, 60, 61, 74, 75, 87, 97, 119, 120, 126, 130, 131, 135, 138, 148, 149, 155, 160, 161, 165, 167], "bertsentenceembed": [49, 74, 75, 100, 102, 122, 151], "chunksentencesplitt": 50, "documento": 50, "header": [50, 105, 131, 161, 175, 183], "title_regex": 50, "paragraph": 50, "groupbysent": 50, "insertchunk": 50, "defaultent": 50, "setgroupbysent": 50, "assum": [50, 75, 179], "detector": [50, 177, 178, 187], "setinsertchunk": 50, "insert": 50, "setdefaultent": 50, "chunkfiltererapproach": 51, "confidencethreshold": 51, "past": 51, "histori": 51, "gastroenter": 51, "docassembl": 51, "postagg": [51, 94, 95, 125, 154], "perceptronmodel": [51, 75, 94, 95, 96, 97, 125, 154, 187], "setregexpars": [51, 85], "chunkerfilt": 51, "17": [51, 80, 83, 183], "22": [51, 52, 54, 88, 92, 119, 120, 129, 148, 149, 158], "36": 51, "42": [51, 183], "53": 51, "81": [51, 96], "110": [51, 80, 83], "now": 51, "care": 51, "118": 51, "132": 51, "chunksfilterapproach": 51, "blacklist": [51, 64, 80, 86, 115, 144], "filtervalu": 51, "entitiesconfidenceresourc": 51, "setblacklist": [51, 64, 80, 86], "setfilterent": 51, "setentitiesconfidenceresourc": 51, "chunkfilter": 51, "chunkmapperfuzzymatchingparam": 52, "enabletokenfingerprintmatch": 52, "enablecharfingerprintmatch": 52, "enablefuzzymatch": 52, "maxtokenngramfingerprint": 52, "mintokenngramfingerprint": 52, "maxtokenngramdroppingtoken": 52, "maxtokenngramdroppingcharsratio": 52, "maxtokenngramdroppingoper": 52, "maxcharngramfingerprint": 52, "mincharngramfingerprint": 52, "fuzzymatchingdist": 52, "fuzzymatchingdistancethreshold": 52, "fuzzydistancescalingmod": 52, "setenabletokenfingerprintmatch": 52, "etfm": [52, 108], "setenablecharfingerprintmatch": 52, "ecfm": 52, "setenablefuzzymatch": 52, "efm": 52, "setmaxtokenngramfingerprint": 52, "mxtnf": 52, "setmintokenngramfingerprint": 52, "mntnf": 52, "setmaxtokenngramdroppingtoken": 52, "etd": 52, "setmaxtokenngramdroppingcharsratio": 52, "setmaxtokenngramdroppingoper": 52, "setmaxcharngramfingerprint": 52, "setmincharngramfingerprint": 52, "setfuzzymatchingdist": 52, "fmd": 52, "setfuzzymatchingdistancethreshold": 52, "fmdth": 52, "setfuzzydistancescalingmod": 52, "fdsm": 52, "commonchunkmapperparam": 52, "allowmultitokenchunk": 52, "multivaluesrel": 52, "lowercas": [52, 54, 72, 89, 92, 101, 116, 119, 120, 129, 145, 148, 149, 158, 177, 178], "setallowmultitokenchunk": 52, "mc": 52, "skip": 52, "multitoken": 52, "decid": [52, 54, 92, 119, 120, 129, 148, 149, 158], "send": 52, "multi": [52, 59, 60, 61, 130, 131, 135, 160, 161, 165], "setmultivaluesrel": 52, "setrel": [52, 54, 92, 120, 129, 149, 158], "lc": [52, 92], "chunkmapperapproach": [52, 92, 119, 129, 148, 158], "mapper": [52, 54, 92, 119, 120, 129, 148, 149, 158], "jsondictionari": [52, 54, 92, 119, 120, 129, 148, 149, 158], "chunkmappermodel": [52, 92, 119, 129, 148, 158], "label_depend": [52, 53, 54, 92, 99, 119, 120, 129, 148, 149, 158], "mappinmg": [52, 54, 92, 119, 120, 129, 148, 149, 158], "go": [52, 54, 92, 119, 120, 129, 148, 149, 158, 174], "ner_posology_larg": [52, 54, 75, 92, 120, 129, 149, 158], "nerconverterintern": [52, 54, 75, 86, 92, 120, 129, 149, 158], "chunkermapperapproach": [52, 54, 92, 120, 129, 149, 158], "setdictionari": [52, 54, 62, 92, 120, 129, 149, 158], "home": [52, 54, 92, 120, 129, 149, 158], "mappings2": [52, 54, 92, 120, 129, 149, 158], "action": [52, 54, 92, 119, 120, 129, 148, 149, 158], "sampledata": [52, 54, 75, 92, 120, 129, 149, 158], "warfarina": [52, 54, 92, 119, 120, 129, 148, 149, 158], "lusa": [52, 54, 92, 119, 120, 129, 148, 149, 158], "amlodipin": [52, 54, 92, 119, 120, 129, 148, 149, 158], "mg": [52, 54, 75, 92, 119, 120, 129, 148, 149, 158], "35": [52, 54, 92, 96, 119, 120, 129, 148, 149, 158], "analges": [52, 54, 92, 119, 120, 129, 148, 149, 158], "56995": [52, 54, 92, 119, 120, 129, 148, 149, 158], "all_rel": [52, 54, 92, 119, 120, 129, 148, 149, 158], "antipyret": [52, 54, 92, 119, 120, 129, 148, 149, 158], "41": [52, 54, 92, 96, 119, 120, 129, 148, 149, 158], "9989": [52, 54, 92, 119, 120, 129, 148, 149, 158], "55": [52, 54, 92, 119, 120, 129, 148, 149, 158], "56": [52, 54, 92, 119, 120, 129, 148, 149, 158], "9123": [52, 54, 92, 119, 120, 129, 148, 149, 158], "bow": [52, 54, 71, 120, 149], "drug_chunk_embed": [52, 54, 75, 120, 149], "drug_chunk": [52, 54, 75, 120, 149], "drug_embed": [52, 54, 75, 120, 149], "cach": [52, 54, 75, 80, 100, 105, 120, 122, 149, 151, 185], "chunkmapperfilter": 53, "chunkmapp": [53, 55, 79, 118, 121, 147, 150], "successfulli": 53, "returncriteria": 53, "success": 53, "fail": [53, 72, 101, 105, 116, 145], "chunkmapperfilterermodel": 53, "setreturncriteria": 53, "return_criteria": 53, "itself": [53, 80], "docmapperapproach": [54, 120, 149], "docmappermodel": [54, 120, 149], "assertion_filter": [55, 79], "chunk_convert": [55, 79], "chunk_key_phrase_extract": [55, 79], "chunk_sentence_splitt": [55, 79], "chunker_filter": [55, 79], "chunkmapper_filter": [55, 79], "docmapp": [55, 79, 118, 121, 147, 150], "documentlogregclassifierapproach": 56, "classifi": [56, 57, 77, 95, 125, 131, 132, 154, 161, 162, 169], "labelcol": [56, 57, 100, 122, 132, 151, 162], "tol": [56, 57, 132, 162], "converg": [56, 57, 132, 162], "toler": [56, 57, 132, 162], "fitintercept": [56, 57, 132, 162], "intercept": [56, 57, 132, 162], "vectorizationmodelpath": [56, 57, 132, 162], "been": [56, 57, 132, 162], "classificationmodelpath": [56, 57, 132, 162], "could": [56, 57, 62, 71, 131, 132, 161, 162], "like": [56, 57, 62, 64, 115, 131, 132, 144, 161, 162], "stopwords_clean": [56, 57, 132, 162], "stopwordsclean": [56, 57, 132, 162], "cleantoken": [56, 57, 132, 162], "stemmer": [56, 57, 132, 162], "stem": [56, 57, 94, 95, 96, 125, 132, 154, 162], "clf_model": [56, 57, 77, 132, 162], "settol": [56, 57], "dist": [56, 57, 100], "setfitintercept": [56, 57], "setvectorizationmodelpath": [56, 57], "setclassificationmodelpath": [56, 57], "setlabel": [56, 57], "documentlogregclassifiermodel": 56, "mergechunk": [56, 57, 132, 162], "vectorizationmodel": [56, 57, 132, 162], "classificationmodel": [56, 57, 132, 162], "setmergechunk": [56, 57], "setvectorizationmodel": [56, 57], "pipelinemodel": [56, 57, 84, 131, 136, 161, 166, 168, 169, 177, 178, 194], "setclassificationmodel": [56, 57], "documentmlclassifierparam": 57, "mintokenngram": [57, 132, 162], "maxtokenngram": [57, 132, 162], "documentmlclassifierapproach": [57, 132, 162], "classificationmodelclass": [57, 132, 162], "sparkml": [57, 132, 162], "svm": [57, 132, 162], "ngram": [57, 132, 162], "min": [57, 132, 162, 175], "setclassificationmodelclass": 57, "setmintokenngram": 57, "minimum": [57, 64, 84, 115, 136, 144, 166, 173], "setmaxtokenngram": 57, "documentmlclassifiermodel": 57, "document_log_classifi": [58, 79], "document_ml_classifi": [58, 79], "medical_bert_for_sequence_classif": [58, 79], "medical_bert_for_token_classifi": [58, 79], "medical_distilbert_for_sequence_classif": [58, 79], "medicalbertforsequenceclassif": [59, 61, 97, 126, 130, 155, 160], "medicalbertfortokenclassifi": [59, 60, 61, 135, 165], "head": [59, 60, 61, 84, 130, 135, 136, 160, 165, 166], "pool": [59, 61, 130, 160], "companion": [59, 60, 61, 84, 112, 130, 131, 135, 136, 160, 161, 165, 166, 183], "huggingfac": [59, 60, 61, 130, 135, 160, 165], "maxsentencelength": [59, 60, 61, 130, 135, 160, 165], "tokenclassifi": [59, 60, 130, 135, 160, 165], "drowsi": [59, 61, 130, 160], "blur": [59, 61, 130, 160], "vision": [59, 61, 130, 160], "aspirin": [59, 61, 89, 130, 160], "coalescesent": [59, 61], "setmaxsentencelength": [59, 60, 61, 102], "getclass": [59, 60, 61, 87, 94, 95, 97], "setcoalescesent": [59, 61], "probabl": [59, 61, 174], "due": [59, 61], "limit": [59, 61, 64, 71], "almost": [59, 61], "512": [59, 61], "help": [59, 61, 64, 115, 144, 181], "loadsavedmodel": [59, 60, 61, 84, 95, 97, 125, 126, 130, 135, 136, 154, 155, 160, 165, 166], "spark_sess": [59, 60, 61, 84, 95, 97, 125, 126, 130, 135, 136, 154, 155, 160, 165, 166], "loadsavedmodelopensourc": [59, 60, 61, 130, 135, 160, 165], "bertfortokenclassifierpath": [59, 60, 61, 130, 135, 160, 165], "tfmodelpath": [59, 60, 61, 130, 135, 160, 165], "bertfortokenclassifi": [59, 60, 61, 130, 135, 160, 165], "taht": [59, 60, 61, 130, 135, 160, 165], "bert_sequence_classifier_ad": [59, 130, 160], "bert_token_classifier_ner_bionlp": [60, 135, 165], "erba": [60, 135, 165], "ir": [60, 135, 165], "myb": [60, 135, 165], "viru": [60, 135, 165], "erythroid": [60, 135, 165], "infect": [60, 135, 165], "bone": [60, 135, 165], "marrow": [60, 135, 165], "blastoderm": [60, 135, 165], "cultur": [60, 135, 165], "tissue_structur": [60, 135, 165], "medicaldistilbertforsequenceclassif": 61, "distilbert": 61, "sequenceclassifi": 61, "distilbertforsequenceclassif": 61, "destilbertfortokenclassifierpath": 61, "distilbert_sequence_classifier_ad": 61, "contextualparserapproach": 62, "setjsonpath": 62, "along": 62, "addition": [62, 84, 136, 166], "unifi": 62, "represent": [62, 74, 86], "jsonpath": 62, "prefixandsuffixmatch": 62, "prefix": [62, 71, 86, 196], "suffix": [62, 177], "hit": [62, 177, 178], "tsv": [62, 86], "optionalcontextrul": 62, "regardless": 62, "shortestcontextmatch": 62, "stop": [62, 84, 86, 180], "completecontextmatch": 62, "exact": 62, "parser": 62, "liver": 62, "metastas": 62, "pt1bn0m0": 62, "t5": 62, "primari": 62, "colon": 62, "contextualpars": [62, 80], "regex_token": [62, 187], "39": 62, "confidencevalu": 62, "00": 62, "49": [62, 183], "148": 62, "156": 62, "ct4bcn2m1": 62, "189": 62, "194": 62, "n3m1": 62, "316": 62, "323": 62, "setprefixandsuffixmatch": 62, "setoptionalcontextrul": 62, "setshortestcontextmatch": 62, "setcompletecontextmatch": 62, "boundari": 62, "contextualparsermodel": 62, "mycontextualparsermodel": 62, "contextual_pars": [63, 79], "deidentificationmodel": [64, 115, 144], "obfusc": [64, 65, 67, 115, 144, 181], "mask": [64, 115, 144], "person": [64, 71, 86, 115, 144, 181], "These": [64, 97, 115, 126, 144, 155], "setregexpatternsdictionari": [64, 115, 144], "line": [64, 86, 115, 144, 183, 187], "regexpatternsdictionari": [64, 115, 144], "ictionari": [64, 115, 144], "protect": [64, 115, 144], "anonim": [64, 115, 144], "obfuscated": [64, 115, 144], "dateformat": [64, 115, 144, 181], "obfuscatereffil": [64, 67, 115, 144, 181], "reffileformat": [64, 67, 115, 144], "refsep": [64, 67, 115, 144], "sep": [64, 115, 144, 183], "reffil": [64, 67, 115, 144], "datetag": [64, 115, 144], "dai": [64, 65, 88, 115, 144, 181], "displac": [64, 115, 144, 181], "60": [64, 115, 144, 181], "datetoyear": [64, 115, 144], "minyear": [64, 115, 144], "pars": [64, 65, 115, 144, 183], "consistentobfusc": [64, 115, 144], "levenshtein": [64, 71, 115, 144], "distanc": [64, 71, 75, 94, 95, 96, 100, 115, 122, 144, 151], "sameentitythreshold": [64, 115, 144], "consid": [64, 71, 75, 95, 96, 100, 115, 144, 196], "appear": [64, 74, 115, 144], "9": [64, 94, 115, 144, 183], "obfuscaterefsourc": [64, 115, 144, 181], "doesnt": [64, 115, 144], "tha": [64, 115, 144], "obfuscatorreffil": [64, 115, 144], "faker": [64, 65, 115, 144], "randomli": [64, 115, 144, 177, 178, 181], "regexoverrid": [64, 115, 144], "priorit": [64, 80, 115, 144], "With": [64, 115, 144], "repli": [64, 115, 144], "ouptut": [64, 115, 144], "ignoreregex": [64, 115, 144], "israndomdatedisplac": [64, 115, 144], "deidentificationparam": [64, 115, 144], "mappingscolumn": [64, 115, 144], "fake": [64, 115, 144], "returnentitymap": [64, 115, 144], "ssn": [64, 115, 144], "passport": [64, 115, 144], "dln": [64, 115, 144], "npi": [64, 115, 144], "c_card": [64, 115, 144], "iban": [64, 115, 144], "dea": [64, 115, 144], "maskingpolici": [64, 115, 144], "polici": [64, 89, 115, 144], "same_length_char": [64, 115, 144], "compos": [64, 115, 144], "asterisk": [64, 115, 144], "surround": [64, 74, 115, 144], "squar": [64, 115, 144], "bracket": [64, 115, 144], "total": [64, 115, 144, 173], "smith": [64, 115, 144], "char": [64, 84, 115, 136, 144, 166], "jo": [64, 115, 144], "fixed_length_char": [64, 115, 144], "fix": [64, 115, 144, 173, 177, 179], "setuseabbrevi": [64, 115, 144], "clinical_sensitive_ent": [64, 115, 144], "ner_deid_enrich": [64, 115, 144], "ner_con": [64, 115, 144], "dei": [64, 115, 144], "dic_regex_patterns_main_categori": [64, 115, 144], "setobfuscatereffil": [64, 67, 115, 144], "obfuscate_fixed_ent": [64, 115, 144], "setreffileformat": [64, 67, 115, 144], "setrefsep": [64, 67, 115, 144], "setmod": [64, 65, 115, 144], "setdateformat": [64, 115, 144], "mm": [64, 88, 105, 115, 144, 181, 183], "dd": [64, 88, 105, 115, 144, 181], "yy": [64, 115, 144], "yyyi": [64, 88, 105, 115, 144, 181], "setobfuscated": [64, 65, 115, 144], "setdatetag": [64, 65, 115, 144], "setdai": [64, 115, 144], "setobfuscaterefsourc": [64, 65, 115, 144], "7194334": [64, 115, 144], "93": [64, 115, 144], "oliveira": [64, 115, 144], "record": [64, 115, 144, 181], "2079": [64, 115, 144], "09": [64, 115, 144], "01010101": [64, 115, 144], "18": [64, 115, 144], "dr": [64, 115, 144], "gregori": [64, 115, 144], "hous": [64, 115, 144], "14": [64, 65, 115, 144], "fixedmasklength": [64, 115, 144], "zipcodetag": 64, "useshifdai": 64, "region": 64, "unnormalizeddatemod": 64, "agerang": 64, "outputasdocu": 64, "getblacklist": 64, "setlanguag": [64, 65], "english": [64, 177, 178], "spanish": 64, "wher": 64, "m": [64, 131, 161, 181], "setmaskingpolici": 64, "setfixedmasklength": 64, "f": [64, 67, 105, 111], "setzipcodetag": 64, "zip": [64, 181], "zipcod": 64, "auxiliari": [64, 100, 122, 151], "resolv": [64, 99, 100, 122, 151], "setdatetoyear": 64, "setminyear": 64, "setconsistentobfusc": 64, "setsameentitythreshold": 64, "setregexoverrid": 64, "setignoreregex": 64, "setse": [64, 65, 67], "setisrandomdatedisplac": 64, "setmappingscolumn": 64, "setreturnentitymap": 64, "setuseshifdai": [64, 65], "shift": [64, 65], "setregion": 64, "countri": [64, 181], "ountri": 64, "coud": 64, "setunnormalizeddatemod": 64, "setagerang": 64, "preserv": [64, 86], "setoutputasdocu": 64, "join": [64, 173, 177], "regexent": [64, 115, 144], "keep": [64, 77, 100, 115, 122, 144, 151, 173, 178], "regexpatterndictionari": [64, 115, 144], "deidentify_larg": [64, 115, 144], "getregexent": 64, "documenthashcod": 65, "deidentif": [65, 66, 79, 117, 118, 146, 147, 181], "purpos": [65, 77, 177], "accord": [65, 80, 177], "hash": 65, "deidentifi": 65, "accordingli": 65, "patientidcolumn": 65, "dateshiftcolumn": 65, "newdateshift": 65, "rangedai": 65, "rang": 65, "patientid": 65, "a001": 65, "a003": 65, "chri": 65, "brown": [65, 194, 195], "discharg": 65, "02": [65, 88], "2022": 65, "04": [65, 88], "03": [65, 88], "moor": 65, "dateshift": 65, "my_input_df": 65, "documenthash": 65, "setdateshiftcolumn": 65, "clinical_n": 65, "ner_deid_subentity_aug": 65, "de_identif": 65, "deid_text": 65, "pipeline_col": 65, "empty_data": 65, "pipeline_col_model": 65, "ellend": 65, "manual": [65, 169], "errol": 65, "bang": 65, "ariel": 65, "null": 65, "jean": 65, "cotton": 65, "2023": [65, 88], "setpatientidcolumn": 65, "predefin": 65, "setnewdateshift": 65, "setrangedai": 65, "doccument_hashcod": [66, 79], "name_obfusc": [66, 79], "reidentif": [66, 79], "namechunkobfuscatorapproach": 67, "py": [67, 68, 69, 106, 107], "estim": [67, 104, 106], "scala": [67, 68, 69, 106, 107], "namechunkobfusc": 67, "inherit": [67, 68, 69, 107], "mix": [67, 68, 69, 107], "ins": [67, 68, 69, 107], "uid": [67, 68, 69, 107, 168], "redeideintif": 68, "usereplac": 69, "setusereplac": 69, "disabl": [69, 183], "getusereplac": 69, "ner_disambigu": [70, 79], "nerdisambigu": 71, "interest": 71, "compani": [71, 181], "kb": 71, "ne": 71, "mention": 71, "surfac": 71, "instanti": [71, 84, 131, 136, 161, 166], "embeddingtypeparam": 71, "numfirstchar": 71, "tokensearch": 71, "narrowwithapproximatematch": 71, "narrow": 71, "levenstein": 71, "levenshteindistancethresholdparam": 71, "nearmatchinggapparam": 71, "trim": 71, "len": 71, "nearmatchinggap": 71, "predictionslimit": 71, "amount": [71, 174], "s3knowledgebasenam": 71, "s3": [71, 180], "contest": 71, "donald": 71, "trump": 71, "who": 71, "later": 71, "defeat": 71, "christina": 71, "aguilera": 71, "sentenceembed": [71, 131, 161], "nerdlmodel": [71, 74, 84, 136, 166], "sets3knowledgebasenam": 71, "setnumfirstchar": 71, "nlppipelin": 71, "wikipedia": 71, "curid": 71, "4848272": 71, "31698421": 71, "55907961": 71, "144171": 71, "6636454": 71, "setembeddingtyp": 71, "settokensearch": 71, "setnarrowwithapproximatematch": 71, "setlevenshteindistancethresholdparam": 71, "setnearmatchinggapparam": 71, "setpredictionlimit": 71, "nerdisambiguatormodel": 71, "disambiguator_p": 71, "doc2chunkintern": 72, "chunkcol": [72, 101, 116, 145], "within": [72, 101, 116, 145], "stringtyp": [72, 88, 101, 116, 145], "arraytyp": [72, 101, 116, 145], "setisarrai": [72, 101, 116, 145], "startcolbytokenindex": [72, 101, 116, 145], "prepend": [72, 101, 116, 145], "whitespac": [72, 101, 116, 145, 173, 177], "isarrai": [72, 101, 116, 145], "failonmiss": [72, 101, 116, 145], "job": [72, 101, 116, 145], "chunk2doc": [72, 101, 102, 116, 145], "chunkassembl": [72, 101, 116, 145], "open": [72, 101, 116, 145], "advanc": [72, 101, 116, 145], "natur": [72, 97, 101, 116, 126, 145, 155], "annotatortyp": [72, 101, 116, 145], "miss": 72, "averageembed": [73, 74], "embded": 73, "bertsentencechunkembed": 74, "account": 74, "numer": [74, 105, 178], "chunkweight": 74, "prerequisit": [74, 84, 136, 166], "medicalnerdlmodel": [74, 84, 136, 166], "sbluebert_base_uncased_mli": 74, "sentence_chunk_embed": 74, "31995273": 74, "04710883": 74, "28973156": 74, "1294758": 74, "12481072": 74, "027161136": 74, "24613449": 74, "0949309": 74, "1825444": 74, "2252143": 74, "45139068": 74, "12400375": 74, "0075617577": 74, "90806055": 74, "12871636": 74, "setchunkweight": 74, "shortcut": [74, 87, 138, 167], "entitychunkembed": 75, "targetent": [75, 141], "entityweight": [75, 141], "maxsyntacticdist": [75, 94, 96], "syntact": [75, 94, 95, 96, 173], "pos_clin": [75, 94, 95, 96, 97, 125, 154], "dependency_pars": [75, 96, 97], "dependencyparsermodel": [75, 94, 95, 96, 97, 125, 154], "dependency_conllu": [75, 94, 95, 96, 97, 125, 154], "sbiobert_base_cased_mli": 75, "setmaxsyntacticdist": [75, 94, 95, 96, 97, 125, 154], "settargetent": 75, "setentityweight": 75, "parient": 75, "metformin": 75, "125": 75, "coumadin": 75, "pill": 75, "paracetamol": [75, 97], "sparkcontextfortest": 75, "267413": 75, "07614058": 75, "5620966": 75, "83838946": 75, "8911504": 75, "22319649": 75, "07094894": 75, "6885556": 75, "79176235": 75, "82672405": 75, "10939768": 75, "29242": 75, "3574444": 75, "3981813": 75, "79609615": 75, "weigh": 75, "notat": 75, "target_ent": 75, "related_ent": 75, "insensit": 75, "related1": 75, "related2": 75, "average_embed": [76, 79], "bert_sentence_embed": [76, 79], "entity_chunk_embed": [76, 79], "feature_vector": [77, 105, 191], "featuresassembl": [77, 105], "labelcolumn": [77, 84, 104, 131, 136, 161, 166], "epochsn": 77, "proce": [77, 177], "dropou": 77, "lay": 77, "validaiton": 77, "fiximbal": 77, "whenther": 77, "balanc": 77, "trainig": 77, "featuresc": 77, "minmax": 77, "feature_1": 77, "feature_2": 77, "feature_n": 77, "graph_fil": [77, 94], "label_column": 77, "drouptup": 77, "validation_split": 77, "mode_fil": 77, "fix_imbal": 77, "feature_sc": 77, "output_logs_path": 77, "deid": [79, 118, 127, 140, 147, 156], "disambigu": [79, 140, 191], "chunk_merg": [79, 81], "iob_tagg": [79, 82], "medical_n": [79, 82], "ner_converter_intern": [79, 82], "zero_shot_n": [79, 82, 134, 137, 163, 164], "date_norm": [79, 90], "drug_norm": [79, 90], "qa": [79, 140], "qa_ner_gener": [79, 91, 127, 128, 156, 157], "re": [79, 140, 183], "relation_extraction_dl": [79, 93, 123, 124, 152, 153], "relation_ner_chunk_filt": [79, 93], "zero_shot_relation_extract": [79, 93, 123, 124, 152, 153], "resolut": [79, 101, 118, 127, 140, 147, 156], "resolver_merg": [79, 98], "sentence_entity_resolv": [79, 98, 118, 121, 147, 150], "annotation_merg": [79, 140], "doc2_chunk_intern": [79, 140], "resolution2_chunk": [79, 140], "router": [79, 140], "source_tracking_metadata_param": [79, 140], "tf_graph_build": [79, 140], "commonchunkmergeparam": 80, "mergeoverlap": 80, "setmergeoverlap": 80, "overlap": 80, "mergepriorizationparam": 80, "orderingfeatur": 80, "selectionstrategi": 80, "defaultconfid": 80, "chunkpreced": 80, "chunkprecedencevaluepriorit": 80, "setorderingfeatur": 80, "_orderingfeatur": 80, "chunkbegin": 80, "chunklength": 80, "chunkconfid": 80, "setselectionstrategi": 80, "_selectionstrategi": 80, "diverselong": 80, "setdefaultconfid": 80, "_defaultconfid": 80, "setchunkpreced": 80, "_chunkpreced": 80, "comma": [80, 86], "drive": 80, "togeth": 80, "setchunkprecedencevaluepriorit": 80, "_chunkprecedencevaluepriorit": 80, "desir": [80, 177], "chunkmergeapproach": 80, "merger": 80, "certain": [80, 85], "decis": 80, "highest": [80, 84], "kept": 80, "setreplacedictresourc": [80, 86], "falsepositivesresourc": 80, "posit": [80, 86], "replacedictresourc": [80, 86], "preced": 80, "proccess": [80, 86], "63": [80, 83, 86], "man": [80, 83, 86], "hospit": [80, 83, 86, 181], "emb": [80, 83], "ner_jsl": [80, 83, 86], "jsl_ner": [80, 86], "jsl_ner_chunk": 80, "ner_bionlp": 80, "bionlp_ner": 80, "bionlp_ner_chunk": 80, "merged_chunk": 80, "19": [80, 83], "72": [80, 83], "98": [80, 83], "107": [80, 83], "cellul": [80, 83], "diagnosi": [80, 83], "119": [80, 83], "pneumonia": [80, 83], "setfalsepositivesresourc": 80, "chunkmergemodel": 80, "chunkmergeraproach": 80, "falseposit": 80, "replacedict": 80, "iobtagg": 83, "iob": [83, 84, 86, 136, 166, 169, 177, 178, 183, 196], "bioe": 83, "iobtaggermodel": 83, "setschem": 83, "bilstm": [84, 136, 166], "art": [84, 131, 136, 161, 166], "2003": [84, 136, 166], "chosen": [84, 136, 166, 178], "bertembed": [84, 100, 122, 136, 151, 166], "usag": [84, 86, 131, 136, 161, 166], "minepoch": [84, 136, 166], "maxepoch": [84, 131, 136, 161, 166], "randomse": [84, 131, 136, 161, 166], "decai": [84, 136, 166], "coeffici": [84, 131, 136, 161, 166], "rage": [84, 136, 166], "005": [84, 131, 136, 161, 166], "usecontrib": [84, 136, 166], "Not": [84, 136, 166], "might": [84, 136, 166], "slightli": [84, 136, 166], "includeallconfidencescor": [84, 136, 166], "stdout": [84, 131, 136, 161, 166], "enablememoryoptim": [84, 136, 166], "slow": [84, 136, 166], "down": [84, 136, 166], "nerdlapproach": [84, 104, 136, 166, 174], "trainingdata": [84, 136, 166], "readdataset": [84, 136, 166, 183], "conll2003": [84, 136, 166], "eng": [84, 136, 166, 183], "logprefix": 84, "usebestmodel": 84, "pretrainedmodelpath": [84, 94, 100, 122, 151], "overrideexistingtag": 84, "tagsmap": 84, "earlystoppingcriterion": 84, "earlystoppingpati": 84, "ff": 84, "setusecontrib": 84, "setlr": [84, 131, 161], "setpo": 84, "setincludeallconfidencescor": 84, "setusebestmodel": 84, "monitor": 84, "macro": [84, 184], "f1": [84, 179, 184, 193, 196], "precend": 84, "across": 84, "setlogprefix": 84, "setpretrainedmodelpath": [84, 94, 100], "point": [84, 94, 100, 122, 151], "setoverrideexistingtag": 84, "overrid": [84, 94, 100, 122, 151], "settagsmap": 84, "setearlystoppingcriterion": 84, "criterion": 84, "earli": 84, "setearlystoppingpati": 84, "patienc": 84, "termin": 84, "wordembed": [84, 136, 166], "glove_100d": [84, 136, 166], "inferencebatchs": [84, 136, 166], "labelcas": [84, 136, 166], "upper": [84, 94, 95, 96, 125, 136, 154, 166, 177], "offici": [84, 136, 166], "ekeu": [84, 136, 166], "baghdad": [84, 136, 166], "trainingclassdistribut": 84, "setinferencebatchs": 84, "setlabelcas": 84, "gettrainingclassdistribut": 84, "ner_model_path": [84, 136, 166], "nerchunk": [85, 94, 95, 125, 154], "neighbor": 85, "dt": 85, "jj": 85, "ner_radiologi": 85, "imagingfind": 85, "bodypart": 85, "regexpars": 85, "commonnerconverterinternalparam": 86, "preserveposit": 86, "greedymod": 86, "contigu": 86, "ignorestopword": 86, "larger": 86, "black": [86, 175, 194, 195], "setpreserveposit": 86, "preserve_posit": 86, "setgreedymod": 86, "greedy_mod": 86, "setthreshold": [86, 100, 122, 151], "setignorestopword": 86, "stopword": 86, "iob2": [86, 177, 178], "friendli": 86, "annotatorapproachintern": [86, 106], "associ": 86, "replacelabel": 86, "substitut": 86, "binari": [86, 97, 126, 155], "replaced_ner_chunk": 86, "setreplacelabel": 86, "loc": [86, 196], "drug_brandnam": 86, "drug_frequ": 86, "drug_dosag": 86, "drug_strength": 86, "nerconverterinternalmodel": 86, "zeroshotnermodel": [87, 138, 167], "shot": [87, 97, 126, 138, 155, 167], "robertaforquestionansw": [87, 138, 167], "entitydefinit": [87, 138, 167], "question": [87, 138, 167], "citi": [87, 102, 138, 167, 181], "town": [87, 138, 167], "predictionthreshold": [87, 94, 95, 97, 125, 126, 138, 154, 155, 167], "01f": [87, 138, 167], "ignoreent": [87, 138, 167], "setentitydefinit": [87, 138, 167], "clara": [87, 138, 167], "live": [87, 138, 167, 181], "york": [87, 138, 167], "hellen": [87, 138, 167], "pari": [87, 138, 167], "5328949": [87, 138, 167], "9360068": [87, 138, 167], "83294415": [87, 138, 167], "45366877": [87, 138, 167], "setpredictionthreshold": [87, 94, 95, 125, 154], "zero_shot_ner_roberta": [87, 138, 167], "roberta_base_qa_squad2": [87, 138, 167], "datenorm": 88, "els": 88, "anchordateyear": 88, "anchor": 88, "tomorrow": 88, "2021": 88, "anchordatemonth": 88, "month": 88, "januari": 88, "anchordatedai": 88, "08": 88, "12mar2021": 88, "jan": 88, "3april": 88, "2020": 88, "mondai": [88, 131, 161], "todai": 88, "week": 88, "original_d": 88, "date_chunk": 88, "setanchordateyear": 88, "2000": 88, "setanchordatemonth": 88, "setanchordatedai": 88, "normalized_d": 88, "outputdateformat": 88, "defaultreplacementdai": 88, "defaultreplacementmonth": 88, "defaultreplacementyear": 88, "setoutputdateformat": 88, "setdefaultreplacementdai": 88, "setdefaultreplacementmonth": 88, "06": 88, "setdefaultreplacementyear": 88, "drugnorm": 89, "raw": 89, "scrape": 89, "web": 89, "xml": 89, "dirti": 89, "sodium": 89, "chlorid": 89, "potassium": 89, "13bag": 89, "interferon": 89, "alfa": 89, "2b": 89, "million": 89, "injec": 89, "meq": 89, "oral": 89, "sol": 89, "document_norm": 89, "trainingpipelin": 89, "normalized_text": [89, 100, 122, 151], "bag": 89, "10000000": 89, "unt": 89, "inject": 89, "solut": 89, "setpolici": 89, "nerquestiongener": 92, "questionpronoun": 92, "strategytyp": 92, "questionmark": 92, "entities1": 92, "entities2": 92, "setquestionmark": 92, "setstrategytyp": 92, "setentities1": 92, "e1": 92, "setentities2": 92, "e2": 92, "setquestionpronoun": 92, "relationextractionmodel": [94, 95, 125, 154], "fromentitybegincol": 94, "fromentityendcol": 94, "fromentitylabelcol": 94, "toentitybegincol": 94, "toentityendcol": 94, "toentitylabelcol": 94, "relationdirectioncol": 94, "relatio": 94, "embedd": [94, 95, 125, 154], "postag": [94, 95, 125, 154], "ner_events_clin": [94, 95, 125, 154], "depencypars": [94, 95, 125, 154], "relations_t": 94, "target_rel": 94, "05": 94, "from_begin": 94, "from_end": 94, "from_label": 94, "to_begin": 94, "to_end": 94, "to_label": 94, "traindata": [94, 95, 125, 154], "customlabel": [94, 95, 141], "overrideexistinglabel": 94, "begin_col": 94, "label_col": [94, 112], "setcustomlabel": [94, 95], "setrelationdirectioncol": 94, "set\u043everrideexistinglabel": 94, "relationpair": [94, 95, 96, 125, 154], "biomark": 94, "relativedai": 94, "relationpairscasesensit": [94, 96], "external_body_part_or_region": [94, 95, 96, 125, 154], "internal_organ_or_compon": [94, 95, 96, 125, 154], "re_model": [94, 95, 97, 125, 154], "re_bodypart_direct": 94, "setrelationpair": [94, 95, 96, 97, 125, 154], "mri": [94, 95, 96, 97, 125, 154], "demonstr": [94, 95, 96, 125, 154], "infarct": [94, 95, 96, 125, 154], "brain": [94, 95, 96, 125, 154], "cerebellum": [94, 95, 96, 125, 154], "basil": [94, 95, 96, 125, 154], "ganglia": [94, 95, 96, 125, 154], "chunk1": [94, 95, 125, 154, 183], "chunk2": [94, 95, 125, 154, 183], "setrelationpairscasesensit": [94, 96], "posologyremodel": 94, "genericremodel": 94, "relationextractiondlmodel": [95, 96, 125, 154], "contrast": [95, 125, 154], "re_ner_chunk_filt": [95, 96, 97, 125, 154], "renerchunksfilt": [95, 96, 97, 125, 126, 154, 155], "re_ner_chunk": [95, 96, 97, 125, 154], "redl_bodypart_direction_biobert": [95, 125, 154], "further": 96, "especi": 96, "doclevelrel": 96, "words_embedd": [96, 97], "pos_tagg": [96, 97], "clinical_ner_tagg": 96, "jsl_ner_wip_greedy_clin": 96, "trained_pipelin": 96, "cre": 96, "re_chunk": 96, "paired_to": 96, "59": 96, "setdoclevelrel": [96, 97], "zeroshotrelationextractionmodel": [97, 126, 155], "util": [97, 126, 140, 155, 171, 172, 176, 181], "nli": [97, 126, 155], "statement": [97, 126, 155], "regard": [97, 126, 155], "relationship": [97, 126, 155], "append": [97, 126, 155], "relationalcategori": [97, 126, 141, 155], "hypothesi": [97, 126, 155], "templat": [97, 126, 155], "cure": [97, 126, 155], "problem": [97, 126, 155, 183], "5f": [97, 126, 155], "multilabel": [97, 126, 155], "categor": [97, 126, 155], "spark_sbert_zero_shot": 97, "setrelationalcategori": 97, "reveal": [97, 126, 155], "setmultilabel": 97, "allevi": 97, "headach": 97, "sick": 97, "cancer": 97, "9760039": [97, 126, 155], "98819494": [97, 126, 155], "9929625": [97, 126, 155], "zero_shot_r": 97, "resolvermerg": 99, "enit": 99, "sentenceresolverparam": 100, "interfac": 100, "distancefunct": 100, "wmd": 100, "euclidean": 100, "cosin": [100, 122, 151], "neighbour": 100, "knn": 100, "queri": 100, "confidencefunct": 100, "invers": 100, "missasempti": 100, "unmatch": 100, "setdistancefunct": [100, 122, 151], "setneighbour": [100, 122, 151], "thre": 100, "setconfidencefunct": 100, "setmissasempti": 100, "sentenceentityresolverapproach": [100, 122, 151], "thiu": [100, 122, 151], "sentenceentityresolvermodel": [100, 122, 151], "ontologi": [100, 122, 151], "curat": [100, 122, 151], "rxnorm": [100, 122, 151], "snome": [100, 122, 151], "normalizedcol": [100, 122, 151], "overrideexistingcod": [100, 122, 151], "returncosinedist": [100, 122, 151], "aux_label_col": [100, 122, 151], "useauxlabel": [100, 122, 151], "auxlabel": [100, 122, 151], "dropcodeslist": [100, 122, 151], "omit": [100, 122, 151], "sent_biobert_pubmed_base_cas": [100, 122, 151], "snomedtrainingpipelin": [100, 122, 151], "snomedtrainingmodel": [100, 122, 151], "snomeddata": [100, 122, 151], "bertextractor": [100, 122, 151], "bert_embed": [100, 122, 151], "setnormalizedcol": [100, 122, 151], "snomed_cod": [100, 122, 151], "euclidian": [100, 122, 151], "snomedmodel": [100, 122, 151], "setuseauxlabel": 100, "setauxlabelcol": 100, "setextractcosinedist": 100, "setoverrideexistingcod": 100, "setdropcodeslist": 100, "searchtre": [100, 122, 151], "tree": [100, 122, 151], "setsearchtre": 100, "resolution2chunk": 101, "filterfieldsel": 102, "metadatafield": 102, "rules2": 102, "setstrategi": 102, "match_al": 102, "doc_chunk": 102, "sent_small_bert_l2_128": 102, "router_name_embed": 102, "setmetadatafield": 102, "setfilterfieldsel": 102, "names_embed": 102, "router_city_embed": 102, "cities_embed": 102, "router_nam": 102, "names_chunk": 102, "sourcetrackingmetadataparam": 103, "includeoutputcolumn": 103, "outputcolumnkei": 103, "includestandardfield": 103, "standardfieldkei": 103, "allpossiblefieldstostandard": 103, "setincludeoutputcolumn": 103, "setoutputcolumnkei": 103, "setincludestandardfield": 103, "setstandardfieldkei": 103, "setallpossiblefieldstostandard": 103, "standard": 103, "prioriti": 103, "tfgraphbuildermodel": 104, "modelnam": 104, "hiddenunitsnumb": 104, "hiddenlay": 104, "maxsequencelength": 104, "hiddenact": 104, "hiddenactl2": 104, "hiddenweightsl2": 104, "batchnorm": 104, "islicens": 104, "userelationdirect": 104, "sethiddenact": 104, "gethiddenact": 104, "sethiddenactl2": 104, "l2": 104, "gethiddenactl2": 104, "sethiddenweightsl2": 104, "gethiddenweightsl2": 104, "setbatchnorm": 104, "getbatchnorm": 104, "setislicens": 104, "medicalneraprroach": 104, "getislicens": 104, "sethiddenlay": 104, "gethiddenlay": 104, "hiudden": 104, "setmaxsequencelength": 104, "getmaxsequencelength": 104, "sethiddenunitsnumb": 104, "gethiddenunitsnumb": 104, "setuserelationdirect": 104, "getuserelationdirect": 104, "setmodelnam": 104, "getmodelnam": 104, "getlabelcolumn": 104, "getinputcol": 104, "getgraphfold": 104, "greaph": 104, "getgraphfil": 104, "anyth": 105, "cast": 105, "tri": 105, "timestampformat": 105, "hh": 105, "ss": 105, "zz": 105, "test_jsl": 105, "relfeatur": 105, "withcolumn": 105, "array_column": 105, "words_in_ent1": [105, 183], "words_in_ent2": [105, 183], "features_asm1": 105, "words_between": [105, 183], "features_t": 105, "__data": 105, "annotatormodelintern": 107, "annotatorpropertiesintern": 108, "compon": 108, "attach": 108, "setforceinputtypevalid": 108, "inputcolsvalid": 108, "annotator_approach_intern": [109, 140], "annotator_model_intern": [109, 140], "annotator_properties_intern": [109, 140], "verifi": 110, "findvers": 110, "privat": [110, 180], "showvers": 110, "print": [110, 177, 180, 184, 193, 196], "customtransform": 111, "anoth": 111, "norvigspellevalu": 112, "test_fil": 112, "ground_truth_fil": 112, "computeaccuracyannot": 112, "train_fil": 112, "computeaccuracymodel": 112, "symspellevalu": 112, "nerdlevalu": 112, "tag_level": 112, "full_chunk": 112, "computemetricsfromdf": 112, "prediction_col": 112, "drop_o": 112, "case_sensit": [112, 183], "nercrfevalu": 112, "posevalu": 112, "olumn": [113, 142], "financedocumenthashcod": 116, "document_hashcod": [117, 118, 146, 147], "chunk_classif": [127, 140, 156], "seq_gener": [127, 140, 156], "sequence_classif": [127, 140, 156], "finance_bert_for_sequence_classif": [127, 133], "finance_classifier_dl": [127, 133], "finance_document_ml_classifi": [127, 133], "token_classif": [127, 140, 156], "financenerquestiongener": 129, "sequence_gener": [129, 158], "financebertforsequenceclassif": 130, "financebertfortokenclassif": [130, 135], "financeclassifierdlapproach": 131, "classifierdl": [131, 161], "univers": [131, 161], "dnn": [131, 161], "up": [131, 161, 178], "classifierdlmodel": [131, 161], "multiclassifierdlapproach": [131, 161], "sentimentdlapproach": [131, 161], "item": [131, 161, 175, 187], "doubl": [131, 161], "universalsentenceencod": [131, 161], "movi": [131, 161], "wach": [131, 161], "ever": [131, 161], "opinion": [131, 161], "win": [131, 161], "award": [131, 161], "terribl": [131, 161], "bad": [131, 161], "realli": [131, 161], "trane": [131, 161], "smallcorpu": [131, 161], "useembed": [131, 161], "docclassifi": [131, 161], "classifierdlapproach": [131, 161], "5e": [131, 161], "financeclassifierdlmodel": [131, 132], "financeclassifierdl": 131, "classifierdl_use_trec6": [131, 161], "trec": [131, 161], "multiclassifierdlmodel": [131, 161], "sentimentdlmodel": [131, 161], "sarcasmdl": [131, 161], "classifierdl_use_sarcasm": [131, 161], "sarcasm": [131, 161], "readi": [131, 161], "love": [131, 161], "wake": [131, 161], "am": [131, 161], "arrays_zip": [131, 161], "out": [131, 161], "financedocumentmlclassifierapproach": 132, "financedocumentmlclassifiermodel": [132, 162], "finance_bert_for_token_classifi": [134, 137], "finance_n": [134, 137], "financebertfortokenclassifi": 135, "bert_base_token_classifier_conll03": [135, 165], "financenerapproach": 136, "financenermodel": 136, "profil": 139, "code_arrai": 139, "sex": 139, "elig": 139, "cna": 139, "orec": 139, "medicaid": 139, "profilev24y17": 139, "profilev24y18": 139, "profilev24y19": 139, "profilev24y20": 139, "profilev24y21": 139, "profilev24y22": 139, "profilev23y18": 139, "profilev23y19": 139, "profilev23": 139, "profilev22y17": 139, "profilev22y18": 139, "profilev22y19": 139, "profilev22y20": 139, "profilev22y21": 139, "profilev22y22": 139, "profilev22": 139, "nlp_test": 140, "noisy_label": [140, 171], "robust": [140, 171], "alab_util": [140, 190], "conll_pars": [140, 190], "licensed_annotator_typ": [140, 190], "log_pars": [140, 190], "ner_util": [140, 190], "ocr_nlp_processor": [140, 190], "ocr_util": [140, 190], "training_log_parser_util": [140, 190], "custom_transform": 140, "modeltrac": 140, "structured_deidentif": 140, "text_to_documents_column": 140, "training_log_pars": 140, "updatemodel": 140, "transformer_seq_classif": 140, "version_regex": 140, "size_regex": 140, "m1": 140, "public": 140, "get_credenti": 140, "pub_vers": 140, "library_set": 140, "legaldocumenthashcod": 145, "legal_bert_for_sequence_classif": [156, 159], "legal_classifier_dl": [156, 159], "legal_document_ml_classifi": [156, 159], "legalnerquestiongener": 158, "legalbertforsequenceclassif": 160, "legalbertfortokenclassif": [160, 165], "legalclassifierdlapproach": 161, "legalclassifierdlmodel": [161, 162], "legalclassifierdl": 161, "legaldocumentmlclassifierapproach": 162, "legaldocumentmlclassifiermodel": 162, "legal_bert_for_token_classifi": [163, 164], "legal_n": [163, 164], "legalbertfortokenclassifi": 165, "legalnerapproach": 166, "legalnermodel": 166, "adduidcol": 168, "timestamp": 168, "init_medical_gender_classifi": 169, "rulebasedclassifi": 169, "test_gender_bia": 169, "ner_pipelin": [169, 183, 194], "test_conl": 169, "classifier_pipelin": 169, "training_conl": 169, "log_path": [169, 174, 177, 178, 184, 193], "gender_bias_result": 169, "explode_sent": 169, "thu": 169, "pass": [169, 173, 177], "doc_amount": 169, "training_set_gender_distribut": 169, "test_set_gender_distribut": 169, "test_set_metr": 169, "bias_test": [170, 171], "noisy_label_fix": [171, 172], "noisy_label_test": [171, 172], "robustness_fix": [171, 176], "robustness_test": [171, 176], "conll_read": [173, 177], "conll_path": [173, 174, 177, 178], "conll_writ": 173, "chunk_tag": [173, 196], "save_path": 173, "docs_indx": 173, "sentences_list": 173, "tags_list": 173, "labels_list": 173, "track": 173, "written": 173, "update_with_model_predict": 173, "fix_df": 173, "test_label_error": [173, 174], "sent_indx": 173, "token_indx": 173, "apply_label_fix": 173, "label_fix": 173, "sent_index": 173, "add_flag_to_conl": 173, "flag_index": 173, "speech": 173, "interactivefix": 173, "result_df": 173, "default_strategi": 173, "page_s": 173, "ui": 173, "jupyt": 173, "notebook": 173, "find_label_error": 173, "displai": [173, 175], "create_grid": 173, "fill_grid": 173, "ipywidget": 173, "gridspeclayout": 173, "get_head": 173, "get_central_grid": 173, "get_foot": 173, "get_page_control_button": 173, "next_pag": 173, "prev_pag": 173, "adjust_page_s": 173, "num_sample_drop_down": 173, "get_page_numb": 173, "empty_grid": 173, "get_class": 173, "fix_label": 173, "apply_fix": 173, "fix_al": 173, "get_drop_down_titl": 173, "get_cell_el": 173, "css_class": 173, "get_sent": 173, "get_default_indx": 173, "indx": 173, "get_drop_down": 173, "get_title_html": 173, "calculate_label_error_scor": 174, "numpi": 174, "pred_prob": 174, "get_label_quality_scor": 174, "seri": [174, 177, 178], "np": 174, "class": [174, 197], "high": 174, "get_unique_ent": 174, "training_pipelin": 174, "noisy_label_test_result": 174, "cross": 174, "fold": 174, "setincludeconfidencescor": 174, "higher": 174, "noisi": [174, 177, 178], "stylesheet": 175, "multilin": 175, "background": 175, "color": [175, 194, 195], "0098da": 175, "align": [175, 177], "center": 175, "footer": 175, "ffffff": 175, "ignore_margin": 175, "row_odd": 175, "262626": 175, "row_even": 175, "eaeaeb": 175, "page_button": 175, "repeat": 175, "border": [175, 187], "cursor": 175, "pointer": 175, "overflow": 175, "outlin": 175, "table_titl": 175, "font": 175, "2em": 175, "500": 175, "title_text": 175, "70px": 175, "inlin": 175, "flex": [175, 177, 178], "dropdown": 175, "1px": 175, "solid": 175, "radiu": 175, "4px": 175, "aeaeae": 175, "kind": [177, 178], "perturb": [177, 178], "create_datafram": 177, "pos_sync_tag": 177, "synthet": 177, "seper": 177, "filter_by_entity_typ": 177, "ent_typ": 177, "get_sampl": 177, "sample_data": 177, "exactli": 177, "create_terminologi": [177, 178], "terminologi": [177, 178], "modify_capitalization_upp": [177, 178], "uppercas": [177, 178], "augment": [177, 179], "modify_capitalization_low": [177, 178], "modify_capitalization_titl": [177, 178], "add_punctuation_to_data": 177, "strip_punctuation_from_data": 177, "strip": [177, 178], "senctenc": 177, "add_typo_to_sent": [177, 178], "introduce_typo": [177, 178], "introduc": [177, 178], "typo": [177, 178], "swap_entities_with_terminologi": 177, "get_cohyponyms_wordnet": [177, 178], "co": [177, 178], "hyponym": [177, 178], "wordnet": [177, 178], "swap_with_cohyponym": [177, 178], "databas": [177, 178], "convert_acc": 177, "lang_dict": [177, 178], "convers": [177, 178], "add_context_to_data": 177, "starting_context": [177, 178], "ending_context": [177, 178], "add_contract": [177, 178], "augment_robust": 177, "add_punctu": [177, 178], "strip_punctu": [177, 178], "make_typo": 177, "american_to_british": [177, 178], "british_to_american": [177, 178], "add_context": [177, 178], "swap_ent": [177, 178], "swap_cohyponym": [177, 178], "optimized_inplac": 177, "random_st": 177, "return_spark": 177, "conll_save_path": 177, "print_info": 177, "ignore_warn": 177, "nois": [177, 178], "british": [177, 178], "american": [177, 178], "inplac": 177, "distinctli": 177, "warn": 177, "about": 177, "test_and_augment_robust": 177, "pipeline_model": [177, 178, 183], "test_file_path": [177, 178], "conll_path_to_aug": 177, "metric_typ": [177, 178], "metrics_output_format": [177, 178], "robustness_test_result": [177, 178], "noise_prob": [177, 178, 179], "One": [177, 186], "liner": 177, "assembl": [177, 178, 187], "applic": [177, 178], "strict": [177, 178], "capit": [177, 178], "special": [177, 178, 186], "test_set_languag": [177, 178], "list_of_str": 178, "keep_numeric_punctu": 178, "ie": 178, "40": 178, "000": 178, "modify_capit": 178, "got": 178, "swap_named_entities_from_terminologi": 178, "remove_punctuation_token": 178, "remove_context_token": 178, "starting_context_token": 178, "ending_context_token": 178, "remove_contraction_token": 178, "list_with_contract": 178, "list_without_contract": 178, "calculate_metr": 178, "filtered_df": 178, "noise_typ": 178, "noise_descript": 178, "test_set": 178, "total_amount": 178, "original_annotations_df": 178, "noisy_test_set": 178, "token_filter_funct": 178, "starting_context_token_list": 178, "ending_context_token_list": 178, "awar": 178, "disrupt": 178, "conll_sentence_read": 178, "test_robust": 178, "sample_sentence_count": 178, "calculate_proport": 179, "f1_score": 179, "suggest_perturb": 179, "test_result": 179, "suggest": 179, "get_augmentation_proport": 179, "pull": 179, "printprogress": 180, "progress": 180, "bar": 180, "consol": 180, "internalresourcedownload": 180, "downlod": 180, "downloadmodel": 180, "reader": [180, 183], "j_dwn": 180, "internalspythonresourcedownload": 180, "showprivatemodel": 180, "showprivatepipelin": 180, "showuncategorizedresourc": 180, "uncategor": 180, "showavailableannot": 180, "returnprivatemodel": 180, "returnprivatepipelin": 180, "tabular": 181, "structureddeidentif": 181, "columnsse": 181, "userandomdatedisplac": 181, "street": 181, "fax": 181, "internet": 181, "profess": 181, "opf": 181, "doctor": 181, "bioid": 181, "screen": 181, "protein": 181, "occur": 181, "someth": 181, "someon": 181, "healthplan": 181, "medicalrecord": 181, "obfuscatecolumn": 181, "texttodocumentscolumn": 182, "todocumentscolumn": 182, "annotationtooljsonread": 183, "cleanup_mod": 183, "split_char": 183, "context_char": 183, "min_chars_tol": 183, "align_chars_tol": 183, "merge_overlap": 183, "sddlpath": 183, "tool": 183, "aspres": 183, "rdr": 183, "anc": 183, "corpu": 183, "small": 183, "json_path": 183, "assertion_df": 183, "generateassertiontrainset": 183, "sentencecol": 183, "assertioncol": 183, "generateconl": 183, "taskcolumn": 183, "tokencol": 183, "nerlabel": 183, "generateplainassertiontrainset": 183, "codiespread": 183, "readdatasettaskx": 183, "textfold": 183, "cantemistread": 183, "readdatasettaskn": 183, "synonymaugmentationuml": 183, "umls_path": 183, "code_col": 183, "description_col": 183, "augmentcsv": 183, "corpus_csv_path": 183, "do_product": 183, "augmentation_mod": 183, "plain_text": 183, "synonym_sourc": 183, "uml": 183, "regex_pars": 183, "euclidean_distance_threshold": 183, "cosine_distance_threshold": 183, "synonym_limit": 183, "casing_funct": 183, "augmentdatafram": 183, "corpus_df": 183, "redatasethelp": 183, "spark_df": 183, "preprocess": 183, "i2b2_clinical_rel_dataset": 183, "column_map": 183, "begin1": 183, "firstcharent1": 183, "end1": 183, "lastcharent1": 183, "begin2": 183, "firstcharent2": 183, "end2": 183, "lastcharent2": 183, "create_annotation_column": 183, "txt_file": 183, "sent_id": 183, "beth": 183, "partner": 183, "i2b2": 183, "2010": 183, "va": 183, "tem": 183, "44": 183, "respiratori": 183, "satur": 183, "84": 183, "75": 183, "No": 183, "lotion": 183, "crea": 183, "146": 183, "trnap": 183, "incis": 183, "conc": 183, "43": [183, 195], "ter": 183, "picc": 183, "54": 183, "68": 183, "58": 183, "21": 183, "light": 183, "headed": 183, "diaphoresi": 183, "92": 183, "82": 183, "electroca": 183, "61": 183, "inferior": 183, "38": 183, "st": 183, "depressio": 183, "239": 183, "196": 183, "176": 183, "145": 183, "train_data": 183, "ner_column_nam": 183, "schema": 183, "printschema": 183, "root": 183, "nullabl": 183, "ner_log_pars": 184, "parse_logfil": 184, "avg": 184, "get_chart": [184, 193], "log_fil": [184, 193], "plot": [184, 193], "figur": [184, 193], "precis": [184, 193, 196], "recal": [184, 193, 196], "loss_plot": [184, 193], "get_best_f1_scor": 184, "micro": 184, "true_seq": [184, 193, 196], "pred_seq": [184, 193, 196], "overal": [184, 193, 196], "simpli": [184, 193, 196], "evaluate_conll_fil": [184, 193], "fileiter": [184, 193], "assertion_log_pars": 184, "updatecachemodel": 185, "cache_fold": 185, "refresh": 185, "hdf": 185, "date_cutoff": 185, "sinc": 185, "get_mt_sampl": 186, "medical_speci": 186, "transcrib": 186, "transcript": 186, "mtsampl": 186, "allergy_immunologi": 186, "autopsi": 186, "bariatr": 186, "cardiovascular_pulmonari": 186, "chiropract": 186, "consult_history_and_phi": 186, "cosmetic_plastic_surgeri": 186, "dentistri": 186, "dermatologi": 186, "diets_and_nutrit": 186, "discharge_summari": 186, "emergency_room_report": 186, "endocrinologi": 186, "ent_otolaryngologi": 186, "gastroenterologi": 186, "general_medicin": 186, "hematology_oncologi": 186, "hospice_palliative_car": 186, "im": 186, "lab_medicine_pathologi": 186, "letter": 186, "nephrologi": 186, "neurologi": 186, "neurosurgeri": 186, "obstetrics_gynecologi": 186, "office_not": 186, "ophthalmologi": 186, "orthoped": 186, "pain_manag": 186, "pediatrics_neonat": 186, "physical_medicine_rehab": 186, "podiatri": 186, "psychiatry_psychologi": 186, "radiologi": 186, "rheumatologi": 186, "sleep_medicin": 186, "soap_chart_progress_not": 186, "speech_languag": 186, "surgeri": 186, "urologi": 186, "scrap": 186, "nlp_token_pipelin": 187, "nlp_pos_pipelin": 187, "token_pipeline_initi": 187, "pos_pipeline_initi": 187, "sentencedetectordlmodel": 187, "regular_token": 187, "regextoken": 187, "empty_df": 187, "get_doc_assembl": 187, "get_sent_detector": 187, "get_regular_token": 187, "get_regex_token": 187, "get_po": 187, "get_empty_df": 187, "get_nlp_token_pipelin": 187, "get_sentence_pipelin": 187, "get_rel_df": 187, "get_ner_df": 187, "get_ner_sentence_bord": 187, "get_nlp_pos_pipelin": 187, "tagger": 187, "get_single_task_conl": 187, "pos_pipelin": 187, "token_pipelin": 187, "style": [187, 194], "get_token_df": 187, "_type_": 187, "is_module_import": 189, "module_nam": 189, "internalannotatortyp": 191, "selector": 191, "aqua": [194, 195], "aquamarin": [194, 195], "blanchedalmond": [194, 195], "blue": [194, 195], "blueviolet": [194, 195], "burlywood": [194, 195], "ocr_entity_processor": 194, "file_path": 194, "bounding_box": 194, "save_fold": 194, "label_color": 194, "red": 194, "color_chart_path": 194, "color_chart": 194, "png": 194, "chunk_col": 194, "black_list": 194, "display_result": 194, "ocr": 194, "paint": 194, "highlight": 194, "black_band": 194, "band": 194, "bound": 194, "box": 194, "around": 194, "chart": 194, "label2color": 195, "label2rgb": 195, "colors_rgb": 195, "255": 195, "127": 195, "212": 195, "235": 195, "205": 195, "138": 195, "226": 195, "165": 195, "aggregate_ent": 196, "split_tag": 196, "chunk_typ": 196, "is_chunk_end": 196, "prev_tag": 196, "contradict": 196, "is_chunk_start": 196, "calc_metr": 196, "tp": 196, "percent": 196, "fb1": 196, "decim": 196, "count_chunk": 196, "correct_chunk": 196, "counter": 196, "correctli": 196, "true_chunk": 196, "pred_chunk": 196, "correct_count": 196, "true_count": 196, "pred_count": 196, "get_result": 196, "prec": 196, "rec": 196, "overview": 197}, "objects": {"": [[140, 0, 0, "-", "sparknlp_jsl"]], "sparknlp_jsl": [[11, 0, 0, "-", "_tf_graph_builders"], [34, 0, 0, "-", "_tf_graph_builders_1x"], [41, 0, 0, "-", "alab"], [79, 0, 0, "-", "annotator"], [140, 3, 1, "", "annotators"], [105, 0, 0, "-", "base"], [109, 0, 0, "-", "common"], [110, 0, 0, "-", "compatibility"], [111, 0, 0, "-", "custom_transformer"], [112, 0, 0, "-", "eval"], [127, 0, 0, "-", "finance"], [139, 0, 0, "-", "functions"], [140, 6, 1, "", "get_credentials"], [141, 0, 0, "-", "internal"], [156, 0, 0, "-", "legal"], [140, 6, 1, "", "library_settings"], [168, 0, 0, "-", "modelTracer"], [171, 0, 0, "-", "nlp_test"], [180, 0, 0, "-", "pretrained"], [140, 6, 1, "", "pub_version"], [140, 3, 1, "", "size_regex"], [140, 6, 1, "", "start"], [181, 0, 0, "-", "structured_deidentification"], [182, 0, 0, "-", "text_to_documents_columns"], [183, 0, 0, "-", "training"], [184, 0, 0, "-", "training_log_parser"], [140, 3, 1, "", "transformer_seq_classification"], [185, 0, 0, "-", "updateModels"], [186, 0, 0, "-", "util"], [190, 0, 0, "-", "utils"], [140, 6, 1, "", "version"], [140, 3, 1, "", "version_regex"]], "sparknlp_jsl._tf_graph_builders": [[3, 0, 0, "-", "assertion_dl"], [7, 0, 0, "-", "generic_classifier"], [10, 0, 0, "-", "graph_builders"], [14, 0, 0, "-", "ner_dl"], [21, 0, 0, "-", "tf2contrib"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[2, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel": [[2, 2, 1, "", "add_bidirectional_lstm"], [2, 2, 1, "", "add_optimizer"], [2, 2, 1, "", "calc_accuracy"], [2, 2, 1, "", "confusion_matrix"], [2, 2, 1, "", "fully_connected_layer"], [2, 2, 1, "", "persist_graph"], [2, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[4, 0, 0, "-", "basetfmodel"], [5, 0, 0, "-", "build_model"], [6, 0, 0, "-", "generic_classifier_model"], [8, 0, 0, "-", "progresstracker"], [9, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel": [[4, 2, 1, "", "build"], [4, 2, 1, "", "export_graph"], [4, 2, 1, "", "fit_dataset"], [4, 2, 1, "", "generate_batch"], [4, 2, 1, "", "get_graph"], [4, 2, 1, "", "is_built"], [4, 2, 1, "", "load_graph"], [4, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, 3, 1, "", "build_params"], [5, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel": [[6, 2, 1, "", "build"], [6, 2, 1, "", "export_graph"], [6, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker": [[8, 2, 1, "", "get_report_interval"], [8, 2, 1, "", "on_batch"], [8, 2, 1, "", "on_epoch"], [8, 2, 1, "", "on_training_end"], [8, 2, 1, "", "on_training_start"], [8, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, 1, 1, "", "MODEL_OPS"], [9, 1, 1, "", "MODEL_TENSORS"], [9, 1, 1, "", "RUN_TYPES"], [9, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS": [[9, 4, 1, "", "INIT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS": [[9, 4, 1, "", "ACC"], [9, 4, 1, "", "INPUTS"], [9, 4, 1, "", "LEARNING_RATE"], [9, 4, 1, "", "LOSS"], [9, 4, 1, "", "OUTPUTS"], [9, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES": [[9, 4, 1, "", "EVALUATE"], [9, 4, 1, "", "PREDICT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings": [[9, 4, 1, "", "DATASETS_DIR"], [9, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [9, 4, 1, "", "LOGS_DIR"], [9, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, 1, 1, "", "AssertionTFGraphBuilder"], [10, 1, 1, "", "GenericClassifierTFGraphBuilder"], [10, 1, 1, "", "NerTFGraphBuilder"], [10, 1, 1, "", "RelationExtractionTFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilderFactory"], [10, 5, 1, "", "TensorflowAddonsNeeded"], [10, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder": [[10, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder": [[10, 2, 1, "", "check_build_params"], [10, 2, 1, "", "get_build_param"], [10, 2, 1, "", "get_build_params"], [10, 2, 1, "", "get_build_params_with_defaults"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_models"], [10, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[12, 0, 0, "-", "create_graph"], [13, 0, 0, "-", "dataset_encoder"], [15, 0, 0, "-", "ner_model"], [16, 0, 0, "-", "ner_model_saver"], [17, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder": [[13, 2, 1, "", "encode"], [13, 2, 1, "", "get_char_indexes"], [13, 2, 1, "", "normalize"], [13, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel": [[15, 2, 1, "", "add_bilstm_char_repr"], [15, 2, 1, "", "add_cnn_char_repr"], [15, 2, 1, "", "add_context_repr"], [15, 2, 1, "", "add_inference_layer"], [15, 2, 1, "", "add_pretrained_word_embeddings"], [15, 2, 1, "", "add_training_op"], [15, 2, 1, "", "close"], [15, 2, 1, "", "fill"], [15, 2, 1, "", "get_char_ids"], [15, 2, 1, "", "get_from_batch"], [15, 2, 1, "", "get_sentence_lengths"], [15, 2, 1, "", "get_sentence_token_lengths"], [15, 2, 1, "", "get_softmax"], [15, 2, 1, "", "get_tag_ids"], [15, 2, 1, "", "get_word_embeddings"], [15, 2, 1, "", "get_word_lengths"], [15, 2, 1, "", "init_variables"], [15, 2, 1, "", "measure"], [15, 2, 1, "", "num_trues"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "slice"], [15, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver": [[16, 2, 1, "", "restore_tensorflow_state"], [16, 2, 1, "", "save"], [16, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper": [[17, 2, 1, "", "get_bucket_id"], [17, 2, 1, "", "slice"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[18, 0, 0, "-", "core_rnn_cell"], [19, 0, 0, "-", "fused_rnn_cell"], [20, 0, 0, "-", "gru_ops"], [22, 0, 0, "-", "lstm_ops"], [23, 0, 0, "-", "rnn"], [24, 0, 0, "-", "rnn_cell"], [21, 3, 1, "", "tf"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, 1, 1, "", "EmbeddingWrapper"], [18, 1, 1, "", "InputProjectionWrapper"], [18, 1, 1, "", "OutputProjectionWrapper"], [18, 3, 1, "", "RNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, 1, 1, "", "FusedRNNCell"], [19, 1, 1, "", "FusedRNNCellAdaptor"], [19, 1, 1, "", "TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, 1, 1, "", "GRUBlockCell"], [20, 1, 1, "", "GRUBlockCellV2"], [20, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell": [[20, 2, 1, "", "build"], [20, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2": [[20, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, 1, 1, "", "LSTMBlockCell"], [22, 1, 1, "", "LSTMBlockFusedCell"], [22, 1, 1, "", "LSTMBlockWrapper"], [22, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell": [[22, 2, 1, "", "build"], [22, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell": [[22, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper": [[22, 2, 1, "", "call"], [22, 2, 1, "", "num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, 6, 1, "", "stack_bidirectional_dynamic_rnn"], [23, 6, 1, "", "stack_bidirectional_rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, 1, 1, "", "AttentionCellWrapper"], [24, 1, 1, "", "BidirectionalGridLSTMCell"], [24, 1, 1, "", "CFNCell"], [24, 1, 1, "", "CompiledWrapper"], [24, 1, 1, "", "Conv1DLSTMCell"], [24, 1, 1, "", "Conv2DLSTMCell"], [24, 1, 1, "", "Conv3DLSTMCell"], [24, 1, 1, "", "ConvLSTMCell"], [24, 1, 1, "", "CoupledInputForgetGateLSTMCell"], [24, 1, 1, "", "GLSTMCell"], [24, 1, 1, "", "GridLSTMCell"], [24, 1, 1, "", "HighwayWrapper"], [24, 1, 1, "", "IndRNNCell"], [24, 1, 1, "", "IndyGRUCell"], [24, 1, 1, "", "IndyLSTMCell"], [24, 1, 1, "", "IntersectionRNNCell"], [24, 1, 1, "", "LayerNormBasicLSTMCell"], [24, 1, 1, "", "LayerNormLSTMCell"], [24, 1, 1, "", "MinimalRNNCell"], [24, 1, 1, "", "NASCell"], [24, 1, 1, "", "NTMCell"], [24, 3, 1, "", "NTMControllerState"], [24, 1, 1, "", "PhasedLSTMCell"], [24, 1, 1, "", "SRUCell"], [24, 1, 1, "", "TimeFreqLSTMCell"], [24, 1, 1, "", "UGRNNCell"], [24, 1, 1, "", "WeightNormLSTMCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"], [24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders_1x": [[26, 0, 0, "-", "assertion_dl"], [30, 0, 0, "-", "generic_classifier"], [33, 0, 0, "-", "graph_builders"], [37, 0, 0, "-", "ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[25, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel": [[25, 2, 1, "", "add_bidirectional_lstm"], [25, 2, 1, "", "add_optimizer"], [25, 2, 1, "", "calc_accuracy"], [25, 2, 1, "", "confusion_matrix"], [25, 2, 1, "", "fully_connected_layer"], [25, 2, 1, "", "persist_graph"], [25, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[27, 0, 0, "-", "basetfmodel"], [28, 0, 0, "-", "build_model"], [29, 0, 0, "-", "generic_classifier_model"], [31, 0, 0, "-", "progresstracker"], [32, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel": [[27, 2, 1, "", "build"], [27, 2, 1, "", "export_graph"], [27, 2, 1, "", "fit_dataset"], [27, 2, 1, "", "generate_batch"], [27, 2, 1, "", "get_graph"], [27, 2, 1, "", "is_built"], [27, 2, 1, "", "load_graph"], [27, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, 3, 1, "", "build_params"], [28, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel": [[29, 2, 1, "", "build"], [29, 2, 1, "", "export_graph"], [29, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker": [[31, 2, 1, "", "get_report_interval"], [31, 2, 1, "", "on_batch"], [31, 2, 1, "", "on_epoch"], [31, 2, 1, "", "on_training_end"], [31, 2, 1, "", "on_training_start"], [31, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, 1, 1, "", "MODEL_OPS"], [32, 1, 1, "", "MODEL_TENSORS"], [32, 1, 1, "", "RUN_TYPES"], [32, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS": [[32, 4, 1, "", "INIT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS": [[32, 4, 1, "", "ACC"], [32, 4, 1, "", "INPUTS"], [32, 4, 1, "", "LEARNING_RATE"], [32, 4, 1, "", "LOSS"], [32, 4, 1, "", "OUTPUTS"], [32, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES": [[32, 4, 1, "", "EVALUATE"], [32, 4, 1, "", "PREDICT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings": [[32, 4, 1, "", "DATASETS_DIR"], [32, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [32, 4, 1, "", "LOGS_DIR"], [32, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, 1, 1, "", "AssertionTFGraphBuilder"], [33, 1, 1, "", "GenericClassifierTFGraphBuilder"], [33, 1, 1, "", "NerTFGraphBuilder"], [33, 1, 1, "", "RelationExtractionTFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilderFactory"], [33, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder": [[33, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder": [[33, 2, 1, "", "check_build_params"], [33, 2, 1, "", "get_build_param"], [33, 2, 1, "", "get_build_params"], [33, 2, 1, "", "get_build_params_with_defaults"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_models"], [33, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[35, 0, 0, "-", "create_graph"], [36, 0, 0, "-", "dataset_encoder"], [38, 0, 0, "-", "ner_model"], [39, 0, 0, "-", "ner_model_saver"], [40, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder": [[36, 2, 1, "", "encode"], [36, 2, 1, "", "get_char_indexes"], [36, 2, 1, "", "normalize"], [36, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel": [[38, 2, 1, "", "add_bilstm_char_repr"], [38, 2, 1, "", "add_cnn_char_repr"], [38, 2, 1, "", "add_context_repr"], [38, 2, 1, "", "add_inference_layer"], [38, 2, 1, "", "add_pretrained_word_embeddings"], [38, 2, 1, "", "add_training_op"], [38, 2, 1, "", "close"], [38, 2, 1, "", "fill"], [38, 2, 1, "", "get_char_ids"], [38, 2, 1, "", "get_from_batch"], [38, 2, 1, "", "get_sentence_lengths"], [38, 2, 1, "", "get_sentence_token_lengths"], [38, 2, 1, "", "get_softmax"], [38, 2, 1, "", "get_tag_ids"], [38, 2, 1, "", "get_word_embeddings"], [38, 2, 1, "", "get_word_lengths"], [38, 2, 1, "", "init_variables"], [38, 2, 1, "", "measure"], [38, 2, 1, "", "num_trues"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "slice"], [38, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver": [[39, 2, 1, "", "restore_tensorflow_state"], [39, 2, 1, "", "save"], [39, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper": [[40, 2, 1, "", "get_bucket_id"], [40, 2, 1, "", "slice"]], "sparknlp_jsl.alab": [[41, 1, 1, "", "AnnotationLab"]], "sparknlp_jsl.alab.AnnotationLab": [[41, 2, 1, "", "create_project"], [41, 2, 1, "", "delete_project"], [41, 2, 1, "", "delete_tasks"], [41, 2, 1, "", "generate_preannotations"], [41, 2, 1, "", "get_IAA_metrics"], [41, 2, 1, "", "get_all_projects"], [41, 2, 1, "", "get_annotations"], [41, 2, 1, "", "get_assertion_data"], [41, 2, 1, "", "get_classification_data"], [41, 2, 1, "", "get_conll_data"], [41, 2, 1, "", "get_project_config"], [41, 2, 1, "", "get_relation_extraction_data"], [41, 2, 1, "", "set_credentials"], [41, 2, 1, "", "set_project_config"], [41, 2, 1, "", "upload_preannotations"], [41, 2, 1, "", "upload_tasks"]], "sparknlp_jsl.annotator": [[42, 0, 0, "-", "annotation_merger"], [79, 3, 1, "", "assertion"], [46, 0, 0, "-", "assertion"], [79, 3, 1, "", "chunker"], [55, 0, 0, "-", "chunker"], [79, 3, 1, "", "classification"], [58, 0, 0, "-", "classification"], [79, 3, 1, "", "context"], [63, 0, 0, "-", "context"], [79, 3, 1, "", "deid"], [66, 0, 0, "-", "deid"], [79, 3, 1, "", "disambiguation"], [70, 0, 0, "-", "disambiguation"], [72, 0, 0, "-", "doc2_chunk_internal"], [76, 0, 0, "-", "embeddings"], [79, 3, 1, "", "generic_classifier"], [78, 0, 0, "-", "generic_classifier"], [79, 3, 1, "", "keyword"], [81, 0, 0, "-", "merge"], [82, 0, 0, "-", "ner"], [90, 0, 0, "-", "normalizer"], [91, 0, 0, "-", "qa"], [93, 0, 0, "-", "re"], [98, 0, 0, "-", "resolution"], [101, 0, 0, "-", "resolution2_chunk"], [102, 0, 0, "-", "router"], [103, 0, 0, "-", "source_tracking_metadata_params"], [104, 0, 0, "-", "tf_graph_builder"]], "sparknlp_jsl.annotator.annotation_merger": [[42, 1, 1, "", "AnnotationMerger"]], "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger": [[42, 4, 1, "", "inputAnnotatorTypes"], [42, 4, 1, "", "inputType"], [42, 4, 1, "", "name"], [42, 4, 1, "", "outputAnnotatorType"], [42, 2, 1, "", "setInputCols"], [42, 2, 1, "", "setInputType"]], "sparknlp_jsl.annotator.assertion": [[43, 0, 0, "-", "assertionDL"], [44, 0, 0, "-", "assertion_chunk_converter"], [45, 0, 0, "-", "assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, 1, 1, "", "AssertionDLApproach"], [43, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach": [[43, 4, 1, "", "batchSize"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "dropout"], [43, 4, 1, "", "enableOutputLogs"], [43, 4, 1, "", "endCol"], [43, 4, 1, "", "epochs"], [43, 4, 1, "", "evaluationLogExtended"], [43, 4, 1, "", "graphFile"], [43, 4, 1, "", "graphFolder"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "label"], [43, 4, 1, "", "learningRate"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "outputAnnotatorType"], [43, 4, 1, "", "outputLogsPath"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setBatchSize"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setDropout"], [43, 2, 1, "", "setEnableOutputLogs"], [43, 2, 1, "", "setEndCol"], [43, 2, 1, "", "setEpochs"], [43, 2, 1, "", "setEvaluationLogExtended"], [43, 2, 1, "", "setGraphFile"], [43, 2, 1, "", "setGraphFolder"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setLabelCol"], [43, 2, 1, "", "setLearningRate"], [43, 2, 1, "", "setMaxSentLen"], [43, 2, 1, "", "setOutputLogsPath"], [43, 2, 1, "", "setScopeWindow"], [43, 2, 1, "", "setStartCol"], [43, 2, 1, "", "setTestDataset"], [43, 2, 1, "", "setValidationSplit"], [43, 2, 1, "", "setVerbose"], [43, 4, 1, "", "startCol"], [43, 4, 1, "", "testDataset"], [43, 4, 1, "", "validationSplit"], [43, 4, 1, "", "verbose"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel": [[43, 4, 1, "", "classes"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "name"], [43, 4, 1, "", "outputAnnotatorType"], [43, 2, 1, "", "pretrained"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setScopeWindow"], [43, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, 1, 1, "", "AssertionChunkConverter"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter": [[44, 4, 1, "", "chunkBeginCol"], [44, 4, 1, "", "chunkEndCol"], [44, 4, 1, "", "chunkTextCol"], [44, 4, 1, "", "inputAnnotatorTypes"], [44, 4, 1, "", "inputCols"], [44, 4, 1, "", "name"], [44, 4, 1, "", "outputAnnotatorType"], [44, 4, 1, "", "outputCol"], [44, 4, 1, "", "outputTokenBeginCol"], [44, 4, 1, "", "outputTokenEndCol"], [44, 2, 1, "", "setChunkBeginCol"], [44, 2, 1, "", "setChunkEndCol"], [44, 2, 1, "", "setChunkTextCol"], [44, 2, 1, "", "setInputCols"], [44, 2, 1, "", "setOutputCol"], [44, 2, 1, "", "setOutputTokenBeginCol"], [44, 2, 1, "", "setOutputTokenEndCol"], [44, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, 1, 1, "", "AssertionLogRegApproach"], [45, 1, 1, "", "AssertionLogRegModel"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "eNetParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "label"], [45, 4, 1, "", "maxIter"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 4, 1, "", "regParam"], [45, 2, 1, "", "setAfter"], [45, 2, 1, "", "setBefore"], [45, 2, 1, "", "setEndCol"], [45, 2, 1, "", "setEnet"], [45, 2, 1, "", "setLabelCol"], [45, 2, 1, "", "setMaxIter"], [45, 2, 1, "", "setNerCol"], [45, 2, 1, "", "setReg"], [45, 2, 1, "", "setStartCol"], [45, 2, 1, "", "setTargetNerLabels"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "name"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 2, 1, "", "pretrained"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.chunker": [[47, 0, 0, "-", "assertion_filterer"], [48, 0, 0, "-", "chunk_converter"], [49, 0, 0, "-", "chunk_key_phrase_extraction"], [50, 0, 0, "-", "chunk_sentence_splitter"], [51, 0, 0, "-", "chunker_filterer"], [52, 0, 0, "-", "chunkmapper"], [53, 0, 0, "-", "chunkmapper_filterer"], [54, 0, 0, "-", "docmapper"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[47, 1, 1, "", "AssertionFilterer"]], "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer": [[47, 4, 1, "", "caseSensitive"], [47, 4, 1, "", "criteria"], [47, 4, 1, "", "entitiesConfidence"], [47, 4, 1, "", "inputAnnotatorTypes"], [47, 4, 1, "", "name"], [47, 4, 1, "", "outputAnnotatorType"], [47, 4, 1, "", "regex"], [47, 2, 1, "", "setCaseSensitive"], [47, 2, 1, "", "setCriteria"], [47, 2, 1, "", "setRegex"], [47, 2, 1, "", "setWhiteList"], [47, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[48, 1, 1, "", "ChunkConverter"]], "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter": [[48, 4, 1, "", "inputAnnotatorTypes"], [48, 4, 1, "", "name"], [48, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[49, 1, 1, "", "ChunkKeyPhraseExtraction"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction": [[49, 4, 1, "", "concatenateSentences"], [49, 4, 1, "", "divergence"], [49, 4, 1, "", "documentLevelProcessing"], [49, 4, 1, "", "dropPunctuation"], [49, 4, 1, "", "inputAnnotatorTypes"], [49, 4, 1, "", "name"], [49, 4, 1, "", "outputAnnotatorType"], [49, 2, 1, "", "pretrained"], [49, 4, 1, "", "selectMostDifferent"], [49, 2, 1, "", "setConcatenateSentences"], [49, 2, 1, "", "setDivergence"], [49, 2, 1, "", "setDocumentLevelProcessing"], [49, 2, 1, "", "setDropPunctuation"], [49, 2, 1, "", "setSelectMostDifferent"], [49, 2, 1, "", "setTopN"], [49, 4, 1, "", "topN"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[50, 1, 1, "", "ChunkSentenceSplitter"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter": [[50, 4, 1, "", "defaultEntity"], [50, 4, 1, "", "groupBySentences"], [50, 4, 1, "", "inputAnnotatorTypes"], [50, 4, 1, "", "insertChunk"], [50, 4, 1, "", "name"], [50, 4, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "setDefaultEntity"], [50, 2, 1, "", "setGroupBySentences"], [50, 2, 1, "", "setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[51, 1, 1, "", "ChunkFilterer"], [51, 1, 1, "", "ChunkFiltererApproach"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer": [[51, 4, 1, "", "blackList"], [51, 4, 1, "", "criteria"], [51, 4, 1, "", "filterValue"], [51, 4, 1, "", "inputAnnotatorTypes"], [51, 4, 1, "", "name"], [51, 4, 1, "", "outputAnnotatorType"], [51, 4, 1, "", "regex"], [51, 2, 1, "", "setBlackList"], [51, 2, 1, "", "setCriteria"], [51, 2, 1, "", "setFilterEntity"], [51, 2, 1, "", "setRegex"], [51, 2, 1, "", "setWhiteList"], [51, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach": [[51, 4, 1, "", "blackList"], [51, 4, 1, "", "criteria"], [51, 4, 1, "", "entitiesConfidenceResource"], [51, 4, 1, "", "filterValue"], [51, 4, 1, "", "inputAnnotatorTypes"], [51, 4, 1, "", "name"], [51, 4, 1, "", "outputAnnotatorType"], [51, 4, 1, "", "regex"], [51, 2, 1, "", "setBlackList"], [51, 2, 1, "", "setCriteria"], [51, 2, 1, "", "setEntitiesConfidenceResource"], [51, 2, 1, "", "setFilterEntity"], [51, 2, 1, "", "setRegex"], [51, 2, 1, "", "setWhiteList"], [51, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[52, 1, 1, "", "ChunkMapperApproach"], [52, 1, 1, "", "ChunkMapperFuzzyMatchingParams"], [52, 1, 1, "", "ChunkMapperModel"], [52, 1, 1, "", "CommonChunkMapperParams"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach": [[52, 4, 1, "", "dictionary"], [52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "setDictionary"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams": [[52, 4, 1, "", "enableCharFingerprintMatching"], [52, 4, 1, "", "enableFuzzyMatching"], [52, 4, 1, "", "enableTokenFingerprintMatching"], [52, 4, 1, "", "fuzzyDistanceScalingMode"], [52, 4, 1, "", "fuzzyMatchingDistanceThresholds"], [52, 4, 1, "", "fuzzyMatchingDistances"], [52, 4, 1, "", "maxCharNgramFingerprint"], [52, 4, 1, "", "maxTokenNgramDroppingCharsRatio"], [52, 4, 1, "", "maxTokenNgramDroppingOperator"], [52, 4, 1, "", "maxTokenNgramDroppingTokens"], [52, 4, 1, "", "maxTokenNgramFingerprint"], [52, 4, 1, "", "minCharNgramFingerprint"], [52, 4, 1, "", "minTokenNgramFingerprint"], [52, 2, 1, "", "setEnableCharFingerprintMatching"], [52, 2, 1, "", "setEnableFuzzyMatching"], [52, 2, 1, "", "setEnableTokenFingerprintMatching"], [52, 2, 1, "", "setFuzzyDistanceScalingMode"], [52, 2, 1, "", "setFuzzyMatchingDistanceThresholds"], [52, 2, 1, "", "setFuzzyMatchingDistances"], [52, 2, 1, "", "setMaxCharNgramFingerprint"], [52, 2, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [52, 2, 1, "", "setMaxTokenNgramDroppingOperator"], [52, 2, 1, "", "setMaxTokenNgramDroppingTokens"], [52, 2, 1, "", "setMaxTokenNgramFingerprint"], [52, 2, 1, "", "setMinCharNgramFingerprint"], [52, 2, 1, "", "setMinTokenNgramFingerprint"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel": [[52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams": [[52, 4, 1, "", "allowMultiTokenChunk"], [52, 4, 1, "", "lowerCase"], [52, 4, 1, "", "multivaluesRelations"], [52, 4, 1, "", "rel"], [52, 4, 1, "", "rels"], [52, 2, 1, "", "setAllowMultiTokenChunk"], [52, 2, 1, "", "setLowerCase"], [52, 2, 1, "", "setMultivaluesRelations"], [52, 2, 1, "", "setRel"], [52, 2, 1, "", "setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[53, 1, 1, "", "ChunkMapperFilterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer": [[53, 4, 1, "", "inputAnnotatorTypes"], [53, 4, 1, "", "name"], [53, 4, 1, "", "outputAnnotatorType"], [53, 4, 1, "", "returnCriteria"], [53, 2, 1, "", "setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.docmapper": [[54, 1, 1, "", "DocMapperApproach"], [54, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach": [[54, 4, 1, "", "dictionary"], [54, 4, 1, "", "inputAnnotatorTypes"], [54, 4, 1, "", "name"], [54, 4, 1, "", "outputAnnotatorType"], [54, 2, 1, "", "setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel": [[54, 4, 1, "", "inputAnnotatorTypes"], [54, 4, 1, "", "name"], [54, 4, 1, "", "outputAnnotatorType"], [54, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification": [[56, 0, 0, "-", "document_log_classifier"], [57, 0, 0, "-", "document_ml_classifier"], [59, 0, 0, "-", "medical_bert_for_sequence_classification"], [60, 0, 0, "-", "medical_bert_for_token_classifier"], [61, 0, 0, "-", "medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[56, 1, 1, "", "DocumentLogRegClassifierApproach"], [56, 1, 1, "", "DocumentLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach": [[56, 4, 1, "", "classificationModelPath"], [56, 4, 1, "", "fitIntercept"], [56, 4, 1, "", "inputAnnotatorTypes"], [56, 4, 1, "", "labelCol"], [56, 4, 1, "", "labels"], [56, 4, 1, "", "maxIter"], [56, 4, 1, "", "outputAnnotatorType"], [56, 2, 1, "", "setClassificationModelPath"], [56, 2, 1, "", "setFitIntercept"], [56, 2, 1, "", "setLabelColumn"], [56, 2, 1, "", "setLabels"], [56, 2, 1, "", "setMaxIter"], [56, 2, 1, "", "setTol"], [56, 2, 1, "", "setVectorizationModelPath"], [56, 4, 1, "", "tol"], [56, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel": [[56, 4, 1, "", "classificationModel"], [56, 4, 1, "", "labels"], [56, 4, 1, "", "mergeChunks"], [56, 4, 1, "", "name"], [56, 4, 1, "", "outputAnnotatorType"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setClassificationModel"], [56, 2, 1, "", "setLabels"], [56, 2, 1, "", "setMergeChunks"], [56, 2, 1, "", "setVectorizationModel"], [56, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[57, 1, 1, "", "DocumentMLClassifierApproach"], [57, 1, 1, "", "DocumentMLClassifierModel"], [57, 1, 1, "", "DocumentMLClassifierParams"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach": [[57, 4, 1, "", "classificationModelClass"], [57, 4, 1, "", "classificationModelPath"], [57, 4, 1, "", "fitIntercept"], [57, 4, 1, "", "inputAnnotatorTypes"], [57, 4, 1, "", "labelCol"], [57, 4, 1, "", "maxIter"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "setClassificationModelClass"], [57, 2, 1, "", "setClassificationModelPath"], [57, 2, 1, "", "setFitIntercept"], [57, 2, 1, "", "setLabelCol"], [57, 2, 1, "", "setMaxIter"], [57, 2, 1, "", "setMaxTokenNgram"], [57, 2, 1, "", "setMinTokenNgram"], [57, 2, 1, "", "setTol"], [57, 2, 1, "", "setVectorizationModelPath"], [57, 4, 1, "", "tol"], [57, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel": [[57, 4, 1, "", "classificationModel"], [57, 4, 1, "", "inputAnnotatorTypes"], [57, 4, 1, "", "labels"], [57, 4, 1, "", "name"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setClassificationModel"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setVectorizationModel"], [57, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams": [[57, 4, 1, "", "labels"], [57, 4, 1, "", "maxTokenNgram"], [57, 4, 1, "", "mergeChunks"], [57, 4, 1, "", "minTokenNgram"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setMergeChunks"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[59, 1, 1, "", "MedicalBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification": [[59, 4, 1, "", "coalesceSentences"], [59, 4, 1, "", "configProtoBytes"], [59, 2, 1, "", "getClasses"], [59, 4, 1, "", "inputAnnotatorTypes"], [59, 2, 1, "", "loadSavedModel"], [59, 2, 1, "", "loadSavedModelOpenSource"], [59, 4, 1, "", "maxSentenceLength"], [59, 4, 1, "", "name"], [59, 4, 1, "", "outputAnnotatorType"], [59, 2, 1, "", "pretrained"], [59, 2, 1, "", "setCoalesceSentences"], [59, 2, 1, "", "setConfigProtoBytes"], [59, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[60, 1, 1, "", "MedicalBertForTokenClassifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier": [[60, 4, 1, "", "configProtoBytes"], [60, 2, 1, "", "getClasses"], [60, 4, 1, "", "inputAnnotatorTypes"], [60, 2, 1, "", "loadSavedModel"], [60, 2, 1, "", "loadSavedModelOpenSource"], [60, 4, 1, "", "maxSentenceLength"], [60, 4, 1, "", "name"], [60, 4, 1, "", "outputAnnotatorType"], [60, 2, 1, "", "pretrained"], [60, 2, 1, "", "setConfigProtoBytes"], [60, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[61, 1, 1, "", "MedicalDistilBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification": [[61, 4, 1, "", "coalesceSentences"], [61, 4, 1, "", "configProtoBytes"], [61, 2, 1, "", "getClasses"], [61, 4, 1, "", "inputAnnotatorTypes"], [61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "loadSavedModelOpenSource"], [61, 4, 1, "", "maxSentenceLength"], [61, 4, 1, "", "name"], [61, 4, 1, "", "outputAnnotatorType"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setCoalesceSentences"], [61, 2, 1, "", "setConfigProtoBytes"], [61, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.context": [[62, 0, 0, "-", "contextual_parser"]], "sparknlp_jsl.annotator.context.contextual_parser": [[62, 1, 1, "", "ContextualParserApproach"], [62, 1, 1, "", "ContextualParserModel"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach": [[62, 4, 1, "", "caseSensitive"], [62, 4, 1, "", "completeContextMatch"], [62, 4, 1, "", "dictionary"], [62, 4, 1, "", "inputAnnotatorTypes"], [62, 4, 1, "", "jsonPath"], [62, 4, 1, "", "optionalContextRules"], [62, 4, 1, "", "outputAnnotatorType"], [62, 4, 1, "", "prefixAndSuffixMatch"], [62, 2, 1, "", "setCaseSensitive"], [62, 2, 1, "", "setCompleteContextMatch"], [62, 2, 1, "", "setDictionary"], [62, 2, 1, "", "setJsonPath"], [62, 2, 1, "", "setOptionalContextRules"], [62, 2, 1, "", "setPrefixAndSuffixMatch"], [62, 2, 1, "", "setShortestContextMatch"], [62, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel": [[62, 4, 1, "", "caseSensitive"], [62, 4, 1, "", "inputAnnotatorTypes"], [62, 4, 1, "", "optionalContextRules"], [62, 4, 1, "", "outputAnnotatorType"], [62, 4, 1, "", "prefixAndSuffixMatch"], [62, 2, 1, "", "setCaseSensitive"], [62, 2, 1, "", "setOptionalContextRules"], [62, 2, 1, "", "setPrefixAndSuffixMatch"], [62, 2, 1, "", "setShortestContextMatch"], [62, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.deid": [[64, 0, 0, "-", "deIdentification"], [65, 0, 0, "-", "doccument_hashcoder"], [67, 0, 0, "-", "name_obfuscator"], [68, 0, 0, "-", "reIdentification"], [69, 0, 0, "-", "replacer"]], "sparknlp_jsl.annotator.deid.deIdentification": [[64, 1, 1, "", "DeIdentification"], [64, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification": [[64, 4, 1, "", "ageRanges"], [64, 4, 1, "", "blackList"], [64, 4, 1, "", "consistentObfuscation"], [64, 4, 1, "", "dateFormats"], [64, 4, 1, "", "dateTag"], [64, 4, 1, "", "dateToYear"], [64, 4, 1, "", "days"], [64, 4, 1, "", "fixedMaskLength"], [64, 2, 1, "", "getBlackList"], [64, 4, 1, "", "ignoreRegex"], [64, 4, 1, "", "inputAnnotatorTypes"], [64, 4, 1, "", "isRandomDateDisplacement"], [64, 4, 1, "", "language"], [64, 4, 1, "", "mappingsColumn"], [64, 4, 1, "", "maskingPolicy"], [64, 4, 1, "", "minYear"], [64, 4, 1, "", "mode"], [64, 4, 1, "", "name"], [64, 4, 1, "", "obfuscateDate"], [64, 4, 1, "", "obfuscateRefFile"], [64, 4, 1, "", "obfuscateRefSource"], [64, 4, 1, "", "outputAnnotatorType"], [64, 4, 1, "", "outputAsDocument"], [64, 4, 1, "", "refFileFormat"], [64, 4, 1, "", "refSep"], [64, 4, 1, "", "regexOverride"], [64, 4, 1, "", "regexPatternsDictionary"], [64, 4, 1, "", "region"], [64, 4, 1, "", "returnEntityMappings"], [64, 4, 1, "", "sameEntityThreshold"], [64, 4, 1, "", "seed"], [64, 2, 1, "", "setAgeRanges"], [64, 2, 1, "", "setBlackList"], [64, 2, 1, "", "setConsistentObfuscation"], [64, 2, 1, "", "setDateFormats"], [64, 2, 1, "", "setDateTag"], [64, 2, 1, "", "setDateToYear"], [64, 2, 1, "", "setDays"], [64, 2, 1, "", "setFixedMaskLength"], [64, 2, 1, "", "setIgnoreRegex"], [64, 2, 1, "", "setIsRandomDateDisplacement"], [64, 2, 1, "", "setLanguage"], [64, 2, 1, "", "setMappingsColumn"], [64, 2, 1, "", "setMaskingPolicy"], [64, 2, 1, "", "setMinYear"], [64, 2, 1, "", "setMode"], [64, 2, 1, "", "setObfuscateDate"], [64, 2, 1, "", "setObfuscateRefFile"], [64, 2, 1, "", "setObfuscateRefSource"], [64, 2, 1, "", "setOutputAsDocument"], [64, 2, 1, "", "setRefFileFormat"], [64, 2, 1, "", "setRefSep"], [64, 2, 1, "", "setRegexOverride"], [64, 2, 1, "", "setRegexPatternsDictionary"], [64, 2, 1, "", "setRegion"], [64, 2, 1, "", "setReturnEntityMappings"], [64, 2, 1, "", "setSameEntityThreshold"], [64, 2, 1, "", "setSeed"], [64, 2, 1, "", "setUnnormalizedDateMode"], [64, 2, 1, "", "setUseShifDays"], [64, 2, 1, "", "setZipCodeTag"], [64, 4, 1, "", "unnormalizedDateMode"], [64, 4, 1, "", "useShifDays"], [64, 4, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel": [[64, 4, 1, "", "ageRanges"], [64, 4, 1, "", "blackList"], [64, 4, 1, "", "consistentObfuscation"], [64, 4, 1, "id0", "dateFormats"], [64, 4, 1, "", "dateTag"], [64, 4, 1, "", "dateToYear"], [64, 4, 1, "", "days"], [64, 4, 1, "", "fixedMaskLength"], [64, 2, 1, "", "getBlackList"], [64, 2, 1, "", "getRegexEntities"], [64, 4, 1, "", "ignoreRegex"], [64, 4, 1, "", "inputAnnotatorTypes"], [64, 4, 1, "", "isRandomDateDisplacement"], [64, 4, 1, "", "language"], [64, 4, 1, "", "mappingsColumn"], [64, 4, 1, "", "maskingPolicy"], [64, 4, 1, "", "minYear"], [64, 4, 1, "id13", "mode"], [64, 4, 1, "", "name"], [64, 4, 1, "", "obfuscateDate"], [64, 4, 1, "", "obfuscateRefSource"], [64, 4, 1, "", "outputAnnotatorType"], [64, 4, 1, "", "outputAsDocument"], [64, 2, 1, "", "pretrained"], [64, 4, 1, "", "regexEntities"], [64, 4, 1, "", "regexOverride"], [64, 4, 1, "", "region"], [64, 4, 1, "", "returnEntityMappings"], [64, 4, 1, "", "sameEntityThreshold"], [64, 4, 1, "", "seed"], [64, 2, 1, "", "setAgeRanges"], [64, 2, 1, "", "setBlackList"], [64, 2, 1, "", "setConsistentObfuscation"], [64, 2, 1, "", "setDateFormats"], [64, 2, 1, "", "setDateTag"], [64, 2, 1, "", "setDateToYear"], [64, 2, 1, "", "setDays"], [64, 2, 1, "", "setFixedMaskLength"], [64, 2, 1, "", "setIgnoreRegex"], [64, 2, 1, "", "setIsRandomDateDisplacement"], [64, 2, 1, "", "setLanguage"], [64, 2, 1, "", "setMappingsColumn"], [64, 2, 1, "", "setMaskingPolicy"], [64, 2, 1, "", "setMinYear"], [64, 2, 1, "", "setMode"], [64, 2, 1, "", "setObfuscateDate"], [64, 2, 1, "", "setObfuscateRefSource"], [64, 2, 1, "", "setOutputAsDocument"], [64, 2, 1, "", "setRegexOverride"], [64, 2, 1, "", "setRegion"], [64, 2, 1, "", "setReturnEntityMappings"], [64, 2, 1, "", "setSameEntityThreshold"], [64, 2, 1, "", "setSeed"], [64, 2, 1, "", "setUnnormalizedDateMode"], [64, 2, 1, "", "setUseShifDays"], [64, 2, 1, "", "setZipCodeTag"], [64, 4, 1, "", "unnormalizedDateMode"], [64, 4, 1, "", "useShifDays"], [64, 4, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[65, 1, 1, "", "DocumentHashCoder"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder": [[65, 4, 1, "", "dateShiftColumn"], [65, 4, 1, "", "inputAnnotatorTypes"], [65, 4, 1, "", "name"], [65, 4, 1, "", "newDateShift"], [65, 4, 1, "", "outputAnnotatorType"], [65, 4, 1, "", "patientIdColumn"], [65, 4, 1, "", "rangeDays"], [65, 4, 1, "", "seed"], [65, 2, 1, "", "setDateShiftColumn"], [65, 2, 1, "", "setNewDateShift"], [65, 2, 1, "", "setParams"], [65, 2, 1, "", "setPatientIdColumn"], [65, 2, 1, "", "setRangeDays"], [65, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[67, 1, 1, "", "NameChunkObfuscator"], [67, 1, 1, "", "NameChunkObfuscatorApproach"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator": [[67, 4, 1, "", "inputAnnotatorTypes"], [67, 4, 1, "", "outputAnnotatorType"], [67, 2, 1, "", "pretrained"], [67, 4, 1, "", "seed"], [67, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach": [[67, 4, 1, "", "inputAnnotatorTypes"], [67, 4, 1, "", "obfuscateRefFile"], [67, 4, 1, "", "outputAnnotatorType"], [67, 4, 1, "", "refFileFormat"], [67, 4, 1, "", "refSep"], [67, 4, 1, "", "seed"], [67, 2, 1, "", "setObfuscateRefFile"], [67, 2, 1, "", "setRefFileFormat"], [67, 2, 1, "", "setRefSep"], [67, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.reIdentification": [[68, 1, 1, "", "ReIdentification"]], "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification": [[68, 4, 1, "", "inputAnnotatorTypes"], [68, 4, 1, "", "name"], [68, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.replacer": [[69, 1, 1, "", "Replacer"]], "sparknlp_jsl.annotator.deid.replacer.Replacer": [[69, 2, 1, "", "getUseReplacement"], [69, 4, 1, "", "inputAnnotatorTypes"], [69, 4, 1, "", "name"], [69, 4, 1, "", "outputAnnotatorType"], [69, 2, 1, "", "setUseReplacement"], [69, 4, 1, "", "useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[71, 0, 0, "-", "ner_disambiguator"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[71, 1, 1, "", "NerDisambiguator"], [71, 1, 1, "", "NerDisambiguatorModel"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator": [[71, 4, 1, "", "embeddingTypeParam"], [71, 4, 1, "", "inputAnnotatorTypes"], [71, 4, 1, "", "levenshteinDistanceThresholdParam"], [71, 4, 1, "", "narrowWithApproximateMatching"], [71, 4, 1, "", "nearMatchingGapParam"], [71, 4, 1, "", "numFirstChars"], [71, 4, 1, "", "outputAnnotatorType"], [71, 4, 1, "", "predictionsLimit"], [71, 4, 1, "", "s3KnowledgeBaseName"], [71, 2, 1, "", "setEmbeddingType"], [71, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [71, 2, 1, "", "setNarrowWithApproximateMatching"], [71, 2, 1, "", "setNearMatchingGapParam"], [71, 2, 1, "", "setNumFirstChars"], [71, 2, 1, "", "setPredictionLimit"], [71, 2, 1, "", "setS3KnowledgeBaseName"], [71, 2, 1, "", "setTokenSearch"], [71, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel": [[71, 4, 1, "", "embeddingTypeParam"], [71, 4, 1, "", "inputAnnotatorTypes"], [71, 4, 1, "", "levenshteinDistanceThresholdParam"], [71, 4, 1, "", "name"], [71, 4, 1, "", "narrowWithApproximateMatching"], [71, 4, 1, "", "nearMatchingGapParam"], [71, 4, 1, "", "numFirstChars"], [71, 4, 1, "", "outputAnnotatorType"], [71, 4, 1, "", "predictionsLimit"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setEmbeddingType"], [71, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [71, 2, 1, "", "setNarrowWithApproximateMatching"], [71, 2, 1, "", "setNearMatchingGapParam"], [71, 2, 1, "", "setNumFirstChars"], [71, 2, 1, "", "setPredictionLimit"], [71, 2, 1, "", "setTokenSearch"], [71, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[72, 1, 1, "", "Doc2ChunkInternal"]], "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal": [[72, 4, 1, "", "chunkCol"], [72, 4, 1, "", "failOnMissing"], [72, 4, 1, "", "inputAnnotatorTypes"], [72, 4, 1, "", "isArray"], [72, 4, 1, "", "lowerCase"], [72, 4, 1, "", "name"], [72, 2, 1, "", "setChunkCol"], [72, 2, 1, "", "setFailOnMissing"], [72, 2, 1, "", "setIsArray"], [72, 2, 1, "", "setLowerCase"], [72, 2, 1, "", "setParams"], [72, 2, 1, "", "setStartCol"], [72, 2, 1, "", "setStartColByTokenIndex"], [72, 4, 1, "", "startCol"], [72, 4, 1, "", "startColByTokenIndex"]], "sparknlp_jsl.annotator.embeddings": [[73, 0, 0, "-", "average_embeddings"], [74, 0, 0, "-", "bert_sentence_embeddings"], [75, 0, 0, "-", "entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[73, 1, 1, "", "AverageEmbeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings": [[73, 4, 1, "", "inputAnnotatorTypes"], [73, 4, 1, "", "name"], [73, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[74, 1, 1, "", "BertSentenceChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings": [[74, 4, 1, "", "chunkWeight"], [74, 4, 1, "", "inputAnnotatorTypes"], [74, 2, 1, "", "load"], [74, 4, 1, "", "name"], [74, 4, 1, "", "outputAnnotatorType"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[75, 1, 1, "", "EntityChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings": [[75, 4, 1, "", "entityWeights"], [75, 4, 1, "", "inputAnnotatorTypes"], [75, 4, 1, "", "maxSyntacticDistance"], [75, 4, 1, "", "name"], [75, 4, 1, "", "outputAnnotatorType"], [75, 2, 1, "", "pretrained"], [75, 2, 1, "", "setEntityWeights"], [75, 2, 1, "", "setMaxSyntacticDistance"], [75, 2, 1, "", "setTargetEntities"], [75, 4, 1, "", "targetEntities"]], "sparknlp_jsl.annotator.generic_classifier": [[77, 0, 0, "-", "generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[77, 1, 1, "", "GenericClassifierApproach"], [77, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach": [[77, 4, 1, "", "batchSize"], [77, 4, 1, "", "dropout"], [77, 4, 1, "", "epochsN"], [77, 4, 1, "", "featureScaling"], [77, 4, 1, "", "fixImbalance"], [77, 4, 1, "", "inputAnnotatorTypes"], [77, 4, 1, "", "labelColumn"], [77, 4, 1, "", "learningRate"], [77, 4, 1, "", "modelFile"], [77, 4, 1, "", "outputAnnotatorType"], [77, 4, 1, "", "outputLogsPath"], [77, 2, 1, "", "setBatchSize"], [77, 2, 1, "", "setDropout"], [77, 2, 1, "", "setEpochsNumber"], [77, 2, 1, "", "setFeatureScaling"], [77, 2, 1, "", "setFixImbalance"], [77, 2, 1, "", "setLabelCol"], [77, 2, 1, "", "setLearningRate"], [77, 2, 1, "", "setModelFile"], [77, 2, 1, "", "setOutputLogsPath"], [77, 2, 1, "", "setValidationSplit"], [77, 4, 1, "", "validationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel": [[77, 4, 1, "", "classes"], [77, 4, 1, "", "inputAnnotatorTypes"], [77, 4, 1, "", "name"], [77, 4, 1, "", "outputAnnotatorType"], [77, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.merge": [[80, 0, 0, "-", "chunk_merge"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[80, 1, 1, "", "ChunkMergeApproach"], [80, 1, 1, "", "ChunkMergeModel"], [80, 1, 1, "", "CommonChunkMergeParams"], [80, 1, 1, "", "MergePriorizationParams"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach": [[80, 4, 1, "", "falsePositivesResource"], [80, 4, 1, "", "inputAnnotatorTypes"], [80, 4, 1, "", "name"], [80, 4, 1, "", "outputAnnotatorType"], [80, 4, 1, "", "replaceDictResource"], [80, 2, 1, "", "setFalsePositivesResource"], [80, 2, 1, "", "setInputCols"], [80, 2, 1, "", "setReplaceDictResource"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel": [[80, 4, 1, "", "falsePositives"], [80, 4, 1, "", "inputAnnotatorTypes"], [80, 4, 1, "", "name"], [80, 4, 1, "", "outputAnnotatorType"], [80, 2, 1, "", "pretrained"], [80, 4, 1, "", "replaceDict"], [80, 2, 1, "", "setInputCols"]], "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams": [[80, 4, 1, "", "blackList"], [80, 4, 1, "", "mergeOverlapping"], [80, 2, 1, "", "setBlackList"], [80, 2, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams": [[80, 4, 1, "", "chunkPrecedence"], [80, 4, 1, "", "chunkPrecedenceValuePrioritization"], [80, 4, 1, "", "defaultConfidence"], [80, 4, 1, "", "orderingFeatures"], [80, 4, 1, "", "selectionStrategy"], [80, 2, 1, "", "setChunkPrecedence"], [80, 2, 1, "", "setChunkPrecedenceValuePrioritization"], [80, 2, 1, "", "setDefaultConfidence"], [80, 2, 1, "", "setOrderingFeatures"], [80, 2, 1, "", "setSelectionStrategy"]], "sparknlp_jsl.annotator.ner": [[83, 0, 0, "-", "iob_tagger"], [84, 0, 0, "-", "medical_ner"], [85, 0, 0, "-", "ner_chunker"], [86, 0, 0, "-", "ner_converter_internal"], [87, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[83, 1, 1, "", "IOBTagger"]], "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger": [[83, 4, 1, "", "inputAnnotatorTypes"], [83, 4, 1, "", "name"], [83, 4, 1, "", "outputAnnotatorType"], [83, 4, 1, "", "scheme"], [83, 2, 1, "", "setScheme"]], "sparknlp_jsl.annotator.ner.medical_ner": [[84, 1, 1, "", "MedicalNerApproach"], [84, 1, 1, "", "MedicalNerModel"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach": [[84, 4, 1, "", "batchSize"], [84, 4, 1, "", "configProtoBytes"], [84, 4, 1, "", "dropout"], [84, 4, 1, "", "earlyStoppingCriterion"], [84, 4, 1, "", "earlyStoppingPatience"], [84, 4, 1, "", "enableMemoryOptimizer"], [84, 4, 1, "", "graphFile"], [84, 4, 1, "", "graphFolder"], [84, 4, 1, "", "includeAllConfidenceScores"], [84, 4, 1, "", "includeConfidence"], [84, 4, 1, "", "inputAnnotatorTypes"], [84, 4, 1, "", "logPrefix"], [84, 4, 1, "", "lr"], [84, 4, 1, "", "outputAnnotatorType"], [84, 4, 1, "", "overrideExistingTags"], [84, 4, 1, "", "po"], [84, 4, 1, "", "pretrainedModelPath"], [84, 2, 1, "", "setBatchSize"], [84, 2, 1, "", "setConfigProtoBytes"], [84, 2, 1, "", "setDropout"], [84, 2, 1, "", "setEarlyStoppingCriterion"], [84, 2, 1, "", "setEarlyStoppingPatience"], [84, 2, 1, "", "setEnableMemoryOptimizer"], [84, 2, 1, "", "setGraphFile"], [84, 2, 1, "", "setGraphFolder"], [84, 2, 1, "", "setIncludeAllConfidenceScores"], [84, 2, 1, "", "setIncludeConfidence"], [84, 2, 1, "", "setLogPrefix"], [84, 2, 1, "", "setLr"], [84, 2, 1, "", "setOverrideExistingTags"], [84, 2, 1, "", "setPo"], [84, 2, 1, "", "setPretrainedModelPath"], [84, 2, 1, "", "setTagsMapping"], [84, 2, 1, "", "setUseBestModel"], [84, 2, 1, "", "setUseContrib"], [84, 2, 1, "", "setValidationSplit"], [84, 4, 1, "", "tagsMapping"], [84, 4, 1, "", "useBestModel"], [84, 4, 1, "", "useContrib"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel": [[84, 4, 1, "", "classes"], [84, 4, 1, "", "configProtoBytes"], [84, 2, 1, "", "getTrainingClassDistribution"], [84, 4, 1, "", "includeAllConfidenceScores"], [84, 4, 1, "", "includeConfidence"], [84, 4, 1, "", "inferenceBatchSize"], [84, 4, 1, "", "inputAnnotatorTypes"], [84, 4, 1, "", "labelCasing"], [84, 2, 1, "", "loadSavedModel"], [84, 4, 1, "", "name"], [84, 4, 1, "", "outputAnnotatorType"], [84, 2, 1, "id29", "pretrained"], [84, 2, 1, "", "setConfigProtoBytes"], [84, 2, 1, "id0", "setIncludeConfidence"], [84, 2, 1, "", "setInferenceBatchSize"], [84, 2, 1, "", "setLabelCasing"], [84, 4, 1, "", "trainingClassDistribution"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[85, 1, 1, "", "NerChunker"]], "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker": [[85, 4, 1, "", "inputAnnotatorTypes"], [85, 4, 1, "", "name"], [85, 4, 1, "", "outputAnnotatorType"], [85, 4, 1, "", "regexParsers"], [85, 2, 1, "", "setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[86, 1, 1, "", "CommonNerConverterInternalParams"], [86, 1, 1, "", "NerConverterInternal"], [86, 1, 1, "", "NerConverterInternalModel"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams": [[86, 4, 1, "", "blackList"], [86, 4, 1, "", "greedyMode"], [86, 4, 1, "", "ignoreStopWords"], [86, 4, 1, "", "preservePosition"], [86, 2, 1, "", "setBlackList"], [86, 2, 1, "", "setGreedyMode"], [86, 2, 1, "", "setIgnoreStopWords"], [86, 2, 1, "", "setPreservePosition"], [86, 2, 1, "", "setThreshold"], [86, 2, 1, "", "setWhiteList"], [86, 4, 1, "", "threshold"], [86, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal": [[86, 4, 1, "", "inputAnnotatorTypes"], [86, 4, 1, "", "name"], [86, 4, 1, "", "outputAnnotatorType"], [86, 4, 1, "", "replaceDictResource"], [86, 4, 1, "", "replaceLabels"], [86, 2, 1, "", "setReplaceDictResource"], [86, 2, 1, "", "setReplaceLabels"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel": [[86, 4, 1, "", "inputAnnotatorTypes"], [86, 4, 1, "", "name"], [86, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[87, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel": [[87, 2, 1, "", "getClasses"], [87, 4, 1, "", "ignoreEntities"], [87, 4, 1, "", "inputAnnotatorTypes"], [87, 2, 1, "", "load"], [87, 4, 1, "", "name"], [87, 4, 1, "", "outputAnnotatorType"], [87, 4, 1, "", "predictionThreshold"], [87, 2, 1, "", "pretrained"], [87, 2, 1, "", "setEntityDefinitions"], [87, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.normalizer": [[88, 0, 0, "-", "date_normalizer"], [89, 0, 0, "-", "drug_normalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[88, 1, 1, "", "DateNormalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer": [[88, 4, 1, "", "anchorDateDay"], [88, 4, 1, "", "anchorDateMonth"], [88, 4, 1, "", "anchorDateYear"], [88, 4, 1, "", "defaultReplacementDay"], [88, 4, 1, "", "defaultReplacementMonth"], [88, 4, 1, "", "defaultReplacementYear"], [88, 4, 1, "", "inputAnnotatorTypes"], [88, 4, 1, "", "name"], [88, 4, 1, "", "outputAnnotatorType"], [88, 4, 1, "", "outputDateFormat"], [88, 2, 1, "", "setAnchorDateDay"], [88, 2, 1, "", "setAnchorDateMonth"], [88, 2, 1, "", "setAnchorDateYear"], [88, 2, 1, "", "setDefaultReplacementDay"], [88, 2, 1, "", "setDefaultReplacementMonth"], [88, 2, 1, "", "setDefaultReplacementYear"], [88, 2, 1, "", "setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[89, 1, 1, "", "DrugNormalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer": [[89, 4, 1, "", "inputAnnotatorTypes"], [89, 4, 1, "", "lowercase"], [89, 4, 1, "", "outputAnnotatorType"], [89, 4, 1, "", "policy"], [89, 2, 1, "", "setLowercase"], [89, 2, 1, "", "setPolicy"]], "sparknlp_jsl.annotator.qa": [[92, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[92, 1, 1, "", "NerQuestionGenerator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator": [[92, 4, 1, "", "entities1"], [92, 4, 1, "", "entities2"], [92, 4, 1, "", "inputAnnotatorTypes"], [92, 4, 1, "", "name"], [92, 4, 1, "", "outputAnnotatorType"], [92, 4, 1, "", "questionMark"], [92, 4, 1, "", "questionPronoun"], [92, 2, 1, "", "setEntities1"], [92, 2, 1, "", "setEntities2"], [92, 2, 1, "", "setQuestionMark"], [92, 2, 1, "", "setQuestionPronoun"], [92, 2, 1, "", "setStrategyType"], [92, 4, 1, "", "strategyType"]], "sparknlp_jsl.annotator.re": [[94, 0, 0, "-", "relation_extraction"], [95, 0, 0, "-", "relation_extraction_dl"], [96, 0, 0, "-", "relation_ner_chunk_filter"], [97, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction": [[94, 1, 1, "", "GenericREModel"], [94, 1, 1, "", "PosologyREModel"], [94, 1, 1, "", "RelationExtractionApproach"], [94, 1, 1, "", "RelationExtractionModel"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach": [[94, 4, 1, "", "customLabels"], [94, 4, 1, "", "fromEntityBeginCol"], [94, 4, 1, "", "fromEntityEndCol"], [94, 4, 1, "", "fromEntityLabelCol"], [94, 4, 1, "", "inputAnnotatorTypes"], [94, 4, 1, "", "maxSyntacticDistance"], [94, 4, 1, "", "name"], [94, 4, 1, "", "outputAnnotatorType"], [94, 4, 1, "", "overrideExistingLabels"], [94, 4, 1, "", "pretrainedModelPath"], [94, 4, 1, "", "relationDirectionCol"], [94, 2, 1, "", "setCustomLabels"], [94, 2, 1, "", "setFromEntity"], [94, 2, 1, "", "setMaxSyntacticDistance"], [94, 2, 1, "", "setPretrainedModelPath"], [94, 2, 1, "", "setRelationDirectionCol"], [94, 2, 1, "", "setToEntity"], [94, 2, 1, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels", "set\u041everrideExistingLabels"], [94, 4, 1, "", "toEntityBeginCol"], [94, 4, 1, "", "toEntityEndCol"], [94, 4, 1, "", "toEntityLabelCol"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel": [[94, 4, 1, "", "classes"], [94, 2, 1, "", "getClasses"], [94, 4, 1, "", "inputAnnotatorTypes"], [94, 4, 1, "", "maxSyntacticDistance"], [94, 4, 1, "", "name"], [94, 4, 1, "", "outputAnnotatorType"], [94, 4, 1, "", "predictionThreshold"], [94, 2, 1, "", "pretrained"], [94, 4, 1, "", "relationPairs"], [94, 4, 1, "", "relationPairsCaseSensitive"], [94, 2, 1, "", "setCustomLabels"], [94, 2, 1, "", "setMaxSyntacticDistance"], [94, 2, 1, "", "setPredictionThreshold"], [94, 2, 1, "", "setRelationPairs"], [94, 2, 1, "", "setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[95, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel": [[95, 4, 1, "", "batchSize"], [95, 4, 1, "", "classes"], [95, 4, 1, "", "customLabels"], [95, 2, 1, "", "getClasses"], [95, 4, 1, "", "inputAnnotatorTypes"], [95, 2, 1, "", "loadSavedModel"], [95, 4, 1, "", "name"], [95, 4, 1, "", "outputAnnotatorType"], [95, 4, 1, "", "predictionThreshold"], [95, 2, 1, "", "pretrained"], [95, 2, 1, "", "setBatchSize"], [95, 2, 1, "", "setCaseSensitive"], [95, 2, 1, "", "setCustomLabels"], [95, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[96, 1, 1, "", "RENerChunksFilter"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter": [[96, 4, 1, "", "docLevelRelations"], [96, 4, 1, "", "inputAnnotatorTypes"], [96, 4, 1, "", "maxSyntacticDistance"], [96, 4, 1, "", "name"], [96, 4, 1, "", "outputAnnotatorType"], [96, 4, 1, "", "relationPairs"], [96, 4, 1, "", "relationPairsCaseSensitive"], [96, 2, 1, "", "setDocLevelRelations"], [96, 2, 1, "", "setMaxSyntacticDistance"], [96, 2, 1, "", "setRelationPairs"], [96, 2, 1, "", "setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[97, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[97, 2, 1, "", "getClasses"], [97, 4, 1, "", "inputAnnotatorTypes"], [97, 2, 1, "", "loadSavedModel"], [97, 4, 1, "", "multiLabel"], [97, 4, 1, "", "outputAnnotatorType"], [97, 4, 1, "", "predictionThreshold"], [97, 2, 1, "", "pretrained"], [97, 2, 1, "", "setRelationalCategories"]], "sparknlp_jsl.annotator.resolution": [[99, 0, 0, "-", "resolver_merger"], [100, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[99, 1, 1, "", "ResolverMerger"]], "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger": [[99, 4, 1, "", "inputAnnotatorTypes"], [99, 4, 1, "", "name"], [99, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[100, 1, 1, "", "SentenceEntityResolverApproach"], [100, 1, 1, "", "SentenceEntityResolverModel"], [100, 1, 1, "", "SentenceResolverParams"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[100, 4, 1, "", "aux_label_col"], [100, 4, 1, "", "dropCodesList"], [100, 4, 1, "", "inputAnnotatorTypes"], [100, 4, 1, "", "labelCol"], [100, 4, 1, "", "normalizedCol"], [100, 4, 1, "", "outputAnnotatorType"], [100, 4, 1, "", "overrideExistingCodes"], [100, 4, 1, "", "pretrainedModelPath"], [100, 4, 1, "", "returnCosineDistances"], [100, 2, 1, "", "setAuxLabelCol"], [100, 2, 1, "", "setDropCodesList"], [100, 2, 1, "", "setExtractCosineDistances"], [100, 2, 1, "", "setLabelCol"], [100, 2, 1, "", "setNormalizedCol"], [100, 2, 1, "", "setOverrideExistingCodes"], [100, 2, 1, "", "setPretrainedModelPath"], [100, 2, 1, "", "setUseAuxLabel"], [100, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[100, 4, 1, "", "aux_label_col"], [100, 4, 1, "", "inputAnnotatorTypes"], [100, 4, 1, "", "name"], [100, 4, 1, "", "outputAnnotatorType"], [100, 2, 1, "", "pretrained"], [100, 4, 1, "", "returnCosineDistances"], [100, 4, 1, "", "searchTree"], [100, 2, 1, "", "setAuxLabelCol"], [100, 2, 1, "", "setSearchTree"], [100, 2, 1, "", "setUseAuxLabel"], [100, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams": [[100, 4, 1, "", "confidenceFunction"], [100, 4, 1, "", "distanceFunction"], [100, 4, 1, "", "inputAnnotatorTypes"], [100, 4, 1, "", "missAsEmpty"], [100, 4, 1, "", "neighbours"], [100, 2, 1, "", "setConfidenceFunction"], [100, 2, 1, "", "setDistanceFunction"], [100, 2, 1, "", "setMissAsEmpty"], [100, 2, 1, "", "setNeighbours"], [100, 2, 1, "", "setThreshold"], [100, 4, 1, "", "threshold"]], "sparknlp_jsl.annotator.resolution2_chunk": [[101, 1, 1, "", "Resolution2Chunk"]], "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk": [[101, 4, 1, "", "inputAnnotatorTypes"], [101, 4, 1, "", "name"], [101, 4, 1, "", "outputAnnotatorType"], [101, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.router": [[102, 1, 1, "", "Router"]], "sparknlp_jsl.annotator.router.Router": [[102, 4, 1, "", "filterFieldsElements"], [102, 4, 1, "", "inputAnnotatorTypes"], [102, 4, 1, "", "inputType"], [102, 4, 1, "", "metadataField"], [102, 4, 1, "", "name"], [102, 4, 1, "", "outputAnnotatorType"], [102, 2, 1, "", "setFilterFieldsElements"], [102, 2, 1, "", "setInputCols"], [102, 2, 1, "", "setInputType"], [102, 2, 1, "", "setMetadataField"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[103, 1, 1, "", "SourceTrackingMetadataParams"]], "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams": [[103, 4, 1, "", "allPossibleFieldsToStandardize"], [103, 4, 1, "", "includeOutputColumn"], [103, 4, 1, "", "includeStandardField"], [103, 4, 1, "", "outputColumnKey"], [103, 2, 1, "", "setAllPossibleFieldsToStandardize"], [103, 2, 1, "", "setIncludeOutputColumn"], [103, 2, 1, "", "setIncludeStandardField"], [103, 2, 1, "", "setOutputColumnKey"], [103, 2, 1, "", "setStandardFieldKey"], [103, 4, 1, "", "standardFieldKey"]], "sparknlp_jsl.annotator.tf_graph_builder": [[104, 1, 1, "", "TFGraphBuilder"], [104, 1, 1, "", "TFGraphBuilderModel"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder": [[104, 4, 1, "", "batchNorm"], [104, 2, 1, "", "getBatchNorm"], [104, 2, 1, "", "getGraphFile"], [104, 2, 1, "", "getGraphFolder"], [104, 2, 1, "", "getHiddenAct"], [104, 2, 1, "", "getHiddenActL2"], [104, 2, 1, "", "getHiddenLayers"], [104, 2, 1, "", "getHiddenUnitsNumber"], [104, 2, 1, "", "getHiddenWeightsL2"], [104, 2, 1, "", "getInputCols"], [104, 2, 1, "", "getIsLicensed"], [104, 2, 1, "", "getLabelColumn"], [104, 2, 1, "", "getMaxSequenceLength"], [104, 2, 1, "", "getModelName"], [104, 2, 1, "", "getUseRelationDirection"], [104, 4, 1, "", "graphFile"], [104, 4, 1, "", "graphFolder"], [104, 4, 1, "", "hiddenAct"], [104, 4, 1, "", "hiddenActL2"], [104, 4, 1, "", "hiddenLayers"], [104, 4, 1, "", "hiddenUnitsNumber"], [104, 4, 1, "", "hiddenWeightsL2"], [104, 4, 1, "", "inputCols"], [104, 4, 1, "", "isLicensed"], [104, 4, 1, "", "labelColumn"], [104, 4, 1, "", "maxSequenceLength"], [104, 4, 1, "", "modelName"], [104, 2, 1, "", "setBatchNorm"], [104, 2, 1, "", "setGraphFile"], [104, 2, 1, "", "setGraphFolder"], [104, 2, 1, "", "setHiddenAct"], [104, 2, 1, "", "setHiddenActL2"], [104, 2, 1, "", "setHiddenLayers"], [104, 2, 1, "", "setHiddenUnitsNumber"], [104, 2, 1, "", "setHiddenWeightsL2"], [104, 2, 1, "", "setInputCols"], [104, 2, 1, "", "setIsLicensed"], [104, 2, 1, "", "setLabelColumn"], [104, 2, 1, "", "setMaxSequenceLength"], [104, 2, 1, "", "setModelName"], [104, 2, 1, "", "setUseRelationDirection"], [104, 4, 1, "", "useRelationDirection"]], "sparknlp_jsl.base": [[105, 1, 1, "", "FeaturesAssembler"]], "sparknlp_jsl.base.FeaturesAssembler": [[105, 4, 1, "", "inputCols"], [105, 4, 1, "", "name"], [105, 4, 1, "", "outputCol"], [105, 2, 1, "", "setInputCols"], [105, 2, 1, "", "setOutputCol"], [105, 2, 1, "", "setParams"]], "sparknlp_jsl.common": [[106, 0, 0, "-", "annotator_approach_internal"], [107, 0, 0, "-", "annotator_model_internal"], [108, 0, 0, "-", "annotator_properties_internal"]], "sparknlp_jsl.common.annotator_approach_internal": [[106, 1, 1, "", "AnnotatorApproachInternal"]], "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal": [[106, 4, 1, "", "inputAnnotatorTypes"], [106, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.common.annotator_model_internal": [[107, 1, 1, "", "AnnotatorModelInternal"]], "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal": [[107, 4, 1, "", "inputAnnotatorTypes"], [107, 4, 1, "", "outputAnnotatorType"], [107, 2, 1, "", "setParams"]], "sparknlp_jsl.common.annotator_properties_internal": [[108, 1, 1, "", "AnnotatorPropertiesInternal"]], "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal": [[108, 2, 1, "", "inputColsValidation"], [108, 2, 1, "", "setForceInputTypeValidation"]], "sparknlp_jsl.compatibility": [[110, 1, 1, "", "Compatibility"]], "sparknlp_jsl.compatibility.Compatibility": [[110, 2, 1, "", "findVersion"], [110, 2, 1, "", "showVersion"]], "sparknlp_jsl.custom_transformer": [[111, 1, 1, "", "CustomTransformer"]], "sparknlp_jsl.custom_transformer.CustomTransformer": [[111, 4, 1, "", "f"], [111, 2, 1, "", "setInputCol"], [111, 2, 1, "", "setOutputCol"]], "sparknlp_jsl.eval": [[112, 1, 1, "", "NerCrfEvaluation"], [112, 1, 1, "", "NerDLEvaluation"], [112, 1, 1, "", "NerDLMetrics"], [112, 1, 1, "", "NorvigSpellEvaluation"], [112, 1, 1, "", "POSEvaluation"], [112, 1, 1, "", "SymSpellEvaluation"]], "sparknlp_jsl.eval.NerCrfEvaluation": [[112, 2, 1, "", "computeAccuracyAnnotator"], [112, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLEvaluation": [[112, 2, 1, "", "computeAccuracyAnnotator"], [112, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLMetrics": [[112, 2, 1, "", "computeMetricsFromDF"]], "sparknlp_jsl.eval.NorvigSpellEvaluation": [[112, 2, 1, "", "computeAccuracyAnnotator"], [112, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.POSEvaluation": [[112, 2, 1, "", "computeAccuracyAnnotator"], [112, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.SymSpellEvaluation": [[112, 2, 1, "", "computeAccuracyAnnotator"], [112, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.finance": [[118, 0, 0, "-", "chunk_classification"], [123, 0, 0, "-", "graph"], [128, 0, 0, "-", "seq_generation"], [133, 0, 0, "-", "sequence_classification"], [134, 0, 0, "-", "token_classification"]], "sparknlp_jsl.finance.chunk_classification": [[114, 0, 0, "-", "assertion"], [117, 0, 0, "-", "deid"], [121, 0, 0, "-", "resolution"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[113, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[113, 1, 1, "", "AssertionDLApproach"], [113, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel": [[113, 4, 1, "", "name"], [113, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid": [[115, 0, 0, "-", "deIdentification"], [116, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[115, 1, 1, "", "DeIdentification"], [115, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification": [[115, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel": [[115, 4, 1, "", "name"], [115, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[116, 1, 1, "", "FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[119, 0, 0, "-", "chunkmapper"], [120, 0, 0, "-", "docmapper"], [122, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[119, 1, 1, "", "ChunkMapperApproach"], [119, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[119, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[119, 4, 1, "", "name"], [119, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[120, 1, 1, "", "DocMapperApproach"], [120, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach": [[120, 4, 1, "", "dictionary"], [120, 4, 1, "", "inputAnnotatorTypes"], [120, 4, 1, "", "name"], [120, 4, 1, "", "outputAnnotatorType"], [120, 2, 1, "", "setDictionary"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel": [[120, 4, 1, "", "inputAnnotatorTypes"], [120, 4, 1, "", "name"], [120, 4, 1, "", "outputAnnotatorType"], [120, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[122, 1, 1, "", "SentenceEntityResolverApproach"], [122, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[122, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph": [[124, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction": [[125, 0, 0, "-", "relation_extraction_dl"], [126, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[125, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[125, 2, 1, "", "loadSavedModel"], [125, 4, 1, "", "name"], [125, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[126, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[126, 2, 1, "", "loadSavedModel"], [126, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.seq_generation": [[129, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.finance.seq_generation.qa_ner_generator": [[129, 1, 1, "", "FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.sequence_classification": [[130, 0, 0, "-", "finance_bert_for_sequence_classification"], [131, 0, 0, "-", "finance_classifier_dl"], [132, 0, 0, "-", "finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[130, 1, 1, "", "FinanceBertForSequenceClassification"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification": [[130, 2, 1, "", "loadSavedModel"], [130, 2, 1, "", "loadSavedModelOpenSource"], [130, 4, 1, "", "name"], [130, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[131, 1, 1, "", "FinanceClassifierDLApproach"], [131, 1, 1, "", "FinanceClassifierDLModel"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel": [[131, 4, 1, "", "name"], [131, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[132, 1, 1, "", "FinanceDocumentMLClassifierApproach"], [132, 1, 1, "", "FinanceDocumentMLClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel": [[132, 4, 1, "", "name"], [132, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification": [[137, 0, 0, "-", "ner"]], "sparknlp_jsl.finance.token_classification.ner": [[135, 0, 0, "-", "finance_bert_for_token_classifier"], [136, 0, 0, "-", "finance_ner"], [138, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[135, 1, 1, "", "FinanceBertForTokenClassification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification": [[135, 2, 1, "", "loadSavedModel"], [135, 2, 1, "", "loadSavedModelOpenSource"], [135, 4, 1, "", "name"], [135, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[136, 1, 1, "", "FinanceNerApproach"], [136, 1, 1, "", "FinanceNerModel"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel": [[136, 2, 1, "", "loadSavedModel"], [136, 4, 1, "", "name"], [136, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[138, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[138, 2, 1, "", "load"], [138, 4, 1, "", "name"], [138, 2, 1, "", "pretrained"]], "sparknlp_jsl.functions": [[139, 6, 1, "", "profile"], [139, 6, 1, "", "profileV22"], [139, 6, 1, "", "profileV22Y17"], [139, 6, 1, "", "profileV22Y18"], [139, 6, 1, "", "profileV22Y19"], [139, 6, 1, "", "profileV22Y20"], [139, 6, 1, "", "profileV22Y21"], [139, 6, 1, "", "profileV22Y22"], [139, 6, 1, "", "profileV23"], [139, 6, 1, "", "profileV23Y18"], [139, 6, 1, "", "profileV23Y19"], [139, 6, 1, "", "profileV24Y17"], [139, 6, 1, "", "profileV24Y18"], [139, 6, 1, "", "profileV24Y19"], [139, 6, 1, "", "profileV24Y20"], [139, 6, 1, "", "profileV24Y21"], [139, 6, 1, "", "profileV24Y22"]], "sparknlp_jsl.internal": [[141, 6, 1, "", "CustomLabels"], [141, 6, 1, "", "EntityWeights"], [141, 6, 1, "", "RelationalCategories"], [141, 6, 1, "", "TargetEntities"]], "sparknlp_jsl.legal": [[147, 0, 0, "-", "chunk_classification"], [152, 0, 0, "-", "graph"], [157, 0, 0, "-", "seq_generation"], [159, 0, 0, "-", "sequence_classification"], [163, 0, 0, "-", "token_classification"]], "sparknlp_jsl.legal.chunk_classification": [[143, 0, 0, "-", "assertion"], [146, 0, 0, "-", "deid"], [150, 0, 0, "-", "resolution"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[142, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[142, 1, 1, "", "AssertionDLApproach"], [142, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel": [[142, 4, 1, "", "name"], [142, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid": [[144, 0, 0, "-", "deIdentification"], [145, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[144, 1, 1, "", "DeIdentification"], [144, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification": [[144, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel": [[144, 4, 1, "", "name"], [144, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[145, 1, 1, "", "LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[148, 0, 0, "-", "chunkmapper"], [149, 0, 0, "-", "docmapper"], [151, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[148, 1, 1, "", "ChunkMapperApproach"], [148, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[148, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[148, 4, 1, "", "name"], [148, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[149, 1, 1, "", "DocMapperApproach"], [149, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach": [[149, 4, 1, "", "dictionary"], [149, 4, 1, "", "inputAnnotatorTypes"], [149, 4, 1, "", "name"], [149, 4, 1, "", "outputAnnotatorType"], [149, 2, 1, "", "setDictionary"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel": [[149, 4, 1, "", "inputAnnotatorTypes"], [149, 4, 1, "", "name"], [149, 4, 1, "", "outputAnnotatorType"], [149, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[151, 1, 1, "", "SentenceEntityResolverApproach"], [151, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[151, 4, 1, "", "name"], [151, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph": [[153, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction": [[154, 0, 0, "-", "relation_extraction_dl"], [155, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[154, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[154, 2, 1, "", "loadSavedModel"], [154, 4, 1, "", "name"], [154, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[155, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[155, 2, 1, "", "loadSavedModel"], [155, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.seq_generation": [[158, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.legal.seq_generation.qa_ner_generator": [[158, 1, 1, "", "LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.sequence_classification": [[160, 0, 0, "-", "legal_bert_for_sequence_classification"], [161, 0, 0, "-", "legal_classifier_dl"], [162, 0, 0, "-", "legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[160, 1, 1, "", "LegalBertForSequenceClassification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification": [[160, 2, 1, "", "loadSavedModel"], [160, 2, 1, "", "loadSavedModelOpenSource"], [160, 4, 1, "", "name"], [160, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[161, 1, 1, "", "LegalClassifierDLApproach"], [161, 1, 1, "", "LegalClassifierDLModel"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel": [[161, 4, 1, "", "name"], [161, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[162, 1, 1, "", "LegalDocumentMLClassifierApproach"], [162, 1, 1, "", "LegalDocumentMLClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel": [[162, 4, 1, "", "name"], [162, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification": [[164, 0, 0, "-", "ner"]], "sparknlp_jsl.legal.token_classification.ner": [[165, 0, 0, "-", "legal_bert_for_token_classifier"], [166, 0, 0, "-", "legal_ner"], [167, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[165, 1, 1, "", "LegalBertForTokenClassification"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification": [[165, 2, 1, "", "loadSavedModel"], [165, 2, 1, "", "loadSavedModelOpenSource"], [165, 4, 1, "", "name"], [165, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[166, 1, 1, "", "LegalNerApproach"], [166, 1, 1, "", "LegalNerModel"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel": [[166, 2, 1, "", "loadSavedModel"], [166, 4, 1, "", "name"], [166, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[167, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[167, 2, 1, "", "load"], [167, 4, 1, "", "name"], [167, 2, 1, "", "pretrained"]], "sparknlp_jsl.modelTracer": [[168, 1, 1, "", "ModelTracer"]], "sparknlp_jsl.modelTracer.ModelTracer": [[168, 2, 1, "", "addUidCols"]], "sparknlp_jsl.nlp_test": [[170, 0, 0, "-", "bias"], [172, 0, 0, "-", "noisy_labels"], [176, 0, 0, "-", "robustness"]], "sparknlp_jsl.nlp_test.bias": [[169, 0, 0, "-", "bias_testing"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[169, 1, 1, "", "RuleBasedClassifier"], [169, 6, 1, "", "init_medical_gender_classifier"], [169, 6, 1, "", "test_gender_bias"]], "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier": [[169, 2, 1, "", "transform"]], "sparknlp_jsl.nlp_test.noisy_labels": [[173, 0, 0, "-", "noisy_label_fixing"], [174, 0, 0, "-", "noisy_label_testing"], [175, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[173, 1, 1, "", "InteractiveFix"], [173, 6, 1, "", "add_flag_to_conll"], [173, 6, 1, "", "apply_label_fixes"], [173, 6, 1, "", "conll_reader"], [173, 6, 1, "", "conll_writer"], [173, 6, 1, "", "update_with_model_predictions"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix": [[173, 2, 1, "", "adjust_page_size"], [173, 2, 1, "", "apply_fixes"], [173, 2, 1, "", "create_grid"], [173, 2, 1, "", "display"], [173, 2, 1, "", "empty_grid"], [173, 2, 1, "", "fill_grid"], [173, 2, 1, "", "fix_all"], [173, 2, 1, "", "fix_label"], [173, 2, 1, "", "get_cell_element"], [173, 2, 1, "", "get_central_grid"], [173, 2, 1, "", "get_classes"], [173, 2, 1, "", "get_default_indx"], [173, 2, 1, "", "get_drop_down"], [173, 2, 1, "", "get_drop_down_title"], [173, 2, 1, "", "get_footer"], [173, 2, 1, "", "get_header"], [173, 2, 1, "", "get_page_control_buttons"], [173, 2, 1, "", "get_page_number"], [173, 2, 1, "", "get_sentence"], [173, 2, 1, "", "get_title_html"], [173, 2, 1, "", "next_page"], [173, 2, 1, "", "num_sample_drop_down"], [173, 2, 1, "", "prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[174, 6, 1, "", "calculate_label_error_score"], [174, 6, 1, "", "get_label_quality_scores"], [174, 6, 1, "", "get_unique_entities"], [174, 6, 1, "", "test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[175, 3, 1, "", "stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[177, 0, 0, "-", "robustness_fixing"], [178, 0, 0, "-", "robustness_testing"], [179, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[177, 6, 1, "", "add_context_to_data"], [177, 6, 1, "", "add_contractions"], [177, 6, 1, "", "add_punctuation_to_data"], [177, 6, 1, "", "add_typo_to_sentence"], [177, 6, 1, "", "augment_robustness"], [177, 6, 1, "", "conll_reader"], [177, 6, 1, "", "convert_accent"], [177, 6, 1, "", "create_dataframe"], [177, 6, 1, "", "create_terminology"], [177, 6, 1, "", "filter_by_entity_type"], [177, 6, 1, "", "get_cohyponyms_wordnet"], [177, 6, 1, "", "get_sample"], [177, 6, 1, "", "introduce_typos"], [177, 6, 1, "", "modify_capitalization_lower"], [177, 6, 1, "", "modify_capitalization_title"], [177, 6, 1, "", "modify_capitalization_upper"], [177, 6, 1, "", "strip_punctuation_from_data"], [177, 6, 1, "", "swap_entities_with_terminology"], [177, 6, 1, "", "swap_with_cohyponym"], [177, 6, 1, "", "test_and_augment_robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[178, 6, 1, "", "add_context"], [178, 6, 1, "", "add_contractions"], [178, 6, 1, "", "add_punctuation"], [178, 6, 1, "", "add_typo_to_sentence"], [178, 6, 1, "", "american_to_british"], [178, 6, 1, "", "british_to_american"], [178, 6, 1, "", "calculate_metrics"], [178, 6, 1, "", "conll_sentence_reader"], [178, 6, 1, "", "create_terminology"], [178, 6, 1, "", "get_cohyponyms_wordnet"], [178, 6, 1, "", "introduce_typos"], [178, 6, 1, "", "modify_capitalization"], [178, 6, 1, "", "remove_context_tokens"], [178, 6, 1, "", "remove_contraction_tokens"], [178, 6, 1, "", "remove_punctuation_tokens"], [178, 6, 1, "", "run_test"], [178, 6, 1, "", "strip_punctuation"], [178, 6, 1, "", "swap_named_entities_from_terminology"], [178, 6, 1, "", "swap_with_cohyponym"], [178, 6, 1, "", "test_robustness"]], "sparknlp_jsl.nlp_test.robustness.utils": [[179, 6, 1, "", "calculate_proportion"], [179, 6, 1, "", "get_augmentation_proportions"], [179, 6, 1, "", "suggest_perturbations"]], "sparknlp_jsl.pretrained": [[180, 1, 1, "", "InternalResourceDownloader"], [180, 6, 1, "", "printProgress"]], "sparknlp_jsl.pretrained.InternalResourceDownloader": [[180, 2, 1, "", "downloadModel"], [180, 2, 1, "", "returnPrivateModels"], [180, 2, 1, "", "returnPrivatePipelines"], [180, 2, 1, "", "showAvailableAnnotators"], [180, 2, 1, "", "showPrivateModels"], [180, 2, 1, "", "showPrivatePipelines"], [180, 2, 1, "", "showUnCategorizedResources"]], "sparknlp_jsl.structured_deidentification": [[181, 1, 1, "", "StructuredDeidentification"]], "sparknlp_jsl.structured_deidentification.StructuredDeidentification": [[181, 2, 1, "", "obfuscateColumns"]], "sparknlp_jsl.text_to_documents_columns": [[182, 1, 1, "", "TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns": [[182, 2, 1, "", "toDocumentsColumns"]], "sparknlp_jsl.training": [[183, 1, 1, "", "AnnotationToolJsonReader"], [183, 1, 1, "", "CantemistReader"], [183, 1, 1, "", "CodiEspReader"], [183, 1, 1, "", "REDatasetHelper"], [183, 1, 1, "", "SynonymAugmentationUMLS"], [183, 3, 1, "", "tf_graph"], [183, 3, 1, "", "tf_graph_1x"]], "sparknlp_jsl.training.AnnotationToolJsonReader": [[183, 2, 1, "", "generateAssertionTrainSet"], [183, 2, 1, "", "generateConll"], [183, 2, 1, "", "generatePlainAssertionTrainSet"], [183, 2, 1, "", "readDataset"]], "sparknlp_jsl.training.CantemistReader": [[183, 2, 1, "", "readDatasetTaskNer"]], "sparknlp_jsl.training.CodiEspReader": [[183, 2, 1, "", "readDatasetTaskX"]], "sparknlp_jsl.training.REDatasetHelper": [[183, 2, 1, "", "create_annotation_column"]], "sparknlp_jsl.training.SynonymAugmentationUMLS": [[183, 2, 1, "", "augmentCsv"], [183, 2, 1, "", "augmentDataFrame"]], "sparknlp_jsl.training_log_parser": [[184, 1, 1, "", "assertion_log_parser"], [184, 1, 1, "", "ner_log_parser"]], "sparknlp_jsl.training_log_parser.assertion_log_parser": [[184, 2, 1, "", "get_best_f1_scores"], [184, 2, 1, "", "get_charts"], [184, 2, 1, "", "loss_plot"], [184, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.training_log_parser.ner_log_parser": [[184, 2, 1, "", "evaluate"], [184, 2, 1, "", "evaluate_conll_file"], [184, 2, 1, "", "get_best_f1_scores"], [184, 2, 1, "", "get_charts"], [184, 2, 1, "", "loss_plot"], [184, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.updateModels": [[185, 1, 1, "", "UpdateModels"]], "sparknlp_jsl.updateModels.UpdateModels": [[185, 2, 1, "", "updateCacheModels"], [185, 2, 1, "", "updateModels"]], "sparknlp_jsl.util": [[186, 6, 1, "", "get_mt_samples"]], "sparknlp_jsl.utils": [[187, 0, 0, "-", "alab_utils"], [188, 0, 0, "-", "conll_parse"], [189, 0, 0, "-", "imports"], [191, 0, 0, "-", "licensed_annotator_type"], [192, 0, 0, "-", "log_parse"], [193, 0, 0, "-", "ner_utils"], [194, 0, 0, "-", "ocr_nlp_processor"], [195, 0, 0, "-", "ocr_utils"], [196, 0, 0, "-", "training_log_parser_utils"]], "sparknlp_jsl.utils.alab_utils": [[187, 3, 1, "", "document_assembler"], [187, 3, 1, "", "empty_df"], [187, 6, 1, "", "get_doc_assembler"], [187, 6, 1, "", "get_empty_df"], [187, 6, 1, "", "get_ner_df"], [187, 6, 1, "", "get_ner_sentence_borders"], [187, 6, 1, "", "get_nlp_pos_pipeline"], [187, 6, 1, "", "get_nlp_token_pipeline"], [187, 6, 1, "", "get_pos"], [187, 6, 1, "", "get_regex_tokenizer"], [187, 6, 1, "", "get_regular_tokenizer"], [187, 6, 1, "", "get_rel_df"], [187, 6, 1, "", "get_sent_detector"], [187, 6, 1, "", "get_sentence_pipeline"], [187, 6, 1, "", "get_single_task_conll"], [187, 6, 1, "", "get_token_df"], [187, 3, 1, "", "nlp_pos_pipeline"], [187, 3, 1, "", "nlp_token_pipeline"], [187, 3, 1, "", "pos"], [187, 3, 1, "", "pos_pipeline_initialized"], [187, 3, 1, "", "regex_tokenizer"], [187, 3, 1, "", "regular_tokenizer"], [187, 3, 1, "", "sentence_detector"], [187, 3, 1, "", "token_pipeline_initialized"]], "sparknlp_jsl.utils.imports": [[189, 6, 1, "", "is_module_importable"]], "sparknlp_jsl.utils.licensed_annotator_type": [[191, 1, 1, "", "InternalAnnotatorType"]], "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType": [[191, 4, 1, "", "ASSERTION"], [191, 4, 1, "", "DISAMBIGUATION"], [191, 4, 1, "", "FEATURE_VECTOR"], [191, 4, 1, "", "KEYWORD"], [191, 4, 1, "", "SELECTOR"], [191, 4, 1, "", "SQL"]], "sparknlp_jsl.utils.ner_utils": [[193, 6, 1, "", "evaluate"], [193, 6, 1, "", "evaluate_conll_file"], [193, 6, 1, "", "get_charts"], [193, 6, 1, "", "loss_plot"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[194, 3, 1, "", "colors"], [194, 6, 1, "", "ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_utils": [[195, 3, 1, "", "colors"], [195, 3, 1, "", "colors_rgb"], [195, 3, 1, "", "label2color"], [195, 3, 1, "", "label2rgb"]], "sparknlp_jsl.utils.training_log_parser_utils": [[196, 6, 1, "", "aggregate_entities"], [196, 6, 1, "", "calc_metrics"], [196, 6, 1, "", "count_chunks"], [196, 6, 1, "", "get_result"], [196, 6, 1, "", "is_chunk_end"], [196, 6, 1, "", "is_chunk_start"], [196, 6, 1, "", "split_tag"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:data", "4": "py:attribute", "5": "py:exception", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"], "6": ["py", "function", "Python function"]}, "titleterms": {"get": 0, "start": 0, "requir": 0, "instal": 0, "spark": [0, 1], "nlp": [0, 1], "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 144, 145, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 168, 169, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 193, 194, 195, 196], "sparknlp_jsl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196], "_tf_graph_build": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "assertion_dl": [2, 3, 25, 26], "assertion_model": [2, 25], "modul": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 139, 141, 142, 144, 145, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 168, 169, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197], "class": [2, 4, 6, 8, 9, 10, 13, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 77, 80, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 119, 120, 122, 125, 126, 129, 130, 131, 132, 135, 136, 138, 142, 144, 145, 148, 149, 151, 154, 155, 158, 160, 161, 162, 165, 166, 167, 168, 169, 173, 180, 181, 182, 183, 184, 185, 191], "submodul": [3, 7, 11, 14, 21, 26, 30, 34, 37, 46, 55, 58, 63, 66, 70, 76, 78, 79, 81, 82, 90, 91, 93, 98, 109, 114, 117, 121, 124, 128, 133, 137, 140, 143, 146, 150, 153, 157, 159, 164, 170, 172, 176, 190], "generic_classifi": [4, 5, 6, 7, 8, 9, 27, 28, 29, 30, 31, 32, 77, 78], "basetfmodel": [4, 27], "build_model": [5, 28], "generic_classifier_model": [6, 29], "progresstrack": [8, 31], "set": [9, 32], "graph_build": [10, 33], "subpackag": [11, 34, 79, 118, 123, 127, 134, 140, 147, 152, 156, 163, 171], "ner_dl": [12, 13, 14, 15, 16, 17, 35, 36, 37, 38, 39, 40], "create_graph": [12, 35], "function": [12, 23, 35, 139, 140, 141, 169, 173, 174, 177, 178, 179, 180, 186, 187, 189, 193, 194, 196], "dataset_encod": [13, 36], "ner_model": [15, 38], "ner_model_sav": [16, 39], "sentence_group": [17, 40], "tf2contrib": [18, 19, 20, 21, 22, 23, 24], "core_rnn_cel": 18, "attribut": [18, 20, 22, 24, 140, 183, 187, 194], "fused_rnn_cel": 19, "gru_op": 20, "packag": [21, 79, 140], "lstm_op": 22, "rnn": 23, "rnn_cell": 24, "_tf_graph_builders_1x": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "alab": 41, "annot": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "annotation_merg": 42, "assert": [43, 44, 45, 46, 113, 114, 142, 143], "assertiondl": [43, 113, 142], "assertion_chunk_convert": 44, "assertion_dl_reg": 45, "chunker": [47, 48, 49, 50, 51, 52, 53, 54, 55], "assertion_filter": 47, "chunk_convert": 48, "chunk_key_phrase_extract": 49, "chunk_sentence_splitt": 50, "chunker_filter": 51, "chunkmapp": [52, 119, 148], "chunkmapper_filter": 53, "docmapp": [54, 120, 149], "classif": [56, 57, 58, 59, 60, 61], "document_log_classifi": 56, "document_ml_classifi": 57, "medical_bert_for_sequence_classif": 59, "medical_bert_for_token_classifi": 60, "medical_distilbert_for_sequence_classif": 61, "context": [62, 63], "contextual_pars": 62, "deid": [64, 65, 66, 67, 68, 69, 115, 116, 117, 144, 145, 146], "deidentif": [64, 115, 144], "doccument_hashcod": 65, "name_obfusc": 67, "reidentif": 68, "replac": 69, "disambigu": [70, 71], "ner_disambigu": 71, "doc2_chunk_intern": 72, "embed": [73, 74, 75, 76], "average_embed": 73, "bert_sentence_embed": 74, "entity_chunk_embed": 75, "merg": [80, 81], "chunk_merg": 80, "ner": [82, 83, 84, 85, 86, 87, 135, 136, 137, 138, 164, 165, 166, 167], "iob_tagg": 83, "medical_n": 84, "ner_chunk": 85, "ner_converter_intern": 86, "zero_shot_n": [87, 138, 167], "normal": [88, 89, 90], "date_norm": 88, "drug_norm": 89, "qa": [91, 92], "qa_ner_gener": [92, 129, 158], "re": [93, 94, 95, 96, 97], "relation_extract": [94, 124, 125, 126, 153, 154, 155], "relation_extraction_dl": [95, 125, 154], "relation_ner_chunk_filt": 96, "zero_shot_relation_extract": [97, 126, 155], "resolut": [98, 99, 100, 119, 120, 121, 122, 148, 149, 150, 151], "resolver_merg": 99, "sentence_entity_resolv": [100, 122, 151], "resolution2_chunk": 101, "router": 102, "source_tracking_metadata_param": 103, "tf_graph_build": 104, "paramet": 104, "base": 105, "common": [106, 107, 108, 109], "annotator_approach_intern": 106, "annotator_model_intern": 107, "annotator_properties_intern": 108, "compat": 110, "custom_transform": 111, "eval": 112, "financ": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "chunk_classif": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "document_hashcod": [116, 145], "graph": [123, 124, 125, 126, 152, 153, 154, 155], "seq_gener": [128, 129, 157, 158], "sequence_classif": [130, 131, 132, 133, 159, 160, 161, 162], "finance_bert_for_sequence_classif": 130, "finance_classifier_dl": 131, "finance_document_ml_classifi": 132, "token_classif": [134, 135, 136, 137, 138, 163, 164, 165, 166, 167], "finance_bert_for_token_classifi": 135, "finance_n": 136, "intern": 141, "legal": [142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "legal_bert_for_sequence_classif": 160, "legal_classifier_dl": 161, "legal_document_ml_classifi": 162, "legal_bert_for_token_classifi": 165, "legal_n": 166, "modeltrac": 168, "nlp_test": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "bia": [169, 170], "bias_test": 169, "noisy_label": [172, 173, 174, 175], "noisy_label_fix": 173, "noisy_label_test": 174, "util": [175, 179, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196], "robust": [176, 177, 178, 179], "robustness_fix": 177, "robustness_test": 178, "pretrain": 180, "structured_deidentif": 181, "text_to_documents_column": 182, "train": 183, "training_log_pars": 184, "updatemodel": 185, "alab_util": 187, "conll_pars": 188, "import": 189, "licensed_annotator_typ": 191, "log_pars": 192, "ner_util": 193, "ocr_nlp_processor": 194, "ocr_util": 195, "training_log_parser_util": 196, "api": 197, "refer": 197}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "Module Contents": [[2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [56, "module-contents"], [57, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [80, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [92, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [119, "module-contents"], [120, "module-contents"], [122, "module-contents"], [125, "module-contents"], [126, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [135, "module-contents"], [136, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [144, "module-contents"], [145, "module-contents"], [148, "module-contents"], [149, "module-contents"], [151, "module-contents"], [154, "module-contents"], [155, "module-contents"], [158, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [189, "module-contents"], [191, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [6, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [36, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [56, "classes"], [57, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [80, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [92, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [115, "classes"], [116, "classes"], [119, "classes"], [120, "classes"], [122, "classes"], [125, "classes"], [126, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [135, "classes"], [136, "classes"], [138, "classes"], [142, "classes"], [144, "classes"], [145, "classes"], [148, "classes"], [149, "classes"], [151, "classes"], [154, "classes"], [155, "classes"], [158, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [173, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [191, "classes"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "Submodules": [[3, "submodules"], [7, "submodules"], [11, "submodules"], [14, "submodules"], [21, "submodules"], [26, "submodules"], [30, "submodules"], [34, "submodules"], [37, "submodules"], [46, "submodules"], [55, "submodules"], [58, "submodules"], [63, "submodules"], [66, "submodules"], [70, "submodules"], [76, "submodules"], [78, "submodules"], [79, "submodules"], [81, "submodules"], [82, "submodules"], [90, "submodules"], [91, "submodules"], [93, "submodules"], [98, "submodules"], [109, "submodules"], [114, "submodules"], [117, "submodules"], [121, "submodules"], [124, "submodules"], [128, "submodules"], [133, "submodules"], [137, "submodules"], [140, "submodules"], [143, "submodules"], [146, "submodules"], [150, "submodules"], [153, "submodules"], [157, "submodules"], [159, "submodules"], [164, "submodules"], [170, "submodules"], [172, "submodules"], [176, "submodules"], [190, "submodules"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "Subpackages": [[11, "subpackages"], [34, "subpackages"], [79, "subpackages"], [118, "subpackages"], [123, "subpackages"], [127, "subpackages"], [134, "subpackages"], [140, "subpackages"], [147, "subpackages"], [152, "subpackages"], [156, "subpackages"], [163, "subpackages"], [171, "subpackages"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "Functions": [[12, "functions"], [23, "functions"], [35, "functions"], [139, "functions"], [140, "functions"], [141, "functions"], [169, "functions"], [173, "functions"], [174, "functions"], [177, "functions"], [178, "functions"], [179, "functions"], [180, "functions"], [186, "functions"], [187, "functions"], [189, "functions"], [193, "functions"], [194, "functions"], [196, "functions"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "Attributes": [[18, "attributes"], [20, "attributes"], [22, "attributes"], [24, "attributes"], [140, "attributes"], [183, "attributes"], [187, "attributes"], [194, "attributes"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "Package Contents": [[21, "package-contents"], [79, "package-contents"], [140, "package-contents"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[47, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[48, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[51, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[52, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker.docmapper": [[54, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[55, "module-sparknlp_jsl.annotator.chunker"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[56, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "sparknlp_jsl.annotator.classification": [[58, "module-sparknlp_jsl.annotator.classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[59, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[60, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[61, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.context.contextual_parser": [[62, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[63, "module-sparknlp_jsl.annotator.context"]], "sparknlp_jsl.annotator.deid.deIdentification": [[64, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[65, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[66, "module-sparknlp_jsl.annotator.deid"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[67, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "sparknlp_jsl.annotator.deid.reIdentification": [[68, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "sparknlp_jsl.annotator.deid.replacer": [[69, "module-sparknlp_jsl.annotator.deid.replacer"]], "sparknlp_jsl.annotator.disambiguation": [[70, "module-sparknlp_jsl.annotator.disambiguation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[71, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[72, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[73, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[74, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[75, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings": [[76, "module-sparknlp_jsl.annotator.embeddings"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[77, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier": [[78, "module-sparknlp_jsl.annotator.generic_classifier"]], "sparknlp_jsl.annotator": [[79, "module-sparknlp_jsl.annotator"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[80, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[81, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[82, "module-sparknlp_jsl.annotator.ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[83, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "sparknlp_jsl.annotator.ner.medical_ner": [[84, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[85, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[86, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[87, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[88, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[89, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[90, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa": [[91, "module-sparknlp_jsl.annotator.qa"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[92, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "sparknlp_jsl.annotator.re": [[93, "module-sparknlp_jsl.annotator.re"]], "sparknlp_jsl.annotator.re.relation_extraction": [[94, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[95, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[96, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[97, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[98, "module-sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[99, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[100, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution2_chunk": [[101, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "sparknlp_jsl.annotator.router": [[102, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[103, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "sparknlp_jsl.annotator.tf_graph_builder": [[104, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "Parameters": [[104, "parameters"]], "sparknlp_jsl.base": [[105, "module-sparknlp_jsl.base"]], "sparknlp_jsl.common.annotator_approach_internal": [[106, "module-sparknlp_jsl.common.annotator_approach_internal"]], "sparknlp_jsl.common.annotator_model_internal": [[107, "module-sparknlp_jsl.common.annotator_model_internal"]], "sparknlp_jsl.common.annotator_properties_internal": [[108, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[109, "module-sparknlp_jsl.common"]], "sparknlp_jsl.compatibility": [[110, "module-sparknlp_jsl.compatibility"]], "sparknlp_jsl.custom_transformer": [[111, "module-sparknlp_jsl.custom_transformer"]], "sparknlp_jsl.eval": [[112, "module-sparknlp_jsl.eval"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[113, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[114, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[115, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[116, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[117, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[118, "module-sparknlp_jsl.finance.chunk_classification"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[119, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[120, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[121, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[122, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[123, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[124, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[125, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[126, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[127, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.finance.seq_generation": [[128, "module-sparknlp_jsl.finance.seq_generation"]], "sparknlp_jsl.finance.seq_generation.qa_ner_generator": [[129, "module-sparknlp_jsl.finance.seq_generation.qa_ner_generator"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[130, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[131, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[132, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[133, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.token_classification": [[134, "module-sparknlp_jsl.finance.token_classification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[135, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[136, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[137, "module-sparknlp_jsl.finance.token_classification.ner"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[138, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.functions": [[139, "module-sparknlp_jsl.functions"]], "sparknlp_jsl": [[140, "module-sparknlp_jsl"]], "sparknlp_jsl.internal": [[141, "module-sparknlp_jsl.internal"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[142, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[143, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[144, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[145, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[146, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[147, "module-sparknlp_jsl.legal.chunk_classification"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[148, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[149, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[150, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[151, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[152, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[153, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[154, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[155, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[156, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.seq_generation": [[157, "module-sparknlp_jsl.legal.seq_generation"]], "sparknlp_jsl.legal.seq_generation.qa_ner_generator": [[158, "module-sparknlp_jsl.legal.seq_generation.qa_ner_generator"]], "sparknlp_jsl.legal.sequence_classification": [[159, "module-sparknlp_jsl.legal.sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[160, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[161, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[162, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.token_classification": [[163, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[164, "module-sparknlp_jsl.legal.token_classification.ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[165, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[166, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[167, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.modelTracer": [[168, "module-sparknlp_jsl.modelTracer"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[169, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "sparknlp_jsl.nlp_test.bias": [[170, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[171, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[172, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[173, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[174, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[175, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "sparknlp_jsl.nlp_test.robustness": [[176, "module-sparknlp_jsl.nlp_test.robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[177, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[178, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "sparknlp_jsl.nlp_test.robustness.utils": [[179, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "sparknlp_jsl.pretrained": [[180, "module-sparknlp_jsl.pretrained"]], "sparknlp_jsl.structured_deidentification": [[181, "module-sparknlp_jsl.structured_deidentification"]], "sparknlp_jsl.text_to_documents_columns": [[182, "module-sparknlp_jsl.text_to_documents_columns"]], "sparknlp_jsl.training": [[183, "module-sparknlp_jsl.training"]], "sparknlp_jsl.training_log_parser": [[184, "module-sparknlp_jsl.training_log_parser"]], "sparknlp_jsl.updateModels": [[185, "module-sparknlp_jsl.updateModels"]], "sparknlp_jsl.util": [[186, "module-sparknlp_jsl.util"]], "sparknlp_jsl.utils.alab_utils": [[187, "module-sparknlp_jsl.utils.alab_utils"]], "sparknlp_jsl.utils.conll_parse": [[188, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.imports": [[189, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[190, "module-sparknlp_jsl.utils"]], "sparknlp_jsl.utils.licensed_annotator_type": [[191, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[192, "module-sparknlp_jsl.utils.log_parse"]], "sparknlp_jsl.utils.ner_utils": [[193, "module-sparknlp_jsl.utils.ner_utils"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[194, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "sparknlp_jsl.utils.ocr_utils": [[195, "module-sparknlp_jsl.utils.ocr_utils"]], "sparknlp_jsl.utils.training_log_parser_utils": [[196, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "API Reference": [[197, "api-reference"]], "Modules": [[197, "modules"]]}, "indexentries": {"assertionmodel (class in sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel"]], "add_bidirectional_lstm() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"]], "add_optimizer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_optimizer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_optimizer"]], "calc_accuracy() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.calc_accuracy"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.calc_accuracy"]], "confusion_matrix() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.confusion_matrix"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.confusion_matrix"]], "fully_connected_layer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"]], "module": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"], [3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"], [4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"], [5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"], [6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"], [7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"], [8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"], [9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"], [10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"], [11, "module-sparknlp_jsl._tf_graph_builders"], [12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"], [13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"], [14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"], [15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"], [16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"], [17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"], [18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"], [19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"], [20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"], [21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"], [22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"], [23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"], [24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"], [25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"], [26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"], [27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"], [28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"], [29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"], [30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"], [31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"], [32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"], [33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"], [34, "module-sparknlp_jsl._tf_graph_builders_1x"], [35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"], [36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"], [37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"], [38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"], [39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"], [40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"], [41, "module-sparknlp_jsl.alab"], [42, "module-sparknlp_jsl.annotator.annotation_merger"], [43, "module-sparknlp_jsl.annotator.assertion.assertionDL"], [44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"], [45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"], [46, "module-sparknlp_jsl.annotator.assertion"], [47, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"], [48, "module-sparknlp_jsl.annotator.chunker.chunk_converter"], [49, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"], [50, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"], [51, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"], [52, "module-sparknlp_jsl.annotator.chunker.chunkmapper"], [53, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"], [54, "module-sparknlp_jsl.annotator.chunker.docmapper"], [55, "module-sparknlp_jsl.annotator.chunker"], [56, "module-sparknlp_jsl.annotator.classification.document_log_classifier"], [57, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"], [58, "module-sparknlp_jsl.annotator.classification"], [59, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"], [60, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"], [61, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"], [62, "module-sparknlp_jsl.annotator.context.contextual_parser"], [63, "module-sparknlp_jsl.annotator.context"], [64, "module-sparknlp_jsl.annotator.deid.deIdentification"], [65, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"], [66, "module-sparknlp_jsl.annotator.deid"], [67, "module-sparknlp_jsl.annotator.deid.name_obfuscator"], [68, "module-sparknlp_jsl.annotator.deid.reIdentification"], [69, "module-sparknlp_jsl.annotator.deid.replacer"], [70, "module-sparknlp_jsl.annotator.disambiguation"], [71, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"], [72, "module-sparknlp_jsl.annotator.doc2_chunk_internal"], [73, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"], [74, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"], [75, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"], [76, "module-sparknlp_jsl.annotator.embeddings"], [77, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"], [78, "module-sparknlp_jsl.annotator.generic_classifier"], [79, "module-sparknlp_jsl.annotator"], [80, "module-sparknlp_jsl.annotator.merge.chunk_merge"], [81, "module-sparknlp_jsl.annotator.merge"], [82, "module-sparknlp_jsl.annotator.ner"], [83, "module-sparknlp_jsl.annotator.ner.iob_tagger"], [84, "module-sparknlp_jsl.annotator.ner.medical_ner"], [85, "module-sparknlp_jsl.annotator.ner.ner_chunker"], [86, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"], [87, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"], [88, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"], [89, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"], [90, "module-sparknlp_jsl.annotator.normalizer"], [91, "module-sparknlp_jsl.annotator.qa"], [92, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"], [93, "module-sparknlp_jsl.annotator.re"], [94, "module-sparknlp_jsl.annotator.re.relation_extraction"], [95, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"], [96, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"], [97, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"], [98, "module-sparknlp_jsl.annotator.resolution"], [99, "module-sparknlp_jsl.annotator.resolution.resolver_merger"], [100, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"], [101, "module-sparknlp_jsl.annotator.resolution2_chunk"], [102, "module-sparknlp_jsl.annotator.router"], [103, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"], [104, "module-sparknlp_jsl.annotator.tf_graph_builder"], [105, "module-sparknlp_jsl.base"], [106, "module-sparknlp_jsl.common.annotator_approach_internal"], [107, "module-sparknlp_jsl.common.annotator_model_internal"], [108, "module-sparknlp_jsl.common.annotator_properties_internal"], [109, "module-sparknlp_jsl.common"], [110, "module-sparknlp_jsl.compatibility"], [111, "module-sparknlp_jsl.custom_transformer"], [112, "module-sparknlp_jsl.eval"], [113, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"], [114, "module-sparknlp_jsl.finance.chunk_classification.assertion"], [115, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"], [116, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"], [117, "module-sparknlp_jsl.finance.chunk_classification.deid"], [118, "module-sparknlp_jsl.finance.chunk_classification"], [119, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"], [120, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"], [121, "module-sparknlp_jsl.finance.chunk_classification.resolution"], [122, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"], [123, "module-sparknlp_jsl.finance.graph"], [124, "module-sparknlp_jsl.finance.graph.relation_extraction"], [125, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"], [126, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"], [127, "module-sparknlp_jsl.finance"], [128, "module-sparknlp_jsl.finance.seq_generation"], [129, "module-sparknlp_jsl.finance.seq_generation.qa_ner_generator"], [130, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"], [131, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"], [132, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"], [133, "module-sparknlp_jsl.finance.sequence_classification"], [134, "module-sparknlp_jsl.finance.token_classification"], [135, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"], [136, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"], [137, "module-sparknlp_jsl.finance.token_classification.ner"], [138, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"], [139, "module-sparknlp_jsl.functions"], [140, "module-sparknlp_jsl"], [141, "module-sparknlp_jsl.internal"], [142, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"], [143, "module-sparknlp_jsl.legal.chunk_classification.assertion"], [144, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"], [145, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"], [146, "module-sparknlp_jsl.legal.chunk_classification.deid"], [147, "module-sparknlp_jsl.legal.chunk_classification"], [148, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"], [149, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"], [150, "module-sparknlp_jsl.legal.chunk_classification.resolution"], [151, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"], [152, "module-sparknlp_jsl.legal.graph"], [153, "module-sparknlp_jsl.legal.graph.relation_extraction"], [154, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"], [155, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"], [156, "module-sparknlp_jsl.legal"], [157, "module-sparknlp_jsl.legal.seq_generation"], [158, "module-sparknlp_jsl.legal.seq_generation.qa_ner_generator"], [159, "module-sparknlp_jsl.legal.sequence_classification"], [160, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"], [161, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"], [162, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"], [163, "module-sparknlp_jsl.legal.token_classification"], [164, "module-sparknlp_jsl.legal.token_classification.ner"], [165, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"], [166, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"], [167, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"], [168, "module-sparknlp_jsl.modelTracer"], [169, "module-sparknlp_jsl.nlp_test.bias.bias_testing"], [170, "module-sparknlp_jsl.nlp_test.bias"], [171, "module-sparknlp_jsl.nlp_test"], [172, "module-sparknlp_jsl.nlp_test.noisy_labels"], [173, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"], [174, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"], [175, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"], [176, "module-sparknlp_jsl.nlp_test.robustness"], [177, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"], [178, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"], [179, "module-sparknlp_jsl.nlp_test.robustness.utils"], [180, "module-sparknlp_jsl.pretrained"], [181, "module-sparknlp_jsl.structured_deidentification"], [182, "module-sparknlp_jsl.text_to_documents_columns"], [183, "module-sparknlp_jsl.training"], [184, "module-sparknlp_jsl.training_log_parser"], [185, "module-sparknlp_jsl.updateModels"], [186, "module-sparknlp_jsl.util"], [187, "module-sparknlp_jsl.utils.alab_utils"], [188, "module-sparknlp_jsl.utils.conll_parse"], [189, "module-sparknlp_jsl.utils.imports"], [190, "module-sparknlp_jsl.utils"], [191, "module-sparknlp_jsl.utils.licensed_annotator_type"], [192, "module-sparknlp_jsl.utils.log_parse"], [193, "module-sparknlp_jsl.utils.ner_utils"], [194, "module-sparknlp_jsl.utils.ocr_nlp_processor"], [195, "module-sparknlp_jsl.utils.ocr_utils"], [196, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "persist_graph() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.persist_graph"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.persist_graph"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "train() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.train"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.train"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel"]], "build() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.build"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.build"]], "export_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.export_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.export_graph"]], "fit_dataset() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"]], "generate_batch() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.generate_batch"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.generate_batch"]], "get_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.get_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.get_graph"]], "is_built() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.is_built"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.is_built"]], "load_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.load_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.load_graph"]], "run_tests() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.run_tests"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "build() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.build"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.build"]], "export_graph() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"]], "run_tests() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker"]], "get_report_interval() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.get_report_interval"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.get_report_interval"]], "on_batch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_batch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_batch"]], "on_epoch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_epoch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_epoch"]], "on_training_end() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_end"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_end"]], "on_training_start() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_start"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_start"]], "print_progress() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.print_progress"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "acc (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.ACC"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.ACC"]], "datasets_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DATASETS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DATASETS_DIR"]], "default_model_node_names (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"]], "evaluate (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.EVALUATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.EVALUATE"]], "init (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.INIT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.INIT"]], "inputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.INPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.INPUTS"]], "learning_rate (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"]], "logs_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.LOGS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.LOGS_DIR"]], "loss (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LOSS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LOSS"]], "models_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.MODELS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.MODELS_DIR"]], "model_ops (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS"]], "outputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"]], "predict (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.PREDICT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.PREDICT"]], "run_types (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings"]], "targets (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.TARGETS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.TARGETS"]], "train (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.TRAIN"]], "train (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory"]], "tensorflowaddonsneeded": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TensorflowAddonsNeeded"]], "wrongtfversion": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.WrongTFVersion"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.WrongTFVersion"]], "build() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.build"]], "build() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.build"]], "build() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.build"]], "build() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.build"]], "check_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.check_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.check_build_params"]], "get_build_param() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_param"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_param"]], "get_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params"]], "get_build_params_with_defaults() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params_with_defaults"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params_with_defaults"]], "get_model_build_param_explanations() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_params() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_params"]], "get_model_filename() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_filename"]], "get_model_filename() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"]], "get_model_filename() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_filename"]], "get_model_filename() (relationextractiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"]], "get_model_filename() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_filename"]], "get_models() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.get_models"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.get_models"]], "print_model_params() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.print_model_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.print_model_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "supports_auto_file_name() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders.ner_dl.create_graph)": [[12, "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder"]], "encode() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.encode"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.encode"]], "get_char_indexes() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"]], "normalize() (datasetencoder static method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.normalize"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.normalize"]], "shuffle() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.shuffle"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel"]], "add_bilstm_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_bilstm_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_bilstm_char_repr"]], "add_cnn_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_cnn_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_cnn_char_repr"]], "add_context_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_context_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_context_repr"]], "add_inference_layer() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_inference_layer"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_inference_layer"]], "add_pretrained_word_embeddings() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"]], "add_training_op() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_training_op"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_training_op"]], "close() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.close"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.close"]], "fill() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.fill"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.fill"]], "get_char_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_char_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_char_ids"]], "get_from_batch() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_from_batch"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_from_batch"]], "get_sentence_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_lengths"]], "get_sentence_token_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_token_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_token_lengths"]], "get_softmax() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_softmax"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_softmax"]], "get_tag_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_tag_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_tag_ids"]], "get_word_embeddings() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_embeddings"]], "get_word_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_lengths"]], "init_variables() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.init_variables"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.init_variables"]], "measure() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.measure"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.measure"]], "num_trues() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.num_trues"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.num_trues"]], "predict() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.predict"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.predict"]], "slice() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.slice"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "train() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.train"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.train"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver"]], "restore_tensorflow_state() (nermodelsaver static method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"]], "save() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save"]], "save_models() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save_models"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper"]], "get_bucket_id() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"]], "slice() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.slice"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "embeddingwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper"]], "inputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper"]], "outputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper"]], "rnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.RNNCell"]], "call() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.call"]], "call() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.call"]], "call() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "zero_state() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.zero_state"]], "zero_state() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.zero_state"]], "zero_state() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.zero_state"]], "fusedrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCell"]], "fusedrnncelladaptor (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCellAdaptor"]], "timereversedfusedrnn (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "grublockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell"]], "grublockcellv2 (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.LayerRNNCell"]], "build() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.build"]], "build() (grublockcellv2 method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2.build"]], "call() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "tf (in module sparknlp_jsl._tf_graph_builders.tf2contrib)": [[21, "sparknlp_jsl._tf_graph_builders.tf2contrib.tf"]], "lstmblockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell"]], "lstmblockfusedcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell"]], "lstmblockwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LayerRNNCell"]], "build() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.build"]], "build() (lstmblockfusedcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell.build"]], "call() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.call"]], "call() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.call"]], "num_units() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "stack_bidirectional_dynamic_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_dynamic_rnn"]], "stack_bidirectional_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_rnn"]], "attentioncellwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper"]], "bidirectionalgridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell"]], "cfncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell"]], "compiledwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper"]], "conv1dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv1DLSTMCell"]], "conv2dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv2DLSTMCell"]], "conv3dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv3DLSTMCell"]], "convlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell"]], "coupledinputforgetgatelstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell"]], "glstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell"]], "gridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell"]], "highwaywrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper"]], "indrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell"]], "indygrucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell"]], "indylstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell"]], "intersectionrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell"]], "layernormbasiclstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell"]], "layernormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell"]], "minimalrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell"]], "nascell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell"]], "ntmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell"]], "ntmcontrollerstate (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMControllerState"]], "phasedlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell"]], "srucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell"]], "timefreqlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell"]], "ugrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell"]], "weightnormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell"]], "build() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.build"]], "build() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.build"]], "build() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.build"]], "build() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.build"]], "build() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.build"]], "build() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.build"]], "build() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.build"]], "build() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.build"]], "call() (attentioncellwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper.call"]], "call() (bidirectionalgridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell.call"]], "call() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.call"]], "call() (convlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell.call"]], "call() (coupledinputforgetgatelstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell.call"]], "call() (glstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell.call"]], "call() (gridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell.call"]], "call() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.call"]], "call() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.call"]], "call() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.call"]], "call() (intersectionrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell.call"]], "call() (layernormbasiclstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell.call"]], "call() (layernormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell.call"]], "call() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.call"]], "call() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.call"]], "call() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.call"]], "call() (phasedlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell.call"]], "call() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.call"]], "call() (timefreqlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell.call"]], "call() (ugrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell.call"]], "call() (weightnormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "zero_state() (compiledwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper.zero_state"]], "zero_state() (highwaywrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper.zero_state"]], "zero_state() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.zero_state"]], "assertionmodel (class in sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model)": [[25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel)": [[27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model)": [[29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker)": [[31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "model_ops (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS"]], "run_types (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph)": [[35, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder)": [[36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model)": [[38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver)": [[39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper)": [[40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "annotationlab (class in sparknlp_jsl.alab)": [[41, "sparknlp_jsl.alab.AnnotationLab"]], "create_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.create_project"]], "delete_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_project"]], "delete_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_tasks"]], "generate_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.generate_preannotations"]], "get_iaa_metrics() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_IAA_metrics"]], "get_all_projects() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_all_projects"]], "get_annotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_annotations"]], "get_assertion_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_assertion_data"]], "get_classification_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_classification_data"]], "get_conll_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_conll_data"]], "get_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_project_config"]], "get_relation_extraction_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_relation_extraction_data"]], "set_credentials() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_credentials"]], "set_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_project_config"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "upload_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_preannotations"]], "upload_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_tasks"]], "annotationmerger (class in sparknlp_jsl.annotator.annotation_merger)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger"]], "inputannotatortypes (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputAnnotatorTypes"]], "inputtype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputType"]], "name (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.name"]], "outputannotatortype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputAnnotatorType"]], "setinputcols() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputCols"]], "setinputtype() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputType"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "assertiondlapproach (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel"]], "batchsize (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.batchSize"]], "classes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.classes"]], "configprotobytes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.configProtoBytes"]], "configprotobytes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.configProtoBytes"]], "dropout (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.dropout"]], "enableoutputlogs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"]], "endcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.endCol"]], "epochs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.epochs"]], "evaluationlogextended (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.evaluationLogExtended"]], "graphfile (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFile"]], "graphfolder (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFolder"]], "includeconfidence (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.includeConfidence"]], "includeconfidence (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.includeConfidence"]], "inputannotatortypes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"]], "label (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.label"]], "learningrate (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.learningRate"]], "maxsentlen (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.maxSentLen"]], "maxsentlen (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.maxSentLen"]], "name (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.name"], [113, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.name"], [142, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.name"]], "outputannotatortype (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"]], "outputannotatortype (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"]], "outputlogspath (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputLogsPath"]], "pretrained() (assertiondlmodel static method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.pretrained"], [113, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"], [142, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"]], "scopewindow (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.scopeWindow"]], "scopewindow (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.scopeWindow"]], "setbatchsize() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setBatchSize"]], "setconfigprotobytes() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"]], "setdropout() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDropout"]], "setenableoutputlogs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"]], "setendcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEndCol"]], "setepochs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEpochs"]], "setevaluationlogextended() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEvaluationLogExtended"]], "setgraphfile() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFile"]], "setgraphfolder() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFolder"]], "setincludeconfidence() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"]], "setincludeconfidence() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"]], "setlabelcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLabelCol"]], "setlearningrate() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLearningRate"]], "setmaxsentlen() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"]], "setoutputlogspath() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"]], "setscopewindow() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setScopeWindow"]], "setscopewindow() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setScopeWindow"]], "setstartcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setStartCol"]], "settestdataset() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setTestDataset"]], "setvalidationsplit() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setValidationSplit"]], "setverbose() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setVerbose"]], "sparknlp_jsl.annotator.assertion.assertiondl": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "startcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.startCol"]], "targetnerlabels (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.targetNerLabels"]], "testdataset (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.testDataset"]], "validationsplit (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.validationSplit"]], "verbose (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.verbose"]], "assertionchunkconverter (class in sparknlp_jsl.annotator.assertion.assertion_chunk_converter)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter"]], "chunkbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkBeginCol"]], "chunkendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkEndCol"]], "chunktextcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkTextCol"]], "inputannotatortypes (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputAnnotatorTypes"]], "inputcols (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputCols"]], "name (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.name"]], "outputannotatortype (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputAnnotatorType"]], "outputcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputCol"]], "outputtokenbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenBeginCol"]], "outputtokenendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenEndCol"]], "setchunkbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkBeginCol"]], "setchunkendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkEndCol"]], "setchunktextcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkTextCol"]], "setinputcols() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setInputCols"]], "setoutputcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputCol"]], "setoutputtokenbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenBeginCol"]], "setoutputtokenendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenEndCol"]], "setparams() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParams"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "assertionlogregapproach (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach"]], "assertionlogregmodel (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel"]], "afterparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.afterParam"]], "afterparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.afterParam"]], "beforeparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.beforeParam"]], "beforeparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.beforeParam"]], "enetparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.eNetParam"]], "endcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.endCol"]], "endcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.endCol"]], "inputannotatortypes (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputAnnotatorTypes"]], "label (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.label"]], "maxiter (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.maxIter"]], "name (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.name"]], "nercol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.nerCol"]], "nercol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.nerCol"]], "outputannotatortype (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputAnnotatorType"]], "outputannotatortype (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputAnnotatorType"]], "pretrained() (assertionlogregmodel static method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.pretrained"]], "regparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.regParam"]], "setafter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setAfter"]], "setbefore() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setBefore"]], "setendcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEndCol"]], "setenet() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEnet"]], "setlabelcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLabelCol"]], "setmaxiter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setMaxIter"]], "setnercol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setNerCol"]], "setreg() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setReg"]], "setstartcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setStartCol"]], "settargetnerlabels() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setTargetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "startcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.startCol"]], "startcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.startCol"]], "targetnerlabels (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.targetNerLabels"]], "targetnerlabels (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.targetNerLabels"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "assertionfilterer (class in sparknlp_jsl.annotator.chunker.assertion_filterer)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer"]], "casesensitive (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.caseSensitive"]], "criteria (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.criteria"]], "entitiesconfidence (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.entitiesConfidence"]], "inputannotatortypes (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputAnnotatorTypes"]], "name (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.name"]], "outputannotatortype (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputAnnotatorType"]], "regex (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.regex"]], "setcasesensitive() (assertionfilterer method)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCaseSensitive"]], "setcriteria() (assertionfilterer method)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCriteria"]], "setregex() (assertionfilterer method)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setRegex"]], "setwhitelist() (assertionfilterer method)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setWhiteList"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[47, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "whitelist (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.whiteList"]], "chunkconverter (class in sparknlp_jsl.annotator.chunker.chunk_converter)": [[48, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter"]], "inputannotatortypes (chunkconverter attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputAnnotatorTypes"]], "name (chunkconverter attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.name"]], "outputannotatortype (chunkconverter attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[48, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "chunkkeyphraseextraction (class in sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction"]], "concatenatesentences (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.concatenateSentences"]], "divergence (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.divergence"]], "documentlevelprocessing (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.documentLevelProcessing"]], "droppunctuation (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dropPunctuation"]], "inputannotatortypes (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputAnnotatorTypes"]], "name (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.name"]], "outputannotatortype (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputAnnotatorType"]], "pretrained() (chunkkeyphraseextraction static method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.pretrained"]], "selectmostdifferent (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.selectMostDifferent"]], "setconcatenatesentences() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConcatenateSentences"]], "setdivergence() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDivergence"]], "setdocumentlevelprocessing() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDocumentLevelProcessing"]], "setdroppunctuation() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDropPunctuation"]], "setselectmostdifferent() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setSelectMostDifferent"]], "settopn() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setTopN"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "topn (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.topN"]], "chunksentencesplitter (class in sparknlp_jsl.annotator.chunker.chunk_sentence_splitter)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter"]], "defaultentity (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.defaultEntity"]], "groupbysentences (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.groupBySentences"]], "inputannotatortypes (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputAnnotatorTypes"]], "insertchunk (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.insertChunk"]], "name (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.name"]], "outputannotatortype (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputAnnotatorType"]], "setdefaultentity() (chunksentencesplitter method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setDefaultEntity"]], "setgroupbysentences() (chunksentencesplitter method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setGroupBySentences"]], "setinsertchunk() (chunksentencesplitter method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "chunkfilterer (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer"]], "chunkfiltererapproach (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach"]], "blacklist (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.blackList"]], "blacklist (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.blackList"]], "criteria (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.criteria"]], "criteria (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.criteria"]], "entitiesconfidenceresource (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResource"]], "filtervalue (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.filterValue"]], "filtervalue (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.filterValue"]], "inputannotatortypes (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputAnnotatorTypes"]], "inputannotatortypes (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputAnnotatorTypes"]], "name (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.name"]], "name (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.name"]], "outputannotatortype (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputAnnotatorType"]], "outputannotatortype (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputAnnotatorType"]], "regex (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.regex"]], "regex (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.regex"]], "setblacklist() (chunkfilterer method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setBlackList"]], "setblacklist() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setBlackList"]], "setcriteria() (chunkfilterer method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setCriteria"]], "setcriteria() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setCriteria"]], "setentitiesconfidenceresource() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResource"]], "setfilterentity() (chunkfilterer method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterEntity"]], "setfilterentity() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterEntity"]], "setregex() (chunkfilterer method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setRegex"]], "setregex() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setRegex"]], "setwhitelist() (chunkfilterer method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setWhiteList"]], "setwhitelist() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setWhiteList"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[51, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "whitelist (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.whiteList"]], "whitelist (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.whiteList"]], "chunkmapperapproach (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach"]], "chunkmapperfuzzymatchingparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams"]], "chunkmappermodel (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel"]], "commonchunkmapperparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams"]], "allowmultitokenchunk (commonchunkmapperparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.allowMultiTokenChunk"]], "dictionary (chunkmapperapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.dictionary"]], "enablecharfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableCharFingerprintMatching"]], "enablefuzzymatching (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableFuzzyMatching"]], "enabletokenfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableTokenFingerprintMatching"]], "fuzzydistancescalingmode (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistances"]], "inputannotatortypes (chunkmapperapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmappermodel attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"]], "lowercase (commonchunkmapperparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.lowerCase"]], "maxcharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramFingerprint"]], "mincharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minCharNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minTokenNgramFingerprint"]], "multivaluesrelations (commonchunkmapperparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.multivaluesRelations"]], "name (chunkmapperapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.name"], [119, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"], [148, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"]], "name (chunkmappermodel attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.name"], [119, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"], [148, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"]], "outputannotatortype (chunkmapperapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputAnnotatorType"]], "outputannotatortype (chunkmappermodel attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputAnnotatorType"]], "pretrained() (chunkmappermodel static method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.pretrained"], [119, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"], [148, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"]], "rel (commonchunkmapperparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rel"]], "rels (commonchunkmapperparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rels"]], "setallowmultitokenchunk() (commonchunkmapperparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setAllowMultiTokenChunk"]], "setdictionary() (chunkmapperapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDictionary"]], "setenablecharfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableTokenFingerprintMatching"]], "setfuzzydistancescalingmode() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistances"]], "setlowercase() (commonchunkmapperparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setLowerCase"]], "setmaxcharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (commonchunkmapperparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setMultivaluesRelations"]], "setrel() (commonchunkmapperparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRel"]], "setrels() (commonchunkmapperparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[52, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "chunkmapperfilterer (class in sparknlp_jsl.annotator.chunker.chunkmapper_filterer)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer"]], "inputannotatortypes (chunkmapperfilterer attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputAnnotatorTypes"]], "name (chunkmapperfilterer attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.name"]], "outputannotatortype (chunkmapperfilterer attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputAnnotatorType"]], "returncriteria (chunkmapperfilterer attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.returnCriteria"]], "setreturncriteria() (chunkmapperfilterer method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "docmapperapproach (class in sparknlp_jsl.annotator.chunker.docmapper)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.annotator.chunker.docmapper)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel"]], "dictionary (docmapperapproach attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.dictionary"], [120, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"], [149, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"]], "inputannotatortypes (docmapperapproach attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputAnnotatorTypes"], [120, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"], [149, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (docmappermodel attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputAnnotatorTypes"], [120, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"], [149, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"]], "name (docmapperapproach attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.name"], [120, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.name"], [149, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.name"]], "name (docmappermodel attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.name"], [120, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.name"], [149, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.name"]], "outputannotatortype (docmapperapproach attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputAnnotatorType"], [120, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"], [149, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"]], "outputannotatortype (docmappermodel attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputAnnotatorType"], [120, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"], [149, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"]], "pretrained() (docmappermodel static method)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.pretrained"], [120, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"], [149, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"]], "setdictionary() (docmapperapproach method)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDictionary"], [120, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"], [149, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper": [[54, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[55, "module-sparknlp_jsl.annotator.chunker"]], "documentlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach"]], "documentlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel"]], "classificationmodel (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.classificationModel"]], "classificationmodelpath (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.classificationModelPath"]], "fitintercept (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitIntercept"]], "inputannotatortypes (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputAnnotatorTypes"]], "labelcol (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labelCol"]], "labels (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labels"]], "labels (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.labels"]], "maxiter (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.maxIter"]], "mergechunks (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.mergeChunks"]], "name (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.name"]], "outputannotatortype (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputAnnotatorType"]], "pretrained() (documentlogregclassifiermodel static method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.pretrained"]], "setclassificationmodel() (documentlogregclassifiermodel method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setClassificationModel"]], "setclassificationmodelpath() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setFitIntercept"]], "setlabelcolumn() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabelColumn"]], "setlabels() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabels"]], "setlabels() (documentlogregclassifiermodel method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLabels"]], "setmaxiter() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setMaxIter"]], "setmergechunks() (documentlogregclassifiermodel method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setMergeChunks"]], "settol() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setTol"]], "setvectorizationmodel() (documentlogregclassifiermodel method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[56, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "tol (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.tol"]], "vectorizationmodel (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.vectorizationModelPath"]], "documentmlclassifierapproach (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach"]], "documentmlclassifiermodel (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel"]], "documentmlclassifierparams (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams"]], "classificationmodel (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelPath"]], "fitintercept (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitIntercept"]], "inputannotatortypes (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputAnnotatorTypes"]], "labelcol (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labelCol"]], "labels (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.labels"]], "labels (documentmlclassifierparams attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.labels"]], "maxiter (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxIter"]], "maxtokenngram (documentmlclassifierparams attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.maxTokenNgram"]], "mergechunks (documentmlclassifierparams attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.mergeChunks"]], "mintokenngram (documentmlclassifierparams attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.minTokenNgram"]], "name (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.name"]], "outputannotatortype (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputAnnotatorType"]], "pretrained() (documentmlclassifiermodel static method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.pretrained"]], "setclassificationmodel() (documentmlclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setFitIntercept"]], "setlabelcol() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabelCol"]], "setlabels() (documentmlclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLabels"]], "setlabels() (documentmlclassifierparams method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setLabels"]], "setmaxiter() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (documentmlclassifierparams method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setMergeChunks"]], "setmintokenngram() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMinTokenNgram"]], "settol() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (documentmlclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "tol (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.tol"]], "vectorizationmodel (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.vectorizationModelPath"]], "sparknlp_jsl.annotator.classification": [[58, "module-sparknlp_jsl.annotator.classification"]], "medicalbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification"]], "coalescesentences (medicalbertforsequenceclassification attribute)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicalbertforsequenceclassification attribute)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicalbertforsequenceclassification method)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicalbertforsequenceclassification attribute)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertforsequenceclassification static method)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertforsequenceclassification static method)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertforsequenceclassification attribute)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.maxSentenceLength"]], "name (medicalbertforsequenceclassification attribute)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.name"]], "outputannotatortype (medicalbertforsequenceclassification attribute)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicalbertforsequenceclassification static method)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicalbertforsequenceclassification method)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicalbertforsequenceclassification method)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertforsequenceclassification method)": [[59, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[59, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "medicalbertfortokenclassifier (class in sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier"]], "configprotobytes (medicalbertfortokenclassifier attribute)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.configProtoBytes"]], "getclasses() (medicalbertfortokenclassifier method)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getClasses"]], "inputannotatortypes (medicalbertfortokenclassifier attribute)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertfortokenclassifier static method)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertfortokenclassifier static method)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertfortokenclassifier attribute)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.maxSentenceLength"]], "name (medicalbertfortokenclassifier attribute)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.name"]], "outputannotatortype (medicalbertfortokenclassifier attribute)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputAnnotatorType"]], "pretrained() (medicalbertfortokenclassifier static method)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.pretrained"]], "setconfigprotobytes() (medicalbertfortokenclassifier method)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertfortokenclassifier method)": [[60, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[60, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "medicaldistilbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification"]], "coalescesentences (medicaldistilbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicaldistilbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicaldistilbertforsequenceclassification method)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicaldistilbertforsequenceclassification static method)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicaldistilbertforsequenceclassification static method)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicaldistilbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.maxSentenceLength"]], "name (medicaldistilbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.name"]], "outputannotatortype (medicaldistilbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicaldistilbertforsequenceclassification static method)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicaldistilbertforsequenceclassification method)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicaldistilbertforsequenceclassification method)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicaldistilbertforsequenceclassification method)": [[61, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[61, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "contextualparserapproach (class in sparknlp_jsl.annotator.context.contextual_parser)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach"]], "contextualparsermodel (class in sparknlp_jsl.annotator.context.contextual_parser)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel"]], "casesensitive (contextualparserapproach attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.caseSensitive"]], "casesensitive (contextualparsermodel attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.caseSensitive"]], "completecontextmatch (contextualparserapproach attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.completeContextMatch"]], "dictionary (contextualparserapproach attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.dictionary"]], "inputannotatortypes (contextualparserapproach attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextualparsermodel attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputAnnotatorTypes"]], "jsonpath (contextualparserapproach attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.jsonPath"]], "optionalcontextrules (contextualparserapproach attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalContextRules"]], "optionalcontextrules (contextualparsermodel attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalContextRules"]], "outputannotatortype (contextualparserapproach attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputAnnotatorType"]], "outputannotatortype (contextualparsermodel attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputAnnotatorType"]], "prefixandsuffixmatch (contextualparserapproach attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.prefixAndSuffixMatch"]], "prefixandsuffixmatch (contextualparsermodel attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.prefixAndSuffixMatch"]], "setcasesensitive() (contextualparserapproach method)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCaseSensitive"]], "setcasesensitive() (contextualparsermodel method)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setCaseSensitive"]], "setcompletecontextmatch() (contextualparserapproach method)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCompleteContextMatch"]], "setdictionary() (contextualparserapproach method)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDictionary"]], "setjsonpath() (contextualparserapproach method)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setJsonPath"]], "setoptionalcontextrules() (contextualparserapproach method)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOptionalContextRules"]], "setoptionalcontextrules() (contextualparsermodel method)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOptionalContextRules"]], "setprefixandsuffixmatch() (contextualparserapproach method)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setPrefixAndSuffixMatch"]], "setprefixandsuffixmatch() (contextualparsermodel method)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setPrefixAndSuffixMatch"]], "setshortestcontextmatch() (contextualparserapproach method)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setShortestContextMatch"]], "setshortestcontextmatch() (contextualparsermodel method)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setShortestContextMatch"]], "shortestcontextmatch (contextualparserapproach attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.shortestContextMatch"]], "shortestcontextmatch (contextualparsermodel attribute)": [[62, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser": [[62, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[63, "module-sparknlp_jsl.annotator.context"]], "deidentification (class in sparknlp_jsl.annotator.deid.deidentification)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.annotator.deid.deidentification)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel"]], "ageranges (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ageRanges"]], "ageranges (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ageRanges"]], "blacklist (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.blackList"]], "blacklist (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.blackList"]], "consistentobfuscation (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.consistentObfuscation"]], "consistentobfuscation (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.consistentObfuscation"]], "dateformats (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateFormats"]], "dateformats (deidentificationmodel attribute)": [[64, "id0"], [64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateFormats"]], "datetag (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateTag"]], "datetag (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateTag"]], "datetoyear (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateToYear"]], "datetoyear (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateToYear"]], "days (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.days"]], "days (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.days"]], "fixedmasklength (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fixedMaskLength"]], "fixedmasklength (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.fixedMaskLength"]], "getblacklist() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getBlackList"]], "getblacklist() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getBlackList"]], "getregexentities() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getRegexEntities"]], "ignoreregex (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ignoreRegex"]], "ignoreregex (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ignoreRegex"]], "inputannotatortypes (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputAnnotatorTypes"]], "inputannotatortypes (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"]], "israndomdatedisplacement (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isRandomDateDisplacement"]], "israndomdatedisplacement (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"]], "language (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.language"]], "language (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.language"]], "mappingscolumn (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mappingsColumn"]], "mappingscolumn (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mappingsColumn"]], "maskingpolicy (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.maskingPolicy"]], "maskingpolicy (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.maskingPolicy"]], "minyear (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.minYear"]], "minyear (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.minYear"]], "mode (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mode"]], "mode (deidentificationmodel attribute)": [[64, "id13"], [64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mode"]], "name (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.name"], [115, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.name"], [144, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.name"]], "name (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.name"], [115, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.name"], [144, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.name"]], "obfuscatedate (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateDate"]], "obfuscatedate (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateDate"]], "obfuscatereffile (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefFile"]], "obfuscaterefsource (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefSource"]], "obfuscaterefsource (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"]], "outputannotatortype (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAnnotatorType"]], "outputannotatortype (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"]], "outputasdocument (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAsDocument"]], "outputasdocument (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAsDocument"]], "pretrained() (deidentificationmodel static method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.pretrained"], [115, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"], [144, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"]], "reffileformat (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refFileFormat"]], "refsep (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refSep"]], "regexentities (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexEntities"]], "regexoverride (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexOverride"]], "regexoverride (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexOverride"]], "regexpatternsdictionary (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionary"]], "region (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.region"]], "region (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.region"]], "returnentitymappings (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.returnEntityMappings"]], "returnentitymappings (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.returnEntityMappings"]], "sameentitythreshold (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameEntityThreshold"]], "sameentitythreshold (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"]], "seed (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.seed"]], "seed (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.seed"]], "setageranges() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeRanges"]], "setageranges() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeRanges"]], "setblacklist() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setBlackList"]], "setblacklist() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setBlackList"]], "setconsistentobfuscation() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setConsistentObfuscation"]], "setconsistentobfuscation() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"]], "setdateformats() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateFormats"]], "setdateformats() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateFormats"]], "setdatetag() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateTag"]], "setdatetag() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateTag"]], "setdatetoyear() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateToYear"]], "setdatetoyear() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateToYear"]], "setdays() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDays"]], "setdays() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDays"]], "setfixedmasklength() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setFixedMaskLength"]], "setfixedmasklength() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"]], "setignoreregex() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIgnoreRegex"]], "setignoreregex() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"]], "setisrandomdatedisplacement() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"]], "setisrandomdatedisplacement() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"]], "setlanguage() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setLanguage"]], "setlanguage() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setLanguage"]], "setmappingscolumn() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMappingsColumn"]], "setmappingscolumn() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMappingsColumn"]], "setmaskingpolicy() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMaskingPolicy"]], "setmaskingpolicy() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"]], "setminyear() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMinYear"]], "setminyear() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMinYear"]], "setmode() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMode"]], "setmode() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMode"]], "setobfuscatedate() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateDate"]], "setobfuscatedate() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateDate"]], "setobfuscatereffile() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefFile"]], "setobfuscaterefsource() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefSource"]], "setobfuscaterefsource() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"]], "setoutputasdocument() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setOutputAsDocument"]], "setoutputasdocument() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"]], "setreffileformat() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefFileFormat"]], "setrefsep() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefSep"]], "setregexoverride() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexOverride"]], "setregexoverride() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegexOverride"]], "setregexpatternsdictionary() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"]], "setregion() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegion"]], "setregion() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegion"]], "setreturnentitymappings() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setReturnEntityMappings"]], "setreturnentitymappings() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"]], "setsameentitythreshold() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameEntityThreshold"]], "setsameentitythreshold() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"]], "setseed() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSeed"]], "setseed() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSeed"]], "setunnormalizeddatemode() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"]], "setunnormalizeddatemode() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"]], "setuseshifdays() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUseShifDays"]], "setuseshifdays() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUseShifDays"]], "setzipcodetag() (deidentification method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setZipCodeTag"]], "setzipcodetag() (deidentificationmodel method)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setZipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentification": [[64, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "unnormalizeddatemode (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.unnormalizedDateMode"]], "unnormalizeddatemode (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"]], "useshifdays (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.useShifDays"]], "useshifdays (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.useShifDays"]], "zipcodetag (deidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.zipCodeTag"]], "zipcodetag (deidentificationmodel attribute)": [[64, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.zipCodeTag"]], "documenthashcoder (class in sparknlp_jsl.annotator.deid.doccument_hashcoder)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder"]], "dateshiftcolumn (documenthashcoder attribute)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.dateShiftColumn"]], "inputannotatortypes (documenthashcoder attribute)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputAnnotatorTypes"]], "name (documenthashcoder attribute)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.name"]], "newdateshift (documenthashcoder attribute)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.newDateShift"]], "outputannotatortype (documenthashcoder attribute)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputAnnotatorType"]], "patientidcolumn (documenthashcoder attribute)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.patientIdColumn"]], "rangedays (documenthashcoder attribute)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.rangeDays"]], "seed (documenthashcoder attribute)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.seed"]], "setdateshiftcolumn() (documenthashcoder method)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setDateShiftColumn"]], "setnewdateshift() (documenthashcoder method)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setNewDateShift"]], "setparams() (documenthashcoder method)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParams"]], "setpatientidcolumn() (documenthashcoder method)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setPatientIdColumn"]], "setrangedays() (documenthashcoder method)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setRangeDays"]], "setseed() (documenthashcoder method)": [[65, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setSeed"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[65, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[66, "module-sparknlp_jsl.annotator.deid"]], "namechunkobfuscator (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator"]], "namechunkobfuscatorapproach (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach"]], "inputannotatortypes (namechunkobfuscator attribute)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputAnnotatorTypes"]], "inputannotatortypes (namechunkobfuscatorapproach attribute)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputAnnotatorTypes"]], "obfuscatereffile (namechunkobfuscatorapproach attribute)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefFile"]], "outputannotatortype (namechunkobfuscator attribute)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputAnnotatorType"]], "outputannotatortype (namechunkobfuscatorapproach attribute)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputAnnotatorType"]], "pretrained() (namechunkobfuscator static method)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.pretrained"]], "reffileformat (namechunkobfuscatorapproach attribute)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refFileFormat"]], "refsep (namechunkobfuscatorapproach attribute)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refSep"]], "seed (namechunkobfuscator attribute)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.seed"]], "seed (namechunkobfuscatorapproach attribute)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.seed"]], "setobfuscatereffile() (namechunkobfuscatorapproach method)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefFile"]], "setreffileformat() (namechunkobfuscatorapproach method)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefFileFormat"]], "setrefsep() (namechunkobfuscatorapproach method)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefSep"]], "setseed() (namechunkobfuscator method)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSeed"]], "setseed() (namechunkobfuscatorapproach method)": [[67, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[67, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "reidentification (class in sparknlp_jsl.annotator.deid.reidentification)": [[68, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification"]], "inputannotatortypes (reidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputAnnotatorTypes"]], "name (reidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.name"]], "outputannotatortype (reidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.reidentification": [[68, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "replacer (class in sparknlp_jsl.annotator.deid.replacer)": [[69, "sparknlp_jsl.annotator.deid.replacer.Replacer"]], "getusereplacement() (replacer method)": [[69, "sparknlp_jsl.annotator.deid.replacer.Replacer.getUseReplacement"]], "inputannotatortypes (replacer attribute)": [[69, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputAnnotatorTypes"]], "name (replacer attribute)": [[69, "sparknlp_jsl.annotator.deid.replacer.Replacer.name"]], "outputannotatortype (replacer attribute)": [[69, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputAnnotatorType"]], "setusereplacement() (replacer method)": [[69, "sparknlp_jsl.annotator.deid.replacer.Replacer.setUseReplacement"]], "sparknlp_jsl.annotator.deid.replacer": [[69, "module-sparknlp_jsl.annotator.deid.replacer"]], "usereplacement (replacer attribute)": [[69, "sparknlp_jsl.annotator.deid.replacer.Replacer.useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[70, "module-sparknlp_jsl.annotator.disambiguation"]], "nerdisambiguator (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator"]], "nerdisambiguatormodel (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel"]], "embeddingtypeparam (nerdisambiguator attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.embeddingTypeParam"]], "embeddingtypeparam (nerdisambiguatormodel attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.embeddingTypeParam"]], "inputannotatortypes (nerdisambiguator attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputAnnotatorTypes"]], "inputannotatortypes (nerdisambiguatormodel attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputAnnotatorTypes"]], "levenshteindistancethresholdparam (nerdisambiguator attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.levenshteinDistanceThresholdParam"]], "levenshteindistancethresholdparam (nerdisambiguatormodel attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.levenshteinDistanceThresholdParam"]], "name (nerdisambiguatormodel attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.name"]], "narrowwithapproximatematching (nerdisambiguator attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.narrowWithApproximateMatching"]], "narrowwithapproximatematching (nerdisambiguatormodel attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.narrowWithApproximateMatching"]], "nearmatchinggapparam (nerdisambiguator attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.nearMatchingGapParam"]], "nearmatchinggapparam (nerdisambiguatormodel attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.nearMatchingGapParam"]], "numfirstchars (nerdisambiguator attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.numFirstChars"]], "numfirstchars (nerdisambiguatormodel attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.numFirstChars"]], "outputannotatortype (nerdisambiguator attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputAnnotatorType"]], "outputannotatortype (nerdisambiguatormodel attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputAnnotatorType"]], "predictionslimit (nerdisambiguator attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.predictionsLimit"]], "predictionslimit (nerdisambiguatormodel attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.predictionsLimit"]], "pretrained() (nerdisambiguatormodel static method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.pretrained"]], "s3knowledgebasename (nerdisambiguator attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.s3KnowledgeBaseName"]], "setembeddingtype() (nerdisambiguator method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setEmbeddingType"]], "setembeddingtype() (nerdisambiguatormodel method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setEmbeddingType"]], "setlevenshteindistancethresholdparam() (nerdisambiguator method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLevenshteinDistanceThresholdParam"]], "setlevenshteindistancethresholdparam() (nerdisambiguatormodel method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLevenshteinDistanceThresholdParam"]], "setnarrowwithapproximatematching() (nerdisambiguator method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNarrowWithApproximateMatching"]], "setnarrowwithapproximatematching() (nerdisambiguatormodel method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNarrowWithApproximateMatching"]], "setnearmatchinggapparam() (nerdisambiguator method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNearMatchingGapParam"]], "setnearmatchinggapparam() (nerdisambiguatormodel method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNearMatchingGapParam"]], "setnumfirstchars() (nerdisambiguator method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNumFirstChars"]], "setnumfirstchars() (nerdisambiguatormodel method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNumFirstChars"]], "setpredictionlimit() (nerdisambiguator method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setPredictionLimit"]], "setpredictionlimit() (nerdisambiguatormodel method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setPredictionLimit"]], "sets3knowledgebasename() (nerdisambiguator method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setS3KnowledgeBaseName"]], "settokensearch() (nerdisambiguator method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setTokenSearch"]], "settokensearch() (nerdisambiguatormodel method)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setTokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[71, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "tokensearch (nerdisambiguator attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.tokenSearch"]], "tokensearch (nerdisambiguatormodel attribute)": [[71, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.tokenSearch"]], "doc2chunkinternal (class in sparknlp_jsl.annotator.doc2_chunk_internal)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal"]], "chunkcol (doc2chunkinternal attribute)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.chunkCol"]], "failonmissing (doc2chunkinternal attribute)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.failOnMissing"]], "inputannotatortypes (doc2chunkinternal attribute)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputAnnotatorTypes"]], "isarray (doc2chunkinternal attribute)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isArray"]], "lowercase (doc2chunkinternal attribute)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lowerCase"]], "name (doc2chunkinternal attribute)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.name"]], "setchunkcol() (doc2chunkinternal method)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setChunkCol"]], "setfailonmissing() (doc2chunkinternal method)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setFailOnMissing"]], "setisarray() (doc2chunkinternal method)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setIsArray"]], "setlowercase() (doc2chunkinternal method)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLowerCase"]], "setparams() (doc2chunkinternal method)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParams"]], "setstartcol() (doc2chunkinternal method)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartCol"]], "setstartcolbytokenindex() (doc2chunkinternal method)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartColByTokenIndex"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[72, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "startcol (doc2chunkinternal attribute)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startCol"]], "startcolbytokenindex (doc2chunkinternal attribute)": [[72, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startColByTokenIndex"]], "averageembeddings (class in sparknlp_jsl.annotator.embeddings.average_embeddings)": [[73, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings"]], "inputannotatortypes (averageembeddings attribute)": [[73, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputAnnotatorTypes"]], "name (averageembeddings attribute)": [[73, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.name"]], "outputannotatortype (averageembeddings attribute)": [[73, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[73, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "bertsentencechunkembeddings (class in sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings)": [[74, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings"]], "chunkweight (bertsentencechunkembeddings attribute)": [[74, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.chunkWeight"]], "inputannotatortypes (bertsentencechunkembeddings attribute)": [[74, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputAnnotatorTypes"]], "load() (bertsentencechunkembeddings static method)": [[74, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.load"]], "name (bertsentencechunkembeddings attribute)": [[74, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.name"]], "outputannotatortype (bertsentencechunkembeddings attribute)": [[74, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentencechunkembeddings static method)": [[74, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.pretrained"]], "setchunkweight() (bertsentencechunkembeddings method)": [[74, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[74, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "entitychunkembeddings (class in sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings)": [[75, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings"]], "entityweights (entitychunkembeddings attribute)": [[75, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.entityWeights"]], "inputannotatortypes (entitychunkembeddings attribute)": [[75, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputAnnotatorTypes"]], "maxsyntacticdistance (entitychunkembeddings attribute)": [[75, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.maxSyntacticDistance"]], "name (entitychunkembeddings attribute)": [[75, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.name"]], "outputannotatortype (entitychunkembeddings attribute)": [[75, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputAnnotatorType"]], "pretrained() (entitychunkembeddings static method)": [[75, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.pretrained"]], "setentityweights() (entitychunkembeddings method)": [[75, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setEntityWeights"]], "setmaxsyntacticdistance() (entitychunkembeddings method)": [[75, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setMaxSyntacticDistance"]], "settargetentities() (entitychunkembeddings method)": [[75, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setTargetEntities"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[75, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "targetentities (entitychunkembeddings attribute)": [[75, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.targetEntities"]], "sparknlp_jsl.annotator.embeddings": [[76, "module-sparknlp_jsl.annotator.embeddings"]], "genericclassifierapproach (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach"]], "genericclassifiermodel (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel"]], "batchsize (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.batchSize"]], "classes (genericclassifiermodel attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.classes"]], "dropout (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.dropout"]], "epochsn (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.epochsN"]], "featurescaling (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.featureScaling"]], "fiximbalance (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fixImbalance"]], "inputannotatortypes (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericclassifiermodel attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputAnnotatorTypes"]], "labelcolumn (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.labelColumn"]], "learningrate (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.learningRate"]], "modelfile (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.modelFile"]], "name (genericclassifiermodel attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.name"]], "outputannotatortype (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericclassifiermodel attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputAnnotatorType"]], "outputlogspath (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputLogsPath"]], "pretrained() (genericclassifiermodel static method)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.pretrained"]], "setbatchsize() (genericclassifierapproach method)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setBatchSize"]], "setdropout() (genericclassifierapproach method)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDropout"]], "setepochsnumber() (genericclassifierapproach method)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericclassifierapproach method)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFeatureScaling"]], "setfiximbalance() (genericclassifierapproach method)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFixImbalance"]], "setlabelcol() (genericclassifierapproach method)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLabelCol"]], "setlearningrate() (genericclassifierapproach method)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLearningRate"]], "setmodelfile() (genericclassifierapproach method)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setModelFile"]], "setoutputlogspath() (genericclassifierapproach method)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputLogsPath"]], "setvalidationsplit() (genericclassifierapproach method)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setValidationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[77, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "validationsplit (genericclassifierapproach attribute)": [[77, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.validationSplit"]], "sparknlp_jsl.annotator.generic_classifier": [[78, "module-sparknlp_jsl.annotator.generic_classifier"]], "assertion (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.assertion"]], "chunker (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.chunker"]], "classification (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.classification"]], "context (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.context"]], "deid (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.deid"]], "disambiguation (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.disambiguation"]], "generic_classifier (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.generic_classifier"]], "keyword (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.keyword"]], "merge (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.merge"]], "ner (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.ner"]], "qa (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.qa"]], "re (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.re"]], "resolution (in module sparknlp_jsl.annotator)": [[79, "sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator": [[79, "module-sparknlp_jsl.annotator"]], "chunkmergeapproach (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach"]], "chunkmergemodel (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel"]], "commonchunkmergeparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams"]], "mergepriorizationparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams"]], "blacklist (commonchunkmergeparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams.blackList"]], "chunkprecedence (mergepriorizationparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.chunkPrecedence"]], "chunkprecedencevalueprioritization (mergepriorizationparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.chunkPrecedenceValuePrioritization"]], "defaultconfidence (mergepriorizationparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.defaultConfidence"]], "falsepositives (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.falsePositives"]], "falsepositivesresource (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.falsePositivesResource"]], "inputannotatortypes (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputAnnotatorTypes"]], "mergeoverlapping (commonchunkmergeparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams.mergeOverlapping"]], "name (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.name"]], "name (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.name"]], "orderingfeatures (mergepriorizationparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.orderingFeatures"]], "outputannotatortype (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputAnnotatorType"]], "outputannotatortype (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputAnnotatorType"]], "pretrained() (chunkmergemodel static method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.pretrained"]], "replacedict (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.replaceDict"]], "replacedictresource (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.replaceDictResource"]], "selectionstrategy (mergepriorizationparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.selectionStrategy"]], "setblacklist() (commonchunkmergeparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams.setBlackList"]], "setchunkprecedence() (mergepriorizationparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.setChunkPrecedence"]], "setchunkprecedencevalueprioritization() (mergepriorizationparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.setChunkPrecedenceValuePrioritization"]], "setdefaultconfidence() (mergepriorizationparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.setDefaultConfidence"]], "setfalsepositivesresource() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setFalsePositivesResource"]], "setinputcols() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setInputCols"]], "setinputcols() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setInputCols"]], "setmergeoverlapping() (commonchunkmergeparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams.setMergeOverlapping"]], "setorderingfeatures() (mergepriorizationparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.setOrderingFeatures"]], "setreplacedictresource() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setReplaceDictResource"]], "setselectionstrategy() (mergepriorizationparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[80, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[81, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[82, "module-sparknlp_jsl.annotator.ner"]], "iobtagger (class in sparknlp_jsl.annotator.ner.iob_tagger)": [[83, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger"]], "inputannotatortypes (iobtagger attribute)": [[83, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputAnnotatorTypes"]], "name (iobtagger attribute)": [[83, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.name"]], "outputannotatortype (iobtagger attribute)": [[83, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputAnnotatorType"]], "scheme (iobtagger attribute)": [[83, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.scheme"]], "setscheme() (iobtagger method)": [[83, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setScheme"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[83, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "medicalnerapproach (class in sparknlp_jsl.annotator.ner.medical_ner)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach"]], "medicalnermodel (class in sparknlp_jsl.annotator.ner.medical_ner)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel"]], "batchsize (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.batchSize"]], "classes (medicalnermodel attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.classes"]], "configprotobytes (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.configProtoBytes"]], "configprotobytes (medicalnermodel attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.configProtoBytes"]], "dropout (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.dropout"]], "earlystoppingcriterion (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableMemoryOptimizer"]], "gettrainingclassdistribution() (medicalnermodel method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getTrainingClassDistribution"]], "graphfile (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFile"]], "graphfolder (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFolder"]], "includeallconfidencescores (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (medicalnermodel attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeAllConfidenceScores"]], "includeconfidence (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeConfidence"]], "includeconfidence (medicalnermodel attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeConfidence"]], "inferencebatchsize (medicalnermodel attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inferenceBatchSize"]], "inputannotatortypes (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (medicalnermodel attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputAnnotatorTypes"]], "labelcasing (medicalnermodel attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.labelCasing"]], "loadsavedmodel() (medicalnermodel static method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.loadSavedModel"]], "logprefix (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.logPrefix"]], "lr (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lr"]], "name (medicalnermodel attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.name"]], "outputannotatortype (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputAnnotatorType"]], "outputannotatortype (medicalnermodel attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputAnnotatorType"]], "overrideexistingtags (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.overrideExistingTags"]], "po (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.po"]], "pretrained() (medicalnermodel static method)": [[84, "id29"], [84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.pretrained"]], "pretrainedmodelpath (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.pretrainedModelPath"]], "setbatchsize() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setBatchSize"]], "setconfigprotobytes() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (medicalnermodel method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setConfigProtoBytes"]], "setdropout() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDropout"]], "setearlystoppingcriterion() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableMemoryOptimizer"]], "setgraphfile() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFile"]], "setgraphfolder() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (medicalnermodel method)": [[84, "id0"], [84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (medicalnermodel method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInferenceBatchSize"]], "setlabelcasing() (medicalnermodel method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLabelCasing"]], "setlogprefix() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLogPrefix"]], "setlr() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLr"]], "setoverrideexistingtags() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOverrideExistingTags"]], "setpo() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPo"]], "setpretrainedmodelpath() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPretrainedModelPath"]], "settagsmapping() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTagsMapping"]], "setusebestmodel() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseBestModel"]], "setusecontrib() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseContrib"]], "setvalidationsplit() (medicalnerapproach method)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setValidationSplit"]], "sparknlp_jsl.annotator.ner.medical_ner": [[84, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "tagsmapping (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.tagsMapping"]], "trainingclassdistribution (medicalnermodel attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.trainingClassDistribution"]], "usebestmodel (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useBestModel"]], "usecontrib (medicalnerapproach attribute)": [[84, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useContrib"]], "nerchunker (class in sparknlp_jsl.annotator.ner.ner_chunker)": [[85, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker"]], "inputannotatortypes (nerchunker attribute)": [[85, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputAnnotatorTypes"]], "name (nerchunker attribute)": [[85, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.name"]], "outputannotatortype (nerchunker attribute)": [[85, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputAnnotatorType"]], "regexparsers (nerchunker attribute)": [[85, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.regexParsers"]], "setregexparsers() (nerchunker method)": [[85, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[85, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "commonnerconverterinternalparams (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams"]], "nerconverterinternal (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal"]], "nerconverterinternalmodel (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel"]], "blacklist (commonnerconverterinternalparams attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.blackList"]], "greedymode (commonnerconverterinternalparams attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.greedyMode"]], "ignorestopwords (commonnerconverterinternalparams attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.ignoreStopWords"]], "inputannotatortypes (nerconverterinternal attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputAnnotatorTypes"]], "inputannotatortypes (nerconverterinternalmodel attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputAnnotatorTypes"]], "name (nerconverterinternal attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.name"]], "name (nerconverterinternalmodel attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.name"]], "outputannotatortype (nerconverterinternal attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputAnnotatorType"]], "outputannotatortype (nerconverterinternalmodel attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputAnnotatorType"]], "preserveposition (commonnerconverterinternalparams attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.preservePosition"]], "replacedictresource (nerconverterinternal attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceDictResource"]], "replacelabels (nerconverterinternal attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceLabels"]], "setblacklist() (commonnerconverterinternalparams method)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setBlackList"]], "setgreedymode() (commonnerconverterinternalparams method)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setGreedyMode"]], "setignorestopwords() (commonnerconverterinternalparams method)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setIgnoreStopWords"]], "setpreserveposition() (commonnerconverterinternalparams method)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setPreservePosition"]], "setreplacedictresource() (nerconverterinternal method)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceDictResource"]], "setreplacelabels() (nerconverterinternal method)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceLabels"]], "setthreshold() (commonnerconverterinternalparams method)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setThreshold"]], "setwhitelist() (commonnerconverterinternalparams method)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setWhiteList"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[86, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "threshold (commonnerconverterinternalparams attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.threshold"]], "whitelist (commonnerconverterinternalparams attribute)": [[86, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.whiteList"]], "zeroshotnermodel (class in sparknlp_jsl.annotator.ner.zero_shot_ner)": [[87, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[87, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[87, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.load"], [138, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"], [167, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.name"], [138, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"], [167, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[87, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [138, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [167, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[87, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[87, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[87, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "datenormalizer (class in sparknlp_jsl.annotator.normalizer.date_normalizer)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer"]], "anchordateday (datenormalizer attribute)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateDay"]], "anchordatemonth (datenormalizer attribute)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateMonth"]], "anchordateyear (datenormalizer attribute)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateYear"]], "defaultreplacementday (datenormalizer attribute)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementDay"]], "defaultreplacementmonth (datenormalizer attribute)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementMonth"]], "defaultreplacementyear (datenormalizer attribute)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementYear"]], "inputannotatortypes (datenormalizer attribute)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputAnnotatorTypes"]], "name (datenormalizer attribute)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.name"]], "outputannotatortype (datenormalizer attribute)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputAnnotatorType"]], "outputdateformat (datenormalizer attribute)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputDateFormat"]], "setanchordateday() (datenormalizer method)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateDay"]], "setanchordatemonth() (datenormalizer method)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateMonth"]], "setanchordateyear() (datenormalizer method)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateYear"]], "setdefaultreplacementday() (datenormalizer method)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementDay"]], "setdefaultreplacementmonth() (datenormalizer method)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementMonth"]], "setdefaultreplacementyear() (datenormalizer method)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementYear"]], "setoutputdateformat() (datenormalizer method)": [[88, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[88, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "drugnormalizer (class in sparknlp_jsl.annotator.normalizer.drug_normalizer)": [[89, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer"]], "inputannotatortypes (drugnormalizer attribute)": [[89, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputAnnotatorTypes"]], "lowercase (drugnormalizer attribute)": [[89, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lowercase"]], "outputannotatortype (drugnormalizer attribute)": [[89, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputAnnotatorType"]], "policy (drugnormalizer attribute)": [[89, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.policy"]], "setlowercase() (drugnormalizer method)": [[89, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLowercase"]], "setpolicy() (drugnormalizer method)": [[89, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setPolicy"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[89, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[90, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa": [[91, "module-sparknlp_jsl.annotator.qa"]], "nerquestiongenerator (class in sparknlp_jsl.annotator.qa.qa_ner_generator)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator"]], "entities1 (nerquestiongenerator attribute)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities1"]], "entities2 (nerquestiongenerator attribute)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities2"]], "inputannotatortypes (nerquestiongenerator attribute)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputAnnotatorTypes"]], "name (nerquestiongenerator attribute)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.name"]], "outputannotatortype (nerquestiongenerator attribute)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputAnnotatorType"]], "questionmark (nerquestiongenerator attribute)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionMark"]], "questionpronoun (nerquestiongenerator attribute)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionPronoun"]], "setentities1() (nerquestiongenerator method)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities1"]], "setentities2() (nerquestiongenerator method)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities2"]], "setquestionmark() (nerquestiongenerator method)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (nerquestiongenerator method)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (nerquestiongenerator method)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setStrategyType"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[92, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "strategytype (nerquestiongenerator attribute)": [[92, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.strategyType"]], "sparknlp_jsl.annotator.re": [[93, "module-sparknlp_jsl.annotator.re"]], "genericremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel"]], "posologyremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel"]], "relationextractionapproach (class in sparknlp_jsl.annotator.re.relation_extraction)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach"]], "relationextractionmodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel"]], "classes (relationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.classes"]], "customlabels (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.customLabels"]], "fromentitybegincol (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityBeginCol"]], "fromentityendcol (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityEndCol"]], "fromentitylabelcol (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityLabelCol"]], "getclasses() (relationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getClasses"]], "inputannotatortypes (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputAnnotatorTypes"]], "maxsyntacticdistance (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.maxSyntacticDistance"]], "name (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.name"]], "name (relationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.name"]], "outputannotatortype (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputAnnotatorType"]], "outputannotatortype (relationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputAnnotatorType"]], "overrideexistinglabels (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.overrideExistingLabels"]], "predictionthreshold (relationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.predictionThreshold"]], "pretrained() (relationextractionmodel static method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.pretrained"]], "pretrainedmodelpath (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.pretrainedModelPath"]], "relationdirectioncol (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.relationDirectionCol"]], "relationpairs (relationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairs"]], "relationpairscasesensitive (relationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairsCaseSensitive"]], "setcustomlabels() (relationextractionapproach method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setCustomLabels"]], "setcustomlabels() (relationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setCustomLabels"]], "setfromentity() (relationextractionapproach method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFromEntity"]], "setmaxsyntacticdistance() (relationextractionapproach method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMaxSyntacticDistance"]], "setpredictionthreshold() (relationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setPredictionThreshold"]], "setpretrainedmodelpath() (relationextractionapproach method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setPretrainedModelPath"]], "setrelationdirectioncol() (relationextractionapproach method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setRelationDirectionCol"]], "setrelationpairs() (relationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairs"]], "setrelationpairscasesensitive() (relationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairsCaseSensitive"]], "settoentity() (relationextractionapproach method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setToEntity"]], "set\u043everrideexistinglabels() (relationextractionapproach method)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels"]], "sparknlp_jsl.annotator.re.relation_extraction": [[94, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "toentitybegincol (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityBeginCol"]], "toentityendcol (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityEndCol"]], "toentitylabelcol (relationextractionapproach attribute)": [[94, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityLabelCol"]], "relationextractiondlmodel (class in sparknlp_jsl.annotator.re.relation_extraction_dl)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel"]], "batchsize (relationextractiondlmodel attribute)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.batchSize"]], "classes (relationextractiondlmodel attribute)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.classes"]], "customlabels (relationextractiondlmodel attribute)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.customLabels"]], "getclasses() (relationextractiondlmodel method)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getClasses"]], "inputannotatortypes (relationextractiondlmodel attribute)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"]], "loadsavedmodel() (relationextractiondlmodel static method)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [125, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [154, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"]], "name (relationextractiondlmodel attribute)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.name"], [125, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"], [154, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"]], "outputannotatortype (relationextractiondlmodel attribute)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"]], "predictionthreshold (relationextractiondlmodel attribute)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"]], "pretrained() (relationextractiondlmodel static method)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [125, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [154, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"]], "setbatchsize() (relationextractiondlmodel method)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"]], "setcasesensitive() (relationextractiondlmodel method)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"]], "setcustomlabels() (relationextractiondlmodel method)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"]], "setpredictionthreshold() (relationextractiondlmodel method)": [[95, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[95, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "renerchunksfilter (class in sparknlp_jsl.annotator.re.relation_ner_chunk_filter)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter"]], "doclevelrelations (renerchunksfilter attribute)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.docLevelRelations"]], "inputannotatortypes (renerchunksfilter attribute)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputAnnotatorTypes"]], "maxsyntacticdistance (renerchunksfilter attribute)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.maxSyntacticDistance"]], "name (renerchunksfilter attribute)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.name"]], "outputannotatortype (renerchunksfilter attribute)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputAnnotatorType"]], "relationpairs (renerchunksfilter attribute)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairs"]], "relationpairscasesensitive (renerchunksfilter attribute)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairsCaseSensitive"]], "setdoclevelrelations() (renerchunksfilter method)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDocLevelRelations"]], "setmaxsyntacticdistance() (renerchunksfilter method)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setMaxSyntacticDistance"]], "setrelationpairs() (renerchunksfilter method)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairs"]], "setrelationpairscasesensitive() (renerchunksfilter method)": [[96, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[96, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.annotator.re.zero_shot_relation_extraction)": [[97, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "getclasses() (zeroshotrelationextractionmodel method)": [[97, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"]], "inputannotatortypes (zeroshotrelationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"]], "loadsavedmodel() (zeroshotrelationextractionmodel static method)": [[97, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [126, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [155, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"]], "multilabel (zeroshotrelationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"]], "outputannotatortype (zeroshotrelationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"]], "predictionthreshold (zeroshotrelationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"]], "pretrained() (zeroshotrelationextractionmodel static method)": [[97, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [126, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [155, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"]], "setrelationalcategories() (zeroshotrelationextractionmodel method)": [[97, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[97, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[98, "module-sparknlp_jsl.annotator.resolution"]], "resolvermerger (class in sparknlp_jsl.annotator.resolution.resolver_merger)": [[99, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger"]], "inputannotatortypes (resolvermerger attribute)": [[99, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputAnnotatorTypes"]], "name (resolvermerger attribute)": [[99, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.name"]], "outputannotatortype (resolvermerger attribute)": [[99, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[99, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sentenceentityresolverapproach (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sentenceresolverparams (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams"]], "aux_label_col (sentenceentityresolverapproach attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"]], "aux_label_col (sentenceentityresolvermodel attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.aux_label_col"]], "confidencefunction (sentenceresolverparams attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.confidenceFunction"]], "distancefunction (sentenceresolverparams attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.distanceFunction"]], "dropcodeslist (sentenceentityresolverapproach attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"]], "inputannotatortypes (sentenceentityresolverapproach attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentenceentityresolvermodel attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"]], "inputannotatortypes (sentenceresolverparams attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.inputAnnotatorTypes"]], "labelcol (sentenceentityresolverapproach attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"]], "missasempty (sentenceresolverparams attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.missAsEmpty"]], "name (sentenceentityresolvermodel attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [151, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"]], "neighbours (sentenceresolverparams attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.neighbours"]], "normalizedcol (sentenceentityresolverapproach attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"]], "outputannotatortype (sentenceentityresolverapproach attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"]], "outputannotatortype (sentenceentityresolvermodel attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"]], "overrideexistingcodes (sentenceentityresolverapproach attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"]], "pretrained() (sentenceentityresolvermodel static method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [122, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [151, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"]], "pretrainedmodelpath (sentenceentityresolverapproach attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"]], "returncosinedistances (sentenceentityresolverapproach attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"]], "returncosinedistances (sentenceentityresolvermodel attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"]], "searchtree (sentenceentityresolvermodel attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"]], "setauxlabelcol() (sentenceentityresolverapproach method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"]], "setauxlabelcol() (sentenceentityresolvermodel method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setAuxLabelCol"]], "setconfidencefunction() (sentenceresolverparams method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setConfidenceFunction"]], "setdistancefunction() (sentenceresolverparams method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDistanceFunction"]], "setdropcodeslist() (sentenceentityresolverapproach method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"]], "setextractcosinedistances() (sentenceentityresolverapproach method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"]], "setlabelcol() (sentenceentityresolverapproach method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"]], "setmissasempty() (sentenceresolverparams method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setMissAsEmpty"]], "setneighbours() (sentenceresolverparams method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setNeighbours"]], "setnormalizedcol() (sentenceentityresolverapproach method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"]], "setoverrideexistingcodes() (sentenceentityresolverapproach method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"]], "setpretrainedmodelpath() (sentenceentityresolverapproach method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"]], "setsearchtree() (sentenceentityresolvermodel method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"]], "setthreshold() (sentenceresolverparams method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setThreshold"]], "setuseauxlabel() (sentenceentityresolverapproach method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"]], "setuseauxlabel() (sentenceentityresolvermodel method)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[100, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "threshold (sentenceresolverparams attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.threshold"]], "useauxlabel (sentenceentityresolverapproach attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"]], "useauxlabel (sentenceentityresolvermodel attribute)": [[100, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"]], "resolution2chunk (class in sparknlp_jsl.annotator.resolution2_chunk)": [[101, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk"]], "inputannotatortypes (resolution2chunk attribute)": [[101, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputAnnotatorTypes"]], "name (resolution2chunk attribute)": [[101, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.name"]], "outputannotatortype (resolution2chunk attribute)": [[101, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputAnnotatorType"]], "setparams() (resolution2chunk method)": [[101, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParams"]], "sparknlp_jsl.annotator.resolution2_chunk": [[101, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "router (class in sparknlp_jsl.annotator.router)": [[102, "sparknlp_jsl.annotator.router.Router"]], "filterfieldselements (router attribute)": [[102, "sparknlp_jsl.annotator.router.Router.filterFieldsElements"]], "inputannotatortypes (router attribute)": [[102, "sparknlp_jsl.annotator.router.Router.inputAnnotatorTypes"]], "inputtype (router attribute)": [[102, "sparknlp_jsl.annotator.router.Router.inputType"]], "metadatafield (router attribute)": [[102, "sparknlp_jsl.annotator.router.Router.metadataField"]], "name (router attribute)": [[102, "sparknlp_jsl.annotator.router.Router.name"]], "outputannotatortype (router attribute)": [[102, "sparknlp_jsl.annotator.router.Router.outputAnnotatorType"]], "setfilterfieldselements() (router method)": [[102, "sparknlp_jsl.annotator.router.Router.setFilterFieldsElements"]], "setinputcols() (router method)": [[102, "sparknlp_jsl.annotator.router.Router.setInputCols"]], "setinputtype() (router method)": [[102, "sparknlp_jsl.annotator.router.Router.setInputType"]], "setmetadatafield() (router method)": [[102, "sparknlp_jsl.annotator.router.Router.setMetadataField"]], "sparknlp_jsl.annotator.router": [[102, "module-sparknlp_jsl.annotator.router"]], "sourcetrackingmetadataparams (class in sparknlp_jsl.annotator.source_tracking_metadata_params)": [[103, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams"]], "allpossiblefieldstostandardize (sourcetrackingmetadataparams attribute)": [[103, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.allPossibleFieldsToStandardize"]], "includeoutputcolumn (sourcetrackingmetadataparams attribute)": [[103, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeOutputColumn"]], "includestandardfield (sourcetrackingmetadataparams attribute)": [[103, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeStandardField"]], "outputcolumnkey (sourcetrackingmetadataparams attribute)": [[103, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.outputColumnKey"]], "setallpossiblefieldstostandardize() (sourcetrackingmetadataparams method)": [[103, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setAllPossibleFieldsToStandardize"]], "setincludeoutputcolumn() (sourcetrackingmetadataparams method)": [[103, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeOutputColumn"]], "setincludestandardfield() (sourcetrackingmetadataparams method)": [[103, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeStandardField"]], "setoutputcolumnkey() (sourcetrackingmetadataparams method)": [[103, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setOutputColumnKey"]], "setstandardfieldkey() (sourcetrackingmetadataparams method)": [[103, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setStandardFieldKey"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[103, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "standardfieldkey (sourcetrackingmetadataparams attribute)": [[103, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.standardFieldKey"]], "tfgraphbuilder (class in sparknlp_jsl.annotator.tf_graph_builder)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder"]], "tfgraphbuildermodel (class in sparknlp_jsl.annotator.tf_graph_builder)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel"]], "batchnorm (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.batchNorm"]], "getbatchnorm() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getBatchNorm"]], "getgraphfile() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFile"]], "getgraphfolder() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFolder"]], "gethiddenact() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenAct"]], "gethiddenactl2() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenActL2"]], "gethiddenlayers() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenLayers"]], "gethiddenunitsnumber() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenUnitsNumber"]], "gethiddenweightsl2() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenWeightsL2"]], "getinputcols() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getInputCols"]], "getislicensed() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getIsLicensed"]], "getlabelcolumn() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getLabelColumn"]], "getmaxsequencelength() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getMaxSequenceLength"]], "getmodelname() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getModelName"]], "getuserelationdirection() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getUseRelationDirection"]], "graphfile (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFile"]], "graphfolder (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFolder"]], "hiddenact (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenAct"]], "hiddenactl2 (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenActL2"]], "hiddenlayers (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenLayers"]], "hiddenunitsnumber (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenUnitsNumber"]], "hiddenweightsl2 (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenWeightsL2"]], "inputcols (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.inputCols"]], "islicensed (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isLicensed"]], "labelcolumn (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.labelColumn"]], "maxsequencelength (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.maxSequenceLength"]], "modelname (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.modelName"]], "setbatchnorm() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setBatchNorm"]], "setgraphfile() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFile"]], "setgraphfolder() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFolder"]], "sethiddenact() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenAct"]], "sethiddenactl2() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenActL2"]], "sethiddenlayers() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenLayers"]], "sethiddenunitsnumber() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenUnitsNumber"]], "sethiddenweightsl2() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenWeightsL2"]], "setinputcols() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setInputCols"]], "setislicensed() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setIsLicensed"]], "setlabelcolumn() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setLabelColumn"]], "setmaxsequencelength() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setMaxSequenceLength"]], "setmodelname() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setModelName"]], "setuserelationdirection() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setUseRelationDirection"]], "sparknlp_jsl.annotator.tf_graph_builder": [[104, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "userelationdirection (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.useRelationDirection"]], "featuresassembler (class in sparknlp_jsl.base)": [[105, "sparknlp_jsl.base.FeaturesAssembler"]], "inputcols (featuresassembler attribute)": [[105, "sparknlp_jsl.base.FeaturesAssembler.inputCols"]], "name (featuresassembler attribute)": [[105, "sparknlp_jsl.base.FeaturesAssembler.name"]], "outputcol (featuresassembler attribute)": [[105, "sparknlp_jsl.base.FeaturesAssembler.outputCol"]], "setinputcols() (featuresassembler method)": [[105, "sparknlp_jsl.base.FeaturesAssembler.setInputCols"]], "setoutputcol() (featuresassembler method)": [[105, "sparknlp_jsl.base.FeaturesAssembler.setOutputCol"]], "setparams() (featuresassembler method)": [[105, "sparknlp_jsl.base.FeaturesAssembler.setParams"]], "sparknlp_jsl.base": [[105, "module-sparknlp_jsl.base"]], "annotatorapproachinternal (class in sparknlp_jsl.common.annotator_approach_internal)": [[106, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal"]], "inputannotatortypes (annotatorapproachinternal attribute)": [[106, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatorapproachinternal attribute)": [[106, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputAnnotatorType"]], "sparknlp_jsl.common.annotator_approach_internal": [[106, "module-sparknlp_jsl.common.annotator_approach_internal"]], "annotatormodelinternal (class in sparknlp_jsl.common.annotator_model_internal)": [[107, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal"]], "inputannotatortypes (annotatormodelinternal attribute)": [[107, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatormodelinternal attribute)": [[107, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputAnnotatorType"]], "setparams() (annotatormodelinternal method)": [[107, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParams"]], "sparknlp_jsl.common.annotator_model_internal": [[107, "module-sparknlp_jsl.common.annotator_model_internal"]], "annotatorpropertiesinternal (class in sparknlp_jsl.common.annotator_properties_internal)": [[108, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal"]], "inputcolsvalidation() (annotatorpropertiesinternal method)": [[108, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputColsValidation"]], "setforceinputtypevalidation() (annotatorpropertiesinternal method)": [[108, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setForceInputTypeValidation"]], "sparknlp_jsl.common.annotator_properties_internal": [[108, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[109, "module-sparknlp_jsl.common"]], "compatibility (class in sparknlp_jsl.compatibility)": [[110, "sparknlp_jsl.compatibility.Compatibility"]], "findversion() (compatibility method)": [[110, "sparknlp_jsl.compatibility.Compatibility.findVersion"]], "showversion() (compatibility method)": [[110, "sparknlp_jsl.compatibility.Compatibility.showVersion"]], "sparknlp_jsl.compatibility": [[110, "module-sparknlp_jsl.compatibility"]], "customtransformer (class in sparknlp_jsl.custom_transformer)": [[111, "sparknlp_jsl.custom_transformer.CustomTransformer"]], "f (customtransformer attribute)": [[111, "sparknlp_jsl.custom_transformer.CustomTransformer.f"]], "setinputcol() (customtransformer method)": [[111, "sparknlp_jsl.custom_transformer.CustomTransformer.setInputCol"]], "setoutputcol() (customtransformer method)": [[111, "sparknlp_jsl.custom_transformer.CustomTransformer.setOutputCol"]], "sparknlp_jsl.custom_transformer": [[111, "module-sparknlp_jsl.custom_transformer"]], "nercrfevaluation (class in sparknlp_jsl.eval)": [[112, "sparknlp_jsl.eval.NerCrfEvaluation"]], "nerdlevaluation (class in sparknlp_jsl.eval)": [[112, "sparknlp_jsl.eval.NerDLEvaluation"]], "nerdlmetrics (class in sparknlp_jsl.eval)": [[112, "sparknlp_jsl.eval.NerDLMetrics"]], "norvigspellevaluation (class in sparknlp_jsl.eval)": [[112, "sparknlp_jsl.eval.NorvigSpellEvaluation"]], "posevaluation (class in sparknlp_jsl.eval)": [[112, "sparknlp_jsl.eval.POSEvaluation"]], "symspellevaluation (class in sparknlp_jsl.eval)": [[112, "sparknlp_jsl.eval.SymSpellEvaluation"]], "computeaccuracyannotator() (nercrfevaluation method)": [[112, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (nerdlevaluation method)": [[112, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (norvigspellevaluation method)": [[112, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (posevaluation method)": [[112, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (symspellevaluation method)": [[112, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracymodel() (nercrfevaluation method)": [[112, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (nerdlevaluation method)": [[112, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (norvigspellevaluation method)": [[112, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (posevaluation method)": [[112, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (symspellevaluation method)": [[112, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyModel"]], "computemetricsfromdf() (nerdlmetrics method)": [[112, "sparknlp_jsl.eval.NerDLMetrics.computeMetricsFromDF"]], "sparknlp_jsl.eval": [[112, "module-sparknlp_jsl.eval"]], "assertiondlapproach (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[113, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[113, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertiondl": [[113, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[114, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[115, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[115, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deidentification": [[115, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "financedocumenthashcoder (class in sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder)": [[116, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[116, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[117, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[118, "module-sparknlp_jsl.finance.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[119, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[119, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[119, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[120, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[120, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[120, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[121, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[122, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[122, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[122, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[123, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[124, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl)": [[125, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[125, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction)": [[126, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[126, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[127, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.finance.seq_generation": [[128, "module-sparknlp_jsl.finance.seq_generation"]], "financenerquestiongenerator (class in sparknlp_jsl.finance.seq_generation.qa_ner_generator)": [[129, "sparknlp_jsl.finance.seq_generation.qa_ner_generator.FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.seq_generation.qa_ner_generator": [[129, "module-sparknlp_jsl.finance.seq_generation.qa_ner_generator"]], "financebertforsequenceclassification (class in sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification)": [[130, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification"]], "loadsavedmodel() (financebertforsequenceclassification static method)": [[130, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertforsequenceclassification static method)": [[130, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModelOpenSource"]], "name (financebertforsequenceclassification attribute)": [[130, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.name"]], "pretrained() (financebertforsequenceclassification static method)": [[130, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[130, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "financeclassifierdlapproach (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[131, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach"]], "financeclassifierdlmodel (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[131, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel"]], "name (financeclassifierdlmodel attribute)": [[131, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.name"]], "pretrained() (financeclassifierdlmodel static method)": [[131, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[131, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "financedocumentmlclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach"]], "financedocumentmlclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel"]], "name (financedocumentmlclassifiermodel attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.name"]], "pretrained() (financedocumentmlclassifiermodel static method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[132, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[133, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.token_classification": [[134, "module-sparknlp_jsl.finance.token_classification"]], "financebertfortokenclassification (class in sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier)": [[135, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification"]], "loadsavedmodel() (financebertfortokenclassification static method)": [[135, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertfortokenclassification static method)": [[135, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModelOpenSource"]], "name (financebertfortokenclassification attribute)": [[135, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.name"]], "pretrained() (financebertfortokenclassification static method)": [[135, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[135, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "financenerapproach (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[136, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach"]], "financenermodel (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[136, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel"]], "loadsavedmodel() (financenermodel static method)": [[136, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.loadSavedModel"]], "name (financenermodel attribute)": [[136, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.name"]], "pretrained() (financenermodel static method)": [[136, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[136, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[137, "module-sparknlp_jsl.finance.token_classification.ner"]], "zeroshotnermodel (class in sparknlp_jsl.finance.token_classification.ner.zero_shot_ner)": [[138, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[138, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "profile() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profile"]], "profilev22() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV22"]], "profilev22y17() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV22Y17"]], "profilev22y18() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV22Y18"]], "profilev22y19() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV22Y19"]], "profilev22y20() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV22Y20"]], "profilev22y21() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV22Y21"]], "profilev22y22() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV22Y22"]], "profilev23() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV23"]], "profilev23y18() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV23Y18"]], "profilev23y19() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV23Y19"]], "profilev24y17() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV24Y17"]], "profilev24y18() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV24Y18"]], "profilev24y19() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV24Y19"]], "profilev24y20() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV24Y20"]], "profilev24y21() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV24Y21"]], "profilev24y22() (in module sparknlp_jsl.functions)": [[139, "sparknlp_jsl.functions.profileV24Y22"]], "sparknlp_jsl.functions": [[139, "module-sparknlp_jsl.functions"]], "annotators (in module sparknlp_jsl)": [[140, "sparknlp_jsl.annotators"]], "get_credentials() (in module sparknlp_jsl)": [[140, "sparknlp_jsl.get_credentials"]], "library_settings() (in module sparknlp_jsl)": [[140, "sparknlp_jsl.library_settings"]], "pub_version() (in module sparknlp_jsl)": [[140, "sparknlp_jsl.pub_version"]], "size_regex (in module sparknlp_jsl)": [[140, "sparknlp_jsl.size_regex"]], "sparknlp_jsl": [[140, "module-sparknlp_jsl"]], "start() (in module sparknlp_jsl)": [[140, "sparknlp_jsl.start"]], "transformer_seq_classification (in module sparknlp_jsl)": [[140, "sparknlp_jsl.transformer_seq_classification"]], "version() (in module sparknlp_jsl)": [[140, "sparknlp_jsl.version"]], "version_regex (in module sparknlp_jsl)": [[140, "sparknlp_jsl.version_regex"]], "customlabels() (in module sparknlp_jsl.internal)": [[141, "sparknlp_jsl.internal.CustomLabels"]], "entityweights() (in module sparknlp_jsl.internal)": [[141, "sparknlp_jsl.internal.EntityWeights"]], "relationalcategories() (in module sparknlp_jsl.internal)": [[141, "sparknlp_jsl.internal.RelationalCategories"]], "targetentities() (in module sparknlp_jsl.internal)": [[141, "sparknlp_jsl.internal.TargetEntities"]], "sparknlp_jsl.internal": [[141, "module-sparknlp_jsl.internal"]], "assertiondlapproach (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[142, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[142, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertiondl": [[142, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[143, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[144, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[144, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deidentification": [[144, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "legaldocumenthashcoder (class in sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder)": [[145, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[145, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[146, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[147, "module-sparknlp_jsl.legal.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[148, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[148, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[148, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[149, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[149, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[149, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[150, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[151, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[151, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[151, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[152, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[153, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl)": [[154, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[154, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction)": [[155, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[155, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[156, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.seq_generation": [[157, "module-sparknlp_jsl.legal.seq_generation"]], "legalnerquestiongenerator (class in sparknlp_jsl.legal.seq_generation.qa_ner_generator)": [[158, "sparknlp_jsl.legal.seq_generation.qa_ner_generator.LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.seq_generation.qa_ner_generator": [[158, "module-sparknlp_jsl.legal.seq_generation.qa_ner_generator"]], "sparknlp_jsl.legal.sequence_classification": [[159, "module-sparknlp_jsl.legal.sequence_classification"]], "legalbertforsequenceclassification (class in sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification)": [[160, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification"]], "loadsavedmodel() (legalbertforsequenceclassification static method)": [[160, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertforsequenceclassification static method)": [[160, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModelOpenSource"]], "name (legalbertforsequenceclassification attribute)": [[160, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.name"]], "pretrained() (legalbertforsequenceclassification static method)": [[160, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[160, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "legalclassifierdlapproach (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[161, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach"]], "legalclassifierdlmodel (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[161, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel"]], "name (legalclassifierdlmodel attribute)": [[161, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.name"]], "pretrained() (legalclassifierdlmodel static method)": [[161, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[161, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "legaldocumentmlclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[162, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach"]], "legaldocumentmlclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[162, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel"]], "name (legaldocumentmlclassifiermodel attribute)": [[162, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.name"]], "pretrained() (legaldocumentmlclassifiermodel static method)": [[162, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[162, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.token_classification": [[163, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[164, "module-sparknlp_jsl.legal.token_classification.ner"]], "legalbertfortokenclassification (class in sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier)": [[165, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification"]], "loadsavedmodel() (legalbertfortokenclassification static method)": [[165, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertfortokenclassification static method)": [[165, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModelOpenSource"]], "name (legalbertfortokenclassification attribute)": [[165, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.name"]], "pretrained() (legalbertfortokenclassification static method)": [[165, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[165, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "legalnerapproach (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[166, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach"]], "legalnermodel (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[166, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel"]], "loadsavedmodel() (legalnermodel static method)": [[166, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.loadSavedModel"]], "name (legalnermodel attribute)": [[166, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.name"]], "pretrained() (legalnermodel static method)": [[166, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[166, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "zeroshotnermodel (class in sparknlp_jsl.legal.token_classification.ner.zero_shot_ner)": [[167, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[167, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "modeltracer (class in sparknlp_jsl.modeltracer)": [[168, "sparknlp_jsl.modelTracer.ModelTracer"]], "adduidcols() (modeltracer method)": [[168, "sparknlp_jsl.modelTracer.ModelTracer.addUidCols"]], "sparknlp_jsl.modeltracer": [[168, "module-sparknlp_jsl.modelTracer"]], "rulebasedclassifier (class in sparknlp_jsl.nlp_test.bias.bias_testing)": [[169, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier"]], "init_medical_gender_classifier() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[169, "sparknlp_jsl.nlp_test.bias.bias_testing.init_medical_gender_classifier"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[169, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "test_gender_bias() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[169, "sparknlp_jsl.nlp_test.bias.bias_testing.test_gender_bias"]], "transform() (rulebasedclassifier method)": [[169, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier.transform"]], "sparknlp_jsl.nlp_test.bias": [[170, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[171, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[172, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "interactivefix (class in sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix"]], "add_flag_to_conll() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.add_flag_to_conll"]], "adjust_page_size() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.adjust_page_size"]], "apply_fixes() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.apply_fixes"]], "apply_label_fixes() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.apply_label_fixes"]], "conll_reader() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_reader"]], "conll_writer() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_writer"]], "create_grid() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.create_grid"]], "display() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.display"]], "empty_grid() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.empty_grid"]], "fill_grid() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fill_grid"]], "fix_all() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_all"]], "fix_label() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_label"]], "get_cell_element() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_cell_element"]], "get_central_grid() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_central_grid"]], "get_classes() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_classes"]], "get_default_indx() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_default_indx"]], "get_drop_down() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down"]], "get_drop_down_title() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down_title"]], "get_footer() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_footer"]], "get_header() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_header"]], "get_page_control_buttons() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_control_buttons"]], "get_page_number() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_number"]], "get_sentence() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_sentence"]], "get_title_html() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_title_html"]], "next_page() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.next_page"]], "num_sample_drop_down() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.num_sample_drop_down"]], "prev_page() (interactivefix method)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[173, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "update_with_model_predictions() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[173, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.update_with_model_predictions"]], "calculate_label_error_score() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[174, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.calculate_label_error_score"]], "get_label_quality_scores() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[174, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_label_quality_scores"]], "get_unique_entities() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[174, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_unique_entities"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[174, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "test_label_errors() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[174, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[175, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "stylesheet (in module sparknlp_jsl.nlp_test.noisy_labels.utils)": [[175, "sparknlp_jsl.nlp_test.noisy_labels.utils.stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[176, "module-sparknlp_jsl.nlp_test.robustness"]], "add_context_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_context_to_data"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_contractions"]], "add_punctuation_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_punctuation_to_data"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_typo_to_sentence"]], "augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.augment_robustness"]], "conll_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.conll_reader"]], "convert_accent() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.convert_accent"]], "create_dataframe() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_dataframe"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_terminology"]], "filter_by_entity_type() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.filter_by_entity_type"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_cohyponyms_wordnet"]], "get_sample() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_sample"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.introduce_typos"]], "modify_capitalization_lower() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_lower"]], "modify_capitalization_title() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_title"]], "modify_capitalization_upper() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_upper"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[177, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "strip_punctuation_from_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.strip_punctuation_from_data"]], "swap_entities_with_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_entities_with_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_with_cohyponym"]], "test_and_augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[177, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.test_and_augment_robustness"]], "add_context() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_context"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_contractions"]], "add_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_punctuation"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_typo_to_sentence"]], "american_to_british() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.american_to_british"]], "british_to_american() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.british_to_american"]], "calculate_metrics() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.calculate_metrics"]], "conll_sentence_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.conll_sentence_reader"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.create_terminology"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.get_cohyponyms_wordnet"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.introduce_typos"]], "modify_capitalization() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.modify_capitalization"]], "remove_context_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_context_tokens"]], "remove_contraction_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_contraction_tokens"]], "remove_punctuation_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_punctuation_tokens"]], "run_test() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.run_test"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[178, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "strip_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.strip_punctuation"]], "swap_named_entities_from_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_named_entities_from_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_with_cohyponym"]], "test_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[178, "sparknlp_jsl.nlp_test.robustness.robustness_testing.test_robustness"]], "calculate_proportion() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[179, "sparknlp_jsl.nlp_test.robustness.utils.calculate_proportion"]], "get_augmentation_proportions() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[179, "sparknlp_jsl.nlp_test.robustness.utils.get_augmentation_proportions"]], "sparknlp_jsl.nlp_test.robustness.utils": [[179, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "suggest_perturbations() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[179, "sparknlp_jsl.nlp_test.robustness.utils.suggest_perturbations"]], "internalresourcedownloader (class in sparknlp_jsl.pretrained)": [[180, "sparknlp_jsl.pretrained.InternalResourceDownloader"]], "downloadmodel() (internalresourcedownloader static method)": [[180, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModel"]], "printprogress() (in module sparknlp_jsl.pretrained)": [[180, "sparknlp_jsl.pretrained.printProgress"]], "returnprivatemodels() (internalresourcedownloader static method)": [[180, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivateModels"]], "returnprivatepipelines() (internalresourcedownloader static method)": [[180, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivatePipelines"]], "showavailableannotators() (internalresourcedownloader static method)": [[180, "sparknlp_jsl.pretrained.InternalResourceDownloader.showAvailableAnnotators"]], "showprivatemodels() (internalresourcedownloader static method)": [[180, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivateModels"]], "showprivatepipelines() (internalresourcedownloader static method)": [[180, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivatePipelines"]], "showuncategorizedresources() (internalresourcedownloader static method)": [[180, "sparknlp_jsl.pretrained.InternalResourceDownloader.showUnCategorizedResources"]], "sparknlp_jsl.pretrained": [[180, "module-sparknlp_jsl.pretrained"]], "structureddeidentification (class in sparknlp_jsl.structured_deidentification)": [[181, "sparknlp_jsl.structured_deidentification.StructuredDeidentification"]], "obfuscatecolumns() (structureddeidentification method)": [[181, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateColumns"]], "sparknlp_jsl.structured_deidentification": [[181, "module-sparknlp_jsl.structured_deidentification"]], "texttodocumentscolumns (class in sparknlp_jsl.text_to_documents_columns)": [[182, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns": [[182, "module-sparknlp_jsl.text_to_documents_columns"]], "todocumentscolumns() (texttodocumentscolumns method)": [[182, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumns"]], "annotationtooljsonreader (class in sparknlp_jsl.training)": [[183, "sparknlp_jsl.training.AnnotationToolJsonReader"]], "cantemistreader (class in sparknlp_jsl.training)": [[183, "sparknlp_jsl.training.CantemistReader"]], "codiespreader (class in sparknlp_jsl.training)": [[183, "sparknlp_jsl.training.CodiEspReader"]], "redatasethelper (class in sparknlp_jsl.training)": [[183, "sparknlp_jsl.training.REDatasetHelper"]], "synonymaugmentationumls (class in sparknlp_jsl.training)": [[183, "sparknlp_jsl.training.SynonymAugmentationUMLS"]], "augmentcsv() (synonymaugmentationumls method)": [[183, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentCsv"]], "augmentdataframe() (synonymaugmentationumls method)": [[183, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentDataFrame"]], "create_annotation_column() (redatasethelper method)": [[183, "sparknlp_jsl.training.REDatasetHelper.create_annotation_column"]], "generateassertiontrainset() (annotationtooljsonreader method)": [[183, "sparknlp_jsl.training.AnnotationToolJsonReader.generateAssertionTrainSet"]], "generateconll() (annotationtooljsonreader method)": [[183, "sparknlp_jsl.training.AnnotationToolJsonReader.generateConll"]], "generateplainassertiontrainset() (annotationtooljsonreader method)": [[183, "sparknlp_jsl.training.AnnotationToolJsonReader.generatePlainAssertionTrainSet"]], "readdataset() (annotationtooljsonreader method)": [[183, "sparknlp_jsl.training.AnnotationToolJsonReader.readDataset"]], "readdatasettaskner() (cantemistreader method)": [[183, "sparknlp_jsl.training.CantemistReader.readDatasetTaskNer"]], "readdatasettaskx() (codiespreader method)": [[183, "sparknlp_jsl.training.CodiEspReader.readDatasetTaskX"]], "sparknlp_jsl.training": [[183, "module-sparknlp_jsl.training"]], "tf_graph (in module sparknlp_jsl.training)": [[183, "sparknlp_jsl.training.tf_graph"]], "tf_graph_1x (in module sparknlp_jsl.training)": [[183, "sparknlp_jsl.training.tf_graph_1x"]], "assertion_log_parser (class in sparknlp_jsl.training_log_parser)": [[184, "sparknlp_jsl.training_log_parser.assertion_log_parser"]], "evaluate() (ner_log_parser method)": [[184, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate"]], "evaluate_conll_file() (ner_log_parser method)": [[184, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate_conll_file"]], "get_best_f1_scores() (assertion_log_parser method)": [[184, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_best_f1_scores"]], "get_best_f1_scores() (ner_log_parser method)": [[184, "sparknlp_jsl.training_log_parser.ner_log_parser.get_best_f1_scores"]], "get_charts() (assertion_log_parser method)": [[184, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_charts"]], "get_charts() (ner_log_parser method)": [[184, "sparknlp_jsl.training_log_parser.ner_log_parser.get_charts"]], "loss_plot() (assertion_log_parser method)": [[184, "sparknlp_jsl.training_log_parser.assertion_log_parser.loss_plot"]], "loss_plot() (ner_log_parser method)": [[184, "sparknlp_jsl.training_log_parser.ner_log_parser.loss_plot"]], "ner_log_parser (class in sparknlp_jsl.training_log_parser)": [[184, "sparknlp_jsl.training_log_parser.ner_log_parser"]], "parse_logfile() (assertion_log_parser method)": [[184, "sparknlp_jsl.training_log_parser.assertion_log_parser.parse_logfile"]], "parse_logfile() (ner_log_parser method)": [[184, "sparknlp_jsl.training_log_parser.ner_log_parser.parse_logfile"]], "sparknlp_jsl.training_log_parser": [[184, "module-sparknlp_jsl.training_log_parser"]], "updatemodels (class in sparknlp_jsl.updatemodels)": [[185, "sparknlp_jsl.updateModels.UpdateModels"]], "sparknlp_jsl.updatemodels": [[185, "module-sparknlp_jsl.updateModels"]], "updatecachemodels() (updatemodels static method)": [[185, "sparknlp_jsl.updateModels.UpdateModels.updateCacheModels"]], "updatemodels() (updatemodels static method)": [[185, "sparknlp_jsl.updateModels.UpdateModels.updateModels"]], "get_mt_samples() (in module sparknlp_jsl.util)": [[186, "sparknlp_jsl.util.get_mt_samples"]], "sparknlp_jsl.util": [[186, "module-sparknlp_jsl.util"]], "document_assembler (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.document_assembler"]], "empty_df (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.empty_df"]], "get_doc_assembler() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_doc_assembler"]], "get_empty_df() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_empty_df"]], "get_ner_df() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_ner_df"]], "get_ner_sentence_borders() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_ner_sentence_borders"]], "get_nlp_pos_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_nlp_pos_pipeline"]], "get_nlp_token_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_nlp_token_pipeline"]], "get_pos() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_pos"]], "get_regex_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_regex_tokenizer"]], "get_regular_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_regular_tokenizer"]], "get_rel_df() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_rel_df"]], "get_sent_detector() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_sent_detector"]], "get_sentence_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_sentence_pipeline"]], "get_single_task_conll() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_single_task_conll"]], "get_token_df() (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.get_token_df"]], "nlp_pos_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.nlp_pos_pipeline"]], "nlp_token_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.nlp_token_pipeline"]], "pos (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.pos"]], "pos_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.pos_pipeline_initialized"]], "regex_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.regex_tokenizer"]], "regular_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.regular_tokenizer"]], "sentence_detector (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.sentence_detector"]], "sparknlp_jsl.utils.alab_utils": [[187, "module-sparknlp_jsl.utils.alab_utils"]], "token_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[187, "sparknlp_jsl.utils.alab_utils.token_pipeline_initialized"]], "sparknlp_jsl.utils.conll_parse": [[188, "module-sparknlp_jsl.utils.conll_parse"]], "is_module_importable() (in module sparknlp_jsl.utils.imports)": [[189, "sparknlp_jsl.utils.imports.is_module_importable"]], "sparknlp_jsl.utils.imports": [[189, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[190, "module-sparknlp_jsl.utils"]], "assertion (internalannotatortype attribute)": [[191, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.ASSERTION"]], "disambiguation (internalannotatortype attribute)": [[191, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.DISAMBIGUATION"]], "feature_vector (internalannotatortype attribute)": [[191, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.FEATURE_VECTOR"]], "internalannotatortype (class in sparknlp_jsl.utils.licensed_annotator_type)": [[191, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType"]], "keyword (internalannotatortype attribute)": [[191, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.KEYWORD"]], "selector (internalannotatortype attribute)": [[191, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SELECTOR"]], "sql (internalannotatortype attribute)": [[191, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SQL"]], "sparknlp_jsl.utils.licensed_annotator_type": [[191, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[192, "module-sparknlp_jsl.utils.log_parse"]], "evaluate() (in module sparknlp_jsl.utils.ner_utils)": [[193, "sparknlp_jsl.utils.ner_utils.evaluate"]], "evaluate_conll_file() (in module sparknlp_jsl.utils.ner_utils)": [[193, "sparknlp_jsl.utils.ner_utils.evaluate_conll_file"]], "get_charts() (in module sparknlp_jsl.utils.ner_utils)": [[193, "sparknlp_jsl.utils.ner_utils.get_charts"]], "loss_plot() (in module sparknlp_jsl.utils.ner_utils)": [[193, "sparknlp_jsl.utils.ner_utils.loss_plot"]], "sparknlp_jsl.utils.ner_utils": [[193, "module-sparknlp_jsl.utils.ner_utils"]], "colors (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[194, "sparknlp_jsl.utils.ocr_nlp_processor.colors"]], "ocr_entity_processor() (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[194, "sparknlp_jsl.utils.ocr_nlp_processor.ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[194, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "colors (in module sparknlp_jsl.utils.ocr_utils)": [[195, "sparknlp_jsl.utils.ocr_utils.colors"]], "colors_rgb (in module sparknlp_jsl.utils.ocr_utils)": [[195, "sparknlp_jsl.utils.ocr_utils.colors_rgb"]], "label2color (in module sparknlp_jsl.utils.ocr_utils)": [[195, "sparknlp_jsl.utils.ocr_utils.label2color"]], "label2rgb (in module sparknlp_jsl.utils.ocr_utils)": [[195, "sparknlp_jsl.utils.ocr_utils.label2rgb"]], "sparknlp_jsl.utils.ocr_utils": [[195, "module-sparknlp_jsl.utils.ocr_utils"]], "aggregate_entities() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[196, "sparknlp_jsl.utils.training_log_parser_utils.aggregate_entities"]], "calc_metrics() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[196, "sparknlp_jsl.utils.training_log_parser_utils.calc_metrics"]], "count_chunks() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[196, "sparknlp_jsl.utils.training_log_parser_utils.count_chunks"]], "get_result() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[196, "sparknlp_jsl.utils.training_log_parser_utils.get_result"]], "is_chunk_end() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[196, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_end"]], "is_chunk_start() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[196, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_start"]], "sparknlp_jsl.utils.training_log_parser_utils": [[196, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "split_tag() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[196, "sparknlp_jsl.utils.training_log_parser_utils.split_tag"]]}})