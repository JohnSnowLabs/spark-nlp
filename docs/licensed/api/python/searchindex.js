Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/alab/index", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index", "reference/autosummary/sparknlp_jsl/annotator/context/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index", "reference/autosummary/sparknlp_jsl/annotator/deid/index", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/index", "reference/autosummary/sparknlp_jsl/annotator/merge/chunker_merge/index", "reference/autosummary/sparknlp_jsl/annotator/merge/index", "reference/autosummary/sparknlp_jsl/annotator/ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/annotator/re/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/annotator/router/index", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index", "reference/autosummary/sparknlp_jsl/base/index", "reference/autosummary/sparknlp_jsl/compatibility/index", "reference/autosummary/sparknlp_jsl/custom_transformer/index", "reference/autosummary/sparknlp_jsl/eval/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/finance/graph/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/index", "reference/autosummary/sparknlp_jsl/finance/seq_generation/index", "reference/autosummary/sparknlp_jsl/finance/seq_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/freeze/index", "reference/autosummary/sparknlp_jsl/functions/index", "reference/autosummary/sparknlp_jsl/index", "reference/autosummary/sparknlp_jsl/internal/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/legal/graph/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/index", "reference/autosummary/sparknlp_jsl/legal/seq_generation/index", "reference/autosummary/sparknlp_jsl/legal/seq_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/modelTracer/index", "reference/autosummary/sparknlp_jsl/pretrained/index", "reference/autosummary/sparknlp_jsl/structured_deidentification/index", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index", "reference/autosummary/sparknlp_jsl/training/index", "reference/autosummary/sparknlp_jsl/updateModels/index", "reference/autosummary/sparknlp_jsl/util/index", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index", "reference/autosummary/sparknlp_jsl/utils/index", "reference/index"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/alab/index.rst", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/chunker_merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/annotator/router/index.rst", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index.rst", "reference/autosummary/sparknlp_jsl/base/index.rst", "reference/autosummary/sparknlp_jsl/compatibility/index.rst", "reference/autosummary/sparknlp_jsl/custom_transformer/index.rst", "reference/autosummary/sparknlp_jsl/eval/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/index.rst", "reference/autosummary/sparknlp_jsl/finance/seq_generation/index.rst", "reference/autosummary/sparknlp_jsl/finance/seq_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/freeze/index.rst", "reference/autosummary/sparknlp_jsl/functions/index.rst", "reference/autosummary/sparknlp_jsl/index.rst", "reference/autosummary/sparknlp_jsl/internal/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/index.rst", "reference/autosummary/sparknlp_jsl/legal/seq_generation/index.rst", "reference/autosummary/sparknlp_jsl/legal/seq_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/modelTracer/index.rst", "reference/autosummary/sparknlp_jsl/pretrained/index.rst", "reference/autosummary/sparknlp_jsl/structured_deidentification/index.rst", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index.rst", "reference/autosummary/sparknlp_jsl/training/index.rst", "reference/autosummary/sparknlp_jsl/updateModels/index.rst", "reference/autosummary/sparknlp_jsl/util/index.rst", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/index.rst", "reference/index.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.alab</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.annotation_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_dl_reg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.assertion_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_sentence_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunker_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_log_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.doccument_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.reIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.replacer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation.ner_disambiguator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.doc2_chunk_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.average_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge.chunker_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.iob_tagger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.medical_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_converter_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.date_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.drug_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_ner_chunk_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.resolver_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.tf_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.compatibility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.custom_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.eval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.seq_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.seq_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.freeze</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.seq_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.seq_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.modelTracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.structured_deidentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.text_to_documents_columns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.updateModels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.alab_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils</span></code>", "API Reference"], "terms": {"4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "healthcar": [0, 1, 10, 33], "i": [0, 19, 20, 21, 22, 23, 24, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 80, 81, 83, 84, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 105, 106, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 134, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 157, 160], "commerci": 0, "extens": [0, 70], "clinic": [0, 43, 44, 48, 51, 56, 57, 58, 61, 70, 71, 76, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 103, 105, 109, 114, 115, 118, 119, 123, 124, 126, 131, 133, 137, 142, 143, 146, 148, 152, 153, 154], "biomed": 0, "text": [0, 41, 42, 43, 44, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 96, 97, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 154], "mine": 0, "If": [0, 10, 22, 23, 24, 33, 41, 43, 46, 48, 49, 50, 52, 56, 58, 59, 61, 71, 73, 76, 80, 82, 84, 98, 100, 103, 105, 120, 124, 131, 133, 149, 153, 157, 160], "you": [0, 10, 33, 42, 43, 49, 51, 59, 61, 84, 88, 97, 100, 103, 105, 131, 133, 157], "don": [0, 50], "t": [0, 23, 24, 50, 59, 61, 159], "have": [0, 23, 24, 41, 43, 49, 50, 51, 71, 76, 80, 88, 96, 99, 103, 109, 118, 120, 124, 131, 137, 146, 149, 153], "subscript": 0, "yet": [0, 24], "can": [0, 23, 41, 43, 44, 46, 48, 50, 56, 57, 58, 59, 61, 67, 71, 76, 80, 85, 93, 99, 103, 105, 115, 119, 120, 123, 124, 131, 133, 143, 148, 149, 152, 153], "ask": 0, "free": [0, 24], "trial": 0, "click": 0, "button": 0, "below": 0, "try": [0, 54, 73, 84, 96, 100, 111, 139], "http": [0, 20, 22, 23, 24, 41, 67], "www": [0, 161], "johnsnowlab": [0, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 64, 65, 67, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 88, 90, 91, 92, 93, 95, 96, 97, 103, 105, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154], "com": [0, 24, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 64, 65, 67, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 88, 90, 91, 92, 93, 95, 96, 97, 103, 105, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 161], "provid": [0, 22, 23, 24, 41, 43, 49, 57, 59, 61, 80, 81, 105, 120, 123, 124, 133, 149, 152, 153, 157], "specif": [0, 10, 33, 71, 80, 85, 98, 124, 153], "annot": [0, 10, 33, 41, 99, 103, 105, 106, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 129, 131, 133, 134, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 156, 159, 162], "pipelin": [0, 10, 33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 96, 97, 99, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 154, 155], "model": [0, 1, 5, 8, 10, 23, 24, 28, 31, 33, 41, 43, 44, 47, 48, 50, 51, 54, 56, 57, 58, 59, 61, 64, 65, 67, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 88, 90, 91, 92, 93, 96, 98, 100, 103, 105, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 155, 160], "embed": [0, 10, 18, 33, 43, 44, 46, 48, 50, 51, 56, 57, 58, 61, 67, 75, 79, 80, 81, 82, 84, 88, 90, 91, 92, 93, 96, 97, 99, 102, 103, 105, 111, 114, 118, 119, 120, 123, 124, 129, 131, 133, 139, 142, 146, 148, 149, 152, 153], "entiti": [0, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 57, 59, 61, 67, 71, 76, 80, 81, 82, 83, 88, 90, 91, 92, 93, 95, 96, 97, 103, 105, 109, 111, 114, 115, 118, 123, 124, 126, 130, 131, 133, 137, 139, 142, 143, 146, 152, 153, 154, 157, 162], "recognit": [0, 24, 57, 80, 83, 123, 124, 126, 152, 153, 154], "link": [0, 67], "normal": [0, 13, 24, 36, 54, 59, 75, 96, 98, 111, 120, 129, 139, 149], "assert": [0, 10, 33, 41, 46, 50, 75, 108, 116, 129, 136, 144, 159, 162], "statu": [0, 43, 44, 103, 131], "detect": 0, "de": [0, 61], "identif": [0, 157], "relat": [0, 10, 33, 41, 51, 71, 82, 88, 90, 91, 92, 93, 98, 109, 114, 115, 118, 137, 142, 143, 146, 162], "extract": [0, 41, 43, 44, 46, 48, 59, 67, 70, 80, 81, 90, 91, 92, 93, 96, 103, 111, 114, 115, 124, 131, 139, 142, 143, 153, 155], "spell": [0, 102], "check": [0, 98, 100, 160], "correct": 0, "The": [0, 10, 20, 21, 22, 23, 24, 33, 42, 43, 46, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 67, 70, 71, 76, 80, 82, 83, 84, 88, 90, 93, 96, 97, 99, 103, 105, 109, 111, 115, 118, 119, 120, 123, 124, 126, 131, 133, 137, 139, 143, 146, 148, 149, 152, 153, 154, 155, 157], "librari": [0, 1, 56, 57, 58, 62, 68, 100, 106, 119, 123, 134, 148, 152], "offer": 0, "access": 0, "sever": [0, 23, 43, 46, 61, 103, 105, 131, 133], "transform": [0, 41, 43, 44, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 76, 80, 81, 83, 84, 85, 88, 90, 91, 92, 93, 96, 99, 101, 103, 105, 106, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 143, 146, 148, 149, 152, 153, 154], "jsl": [0, 41, 51, 88, 118, 146, 162], "bert": [0, 48, 56, 57, 58, 70, 80, 91, 93, 97, 114, 115, 119, 123, 124, 142, 143, 148, 152, 153], "biobert": 0, "clinicalbert": 0, "glove": [0, 44], "med": 0, "icd": [0, 96, 111, 139], "o": [0, 24, 52, 57, 79, 82, 123, 152, 157], "It": [0, 22, 24, 59, 61, 73, 80, 99, 100, 105, 120, 133, 149, 160], "also": [0, 24, 56, 57, 58, 67, 119, 123, 148, 152], "includ": [0, 21, 41, 43, 80, 82, 92, 103, 124, 131, 153, 162], "over": [0, 19, 61], "50": [0, 10, 24, 33, 51, 59, 73, 80, 88, 109, 118, 124, 137, 146, 153], "pre": [0, 41, 62, 68, 106, 134], "train": [0, 2, 9, 10, 15, 22, 23, 24, 25, 32, 33, 38, 41, 43, 44, 46, 50, 51, 54, 56, 57, 58, 59, 61, 62, 68, 70, 71, 73, 76, 79, 80, 81, 82, 84, 88, 90, 91, 93, 96, 99, 103, 105, 106, 111, 114, 115, 118, 120, 124, 129, 131, 133, 134, 139, 142, 143, 146, 149, 153], "recogn": [0, 80, 82, 124, 153], "follow": [0, 19, 20, 59, 61, 80, 85, 105, 133, 161], "mani": [0, 18, 49, 67], "more": [0, 18, 19, 22, 23, 56, 57, 58, 61, 62, 68, 85, 105, 106, 119, 123, 133, 134, 148, 152], "support": [0, 80, 120, 149], "sign": 0, "symptom": [0, 71], "treatment": [0, 93, 115, 143, 159], "procedur": 0, "test": [0, 43, 47, 49, 80, 93, 97, 103, 120, 124, 131, 149, 153, 159], "lab": [0, 41, 159, 162], "section": [0, 90], "drug": [0, 71, 93, 115, 143], "name": [0, 6, 10, 20, 22, 24, 29, 33, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 64, 67, 68, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 105, 109, 111, 114, 115, 119, 120, 123, 124, 126, 131, 133, 137, 139, 142, 143, 148, 149, 152, 153, 154, 156, 157], "dosag": [0, 71], "strength": [0, 71], "rout": 0, "durat": 0, "frequenc": [0, 24], "risk": 0, "factor": [0, 24], "smoke": 0, "obes": 0, "diabet": [0, 48, 70], "hypertens": 0, "substanc": 0, "abus": 0, "anatomi": 0, "organ": [0, 57, 123, 152, 157], "subdivis": 0, "cell": [0, 18, 19, 20, 22, 23, 24, 57, 80, 123, 124, 152, 153, 157], "structur": [0, 93, 115, 143, 157], "tissu": 0, "gene": 0, "chemic": 0, "demograph": 0, "ag": [0, 61, 76, 79, 105, 128, 133, 157], "gender": [0, 76, 79], "height": [0, 15, 38], "weight": [0, 22, 24, 41, 70, 71, 98, 130], "race": 0, "ethnic": 0, "marit": 0, "vital": 0, "sensit": [0, 59, 70, 90, 92], "data": [0, 22, 23, 24, 43, 46, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 82, 83, 84, 85, 88, 90, 91, 92, 93, 96, 98, 99, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 154, 157], "patient": [0, 43, 50, 51, 59, 88, 103, 118, 131, 146, 157], "address": [0, 48, 51, 56, 57, 58, 70, 71, 81, 83, 93, 109, 115, 119, 120, 123, 126, 137, 143, 148, 149, 152, 154], "phone": [0, 157], "email": [0, 157], "date": [0, 42, 49, 61, 84, 97, 105, 133, 157, 160], "identifi": [0, 47, 49, 76, 97, 157], "For": [0, 19, 24, 46, 56, 57, 61, 62, 68, 70, 79, 80, 83, 91, 93, 105, 106, 114, 115, 119, 120, 123, 124, 126, 133, 134, 142, 143, 148, 149, 152, 153, 154], "inform": [0, 1, 23, 24, 59, 61, 76, 105, 133], "visit": 0, "our": [0, 100], "site": [0, 59], "built": [0, 24, 120, 149], "top": [0, 48, 56, 57, 58, 119, 123, 148, 152], "apach": 0, "x": [0, 13, 20, 21, 24, 36, 84], "us": [0, 1, 18, 19, 20, 22, 23, 24, 41, 43, 44, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 80, 81, 82, 83, 84, 88, 90, 91, 92, 93, 96, 97, 98, 99, 103, 105, 106, 109, 111, 115, 118, 119, 120, 123, 124, 126, 131, 133, 134, 137, 139, 143, 146, 148, 149, 152, 153, 154, 157], "need": [0, 18, 23, 24, 44, 59, 61, 70, 81, 90, 105, 133], "java": [0, 64, 65, 69, 99, 102, 159], "8": [0, 24, 56, 57, 58, 71, 80, 119, 123, 124, 148, 152, 153], "ar": [0, 19, 20, 21, 23, 24, 41, 46, 48, 49, 52, 54, 56, 57, 58, 61, 67, 70, 71, 73, 76, 80, 82, 83, 90, 92, 93, 96, 97, 98, 100, 105, 111, 115, 119, 123, 124, 126, 133, 139, 143, 148, 152, 153, 154, 157, 160, 162], "pyspark": [0, 41, 43, 44, 46, 50, 51, 54, 56, 57, 58, 59, 61, 62, 68, 70, 71, 73, 76, 79, 80, 81, 82, 84, 88, 90, 91, 93, 96, 100, 103, 105, 106, 111, 114, 115, 118, 119, 120, 123, 124, 131, 133, 134, 139, 142, 143, 146, 148, 149, 152, 153, 155, 157, 158], "6": [0, 10, 24, 33, 92, 120, 149], "7": [0, 2, 25, 84], "recommend": [0, 67], "basic": [0, 22, 24], "knowledg": [0, 67], "framework": 0, "work": [0, 80], "environ": 0, "befor": [0, 24, 44, 48, 64, 65, 69, 80], "pleas": [0, 56, 57, 80, 91, 114, 119, 120, 123, 124, 142, 148, 149, 152, 153], "refer": [0, 1, 48, 61, 62, 68, 90, 105, 106, 133, 134], "document": [0, 10, 33, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 96, 97, 103, 105, 106, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 143, 146, 148, 149, 152, 153, 154, 162], "first": [0, 23, 24, 47, 49, 59, 70, 80, 124, 153], "let": [0, 48], "": [0, 24, 41, 43, 44, 46, 50, 61, 64, 65, 67, 69, 70, 80, 96, 99], "make": [0, 48, 59, 61, 105, 133], "sure": [0, 61, 105, 133], "version": [0, 10, 98, 100, 101, 129, 156, 160], "oracl": 0, "openjdk": 0, "0_292": 0, "packag": 0, "pip": 0, "extra": [0, 46], "index": [0, 43, 103, 131, 162], "url": [0, 41, 157], "pypi": 0, "secret": [0, 41, 129], "code": [0, 21, 24, 41, 59, 96, 111, 139, 157, 159], "upgrad": 0, "part": [0, 24, 62, 68, 106, 134], "split": [0, 18, 24, 49, 73, 162], "e": [0, 24, 43, 44, 48, 56, 57, 58, 59, 61, 71, 80, 85, 90, 96, 103, 111, 119, 123, 124, 131, 139, 148, 152, 153, 160], "onli": [0, 20, 21, 24, 41, 48, 51, 80], "avail": [0, 10, 21, 33, 56, 57, 80, 99, 119, 120, 123, 124, 148, 149, 152, 153], "user": [0, 59, 82], "valid": [0, 43, 73, 80, 92, 103, 120, 124, 131, 149, 153], "licens": 0, "did": 0, "receiv": [0, 24], "contact": [0, 157], "u": [0, 20, 24, 80, 124, 153, 160], "href": 0, "mailto": 0, "info": 0, "thi": [0, 1, 9, 10, 18, 19, 20, 21, 22, 23, 24, 32, 33, 43, 44, 47, 48, 49, 50, 54, 56, 57, 58, 59, 61, 64, 65, 69, 70, 80, 90, 91, 92, 103, 105, 120, 124, 131, 133, 149, 153, 155, 157, 159, 160, 164], "simpl": [0, 24], "piec": [0, 49], "import": [0, 10, 33, 41, 43, 44, 46, 50, 51, 54, 56, 57, 58, 59, 61, 62, 68, 70, 71, 73, 76, 79, 80, 81, 82, 84, 88, 90, 91, 96, 99, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 159], "sparknlp_jsl": 0, "Or": 0, "sparksess": [0, 41, 56, 57, 58, 93, 100, 115, 119, 123, 143, 148, 152, 157, 158, 162], "modul": [0, 1, 21], "flexibl": [0, 19], "sql": [0, 41, 56, 57, 58, 93, 100, 115, 119, 123, 143, 148, 152, 155, 157, 158], "builder": [0, 98], "appnam": 0, "enterpris": 0, "master": 0, "local": [0, 56, 57, 58, 93, 115, 119, 123, 143, 148, 152], "config": [0, 59], "driver": 0, "memori": [0, 22, 23, 24, 56, 57, 58, 119, 123, 148, 152], "16": 0, "maxresults": 0, "2g": 0, "jar": [0, 41, 162], "nlp_2": 0, "11": [0, 9, 32, 44, 50, 61, 84, 105, 133], "version_publ": 0, "getorcr": 0, "main": [1, 44], "page": [1, 85, 164], "workshop": [1, 24, 62, 68, 80, 106, 120, 124, 134, 149, 153], "hub": [1, 56, 57, 80, 119, 120, 123, 124, 148, 149, 152, 153], "welcom": 1, "python": [1, 19, 20, 21, 24], "contain": [1, 22, 23, 24, 41, 43, 44, 51, 56, 57, 58, 61, 62, 68, 80, 88, 90, 96, 98, 103, 105, 106, 109, 111, 118, 119, 123, 124, 131, 133, 134, 137, 139, 146, 148, 152, 153, 157], "how": [1, 46, 48, 56, 57, 58, 67, 73, 76, 80, 82, 119, 120, 123, 148, 149, 152], "exampl": [1, 10, 19, 24, 33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 96, 97, 99, 103, 105, 106, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 143, 146, 148, 149, 152, 153, 154, 157, 159, 161], "get": [1, 41, 43, 83, 98, 103, 120, 131, 149, 162], "start": [1, 10, 18, 22, 33, 43, 44, 62, 68, 76, 80, 90, 96, 103, 106, 111, 124, 129, 131, 134, 139, 153, 162], "requir": [1, 22, 23, 24, 41, 43, 44, 54, 56, 57, 58, 62, 68, 80, 103, 106, 119, 123, 124, 131, 134, 148, 152, 153], "instal": [1, 41], "session": [1, 15, 16, 38, 39, 41, 162], "from": [1, 9, 10, 18, 20, 22, 23, 24, 32, 33, 41, 42, 43, 44, 46, 47, 48, 50, 51, 54, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 96, 97, 99, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 154, 155, 159, 160, 161, 162], "api": 1, "assertionmodel": [2, 25, 43, 44, 46, 96, 103, 111, 131, 139], "seq_max_len": [2, 25], "feat_siz": [2, 10, 25, 33], "n_class": [2, 10, 25, 33], "devic": [2, 25, 157], "cpu": [2, 23, 25], "sourc": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 75, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 127, 128, 129, 130, 131, 133, 134, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], "fully_connected_lay": [2, 25], "input_data": [2, 25], "output_dim": [2, 10, 24, 25, 33], "activation_func": [2, 25], "none": [2, 4, 6, 8, 12, 13, 15, 16, 18, 20, 22, 23, 24, 25, 27, 29, 31, 35, 36, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 64, 65, 67, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 88, 90, 91, 92, 93, 95, 96, 97, 103, 105, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 127, 129, 131, 133, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 156, 157, 159, 161, 162], "add_bidirectional_lstm": [2, 25], "n_hidden": [2, 25], "30": [2, 25, 84, 120, 149], "num_lay": [2, 25], "add_optim": [2, 25], "trainset": [2, 25], "testset": [2, 25], "epoch": [2, 25, 43, 73, 80, 103, 120, 124, 131, 149, 153], "batch_siz": [2, 4, 15, 17, 18, 22, 23, 24, 25, 27, 38, 40], "64": [2, 10, 25, 33, 50, 76, 79, 80, 120, 149], "learning_r": [2, 4, 9, 25, 27, 32], "01": [2, 15, 25, 38, 44, 61, 84, 105, 133], "dropout": [2, 15, 24, 25, 38, 43, 73, 80, 103, 120, 124, 131, 149, 153], "15": [2, 25, 76, 79, 84], "epoch_acc": [2, 25], "calc_accuraci": [2, 25], "dataset": [2, 15, 17, 25, 38, 40, 43, 44, 80, 81, 93, 96, 101, 103, 111, 115, 120, 124, 131, 139, 143, 149, 153], "calcul": [2, 23, 24, 25, 43, 80, 96, 103, 124, 131, 153], "accuraci": [2, 8, 25, 31, 80, 124, 153], "confusion_matrix": [2, 25], "sess": [2, 25], "persist_graph": [2, 25], "model_loc": [2, 4, 6, 10, 12, 27, 29, 33, 35], "model_filenam": [2, 4, 6, 10, 12, 27, 29, 33, 35], "assertion_model": [3, 11, 26, 34], "model_id": [4, 27], "get_graph": [4, 27], "is_built": [4, 27], "export_graph": [4, 6, 27, 29], "generate_batch": [4, 27], "input": [4, 9, 18, 19, 20, 22, 23, 24, 27, 32, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 103, 105, 106, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 134, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154], "output": [4, 9, 13, 18, 22, 23, 24, 27, 32, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 95, 96, 97, 99, 103, 105, 106, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 134, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 155, 162], "fit_dataset": [4, 27], "training_set": [4, 27], "validation_set": [4, 27], "training_batch_s": [4, 27], "validation_batch_s": [4, 27], "epochs_n": [4, 8, 27, 31], "verbos": [4, 6, 27, 29, 43, 80, 103, 120, 124, 131, 149, 153], "true": [4, 6, 10, 15, 19, 23, 24, 27, 29, 33, 38, 41, 48, 49, 54, 56, 57, 58, 59, 61, 62, 67, 68, 73, 80, 84, 90, 96, 98, 99, 102, 105, 106, 111, 119, 120, 123, 133, 134, 139, 148, 149, 152, 157, 159, 162], "progresstrack": [4, 7, 11, 27, 30, 34], "load_graph": [4, 27], "models_dir": [4, 9, 27, 32], "build": [4, 6, 10, 20, 22, 24, 27, 29, 33], "param": [4, 6, 10, 27, 29, 33, 41, 61, 64, 65, 69, 105, 129, 133, 162], "run_test": [4, 6, 27, 29], "build_param": [5, 10, 28, 33], "genericclassifiermodel": [6, 29, 54, 73], "basetfmodel": [7, 11, 30, 34], "build_model": [7, 11, 30, 34], "generic_classifier_model": [7, 11, 30, 34], "set": [7, 11, 24, 30, 34, 41, 42, 43, 46, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 105, 115, 124, 131, 133, 143, 153, 159, 162], "batches_n": [8, 31], "on_training_start": [8, 31], "on_training_end": [8, 31], "on_batch": [8, 31], "loss": [8, 9, 24, 31, 32], "is_valid": [8, 31], "fals": [8, 12, 13, 15, 19, 22, 23, 24, 31, 35, 36, 38, 41, 43, 44, 46, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 76, 79, 80, 81, 83, 84, 85, 88, 90, 91, 92, 93, 96, 97, 103, 105, 106, 111, 114, 115, 118, 119, 120, 123, 124, 126, 128, 129, 131, 133, 134, 139, 142, 143, 146, 148, 149, 152, 153, 154, 157, 159, 162], "on_epoch": [8, 31], "get_report_interv": [8, 31], "print_progress": [8, 31], "end_of_epoch": [8, 31], "model_op": [9, 32], "gener": [9, 10, 32, 33, 41, 48, 73, 80, 120, 124, 149, 153, 157, 159, 162], "enumer": [9, 32, 162], "deriv": [9, 32], "defin": [9, 22, 32, 41, 44, 46, 50, 54, 59, 76, 82, 92], "new": [9, 24, 32, 41, 43, 80, 82, 83, 90, 91, 96, 98, 101, 111, 114, 126, 139, 142, 154, 155, 160], "init": [9, 32], "10": [9, 10, 15, 19, 32, 33, 38, 51, 85, 88, 96, 111, 118, 139, 146, 159], "model_tensor": [9, 32], "100": [9, 10, 15, 32, 33, 38, 73, 120, 149], "acc": [9, 32], "101": [9, 15, 32, 38], "102": [9, 32], "target": [9, 10, 32, 33, 43, 44, 62, 67, 68, 71, 73, 90, 91, 103, 106, 114, 131, 134, 142], "103": [9, 32], "104": [9, 32], "105": [9, 32], "run_typ": [9, 32], "evalu": [9, 32, 43], "predict": [9, 10, 15, 24, 32, 33, 38, 43, 54, 67, 73, 80, 103, 124, 131, 153], "datasets_dir": [9, 32], "logs_dir": [9, 32], "tmp": [9, 10, 32, 33, 93], "genericclassifi": [9, 32], "default_model_node_nam": [9, 32], "except": [10, 33, 80], "wrongtfvers": [10, 33], "common": [10, 33, 43, 46, 50, 51, 54, 59, 61, 62, 68, 70, 71, 73, 76, 79, 80, 82, 84, 88, 90, 91, 96, 99, 103, 105, 106, 111, 114, 118, 124, 131, 133, 134, 139, 142, 146, 153], "base": [10, 20, 22, 24, 33, 43, 44, 46, 48, 50, 51, 54, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 88, 90, 91, 93, 96, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 126, 129, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 154], "all": [10, 21, 24, 33, 41, 48, 49, 54, 56, 58, 61, 71, 80, 85, 96, 100, 105, 111, 124, 133, 139, 153, 160, 162, 164], "non": [10, 24, 33, 43, 71, 85], "exit": [10, 33], "tensorflowaddonsneed": 10, "tfgraphbuild": [10, 33, 98], "creat": [10, 22, 23, 33, 41, 43, 59, 92], "tensorflow": [10, 21, 23, 33, 43, 56, 57, 58, 73, 80, 90, 103, 119, 120, 123, 124, 131, 148, 149, 152, 153], "graph": [10, 33, 43, 80, 90, 98, 103, 116, 124, 129, 131, 144, 153], "ner_dl": [10, 11, 33, 34, 80, 124, 153], "generic_classifi": [10, 11, 33, 34, 75, 129], "assertion_dl": [10, 11, 33, 34, 43, 103, 131], "relation_extract": [10, 33, 75, 89, 112, 116, 140, 144], "spark": [10, 33, 41, 42, 43, 47, 48, 50, 51, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 76, 79, 80, 82, 83, 84, 85, 90, 91, 92, 93, 97, 99, 100, 102, 103, 105, 106, 109, 114, 115, 119, 120, 123, 124, 126, 129, 131, 133, 134, 137, 142, 143, 148, 149, 152, 153, 154, 157, 158, 159, 162, 164], "nlp": [10, 33, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 88, 90, 91, 92, 93, 95, 96, 97, 106, 109, 115, 119, 120, 123, 124, 126, 134, 137, 143, 148, 149, 152, 153, 154, 162, 164], "In": [10, 19, 24, 48, 59, 91, 114, 120, 142, 149], "tf_graph": [10, 33, 159], "get_model": [10, 33], "supports_auto_file_nam": [10, 33], "get_model_filenam": [10, 33], "check_build_param": [10, 33], "get_build_param": [10, 33], "get_build_params_with_default": [10, 33], "get_model_build_param": [10, 33], "get_model_build_param_explan": [10, 33], "genericclassifiertfgraphbuild": [10, 33], "tf": [10, 19, 21, 22, 23, 33, 56, 57, 58, 119, 123, 148, 152], "genericclassifierapproach": [10, 33, 73], "sparknlp": [10, 33, 43, 44, 46, 48, 50, 51, 54, 56, 57, 58, 59, 61, 62, 68, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 88, 90, 91, 93, 96, 99, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 154], "datafram": [10, 33, 41, 92, 155, 157, 158, 162], "pd": [10, 33, 41, 162], "read_csv": [10, 33], "petfind": [10, 33], "mini": [10, 33], "csv": [10, 33, 50, 59, 61, 99, 105, 120, 133, 149], "dl_param": [10, 33], "input_dim": [10, 33], "302": [10, 33], "hidden_lay": [10, 33], "300": [10, 33, 90], "200": [10, 24, 33, 90], "hidden_act": [10, 33], "tanh": [10, 20, 24, 33, 98], "hidden_act_l2": [10, 33], "batch_norm": [10, 33], "gc_graph": [10, 33], "auto": [10, 33, 98], "gen_clf": [10, 33, 54, 73], "setlabelcolumn": [10, 33, 54, 73, 80, 90, 98, 120, 124, 149, 153], "setinputcol": [10, 33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 154], "featur": [10, 24, 33, 44, 73, 99], "setoutputcol": [10, 33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 96, 97, 99, 101, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 154], "setmodelfil": [10, 33, 73, 90], "gcl": [10, 33], "pb": [10, 33, 73, 90], "setepochsnumb": [10, 33, 73, 90], "setbatchs": [10, 33, 43, 73, 80, 90, 91, 103, 120, 131, 149], "setfeaturesc": [10, 33, 73], "zscore": [10, 33, 73], "setfiximbal": [10, 33, 73, 90], "setlearningr": [10, 33, 43, 73, 90, 103, 131], "001": [10, 24, 33, 73, 80, 90, 124, 153], "setoutputlogspath": [10, 33, 43, 73], "log": [10, 33, 43, 44, 73, 80, 103, 120, 124, 131, 149, 153], "setvalidationsplit": [10, 33, 43, 73, 80, 90], "clf_pipelin": [10, 33], "stage": [10, 33, 41, 43, 44, 46, 47, 50, 59, 61, 67, 76, 79, 81, 82, 85, 90, 91, 92, 96, 103, 105, 111, 114, 131, 133, 139, 142], "features_asm": [10, 33, 73], "assertiontfgraphbuild": [10, 33], "assertiondlapproach": [10, 33, 43, 98, 103, 131], "blstm_34_32_30_": [10, 33], "_": [10, 33], "format": [10, 23, 33, 41, 59, 61, 76, 79, 80, 82, 84, 90, 105, 124, 133, 153, 157], "setlabelcol": [10, 33, 43, 44, 73, 96, 103, 111, 131, 139], "label": [10, 33, 41, 43, 44, 52, 54, 56, 57, 58, 61, 73, 76, 79, 80, 82, 83, 90, 91, 93, 95, 96, 98, 102, 103, 105, 111, 115, 119, 120, 123, 124, 126, 130, 131, 133, 139, 143, 148, 149, 152, 153, 154, 162], "chunk": [10, 33, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 59, 61, 62, 67, 68, 70, 71, 76, 79, 81, 82, 84, 88, 90, 91, 92, 93, 96, 97, 103, 105, 106, 109, 114, 115, 118, 131, 133, 134, 137, 142, 143, 146], "128": [10, 12, 24, 33, 35, 43, 56, 57, 58, 103, 119, 123, 131, 148, 152], "setdropout": [10, 33, 43, 73, 80, 103, 120, 131, 149], "setepoch": [10, 33, 43, 103, 131], "setstartcol": [10, 33, 43, 44, 68, 103, 131], "setendcol": [10, 33, 43, 44, 103, 131], "end": [10, 23, 33, 43, 44, 76, 79, 80, 84, 90, 103, 131, 162], "setmaxsentlen": [10, 33, 43, 103, 131], "250": [10, 33, 43, 71, 103, 131], "setenableoutputlog": [10, 33, 43], "training_log": [10, 33], "setgraphfold": [10, 33, 43, 80, 98], "nertfgraphbuild": [10, 33], "medicalnerapproach": [10, 33, 80, 98, 124, 153], "embeddings_dim": [10, 12, 33, 35], "nchar": [10, 12, 15, 33, 35, 38], "83": [10, 33], "ntag": [10, 12, 15, 33, 35, 38], "12": [10, 33], "is_med": [10, 12, 33, 35], "medical_ner_graph": [10, 33], "nertagg": [10, 33, 70, 80, 90, 91, 114, 124, 142, 153], "sentenc": [10, 13, 15, 33, 36, 38, 43, 44, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 61, 67, 70, 71, 76, 79, 80, 81, 82, 83, 85, 88, 91, 92, 93, 95, 96, 97, 103, 105, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 159, 162], "token": [10, 33, 41, 42, 43, 44, 46, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 76, 79, 80, 81, 82, 83, 88, 90, 91, 92, 93, 96, 97, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 154, 159, 162], "ner": [10, 16, 33, 39, 41, 43, 44, 48, 51, 57, 61, 67, 70, 71, 75, 76, 88, 93, 102, 103, 105, 115, 116, 118, 122, 129, 131, 133, 143, 144, 146, 150, 162], "setmaxepoch": [10, 33, 80, 120, 124, 149, 153], "setrandomse": [10, 33, 80, 124, 153], "setverbos": [10, 33, 43, 80, 124, 153], "setevaluationlogextend": [10, 33, 43], "setincludeconfid": [10, 33, 43, 80], "ner_log": [10, 33], "setenablememoryoptim": [10, 33, 80], "relationextractiontfgraphbuild": [10, 33], "relationextractionapproach": [10, 33, 90, 98], "6000": [10, 33], "relu": [10, 24, 33, 98], "re_with_bn": [10, 33], "re_approach": [10, 33], "rel": [10, 33, 51, 70, 71, 84, 88, 109, 118, 137, 146], "pos_tag": [10, 33, 71, 90, 92, 93], "train_ner_chunk": [10, 33, 90], "depend": [10, 23, 24, 33, 42, 49, 52, 71, 80, 90, 91, 92, 93, 95, 97, 114, 124, 142, 153], "70": [10, 33, 50], "setfroment": [10, 33, 90], "begin1i": [10, 33], "end1i": [10, 33], "label1": [10, 33], "settoent": [10, 33, 90], "begin2i": [10, 33], "end2i": [10, 33], "label2": [10, 33], "tfgraphbuilderfactori": [10, 33], "factori": [10, 33], "differ": [10, 20, 24, 33, 41, 48, 76, 92, 99], "static": [10, 13, 15, 16, 24, 33, 36, 38, 39, 43, 44, 48, 51, 54, 56, 57, 58, 61, 67, 70, 71, 73, 76, 80, 83, 90, 91, 93, 96, 103, 105, 109, 111, 114, 115, 119, 120, 123, 124, 126, 131, 133, 137, 139, 142, 143, 148, 149, 152, 153, 154, 156, 160], "method": [10, 22, 33, 61, 73, 96, 100, 105, 111, 133, 139, 160, 164], "return": [10, 22, 23, 24, 33, 41, 43, 46, 48, 51, 52, 56, 57, 58, 61, 62, 68, 70, 71, 80, 83, 90, 91, 93, 95, 96, 100, 105, 106, 109, 111, 115, 119, 120, 123, 126, 133, 134, 137, 139, 143, 148, 149, 152, 154, 162], "model_nam": [10, 33, 127], "paramet": [10, 23, 33, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 96, 97, 99, 100, 103, 105, 106, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 134, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 155, 157, 160, 161], "str": [10, 33, 41, 43, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 82, 83, 85, 90, 91, 92, 93, 96, 97, 98, 99, 100, 109, 115, 119, 120, 123, 126, 137, 143, 148, 149, 152, 154, 157, 158, 159, 160, 161, 162], "want": [10, 33, 42, 43, 49, 51, 59, 61, 67, 85, 88, 97, 103, 105, 131, 133, 157], "dict": [10, 33, 41, 59, 61, 71, 76, 82, 83, 90, 91, 93, 157, 162], "configur": [10, 33, 41], "path": [10, 33, 41, 43, 44, 47, 50, 51, 54, 59, 61, 70, 73, 76, 80, 82, 83, 88, 90, 96, 98, 103, 105, 109, 111, 118, 120, 124, 126, 127, 131, 133, 137, 139, 146, 149, 153, 154, 159, 160, 161, 162], "where": [10, 23, 24, 33, 41, 46, 51, 61, 62, 68, 73, 79, 88, 90, 91, 98, 105, 106, 109, 114, 118, 133, 134, 137, 142, 146, 160], "save": [10, 16, 33, 39, 41, 43, 51, 56, 57, 58, 61, 73, 80, 88, 93, 103, 115, 119, 120, 123, 124, 131, 143, 148, 149, 152, 153, 161], "rb": [10, 33], "file": [10, 21, 33, 41, 43, 59, 61, 73, 76, 80, 98, 103, 105, 124, 131, 133, 153, 157, 160], "put": [10, 19, 33, 49, 67, 120, 149], "filenam": [10, 25, 33], "print_model_param": [10, 33], "allow": [10, 23, 24, 33, 41, 49, 56, 57, 58, 80, 97, 119, 123, 124, 148, 152, 153, 157, 160], "descript": [10, 33, 41, 48, 96, 111, 139, 159], "everi": [10, 19, 33, 41, 80, 124, 153], "create_graph": [11, 14, 34, 37], "dataset_encod": [11, 14, 34, 37], "ner_model": [11, 14, 34, 37, 51, 67, 71, 88, 118, 146], "ner_model_sav": [11, 14, 34, 37], "sentence_group": [11, 14, 34, 37], "tf2contrib": 11, "core_rnn_cel": [11, 21], "fused_rnn_cel": [11, 21], "gru_op": [11, 21], "lstm_op": [11, 21], "rnn": [11, 18, 19, 21, 22, 24], "rnn_cell": [11, 19, 21], "graph_build": [11, 34], "lstm_size": [12, 35], "gpu_devic": [12, 35], "datasetencod": [13, 36], "embeddings_resolv": [13, 36], "tag2id": [13, 36], "piece_tag": [13, 36], "shuffl": [13, 36, 120, 149], "word": [13, 36, 51, 61, 67, 79, 82, 83, 105, 120, 126, 133, 149, 154], "get_char_index": [13, 36], "encod": [13, 16, 36, 39, 83, 90, 91, 92, 93, 98, 114, 115, 120, 126, 142, 143, 149, 154], "nermodel": [15, 38, 43, 46, 79, 80, 82, 103, 124, 131, 153], "dummy_tag": [15, 38], "use_contrib": [15, 38], "use_gpu_devic": [15, 38], "add_bilstm_char_repr": [15, 38], "dim": [15, 24, 38], "25": [15, 38, 61, 96, 105, 111, 133, 139, 159], "hidden": [15, 24, 38, 57, 98, 123, 152], "add_cnn_char_repr": [15, 38], "nfilter": [15, 38], "pad": [15, 38], "add_pretrained_word_embed": [15, 38], "add_context_repr": [15, 38], "hidden_s": [15, 38], "residu": [15, 38], "add_inference_lay": [15, 38], "crf": [15, 38, 80, 124, 153], "predictions_op_nam": [15, 38], "add_training_op": [15, 38], "clip_gradi": [15, 38], "train_op_nam": [15, 38], "num_tru": [15, 38], "arrai": [15, 38, 43, 54, 56, 57, 58, 61, 62, 68, 80, 81, 99, 103, 105, 106, 119, 120, 123, 124, 131, 133, 134, 148, 149, 152, 153], "fill": [15, 38], "l": [15, 38, 61], "val": [15, 38], "get_sentence_length": [15, 38], "batch": [15, 18, 23, 24, 38, 41, 43, 56, 57, 58, 73, 80, 98, 103, 119, 120, 123, 124, 131, 148, 149, 152, 153], "idx": [15, 38], "word_embed": [15, 38, 42, 43, 44, 49, 67, 80, 90, 97, 103, 124, 131, 153], "get_sentence_token_length": [15, 38], "tag_id": [15, 38], "get_word_length": [15, 38], "char_id": [15, 38], "get_char_id": [15, 38], "get_from_batch": [15, 38], "get_tag_id": [15, 38], "get_word_embed": [15, 38], "slice": [15, 17, 38, 40, 51, 70, 71], "init_vari": [15, 38], "epoch_start": [15, 38], "epoch_end": [15, 38], "32": [15, 17, 23, 24, 38, 40, 59, 97], "lr": [15, 38, 80, 120, 124, 149, 153], "po": [15, 38, 42, 49, 50, 80, 90, 97, 102, 124, 153, 159, 162], "65": [15, 38], "measur": [15, 38], "20": [15, 24, 38, 73, 120, 149], "get_softmax": [15, 38], "score": [15, 38, 43, 80, 83, 93, 103, 115, 124, 126, 131, 143, 153, 154], "threshold": [15, 38, 50, 61, 67, 82, 83, 90, 91, 96, 105, 133], "close": [15, 38], "nermodelsav": [16, 39], "embeddings_fil": [16, 39], "restore_tensorflow_st": [16, 39], "export_dir": [16, 39], "save_model": [16, 39], "folder": [16, 39, 43, 56, 57, 58, 73, 80, 91, 93, 98, 103, 114, 115, 119, 120, 123, 124, 131, 142, 143, 148, 149, 152, 153, 160], "sentencegroup": [17, 40], "bucket_length": [17, 40], "get_bucket_id": [17, 40], "length": [17, 22, 23, 40, 41, 43, 44, 56, 57, 58, 61, 67, 76, 98, 103, 105, 119, 123, 131, 133, 148, 152], "implement": [18, 19, 20, 22, 24, 64, 65, 69, 93, 99, 115, 143], "core": 18, "embeddingwrapp": 18, "inputprojectionwrapp": 18, "outputprojectionwrapp": 18, "rnncell": [18, 19, 23, 24], "embedding_class": 18, "embedding_s": 18, "initi": [18, 20, 22, 23, 24, 67, 80], "reus": [18, 20, 22, 24], "oper": [18, 19, 23, 24, 48], "ad": 18, "given": [18, 22, 24, 51, 70, 71, 88, 93, 115, 118, 143, 146], "note": [18, 80, 120, 124, 149, 153], "case": [18, 22, 24, 41, 48, 51, 56, 57, 58, 59, 62, 68, 70, 71, 80, 85, 88, 90, 92, 106, 119, 123, 124, 134, 148, 152, 153], "mai": [18, 22, 24, 59, 62, 68, 106, 134], "effici": [18, 19, 22, 23], "wrapper": [18, 20, 24, 102, 159], "instead": [18, 20, 56, 58], "concaten": [18, 23, 48], "whole": [18, 48], "sequenc": [18, 19, 22, 23, 56, 58, 61, 98, 105, 119, 133, 148], "your": [18, 41, 49, 80, 120, 124, 149, 153, 157], "time": [18, 19, 20, 23, 24, 61, 105, 133], "do": [18, 23, 59, 82], "feed": [18, 56, 58], "zero_st": [18, 24], "dtype": [18, 22, 23, 24], "call": [18, 20, 22, 24, 67], "state": [18, 22, 23, 24, 57, 80, 120, 123, 124, 149, 152, 153, 157], "run": [18, 22, 23, 24], "num_proj": [18, 24], "activ": [18, 24, 90, 91, 98, 114, 142], "input_s": [18, 22, 23, 24], "an": [18, 19, 22, 23, 24, 41, 43, 46, 54, 59, 61, 62, 67, 68, 70, 71, 80, 83, 84, 93, 96, 99, 103, 105, 106, 111, 120, 124, 126, 131, 133, 134, 139, 149, 153, 154, 157, 159, 162, 164], "project": [18, 24, 41], "output_s": [18, 22], "directli": [18, 41], "softmax": [18, 96], "construct": [19, 24, 57, 123, 152], "fuse": 19, "fusedrnncel": [19, 22], "abstract": [19, 22, 98, 101], "object": [19, 41, 56, 57, 58, 80, 99, 102, 119, 120, 123, 124, 148, 149, 152, 153, 159], "repres": [19, 24, 41, 46, 48, 50, 61, 105, 133], "A": [19, 22, 23, 24, 59, 71, 73, 76, 79, 80, 81, 82, 83, 93, 96, 98, 111, 115, 126, 139, 143, 154, 157], "entir": [19, 22, 56, 58], "expand": 19, "dimens": [19, 22, 24], "effect": 19, "recurr": [19, 22, 23, 24, 76, 79], "network": [19, 22, 23, 24, 80, 124, 153], "unlik": [19, 22], "which": [19, 23, 24, 43, 44, 48, 50, 56, 57, 58, 59, 61, 70, 71, 76, 80, 82, 83, 84, 85, 90, 91, 93, 96, 99, 103, 111, 115, 119, 123, 124, 126, 131, 139, 143, 148, 152, 153, 154, 160], "subclass": [19, 22, 64, 65, 69, 99], "onc": [19, 91, 114, 142], "loop": 19, "insid": [19, 120, 149], "usual": [19, 93, 115, 143], "lead": 19, "much": [19, 22, 73, 120, 149], "complex": 19, "less": [19, 23, 61, 105, 133], "must": [19, 22, 23, 24, 43, 44, 52, 62, 68, 103, 106, 131, 134], "__call__": 19, "signatur": 19, "fusedrnncelladaptor": 19, "use_dynamic_rnn": 19, "adaptor": 19, "timereversedfusedrnn": 19, "revers": 19, "compat": [19, 22, 56, 57, 58, 80, 119, 123, 124, 129, 148, 152, 153], "v1": 19, "nn": [19, 50, 81], "basicrnncel": 19, "fw_lstm": 19, "contrib": [19, 21, 80, 124, 153], "bw_lstm": 19, "fw_out": 19, "fw_state": 19, "bw_out": 19, "bw_state": 19, "block": [20, 22], "gru": [20, 24], "op": [20, 21, 22], "layerrnncel": [20, 22], "grublockcel": 20, "num_unit": [20, 22, 24], "cell_siz": 20, "gru_cel": 20, "deprec": 20, "grublockcellv2": 20, "arxiv": [20, 22, 23, 24], "org": [20, 22, 23, 24, 67], "ab": [20, 22, 23, 24], "1406": [20, 24], "1078": [20, 24], "comput": [20, 23, 24, 48, 70], "forward": [20, 23], "propag": [20, 24], "step": [20, 24, 46], "kernel": 20, "mathemat": 20, "equat": [20, 24], "bias": [20, 22, 24], "b_ru": 20, "constant_initi": 20, "b_c": 20, "x_h_prev": 20, "h_prev": 20, "r_bar": 20, "u_bar": 20, "w_ru": 20, "r": [20, 24, 51, 88], "sigmoid": [20, 98], "h_prevr": 20, "circ": [20, 24], "x_h_prevr": 20, "c_bar": 20, "w_c": [20, 24], "c": [20, 24, 61], "h": [20, 24], "input_shap": [20, 22, 24], "temporari": 20, "impl": 20, "variabl": [20, 22, 24], "scheme": [20, 79, 159], "distribut": [21, 100], "origin": [21, 24, 54, 61, 82, 96, 105, 111, 133, 139], "modifi": [21, 76, 79, 82], "chang": [21, 24, 76], "just": [21, 80, 124, 153], "therefor": [21, 24], "function": [21, 41, 96, 98, 155, 164], "enabl": [21, 24, 43, 46, 50, 80, 124, 153], "lstm": [22, 24, 80, 124, 153], "lstmblockcel": 22, "forget_bia": [22, 24], "cell_clip": [22, 24], "use_peephol": [22, 24], "lstm_cell": 22, "1409": 22, "2329": 22, "we": [22, 24, 49, 50, 51, 52, 54, 61, 67, 73, 88, 96, 105, 109, 111, 118, 120, 133, 137, 139, 146, 149], "add": [22, 24, 84, 155, 157], "default": [22, 23, 24, 41, 42, 43, 46, 48, 49, 50, 51, 54, 56, 57, 58, 61, 62, 67, 68, 70, 71, 76, 80, 82, 83, 85, 90, 92, 93, 96, 97, 98, 103, 105, 106, 109, 111, 115, 119, 120, 123, 124, 126, 131, 133, 134, 137, 139, 143, 148, 149, 152, 153, 154, 157, 162], "forget": [22, 24], "gate": [22, 24], "order": [22, 24, 48], "reduc": [22, 24], "scale": [22, 24, 73], "begin": [22, 23, 24, 62, 68, 76, 79, 84, 90, 92, 96, 106, 111, 134, 139], "rnn_cell_impl": [22, 24], "lstmcell": [22, 24], "monolith": 22, "should": [22, 24, 41, 43, 48, 59, 64, 65, 67, 69, 70, 80, 99, 103, 120, 124, 131, 149, 153], "faster": [22, 56, 57, 58, 119, 123, 148, 152], "bia": [22, 24], "matric": [22, 24], "long": [22, 24], "scope": [22, 23, 24, 43, 103, 131], "match": [22, 23, 43, 44, 56, 57, 58, 59, 61, 62, 67, 68, 76, 81, 103, 105, 106, 119, 123, 131, 133, 134, 148, 152], "inputs_shap": [22, 24], "short": [22, 24], "term": [22, 24, 43, 50, 54, 61, 103, 105, 131, 133, 157], "lstmblockwrapp": 22, "helper": [22, 23, 157, 160], "housekeep": 22, "altern": 22, "similar": [22, 24, 61, 105, 133], "type": [22, 23, 24, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 95, 96, 97, 103, 105, 106, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 134, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 162], "_call_cel": 22, "properti": [22, 23, 61, 105, 133], "number": [22, 23, 24, 41, 43, 44, 48, 54, 61, 73, 80, 91, 96, 98, 103, 105, 114, 120, 124, 131, 133, 142, 149, 153, 157, 161], "unit": [22, 24, 85, 90, 91, 98, 114, 142], "initial_st": 22, "sequence_length": [22, 23], "arg": [22, 23, 24], "d": [22, 24, 41, 61, 157], "tensor": [22, 23, 24], "shape": [22, 23, 24], "time_len": 22, "tupl": [22, 23, 24], "initial_cell_st": 22, "initial_output": 22, "self": [22, 24, 99], "_num_unit": 22, "expect": [22, 84], "zero": [22, 23, 83, 93, 115, 126, 143, 154], "ha": [22, 23, 24, 41, 43, 46, 48, 50, 54, 59, 61, 62, 68, 70, 80, 90, 103, 106, 120, 131, 134, 149], "heterogen": 22, "specifi": [22, 24, 43, 54, 71, 73, 79, 80, 90, 93, 115, 143], "each": [22, 23, 24, 41, 43, 44, 48, 54, 61, 70, 73, 76, 80, 93, 103, 105, 115, 120, 124, 131, 133, 143, 149, 153, 162], "int32": [22, 23], "int64": [22, 23], "vector": [22, 23, 24, 48, 54, 73, 99], "size": [22, 23, 24, 43, 56, 57, 58, 73, 80, 98, 103, 119, 120, 123, 124, 131, 148, 149, 152, 153], "valu": [22, 23, 42, 43, 46, 48, 49, 50, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 80, 83, 84, 85, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 105, 111, 115, 119, 120, 123, 124, 126, 131, 133, 139, 143, 148, 149, 152, 153, 154, 157], "element": [22, 23], "pair": [22, 24, 41, 46, 50, 76, 79, 82, 90, 91, 92, 93, 115, 143], "list": [22, 23, 41, 43, 44, 46, 50, 54, 56, 57, 58, 61, 71, 76, 80, 81, 82, 83, 90, 92, 93, 96, 97, 98, 103, 105, 111, 115, 126, 131, 133, 139, 143, 154, 157, 158, 162, 164], "final": [22, 23], "cell_stat": 22, "rais": [22, 23, 24, 80], "valueerror": [22, 23, 24], "mismatch": 22, "lstmblockfusedcel": 22, "lstm_fused_cel": 22, "extrem": 22, "singl": [22, 23, 24, 48, 51, 80, 99, 120, 124, 149, 153, 162], "both": [22, 23, 24, 57, 59, 61, 70, 105, 123, 133, 152, 157], "than": [22, 50, 61, 105, 133], "abov": 22, "consist": [22, 24, 48, 61, 93, 105, 115, 133, 143], "stack_bidirectional_rnn": 23, "cells_fw": 23, "cells_bw": 23, "initial_states_fw": 23, "initial_states_bw": 23, "bidirect": [23, 24], "neural": [23, 24, 80, 124, 153], "stack": [23, 24], "layer": [23, 24, 43, 56, 57, 58, 73, 98, 103, 119, 123, 131, 148, 152], "combin": [23, 24, 70, 92], "backward": 23, "next": [23, 84], "bidirectional_rnn": 23, "doe": [23, 24], "share": [23, 24], "between": [23, 24, 41, 43, 61, 70, 71, 80, 81, 91, 92, 93, 103, 105, 114, 115, 120, 124, 131, 133, 142, 143, 149, 153, 157], "direct": [23, 24, 41, 90, 91, 92, 98, 114, 142], "intermedi": 23, "As": [23, 24], "describ": [23, 24, 48], "1303": 23, "5778": 23, "instanc": [23, 41, 70, 83, 90, 91, 114, 126, 142, 154], "one": [23, 24, 41, 42, 43, 56, 58, 70, 71, 73, 76, 82, 85, 101, 103, 131, 157], "per": [23, 24, 43, 44, 49, 56, 58, 67, 73, 80, 103, 120, 124, 131, 149, 153], "nest": 23, "option": [23, 24, 41, 43, 48, 50, 51, 56, 57, 58, 59, 61, 70, 71, 76, 80, 82, 83, 93, 99, 109, 115, 119, 120, 123, 124, 126, 137, 143, 148, 149, 152, 153, 154, 157], "appropri": [23, 41], "cell_fw": 23, "state_s": [23, 24], "same": [23, 24, 41, 48, 61, 76, 82, 105, 133], "correspond": [23, 48, 61, 67, 70, 105, 133], "either": [23, 44, 48, 62, 68, 79, 106, 120, 134, 149], "actual": 23, "variablescop": 23, "subgraph": 23, "output_state_fw": 23, "output_state_bw": 23, "depth": [23, 24], "output_states_fw": 23, "output_states_bw": 23, "typeerror": 23, "cell_bw": 23, "empti": [23, 62, 68, 71, 73, 96, 106, 134], "stack_bidirectional_dynamic_rnn": 23, "parallel_iter": 23, "time_major": 23, "swap_memori": 23, "dynam": [23, 24], "max_tim": 23, "iter": [23, 44, 54], "parallel": 23, "those": 23, "ani": [23, 42, 76, 80, 97, 124, 153], "tempor": 23, "trade": 23, "off": [23, 43, 80, 103, 120, 124, 131, 149, 153], "space": [23, 24], "take": [23, 56, 58, 61, 70, 73, 99, 105, 119, 133, 148], "while": [23, 41, 96, 111, 139], "smaller": 23, "longer": [23, 76], "bit": [23, 56, 58, 119, 148], "becaus": [23, 64, 65, 69], "avoid": [23, 24, 41], "transpos": 23, "howev": [23, 50], "most": [23, 48, 80, 124, 153], "major": 23, "so": [23, 24, 120, 149], "accept": [23, 120, 149], "emit": 23, "form": [23, 54, 67, 71, 120, 149], "transpar": 23, "swap": 23, "produc": [23, 24, 76], "infer": [23, 24, 80, 93, 115, 124, 143, 153], "back": 23, "prop": 23, "gpu": [23, 129], "would": [23, 120, 149], "typic": 23, "fit": [23, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 80, 81, 83, 84, 85, 88, 90, 91, 92, 93, 96, 98, 99, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 154], "veri": [23, 61, 105, 133], "minim": [23, 83, 90, 91, 93, 114, 115, 126, 142, 143, 154], "perform": [23, 24, 80], "penalti": 23, "layers_output": 23, "coupledinputforgetgatelstmcel": 24, "proj_clip": 24, "num_unit_shard": 24, "num_proj_shard": 24, "state_is_tupl": 24, "math_op": 24, "layer_norm": 24, "norm_gain": 24, "norm_shift": 24, "peephol": 24, "pdf": 24, "semanticscholar": 24, "1154": 24, "0131eae85b2e11d53df7f1360eeb6476e7f4": 24, "felix": 24, "ger": 24, "jurgen": 24, "schmidhub": 24, "fred": 24, "cummin": 24, "learn": [24, 43, 73, 80, 103, 120, 124, 131, 149, 153], "continu": [24, 96, 111, 139], "iet": 24, "850": 24, "855": 24, "1999": 24, "research": 24, "googl": 24, "pub": 24, "archiv": 24, "43905": 24, "hasim": 24, "sak": 24, "andrew": 24, "senior": 24, "francois": 24, "beaufai": 24, "architectur": [24, 80, 124, 153], "larg": [24, 56, 57, 58, 80, 119, 123, 124, 148, 152, 153], "acoust": 24, "interspeech": 24, "2014": 24, "coupl": 24, "1503": 24, "04069": 24, "greff": 24, "et": 24, "al": 24, "search": [24, 43, 67, 80, 96, 111, 139], "odyssei": 24, "peep": 24, "hole": 24, "connect": [24, 41], "1607": 24, "06450": 24, "jimmi": 24, "lei": 24, "ba": 24, "jami": 24, "ryan": 24, "kiro": 24, "geoffrei": 24, "hinton": 24, "appli": [24, 61, 85, 105, 133], "intern": [24, 129], "nonlinear": 24, "2d": 24, "column": [24, 41, 42, 43, 44, 49, 51, 54, 59, 61, 62, 68, 73, 76, 79, 80, 85, 88, 90, 96, 98, 99, 103, 105, 106, 109, 111, 118, 120, 124, 131, 133, 134, 137, 139, 146, 149, 153, 155, 157, 158], "c_state": 24, "m_state": 24, "after": [24, 44, 54, 56, 57, 58, 84, 119, 123, 148, 152], "read": [24, 59, 61, 70, 76, 82, 83, 99, 120, 126, 149, 154], "when": [24, 41, 43, 49, 59, 61, 76, 80, 81, 96, 105, 111, 133, 139], "previou": 24, "wa": [24, 41, 43, 49, 50, 51, 71, 88, 103, 118, 120, 131, 146, 149], "here": 24, "otherwis": [24, 48, 51, 56, 57, 58, 61, 62, 68, 70, 71, 83, 93, 99, 105, 106, 109, 115, 119, 120, 123, 126, 133, 134, 137, 143, 148, 149, 152, 154], "cannot": 24, "via": [24, 46, 50], "timefreqlstmcel": 24, "feature_s": 24, "frequency_skip": 24, "tara": 24, "n": [24, 44, 48, 67, 80, 124, 153, 161], "sainath": 24, "bo": 24, "li": 24, "pattern": [24, 41, 61, 81, 85, 105, 133, 162], "v": [24, 43, 44, 76, 80], "convolut": 24, "lvcsr": 24, "task": [24, 41, 56, 57, 58, 93, 115, 119, 123, 143, 148, 152, 162], "submit": 24, "2016": 24, "clip": 24, "gridlstmcel": 24, "share_time_frequency_weight": 24, "num_frequency_block": 24, "start_freqindex_list": 24, "end_freqindex_list": 24, "couple_input_forget_g": 24, "grid": 24, "nal": 24, "kalchbrenn": 24, "ivo": 24, "danihelka": 24, "alex": 24, "grave": 24, "proc": 24, "iclr": 24, "1507": 24, "01526": 24, "shared_weight": 24, "flag": [24, 73], "_state_is_tupl": 24, "bidirectionalgridlstmcel": 24, "backward_slice_offset": 24, "gridlstm": 24, "henc": 24, "doesn": 24, "affect": [24, 48], "real": [24, 80, 124, 153], "process": [24, 43, 46, 50, 56, 57, 58, 62, 68, 73, 76, 80, 82, 90, 91, 92, 96, 103, 106, 111, 114, 119, 123, 124, 131, 134, 139, 142, 148, 152, 153], "onlin": 24, "system": [24, 157], "current": [24, 56, 57, 58, 84, 93, 98, 100, 115, 119, 123, 143, 148, 152], "two": [24, 48, 61, 76, 105, 133], "attentioncellwrapp": 24, "attn_length": 24, "attn_siz": 24, "attn_vec_s": 24, "attent": 24, "1601": 24, "06733": 24, "lstma": 24, "highwaywrapp": 24, "couple_carry_transform_g": 24, "carry_bias_init": 24, "highwai": 24, "k": [24, 54, 96], "srivastava": 24, "j": 24, "preprint": 24, "1505": 24, "00387": 24, "2015": 24, "layernormbasiclstmcel": 24, "dropout_keep_prob": 24, "dropout_prob_se": 24, "1603": 24, "05118": 24, "without": [24, 61, 105, 133], "stanislau": 24, "semeniuta": 24, "aliaksei": 24, "severyn": 24, "erhardt": 24, "barth": 24, "nascel": 24, "use_bia": 24, "kwarg": 24, "na": 24, "paper": 24, "1611": 24, "01578": 24, "barret": 24, "zoph": 24, "quoc": 24, "le": 24, "reinforc": 24, "2017": 24, "ugrnncel": 24, "updat": [24, 160], "ugrnn": 24, "compromis": 24, "vanilla": 24, "There": 24, "determin": [24, 48, 90, 92, 93, 115, 143], "whether": [24, 43, 48, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 67, 68, 76, 80, 82, 85, 90, 92, 93, 96, 98, 103, 105, 106, 111, 115, 119, 120, 123, 124, 131, 133, 134, 139, 143, 148, 149, 152, 153], "integr": 24, "instantan": 24, "idea": 24, "feedforward": 24, "09913": 24, "jasmin": 24, "collin": 24, "jascha": 24, "sohl": 24, "dickstein": 24, "david": 24, "sussillo": 24, "capac": 24, "trainabl": 24, "num": 24, "new_output": 24, "ident": 24, "new_stat": 24, "intersectionrnncel": 24, "num_in_proj": 24, "y_activ": 24, "nn_op": 24, "intersect": 24, "well": 24, "design": 24, "improv": [24, 80, 93, 115, 124, 143, 153], "flow": 24, "through": [24, 59], "dimension": 24, "y": 24, "To": [24, 46, 50, 56, 57, 58, 90, 119, 123, 148, 152], "achiev": [24, 48, 80, 124, 153], "subsequ": 24, "deepli": 24, "best": [24, 80, 120, 149], "new_i": 24, "equal": [24, 41, 70, 71], "compiledwrapp": 24, "compile_st": 24, "wrap": [24, 64, 65, 69, 99], "execut": [24, 61, 105, 133], "xla": 24, "jit": 24, "phasedlstmcel": 24, "leak": 24, "ratio_on": 24, "trainable_ratio_on": 24, "period_init_min": 24, "period_init_max": 24, "1000": [24, 96, 111, 139], "phase": 24, "1610": 24, "09513v1": 24, "float32": 24, "float64": 24, "store": 24, "second": [24, 47], "features_s": 24, "lstmstatetupl": 24, "timestep": 24, "convlstmcel": 24, "conv_ndim": 24, "output_channel": 24, "kernel_shap": 24, "skip_connect": 24, "conv_lstm_cel": 24, "1506": 24, "04214v1": 24, "conv1dlstmcel": 24, "conv_1d_lstm_cel": 24, "1d": 24, "conv2dlstmcel": 24, "conv_2d_lstm_cel": 24, "conv3dlstmcel": 24, "conv_3d_lstm_cel": 24, "3d": 24, "glstmcell": 24, "number_of_group": 24, "group": [24, 49, 81], "g": [24, 43, 44, 48, 56, 57, 58, 71, 80, 85, 90, 96, 103, 111, 119, 123, 124, 131, 139, 148, 152, 153], "1703": 24, "10722": 24, "kuchaiev": 24, "b": [24, 43, 56, 57, 58, 76, 79, 80, 81, 82, 83, 90, 123, 126, 152, 154], "ginsburg": 24, "trick": 24, "brief": 24, "sub": 24, "evenli": 24, "fed": 24, "num_input": 24, "known": [24, 81], "divis": 24, "innermost": 24, "incompat": 24, "layernormlstmcel": 24, "srucel": 24, "sru": 24, "fast": 24, "cnn": [24, 80, 124, 153], "cf": 24, "1709": 24, "02755": 24, "variat": 24, "character": 24, "simplifi": 24, "consecut": 24, "tradition": 24, "multipli": 24, "matrix": 24, "w_hh": 24, "being": [24, 61, 80, 97, 105, 133], "ensu": 24, "flavor": 24, "replac": [24, 59, 61, 63, 75, 76, 82, 105, 133], "multipl": [24, 42, 71, 93, 115, 143], "h_": 24, "pointwis": 24, "result": [24, 41, 43, 46, 48, 49, 50, 51, 54, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 73, 76, 79, 80, 81, 83, 84, 85, 88, 90, 91, 92, 93, 99, 103, 105, 106, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 134, 142, 143, 146, 148, 149, 152, 153, 154], "gain": 24, "int": [24, 41, 42, 43, 54, 56, 57, 58, 61, 67, 71, 73, 80, 84, 90, 91, 92, 96, 97, 98, 120, 149, 157, 161], "boolean": [24, 41, 48, 49, 61, 90, 92, 98], "exist": [24, 41, 96, 111, 139, 160], "alreadi": [24, 41, 54, 80, 96, 111, 139], "error": 24, "string": [24, 62, 67, 68, 81, 85, 98, 106, 120, 134, 149], "mistak": 24, "addit": [24, 44, 61, 80, 96, 111, 120, 124, 139, 149, 153], "keyword": [24, 42, 49, 75, 97], "argument": 24, "weightnormlstmcel": 24, "norm": 24, "adapt": 24, "1602": 24, "07868": 24, "tim": 24, "saliman": 24, "diederik": 24, "p": [24, 43, 51, 80, 82, 85], "kingma": 24, "reparameter": 24, "acceler": 24, "deep": [24, 43, 103, 120, 131, 149], "indrnncel": 24, "independ": 24, "indrnn": 24, "1803": 24, "04831": 24, "mean": [24, 59, 70, 71, 80, 84], "act": [24, 120, 149], "w": 24, "indygrucel": 24, "kernel_initi": 24, "bias_initi": 24, "grucel": 24, "u_r": 24, "u_z": 24, "5": [24, 50, 51, 59, 61, 67, 70, 71, 76, 79, 80, 85, 91, 105, 114, 120, 124, 133, 142, 149, 153, 159], "respect": 24, "diagon": 24, "hadamard": 24, "product": 24, "r_j": 24, "sigmaleft": 24, "mathbf": 24, "w_rmathbf": 24, "_j": 24, "u_rcirc": 24, "_jright": 24, "z_j": 24, "w_zmathbf": 24, "u_zcirc": 24, "tild": 24, "phileft": 24, "denot": 24, "indygru": 24, "node": 24, "see": [24, 46, 56, 57, 58, 62, 68, 80, 84, 90, 91, 106, 114, 119, 120, 123, 124, 134, 142, 148, 149, 152, 153], "its": [24, 71], "own": [24, 80, 120, 124, 149, 153, 157], "oppos": 24, "nunit": 24, "indylstmcel": 24, "indylstm": 24, "basiclstmcel": 24, "u_f": 24, "u_i": 24, "u_o": 24, "u_c": 24, "regular": [24, 41, 44, 46, 50, 61, 98, 105, 133, 162], "f_t": 24, "sigma_gleft": 24, "w_f": 24, "x_t": 24, "b_fright": 24, "i_t": 24, "w_i": 24, "b_iright": 24, "o_t": 24, "w_o": 24, "b_oright": 24, "c_t": 24, "c_": 24, "sigma_cleft": 24, "b_cright": 24, "baselin": 24, "detail": [24, 41], "analysi": [24, 120, 149], "1903": 24, "08023": 24, "ntmcontrollerst": 24, "ntmcell": 24, "control": [24, 41, 43, 46, 103, 131], "memory_s": 24, "memory_vector_dim": 24, "read_head_num": 24, "write_head_num": 24, "shift_rang": 24, "clip_valu": 24, "ture": 24, "machin": 24, "1807": 24, "08518": 24, "mark": [24, 43, 44, 48, 103, 131], "collier": 24, "joeran": 24, "beel": 24, "turn": 24, "snowkylin": 24, "ntm": 24, "cours": 24, "1410": 24, "5401": 24, "wayn": 24, "prev_stat": 24, "minimalrnncel": 24, "glorot_uniform": 24, "ones": [24, 80], "minimalrnn": 24, "1806": 24, "05394v2": 24, "minmin": 24, "chen": 24, "jeffrei": 24, "pennington": 24, "samuel": 24, "schoenholz": 24, "isometri": 24, "field": [24, 47, 49, 59, 76, 84, 97, 99], "theori": 24, "signal": 24, "icml": 24, "2018": [24, 84], "sum": 24, "cfncell": 24, "chao": 24, "openreview": 24, "net": [24, 44], "id": [24, 41, 47, 68, 157, 162], "s1dizvclg": 24, "thoma": 24, "laurent": 24, "jame": 24, "von": 24, "brecht": 24, "cfn": 24, "goe": 24, "contract": 24, "map": [24, 51, 59, 61, 71, 80, 82, 88, 90, 91, 96, 105, 109, 111, 118, 133, 137, 139, 146, 157], "linear": [24, 56, 57, 58, 98, 119, 123, 148, 152], "decoupl": 24, "tf_graph_1x": [33, 159], "manipul": 41, "json": [41, 51, 59, 88, 109, 118, 137, 146, 159, 162], "export": [41, 159, 162], "layout": 41, "annotationlab": 41, "set_credenti": 41, "usernam": [41, 157], "password": 41, "client_secret": 41, "annotationlab_url": 41, "credenti": 41, "client": 41, "get_all_project": 41, "visibl": [41, 61, 105, 133], "rtype": [41, 162], "get_project_config": 41, "project_nam": 41, "create_project": 41, "project_descript": 41, "project_sampl": 41, "project_instruct": 41, "random": [41, 61, 80, 105, 120, 124, 133, 149, 153, 157], "sequenti": 41, "sampl": [41, 161], "show": [41, 43, 46, 48, 49, 50, 51, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 76, 79, 83, 85, 88, 90, 91, 92, 93, 103, 105, 106, 114, 118, 119, 120, 123, 126, 131, 133, 134, 142, 146, 148, 149, 152, 154, 159], "guidelin": 41, "delete_project": 41, "confirm": 41, "delet": 41, "set_project_config": 41, "classification_label": 41, "ner_label": [41, 79, 159], "assertion_label": [41, 159, 162], "relations_label": 41, "classif": [41, 73, 75, 119, 120, 123, 129, 148, 149, 152], "By": [41, 71], "multiclass": 41, "upload_task": 41, "task_list": 41, "title_list": 41, "id_offset": 41, "upload": 41, "custom": [41, 61, 82, 90, 91, 105, 133, 162], "titl": [41, 162], "increment": 41, "offset": [41, 43], "delete_task": 41, "task_id": [41, 159], "get_annot": 41, "output_nam": 41, "save_dir": 41, "write": 41, "directori": 41, "locat": [41, 59, 67, 157, 160], "get_conll_data": 41, "input_json_path": [41, 162], "exported_conl": 41, "ground_truth": [41, 162], "bool": [41, 43, 51, 56, 58, 59, 61, 62, 67, 68, 73, 76, 80, 82, 85, 88, 92, 96, 98, 157, 162], "excluded_label": [41, 159, 162], "excluded_task_id": [41, 162], "excluded_task_titl": [41, 162], "regex_pattern": [41, 162], "io": 41, "conll": [41, 80, 124, 153, 162], "select": [41, 43, 46, 48, 49, 51, 52, 56, 57, 58, 61, 76, 83, 84, 88, 90, 91, 96, 103, 105, 114, 118, 119, 123, 126, 131, 133, 142, 146, 148, 152, 154, 157, 162], "ground": [41, 162], "truth": [41, 162], "complet": [41, 162], "latest": [41, 162], "exclud": [41, 44, 80, 124, 153, 162], "irrelev": [41, 162], "regex": [41, 42, 46, 47, 49, 50, 59, 61, 81, 85, 97, 105, 133, 162], "get_assertion_data": 41, "relevant_ner_label": 41, "unannotated_label": 41, "unannotated_label_strategi": 41, "unannotated_label_strategy_dict": 41, "panda": 41, "relev": [41, 48], "assign": 41, "strategi": 41, "occurr": 41, "unannot": 41, "count": 41, "fraction": 41, "absolut": 41, "dictionari": [41, 44, 49, 51, 59, 61, 71, 76, 82, 83, 88, 90, 91, 93, 97, 109, 115, 118, 126, 137, 143, 146, 154], "entity_label": [41, 61, 105, 133], "sample_weight_or_count": 41, "max": [41, 43, 44, 56, 57, 58, 103, 119, 123, 131, 148, 152], "get_relation_extraction_data": 41, "negative_rel": 41, "relation_pair": 41, "negative_relation_strategi": 41, "negative_relation_strategy_dict": 41, "were": [41, 80, 124, 153, 162], "plausibl": 41, "separ": [41, 46, 48, 50, 61, 90, 92], "possibl": [41, 42, 43, 46, 49, 50, 59, 73, 76, 97, 98, 103, 131], "neg": [41, 43], "entity1": [41, 90, 91, 114, 142], "entity2": [41, 90, 91, 114, 142], "get_classification_data": 41, "generate_preannot": 41, "all_result": 41, "document_column": 41, "ner_column": 41, "assertion_column": 41, "relations_column": 41, "user_nam": 41, "titles_list": 41, "light_pipelin": 41, "fullannot": [41, 42], "full_pipelin": 41, "df": [41, 84, 102, 155, 157, 158, 159], "collect": [41, 99], "documentassembl": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 76, 79, 80, 81, 82, 84, 85, 88, 90, 91, 92, 93, 96, 97, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153], "older": 41, "offeset": 41, "overrit": 41, "upload_preannot": 41, "preannot": 41, "annotationmerg": 42, "classnam": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 64, 65, 67, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 88, 90, 91, 92, 93, 95, 96, 97, 103, 105, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154], "java_model": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 64, 65, 67, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 88, 90, 91, 92, 93, 95, 96, 97, 103, 105, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154], "merg": [42, 54, 75, 79, 82, 95, 129], "inputtyp": [42, 49, 97], "wordpiec": [42, 49, 97], "sentence_embed": [42, 49, 67, 70, 71, 96, 97, 111, 120, 139, 149], "categori": [42, 49, 54, 56, 58, 73, 90, 91, 93, 97, 114, 115, 119, 120, 130, 142, 143, 148, 149], "sentiment": [42, 49, 97, 120, 149], "named_ent": [42, 49, 57, 79, 80, 81, 82, 83, 97, 123, 124, 126, 152, 153, 154], "labeled_depend": [42, 49, 51, 88, 97, 109, 118, 137, 146], "languag": [42, 48, 49, 51, 56, 57, 58, 61, 62, 68, 70, 71, 83, 93, 97, 106, 109, 115, 119, 120, 123, 126, 127, 134, 137, 143, 148, 149, 152, 154, 156, 159], "doc": [42, 96, 111, 139], "test_data": [42, 47, 97], "createdatafram": [42, 43, 47, 48, 50, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 76, 79, 80, 82, 83, 84, 85, 90, 91, 93, 97, 103, 105, 106, 114, 119, 120, 123, 124, 126, 131, 133, 134, 142, 148, 149, 152, 153, 154], "todf": [42, 43, 47, 48, 50, 56, 57, 58, 59, 61, 62, 67, 68, 70, 71, 76, 79, 80, 82, 83, 84, 85, 90, 91, 92, 93, 97, 103, 105, 106, 114, 119, 120, 123, 124, 126, 131, 133, 134, 142, 148, 149, 152, 153, 154], "document1": 42, "document2": 42, "setinputtyp": [42, 97], "all_doc": 42, "setstag": [42, 48, 49, 51, 54, 56, 57, 58, 62, 68, 70, 71, 73, 80, 83, 88, 93, 97, 99, 106, 118, 119, 120, 123, 124, 126, 134, 146, 148, 149, 152, 153, 154], "lp": 42, "lightpipelin": [42, 162], "replic": 42, "23": [42, 47], "filter": [42, 46, 49, 50, 52, 82, 92, 97], "algorithm": [43, 44, 54, 103, 131], "assertionlogregmodel": [43, 44, 103, 131], "obtain": [43, 44, 93, 103, 115, 131, 143], "present": [43, 46, 76, 79, 82, 96, 103, 111, 131, 139], "absent": [43, 46, 103, 131, 159], "hypothet": [43, 46, 103, 131], "condit": [43, 103, 131], "associated_with_other_person": [43, 103, 131], "etc": [43, 96, 103, 111, 131, 139], "startcol": [43, 44, 62, 68, 103, 106, 131, 134], "endcol": [43, 44, 103, 131], "olumn": [43, 103, 131], "batchsiz": [43, 56, 57, 58, 73, 80, 91, 103, 114, 119, 120, 123, 124, 131, 142, 148, 149, 152, 153], "optim": [43, 73, 80, 103, 124, 131, 153], "learningr": [43, 73, 103, 131], "rate": [43, 73, 80, 103, 120, 124, 131, 149, 153], "maxsentlen": [43, 103, 131], "graphfold": [43, 80, 98, 103, 124, 131, 153], "extern": [43, 76, 80, 82, 98, 103, 124, 131, 153], "graphfil": [43, 80, 98, 103, 131], "configprotobyt": [43, 56, 57, 58, 80, 103, 119, 120, 123, 124, 131, 148, 149, 152, 153], "configproto": [43, 56, 57, 58, 80, 103, 119, 120, 123, 124, 131, 148, 149, 152, 153], "serial": [43, 56, 57, 58, 80, 103, 119, 120, 123, 124, 131, 148, 149, 152, 153], "byte": [43, 56, 57, 58, 80, 103, 119, 120, 123, 124, 131, 148, 149, 152, 153], "config_proto": [43, 103, 131], "serializetostr": [43, 103, 131], "validationsplit": [43, 73, 80, 103, 120, 124, 131, 149, 153], "choos": [43, 80, 103, 120, 124, 131, 149, 153], "proport": [43, 80, 103, 120, 124, 131, 149, 153], "against": [43, 48, 80, 103, 120, 124, 131, 149, 153], "evaluationlogextend": [43, 80, 103, 124, 131, 153], "mode": [43, 61, 73, 102, 103, 105, 131, 133, 157], "eval": [43, 103, 129, 131], "testdataset": [43, 80, 103, 124, 131, 153], "statist": [43, 80, 103, 124, 131, 153], "dure": [43, 67, 80, 103, 120, 124, 131, 149, 153, 157], "includeconfid": [43, 80, 103, 124, 131, 153], "confid": [43, 46, 50, 51, 80, 82, 83, 88, 93, 96, 103, 109, 115, 118, 124, 126, 131, 137, 143, 146, 153, 154], "metadata": [43, 47, 48, 49, 59, 61, 67, 76, 79, 80, 83, 84, 90, 91, 92, 93, 97, 103, 114, 124, 126, 131, 142, 153, 154], "enableoutputlog": [43, 80, 103, 120, 124, 131, 149, 153], "outputlogspath": [43, 73, 80, 103, 120, 124, 131, 149, 153], "level": [43, 46, 48, 59, 80, 103, 120, 124, 131, 149, 153], "scopewindow": [43, 103, 131], "window": [43, 80, 103, 124, 131, 153], "express": [43, 46, 50, 61, 103, 105, 131, 133], "ml": [43, 44, 46, 50, 51, 54, 56, 57, 58, 59, 61, 62, 68, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 96, 103, 105, 106, 111, 114, 118, 119, 120, 123, 124, 126, 131, 133, 134, 139, 142, 146, 148, 149, 152, 153, 154, 155], "document_assembl": [43, 44, 47, 54, 81, 83, 84, 103, 126, 131, 154], "sentence_detector": [43, 44, 47, 51, 71, 81, 83, 88, 103, 118, 126, 131, 146, 154], "sentencedetector": [43, 44, 46, 47, 48, 49, 50, 51, 59, 61, 67, 70, 71, 76, 79, 80, 81, 82, 88, 92, 93, 96, 97, 103, 105, 111, 118, 120, 124, 131, 133, 139, 146, 149, 153], "wordembeddingsmodel": [43, 44, 48, 51, 61, 67, 70, 71, 76, 79, 80, 81, 82, 88, 90, 91, 92, 93, 103, 105, 114, 118, 124, 131, 133, 142, 146, 153], "pretrain": [43, 44, 48, 50, 51, 54, 56, 57, 58, 61, 67, 70, 71, 73, 76, 79, 80, 81, 82, 83, 88, 90, 91, 92, 93, 96, 97, 103, 105, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 129, 131, 133, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 160], "embeddings_clin": [43, 44, 48, 51, 61, 71, 76, 79, 81, 82, 88, 90, 91, 92, 93, 103, 105, 114, 118, 131, 133, 142, 146], "en": [43, 44, 48, 51, 54, 56, 57, 58, 61, 67, 70, 71, 73, 76, 79, 80, 81, 82, 83, 88, 90, 91, 92, 93, 96, 103, 105, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154], "setcasesensit": [43, 44, 54, 56, 57, 58, 59, 81, 91, 96, 97, 103, 111, 119, 123, 131, 139, 148, 152], "chunker": [43, 44, 75, 81, 103, 129, 131], "setchunkcol": [43, 44, 62, 68, 81, 103, 106, 131, 134], "012": [43, 103, 131], "015": [43, 103, 131], "setscopewindow": [43, 103, 131], "assertionpipelin": [43, 44, 46, 96, 103, 111, 131, 139], "srt": [43, 98], "setgraphfil": [43, 80, 98], "happen": [43, 80], "setconfigprotobyt": [43, 56, 57, 58, 80], "row": [43, 49], "lamda": [43, 44, 73], "float": [43, 48, 54, 61, 67, 70, 71, 73, 80, 82, 83, 90, 91, 96, 99, 120, 149], "extend": [43, 62, 68, 80, 106, 120, 124, 134, 149, 153], "settestdataset": 43, "read_a": [43, 50, 59, 61, 76, 82], "reada": [43, 50, 59, 61, 76, 82], "waht": 43, "left": [43, 90, 91, 92, 114, 142], "right": [43, 48, 70, 90, 91, 92, 114, 142], "assertiondlmodel": [43, 46, 103, 131], "dl": [43, 75], "approach": [43, 51, 88, 103, 109, 118, 131, 137, 146], "targetnerlabel": [43, 44, 103, 131], "tag": [43, 46, 50, 61, 79, 80, 81, 82, 103, 105, 120, 124, 131, 133, 149, 153], "fever": [43, 46, 103, 131], "sore": [43, 46, 103, 131], "throat": [43, 46, 103, 131], "stomach": [43, 46, 50, 103, 131], "pain": [43, 46, 50, 103, 131], "she": [43, 103, 131], "maintain": [43, 103, 131], "epidur": [43, 46, 103, 131], "pca": [43, 46, 103, 131], "medicalnermodel": [43, 48, 51, 61, 71, 76, 79, 80, 81, 82, 88, 90, 91, 92, 93, 103, 105, 114, 118, 131, 133, 142, 146], "ner_clin": [43, 80, 93, 103, 124, 131, 153], "nerconvert": [43, 46, 48, 61, 67, 70, 76, 79, 82, 90, 91, 92, 93, 103, 105, 114, 131, 133, 142], "ner_chunk": [43, 46, 48, 51, 61, 67, 70, 71, 75, 78, 79, 82, 84, 88, 90, 91, 92, 93, 103, 105, 114, 118, 131, 133, 142, 146], "clinicalassert": [43, 46, 103, 131], "selectexpr": [43, 46, 48, 50, 51, 59, 62, 67, 68, 70, 71, 76, 79, 83, 84, 85, 90, 91, 92, 93, 103, 106, 114, 120, 126, 131, 134, 142, 149, 154], "truncat": [43, 46, 48, 50, 51, 56, 57, 58, 59, 61, 62, 68, 70, 71, 83, 85, 88, 90, 91, 92, 93, 103, 105, 106, 114, 118, 119, 120, 123, 126, 131, 133, 134, 142, 146, 148, 149, 152, 154], "lang": [43, 44, 48, 51, 54, 56, 57, 58, 61, 67, 70, 71, 73, 76, 80, 83, 90, 91, 93, 96, 103, 105, 109, 111, 114, 115, 119, 120, 123, 124, 126, 131, 133, 137, 139, 142, 143, 148, 149, 152, 153, 154, 156], "remote_loc": [43, 44, 48, 51, 54, 56, 57, 58, 61, 67, 70, 71, 73, 76, 80, 83, 90, 91, 93, 96, 103, 105, 109, 111, 114, 115, 119, 120, 123, 124, 126, 131, 133, 137, 139, 142, 143, 148, 149, 152, 153, 154, 156], "assertionlogregapproach": 44, "regress": [44, 54, 56, 58, 119, 148], "done": [44, 80, 120, 124, 149, 153], "maxit": [44, 54], "regparam": 44, "enetparam": 44, "elast": 44, "beforeparam": 44, "context": [44, 48, 70, 75, 129], "afterparam": 44, "externalfeatur": 44, "nercol": 44, "Then": [44, 67, 80, 120, 124, 149, 153], "setreg": 44, "setbefor": 44, "setaft": 44, "13": [44, 61, 85, 105, 133], "setmaxit": [44, 54], "setenet": 44, "enet": 44, "setnercol": 44, "settargetnerlabel": 44, "logreg": [44, 54, 75], "assertionlogreg": 44, "famili": [44, 96], "logarithm": [44, 54], "assertionpretrain": 44, "assertiondl": [45, 75, 104, 108, 132, 136], "assertion_dl_reg": [45, 75], "assertionfilter": 46, "come": [46, 48, 50, 76, 96, 111, 139], "white": [46, 50], "criteria": [46, 50, 76], "isin": [46, 50], "whitelist": [46, 50, 82], "rest": [46, 50, 76, 82], "ignor": [46, 50, 56, 57, 58, 61, 76, 82, 105, 119, 123, 133, 148, 152], "what": [46, 50, 52, 76, 83, 90, 96, 100, 126, 154, 160], "entitiesconfid": [46, 50], "remov": [46, 48, 85], "setcriteria": [46, 50], "setwhitelist": [46, 50, 67, 82], "chunksfilt": 46, "setregex": [46, 50], "llist": [46, 50], "dash": [46, 50, 90, 92], "chunkconvert": 47, "convert": [47, 62, 68, 82, 85, 97, 106, 134], "regexmatch": [47, 49, 59, 97], "my": [47, 83, 120, 126, 149, 154], "rule": [47, 59], "ceremoni": 47, "regex_match": 47, "setexternalrul": [47, 49, 97], "src": [47, 49, 80, 97, 120, 124, 149, 153, 159], "resourc": [47, 48, 49, 51, 56, 57, 58, 70, 71, 76, 80, 82, 83, 93, 97, 99, 109, 115, 119, 120, 123, 124, 126, 137, 143, 148, 149, 152, 153, 154, 159], "matcher": [47, 97], "txt": [47, 49, 61, 97, 105, 133, 159], "delimit": [47, 76], "outdf": 47, "col": [47, 50, 59, 67, 90, 96, 111, 139], "31": 47, "71": 47, "80": 47, "chunkkeyphraseextract": 48, "keyphras": 48, "kei": [48, 49, 51, 83, 88, 93, 97, 115, 126, 143, 154, 157], "phrase": [48, 81], "compar": 48, "broader": 48, "thei": [48, 80, 99, 124, 153, 157], "belong": 48, "candid": [48, 67], "variou": 48, "wai": 48, "ngramgener": 48, "textmatch": 48, "latter": 48, "topn": [48, 67], "selectmostdiffer": 48, "find": [48, 59, 70, 93, 100], "them": [48, 56, 57, 58, 70, 71, 73, 91, 92, 119, 123, 148, 152], "other": [48, 71, 76, 157], "diverg": 48, "maxim": [48, 71, 90], "margin": 48, "mmr": 48, "conjunct": 48, "aim": 48, "goal": 48, "documentlevelprocess": 48, "particular": [48, 93, 96, 111, 115, 139, 143], "concatenatesent": 48, "ner_tagg": [48, 93], "ner_jsl_slim": 48, "ner_tag": [48, 90, 91, 92, 93, 114, 142], "ner_convert": [48, 51, 67, 71, 88, 93, 118, 146], "key_phrase_extractor": 48, "settopn": 48, "setdocumentlevelprocess": 48, "setdiverg": 48, "ner_chunk_key_phras": 48, "her": [48, 70, 83, 126, 154], "becom": [48, 70], "last": [48, 70, 96], "year": [48, 61, 70, 76, 79, 82, 84, 105, 133], "he": [48, 70], "complain": [48, 70], "swell": [48, 70], "hi": [48, 70, 83, 126, 154], "forearm": [48, 70], "explod": [48, 50, 51, 59, 67, 70, 71, 76, 79, 83, 85, 90, 91, 92, 93, 114, 120, 126, 142, 149, 154], "AS": [48, 51, 70, 71, 83, 126, 154], "key_phras": 48, "documentsimilar": 48, "mmrscore": 48, "gestat": 48, "mellitu": 48, "28": 48, "old": [48, 61, 76, 79, 80, 82, 90, 91, 105, 133], "7391447825527298": 48, "4366776288430703": 48, "7323921930094919": 48, "44348688715422274": 48, "13577881610104517": 48, "085800103824974": 48, "droppunctu": 48, "integ": [48, 61, 105, 133, 157], "interv": 48, "setselectmostdiffer": 48, "constraint": 48, "paramt": 48, "sens": 48, "setconcatenatesent": 48, "averag": [48, 56, 58, 70, 71], "setdroppunctu": 48, "punctuat": 48, "sbert_jsl_medium_uncas": 48, "download": [48, 51, 56, 57, 58, 70, 71, 83, 93, 109, 115, 119, 120, 123, 126, 137, 143, 148, 149, 152, 154, 160, 161], "load": [48, 51, 56, 57, 58, 59, 61, 70, 71, 73, 80, 83, 88, 93, 105, 109, 115, 118, 119, 120, 123, 124, 126, 133, 137, 143, 146, 148, 149, 152, 153, 154], "sent_small_bert_l2_768": [48, 70, 71], "remot": [48, 51, 56, 57, 58, 70, 71, 83, 93, 109, 115, 119, 120, 123, 126, 137, 143, 148, 149, 152, 154], "Will": [48, 51, 56, 57, 58, 70, 71, 83, 93, 109, 115, 119, 120, 123, 126, 137, 143, 148, 149, 152, 154], "repositori": [48, 51, 56, 57, 58, 70, 71, 83, 93, 109, 115, 119, 120, 123, 126, 137, 143, 148, 149, 152, 154], "bertsentenceembed": [48, 70, 71, 96, 97, 111, 139], "restor": [48, 51, 56, 57, 58, 70, 71, 80, 83, 93, 109, 115, 119, 120, 123, 126, 137, 143, 148, 149, 152, 154], "chunksentencesplitt": 49, "documento": 49, "header": [49, 99, 120, 149], "title_regex": 49, "paragraph": 49, "groupbysent": 49, "insertchunk": 49, "defaultent": 49, "setgroupbysent": 49, "assum": [49, 71], "detector": [49, 162], "setinsertchunk": 49, "insert": 49, "setdefaultent": 49, "chunkfiltererapproach": 50, "confidencethreshold": 50, "lower": [50, 51, 62, 68, 80, 85, 88, 106, 124, 134, 153], "past": 50, "histori": 50, "gastroenter": 50, "docassembl": 50, "postagg": [50, 90, 91, 114, 142], "perceptronmodel": [50, 71, 90, 91, 92, 93, 114, 142], "setregexpars": [50, 81], "chunkerfilt": 50, "17": [50, 76, 79], "22": [50, 51, 88, 109, 118, 137, 146], "36": 50, "42": 50, "53": 50, "81": [50, 92], "110": [50, 76, 79], "now": 50, "care": 50, "118": 50, "132": 50, "chunksfilterapproach": 50, "blacklist": [50, 61, 76, 82, 105, 133], "filtervalu": 50, "entitiesconfidenceresourc": 50, "setblacklist": [50, 61, 76, 82], "setfilterent": 50, "setentitiesconfidenceresourc": 50, "chunkfilter": 50, "chunkmapperapproach": [51, 88, 109, 118, 137, 146], "mapper": [51, 88, 109, 118, 137, 146], "jsondictionari": [51, 88, 109, 118, 137, 146], "chunkmappermodel": [51, 88, 109, 118, 137, 146], "label_depend": [51, 52, 88, 95, 109, 118, 137, 146], "mappinmg": [51, 88, 109, 118, 137, 146], "go": [51, 88, 109, 118, 137, 146], "lowercas": [51, 62, 68, 85, 88, 106, 109, 118, 134, 137, 146], "decid": [51, 88, 109, 118, 137, 146], "ner_posology_larg": [51, 71, 88, 118, 146], "nerconverterintern": [51, 71, 82, 88, 118, 146], "chunkermapperapproach": [51, 88, 118, 146], "setdictionari": [51, 59, 88, 118, 146], "home": [51, 88, 118, 127, 146], "mappings2": [51, 88, 118, 146], "setrel": [51, 88, 118, 146], "action": [51, 88, 109, 118, 137, 146], "sampledata": [51, 71, 88, 118, 146], "warfarina": [51, 88, 109, 118, 137, 146], "lusa": [51, 88, 109, 118, 137, 146], "amlodipin": [51, 88, 109, 118, 137, 146], "mg": [51, 71, 88, 109, 118, 137, 146], "35": [51, 88, 92, 109, 118, 137, 146], "analges": [51, 88, 109, 118, 137, 146], "56995": [51, 88, 109, 118, 137, 146], "all_rel": [51, 88, 109, 118, 137, 146], "antipyret": [51, 88, 109, 118, 137, 146], "41": [51, 88, 92, 109, 118, 137, 146], "9989": [51, 88, 109, 118, 137, 146], "55": [51, 88, 109, 118, 137, 146], "56": [51, 88, 109, 118, 137, 146], "9123": [51, 88, 109, 118, 137, 146], "allowmultitokenchunk": 51, "multivaluesrel": 51, "bow": [51, 67], "setlowercas": [51, 68, 85], "lc": [51, 88], "setallowmultitokenchunk": 51, "mc": 51, "skyp": 51, "multitoken": 51, "send": 51, "multi": [51, 56, 57, 58, 119, 120, 123, 148, 149, 152], "setmultivaluesrel": 51, "drug_chunk_embed": [51, 71], "drug_chunk": [51, 71], "drug_embed": [51, 71], "cach": [51, 71, 76, 96, 99, 111, 139, 160], "chunkmapperfilter": 52, "kind": 52, "setreturncriteria": 52, "fail": [52, 62, 68, 99, 106, 134], "success": 52, "chunkmapperfilterermodel": 52, "returncriteria": 52, "rc": 52, "assertion_filter": [53, 75], "chunk_convert": [53, 75], "chunk_key_phrase_extract": [53, 75], "chunk_sentence_splitt": [53, 75], "chunker_filter": [53, 75], "chunkmapp": [53, 75, 108, 110, 136, 138], "chunkmapper_filter": [53, 75], "documentlogregclassifierapproach": 54, "classifi": [54, 73, 91, 114, 120, 142, 149], "labelcol": [54, 96, 111, 139], "maximum": [54, 80, 91, 92, 98, 120, 124, 149, 153], "tol": 54, "converg": 54, "toler": 54, "fitintercept": 54, "intercept": 54, "vectorizationmodelpath": 54, "been": 54, "classificationmodelpath": 54, "could": [54, 59, 67, 120, 149], "like": [54, 59, 61, 105, 120, 133, 149], "stopwords_clean": 54, "stopwordsclean": 54, "cleantoken": 54, "stemmer": 54, "stem": [54, 90, 91, 92, 114, 142], "clf_model": [54, 73], "settol": 54, "dist": [54, 96], "setfitintercept": 54, "setvectorizationmodelpath": 54, "setclassificationmodelpath": 54, "setlabel": 54, "documentlogregclassifiermodel": 54, "mergechunk": 54, "vectorizationmodel": 54, "classificationmodel": 54, "setmergechunk": 54, "setvectorizationmodel": 54, "pipelinemodel": [54, 80, 120, 124, 149, 153, 155], "setclassificationmodel": 54, "document_log_classifi": [55, 75], "medical_bert_for_sequence_classif": [55, 75], "medical_bert_for_token_classifi": [55, 75], "medical_distilbert_for_sequence_classif": [55, 75], "medicalbertforsequenceclassif": [56, 58, 93, 115, 119, 143, 148], "medicalbertfortokenclassifi": [56, 57, 58, 123, 152], "head": [56, 57, 58, 80, 119, 123, 124, 148, 152, 153], "pool": [56, 58, 119, 148], "companion": [56, 57, 58, 80, 102, 119, 120, 123, 124, 148, 149, 152, 153, 159], "huggingfac": [56, 57, 58, 119, 123, 148, 152], "casesensit": [56, 57, 58, 59, 119, 123, 148, 152], "maxsentencelength": [56, 57, 58, 119, 123, 148, 152], "tokenclassifi": [56, 57, 119, 123, 148, 152], "felt": [56, 58, 119, 148], "drowsi": [56, 58, 119, 148], "had": [56, 58, 67, 119, 148], "blur": [56, 58, 119, 148], "vision": [56, 58, 119, 148], "aspirin": [56, 58, 85, 119, 148], "coalescesent": [56, 58], "setmaxsentencelength": [56, 57, 58, 97], "getclass": [56, 57, 58, 83, 90, 91], "setcoalescesent": [56, 58], "inputcol": [56, 58, 98, 99, 101, 120, 149], "probabl": [56, 58], "due": [56, 58], "limit": [56, 58, 67], "almost": [56, 58], "512": [56, 58], "help": [56, 58, 61, 105, 133, 157], "loadsavedmodel": [56, 57, 58, 80, 91, 93, 114, 115, 119, 123, 124, 142, 143, 148, 152, 153], "spark_sess": [56, 57, 58, 80, 91, 93, 114, 115, 119, 123, 124, 142, 143, 148, 152, 153], "loadsavedmodelopensourc": [56, 57, 58, 119, 123, 148, 152], "bertfortokenclassifierpath": [56, 57, 58, 119, 123, 148, 152], "tfmodelpath": [56, 57, 58, 119, 123, 148, 152], "bertfortokenclassifi": [56, 57, 58, 119, 123, 148, 152], "taht": [56, 57, 58, 119, 123, 148, 152], "bert_sequence_classifier_ad": [56, 119, 148], "bert_token_classifier_ner_bionlp": [57, 123, 152], "erba": [57, 123, 152], "ir": [57, 123, 152], "myb": [57, 123, 152], "viru": [57, 123, 152], "erythroid": [57, 123, 152], "infect": [57, 123, 152], "bone": [57, 123, 152], "marrow": [57, 123, 152], "blastoderm": [57, 123, 152], "cultur": [57, 123, 152], "tissue_structur": [57, 123, 152], "bert_base_token_classifier_conll03": [57, 123, 152], "medicaldistilbertforsequenceclassif": 58, "distilbert": 58, "sequenceclassifi": 58, "distilbertforsequenceclassif": 58, "destilbertfortokenclassifierpath": 58, "distilbert_sequence_classifier_ad": 58, "contextualparserapproach": 59, "setjsonpath": 59, "along": 59, "addition": [59, 80, 124, 153], "unifi": 59, "represent": [59, 70, 82], "jsonpath": 59, "prefixandsuffixmatch": 59, "prefix": [59, 67, 82], "suffix": 59, "hit": 59, "tsv": 59, "parser": 59, "liver": 59, "metastas": 59, "pt1bn0m0": 59, "t5": 59, "primari": 59, "colon": 59, "contextualpars": [59, 76], "regex_token": 59, "39": 59, "confidencevalu": 59, "00": 59, "49": 59, "148": 59, "156": 59, "ct4bcn2m1": 59, "189": 59, "194": 59, "n3m1": 59, "316": 59, "323": 59, "optionalcontextrul": 59, "shortestcontextmatch": 59, "completecontextmatch": 59, "setprefixandsuffixmatch": 59, "setoptionalcontextrul": 59, "regardless": 59, "setshortestcontextmatch": 59, "stop": [59, 80, 82, 156], "found": [59, 62, 68, 106, 134], "setcompletecontextmatch": 59, "exact": 59, "boundari": 59, "contextualparsermodel": 59, "mycontextualparsermodel": 59, "contextual_pars": [60, 75], "deidentificationmodel": [61, 105, 133], "obfusc": [61, 105, 133, 157], "mask": [61, 105, 133], "person": [61, 67, 105, 133, 157], "These": [61, 93, 105, 115, 133, 143], "setregexpatternsdictionari": [61, 105, 133], "line": [61, 105, 133, 162], "regexpatternsdictionari": [61, 105, 133], "ictionari": [61, 105, 133], "some": [61, 71, 80, 105, 124, 133, 153], "protect": [61, 105, 133], "anonim": [61, 105, 133], "obfuscated": [61, 105, 133], "dateformat": [61, 105, 133, 157], "obfuscatereffil": [61, 105, 133, 157], "reffileformat": [61, 105, 133], "refsep": [61, 105, 133], "sep": [61, 105, 133, 159], "charact": [61, 67, 85, 105, 133], "reffil": [61, 105, 133], "datetag": [61, 105, 133], "dai": [61, 84, 105, 133, 157], "displac": [61, 105, 133, 157], "60": [61, 105, 133, 157], "datetoyear": [61, 105, 133], "minyear": [61, 105, 133], "minimum": [61, 80, 105, 124, 133, 153], "automat": [61, 93, 105, 115, 133, 143], "pars": [61, 105, 133], "consistentobfusc": [61, 105, 133], "levenshtein": [61, 67, 105, 133], "distanc": [61, 67, 71, 90, 91, 92, 96, 105, 111, 133, 139], "sameentitythreshold": [61, 105, 133], "consid": [61, 67, 71, 91, 92, 96, 105, 133], "appear": [61, 70, 105, 133], "9": [61, 90, 105, 133], "obfuscaterefsourc": [61, 105, 133, 157], "doesnt": [61, 105, 133], "tha": [61, 105, 133], "obfuscatorreffil": [61, 105, 133], "faker": [61, 105, 133], "randomli": [61, 105, 133, 157], "regexoverrid": [61, 105, 133], "priorit": [61, 105, 133], "seed": [61, 62, 80, 105, 120, 124, 133, 149, 153, 157], "With": [61, 105, 133], "repli": [61, 105, 133], "ouptut": [61, 105, 133], "ignoreregex": [61, 105, 133], "israndomdatedisplac": [61, 105, 133], "deidentificationparam": [61, 105, 133], "mappingscolumn": [61, 105, 133], "fake": [61, 105, 133], "returnentitymap": [61, 105, 133], "ssn": [61, 105, 133], "passport": [61, 105, 133], "dln": [61, 105, 133], "npi": [61, 105, 133], "c_card": [61, 105, 133], "iban": [61, 105, 133], "dea": [61, 105, 133], "maskingpolici": [61, 105, 133], "polici": [61, 85, 105, 133], "same_length_char": [61, 105, 133], "compos": [61, 105, 133], "asterisk": [61, 105, 133], "surround": [61, 70, 105, 133], "squar": [61, 105, 133], "bracket": [61, 105, 133], "total": [61, 105, 133], "smith": [61, 105, 133], "char": [61, 80, 105, 124, 133, 153], "jo": [61, 105, 133], "fixed_length_char": [61, 105, 133], "fix": [61, 105, 133], "setuseabbrevi": [61, 105, 133], "clinical_sensitive_ent": [61, 105, 133], "ner_deid_enrich": [61, 105, 133], "ner_con": [61, 105, 133], "dei": [61, 105, 133], "dic_regex_patterns_main_categori": [61, 105, 133], "setobfuscatereffil": [61, 105, 133], "obfuscate_fixed_ent": [61, 105, 133], "setreffileformat": [61, 105, 133], "setrefsep": [61, 105, 133], "setmod": [61, 105, 133], "setdateformat": [61, 105, 133], "mm": [61, 84, 99, 105, 133, 157], "dd": [61, 84, 99, 105, 133, 157], "yy": [61, 105, 133], "yyyi": [61, 84, 99, 105, 133, 157], "setobfuscated": [61, 105, 133], "setdatetag": [61, 105, 133], "setdai": [61, 105, 133], "setobfuscaterefsourc": [61, 105, 133], "7194334": [61, 105, 133], "93": [61, 105, 133], "pcp": [61, 105, 133], "oliveira": [61, 105, 133], "record": [61, 105, 133, 157], "2079": [61, 105, 133], "09": [61, 105, 133], "01010101": [61, 105, 133], "18": [61, 105, 133], "dr": [61, 105, 133], "gregori": [61, 105, 133], "hous": [61, 105, 133], "14": [61, 105, 133], "fixedmasklength": [61, 105, 133], "useshifdai": 61, "region": 61, "getblacklist": 61, "setlanguag": 61, "english": 61, "spanish": 61, "wher": 61, "m": [61, 120, 149, 157], "setmaskingpolici": 61, "setfixedmasklength": 61, "f": [61, 79, 99, 101, 127], "auxiliari": [61, 96, 111, 139], "resolv": [61, 95, 96, 111, 139], "setdatetoyear": 61, "setminyear": 61, "setconsistentobfusc": 61, "setsameentitythreshold": 61, "setregexoverrid": 61, "setignoreregex": 61, "setse": [61, 62], "setisrandomdatedisplac": 61, "setmappingscolumn": 61, "setreturnentitymap": 61, "setuseshifdai": 61, "shift": 61, "setregion": 61, "countri": [61, 157], "ountri": 61, "coud": 61, "regexent": [61, 105, 133], "keep": [61, 73, 96, 105, 111, 133, 139], "regexpatterndictionari": [61, 105, 133], "deidentify_larg": [61, 105, 133], "getregexent": 61, "doc2chunk": [62, 68, 106, 134], "documenthashcod": 62, "chunkcol": [62, 68, 106, 134], "within": [62, 68, 106, 134], "stringtyp": [62, 68, 106, 134], "arraytyp": [62, 68, 106, 134], "setisarrai": [62, 68, 106, 134], "startcolbytokenindex": [62, 68, 106, 134], "prepend": [62, 68, 106, 134], "whitespac": [62, 68, 106, 134], "isarrai": [62, 68, 106, 134], "failonmiss": [62, 68, 106, 134], "job": [62, 68, 106, 134], "chunk2doc": [62, 68, 97, 106, 134], "chunkassembl": [62, 68, 106, 134], "open": [62, 68, 106, 134], "advanc": [62, 68, 106, 134], "natur": [62, 68, 93, 106, 115, 134, 143], "annotatortyp": [62, 68, 106, 134], "patientidcolumn": 62, "dateshiftcolumn": 62, "newdateshift": 62, "rangedai": 62, "setparam": [62, 68, 99], "setpatientidcolumn": 62, "setdateshiftcolumn": 62, "setnewdateshift": 62, "setrangedai": 62, "miss": [62, 68], "deidentif": [63, 75, 107, 108, 135, 136, 157], "doccument_hashcod": [63, 75], "reidentif": [63, 75], "py": [64, 65, 69, 99], "scala": [64, 65, 69, 99], "inherit": [64, 65, 69], "mix": [64, 65, 69], "ins": [64, 65, 69], "uid": [64, 65, 69, 155], "redeideintif": 64, "ner_disambigu": [66, 75], "nerdisambigu": 67, "interest": 67, "compani": [67, 157], "uniqu": 67, "kb": 67, "ne": 67, "mention": 67, "surfac": 67, "instanti": [67, 80, 120, 124, 149, 153], "embeddingtypeparam": 67, "numfirstchar": 67, "tokensearch": 67, "narrowwithapproximatematch": 67, "narrow": 67, "levenstein": 67, "levenshteindistancethresholdparam": 67, "nearmatchinggapparam": 67, "trim": 67, "len": 67, "nearmatchinggap": 67, "predictionslimit": 67, "amount": 67, "s3knowledgebasenam": 67, "s3": 67, "contest": 67, "donald": 67, "trump": 67, "who": 67, "later": 67, "defeat": 67, "christina": 67, "aguilera": 67, "sentenceembed": [67, 120, 149], "nerdlmodel": [67, 70, 80, 124, 153], "sets3knowledgebasenam": 67, "setnumfirstchar": 67, "nlppipelin": 67, "wikipedia": 67, "curid": 67, "4848272": 67, "31698421": 67, "55907961": 67, "144171": 67, "6636454": 67, "setembeddingtyp": 67, "settokensearch": 67, "setnarrowwithapproximatematch": 67, "setlevenshteindistancethresholdparam": 67, "setnearmatchinggapparam": 67, "setpredictionlimit": 67, "nerdisambiguatormodel": 67, "disambiguator_p": 67, "doc2chunkintern": 68, "setstartcolbytokenindex": 68, "setfailonmiss": 68, "averageembed": [69, 70], "bertsentencechunkembed": 70, "account": 70, "numer": [70, 99], "chunkweight": 70, "comparison": 70, "prerequisit": [70, 80, 124, 153], "medicalnerdlmodel": [70, 80, 124, 153], "sbluebert_base_uncased_mli": 70, "sentence_chunk_embed": 70, "31995273": 70, "04710883": 70, "28973156": 70, "1294758": 70, "12481072": 70, "027161136": 70, "24613449": 70, "0949309": 70, "1825444": 70, "2252143": 70, "45139068": 70, "12400375": 70, "0075617577": 70, "90806055": 70, "12871636": 70, "setchunkweight": 70, "shortcut": [70, 83, 126, 154], "entitychunkembed": 71, "targetent": [71, 130], "entityweight": [71, 130], "maxsyntacticdist": [71, 90, 92], "syntact": [71, 90, 91, 92], "pos_clin": [71, 90, 91, 92, 93, 114, 142], "dependency_pars": [71, 92, 93], "dependencyparsermodel": [71, 90, 91, 92, 93, 114, 142], "dependency_conllu": [71, 90, 91, 92, 93, 114, 142], "sbiobert_base_cased_mli": 71, "setmaxsyntacticdist": [71, 90, 91, 92, 93, 114, 142], "settargetent": 71, "setentityweight": 71, "parient": 71, "metformin": 71, "125": 71, "coumadin": 71, "pill": 71, "paracetamol": [71, 93], "sparkcontextfortest": 71, "267413": 71, "07614058": 71, "5620966": 71, "83838946": 71, "8911504": 71, "22319649": 71, "07094894": 71, "6885556": 71, "79176235": 71, "82672405": 71, "10939768": 71, "29242": 71, "3574444": 71, "3981813": 71, "79609615": 71, "weigh": 71, "notat": 71, "target_ent": 71, "related_ent": 71, "insensit": 71, "related1": 71, "related2": 71, "average_embed": [72, 75], "bert_sentence_embed": [72, 75], "entity_chunk_embed": [72, 75], "feature_vector": [73, 99], "featuresassembl": [73, 99], "labelcolumn": [73, 80, 98, 120, 124, 149, 153], "epochsn": 73, "proce": 73, "dropou": 73, "lay": 73, "validaiton": 73, "modelfil": 73, "fiximbal": 73, "indic": [73, 76], "whenther": 73, "balanc": 73, "trainig": 73, "featuresc": 73, "minmax": 73, "feature_1": 73, "feature_2": 73, "feature_n": 73, "graph_fil": [73, 90], "purpos": 73, "label_column": 73, "drouptup": 73, "validation_split": 73, "mode_fil": 73, "fix_imbal": 73, "feature_sc": 73, "output_logs_path": 73, "deid": [75, 108, 116, 129, 136, 144], "disambigu": [75, 129], "chunker_merg": [75, 77], "iob_tagg": [75, 78], "medical_n": [75, 78], "ner_converter_intern": [75, 78], "zero_shot_n": [75, 78, 122, 125, 150, 151], "date_norm": [75, 86], "drug_norm": [75, 86], "qa": [75, 129], "qa_ner_gener": [75, 87, 116, 117, 144, 145], "re": [75, 129], "relation_extraction_dl": [75, 89, 112, 113, 140, 141], "relation_ner_chunk_filt": [75, 89], "zero_shot_relation_extract": [75, 89, 112, 113, 140, 141], "resolut": [75, 108, 116, 129, 136, 144], "resolver_merg": [75, 94], "sentence_entity_resolv": [75, 94, 108, 110, 136, 138], "annotation_merg": [75, 129], "doc2_chunk_intern": [75, 129], "router": [75, 129], "tf_graph_build": [75, 129], "finance_classifier_dl": [75, 116, 121], "financ": [75, 129], "legal_classifier_dl": [75, 144, 147], "legal": [75, 129], "chunkmergeapproach": 76, "merger": 76, "made": 76, "accord": 76, "certain": [76, 81], "decis": 76, "highest": [76, 80], "kept": 76, "setreplacedictresourc": [76, 82], "mergeoverlap": 76, "overlap": 76, "falsepositivesresourc": 76, "posit": [76, 82], "replacedictresourc": [76, 82], "chunkpreced": 76, "preced": 76, "proccess": [76, 82], "63": [76, 79, 82], "man": [76, 79, 82], "hospit": [76, 79, 82, 157], "emb": [76, 79, 82], "ner_jsl": [76, 79, 82], "jsl_ner": 76, "jsl_ner_chunk": 76, "ner_bionlp": 76, "bionlp_ner": 76, "bionlp_ner_chunk": 76, "merged_chunk": 76, "19": [76, 79], "72": [76, 79], "98": [76, 79], "107": [76, 79], "cellul": [76, 79], "diagnosi": [76, 79], "119": [76, 79], "pneumonia": [76, 79], "setmergeoverlap": 76, "setfalsepositivesresourc": 76, "setchunkpreced": 76, "chunkmergemodel": [76, 82], "chunkmergeraproach": 76, "falseposit": 76, "replacedict": [76, 82], "iobtagg": 79, "iob": [79, 80, 82, 124, 153, 159], "bioe": 79, "iobtaggermodel": 79, "setschem": 79, "bilstm": [80, 124, 153], "art": [80, 120, 124, 149, 153], "2003": [80, 124, 153], "chosen": [80, 124, 153], "bertembed": [80, 96, 111, 124, 139, 153], "usag": [80, 120, 124, 149, 153], "minepoch": [80, 124, 153], "maxepoch": [80, 120, 124, 149, 153], "randomse": [80, 120, 124, 149, 153], "decai": [80, 124, 153], "coeffici": [80, 120, 124, 149, 153], "rage": [80, 124, 153], "005": [80, 120, 124, 149, 153], "usecontrib": [80, 124, 153], "Not": [80, 124, 153], "might": [80, 124, 153], "slightli": [80, 124, 153], "includeallconfidencescor": [80, 124, 153], "stdout": [80, 120, 124, 149, 153], "enablememoryoptim": [80, 124, 153], "slow": [80, 124, 153], "down": [80, 124, 153], "nerdlapproach": [80, 98, 124, 153], "trainingdata": [80, 124, 153], "readdataset": [80, 124, 153, 159], "conll2003": [80, 124, 153], "eng": [80, 124, 153, 159], "logprefix": 80, "usebestmodel": 80, "pretrainedmodelpath": [80, 96, 111, 139], "overrideexistingtag": 80, "tagsmap": 80, "earlystoppingcriterion": 80, "earlystoppingpati": 80, "ff": 80, "setusecontrib": 80, "setlr": [80, 120, 149], "setpo": 80, "setincludeallconfidencescor": 80, "setusebestmodel": 80, "metric": 80, "monitor": 80, "macro": 80, "f1": 80, "precend": 80, "across": 80, "setlogprefix": 80, "setpretrainedmodelpath": [80, 96], "point": [80, 96, 111, 139], "setoverrideexistingtag": 80, "overrid": [80, 96, 111, 139], "settagsmap": 80, "setearlystoppingcriterion": 80, "criterion": 80, "earli": 80, "setearlystoppingpati": 80, "patienc": 80, "termin": 80, "wordembed": [80, 124, 153], "glove_100d": [80, 124, 153], "inferencebatchs": [80, 124, 153], "labelcas": [80, 124, 153], "upper": [80, 90, 91, 92, 114, 124, 142, 153], "offici": [80, 124, 153], "ekeu": [80, 124, 153], "baghdad": [80, 124, 153], "trainingclassdistribut": 80, "setinferencebatchs": 80, "setlabelcas": 80, "gettrainingclassdistribut": 80, "ner_model_path": [80, 124, 153], "nerchunk": [81, 90, 91, 114, 142], "neighbor": 81, "issu": 81, "dt": 81, "jj": 81, "ner_radiologi": 81, "imagingfind": 81, "bodypart": 81, "regexpars": 81, "iob2": 82, "friendli": 82, "associ": 82, "preserveposit": 82, "preserv": 82, "greedymod": 82, "contigu": 82, "ignorestopword": 82, "replacelabel": 82, "setpreserveposit": 82, "setgreedymod": 82, "setthreshold": [82, 96, 111, 139], "setignorestopword": 82, "setreplacelabel": 82, "nerconverterinternalmodel": 82, "zeroshotnermodel": [83, 126, 154], "shot": [83, 93, 115, 126, 143, 154], "robertaforquestionansw": [83, 126, 154], "entitydefinit": [83, 126, 154], "definit": [83, 93, 115, 126, 143, 154], "question": [83, 126, 154], "citi": [83, 97, 126, 154, 157], "town": [83, 126, 154], "predictionthreshold": [83, 90, 91, 93, 114, 115, 126, 142, 143, 154], "01f": [83, 126, 154], "ignoreent": [83, 126, 154], "discard": [83, 126, 154], "setentitydefinit": [83, 126, 154], "clara": [83, 126, 154], "live": [83, 126, 154, 157], "york": [83, 126, 154], "hellen": [83, 126, 154], "pari": [83, 126, 154], "5328949": [83, 126, 154], "9360068": [83, 126, 154], "83294415": [83, 126, 154], "45366877": [83, 126, 154], "setpredictionthreshold": [83, 90, 91, 114, 142], "zero_shot_ner_roberta": [83, 126, 154], "roberta_base_qa_squad2": [83, 126, 154], "datenorm": 84, "els": 84, "anchordateyear": 84, "anchor": 84, "tomorrow": 84, "2021": 84, "anchordatemonth": 84, "month": 84, "januari": 84, "anchordatedai": 84, "chunksdf": 84, "aa": 84, "map_annotations_col": 84, "lambda": 84, "chunk_dat": 84, "setanchordateyear": 84, "2000": 84, "setanchordatemonth": 84, "setanchordatedai": 84, "fri": 84, "21": 84, "nov": 84, "1997": 84, "week": 84, "08": 84, "02": 84, "mondai": [84, 120, 149], "todai": 84, "outputdateformat": 84, "setoutputdateformat": 84, "drugnorm": 85, "raw": 85, "scrape": 85, "web": 85, "xml": 85, "dirti": 85, "sodium": 85, "chlorid": 85, "potassium": 85, "13bag": 85, "interferon": 85, "alfa": 85, "2b": 85, "million": 85, "injec": 85, "meq": 85, "oral": 85, "sol": 85, "document_norm": 85, "trainingpipelin": 85, "normalized_text": [85, 96, 111, 139], "bag": 85, "10000000": 85, "unt": 85, "inject": 85, "solut": 85, "setpolici": 85, "nerquestiongener": 88, "questionpronoun": 88, "strategytyp": 88, "questionmark": 88, "entities1": 88, "entities2": 88, "setquestionmark": 88, "setstrategytyp": 88, "setentities1": 88, "e1": 88, "setentities2": 88, "e2": 88, "setquestionpronoun": 88, "relationextractionmodel": [90, 91, 114, 142], "fromentitybegincol": 90, "fromentityendcol": 90, "fromentitylabelcol": 90, "toentitybegincol": 90, "toentityendcol": 90, "toentitylabelcol": 90, "relationdirectioncol": 90, "relatio": 90, "embedd": [90, 91, 114, 142], "postag": [90, 91, 114, 142], "ner_events_clin": [90, 91, 114, 142], "depencypars": [90, 91, 114, 142], "relations_t": 90, "target_rel": 90, "05": 90, "from_begin": 90, "from_end": 90, "from_label": 90, "to_begin": 90, "to_end": 90, "to_label": 90, "traindata": [90, 91, 114, 142], "customlabel": [90, 91, 130], "begin_col": 90, "end_col": 90, "label_col": [90, 102], "setcustomlabel": [90, 91], "setrelationdirectioncol": 90, "relationpair": [90, 91, 92, 114, 142], "biomark": 90, "relativedai": 90, "relationpairscasesensit": [90, 92], "external_body_part_or_region": [90, 91, 92, 114, 142], "internal_organ_or_compon": [90, 91, 92, 114, 142], "re_model": [90, 91, 93, 114, 142], "re_bodypart_direct": 90, "setrelationpair": [90, 91, 92, 93, 114, 142], "mri": [90, 91, 92, 93, 114, 142], "demonstr": [90, 91, 92, 114, 142], "infarct": [90, 91, 92, 114, 142], "brain": [90, 91, 92, 114, 142], "cerebellum": [90, 91, 92, 114, 142], "basil": [90, 91, 92, 114, 142], "ganglia": [90, 91, 92, 114, 142], "chunk1": [90, 91, 114, 142], "chunk2": [90, 91, 114, 142], "setrelationpairscasesensit": [90, 92], "posologyremodel": 90, "relationextractiondlmodel": [91, 92, 114, 142], "contrast": [91, 114, 142], "re_ner_chunk_filt": [91, 92, 93, 114, 142], "renerchunksfilt": [91, 92, 93, 114, 115, 142, 143], "re_ner_chunk": [91, 92, 93, 114, 142], "redl_bodypart_direction_biobert": [91, 114, 142], "further": 92, "especi": 92, "doclevelrel": 92, "words_embedd": [92, 93], "pos_tagg": [92, 93], "clinical_ner_tagg": 92, "jsl_ner_wip_greedy_clin": 92, "trained_pipelin": 92, "cre": 92, "re_chunk": 92, "paired_to": 92, "59": 92, "setdoclevelrel": [92, 93], "zeroshotrelationextractionmodel": [93, 115, 143], "binari": [93, 115, 143], "util": [93, 115, 129, 143, 157], "nli": [93, 115, 143], "statement": [93, 115, 143], "regard": [93, 115, 143], "relationship": [93, 115, 143], "append": [93, 115, 143], "relationalcategori": [93, 115, 130, 143], "hypothesi": [93, 115, 143], "templat": [93, 115, 143], "cure": [93, 115, 143], "problem": [93, 115, 143], "5f": [93, 115, 143], "multilabel": [93, 115, 143], "categor": [93, 115, 143], "spark_sbert_zero_shot": 93, "setrelationalcategori": 93, "reveal": [93, 115, 143], "setmultilabel": 93, "allevi": 93, "headach": 93, "sick": 93, "cancer": 93, "9760039": [93, 115, 143], "98819494": [93, 115, 143], "9929625": [93, 115, 143], "resolvermerg": 95, "enit": 95, "sentenceresolverparam": 96, "interfac": 96, "distancefunct": 96, "wmd": 96, "euclidean": 96, "cosin": [96, 111, 139], "neighbour": 96, "knn": 96, "queri": 96, "confidencefunct": 96, "invers": 96, "missasempti": 96, "unmatch": 96, "setdistancefunct": [96, 111, 139], "setneighbour": [96, 111, 139], "thre": 96, "setconfidencefunct": 96, "setmissasempti": 96, "sentenceentityresolverapproach": [96, 111, 139], "thiu": [96, 111, 139], "sentenceentityresolvermodel": [96, 111, 139], "ontologi": [96, 111, 139], "curat": [96, 111, 139], "rxnorm": [96, 111, 139], "snome": [96, 111, 139], "normalizedcol": [96, 111, 139], "overrideexistingcod": [96, 111, 139], "returncosinedist": [96, 111, 139], "aux_label_col": [96, 111, 139], "useauxlabel": [96, 111, 139], "auxlabel": [96, 111, 139], "dropcodeslist": [96, 111, 139], "omit": [96, 111, 139], "sent_biobert_pubmed_base_cas": [96, 111, 139], "snomedtrainingpipelin": [96, 111, 139], "snomedtrainingmodel": [96, 111, 139], "snomeddata": [96, 111, 139], "bertextractor": [96, 111, 139], "bert_embed": [96, 111, 139], "setnormalizedcol": [96, 111, 139], "snomed_cod": [96, 111, 139], "euclidian": [96, 111, 139], "snomedmodel": [96, 111, 139], "setuseauxlabel": 96, "setauxlabelcol": 96, "setextractcosinedist": 96, "setoverrideexistingcod": 96, "setdropcodeslist": 96, "searchtre": [96, 111, 139], "tree": [96, 111, 139], "setsearchtre": 96, "filterfieldsel": 97, "metadatafield": 97, "rules2": 97, "setstrategi": 97, "match_al": 97, "doc_chunk": 97, "sent_small_bert_l2_128": 97, "router_name_embed": 97, "setmetadatafield": 97, "setfilterfieldsel": 97, "names_embed": 97, "router_city_embed": 97, "cities_embed": 97, "router_nam": 97, "names_chunk": 97, "tfgraphbuildermodel": 98, "estim": 98, "modelnam": 98, "hiddenunitsnumb": 98, "hiddenlay": 98, "maxsequencelength": 98, "hiddenact": 98, "hiddenactl2": 98, "hiddenweightsl2": 98, "batchnorm": 98, "ismed": 98, "userelationdirect": 98, "sethiddenact": 98, "gethiddenact": 98, "sethiddenactl2": 98, "l2": 98, "gethiddenactl2": 98, "sethiddenweightsl2": 98, "gethiddenweightsl2": 98, "setbatchnorm": 98, "getbatchnorm": 98, "setismed": 98, "medic": [98, 157, 161], "medicalneraprroach": 98, "getismed": 98, "sethiddenlay": 98, "gethiddenlay": 98, "hiudden": 98, "setmaxsequencelength": 98, "getmaxsequencelength": 98, "sethiddenunitsnumb": 98, "gethiddenunitsnumb": 98, "setuserelationdirect": 98, "getuserelationdirect": 98, "setmodelnam": 98, "getmodelnam": 98, "getlabelcolumn": 98, "getinputcol": 98, "getgraphfold": 98, "greaph": 98, "getgraphfil": 98, "anyth": 99, "cast": 99, "tri": 99, "timestampformat": 99, "hh": 99, "ss": 99, "zz": 99, "test_jsl": 99, "relfeatur": 99, "withcolumn": 99, "array_column": 99, "words_in_ent1": 99, "words_in_ent2": 99, "features_asm1": 99, "words_between": 99, "features_t": 99, "__data": 99, "ensur": 99, "_java_obj": 99, "outputcol": [99, 101], "findvers": 100, "privat": 100, "showvers": 100, "print": 100, "customtransform": 101, "anoth": 101, "norvigspellevalu": 102, "test_fil": 102, "ground_truth_fil": 102, "computeaccuracyannot": 102, "train_fil": 102, "computeaccuracymodel": 102, "symspellevalu": 102, "nerdlevalu": 102, "tag_level": 102, "nerdlmetr": 102, "full_chunk": 102, "computemetricsfromdf": 102, "prediction_col": 102, "drop_o": 102, "case_sensit": [102, 159], "nercrfevalu": 102, "posevalu": 102, "financedocumenthashcod": 106, "document_hashcod": [107, 108, 135, 136], "chunk_classif": [116, 129, 144], "seq_gener": [116, 129, 144], "sequence_classif": [116, 129, 144], "finance_bert_for_sequence_classif": [116, 121], "token_classif": [116, 129, 144], "financenerquestiongener": 118, "sequence_gener": [118, 146], "financebertforsequenceclassif": 119, "financebertfortokenclassif": [119, 123], "financeclassifierdlapproach": 120, "classifierdl": [120, 149], "univers": [120, 149], "dnn": [120, 149], "up": [120, 149], "classifierdlmodel": [120, 149], "multiclassifierdlapproach": [120, 149], "sentimentdlapproach": [120, 149], "item": [120, 127, 149, 162], "doubl": [120, 149], "universalsentenceencod": [120, 149], "movi": [120, 149], "wach": [120, 149], "ever": [120, 149], "opinion": [120, 149], "win": [120, 149], "award": [120, 149], "terribl": [120, 149], "bad": [120, 149], "realli": [120, 149], "trane": [120, 149], "smallcorpu": [120, 149], "useembed": [120, 149], "docclassifi": [120, 149], "classifierdlapproach": [120, 149], "5e": [120, 149], "financeclassifierdlmodel": 120, "financeclassifierdl": 120, "classifierdl_use_trec6": [120, 149], "trec": [120, 149], "multiclassifierdlmodel": [120, 149], "sentimentdlmodel": [120, 149], "sarcasmdl": [120, 149], "classifierdl_use_sarcasm": [120, 149], "sarcasm": [120, 149], "readi": [120, 149], "love": [120, 149], "wake": [120, 149], "am": [120, 149], "arrays_zip": [120, 149], "out": [120, 149], "finance_bert_for_token_classifi": [122, 125], "finance_n": [122, 125], "financebertfortokenclassifi": 123, "financenerapproach": 124, "financenermodel": 124, "get_bucket": 127, "aws_access_key_id": 127, "aws_secret_access_kei": 127, "read_metadata": 127, "bucket": 127, "metadata_path": 127, "extract_model": 127, "retrieve_spark_vers": 127, "get_kei": 127, "get_possibles_model": 127, "metadata_dict": 127, "get_millisecond": 127, "download_and_extract_model": 127, "cache_fold": [127, 160], "freeze_model": 127, "models_fil": 127, "cache_pretrain": 127, "profil": 128, "code_arrai": 128, "sex": 128, "elig": 128, "cna": 128, "orec": 128, "medicaid": 128, "profilev24y17": 128, "profilev24y18": 128, "profilev24y19": 128, "profilev24y20": 128, "profilev24y21": 128, "profilev24y22": 128, "profilev23y18": 128, "profilev23y19": 128, "profilev23": 128, "profilev22y17": 128, "profilev22y18": 128, "profilev22y19": 128, "profilev22y20": 128, "profilev22y21": 128, "profilev22y22": 128, "profilev22": 128, "alab_util": [129, 163], "alab": [129, 162], "custom_transform": 129, "freez": 129, "modeltrac": 129, "structured_deidentif": 129, "text_to_documents_column": 129, "updatemodel": 129, "transformer_seq_classif": 129, "version_regex": 129, "size_regex": 129, "m1": 129, "public": 129, "get_credenti": 129, "pub_vers": 129, "library_set": 129, "legaldocumenthashcod": 134, "legal_bert_for_sequence_classif": [144, 147], "legalnerquestiongener": 146, "legalbertforsequenceclassif": 148, "legalbertfortokenclassif": [148, 152], "legalclassifierdlapproach": 149, "legalclassifierdlmodel": 149, "legalclassifierdl": 149, "legal_bert_for_token_classifi": [150, 151], "legal_n": [150, 151], "legalbertfortokenclassifi": 152, "legalnerapproach": 153, "legalnermodel": 153, "adduidcol": 155, "timestamp": 155, "printprogress": 156, "internalresourcedownload": 156, "downloadmodel": 156, "reader": [156, 159], "j_dwn": 156, "internalspythonresourcedownload": 156, "showprivatemodel": 156, "showprivatepipelin": 156, "showuncategorizedresourc": 156, "showavailableannot": 156, "returnprivatemodel": 156, "returnprivatepipelin": 156, "tabular": 157, "structureddeidentif": 157, "columnsse": 157, "userandomdatedisplac": 157, "street": 157, "zip": 157, "fax": 157, "internet": 157, "profess": 157, "opf": 157, "doctor": 157, "bioid": 157, "screen": 157, "protein": 157, "interact": 157, "occur": 157, "someth": 157, "someon": 157, "healthplan": 157, "medicalrecord": 157, "obfuscatecolumn": 157, "texttodocumentscolumn": 158, "todocumentscolumn": 158, "annotationtooljsonread": 159, "pipeline_model": 159, "cleanup_mod": 159, "disabl": 159, "split_char": 159, "context_char": 159, "min_chars_tol": 159, "align_chars_tol": 159, "merge_overlap": 159, "sddlpath": 159, "aspres": 159, "rdr": 159, "anc": 159, "corpu": 159, "small": 159, "json_path": 159, "assertion_df": 159, "generateassertiontrainset": 159, "sentencecol": 159, "assertioncol": 159, "generateconl": 159, "taskcolumn": 159, "tokencol": 159, "nerlabel": 159, "generateplainassertiontrainset": 159, "codiespread": 159, "readdatasettaskx": 159, "textfold": 159, "cantemistread": 159, "readdatasettaskn": 159, "synonymaugmentationuml": 159, "umls_path": 159, "code_col": 159, "description_col": 159, "augmentcsv": 159, "corpus_csv_path": 159, "ner_pipelin": 159, "do_product": 159, "augmentation_mod": 159, "plain_text": 159, "synonym_sourc": 159, "uml": 159, "regex_pars": 159, "euclidean_distance_threshold": 159, "cosine_distance_threshold": 159, "synonym_limit": 159, "casing_funct": 159, "augmentdatafram": 159, "corpus_df": 159, "updatecachemodel": 160, "refresh": 160, "hdf": 160, "date_cutoff": 160, "sinc": 160, "get_mt_sampl": 161, "medical_speci": 161, "transcrib": 161, "transcript": 161, "report": 161, "mtsampl": 161, "One": 161, "special": 161, "allergy_immunologi": 161, "autopsi": 161, "bariatr": 161, "cardiovascular_pulmonari": 161, "chiropract": 161, "consult_history_and_phi": 161, "cosmetic_plastic_surgeri": 161, "dentistri": 161, "dermatologi": 161, "diets_and_nutrit": 161, "discharge_summari": 161, "emergency_room_report": 161, "endocrinologi": 161, "ent_otolaryngologi": 161, "gastroenterologi": 161, "general_medicin": 161, "hematology_oncologi": 161, "hospice_palliative_car": 161, "im": 161, "lab_medicine_pathologi": 161, "letter": 161, "nephrologi": 161, "neurologi": 161, "neurosurgeri": 161, "obstetrics_gynecologi": 161, "office_not": 161, "ophthalmologi": 161, "orthoped": 161, "pain_manag": 161, "pediatrics_neonat": 161, "physical_medicine_rehab": 161, "podiatri": 161, "psychiatry_psychologi": 161, "radiologi": 161, "rheumatologi": 161, "sleep_medicin": 161, "soap_chart_progress_not": 161, "speech_languag": 161, "surgeri": 161, "urologi": 161, "scrap": 161, "get_nlp_token_pipelin": 162, "assembl": 162, "get_nlp_regex_token_pipelin": 162, "get_sentence_pipelin": 162, "get_rel_df": 162, "get_ner_df": 162, "get_ner_sentence_bord": 162, "border": 162, "get_nlp_pos_pipelin": 162, "tagger": 162, "get_nlp_regex_pos_pipelin": 162, "get_single_task_conl": 162, "pos_pipelin": 162, "token_pipelin": 162, "style": 162, "overview": 164, "class": 164}, "objects": {"": [[129, 0, 0, "-", "sparknlp_jsl"]], "sparknlp_jsl": [[11, 0, 0, "-", "_tf_graph_builders"], [34, 0, 0, "-", "_tf_graph_builders_1x"], [41, 0, 0, "-", "alab"], [75, 0, 0, "-", "annotator"], [129, 3, 1, "", "annotators"], [99, 0, 0, "-", "base"], [100, 0, 0, "-", "compatibility"], [101, 0, 0, "-", "custom_transformer"], [102, 0, 0, "-", "eval"], [129, 3, 1, "", "finance"], [116, 0, 0, "-", "finance"], [127, 0, 0, "-", "freeze"], [128, 0, 0, "-", "functions"], [129, 6, 1, "", "get_credentials"], [130, 0, 0, "-", "internal"], [144, 0, 0, "-", "legal"], [129, 6, 1, "", "library_settings"], [155, 0, 0, "-", "modelTracer"], [156, 0, 0, "-", "pretrained"], [129, 6, 1, "", "pub_version"], [129, 3, 1, "", "size_regex"], [129, 6, 1, "", "start"], [157, 0, 0, "-", "structured_deidentification"], [158, 0, 0, "-", "text_to_documents_columns"], [159, 0, 0, "-", "training"], [129, 3, 1, "", "transformer_seq_classification"], [160, 0, 0, "-", "updateModels"], [161, 0, 0, "-", "util"], [163, 0, 0, "-", "utils"], [129, 6, 1, "", "version"], [129, 3, 1, "", "version_regex"]], "sparknlp_jsl._tf_graph_builders": [[3, 0, 0, "-", "assertion_dl"], [7, 0, 0, "-", "generic_classifier"], [10, 0, 0, "-", "graph_builders"], [14, 0, 0, "-", "ner_dl"], [21, 0, 0, "-", "tf2contrib"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[2, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel": [[2, 2, 1, "", "add_bidirectional_lstm"], [2, 2, 1, "", "add_optimizer"], [2, 2, 1, "", "calc_accuracy"], [2, 2, 1, "", "confusion_matrix"], [2, 2, 1, "", "fully_connected_layer"], [2, 2, 1, "", "persist_graph"], [2, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[4, 0, 0, "-", "basetfmodel"], [5, 0, 0, "-", "build_model"], [6, 0, 0, "-", "generic_classifier_model"], [8, 0, 0, "-", "progresstracker"], [9, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel": [[4, 2, 1, "", "build"], [4, 2, 1, "", "export_graph"], [4, 2, 1, "", "fit_dataset"], [4, 2, 1, "", "generate_batch"], [4, 2, 1, "", "get_graph"], [4, 2, 1, "", "is_built"], [4, 2, 1, "", "load_graph"], [4, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, 3, 1, "", "build_params"], [5, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel": [[6, 2, 1, "", "build"], [6, 2, 1, "", "export_graph"], [6, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker": [[8, 2, 1, "", "get_report_interval"], [8, 2, 1, "", "on_batch"], [8, 2, 1, "", "on_epoch"], [8, 2, 1, "", "on_training_end"], [8, 2, 1, "", "on_training_start"], [8, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, 1, 1, "", "MODEL_OPS"], [9, 1, 1, "", "MODEL_TENSORS"], [9, 1, 1, "", "RUN_TYPES"], [9, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS": [[9, 4, 1, "", "INIT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS": [[9, 4, 1, "", "ACC"], [9, 4, 1, "", "INPUTS"], [9, 4, 1, "", "LEARNING_RATE"], [9, 4, 1, "", "LOSS"], [9, 4, 1, "", "OUTPUTS"], [9, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES": [[9, 4, 1, "", "EVALUATE"], [9, 4, 1, "", "PREDICT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings": [[9, 4, 1, "", "DATASETS_DIR"], [9, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [9, 4, 1, "", "LOGS_DIR"], [9, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, 1, 1, "", "AssertionTFGraphBuilder"], [10, 1, 1, "", "GenericClassifierTFGraphBuilder"], [10, 1, 1, "", "NerTFGraphBuilder"], [10, 1, 1, "", "RelationExtractionTFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilderFactory"], [10, 5, 1, "", "TensorflowAddonsNeeded"], [10, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder": [[10, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder": [[10, 2, 1, "", "check_build_params"], [10, 2, 1, "", "get_build_param"], [10, 2, 1, "", "get_build_params"], [10, 2, 1, "", "get_build_params_with_defaults"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_models"], [10, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[12, 0, 0, "-", "create_graph"], [13, 0, 0, "-", "dataset_encoder"], [15, 0, 0, "-", "ner_model"], [16, 0, 0, "-", "ner_model_saver"], [17, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder": [[13, 2, 1, "", "encode"], [13, 2, 1, "", "get_char_indexes"], [13, 2, 1, "", "normalize"], [13, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel": [[15, 2, 1, "", "add_bilstm_char_repr"], [15, 2, 1, "", "add_cnn_char_repr"], [15, 2, 1, "", "add_context_repr"], [15, 2, 1, "", "add_inference_layer"], [15, 2, 1, "", "add_pretrained_word_embeddings"], [15, 2, 1, "", "add_training_op"], [15, 2, 1, "", "close"], [15, 2, 1, "", "fill"], [15, 2, 1, "", "get_char_ids"], [15, 2, 1, "", "get_from_batch"], [15, 2, 1, "", "get_sentence_lengths"], [15, 2, 1, "", "get_sentence_token_lengths"], [15, 2, 1, "", "get_softmax"], [15, 2, 1, "", "get_tag_ids"], [15, 2, 1, "", "get_word_embeddings"], [15, 2, 1, "", "get_word_lengths"], [15, 2, 1, "", "init_variables"], [15, 2, 1, "", "measure"], [15, 2, 1, "", "num_trues"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "slice"], [15, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver": [[16, 2, 1, "", "restore_tensorflow_state"], [16, 2, 1, "", "save"], [16, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper": [[17, 2, 1, "", "get_bucket_id"], [17, 2, 1, "", "slice"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[18, 0, 0, "-", "core_rnn_cell"], [19, 0, 0, "-", "fused_rnn_cell"], [20, 0, 0, "-", "gru_ops"], [22, 0, 0, "-", "lstm_ops"], [23, 0, 0, "-", "rnn"], [24, 0, 0, "-", "rnn_cell"], [21, 3, 1, "", "tf"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, 1, 1, "", "EmbeddingWrapper"], [18, 1, 1, "", "InputProjectionWrapper"], [18, 1, 1, "", "OutputProjectionWrapper"], [18, 3, 1, "", "RNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, 1, 1, "", "FusedRNNCell"], [19, 1, 1, "", "FusedRNNCellAdaptor"], [19, 1, 1, "", "TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, 1, 1, "", "GRUBlockCell"], [20, 1, 1, "", "GRUBlockCellV2"], [20, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell": [[20, 2, 1, "", "build"], [20, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2": [[20, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, 1, 1, "", "LSTMBlockCell"], [22, 1, 1, "", "LSTMBlockFusedCell"], [22, 1, 1, "", "LSTMBlockWrapper"], [22, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell": [[22, 2, 1, "", "build"], [22, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell": [[22, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper": [[22, 2, 1, "", "call"], [22, 2, 1, "", "num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, 6, 1, "", "stack_bidirectional_dynamic_rnn"], [23, 6, 1, "", "stack_bidirectional_rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, 1, 1, "", "AttentionCellWrapper"], [24, 1, 1, "", "BidirectionalGridLSTMCell"], [24, 1, 1, "", "CFNCell"], [24, 1, 1, "", "CompiledWrapper"], [24, 1, 1, "", "Conv1DLSTMCell"], [24, 1, 1, "", "Conv2DLSTMCell"], [24, 1, 1, "", "Conv3DLSTMCell"], [24, 1, 1, "", "ConvLSTMCell"], [24, 1, 1, "", "CoupledInputForgetGateLSTMCell"], [24, 1, 1, "", "GLSTMCell"], [24, 1, 1, "", "GridLSTMCell"], [24, 1, 1, "", "HighwayWrapper"], [24, 1, 1, "", "IndRNNCell"], [24, 1, 1, "", "IndyGRUCell"], [24, 1, 1, "", "IndyLSTMCell"], [24, 1, 1, "", "IntersectionRNNCell"], [24, 1, 1, "", "LayerNormBasicLSTMCell"], [24, 1, 1, "", "LayerNormLSTMCell"], [24, 1, 1, "", "MinimalRNNCell"], [24, 1, 1, "", "NASCell"], [24, 1, 1, "", "NTMCell"], [24, 3, 1, "", "NTMControllerState"], [24, 1, 1, "", "PhasedLSTMCell"], [24, 1, 1, "", "SRUCell"], [24, 1, 1, "", "TimeFreqLSTMCell"], [24, 1, 1, "", "UGRNNCell"], [24, 1, 1, "", "WeightNormLSTMCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"], [24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders_1x": [[26, 0, 0, "-", "assertion_dl"], [30, 0, 0, "-", "generic_classifier"], [33, 0, 0, "-", "graph_builders"], [37, 0, 0, "-", "ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[25, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel": [[25, 2, 1, "", "add_bidirectional_lstm"], [25, 2, 1, "", "add_optimizer"], [25, 2, 1, "", "calc_accuracy"], [25, 2, 1, "", "confusion_matrix"], [25, 2, 1, "", "fully_connected_layer"], [25, 2, 1, "", "persist_graph"], [25, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[27, 0, 0, "-", "basetfmodel"], [28, 0, 0, "-", "build_model"], [29, 0, 0, "-", "generic_classifier_model"], [31, 0, 0, "-", "progresstracker"], [32, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel": [[27, 2, 1, "", "build"], [27, 2, 1, "", "export_graph"], [27, 2, 1, "", "fit_dataset"], [27, 2, 1, "", "generate_batch"], [27, 2, 1, "", "get_graph"], [27, 2, 1, "", "is_built"], [27, 2, 1, "", "load_graph"], [27, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, 3, 1, "", "build_params"], [28, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel": [[29, 2, 1, "", "build"], [29, 2, 1, "", "export_graph"], [29, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker": [[31, 2, 1, "", "get_report_interval"], [31, 2, 1, "", "on_batch"], [31, 2, 1, "", "on_epoch"], [31, 2, 1, "", "on_training_end"], [31, 2, 1, "", "on_training_start"], [31, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, 1, 1, "", "MODEL_OPS"], [32, 1, 1, "", "MODEL_TENSORS"], [32, 1, 1, "", "RUN_TYPES"], [32, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS": [[32, 4, 1, "", "INIT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS": [[32, 4, 1, "", "ACC"], [32, 4, 1, "", "INPUTS"], [32, 4, 1, "", "LEARNING_RATE"], [32, 4, 1, "", "LOSS"], [32, 4, 1, "", "OUTPUTS"], [32, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES": [[32, 4, 1, "", "EVALUATE"], [32, 4, 1, "", "PREDICT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings": [[32, 4, 1, "", "DATASETS_DIR"], [32, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [32, 4, 1, "", "LOGS_DIR"], [32, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, 1, 1, "", "AssertionTFGraphBuilder"], [33, 1, 1, "", "GenericClassifierTFGraphBuilder"], [33, 1, 1, "", "NerTFGraphBuilder"], [33, 1, 1, "", "RelationExtractionTFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilderFactory"], [33, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder": [[33, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder": [[33, 2, 1, "", "check_build_params"], [33, 2, 1, "", "get_build_param"], [33, 2, 1, "", "get_build_params"], [33, 2, 1, "", "get_build_params_with_defaults"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_models"], [33, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[35, 0, 0, "-", "create_graph"], [36, 0, 0, "-", "dataset_encoder"], [38, 0, 0, "-", "ner_model"], [39, 0, 0, "-", "ner_model_saver"], [40, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder": [[36, 2, 1, "", "encode"], [36, 2, 1, "", "get_char_indexes"], [36, 2, 1, "", "normalize"], [36, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel": [[38, 2, 1, "", "add_bilstm_char_repr"], [38, 2, 1, "", "add_cnn_char_repr"], [38, 2, 1, "", "add_context_repr"], [38, 2, 1, "", "add_inference_layer"], [38, 2, 1, "", "add_pretrained_word_embeddings"], [38, 2, 1, "", "add_training_op"], [38, 2, 1, "", "close"], [38, 2, 1, "", "fill"], [38, 2, 1, "", "get_char_ids"], [38, 2, 1, "", "get_from_batch"], [38, 2, 1, "", "get_sentence_lengths"], [38, 2, 1, "", "get_sentence_token_lengths"], [38, 2, 1, "", "get_softmax"], [38, 2, 1, "", "get_tag_ids"], [38, 2, 1, "", "get_word_embeddings"], [38, 2, 1, "", "get_word_lengths"], [38, 2, 1, "", "init_variables"], [38, 2, 1, "", "measure"], [38, 2, 1, "", "num_trues"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "slice"], [38, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver": [[39, 2, 1, "", "restore_tensorflow_state"], [39, 2, 1, "", "save"], [39, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper": [[40, 2, 1, "", "get_bucket_id"], [40, 2, 1, "", "slice"]], "sparknlp_jsl.alab": [[41, 1, 1, "", "AnnotationLab"]], "sparknlp_jsl.alab.AnnotationLab": [[41, 2, 1, "", "create_project"], [41, 2, 1, "", "delete_project"], [41, 2, 1, "", "delete_tasks"], [41, 2, 1, "", "generate_preannotations"], [41, 2, 1, "", "get_all_projects"], [41, 2, 1, "", "get_annotations"], [41, 2, 1, "", "get_assertion_data"], [41, 2, 1, "", "get_classification_data"], [41, 2, 1, "", "get_conll_data"], [41, 2, 1, "", "get_project_config"], [41, 2, 1, "", "get_relation_extraction_data"], [41, 2, 1, "", "set_credentials"], [41, 2, 1, "", "set_project_config"], [41, 2, 1, "", "upload_preannotations"], [41, 2, 1, "", "upload_tasks"]], "sparknlp_jsl.annotator": [[42, 0, 0, "-", "annotation_merger"], [75, 3, 1, "id2", "assertion"], [45, 0, 0, "-", "assertion"], [75, 3, 1, "id16", "chunker"], [53, 0, 0, "-", "chunker"], [75, 3, 1, "id6", "classification"], [55, 0, 0, "-", "classification"], [75, 3, 1, "id10", "context"], [60, 0, 0, "-", "context"], [75, 3, 1, "id7", "deid"], [63, 0, 0, "-", "deid"], [75, 3, 1, "id8", "disambiguation"], [66, 0, 0, "-", "disambiguation"], [75, 3, 1, "id3", "dl"], [68, 0, 0, "-", "doc2_chunk_internal"], [72, 0, 0, "-", "embeddings"], [75, 3, 1, "", "finance"], [75, 3, 1, "id0", "finance_classifier_dl"], [75, 3, 1, "id13", "generic_classifier"], [74, 0, 0, "-", "generic_classifier"], [75, 3, 1, "id9", "keyword"], [75, 3, 1, "", "legal"], [75, 3, 1, "id1", "legal_classifier_dl"], [75, 3, 1, "id4", "logreg"], [77, 0, 0, "-", "merge"], [78, 0, 0, "-", "ner"], [86, 0, 0, "-", "normalizer"], [87, 0, 0, "-", "qa"], [89, 0, 0, "-", "re"], [94, 0, 0, "-", "resolution"], [97, 0, 0, "-", "router"], [98, 0, 0, "-", "tf_graph_builder"]], "sparknlp_jsl.annotator.annotation_merger": [[42, 1, 1, "", "AnnotationMerger"]], "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger": [[42, 4, 1, "", "inputType"], [42, 4, 1, "", "name"], [42, 2, 1, "", "setInputType"]], "sparknlp_jsl.annotator.assertion": [[43, 0, 0, "-", "assertionDL"], [44, 0, 0, "-", "assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, 1, 1, "", "AssertionDLApproach"], [43, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach": [[43, 4, 1, "", "batchSize"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "dropout"], [43, 4, 1, "", "enableOutputLogs"], [43, 4, 1, "", "endCol"], [43, 4, 1, "", "epochs"], [43, 4, 1, "", "evaluationLogExtended"], [43, 4, 1, "", "graphFile"], [43, 4, 1, "", "graphFolder"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "label"], [43, 4, 1, "", "learningRate"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "outputLogsPath"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setBatchSize"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setDropout"], [43, 2, 1, "", "setEnableOutputLogs"], [43, 2, 1, "", "setEndCol"], [43, 2, 1, "", "setEpochs"], [43, 2, 1, "", "setEvaluationLogExtended"], [43, 2, 1, "", "setGraphFile"], [43, 2, 1, "", "setGraphFolder"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setLabelCol"], [43, 2, 1, "", "setLearningRate"], [43, 2, 1, "", "setMaxSentLen"], [43, 2, 1, "", "setOutputLogsPath"], [43, 2, 1, "", "setScopeWindow"], [43, 2, 1, "", "setStartCol"], [43, 2, 1, "", "setTestDataset"], [43, 2, 1, "", "setValidationSplit"], [43, 2, 1, "", "setVerbose"], [43, 4, 1, "", "startCol"], [43, 4, 1, "", "testDataset"], [43, 4, 1, "", "validationSplit"], [43, 4, 1, "", "verbose"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel": [[43, 4, 1, "", "classes"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "name"], [43, 2, 1, "", "pretrained"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setScopeWindow"], [43, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[44, 1, 1, "", "AssertionLogRegApproach"], [44, 1, 1, "", "AssertionLogRegModel"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach": [[44, 4, 1, "", "afterParam"], [44, 4, 1, "", "beforeParam"], [44, 4, 1, "", "eNetParam"], [44, 4, 1, "", "endCol"], [44, 4, 1, "", "label"], [44, 4, 1, "", "maxIter"], [44, 4, 1, "", "nerCol"], [44, 4, 1, "", "regParam"], [44, 2, 1, "", "setAfter"], [44, 2, 1, "", "setBefore"], [44, 2, 1, "", "setEndCol"], [44, 2, 1, "", "setEnet"], [44, 2, 1, "", "setLabelCol"], [44, 2, 1, "", "setMaxIter"], [44, 2, 1, "", "setNerCol"], [44, 2, 1, "", "setReg"], [44, 2, 1, "", "setStartCol"], [44, 2, 1, "", "setTargetNerLabels"], [44, 4, 1, "", "startCol"], [44, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel": [[44, 4, 1, "", "afterParam"], [44, 4, 1, "", "beforeParam"], [44, 4, 1, "", "endCol"], [44, 4, 1, "", "name"], [44, 4, 1, "", "nerCol"], [44, 2, 1, "", "pretrained"], [44, 4, 1, "", "startCol"], [44, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.chunker": [[46, 0, 0, "-", "assertion_filterer"], [47, 0, 0, "-", "chunk_converter"], [48, 0, 0, "-", "chunk_key_phrase_extraction"], [49, 0, 0, "-", "chunk_sentence_splitter"], [50, 0, 0, "-", "chunker_filterer"], [51, 0, 0, "-", "chunkmapper"], [52, 0, 0, "-", "chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[46, 1, 1, "", "AssertionFilterer"]], "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer": [[46, 4, 1, "", "criteria"], [46, 4, 1, "", "entitiesConfidence"], [46, 4, 1, "", "name"], [46, 4, 1, "", "regex"], [46, 2, 1, "", "setCriteria"], [46, 2, 1, "", "setRegex"], [46, 2, 1, "", "setWhiteList"], [46, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[47, 1, 1, "", "ChunkConverter"]], "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter": [[47, 4, 1, "", "name"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[48, 1, 1, "", "ChunkKeyPhraseExtraction"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction": [[48, 4, 1, "", "concatenateSentences"], [48, 4, 1, "", "divergence"], [48, 4, 1, "", "documentLevelProcessing"], [48, 4, 1, "", "dropPunctuation"], [48, 4, 1, "", "name"], [48, 2, 1, "", "pretrained"], [48, 4, 1, "", "selectMostDifferent"], [48, 2, 1, "", "setConcatenateSentences"], [48, 2, 1, "", "setDivergence"], [48, 2, 1, "", "setDocumentLevelProcessing"], [48, 2, 1, "", "setDropPunctuation"], [48, 2, 1, "", "setSelectMostDifferent"], [48, 2, 1, "", "setTopN"], [48, 4, 1, "", "topN"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[49, 1, 1, "", "ChunkSentenceSplitter"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter": [[49, 4, 1, "", "defaultEntity"], [49, 4, 1, "", "groupBySentences"], [49, 4, 1, "", "insertChunk"], [49, 4, 1, "", "name"], [49, 2, 1, "", "setDefaultEntity"], [49, 2, 1, "", "setGroupBySentences"], [49, 2, 1, "", "setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[50, 1, 1, "", "ChunkFilterer"], [50, 1, 1, "", "ChunkFiltererApproach"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer": [[50, 4, 1, "", "blackList"], [50, 4, 1, "", "criteria"], [50, 4, 1, "", "filterValue"], [50, 4, 1, "", "name"], [50, 4, 1, "", "regex"], [50, 2, 1, "", "setBlackList"], [50, 2, 1, "", "setCriteria"], [50, 2, 1, "", "setFilterEntity"], [50, 2, 1, "", "setRegex"], [50, 2, 1, "", "setWhiteList"], [50, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach": [[50, 4, 1, "", "blackList"], [50, 4, 1, "", "criteria"], [50, 4, 1, "", "entitiesConfidenceResource"], [50, 4, 1, "", "filterValue"], [50, 4, 1, "", "name"], [50, 4, 1, "", "regex"], [50, 2, 1, "", "setBlackList"], [50, 2, 1, "", "setCriteria"], [50, 2, 1, "", "setEntitiesConfidenceResource"], [50, 2, 1, "", "setFilterEntity"], [50, 2, 1, "", "setRegex"], [50, 2, 1, "", "setWhiteList"], [50, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[51, 1, 1, "", "ChunkMapperApproach"], [51, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach": [[51, 4, 1, "", "allowMultiTokenChunk"], [51, 4, 1, "", "dictionary"], [51, 4, 1, "", "lowerCase"], [51, 4, 1, "", "multivaluesRelations"], [51, 4, 1, "", "name"], [51, 4, 1, "", "rel"], [51, 4, 1, "", "rels"], [51, 2, 1, "", "setAllowMultiTokenChunk"], [51, 2, 1, "", "setDictionary"], [51, 2, 1, "", "setLowerCase"], [51, 2, 1, "", "setMultivaluesRelations"], [51, 2, 1, "", "setRel"], [51, 2, 1, "", "setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel": [[51, 4, 1, "", "allowMultiTokenChunk"], [51, 4, 1, "", "lowerCase"], [51, 4, 1, "", "multivaluesRelations"], [51, 4, 1, "", "name"], [51, 2, 1, "", "pretrained"], [51, 4, 1, "", "rel"], [51, 4, 1, "", "rels"], [51, 2, 1, "", "setAllowMultiTokenChunk"], [51, 2, 1, "", "setLowerCase"], [51, 2, 1, "", "setMultivaluesRelations"], [51, 2, 1, "", "setRel"], [51, 2, 1, "", "setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[52, 1, 1, "", "ChunkMapperFilterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer": [[52, 4, 1, "", "name"], [52, 4, 1, "", "returnCriteria"], [52, 2, 1, "", "setReturnCriteria"]], "sparknlp_jsl.annotator.classification": [[54, 0, 0, "-", "document_log_classifier"], [56, 0, 0, "-", "medical_bert_for_sequence_classification"], [57, 0, 0, "-", "medical_bert_for_token_classifier"], [58, 0, 0, "-", "medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[54, 1, 1, "", "DocumentLogRegClassifierApproach"], [54, 1, 1, "", "DocumentLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach": [[54, 4, 1, "", "classificationModelPath"], [54, 4, 1, "", "fitIntercept"], [54, 4, 1, "", "labelCol"], [54, 4, 1, "", "labels"], [54, 4, 1, "", "maxIter"], [54, 2, 1, "", "setClassificationModelPath"], [54, 2, 1, "", "setFitIntercept"], [54, 2, 1, "", "setLabelColumn"], [54, 2, 1, "", "setLabels"], [54, 2, 1, "", "setMaxIter"], [54, 2, 1, "", "setTol"], [54, 2, 1, "", "setVectorizationModelPath"], [54, 4, 1, "", "tol"], [54, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel": [[54, 4, 1, "", "classificationModel"], [54, 4, 1, "", "labels"], [54, 4, 1, "", "mergeChunks"], [54, 4, 1, "", "name"], [54, 2, 1, "", "pretrained"], [54, 2, 1, "", "setClassificationModel"], [54, 2, 1, "", "setLabels"], [54, 2, 1, "", "setMergeChunks"], [54, 2, 1, "", "setVectorizationModel"], [54, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[56, 1, 1, "", "MedicalBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification": [[56, 4, 1, "", "coalesceSentences"], [56, 4, 1, "", "configProtoBytes"], [56, 2, 1, "", "getClasses"], [56, 2, 1, "", "loadSavedModel"], [56, 2, 1, "", "loadSavedModelOpenSource"], [56, 4, 1, "", "maxSentenceLength"], [56, 4, 1, "", "name"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setCoalesceSentences"], [56, 2, 1, "", "setConfigProtoBytes"], [56, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[57, 1, 1, "", "MedicalBertForTokenClassifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier": [[57, 4, 1, "", "configProtoBytes"], [57, 2, 1, "", "getClasses"], [57, 2, 1, "", "loadSavedModel"], [57, 2, 1, "", "loadSavedModelOpenSource"], [57, 4, 1, "", "maxSentenceLength"], [57, 4, 1, "", "name"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setConfigProtoBytes"], [57, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[58, 1, 1, "", "MedicalDistilBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification": [[58, 4, 1, "", "coalesceSentences"], [58, 4, 1, "", "configProtoBytes"], [58, 2, 1, "", "getClasses"], [58, 2, 1, "", "loadSavedModel"], [58, 2, 1, "", "loadSavedModelOpenSource"], [58, 4, 1, "", "maxSentenceLength"], [58, 4, 1, "", "name"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setCoalesceSentences"], [58, 2, 1, "", "setConfigProtoBytes"], [58, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.context": [[59, 0, 0, "-", "contextual_parser"]], "sparknlp_jsl.annotator.context.contextual_parser": [[59, 1, 1, "", "ContextualParserApproach"], [59, 1, 1, "", "ContextualParserModel"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach": [[59, 4, 1, "", "caseSensitive"], [59, 4, 1, "", "completeContextMatch"], [59, 4, 1, "", "dictionary"], [59, 4, 1, "", "jsonPath"], [59, 4, 1, "", "optionalContextRules"], [59, 4, 1, "", "prefixAndSuffixMatch"], [59, 2, 1, "", "setCaseSensitive"], [59, 2, 1, "", "setCompleteContextMatch"], [59, 2, 1, "", "setDictionary"], [59, 2, 1, "", "setJsonPath"], [59, 2, 1, "", "setOptionalContextRules"], [59, 2, 1, "", "setPrefixAndSuffixMatch"], [59, 2, 1, "", "setShortestContextMatch"], [59, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel": [[59, 4, 1, "", "caseSensitive"], [59, 4, 1, "", "optionalContextRules"], [59, 4, 1, "", "prefixAndSuffixMatch"], [59, 2, 1, "", "setCaseSensitive"], [59, 2, 1, "", "setOptionalContextRules"], [59, 2, 1, "", "setPrefixAndSuffixMatch"], [59, 2, 1, "", "setShortestContextMatch"], [59, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.deid": [[61, 0, 0, "-", "deIdentification"], [62, 0, 0, "-", "doccument_hashcoder"], [64, 0, 0, "-", "reIdentification"], [65, 0, 0, "-", "replacer"]], "sparknlp_jsl.annotator.deid.deIdentification": [[61, 1, 1, "", "DeIdentification"], [61, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification": [[61, 4, 1, "", "blackList"], [61, 4, 1, "", "consistentObfuscation"], [61, 4, 1, "", "dateFormats"], [61, 4, 1, "", "dateTag"], [61, 4, 1, "", "dateToYear"], [61, 4, 1, "", "days"], [61, 4, 1, "", "fixedMaskLength"], [61, 2, 1, "", "getBlackList"], [61, 4, 1, "", "ignoreRegex"], [61, 4, 1, "", "isRandomDateDisplacement"], [61, 4, 1, "", "language"], [61, 4, 1, "", "mappingsColumn"], [61, 4, 1, "", "maskingPolicy"], [61, 4, 1, "", "minYear"], [61, 4, 1, "", "mode"], [61, 4, 1, "", "name"], [61, 4, 1, "", "obfuscateDate"], [61, 4, 1, "", "obfuscateRefFile"], [61, 4, 1, "", "obfuscateRefSource"], [61, 4, 1, "", "refFileFormat"], [61, 4, 1, "", "refSep"], [61, 4, 1, "", "regexOverride"], [61, 4, 1, "", "regexPatternsDictionary"], [61, 4, 1, "", "region"], [61, 4, 1, "", "returnEntityMappings"], [61, 4, 1, "", "sameEntityThreshold"], [61, 4, 1, "", "seed"], [61, 2, 1, "", "setBlackList"], [61, 2, 1, "", "setConsistentObfuscation"], [61, 2, 1, "", "setDateFormats"], [61, 2, 1, "", "setDateTag"], [61, 2, 1, "", "setDateToYear"], [61, 2, 1, "", "setDays"], [61, 2, 1, "", "setFixedMaskLength"], [61, 2, 1, "", "setIgnoreRegex"], [61, 2, 1, "", "setIsRandomDateDisplacement"], [61, 2, 1, "", "setLanguage"], [61, 2, 1, "", "setMappingsColumn"], [61, 2, 1, "", "setMaskingPolicy"], [61, 2, 1, "", "setMinYear"], [61, 2, 1, "", "setMode"], [61, 2, 1, "", "setObfuscateDate"], [61, 2, 1, "", "setObfuscateRefFile"], [61, 2, 1, "", "setObfuscateRefSource"], [61, 2, 1, "", "setRefFileFormat"], [61, 2, 1, "", "setRefSep"], [61, 2, 1, "", "setRegexOverride"], [61, 2, 1, "", "setRegexPatternsDictionary"], [61, 2, 1, "", "setRegion"], [61, 2, 1, "", "setReturnEntityMappings"], [61, 2, 1, "", "setSameEntityThreshold"], [61, 2, 1, "", "setSeed"], [61, 2, 1, "", "setUseShifDays"], [61, 4, 1, "", "useShifDays"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel": [[61, 4, 1, "", "blackList"], [61, 4, 1, "", "consistentObfuscation"], [61, 4, 1, "id0", "dateFormats"], [61, 4, 1, "", "dateTag"], [61, 4, 1, "", "dateToYear"], [61, 4, 1, "", "days"], [61, 4, 1, "", "fixedMaskLength"], [61, 2, 1, "", "getBlackList"], [61, 2, 1, "", "getRegexEntities"], [61, 4, 1, "", "ignoreRegex"], [61, 4, 1, "", "isRandomDateDisplacement"], [61, 4, 1, "", "language"], [61, 4, 1, "", "mappingsColumn"], [61, 4, 1, "", "maskingPolicy"], [61, 4, 1, "", "minYear"], [61, 4, 1, "id13", "mode"], [61, 4, 1, "", "name"], [61, 4, 1, "", "obfuscateDate"], [61, 4, 1, "", "obfuscateRefSource"], [61, 2, 1, "", "pretrained"], [61, 4, 1, "", "regexEntities"], [61, 4, 1, "", "regexOverride"], [61, 4, 1, "", "region"], [61, 4, 1, "", "returnEntityMappings"], [61, 4, 1, "", "sameEntityThreshold"], [61, 4, 1, "", "seed"], [61, 2, 1, "", "setBlackList"], [61, 2, 1, "", "setConsistentObfuscation"], [61, 2, 1, "", "setDateFormats"], [61, 2, 1, "", "setDateTag"], [61, 2, 1, "", "setDateToYear"], [61, 2, 1, "", "setDays"], [61, 2, 1, "", "setFixedMaskLength"], [61, 2, 1, "", "setIgnoreRegex"], [61, 2, 1, "", "setIsRandomDateDisplacement"], [61, 2, 1, "", "setLanguage"], [61, 2, 1, "", "setMappingsColumn"], [61, 2, 1, "", "setMaskingPolicy"], [61, 2, 1, "", "setMinYear"], [61, 2, 1, "", "setMode"], [61, 2, 1, "", "setObfuscateDate"], [61, 2, 1, "", "setObfuscateRefSource"], [61, 2, 1, "", "setRegexOverride"], [61, 2, 1, "", "setRegion"], [61, 2, 1, "", "setReturnEntityMappings"], [61, 2, 1, "", "setSameEntityThreshold"], [61, 2, 1, "", "setSeed"], [61, 2, 1, "", "setUseShifDays"], [61, 4, 1, "", "useShifDays"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[62, 1, 1, "", "DocumentHashCoder"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder": [[62, 4, 1, "", "dateShiftColumn"], [62, 4, 1, "", "name"], [62, 4, 1, "", "newDateShift"], [62, 4, 1, "", "patientIdColumn"], [62, 4, 1, "", "rangeDays"], [62, 4, 1, "", "seed"], [62, 2, 1, "", "setDateShiftColumn"], [62, 2, 1, "", "setNewDateShift"], [62, 2, 1, "", "setParams"], [62, 2, 1, "", "setPatientIdColumn"], [62, 2, 1, "", "setRangeDays"], [62, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.reIdentification": [[64, 1, 1, "", "ReIdentification"]], "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification": [[64, 4, 1, "", "name"]], "sparknlp_jsl.annotator.deid.replacer": [[65, 1, 1, "", "Replacer"]], "sparknlp_jsl.annotator.disambiguation": [[67, 0, 0, "-", "ner_disambiguator"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[67, 1, 1, "", "NerDisambiguator"], [67, 1, 1, "", "NerDisambiguatorModel"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator": [[67, 4, 1, "", "embeddingTypeParam"], [67, 4, 1, "", "levenshteinDistanceThresholdParam"], [67, 4, 1, "", "narrowWithApproximateMatching"], [67, 4, 1, "", "nearMatchingGapParam"], [67, 4, 1, "", "numFirstChars"], [67, 4, 1, "", "predictionsLimit"], [67, 4, 1, "", "s3KnowledgeBaseName"], [67, 2, 1, "", "setEmbeddingType"], [67, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [67, 2, 1, "", "setNarrowWithApproximateMatching"], [67, 2, 1, "", "setNearMatchingGapParam"], [67, 2, 1, "", "setNumFirstChars"], [67, 2, 1, "", "setPredictionLimit"], [67, 2, 1, "", "setS3KnowledgeBaseName"], [67, 2, 1, "", "setTokenSearch"], [67, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel": [[67, 4, 1, "", "embeddingTypeParam"], [67, 4, 1, "", "levenshteinDistanceThresholdParam"], [67, 4, 1, "", "name"], [67, 4, 1, "", "narrowWithApproximateMatching"], [67, 4, 1, "", "nearMatchingGapParam"], [67, 4, 1, "", "numFirstChars"], [67, 4, 1, "", "predictionsLimit"], [67, 2, 1, "", "pretrained"], [67, 2, 1, "", "setEmbeddingType"], [67, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [67, 2, 1, "", "setNarrowWithApproximateMatching"], [67, 2, 1, "", "setNearMatchingGapParam"], [67, 2, 1, "", "setNumFirstChars"], [67, 2, 1, "", "setPredictionLimit"], [67, 2, 1, "", "setTokenSearch"], [67, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[68, 1, 1, "", "Doc2ChunkInternal"]], "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal": [[68, 4, 1, "", "chunkCol"], [68, 4, 1, "", "failOnMissing"], [68, 4, 1, "", "isArray"], [68, 4, 1, "", "lowerCase"], [68, 4, 1, "", "name"], [68, 2, 1, "", "setChunkCol"], [68, 2, 1, "", "setFailOnMissing"], [68, 2, 1, "", "setIsArray"], [68, 2, 1, "", "setLowerCase"], [68, 2, 1, "", "setParams"], [68, 2, 1, "", "setStartCol"], [68, 2, 1, "", "setStartColByTokenIndex"], [68, 4, 1, "", "startCol"], [68, 4, 1, "", "startColByTokenIndex"]], "sparknlp_jsl.annotator.embeddings": [[69, 0, 0, "-", "average_embeddings"], [70, 0, 0, "-", "bert_sentence_embeddings"], [71, 0, 0, "-", "entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[69, 1, 1, "", "AverageEmbeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings": [[69, 4, 1, "", "name"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[70, 1, 1, "", "BertSentenceChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings": [[70, 4, 1, "", "chunkWeight"], [70, 2, 1, "", "load"], [70, 4, 1, "", "name"], [70, 2, 1, "", "pretrained"], [70, 2, 1, "", "setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[71, 1, 1, "", "EntityChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings": [[71, 4, 1, "", "entityWeights"], [71, 4, 1, "", "maxSyntacticDistance"], [71, 4, 1, "", "name"], [71, 2, 1, "", "pretrained"], [71, 2, 1, "", "setEntityWeights"], [71, 2, 1, "", "setMaxSyntacticDistance"], [71, 2, 1, "", "setTargetEntities"], [71, 4, 1, "", "targetEntities"]], "sparknlp_jsl.annotator.generic_classifier": [[73, 0, 0, "-", "generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[73, 1, 1, "", "GenericClassifierApproach"], [73, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach": [[73, 4, 1, "", "batchSize"], [73, 4, 1, "", "dropout"], [73, 4, 1, "", "epochsN"], [73, 4, 1, "", "featureScaling"], [73, 4, 1, "", "fixImbalance"], [73, 4, 1, "", "labelColumn"], [73, 4, 1, "", "learningRate"], [73, 4, 1, "", "modelFile"], [73, 4, 1, "", "outputLogsPath"], [73, 2, 1, "", "setBatchSize"], [73, 2, 1, "", "setDropout"], [73, 2, 1, "", "setEpochsNumber"], [73, 2, 1, "", "setFeatureScaling"], [73, 2, 1, "", "setFixImbalance"], [73, 2, 1, "", "setLabelCol"], [73, 2, 1, "", "setLearningRate"], [73, 2, 1, "", "setModelFile"], [73, 2, 1, "", "setOutputLogsPath"], [73, 2, 1, "", "setValidationSplit"], [73, 4, 1, "", "validationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel": [[73, 4, 1, "", "classes"], [73, 4, 1, "", "name"], [73, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.merge": [[76, 0, 0, "-", "chunker_merge"]], "sparknlp_jsl.annotator.merge.chunker_merge": [[76, 1, 1, "", "ChunkMergeApproach"], [76, 1, 1, "", "ChunkMergeModel"]], "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach": [[76, 4, 1, "", "blackList"], [76, 4, 1, "", "chunkPrecedence"], [76, 4, 1, "", "falsePositivesResource"], [76, 4, 1, "", "mergeOverlapping"], [76, 4, 1, "", "name"], [76, 4, 1, "", "replaceDictResource"], [76, 2, 1, "", "setBlackList"], [76, 2, 1, "", "setChunkPrecedence"], [76, 2, 1, "", "setFalsePositivesResource"], [76, 2, 1, "", "setMergeOverlapping"], [76, 2, 1, "", "setReplaceDictResource"]], "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeModel": [[76, 4, 1, "", "blackList"], [76, 4, 1, "", "chunkPrecedence"], [76, 4, 1, "", "falsePositives"], [76, 4, 1, "", "mergeOverlapping"], [76, 4, 1, "", "name"], [76, 2, 1, "", "pretrained"], [76, 4, 1, "", "replaceDict"], [76, 2, 1, "", "setChunkPrecedence"], [76, 2, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.ner": [[79, 0, 0, "-", "iob_tagger"], [80, 0, 0, "-", "medical_ner"], [81, 0, 0, "-", "ner_chunker"], [82, 0, 0, "-", "ner_converter_internal"], [83, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[79, 1, 1, "", "IOBTagger"]], "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger": [[79, 4, 1, "", "name"], [79, 4, 1, "", "scheme"], [79, 2, 1, "", "setScheme"]], "sparknlp_jsl.annotator.ner.medical_ner": [[80, 1, 1, "", "MedicalNerApproach"], [80, 1, 1, "", "MedicalNerModel"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach": [[80, 4, 1, "", "batchSize"], [80, 4, 1, "", "configProtoBytes"], [80, 4, 1, "", "dropout"], [80, 4, 1, "", "earlyStoppingCriterion"], [80, 4, 1, "", "earlyStoppingPatience"], [80, 4, 1, "", "enableMemoryOptimizer"], [80, 4, 1, "", "graphFile"], [80, 4, 1, "", "graphFolder"], [80, 4, 1, "", "includeAllConfidenceScores"], [80, 4, 1, "", "includeConfidence"], [80, 4, 1, "", "logPrefix"], [80, 4, 1, "", "lr"], [80, 4, 1, "", "overrideExistingTags"], [80, 4, 1, "", "po"], [80, 4, 1, "", "pretrainedModelPath"], [80, 2, 1, "", "setBatchSize"], [80, 2, 1, "", "setConfigProtoBytes"], [80, 2, 1, "", "setDropout"], [80, 2, 1, "", "setEarlyStoppingCriterion"], [80, 2, 1, "", "setEarlyStoppingPatience"], [80, 2, 1, "", "setEnableMemoryOptimizer"], [80, 2, 1, "", "setGraphFile"], [80, 2, 1, "", "setGraphFolder"], [80, 2, 1, "", "setIncludeAllConfidenceScores"], [80, 2, 1, "", "setIncludeConfidence"], [80, 2, 1, "", "setLogPrefix"], [80, 2, 1, "", "setLr"], [80, 2, 1, "", "setOverrideExistingTags"], [80, 2, 1, "", "setPo"], [80, 2, 1, "", "setPretrainedModelPath"], [80, 2, 1, "", "setTagsMapping"], [80, 2, 1, "", "setUseBestModel"], [80, 2, 1, "", "setUseContrib"], [80, 2, 1, "", "setValidationSplit"], [80, 4, 1, "", "tagsMapping"], [80, 4, 1, "", "useBestModel"], [80, 4, 1, "", "useContrib"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel": [[80, 4, 1, "", "classes"], [80, 4, 1, "", "configProtoBytes"], [80, 2, 1, "", "getTrainingClassDistribution"], [80, 4, 1, "", "includeAllConfidenceScores"], [80, 4, 1, "", "includeConfidence"], [80, 4, 1, "", "inferenceBatchSize"], [80, 4, 1, "", "labelCasing"], [80, 2, 1, "", "loadSavedModel"], [80, 4, 1, "", "name"], [80, 2, 1, "id29", "pretrained"], [80, 2, 1, "", "setConfigProtoBytes"], [80, 2, 1, "id0", "setIncludeConfidence"], [80, 2, 1, "", "setInferenceBatchSize"], [80, 2, 1, "", "setLabelCasing"], [80, 4, 1, "", "trainingClassDistribution"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[81, 1, 1, "", "NerChunker"]], "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker": [[81, 4, 1, "", "name"], [81, 4, 1, "", "regexParsers"], [81, 2, 1, "", "setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[82, 1, 1, "", "NerConverterInternal"], [82, 1, 1, "", "NerConverterInternalModel"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal": [[82, 4, 1, "", "blackList"], [82, 4, 1, "", "greedyMode"], [82, 4, 1, "", "ignoreStopWords"], [82, 4, 1, "", "name"], [82, 4, 1, "", "preservePosition"], [82, 4, 1, "", "replaceDictResource"], [82, 4, 1, "", "replaceLabels"], [82, 2, 1, "", "setBlackList"], [82, 2, 1, "", "setGreedyMode"], [82, 2, 1, "", "setIgnoreStopWords"], [82, 2, 1, "", "setPreservePosition"], [82, 2, 1, "", "setReplaceDictResource"], [82, 2, 1, "", "setReplaceLabels"], [82, 2, 1, "", "setThreshold"], [82, 2, 1, "", "setWhiteList"], [82, 4, 1, "", "threshold"], [82, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel": [[82, 4, 1, "", "blackList"], [82, 4, 1, "", "greedyMode"], [82, 4, 1, "", "ignoreStopWords"], [82, 4, 1, "", "name"], [82, 4, 1, "", "preservePosition"], [82, 4, 1, "", "replaceDict"], [82, 2, 1, "", "setBlackList"], [82, 2, 1, "", "setGreedyMode"], [82, 2, 1, "", "setIgnoreStopWords"], [82, 2, 1, "", "setPreservePosition"], [82, 2, 1, "", "setThreshold"], [82, 2, 1, "", "setWhiteList"], [82, 4, 1, "", "threshold"], [82, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[83, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel": [[83, 2, 1, "", "getClasses"], [83, 4, 1, "", "ignoreEntities"], [83, 2, 1, "", "load"], [83, 4, 1, "", "name"], [83, 4, 1, "", "predictionThreshold"], [83, 2, 1, "", "pretrained"], [83, 2, 1, "", "setEntityDefinitions"], [83, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.normalizer": [[84, 0, 0, "-", "date_normalizer"], [85, 0, 0, "-", "drug_normalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[84, 1, 1, "", "DateNormalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer": [[84, 4, 1, "", "anchorDateDay"], [84, 4, 1, "", "anchorDateMonth"], [84, 4, 1, "", "anchorDateYear"], [84, 4, 1, "", "name"], [84, 4, 1, "", "outputDateFormat"], [84, 2, 1, "", "setAnchorDateDay"], [84, 2, 1, "", "setAnchorDateMonth"], [84, 2, 1, "", "setAnchorDateYear"], [84, 2, 1, "", "setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[85, 1, 1, "", "DrugNormalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer": [[85, 4, 1, "", "lowercase"], [85, 4, 1, "", "policy"], [85, 2, 1, "", "setLowercase"], [85, 2, 1, "", "setPolicy"]], "sparknlp_jsl.annotator.qa": [[88, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[88, 1, 1, "", "NerQuestionGenerator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator": [[88, 4, 1, "", "entities1"], [88, 4, 1, "", "entities2"], [88, 4, 1, "", "name"], [88, 4, 1, "", "questionMark"], [88, 4, 1, "", "questionPronoun"], [88, 2, 1, "", "setEntities1"], [88, 2, 1, "", "setEntities2"], [88, 2, 1, "", "setQuestionMark"], [88, 2, 1, "", "setQuestionPronoun"], [88, 2, 1, "", "setStrategyType"], [88, 4, 1, "", "strategyType"]], "sparknlp_jsl.annotator.re": [[90, 0, 0, "-", "relation_extraction"], [91, 0, 0, "-", "relation_extraction_dl"], [92, 0, 0, "-", "relation_ner_chunk_filter"], [93, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction": [[90, 1, 1, "", "PosologyREModel"], [90, 1, 1, "", "RelationExtractionApproach"], [90, 1, 1, "", "RelationExtractionModel"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach": [[90, 4, 1, "", "customLabels"], [90, 4, 1, "", "fromEntityBeginCol"], [90, 4, 1, "", "fromEntityEndCol"], [90, 4, 1, "", "fromEntityLabelCol"], [90, 4, 1, "", "name"], [90, 4, 1, "", "relationDirectionCol"], [90, 2, 1, "", "setCustomLabels"], [90, 2, 1, "", "setFromEntity"], [90, 2, 1, "", "setRelationDirectionCol"], [90, 2, 1, "", "setToEntity"], [90, 4, 1, "", "toEntityBeginCol"], [90, 4, 1, "", "toEntityEndCol"], [90, 4, 1, "", "toEntityLabelCol"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel": [[90, 4, 1, "", "classes"], [90, 2, 1, "", "getClasses"], [90, 4, 1, "", "maxSyntacticDistance"], [90, 4, 1, "", "name"], [90, 4, 1, "", "predictionThreshold"], [90, 2, 1, "", "pretrained"], [90, 4, 1, "", "relationPairs"], [90, 4, 1, "", "relationPairsCaseSensitive"], [90, 2, 1, "", "setCustomLabels"], [90, 2, 1, "", "setMaxSyntacticDistance"], [90, 2, 1, "", "setPredictionThreshold"], [90, 2, 1, "", "setRelationPairs"], [90, 2, 1, "", "setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[91, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel": [[91, 4, 1, "", "batchSize"], [91, 4, 1, "", "classes"], [91, 4, 1, "", "customLabels"], [91, 2, 1, "", "getClasses"], [91, 2, 1, "", "loadSavedModel"], [91, 4, 1, "", "name"], [91, 4, 1, "", "predictionThreshold"], [91, 2, 1, "", "pretrained"], [91, 2, 1, "", "setBatchSize"], [91, 2, 1, "", "setCaseSensitive"], [91, 2, 1, "", "setCustomLabels"], [91, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[92, 1, 1, "", "RENerChunksFilter"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter": [[92, 4, 1, "", "docLevelRelations"], [92, 4, 1, "", "maxSyntacticDistance"], [92, 4, 1, "", "name"], [92, 4, 1, "", "relationPairs"], [92, 4, 1, "", "relationPairsCaseSensitive"], [92, 2, 1, "", "setDocLevelRelations"], [92, 2, 1, "", "setMaxSyntacticDistance"], [92, 2, 1, "", "setRelationPairs"], [92, 2, 1, "", "setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[93, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[93, 2, 1, "", "loadSavedModel"], [93, 4, 1, "", "multiLabel"], [93, 4, 1, "", "predictionThreshold"], [93, 2, 1, "", "pretrained"], [93, 2, 1, "", "setRelationalCategories"]], "sparknlp_jsl.annotator.resolution": [[95, 0, 0, "-", "resolver_merger"], [96, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[95, 1, 1, "", "ResolverMerger"]], "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger": [[95, 4, 1, "", "name"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[96, 1, 1, "", "SentenceEntityResolverApproach"], [96, 1, 1, "", "SentenceEntityResolverModel"], [96, 1, 1, "", "SentenceResolverParams"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[96, 4, 1, "", "aux_label_col"], [96, 4, 1, "", "dropCodesList"], [96, 4, 1, "", "labelCol"], [96, 4, 1, "", "normalizedCol"], [96, 4, 1, "", "overrideExistingCodes"], [96, 4, 1, "", "pretrainedModelPath"], [96, 4, 1, "", "returnCosineDistances"], [96, 2, 1, "", "setAuxLabelCol"], [96, 2, 1, "", "setDropCodesList"], [96, 2, 1, "", "setExtractCosineDistances"], [96, 2, 1, "", "setLabelCol"], [96, 2, 1, "", "setNormalizedCol"], [96, 2, 1, "", "setOverrideExistingCodes"], [96, 2, 1, "", "setPretrainedModelPath"], [96, 2, 1, "", "setUseAuxLabel"], [96, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[96, 4, 1, "", "aux_label_col"], [96, 4, 1, "", "name"], [96, 2, 1, "", "pretrained"], [96, 4, 1, "", "returnCosineDistances"], [96, 4, 1, "", "searchTree"], [96, 2, 1, "", "setAuxLabelCol"], [96, 2, 1, "", "setSearchTree"], [96, 2, 1, "", "setUseAuxLabel"], [96, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams": [[96, 4, 1, "", "confidenceFunction"], [96, 4, 1, "", "distanceFunction"], [96, 4, 1, "", "missAsEmpty"], [96, 4, 1, "", "neighbours"], [96, 2, 1, "", "setConfidenceFunction"], [96, 2, 1, "", "setDistanceFunction"], [96, 2, 1, "", "setMissAsEmpty"], [96, 2, 1, "", "setNeighbours"], [96, 2, 1, "", "setThreshold"], [96, 4, 1, "", "threshold"]], "sparknlp_jsl.annotator.router": [[97, 1, 1, "", "Router"]], "sparknlp_jsl.annotator.router.Router": [[97, 4, 1, "", "filterFieldsElements"], [97, 4, 1, "", "inputType"], [97, 4, 1, "", "metadataField"], [97, 4, 1, "", "name"], [97, 2, 1, "", "setFilterFieldsElements"], [97, 2, 1, "", "setInputType"], [97, 2, 1, "", "setMetadataField"]], "sparknlp_jsl.annotator.tf_graph_builder": [[98, 1, 1, "", "TFGraphBuilder"], [98, 1, 1, "", "TFGraphBuilderModel"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder": [[98, 4, 1, "", "batchNorm"], [98, 2, 1, "", "getBatchNorm"], [98, 2, 1, "", "getGraphFile"], [98, 2, 1, "", "getGraphFolder"], [98, 2, 1, "", "getHiddenAct"], [98, 2, 1, "", "getHiddenActL2"], [98, 2, 1, "", "getHiddenLayers"], [98, 2, 1, "", "getHiddenUnitsNumber"], [98, 2, 1, "", "getHiddenWeightsL2"], [98, 2, 1, "", "getInputCols"], [98, 2, 1, "", "getIsMedical"], [98, 2, 1, "", "getLabelColumn"], [98, 2, 1, "", "getMaxSequenceLength"], [98, 2, 1, "", "getModelName"], [98, 2, 1, "", "getUseRelationDirection"], [98, 4, 1, "", "graphFile"], [98, 4, 1, "", "graphFolder"], [98, 4, 1, "", "hiddenAct"], [98, 4, 1, "", "hiddenActL2"], [98, 4, 1, "", "hiddenLayers"], [98, 4, 1, "", "hiddenUnitsNumber"], [98, 4, 1, "", "hiddenWeightsL2"], [98, 4, 1, "", "inputCols"], [98, 4, 1, "", "isMedical"], [98, 4, 1, "", "labelColumn"], [98, 4, 1, "", "maxSequenceLength"], [98, 4, 1, "", "modelName"], [98, 2, 1, "", "setBatchNorm"], [98, 2, 1, "", "setGraphFile"], [98, 2, 1, "", "setGraphFolder"], [98, 2, 1, "", "setHiddenAct"], [98, 2, 1, "", "setHiddenActL2"], [98, 2, 1, "", "setHiddenLayers"], [98, 2, 1, "", "setHiddenUnitsNumber"], [98, 2, 1, "", "setHiddenWeightsL2"], [98, 2, 1, "", "setInputCols"], [98, 2, 1, "", "setIsMedical"], [98, 2, 1, "", "setLabelColumn"], [98, 2, 1, "", "setMaxSequenceLength"], [98, 2, 1, "", "setModelName"], [98, 2, 1, "", "setUseRelationDirection"], [98, 4, 1, "", "useRelationDirection"]], "sparknlp_jsl.base": [[99, 1, 1, "", "FeaturesAssembler"]], "sparknlp_jsl.base.FeaturesAssembler": [[99, 4, 1, "", "inputCols"], [99, 4, 1, "", "name"], [99, 4, 1, "", "outputCol"], [99, 2, 1, "", "setInputCols"], [99, 2, 1, "", "setOutputCol"], [99, 2, 1, "", "setParams"]], "sparknlp_jsl.compatibility": [[100, 1, 1, "", "Compatibility"]], "sparknlp_jsl.compatibility.Compatibility": [[100, 2, 1, "", "findVersion"], [100, 2, 1, "", "showVersion"]], "sparknlp_jsl.custom_transformer": [[101, 1, 1, "", "CustomTransformer"]], "sparknlp_jsl.custom_transformer.CustomTransformer": [[101, 4, 1, "", "f"], [101, 2, 1, "", "setInputCol"], [101, 2, 1, "", "setOutputCol"]], "sparknlp_jsl.eval": [[102, 1, 1, "", "NerCrfEvaluation"], [102, 1, 1, "", "NerDLEvaluation"], [102, 1, 1, "", "NerDLMetrics"], [102, 1, 1, "", "NorvigSpellEvaluation"], [102, 1, 1, "", "POSEvaluation"], [102, 1, 1, "", "SymSpellEvaluation"]], "sparknlp_jsl.eval.NerCrfEvaluation": [[102, 2, 1, "", "computeAccuracyAnnotator"], [102, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLEvaluation": [[102, 2, 1, "", "computeAccuracyAnnotator"], [102, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLMetrics": [[102, 2, 1, "", "computeMetricsFromDF"]], "sparknlp_jsl.eval.NorvigSpellEvaluation": [[102, 2, 1, "", "computeAccuracyAnnotator"], [102, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.POSEvaluation": [[102, 2, 1, "", "computeAccuracyAnnotator"], [102, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.SymSpellEvaluation": [[102, 2, 1, "", "computeAccuracyAnnotator"], [102, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.finance": [[108, 0, 0, "-", "chunk_classification"], [112, 0, 0, "-", "graph"], [117, 0, 0, "-", "seq_generation"], [121, 0, 0, "-", "sequence_classification"], [122, 0, 0, "-", "token_classification"]], "sparknlp_jsl.finance.chunk_classification": [[104, 0, 0, "-", "assertion"], [107, 0, 0, "-", "deid"], [110, 0, 0, "-", "resolution"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[103, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[103, 1, 1, "", "AssertionDLApproach"], [103, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel": [[103, 4, 1, "", "name"], [103, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid": [[105, 0, 0, "-", "deIdentification"], [106, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[105, 1, 1, "", "DeIdentification"], [105, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification": [[105, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel": [[105, 4, 1, "", "name"], [105, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[106, 1, 1, "", "FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[109, 0, 0, "-", "chunkmapper"], [111, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[109, 1, 1, "", "ChunkMapperApproach"], [109, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[109, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[109, 4, 1, "", "name"], [109, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[111, 1, 1, "", "SentenceEntityResolverApproach"], [111, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[111, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph": [[113, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction": [[114, 0, 0, "-", "relation_extraction_dl"], [115, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[114, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[114, 2, 1, "", "loadSavedModel"], [114, 4, 1, "", "name"], [114, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[115, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[115, 2, 1, "", "loadSavedModel"], [115, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.seq_generation": [[118, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.finance.seq_generation.qa_ner_generator": [[118, 1, 1, "", "FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.sequence_classification": [[119, 0, 0, "-", "finance_bert_for_sequence_classification"], [120, 0, 0, "-", "finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[119, 1, 1, "", "FinanceBertForSequenceClassification"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification": [[119, 2, 1, "", "loadSavedModel"], [119, 2, 1, "", "loadSavedModelOpenSource"], [119, 4, 1, "", "name"], [119, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[120, 1, 1, "", "FinanceClassifierDLApproach"], [120, 1, 1, "", "FinanceClassifierDLModel"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel": [[120, 4, 1, "", "name"], [120, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification": [[125, 0, 0, "-", "ner"]], "sparknlp_jsl.finance.token_classification.ner": [[123, 0, 0, "-", "finance_bert_for_token_classifier"], [124, 0, 0, "-", "finance_ner"], [126, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[123, 1, 1, "", "FinanceBertForTokenClassification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification": [[123, 2, 1, "", "loadSavedModel"], [123, 2, 1, "", "loadSavedModelOpenSource"], [123, 4, 1, "", "name"], [123, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[124, 1, 1, "", "FinanceNerApproach"], [124, 1, 1, "", "FinanceNerModel"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel": [[124, 2, 1, "", "loadSavedModel"], [124, 4, 1, "", "name"], [124, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[126, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[126, 2, 1, "", "load"], [126, 4, 1, "", "name"], [126, 2, 1, "", "pretrained"]], "sparknlp_jsl.freeze": [[127, 6, 1, "", "download_and_extract_model"], [127, 6, 1, "", "extract_model"], [127, 6, 1, "", "freeze_models"], [127, 6, 1, "", "get_bucket"], [127, 6, 1, "", "get_key"], [127, 6, 1, "", "get_milliseconds"], [127, 6, 1, "", "get_possibles_models"], [127, 6, 1, "", "read_metadata"], [127, 6, 1, "", "retrieve_spark_version"]], "sparknlp_jsl.functions": [[128, 6, 1, "", "profile"], [128, 6, 1, "", "profileV22"], [128, 6, 1, "", "profileV22Y17"], [128, 6, 1, "", "profileV22Y18"], [128, 6, 1, "", "profileV22Y19"], [128, 6, 1, "", "profileV22Y20"], [128, 6, 1, "", "profileV22Y21"], [128, 6, 1, "", "profileV22Y22"], [128, 6, 1, "", "profileV23"], [128, 6, 1, "", "profileV23Y18"], [128, 6, 1, "", "profileV23Y19"], [128, 6, 1, "", "profileV24Y17"], [128, 6, 1, "", "profileV24Y18"], [128, 6, 1, "", "profileV24Y19"], [128, 6, 1, "", "profileV24Y20"], [128, 6, 1, "", "profileV24Y21"], [128, 6, 1, "", "profileV24Y22"]], "sparknlp_jsl.internal": [[130, 6, 1, "", "CustomLabels"], [130, 6, 1, "", "EntityWeights"], [130, 6, 1, "", "RelationalCategories"], [130, 6, 1, "", "TargetEntities"]], "sparknlp_jsl.legal": [[136, 0, 0, "-", "chunk_classification"], [140, 0, 0, "-", "graph"], [145, 0, 0, "-", "seq_generation"], [147, 0, 0, "-", "sequence_classification"], [150, 0, 0, "-", "token_classification"]], "sparknlp_jsl.legal.chunk_classification": [[132, 0, 0, "-", "assertion"], [135, 0, 0, "-", "deid"], [138, 0, 0, "-", "resolution"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[131, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[131, 1, 1, "", "AssertionDLApproach"], [131, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel": [[131, 4, 1, "", "name"], [131, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid": [[133, 0, 0, "-", "deIdentification"], [134, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[133, 1, 1, "", "DeIdentification"], [133, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification": [[133, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel": [[133, 4, 1, "", "name"], [133, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[134, 1, 1, "", "LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[137, 0, 0, "-", "chunkmapper"], [139, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[137, 1, 1, "", "ChunkMapperApproach"], [137, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[137, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[137, 4, 1, "", "name"], [137, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[139, 1, 1, "", "SentenceEntityResolverApproach"], [139, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[139, 4, 1, "", "name"], [139, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph": [[141, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction": [[142, 0, 0, "-", "relation_extraction_dl"], [143, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[142, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[142, 2, 1, "", "loadSavedModel"], [142, 4, 1, "", "name"], [142, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[143, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[143, 2, 1, "", "loadSavedModel"], [143, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.seq_generation": [[146, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.legal.seq_generation.qa_ner_generator": [[146, 1, 1, "", "LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.sequence_classification": [[148, 0, 0, "-", "legal_bert_for_sequence_classification"], [149, 0, 0, "-", "legal_classifier_dl"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[148, 1, 1, "", "LegalBertForSequenceClassification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification": [[148, 2, 1, "", "loadSavedModel"], [148, 2, 1, "", "loadSavedModelOpenSource"], [148, 4, 1, "", "name"], [148, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[149, 1, 1, "", "LegalClassifierDLApproach"], [149, 1, 1, "", "LegalClassifierDLModel"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel": [[149, 4, 1, "", "name"], [149, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification": [[151, 0, 0, "-", "ner"]], "sparknlp_jsl.legal.token_classification.ner": [[152, 0, 0, "-", "legal_bert_for_token_classifier"], [153, 0, 0, "-", "legal_ner"], [154, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[152, 1, 1, "", "LegalBertForTokenClassification"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification": [[152, 2, 1, "", "loadSavedModel"], [152, 2, 1, "", "loadSavedModelOpenSource"], [152, 4, 1, "", "name"], [152, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[153, 1, 1, "", "LegalNerApproach"], [153, 1, 1, "", "LegalNerModel"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel": [[153, 2, 1, "", "loadSavedModel"], [153, 4, 1, "", "name"], [153, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[154, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[154, 2, 1, "", "load"], [154, 4, 1, "", "name"], [154, 2, 1, "", "pretrained"]], "sparknlp_jsl.modelTracer": [[155, 1, 1, "", "ModelTracer"]], "sparknlp_jsl.modelTracer.ModelTracer": [[155, 2, 1, "", "addUidCols"]], "sparknlp_jsl.pretrained": [[156, 1, 1, "", "InternalResourceDownloader"], [156, 6, 1, "", "printProgress"]], "sparknlp_jsl.pretrained.InternalResourceDownloader": [[156, 2, 1, "", "downloadModel"], [156, 2, 1, "", "returnPrivateModels"], [156, 2, 1, "", "returnPrivatePipelines"], [156, 2, 1, "", "showAvailableAnnotators"], [156, 2, 1, "", "showPrivateModels"], [156, 2, 1, "", "showPrivatePipelines"], [156, 2, 1, "", "showUnCategorizedResources"]], "sparknlp_jsl.structured_deidentification": [[157, 1, 1, "", "StructuredDeidentification"]], "sparknlp_jsl.structured_deidentification.StructuredDeidentification": [[157, 2, 1, "", "obfuscateColumns"]], "sparknlp_jsl.text_to_documents_columns": [[158, 1, 1, "", "TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns": [[158, 2, 1, "", "toDocumentsColumns"]], "sparknlp_jsl.training": [[159, 1, 1, "", "AnnotationToolJsonReader"], [159, 1, 1, "", "CantemistReader"], [159, 1, 1, "", "CodiEspReader"], [159, 1, 1, "", "SynonymAugmentationUMLS"], [159, 3, 1, "", "tf_graph"], [159, 3, 1, "", "tf_graph_1x"]], "sparknlp_jsl.training.AnnotationToolJsonReader": [[159, 2, 1, "", "generateAssertionTrainSet"], [159, 2, 1, "", "generateConll"], [159, 2, 1, "", "generatePlainAssertionTrainSet"], [159, 2, 1, "", "readDataset"]], "sparknlp_jsl.training.CantemistReader": [[159, 2, 1, "", "readDatasetTaskNer"]], "sparknlp_jsl.training.CodiEspReader": [[159, 2, 1, "", "readDatasetTaskX"]], "sparknlp_jsl.training.SynonymAugmentationUMLS": [[159, 2, 1, "", "augmentCsv"], [159, 2, 1, "", "augmentDataFrame"]], "sparknlp_jsl.updateModels": [[160, 1, 1, "", "UpdateModels"]], "sparknlp_jsl.updateModels.UpdateModels": [[160, 2, 1, "", "updateCacheModels"], [160, 2, 1, "", "updateModels"]], "sparknlp_jsl.util": [[161, 6, 1, "", "get_mt_samples"]], "sparknlp_jsl.utils": [[162, 0, 0, "-", "alab_utils"]], "sparknlp_jsl.utils.alab_utils": [[162, 6, 1, "", "get_ner_df"], [162, 6, 1, "", "get_ner_sentence_borders"], [162, 6, 1, "", "get_nlp_pos_pipeline"], [162, 6, 1, "", "get_nlp_regex_pos_pipeline"], [162, 6, 1, "", "get_nlp_regex_token_pipeline"], [162, 6, 1, "", "get_nlp_token_pipeline"], [162, 6, 1, "", "get_rel_df"], [162, 6, 1, "", "get_sentence_pipeline"], [162, 6, 1, "", "get_single_task_conll"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:data", "4": "py:attribute", "5": "py:exception", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"], "6": ["py", "function", "Python function"]}, "titleterms": {"get": 0, "start": 0, "requir": 0, "instal": 0, "spark": [0, 1], "nlp": [0, 1], "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 75, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 127, 128, 129, 130, 131, 133, 134, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], "sparknlp_jsl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "_tf_graph_build": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "assertion_dl": [2, 3, 25, 26], "assertion_model": [2, 25], "modul": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 127, 128, 130, 131, 133, 134, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164], "class": [2, 4, 6, 8, 9, 10, 13, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 109, 111, 114, 115, 118, 119, 120, 123, 124, 126, 131, 133, 134, 137, 139, 142, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160], "submodul": [3, 7, 11, 14, 21, 26, 30, 34, 37, 45, 53, 55, 60, 63, 66, 72, 74, 75, 77, 78, 86, 87, 89, 94, 104, 107, 110, 113, 117, 121, 125, 129, 132, 135, 138, 141, 145, 147, 151, 163], "generic_classifi": [4, 5, 6, 7, 8, 9, 27, 28, 29, 30, 31, 32, 73, 74], "basetfmodel": [4, 27], "build_model": [5, 28], "generic_classifier_model": [6, 29], "progresstrack": [8, 31], "set": [9, 32], "graph_build": [10, 33], "subpackag": [11, 34, 75, 108, 112, 116, 122, 129, 136, 140, 144, 150], "ner_dl": [12, 13, 14, 15, 16, 17, 35, 36, 37, 38, 39, 40], "create_graph": [12, 35], "function": [12, 23, 35, 127, 128, 129, 130, 156, 161, 162], "dataset_encod": [13, 36], "ner_model": [15, 38], "ner_model_sav": [16, 39], "sentence_group": [17, 40], "tf2contrib": [18, 19, 20, 21, 22, 23, 24], "core_rnn_cel": 18, "attribut": [18, 20, 22, 24, 129, 159], "fused_rnn_cel": 19, "gru_op": 20, "packag": [21, 75, 129], "lstm_op": 22, "rnn": 23, "rnn_cell": 24, "_tf_graph_builders_1x": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "alab": 41, "annot": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "annotation_merg": 42, "assert": [43, 44, 45, 103, 104, 131, 132], "assertiondl": [43, 103, 131], "assertion_dl_reg": 44, "chunker": [46, 47, 48, 49, 50, 51, 52, 53], "assertion_filter": 46, "chunk_convert": 47, "chunk_key_phrase_extract": 48, "chunk_sentence_splitt": 49, "chunker_filter": 50, "chunkmapp": [51, 109, 137], "chunkmapper_filter": 52, "classif": [54, 55, 56, 57, 58], "document_log_classifi": 54, "medical_bert_for_sequence_classif": 56, "medical_bert_for_token_classifi": 57, "medical_distilbert_for_sequence_classif": 58, "context": [59, 60], "contextual_pars": 59, "deid": [61, 62, 63, 64, 65, 105, 106, 107, 133, 134, 135], "deidentif": [61, 105, 133], "doccument_hashcod": 62, "reidentif": 64, "replac": 65, "disambigu": [66, 67], "ner_disambigu": 67, "doc2_chunk_intern": 68, "embed": [69, 70, 71, 72], "average_embed": 69, "bert_sentence_embed": 70, "entity_chunk_embed": 71, "merg": [76, 77], "chunker_merg": 76, "ner": [78, 79, 80, 81, 82, 83, 123, 124, 125, 126, 151, 152, 153, 154], "iob_tagg": 79, "medical_n": 80, "ner_chunk": 81, "ner_converter_intern": 82, "zero_shot_n": [83, 126, 154], "normal": [84, 85, 86], "date_norm": 84, "drug_norm": 85, "qa": [87, 88], "qa_ner_gener": [88, 118, 146], "re": [89, 90, 91, 92, 93], "relation_extract": [90, 113, 114, 115, 141, 142, 143], "relation_extraction_dl": [91, 114, 142], "relation_ner_chunk_filt": 92, "zero_shot_relation_extract": [93, 115, 143], "resolut": [94, 95, 96, 109, 110, 111, 137, 138, 139], "resolver_merg": 95, "sentence_entity_resolv": [96, 111, 139], "router": 97, "tf_graph_build": 98, "paramet": 98, "base": 99, "compat": 100, "custom_transform": 101, "eval": 102, "financ": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "chunk_classif": [103, 104, 105, 106, 107, 108, 109, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139], "document_hashcod": [106, 134], "graph": [112, 113, 114, 115, 140, 141, 142, 143], "seq_gener": [117, 118, 145, 146], "sequence_classif": [119, 120, 121, 147, 148, 149], "finance_bert_for_sequence_classif": 119, "finance_classifier_dl": 120, "token_classif": [122, 123, 124, 125, 126, 150, 151, 152, 153, 154], "finance_bert_for_token_classifi": 123, "finance_n": 124, "freez": 127, "intern": 130, "legal": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "legal_bert_for_sequence_classif": 148, "legal_classifier_dl": 149, "legal_bert_for_token_classifi": 152, "legal_n": 153, "modeltrac": 155, "pretrain": 156, "structured_deidentif": 157, "text_to_documents_column": 158, "train": 159, "updatemodel": 160, "util": [161, 162, 163], "alab_util": 162, "api": 164, "refer": 164}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "Module Contents": [[2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [54, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [61, "module-contents"], [62, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [76, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [105, "module-contents"], [106, "module-contents"], [109, "module-contents"], [111, "module-contents"], [114, "module-contents"], [115, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [123, "module-contents"], [124, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [137, "module-contents"], [139, "module-contents"], [142, "module-contents"], [143, "module-contents"], [146, "module-contents"], [148, "module-contents"], [149, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [6, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [36, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [54, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [61, "classes"], [62, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [73, "classes"], [76, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [88, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [105, "classes"], [106, "classes"], [109, "classes"], [111, "classes"], [114, "classes"], [115, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [123, "classes"], [124, "classes"], [126, "classes"], [131, "classes"], [133, "classes"], [134, "classes"], [137, "classes"], [139, "classes"], [142, "classes"], [143, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "Submodules": [[3, "submodules"], [7, "submodules"], [11, "submodules"], [14, "submodules"], [21, "submodules"], [26, "submodules"], [30, "submodules"], [34, "submodules"], [37, "submodules"], [45, "submodules"], [53, "submodules"], [55, "submodules"], [60, "submodules"], [63, "submodules"], [66, "submodules"], [72, "submodules"], [74, "submodules"], [75, "submodules"], [77, "submodules"], [78, "submodules"], [86, "submodules"], [87, "submodules"], [89, "submodules"], [94, "submodules"], [104, "submodules"], [107, "submodules"], [110, "submodules"], [113, "submodules"], [117, "submodules"], [121, "submodules"], [125, "submodules"], [129, "submodules"], [132, "submodules"], [135, "submodules"], [138, "submodules"], [141, "submodules"], [145, "submodules"], [147, "submodules"], [151, "submodules"], [163, "submodules"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "Subpackages": [[11, "subpackages"], [34, "subpackages"], [75, "subpackages"], [108, "subpackages"], [112, "subpackages"], [116, "subpackages"], [122, "subpackages"], [129, "subpackages"], [136, "subpackages"], [140, "subpackages"], [144, "subpackages"], [150, "subpackages"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "Functions": [[12, "functions"], [23, "functions"], [35, "functions"], [127, "functions"], [128, "functions"], [129, "functions"], [130, "functions"], [156, "functions"], [161, "functions"], [162, "functions"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "Attributes": [[18, "attributes"], [20, "attributes"], [22, "attributes"], [24, "attributes"], [129, "attributes"], [159, "attributes"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "Package Contents": [[21, "package-contents"], [75, "package-contents"], [129, "package-contents"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion": [[45, "module-sparknlp_jsl.annotator.assertion"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[46, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[47, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[48, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[50, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[51, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[52, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker": [[53, "module-sparknlp_jsl.annotator.chunker"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[54, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "sparknlp_jsl.annotator.classification": [[55, "module-sparknlp_jsl.annotator.classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[56, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[57, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[58, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.context.contextual_parser": [[59, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[60, "module-sparknlp_jsl.annotator.context"]], "sparknlp_jsl.annotator.deid.deIdentification": [[61, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[62, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[63, "module-sparknlp_jsl.annotator.deid"]], "sparknlp_jsl.annotator.deid.reIdentification": [[64, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "sparknlp_jsl.annotator.deid.replacer": [[65, "module-sparknlp_jsl.annotator.deid.replacer"]], "sparknlp_jsl.annotator.disambiguation": [[66, "module-sparknlp_jsl.annotator.disambiguation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[67, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[68, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[69, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[70, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[71, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings": [[72, "module-sparknlp_jsl.annotator.embeddings"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[73, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier": [[74, "module-sparknlp_jsl.annotator.generic_classifier"]], "sparknlp_jsl.annotator": [[75, "module-sparknlp_jsl.annotator"]], "sparknlp_jsl.annotator.merge.chunker_merge": [[76, "module-sparknlp_jsl.annotator.merge.chunker_merge"]], "sparknlp_jsl.annotator.merge": [[77, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[78, "module-sparknlp_jsl.annotator.ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[79, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "sparknlp_jsl.annotator.ner.medical_ner": [[80, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[81, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[82, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[83, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[84, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[85, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[86, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa": [[87, "module-sparknlp_jsl.annotator.qa"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[88, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "sparknlp_jsl.annotator.re": [[89, "module-sparknlp_jsl.annotator.re"]], "sparknlp_jsl.annotator.re.relation_extraction": [[90, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[91, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[92, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[93, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[94, "module-sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[95, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[96, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "sparknlp_jsl.annotator.router": [[97, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.tf_graph_builder": [[98, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "Parameters": [[98, "parameters"]], "sparknlp_jsl.base": [[99, "module-sparknlp_jsl.base"]], "sparknlp_jsl.compatibility": [[100, "module-sparknlp_jsl.compatibility"]], "sparknlp_jsl.custom_transformer": [[101, "module-sparknlp_jsl.custom_transformer"]], "sparknlp_jsl.eval": [[102, "module-sparknlp_jsl.eval"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[103, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[104, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[105, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[106, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[107, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[108, "module-sparknlp_jsl.finance.chunk_classification"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[109, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[110, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[111, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[112, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[113, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[114, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[115, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[116, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.finance.seq_generation": [[117, "module-sparknlp_jsl.finance.seq_generation"]], "sparknlp_jsl.finance.seq_generation.qa_ner_generator": [[118, "module-sparknlp_jsl.finance.seq_generation.qa_ner_generator"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[119, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[120, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification": [[121, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.token_classification": [[122, "module-sparknlp_jsl.finance.token_classification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[123, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[124, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[125, "module-sparknlp_jsl.finance.token_classification.ner"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[126, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.freeze": [[127, "module-sparknlp_jsl.freeze"]], "sparknlp_jsl.functions": [[128, "module-sparknlp_jsl.functions"]], "sparknlp_jsl": [[129, "module-sparknlp_jsl"]], "sparknlp_jsl.internal": [[130, "module-sparknlp_jsl.internal"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[131, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[132, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[133, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[134, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[135, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[136, "module-sparknlp_jsl.legal.chunk_classification"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[137, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[138, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[139, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[140, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[141, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[142, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[143, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[144, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.seq_generation": [[145, "module-sparknlp_jsl.legal.seq_generation"]], "sparknlp_jsl.legal.seq_generation.qa_ner_generator": [[146, "module-sparknlp_jsl.legal.seq_generation.qa_ner_generator"]], "sparknlp_jsl.legal.sequence_classification": [[147, "module-sparknlp_jsl.legal.sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[148, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[149, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "sparknlp_jsl.legal.token_classification": [[150, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[151, "module-sparknlp_jsl.legal.token_classification.ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[152, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[153, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[154, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.modelTracer": [[155, "module-sparknlp_jsl.modelTracer"]], "sparknlp_jsl.pretrained": [[156, "module-sparknlp_jsl.pretrained"]], "sparknlp_jsl.structured_deidentification": [[157, "module-sparknlp_jsl.structured_deidentification"]], "sparknlp_jsl.text_to_documents_columns": [[158, "module-sparknlp_jsl.text_to_documents_columns"]], "sparknlp_jsl.training": [[159, "module-sparknlp_jsl.training"]], "sparknlp_jsl.updateModels": [[160, "module-sparknlp_jsl.updateModels"]], "sparknlp_jsl.util": [[161, "module-sparknlp_jsl.util"]], "sparknlp_jsl.utils.alab_utils": [[162, "module-sparknlp_jsl.utils.alab_utils"]], "sparknlp_jsl.utils": [[163, "module-sparknlp_jsl.utils"]], "API Reference": [[164, "api-reference"]], "Modules": [[164, "modules"]]}, "indexentries": {"assertionmodel (class in sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel"]], "add_bidirectional_lstm() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"]], "add_optimizer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_optimizer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_optimizer"]], "calc_accuracy() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.calc_accuracy"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.calc_accuracy"]], "confusion_matrix() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.confusion_matrix"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.confusion_matrix"]], "fully_connected_layer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"]], "module": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"], [3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"], [4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"], [5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"], [6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"], [7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"], [8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"], [9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"], [10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"], [11, "module-sparknlp_jsl._tf_graph_builders"], [12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"], [13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"], [14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"], [15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"], [16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"], [17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"], [18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"], [19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"], [20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"], [21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"], [22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"], [23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"], [24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"], [25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"], [26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"], [27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"], [28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"], [29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"], [30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"], [31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"], [32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"], [33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"], [34, "module-sparknlp_jsl._tf_graph_builders_1x"], [35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"], [36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"], [37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"], [38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"], [39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"], [40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"], [41, "module-sparknlp_jsl.alab"], [42, "module-sparknlp_jsl.annotator.annotation_merger"], [43, "module-sparknlp_jsl.annotator.assertion.assertionDL"], [44, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"], [45, "module-sparknlp_jsl.annotator.assertion"], [46, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"], [47, "module-sparknlp_jsl.annotator.chunker.chunk_converter"], [48, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"], [49, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"], [50, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"], [51, "module-sparknlp_jsl.annotator.chunker.chunkmapper"], [52, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"], [53, "module-sparknlp_jsl.annotator.chunker"], [54, "module-sparknlp_jsl.annotator.classification.document_log_classifier"], [55, "module-sparknlp_jsl.annotator.classification"], [56, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"], [57, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"], [58, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"], [59, "module-sparknlp_jsl.annotator.context.contextual_parser"], [60, "module-sparknlp_jsl.annotator.context"], [61, "module-sparknlp_jsl.annotator.deid.deIdentification"], [62, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"], [63, "module-sparknlp_jsl.annotator.deid"], [64, "module-sparknlp_jsl.annotator.deid.reIdentification"], [65, "module-sparknlp_jsl.annotator.deid.replacer"], [66, "module-sparknlp_jsl.annotator.disambiguation"], [67, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"], [68, "module-sparknlp_jsl.annotator.doc2_chunk_internal"], [69, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"], [70, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"], [71, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"], [72, "module-sparknlp_jsl.annotator.embeddings"], [73, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"], [74, "module-sparknlp_jsl.annotator.generic_classifier"], [75, "module-sparknlp_jsl.annotator"], [76, "module-sparknlp_jsl.annotator.merge.chunker_merge"], [77, "module-sparknlp_jsl.annotator.merge"], [78, "module-sparknlp_jsl.annotator.ner"], [79, "module-sparknlp_jsl.annotator.ner.iob_tagger"], [80, "module-sparknlp_jsl.annotator.ner.medical_ner"], [81, "module-sparknlp_jsl.annotator.ner.ner_chunker"], [82, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"], [83, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"], [84, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"], [85, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"], [86, "module-sparknlp_jsl.annotator.normalizer"], [87, "module-sparknlp_jsl.annotator.qa"], [88, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"], [89, "module-sparknlp_jsl.annotator.re"], [90, "module-sparknlp_jsl.annotator.re.relation_extraction"], [91, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"], [92, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"], [93, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"], [94, "module-sparknlp_jsl.annotator.resolution"], [95, "module-sparknlp_jsl.annotator.resolution.resolver_merger"], [96, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"], [97, "module-sparknlp_jsl.annotator.router"], [98, "module-sparknlp_jsl.annotator.tf_graph_builder"], [99, "module-sparknlp_jsl.base"], [100, "module-sparknlp_jsl.compatibility"], [101, "module-sparknlp_jsl.custom_transformer"], [102, "module-sparknlp_jsl.eval"], [103, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"], [104, "module-sparknlp_jsl.finance.chunk_classification.assertion"], [105, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"], [106, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"], [107, "module-sparknlp_jsl.finance.chunk_classification.deid"], [108, "module-sparknlp_jsl.finance.chunk_classification"], [109, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"], [110, "module-sparknlp_jsl.finance.chunk_classification.resolution"], [111, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"], [112, "module-sparknlp_jsl.finance.graph"], [113, "module-sparknlp_jsl.finance.graph.relation_extraction"], [114, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"], [115, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"], [116, "module-sparknlp_jsl.finance"], [117, "module-sparknlp_jsl.finance.seq_generation"], [118, "module-sparknlp_jsl.finance.seq_generation.qa_ner_generator"], [119, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"], [120, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"], [121, "module-sparknlp_jsl.finance.sequence_classification"], [122, "module-sparknlp_jsl.finance.token_classification"], [123, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"], [124, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"], [125, "module-sparknlp_jsl.finance.token_classification.ner"], [126, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"], [127, "module-sparknlp_jsl.freeze"], [128, "module-sparknlp_jsl.functions"], [129, "module-sparknlp_jsl"], [130, "module-sparknlp_jsl.internal"], [131, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"], [132, "module-sparknlp_jsl.legal.chunk_classification.assertion"], [133, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"], [134, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"], [135, "module-sparknlp_jsl.legal.chunk_classification.deid"], [136, "module-sparknlp_jsl.legal.chunk_classification"], [137, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"], [138, "module-sparknlp_jsl.legal.chunk_classification.resolution"], [139, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"], [140, "module-sparknlp_jsl.legal.graph"], [141, "module-sparknlp_jsl.legal.graph.relation_extraction"], [142, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"], [143, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"], [144, "module-sparknlp_jsl.legal"], [145, "module-sparknlp_jsl.legal.seq_generation"], [146, "module-sparknlp_jsl.legal.seq_generation.qa_ner_generator"], [147, "module-sparknlp_jsl.legal.sequence_classification"], [148, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"], [149, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"], [150, "module-sparknlp_jsl.legal.token_classification"], [151, "module-sparknlp_jsl.legal.token_classification.ner"], [152, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"], [153, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"], [154, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"], [155, "module-sparknlp_jsl.modelTracer"], [156, "module-sparknlp_jsl.pretrained"], [157, "module-sparknlp_jsl.structured_deidentification"], [158, "module-sparknlp_jsl.text_to_documents_columns"], [159, "module-sparknlp_jsl.training"], [160, "module-sparknlp_jsl.updateModels"], [161, "module-sparknlp_jsl.util"], [162, "module-sparknlp_jsl.utils.alab_utils"], [163, "module-sparknlp_jsl.utils"]], "persist_graph() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.persist_graph"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.persist_graph"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "train() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.train"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.train"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel"]], "build() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.build"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.build"]], "export_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.export_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.export_graph"]], "fit_dataset() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"]], "generate_batch() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.generate_batch"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.generate_batch"]], "get_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.get_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.get_graph"]], "is_built() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.is_built"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.is_built"]], "load_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.load_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.load_graph"]], "run_tests() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.run_tests"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "build() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.build"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.build"]], "export_graph() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"]], "run_tests() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker"]], "get_report_interval() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.get_report_interval"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.get_report_interval"]], "on_batch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_batch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_batch"]], "on_epoch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_epoch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_epoch"]], "on_training_end() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_end"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_end"]], "on_training_start() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_start"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_start"]], "print_progress() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.print_progress"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "acc (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.ACC"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.ACC"]], "datasets_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DATASETS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DATASETS_DIR"]], "default_model_node_names (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"]], "evaluate (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.EVALUATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.EVALUATE"]], "init (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.INIT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.INIT"]], "inputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.INPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.INPUTS"]], "learning_rate (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"]], "logs_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.LOGS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.LOGS_DIR"]], "loss (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LOSS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LOSS"]], "models_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.MODELS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.MODELS_DIR"]], "model_ops (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS"]], "outputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"]], "predict (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.PREDICT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.PREDICT"]], "run_types (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings"]], "targets (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.TARGETS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.TARGETS"]], "train (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.TRAIN"]], "train (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory"]], "tensorflowaddonsneeded": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TensorflowAddonsNeeded"]], "wrongtfversion": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.WrongTFVersion"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.WrongTFVersion"]], "build() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.build"]], "build() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.build"]], "build() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.build"]], "build() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.build"]], "check_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.check_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.check_build_params"]], "get_build_param() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_param"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_param"]], "get_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params"]], "get_build_params_with_defaults() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params_with_defaults"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params_with_defaults"]], "get_model_build_param_explanations() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_params() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_params"]], "get_model_filename() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_filename"]], "get_model_filename() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"]], "get_model_filename() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_filename"]], "get_model_filename() (relationextractiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"]], "get_model_filename() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_filename"]], "get_models() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.get_models"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.get_models"]], "print_model_params() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.print_model_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.print_model_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "supports_auto_file_name() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders.ner_dl.create_graph)": [[12, "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder"]], "encode() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.encode"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.encode"]], "get_char_indexes() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"]], "normalize() (datasetencoder static method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.normalize"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.normalize"]], "shuffle() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.shuffle"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel"]], "add_bilstm_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_bilstm_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_bilstm_char_repr"]], "add_cnn_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_cnn_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_cnn_char_repr"]], "add_context_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_context_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_context_repr"]], "add_inference_layer() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_inference_layer"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_inference_layer"]], "add_pretrained_word_embeddings() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"]], "add_training_op() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_training_op"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_training_op"]], "close() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.close"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.close"]], "fill() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.fill"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.fill"]], "get_char_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_char_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_char_ids"]], "get_from_batch() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_from_batch"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_from_batch"]], "get_sentence_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_lengths"]], "get_sentence_token_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_token_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_token_lengths"]], "get_softmax() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_softmax"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_softmax"]], "get_tag_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_tag_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_tag_ids"]], "get_word_embeddings() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_embeddings"]], "get_word_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_lengths"]], "init_variables() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.init_variables"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.init_variables"]], "measure() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.measure"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.measure"]], "num_trues() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.num_trues"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.num_trues"]], "predict() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.predict"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.predict"]], "slice() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.slice"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "train() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.train"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.train"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver"]], "restore_tensorflow_state() (nermodelsaver static method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"]], "save() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save"]], "save_models() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save_models"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper"]], "get_bucket_id() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"]], "slice() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.slice"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "embeddingwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper"]], "inputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper"]], "outputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper"]], "rnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.RNNCell"]], "call() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.call"]], "call() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.call"]], "call() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "zero_state() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.zero_state"]], "zero_state() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.zero_state"]], "zero_state() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.zero_state"]], "fusedrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCell"]], "fusedrnncelladaptor (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCellAdaptor"]], "timereversedfusedrnn (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "grublockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell"]], "grublockcellv2 (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.LayerRNNCell"]], "build() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.build"]], "build() (grublockcellv2 method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2.build"]], "call() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "tf (in module sparknlp_jsl._tf_graph_builders.tf2contrib)": [[21, "sparknlp_jsl._tf_graph_builders.tf2contrib.tf"]], "lstmblockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell"]], "lstmblockfusedcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell"]], "lstmblockwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LayerRNNCell"]], "build() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.build"]], "build() (lstmblockfusedcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell.build"]], "call() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.call"]], "call() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.call"]], "num_units() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "stack_bidirectional_dynamic_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_dynamic_rnn"]], "stack_bidirectional_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_rnn"]], "attentioncellwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper"]], "bidirectionalgridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell"]], "cfncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell"]], "compiledwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper"]], "conv1dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv1DLSTMCell"]], "conv2dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv2DLSTMCell"]], "conv3dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv3DLSTMCell"]], "convlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell"]], "coupledinputforgetgatelstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell"]], "glstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell"]], "gridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell"]], "highwaywrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper"]], "indrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell"]], "indygrucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell"]], "indylstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell"]], "intersectionrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell"]], "layernormbasiclstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell"]], "layernormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell"]], "minimalrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell"]], "nascell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell"]], "ntmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell"]], "ntmcontrollerstate (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMControllerState"]], "phasedlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell"]], "srucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell"]], "timefreqlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell"]], "ugrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell"]], "weightnormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell"]], "build() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.build"]], "build() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.build"]], "build() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.build"]], "build() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.build"]], "build() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.build"]], "build() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.build"]], "build() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.build"]], "build() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.build"]], "call() (attentioncellwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper.call"]], "call() (bidirectionalgridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell.call"]], "call() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.call"]], "call() (convlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell.call"]], "call() (coupledinputforgetgatelstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell.call"]], "call() (glstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell.call"]], "call() (gridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell.call"]], "call() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.call"]], "call() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.call"]], "call() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.call"]], "call() (intersectionrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell.call"]], "call() (layernormbasiclstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell.call"]], "call() (layernormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell.call"]], "call() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.call"]], "call() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.call"]], "call() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.call"]], "call() (phasedlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell.call"]], "call() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.call"]], "call() (timefreqlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell.call"]], "call() (ugrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell.call"]], "call() (weightnormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "zero_state() (compiledwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper.zero_state"]], "zero_state() (highwaywrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper.zero_state"]], "zero_state() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.zero_state"]], "assertionmodel (class in sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model)": [[25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel)": [[27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model)": [[29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker)": [[31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "model_ops (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS"]], "run_types (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph)": [[35, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder)": [[36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model)": [[38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver)": [[39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper)": [[40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "annotationlab (class in sparknlp_jsl.alab)": [[41, "sparknlp_jsl.alab.AnnotationLab"]], "create_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.create_project"]], "delete_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_project"]], "delete_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_tasks"]], "generate_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.generate_preannotations"]], "get_all_projects() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_all_projects"]], "get_annotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_annotations"]], "get_assertion_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_assertion_data"]], "get_classification_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_classification_data"]], "get_conll_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_conll_data"]], "get_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_project_config"]], "get_relation_extraction_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_relation_extraction_data"]], "set_credentials() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_credentials"]], "set_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_project_config"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "upload_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_preannotations"]], "upload_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_tasks"]], "annotationmerger (class in sparknlp_jsl.annotator.annotation_merger)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger"]], "inputtype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputType"]], "name (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.name"]], "setinputtype() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputType"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "assertiondlapproach (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel"]], "batchsize (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.batchSize"]], "classes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.classes"]], "configprotobytes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.configProtoBytes"]], "configprotobytes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.configProtoBytes"]], "dropout (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.dropout"]], "enableoutputlogs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"]], "endcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.endCol"]], "epochs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.epochs"]], "evaluationlogextended (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.evaluationLogExtended"]], "graphfile (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFile"]], "graphfolder (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFolder"]], "includeconfidence (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.includeConfidence"]], "includeconfidence (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.includeConfidence"]], "label (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.label"]], "learningrate (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.learningRate"]], "maxsentlen (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.maxSentLen"]], "maxsentlen (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.maxSentLen"]], "name (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.name"], [103, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.name"], [131, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.name"]], "outputlogspath (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputLogsPath"]], "pretrained() (assertiondlmodel static method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.pretrained"], [103, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"], [131, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"]], "scopewindow (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.scopeWindow"]], "scopewindow (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.scopeWindow"]], "setbatchsize() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setBatchSize"]], "setconfigprotobytes() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"]], "setdropout() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDropout"]], "setenableoutputlogs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"]], "setendcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEndCol"]], "setepochs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEpochs"]], "setevaluationlogextended() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEvaluationLogExtended"]], "setgraphfile() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFile"]], "setgraphfolder() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFolder"]], "setincludeconfidence() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"]], "setincludeconfidence() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"]], "setlabelcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLabelCol"]], "setlearningrate() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLearningRate"]], "setmaxsentlen() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"]], "setoutputlogspath() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"]], "setscopewindow() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setScopeWindow"]], "setscopewindow() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setScopeWindow"]], "setstartcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setStartCol"]], "settestdataset() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setTestDataset"]], "setvalidationsplit() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setValidationSplit"]], "setverbose() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setVerbose"]], "sparknlp_jsl.annotator.assertion.assertiondl": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "startcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.startCol"]], "targetnerlabels (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.targetNerLabels"]], "testdataset (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.testDataset"]], "validationsplit (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.validationSplit"]], "verbose (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.verbose"]], "assertionlogregapproach (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach"]], "assertionlogregmodel (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel"]], "afterparam (assertionlogregapproach attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.afterParam"]], "afterparam (assertionlogregmodel attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.afterParam"]], "beforeparam (assertionlogregapproach attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.beforeParam"]], "beforeparam (assertionlogregmodel attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.beforeParam"]], "enetparam (assertionlogregapproach attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.eNetParam"]], "endcol (assertionlogregapproach attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.endCol"]], "endcol (assertionlogregmodel attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.endCol"]], "label (assertionlogregapproach attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.label"]], "maxiter (assertionlogregapproach attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.maxIter"]], "name (assertionlogregmodel attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.name"]], "nercol (assertionlogregapproach attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.nerCol"]], "nercol (assertionlogregmodel attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.nerCol"]], "pretrained() (assertionlogregmodel static method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.pretrained"]], "regparam (assertionlogregapproach attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.regParam"]], "setafter() (assertionlogregapproach method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setAfter"]], "setbefore() (assertionlogregapproach method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setBefore"]], "setendcol() (assertionlogregapproach method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEndCol"]], "setenet() (assertionlogregapproach method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEnet"]], "setlabelcol() (assertionlogregapproach method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLabelCol"]], "setmaxiter() (assertionlogregapproach method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setMaxIter"]], "setnercol() (assertionlogregapproach method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setNerCol"]], "setreg() (assertionlogregapproach method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setReg"]], "setstartcol() (assertionlogregapproach method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setStartCol"]], "settargetnerlabels() (assertionlogregapproach method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setTargetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "startcol (assertionlogregapproach attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.startCol"]], "startcol (assertionlogregmodel attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.startCol"]], "targetnerlabels (assertionlogregapproach attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.targetNerLabels"]], "targetnerlabels (assertionlogregmodel attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.targetNerLabels"]], "sparknlp_jsl.annotator.assertion": [[45, "module-sparknlp_jsl.annotator.assertion"]], "assertionfilterer (class in sparknlp_jsl.annotator.chunker.assertion_filterer)": [[46, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer"]], "criteria (assertionfilterer attribute)": [[46, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.criteria"]], "entitiesconfidence (assertionfilterer attribute)": [[46, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.entitiesConfidence"]], "name (assertionfilterer attribute)": [[46, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.name"]], "regex (assertionfilterer attribute)": [[46, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.regex"]], "setcriteria() (assertionfilterer method)": [[46, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCriteria"]], "setregex() (assertionfilterer method)": [[46, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setRegex"]], "setwhitelist() (assertionfilterer method)": [[46, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setWhiteList"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[46, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "whitelist (assertionfilterer attribute)": [[46, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.whiteList"]], "chunkconverter (class in sparknlp_jsl.annotator.chunker.chunk_converter)": [[47, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter"]], "name (chunkconverter attribute)": [[47, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.name"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[47, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "chunkkeyphraseextraction (class in sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction"]], "concatenatesentences (chunkkeyphraseextraction attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.concatenateSentences"]], "divergence (chunkkeyphraseextraction attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.divergence"]], "documentlevelprocessing (chunkkeyphraseextraction attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.documentLevelProcessing"]], "droppunctuation (chunkkeyphraseextraction attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dropPunctuation"]], "name (chunkkeyphraseextraction attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.name"]], "pretrained() (chunkkeyphraseextraction static method)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.pretrained"]], "selectmostdifferent (chunkkeyphraseextraction attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.selectMostDifferent"]], "setconcatenatesentences() (chunkkeyphraseextraction method)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConcatenateSentences"]], "setdivergence() (chunkkeyphraseextraction method)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDivergence"]], "setdocumentlevelprocessing() (chunkkeyphraseextraction method)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDocumentLevelProcessing"]], "setdroppunctuation() (chunkkeyphraseextraction method)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDropPunctuation"]], "setselectmostdifferent() (chunkkeyphraseextraction method)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setSelectMostDifferent"]], "settopn() (chunkkeyphraseextraction method)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setTopN"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[48, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "topn (chunkkeyphraseextraction attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.topN"]], "chunksentencesplitter (class in sparknlp_jsl.annotator.chunker.chunk_sentence_splitter)": [[49, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter"]], "defaultentity (chunksentencesplitter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.defaultEntity"]], "groupbysentences (chunksentencesplitter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.groupBySentences"]], "insertchunk (chunksentencesplitter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.insertChunk"]], "name (chunksentencesplitter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.name"]], "setdefaultentity() (chunksentencesplitter method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setDefaultEntity"]], "setgroupbysentences() (chunksentencesplitter method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setGroupBySentences"]], "setinsertchunk() (chunksentencesplitter method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "chunkfilterer (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer"]], "chunkfiltererapproach (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach"]], "blacklist (chunkfilterer attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.blackList"]], "blacklist (chunkfiltererapproach attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.blackList"]], "criteria (chunkfilterer attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.criteria"]], "criteria (chunkfiltererapproach attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.criteria"]], "entitiesconfidenceresource (chunkfiltererapproach attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResource"]], "filtervalue (chunkfilterer attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.filterValue"]], "filtervalue (chunkfiltererapproach attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.filterValue"]], "name (chunkfilterer attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.name"]], "name (chunkfiltererapproach attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.name"]], "regex (chunkfilterer attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.regex"]], "regex (chunkfiltererapproach attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.regex"]], "setblacklist() (chunkfilterer method)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setBlackList"]], "setblacklist() (chunkfiltererapproach method)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setBlackList"]], "setcriteria() (chunkfilterer method)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setCriteria"]], "setcriteria() (chunkfiltererapproach method)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setCriteria"]], "setentitiesconfidenceresource() (chunkfiltererapproach method)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResource"]], "setfilterentity() (chunkfilterer method)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterEntity"]], "setfilterentity() (chunkfiltererapproach method)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterEntity"]], "setregex() (chunkfilterer method)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setRegex"]], "setregex() (chunkfiltererapproach method)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setRegex"]], "setwhitelist() (chunkfilterer method)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setWhiteList"]], "setwhitelist() (chunkfiltererapproach method)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setWhiteList"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[50, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "whitelist (chunkfilterer attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.whiteList"]], "whitelist (chunkfiltererapproach attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.whiteList"]], "chunkmapperapproach (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel"]], "allowmultitokenchunk (chunkmapperapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.allowMultiTokenChunk"]], "allowmultitokenchunk (chunkmappermodel attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.allowMultiTokenChunk"]], "dictionary (chunkmapperapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.dictionary"]], "lowercase (chunkmapperapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.lowerCase"]], "lowercase (chunkmappermodel attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.lowerCase"]], "multivaluesrelations (chunkmapperapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.multivaluesRelations"]], "multivaluesrelations (chunkmappermodel attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.multivaluesRelations"]], "name (chunkmapperapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.name"], [109, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"], [137, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"]], "name (chunkmappermodel attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.name"], [109, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"], [137, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"]], "pretrained() (chunkmappermodel static method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.pretrained"], [109, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"], [137, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"]], "rel (chunkmapperapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.rel"]], "rel (chunkmappermodel attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.rel"]], "rels (chunkmapperapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.rels"]], "rels (chunkmappermodel attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.rels"]], "setallowmultitokenchunk() (chunkmapperapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setAllowMultiTokenChunk"]], "setallowmultitokenchunk() (chunkmappermodel method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setAllowMultiTokenChunk"]], "setdictionary() (chunkmapperapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDictionary"]], "setlowercase() (chunkmapperapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setLowerCase"]], "setlowercase() (chunkmappermodel method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setLowerCase"]], "setmultivaluesrelations() (chunkmapperapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMultivaluesRelations"]], "setmultivaluesrelations() (chunkmappermodel method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setMultivaluesRelations"]], "setrel() (chunkmapperapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setRel"]], "setrel() (chunkmappermodel method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setRel"]], "setrels() (chunkmapperapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setRels"]], "setrels() (chunkmappermodel method)": [[51, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[51, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "chunkmapperfilterer (class in sparknlp_jsl.annotator.chunker.chunkmapper_filterer)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer"]], "name (chunkmapperfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.name"]], "returncriteria (chunkmapperfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.returnCriteria"]], "setreturncriteria() (chunkmapperfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[52, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker": [[53, "module-sparknlp_jsl.annotator.chunker"]], "documentlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach"]], "documentlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel"]], "classificationmodel (documentlogregclassifiermodel attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.classificationModel"]], "classificationmodelpath (documentlogregclassifierapproach attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.classificationModelPath"]], "fitintercept (documentlogregclassifierapproach attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitIntercept"]], "labelcol (documentlogregclassifierapproach attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labelCol"]], "labels (documentlogregclassifierapproach attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labels"]], "labels (documentlogregclassifiermodel attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.labels"]], "maxiter (documentlogregclassifierapproach attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.maxIter"]], "mergechunks (documentlogregclassifiermodel attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.mergeChunks"]], "name (documentlogregclassifiermodel attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.name"]], "pretrained() (documentlogregclassifiermodel static method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.pretrained"]], "setclassificationmodel() (documentlogregclassifiermodel method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setClassificationModel"]], "setclassificationmodelpath() (documentlogregclassifierapproach method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentlogregclassifierapproach method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setFitIntercept"]], "setlabelcolumn() (documentlogregclassifierapproach method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabelColumn"]], "setlabels() (documentlogregclassifierapproach method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabels"]], "setlabels() (documentlogregclassifiermodel method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLabels"]], "setmaxiter() (documentlogregclassifierapproach method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setMaxIter"]], "setmergechunks() (documentlogregclassifiermodel method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setMergeChunks"]], "settol() (documentlogregclassifierapproach method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setTol"]], "setvectorizationmodel() (documentlogregclassifiermodel method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentlogregclassifierapproach method)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[54, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "tol (documentlogregclassifierapproach attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.tol"]], "vectorizationmodel (documentlogregclassifiermodel attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentlogregclassifierapproach attribute)": [[54, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.vectorizationModelPath"]], "sparknlp_jsl.annotator.classification": [[55, "module-sparknlp_jsl.annotator.classification"]], "medicalbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification"]], "coalescesentences (medicalbertforsequenceclassification attribute)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicalbertforsequenceclassification attribute)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicalbertforsequenceclassification method)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getClasses"]], "loadsavedmodel() (medicalbertforsequenceclassification static method)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertforsequenceclassification static method)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertforsequenceclassification attribute)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.maxSentenceLength"]], "name (medicalbertforsequenceclassification attribute)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.name"]], "pretrained() (medicalbertforsequenceclassification static method)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicalbertforsequenceclassification method)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicalbertforsequenceclassification method)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertforsequenceclassification method)": [[56, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[56, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "medicalbertfortokenclassifier (class in sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier)": [[57, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier"]], "configprotobytes (medicalbertfortokenclassifier attribute)": [[57, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.configProtoBytes"]], "getclasses() (medicalbertfortokenclassifier method)": [[57, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getClasses"]], "loadsavedmodel() (medicalbertfortokenclassifier static method)": [[57, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertfortokenclassifier static method)": [[57, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertfortokenclassifier attribute)": [[57, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.maxSentenceLength"]], "name (medicalbertfortokenclassifier attribute)": [[57, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.name"]], "pretrained() (medicalbertfortokenclassifier static method)": [[57, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.pretrained"]], "setconfigprotobytes() (medicalbertfortokenclassifier method)": [[57, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertfortokenclassifier method)": [[57, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[57, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "medicaldistilbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification"]], "coalescesentences (medicaldistilbertforsequenceclassification attribute)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicaldistilbertforsequenceclassification attribute)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicaldistilbertforsequenceclassification method)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getClasses"]], "loadsavedmodel() (medicaldistilbertforsequenceclassification static method)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicaldistilbertforsequenceclassification static method)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicaldistilbertforsequenceclassification attribute)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.maxSentenceLength"]], "name (medicaldistilbertforsequenceclassification attribute)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.name"]], "pretrained() (medicaldistilbertforsequenceclassification static method)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicaldistilbertforsequenceclassification method)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicaldistilbertforsequenceclassification method)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicaldistilbertforsequenceclassification method)": [[58, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[58, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "contextualparserapproach (class in sparknlp_jsl.annotator.context.contextual_parser)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach"]], "contextualparsermodel (class in sparknlp_jsl.annotator.context.contextual_parser)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel"]], "casesensitive (contextualparserapproach attribute)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.caseSensitive"]], "casesensitive (contextualparsermodel attribute)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.caseSensitive"]], "completecontextmatch (contextualparserapproach attribute)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.completeContextMatch"]], "dictionary (contextualparserapproach attribute)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.dictionary"]], "jsonpath (contextualparserapproach attribute)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.jsonPath"]], "optionalcontextrules (contextualparserapproach attribute)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalContextRules"]], "optionalcontextrules (contextualparsermodel attribute)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalContextRules"]], "prefixandsuffixmatch (contextualparserapproach attribute)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.prefixAndSuffixMatch"]], "prefixandsuffixmatch (contextualparsermodel attribute)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.prefixAndSuffixMatch"]], "setcasesensitive() (contextualparserapproach method)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCaseSensitive"]], "setcasesensitive() (contextualparsermodel method)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setCaseSensitive"]], "setcompletecontextmatch() (contextualparserapproach method)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCompleteContextMatch"]], "setdictionary() (contextualparserapproach method)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDictionary"]], "setjsonpath() (contextualparserapproach method)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setJsonPath"]], "setoptionalcontextrules() (contextualparserapproach method)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOptionalContextRules"]], "setoptionalcontextrules() (contextualparsermodel method)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOptionalContextRules"]], "setprefixandsuffixmatch() (contextualparserapproach method)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setPrefixAndSuffixMatch"]], "setprefixandsuffixmatch() (contextualparsermodel method)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setPrefixAndSuffixMatch"]], "setshortestcontextmatch() (contextualparserapproach method)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setShortestContextMatch"]], "setshortestcontextmatch() (contextualparsermodel method)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setShortestContextMatch"]], "shortestcontextmatch (contextualparserapproach attribute)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.shortestContextMatch"]], "shortestcontextmatch (contextualparsermodel attribute)": [[59, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser": [[59, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[60, "module-sparknlp_jsl.annotator.context"]], "deidentification (class in sparknlp_jsl.annotator.deid.deidentification)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.annotator.deid.deidentification)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel"]], "blacklist (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.blackList"]], "blacklist (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.blackList"]], "consistentobfuscation (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.consistentObfuscation"]], "consistentobfuscation (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.consistentObfuscation"]], "dateformats (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateFormats"]], "dateformats (deidentificationmodel attribute)": [[61, "id0"], [61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateFormats"]], "datetag (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateTag"]], "datetag (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateTag"]], "datetoyear (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateToYear"]], "datetoyear (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateToYear"]], "days (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.days"]], "days (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.days"]], "fixedmasklength (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fixedMaskLength"]], "fixedmasklength (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.fixedMaskLength"]], "getblacklist() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getBlackList"]], "getblacklist() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getBlackList"]], "getregexentities() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getRegexEntities"]], "ignoreregex (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ignoreRegex"]], "ignoreregex (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ignoreRegex"]], "israndomdatedisplacement (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isRandomDateDisplacement"]], "israndomdatedisplacement (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"]], "language (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.language"]], "language (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.language"]], "mappingscolumn (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mappingsColumn"]], "mappingscolumn (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mappingsColumn"]], "maskingpolicy (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.maskingPolicy"]], "maskingpolicy (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.maskingPolicy"]], "minyear (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.minYear"]], "minyear (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.minYear"]], "mode (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mode"]], "mode (deidentificationmodel attribute)": [[61, "id13"], [61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mode"]], "name (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.name"], [105, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.name"], [133, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.name"]], "name (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.name"], [105, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.name"], [133, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.name"]], "obfuscatedate (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateDate"]], "obfuscatedate (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateDate"]], "obfuscatereffile (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefFile"]], "obfuscaterefsource (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefSource"]], "obfuscaterefsource (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"]], "pretrained() (deidentificationmodel static method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.pretrained"], [105, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"], [133, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"]], "reffileformat (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refFileFormat"]], "refsep (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refSep"]], "regexentities (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexEntities"]], "regexoverride (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexOverride"]], "regexoverride (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexOverride"]], "regexpatternsdictionary (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionary"]], "region (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.region"]], "region (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.region"]], "returnentitymappings (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.returnEntityMappings"]], "returnentitymappings (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.returnEntityMappings"]], "sameentitythreshold (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameEntityThreshold"]], "sameentitythreshold (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"]], "seed (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.seed"]], "seed (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.seed"]], "setblacklist() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setBlackList"]], "setblacklist() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setBlackList"]], "setconsistentobfuscation() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setConsistentObfuscation"]], "setconsistentobfuscation() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"]], "setdateformats() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateFormats"]], "setdateformats() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateFormats"]], "setdatetag() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateTag"]], "setdatetag() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateTag"]], "setdatetoyear() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateToYear"]], "setdatetoyear() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateToYear"]], "setdays() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDays"]], "setdays() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDays"]], "setfixedmasklength() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setFixedMaskLength"]], "setfixedmasklength() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"]], "setignoreregex() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIgnoreRegex"]], "setignoreregex() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"]], "setisrandomdatedisplacement() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"]], "setisrandomdatedisplacement() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"]], "setlanguage() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setLanguage"]], "setlanguage() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setLanguage"]], "setmappingscolumn() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMappingsColumn"]], "setmappingscolumn() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMappingsColumn"]], "setmaskingpolicy() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMaskingPolicy"]], "setmaskingpolicy() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"]], "setminyear() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMinYear"]], "setminyear() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMinYear"]], "setmode() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMode"]], "setmode() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMode"]], "setobfuscatedate() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateDate"]], "setobfuscatedate() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateDate"]], "setobfuscatereffile() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefFile"]], "setobfuscaterefsource() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefSource"]], "setobfuscaterefsource() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"]], "setreffileformat() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefFileFormat"]], "setrefsep() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefSep"]], "setregexoverride() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexOverride"]], "setregexoverride() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegexOverride"]], "setregexpatternsdictionary() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"]], "setregion() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegion"]], "setregion() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegion"]], "setreturnentitymappings() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setReturnEntityMappings"]], "setreturnentitymappings() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"]], "setsameentitythreshold() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameEntityThreshold"]], "setsameentitythreshold() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"]], "setseed() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSeed"]], "setseed() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSeed"]], "setuseshifdays() (deidentification method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUseShifDays"]], "setuseshifdays() (deidentificationmodel method)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUseShifDays"]], "sparknlp_jsl.annotator.deid.deidentification": [[61, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "useshifdays (deidentification attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.useShifDays"]], "useshifdays (deidentificationmodel attribute)": [[61, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.useShifDays"]], "documenthashcoder (class in sparknlp_jsl.annotator.deid.doccument_hashcoder)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder"]], "dateshiftcolumn (documenthashcoder attribute)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.dateShiftColumn"]], "name (documenthashcoder attribute)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.name"]], "newdateshift (documenthashcoder attribute)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.newDateShift"]], "patientidcolumn (documenthashcoder attribute)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.patientIdColumn"]], "rangedays (documenthashcoder attribute)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.rangeDays"]], "seed (documenthashcoder attribute)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.seed"]], "setdateshiftcolumn() (documenthashcoder method)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setDateShiftColumn"]], "setnewdateshift() (documenthashcoder method)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setNewDateShift"]], "setparams() (documenthashcoder method)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParams"]], "setpatientidcolumn() (documenthashcoder method)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setPatientIdColumn"]], "setrangedays() (documenthashcoder method)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setRangeDays"]], "setseed() (documenthashcoder method)": [[62, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setSeed"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[62, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[63, "module-sparknlp_jsl.annotator.deid"]], "reidentification (class in sparknlp_jsl.annotator.deid.reidentification)": [[64, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification"]], "name (reidentification attribute)": [[64, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.name"]], "sparknlp_jsl.annotator.deid.reidentification": [[64, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "replacer (class in sparknlp_jsl.annotator.deid.replacer)": [[65, "sparknlp_jsl.annotator.deid.replacer.Replacer"]], "sparknlp_jsl.annotator.deid.replacer": [[65, "module-sparknlp_jsl.annotator.deid.replacer"]], "sparknlp_jsl.annotator.disambiguation": [[66, "module-sparknlp_jsl.annotator.disambiguation"]], "nerdisambiguator (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator"]], "nerdisambiguatormodel (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel"]], "embeddingtypeparam (nerdisambiguator attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.embeddingTypeParam"]], "embeddingtypeparam (nerdisambiguatormodel attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.embeddingTypeParam"]], "levenshteindistancethresholdparam (nerdisambiguator attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.levenshteinDistanceThresholdParam"]], "levenshteindistancethresholdparam (nerdisambiguatormodel attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.levenshteinDistanceThresholdParam"]], "name (nerdisambiguatormodel attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.name"]], "narrowwithapproximatematching (nerdisambiguator attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.narrowWithApproximateMatching"]], "narrowwithapproximatematching (nerdisambiguatormodel attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.narrowWithApproximateMatching"]], "nearmatchinggapparam (nerdisambiguator attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.nearMatchingGapParam"]], "nearmatchinggapparam (nerdisambiguatormodel attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.nearMatchingGapParam"]], "numfirstchars (nerdisambiguator attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.numFirstChars"]], "numfirstchars (nerdisambiguatormodel attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.numFirstChars"]], "predictionslimit (nerdisambiguator attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.predictionsLimit"]], "predictionslimit (nerdisambiguatormodel attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.predictionsLimit"]], "pretrained() (nerdisambiguatormodel static method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.pretrained"]], "s3knowledgebasename (nerdisambiguator attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.s3KnowledgeBaseName"]], "setembeddingtype() (nerdisambiguator method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setEmbeddingType"]], "setembeddingtype() (nerdisambiguatormodel method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setEmbeddingType"]], "setlevenshteindistancethresholdparam() (nerdisambiguator method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLevenshteinDistanceThresholdParam"]], "setlevenshteindistancethresholdparam() (nerdisambiguatormodel method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLevenshteinDistanceThresholdParam"]], "setnarrowwithapproximatematching() (nerdisambiguator method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNarrowWithApproximateMatching"]], "setnarrowwithapproximatematching() (nerdisambiguatormodel method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNarrowWithApproximateMatching"]], "setnearmatchinggapparam() (nerdisambiguator method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNearMatchingGapParam"]], "setnearmatchinggapparam() (nerdisambiguatormodel method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNearMatchingGapParam"]], "setnumfirstchars() (nerdisambiguator method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNumFirstChars"]], "setnumfirstchars() (nerdisambiguatormodel method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNumFirstChars"]], "setpredictionlimit() (nerdisambiguator method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setPredictionLimit"]], "setpredictionlimit() (nerdisambiguatormodel method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setPredictionLimit"]], "sets3knowledgebasename() (nerdisambiguator method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setS3KnowledgeBaseName"]], "settokensearch() (nerdisambiguator method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setTokenSearch"]], "settokensearch() (nerdisambiguatormodel method)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setTokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[67, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "tokensearch (nerdisambiguator attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.tokenSearch"]], "tokensearch (nerdisambiguatormodel attribute)": [[67, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.tokenSearch"]], "doc2chunkinternal (class in sparknlp_jsl.annotator.doc2_chunk_internal)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal"]], "chunkcol (doc2chunkinternal attribute)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.chunkCol"]], "failonmissing (doc2chunkinternal attribute)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.failOnMissing"]], "isarray (doc2chunkinternal attribute)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isArray"]], "lowercase (doc2chunkinternal attribute)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lowerCase"]], "name (doc2chunkinternal attribute)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.name"]], "setchunkcol() (doc2chunkinternal method)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setChunkCol"]], "setfailonmissing() (doc2chunkinternal method)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setFailOnMissing"]], "setisarray() (doc2chunkinternal method)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setIsArray"]], "setlowercase() (doc2chunkinternal method)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLowerCase"]], "setparams() (doc2chunkinternal method)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParams"]], "setstartcol() (doc2chunkinternal method)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartCol"]], "setstartcolbytokenindex() (doc2chunkinternal method)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartColByTokenIndex"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[68, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "startcol (doc2chunkinternal attribute)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startCol"]], "startcolbytokenindex (doc2chunkinternal attribute)": [[68, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startColByTokenIndex"]], "averageembeddings (class in sparknlp_jsl.annotator.embeddings.average_embeddings)": [[69, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings"]], "name (averageembeddings attribute)": [[69, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.name"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[69, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "bertsentencechunkembeddings (class in sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings)": [[70, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings"]], "chunkweight (bertsentencechunkembeddings attribute)": [[70, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.chunkWeight"]], "load() (bertsentencechunkembeddings static method)": [[70, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.load"]], "name (bertsentencechunkembeddings attribute)": [[70, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.name"]], "pretrained() (bertsentencechunkembeddings static method)": [[70, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.pretrained"]], "setchunkweight() (bertsentencechunkembeddings method)": [[70, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[70, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "entitychunkembeddings (class in sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings)": [[71, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings"]], "entityweights (entitychunkembeddings attribute)": [[71, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.entityWeights"]], "maxsyntacticdistance (entitychunkembeddings attribute)": [[71, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.maxSyntacticDistance"]], "name (entitychunkembeddings attribute)": [[71, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.name"]], "pretrained() (entitychunkembeddings static method)": [[71, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.pretrained"]], "setentityweights() (entitychunkembeddings method)": [[71, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setEntityWeights"]], "setmaxsyntacticdistance() (entitychunkembeddings method)": [[71, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setMaxSyntacticDistance"]], "settargetentities() (entitychunkembeddings method)": [[71, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setTargetEntities"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[71, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "targetentities (entitychunkembeddings attribute)": [[71, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.targetEntities"]], "sparknlp_jsl.annotator.embeddings": [[72, "module-sparknlp_jsl.annotator.embeddings"]], "genericclassifierapproach (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach"]], "genericclassifiermodel (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel"]], "batchsize (genericclassifierapproach attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.batchSize"]], "classes (genericclassifiermodel attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.classes"]], "dropout (genericclassifierapproach attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.dropout"]], "epochsn (genericclassifierapproach attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.epochsN"]], "featurescaling (genericclassifierapproach attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.featureScaling"]], "fiximbalance (genericclassifierapproach attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fixImbalance"]], "labelcolumn (genericclassifierapproach attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.labelColumn"]], "learningrate (genericclassifierapproach attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.learningRate"]], "modelfile (genericclassifierapproach attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.modelFile"]], "name (genericclassifiermodel attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.name"]], "outputlogspath (genericclassifierapproach attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputLogsPath"]], "pretrained() (genericclassifiermodel static method)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.pretrained"]], "setbatchsize() (genericclassifierapproach method)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setBatchSize"]], "setdropout() (genericclassifierapproach method)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDropout"]], "setepochsnumber() (genericclassifierapproach method)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericclassifierapproach method)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFeatureScaling"]], "setfiximbalance() (genericclassifierapproach method)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFixImbalance"]], "setlabelcol() (genericclassifierapproach method)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLabelCol"]], "setlearningrate() (genericclassifierapproach method)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLearningRate"]], "setmodelfile() (genericclassifierapproach method)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setModelFile"]], "setoutputlogspath() (genericclassifierapproach method)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputLogsPath"]], "setvalidationsplit() (genericclassifierapproach method)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setValidationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[73, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "validationsplit (genericclassifierapproach attribute)": [[73, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.validationSplit"]], "sparknlp_jsl.annotator.generic_classifier": [[74, "module-sparknlp_jsl.annotator.generic_classifier"]], "assertion (in module sparknlp_jsl.annotator)": [[75, "id2"], [75, "sparknlp_jsl.annotator.assertion"]], "chunker (in module sparknlp_jsl.annotator)": [[75, "id16"], [75, "sparknlp_jsl.annotator.chunker"]], "classification (in module sparknlp_jsl.annotator)": [[75, "id6"], [75, "sparknlp_jsl.annotator.classification"]], "context (in module sparknlp_jsl.annotator)": [[75, "id10"], [75, "sparknlp_jsl.annotator.context"]], "deid (in module sparknlp_jsl.annotator)": [[75, "id7"], [75, "sparknlp_jsl.annotator.deid"]], "disambiguation (in module sparknlp_jsl.annotator)": [[75, "id8"], [75, "sparknlp_jsl.annotator.disambiguation"]], "dl (in module sparknlp_jsl.annotator)": [[75, "id3"], [75, "sparknlp_jsl.annotator.dl"]], "finance (in module sparknlp_jsl.annotator)": [[75, "sparknlp_jsl.annotator.finance"]], "finance_classifier_dl (in module sparknlp_jsl.annotator)": [[75, "id0"], [75, "sparknlp_jsl.annotator.finance_classifier_dl"]], "generic_classifier (in module sparknlp_jsl.annotator)": [[75, "id13"], [75, "sparknlp_jsl.annotator.generic_classifier"]], "keyword (in module sparknlp_jsl.annotator)": [[75, "id9"], [75, "sparknlp_jsl.annotator.keyword"]], "legal (in module sparknlp_jsl.annotator)": [[75, "sparknlp_jsl.annotator.legal"]], "legal_classifier_dl (in module sparknlp_jsl.annotator)": [[75, "id1"], [75, "sparknlp_jsl.annotator.legal_classifier_dl"]], "logreg (in module sparknlp_jsl.annotator)": [[75, "id4"], [75, "sparknlp_jsl.annotator.logreg"]], "merge (in module sparknlp_jsl.annotator)": [[75, "id11"], [75, "sparknlp_jsl.annotator.merge"]], "ner (in module sparknlp_jsl.annotator)": [[75, "id12"], [75, "sparknlp_jsl.annotator.ner"]], "qa (in module sparknlp_jsl.annotator)": [[75, "id14"], [75, "sparknlp_jsl.annotator.qa"]], "re (in module sparknlp_jsl.annotator)": [[75, "id15"], [75, "sparknlp_jsl.annotator.re"]], "resolution (in module sparknlp_jsl.annotator)": [[75, "id5"], [75, "sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator": [[75, "module-sparknlp_jsl.annotator"]], "chunkmergeapproach (class in sparknlp_jsl.annotator.merge.chunker_merge)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach"]], "chunkmergemodel (class in sparknlp_jsl.annotator.merge.chunker_merge)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeModel"]], "blacklist (chunkmergeapproach attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach.blackList"]], "blacklist (chunkmergemodel attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeModel.blackList"]], "chunkprecedence (chunkmergeapproach attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach.chunkPrecedence"]], "chunkprecedence (chunkmergemodel attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeModel.chunkPrecedence"]], "falsepositives (chunkmergemodel attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeModel.falsePositives"]], "falsepositivesresource (chunkmergeapproach attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach.falsePositivesResource"]], "mergeoverlapping (chunkmergeapproach attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach.mergeOverlapping"]], "mergeoverlapping (chunkmergemodel attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeModel.mergeOverlapping"]], "name (chunkmergeapproach attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach.name"]], "name (chunkmergemodel attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeModel.name"]], "pretrained() (chunkmergemodel static method)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeModel.pretrained"]], "replacedict (chunkmergemodel attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeModel.replaceDict"]], "replacedictresource (chunkmergeapproach attribute)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach.replaceDictResource"]], "setblacklist() (chunkmergeapproach method)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach.setBlackList"]], "setchunkprecedence() (chunkmergeapproach method)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach.setChunkPrecedence"]], "setchunkprecedence() (chunkmergemodel method)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeModel.setChunkPrecedence"]], "setfalsepositivesresource() (chunkmergeapproach method)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach.setFalsePositivesResource"]], "setmergeoverlapping() (chunkmergeapproach method)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach.setMergeOverlapping"]], "setmergeoverlapping() (chunkmergemodel method)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeModel.setMergeOverlapping"]], "setreplacedictresource() (chunkmergeapproach method)": [[76, "sparknlp_jsl.annotator.merge.chunker_merge.ChunkMergeApproach.setReplaceDictResource"]], "sparknlp_jsl.annotator.merge.chunker_merge": [[76, "module-sparknlp_jsl.annotator.merge.chunker_merge"]], "sparknlp_jsl.annotator.merge": [[77, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[78, "module-sparknlp_jsl.annotator.ner"]], "iobtagger (class in sparknlp_jsl.annotator.ner.iob_tagger)": [[79, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger"]], "name (iobtagger attribute)": [[79, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.name"]], "scheme (iobtagger attribute)": [[79, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.scheme"]], "setscheme() (iobtagger method)": [[79, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setScheme"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[79, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "medicalnerapproach (class in sparknlp_jsl.annotator.ner.medical_ner)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach"]], "medicalnermodel (class in sparknlp_jsl.annotator.ner.medical_ner)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel"]], "batchsize (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.batchSize"]], "classes (medicalnermodel attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.classes"]], "configprotobytes (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.configProtoBytes"]], "configprotobytes (medicalnermodel attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.configProtoBytes"]], "dropout (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.dropout"]], "earlystoppingcriterion (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableMemoryOptimizer"]], "gettrainingclassdistribution() (medicalnermodel method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getTrainingClassDistribution"]], "graphfile (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFile"]], "graphfolder (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFolder"]], "includeallconfidencescores (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (medicalnermodel attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeAllConfidenceScores"]], "includeconfidence (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeConfidence"]], "includeconfidence (medicalnermodel attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeConfidence"]], "inferencebatchsize (medicalnermodel attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inferenceBatchSize"]], "labelcasing (medicalnermodel attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.labelCasing"]], "loadsavedmodel() (medicalnermodel static method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.loadSavedModel"]], "logprefix (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.logPrefix"]], "lr (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lr"]], "name (medicalnermodel attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.name"]], "overrideexistingtags (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.overrideExistingTags"]], "po (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.po"]], "pretrained() (medicalnermodel static method)": [[80, "id29"], [80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.pretrained"]], "pretrainedmodelpath (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.pretrainedModelPath"]], "setbatchsize() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setBatchSize"]], "setconfigprotobytes() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (medicalnermodel method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setConfigProtoBytes"]], "setdropout() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDropout"]], "setearlystoppingcriterion() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableMemoryOptimizer"]], "setgraphfile() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFile"]], "setgraphfolder() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (medicalnermodel method)": [[80, "id0"], [80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (medicalnermodel method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInferenceBatchSize"]], "setlabelcasing() (medicalnermodel method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLabelCasing"]], "setlogprefix() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLogPrefix"]], "setlr() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLr"]], "setoverrideexistingtags() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOverrideExistingTags"]], "setpo() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPo"]], "setpretrainedmodelpath() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPretrainedModelPath"]], "settagsmapping() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTagsMapping"]], "setusebestmodel() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseBestModel"]], "setusecontrib() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseContrib"]], "setvalidationsplit() (medicalnerapproach method)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setValidationSplit"]], "sparknlp_jsl.annotator.ner.medical_ner": [[80, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "tagsmapping (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.tagsMapping"]], "trainingclassdistribution (medicalnermodel attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.trainingClassDistribution"]], "usebestmodel (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useBestModel"]], "usecontrib (medicalnerapproach attribute)": [[80, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useContrib"]], "nerchunker (class in sparknlp_jsl.annotator.ner.ner_chunker)": [[81, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker"]], "name (nerchunker attribute)": [[81, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.name"]], "regexparsers (nerchunker attribute)": [[81, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.regexParsers"]], "setregexparsers() (nerchunker method)": [[81, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[81, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "nerconverterinternal (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal"]], "nerconverterinternalmodel (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel"]], "blacklist (nerconverterinternal attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.blackList"]], "blacklist (nerconverterinternalmodel attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.blackList"]], "greedymode (nerconverterinternal attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.greedyMode"]], "greedymode (nerconverterinternalmodel attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.greedyMode"]], "ignorestopwords (nerconverterinternal attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.ignoreStopWords"]], "ignorestopwords (nerconverterinternalmodel attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.ignoreStopWords"]], "name (nerconverterinternal attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.name"]], "name (nerconverterinternalmodel attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.name"]], "preserveposition (nerconverterinternal attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.preservePosition"]], "preserveposition (nerconverterinternalmodel attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.preservePosition"]], "replacedict (nerconverterinternalmodel attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.replaceDict"]], "replacedictresource (nerconverterinternal attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceDictResource"]], "replacelabels (nerconverterinternal attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceLabels"]], "setblacklist() (nerconverterinternal method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setBlackList"]], "setblacklist() (nerconverterinternalmodel method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setBlackList"]], "setgreedymode() (nerconverterinternal method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setGreedyMode"]], "setgreedymode() (nerconverterinternalmodel method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setGreedyMode"]], "setignorestopwords() (nerconverterinternal method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setIgnoreStopWords"]], "setignorestopwords() (nerconverterinternalmodel method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setIgnoreStopWords"]], "setpreserveposition() (nerconverterinternal method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setPreservePosition"]], "setpreserveposition() (nerconverterinternalmodel method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setPreservePosition"]], "setreplacedictresource() (nerconverterinternal method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceDictResource"]], "setreplacelabels() (nerconverterinternal method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceLabels"]], "setthreshold() (nerconverterinternal method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setThreshold"]], "setthreshold() (nerconverterinternalmodel method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setThreshold"]], "setwhitelist() (nerconverterinternal method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setWhiteList"]], "setwhitelist() (nerconverterinternalmodel method)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setWhiteList"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[82, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "threshold (nerconverterinternal attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.threshold"]], "threshold (nerconverterinternalmodel attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.threshold"]], "whitelist (nerconverterinternal attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.whiteList"]], "whitelist (nerconverterinternalmodel attribute)": [[82, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.whiteList"]], "zeroshotnermodel (class in sparknlp_jsl.annotator.ner.zero_shot_ner)": [[83, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[83, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[83, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"]], "load() (zeroshotnermodel static method)": [[83, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.load"], [126, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"], [154, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[83, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.name"], [126, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"], [154, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"]], "predictionthreshold (zeroshotnermodel attribute)": [[83, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[83, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [126, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [154, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[83, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[83, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[83, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "datenormalizer (class in sparknlp_jsl.annotator.normalizer.date_normalizer)": [[84, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer"]], "anchordateday (datenormalizer attribute)": [[84, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateDay"]], "anchordatemonth (datenormalizer attribute)": [[84, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateMonth"]], "anchordateyear (datenormalizer attribute)": [[84, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateYear"]], "name (datenormalizer attribute)": [[84, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.name"]], "outputdateformat (datenormalizer attribute)": [[84, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputDateFormat"]], "setanchordateday() (datenormalizer method)": [[84, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateDay"]], "setanchordatemonth() (datenormalizer method)": [[84, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateMonth"]], "setanchordateyear() (datenormalizer method)": [[84, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateYear"]], "setoutputdateformat() (datenormalizer method)": [[84, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[84, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "drugnormalizer (class in sparknlp_jsl.annotator.normalizer.drug_normalizer)": [[85, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer"]], "lowercase (drugnormalizer attribute)": [[85, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lowercase"]], "policy (drugnormalizer attribute)": [[85, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.policy"]], "setlowercase() (drugnormalizer method)": [[85, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLowercase"]], "setpolicy() (drugnormalizer method)": [[85, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setPolicy"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[85, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[86, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa": [[87, "module-sparknlp_jsl.annotator.qa"]], "nerquestiongenerator (class in sparknlp_jsl.annotator.qa.qa_ner_generator)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator"]], "entities1 (nerquestiongenerator attribute)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities1"]], "entities2 (nerquestiongenerator attribute)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities2"]], "name (nerquestiongenerator attribute)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.name"]], "questionmark (nerquestiongenerator attribute)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionMark"]], "questionpronoun (nerquestiongenerator attribute)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionPronoun"]], "setentities1() (nerquestiongenerator method)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities1"]], "setentities2() (nerquestiongenerator method)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities2"]], "setquestionmark() (nerquestiongenerator method)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (nerquestiongenerator method)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (nerquestiongenerator method)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setStrategyType"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[88, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "strategytype (nerquestiongenerator attribute)": [[88, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.strategyType"]], "sparknlp_jsl.annotator.re": [[89, "module-sparknlp_jsl.annotator.re"]], "posologyremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel"]], "relationextractionapproach (class in sparknlp_jsl.annotator.re.relation_extraction)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach"]], "relationextractionmodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel"]], "classes (relationextractionmodel attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.classes"]], "customlabels (relationextractionapproach attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.customLabels"]], "fromentitybegincol (relationextractionapproach attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityBeginCol"]], "fromentityendcol (relationextractionapproach attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityEndCol"]], "fromentitylabelcol (relationextractionapproach attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityLabelCol"]], "getclasses() (relationextractionmodel method)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getClasses"]], "maxsyntacticdistance (relationextractionmodel attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.maxSyntacticDistance"]], "name (relationextractionapproach attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.name"]], "name (relationextractionmodel attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.name"]], "predictionthreshold (relationextractionmodel attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.predictionThreshold"]], "pretrained() (relationextractionmodel static method)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.pretrained"]], "relationdirectioncol (relationextractionapproach attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.relationDirectionCol"]], "relationpairs (relationextractionmodel attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairs"]], "relationpairscasesensitive (relationextractionmodel attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairsCaseSensitive"]], "setcustomlabels() (relationextractionapproach method)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setCustomLabels"]], "setcustomlabels() (relationextractionmodel method)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setCustomLabels"]], "setfromentity() (relationextractionapproach method)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFromEntity"]], "setmaxsyntacticdistance() (relationextractionmodel method)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMaxSyntacticDistance"]], "setpredictionthreshold() (relationextractionmodel method)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setPredictionThreshold"]], "setrelationdirectioncol() (relationextractionapproach method)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setRelationDirectionCol"]], "setrelationpairs() (relationextractionmodel method)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairs"]], "setrelationpairscasesensitive() (relationextractionmodel method)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairsCaseSensitive"]], "settoentity() (relationextractionapproach method)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setToEntity"]], "sparknlp_jsl.annotator.re.relation_extraction": [[90, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "toentitybegincol (relationextractionapproach attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityBeginCol"]], "toentityendcol (relationextractionapproach attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityEndCol"]], "toentitylabelcol (relationextractionapproach attribute)": [[90, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityLabelCol"]], "relationextractiondlmodel (class in sparknlp_jsl.annotator.re.relation_extraction_dl)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel"]], "batchsize (relationextractiondlmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.batchSize"]], "classes (relationextractiondlmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.classes"]], "customlabels (relationextractiondlmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.customLabels"]], "getclasses() (relationextractiondlmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getClasses"]], "loadsavedmodel() (relationextractiondlmodel static method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [114, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [142, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"]], "name (relationextractiondlmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.name"], [114, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"], [142, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"]], "predictionthreshold (relationextractiondlmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"]], "pretrained() (relationextractiondlmodel static method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [114, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [142, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"]], "setbatchsize() (relationextractiondlmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"]], "setcasesensitive() (relationextractiondlmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"]], "setcustomlabels() (relationextractiondlmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"]], "setpredictionthreshold() (relationextractiondlmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[91, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "renerchunksfilter (class in sparknlp_jsl.annotator.re.relation_ner_chunk_filter)": [[92, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter"]], "doclevelrelations (renerchunksfilter attribute)": [[92, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.docLevelRelations"]], "maxsyntacticdistance (renerchunksfilter attribute)": [[92, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.maxSyntacticDistance"]], "name (renerchunksfilter attribute)": [[92, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.name"]], "relationpairs (renerchunksfilter attribute)": [[92, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairs"]], "relationpairscasesensitive (renerchunksfilter attribute)": [[92, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairsCaseSensitive"]], "setdoclevelrelations() (renerchunksfilter method)": [[92, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDocLevelRelations"]], "setmaxsyntacticdistance() (renerchunksfilter method)": [[92, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setMaxSyntacticDistance"]], "setrelationpairs() (renerchunksfilter method)": [[92, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairs"]], "setrelationpairscasesensitive() (renerchunksfilter method)": [[92, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[92, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.annotator.re.zero_shot_relation_extraction)": [[93, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "loadsavedmodel() (zeroshotrelationextractionmodel static method)": [[93, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [115, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [143, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"]], "multilabel (zeroshotrelationextractionmodel attribute)": [[93, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"]], "predictionthreshold (zeroshotrelationextractionmodel attribute)": [[93, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"]], "pretrained() (zeroshotrelationextractionmodel static method)": [[93, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [115, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [143, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"]], "setrelationalcategories() (zeroshotrelationextractionmodel method)": [[93, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[93, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[94, "module-sparknlp_jsl.annotator.resolution"]], "resolvermerger (class in sparknlp_jsl.annotator.resolution.resolver_merger)": [[95, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger"]], "name (resolvermerger attribute)": [[95, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.name"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[95, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sentenceentityresolverapproach (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sentenceresolverparams (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams"]], "aux_label_col (sentenceentityresolverapproach attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"]], "aux_label_col (sentenceentityresolvermodel attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.aux_label_col"]], "confidencefunction (sentenceresolverparams attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.confidenceFunction"]], "distancefunction (sentenceresolverparams attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.distanceFunction"]], "dropcodeslist (sentenceentityresolverapproach attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"]], "labelcol (sentenceentityresolverapproach attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"]], "missasempty (sentenceresolverparams attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.missAsEmpty"]], "name (sentenceentityresolvermodel attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [139, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"]], "neighbours (sentenceresolverparams attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.neighbours"]], "normalizedcol (sentenceentityresolverapproach attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"]], "overrideexistingcodes (sentenceentityresolverapproach attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"]], "pretrained() (sentenceentityresolvermodel static method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [111, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [139, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"]], "pretrainedmodelpath (sentenceentityresolverapproach attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"]], "returncosinedistances (sentenceentityresolverapproach attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"]], "returncosinedistances (sentenceentityresolvermodel attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"]], "searchtree (sentenceentityresolvermodel attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"]], "setauxlabelcol() (sentenceentityresolverapproach method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"]], "setauxlabelcol() (sentenceentityresolvermodel method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setAuxLabelCol"]], "setconfidencefunction() (sentenceresolverparams method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setConfidenceFunction"]], "setdistancefunction() (sentenceresolverparams method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDistanceFunction"]], "setdropcodeslist() (sentenceentityresolverapproach method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"]], "setextractcosinedistances() (sentenceentityresolverapproach method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"]], "setlabelcol() (sentenceentityresolverapproach method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"]], "setmissasempty() (sentenceresolverparams method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setMissAsEmpty"]], "setneighbours() (sentenceresolverparams method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setNeighbours"]], "setnormalizedcol() (sentenceentityresolverapproach method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"]], "setoverrideexistingcodes() (sentenceentityresolverapproach method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"]], "setpretrainedmodelpath() (sentenceentityresolverapproach method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"]], "setsearchtree() (sentenceentityresolvermodel method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"]], "setthreshold() (sentenceresolverparams method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setThreshold"]], "setuseauxlabel() (sentenceentityresolverapproach method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"]], "setuseauxlabel() (sentenceentityresolvermodel method)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[96, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "threshold (sentenceresolverparams attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.threshold"]], "useauxlabel (sentenceentityresolverapproach attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"]], "useauxlabel (sentenceentityresolvermodel attribute)": [[96, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"]], "router (class in sparknlp_jsl.annotator.router)": [[97, "sparknlp_jsl.annotator.router.Router"]], "filterfieldselements (router attribute)": [[97, "sparknlp_jsl.annotator.router.Router.filterFieldsElements"]], "inputtype (router attribute)": [[97, "sparknlp_jsl.annotator.router.Router.inputType"]], "metadatafield (router attribute)": [[97, "sparknlp_jsl.annotator.router.Router.metadataField"]], "name (router attribute)": [[97, "sparknlp_jsl.annotator.router.Router.name"]], "setfilterfieldselements() (router method)": [[97, "sparknlp_jsl.annotator.router.Router.setFilterFieldsElements"]], "setinputtype() (router method)": [[97, "sparknlp_jsl.annotator.router.Router.setInputType"]], "setmetadatafield() (router method)": [[97, "sparknlp_jsl.annotator.router.Router.setMetadataField"]], "sparknlp_jsl.annotator.router": [[97, "module-sparknlp_jsl.annotator.router"]], "tfgraphbuilder (class in sparknlp_jsl.annotator.tf_graph_builder)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder"]], "tfgraphbuildermodel (class in sparknlp_jsl.annotator.tf_graph_builder)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel"]], "batchnorm (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.batchNorm"]], "getbatchnorm() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getBatchNorm"]], "getgraphfile() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFile"]], "getgraphfolder() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFolder"]], "gethiddenact() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenAct"]], "gethiddenactl2() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenActL2"]], "gethiddenlayers() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenLayers"]], "gethiddenunitsnumber() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenUnitsNumber"]], "gethiddenweightsl2() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenWeightsL2"]], "getinputcols() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getInputCols"]], "getismedical() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getIsMedical"]], "getlabelcolumn() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getLabelColumn"]], "getmaxsequencelength() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getMaxSequenceLength"]], "getmodelname() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getModelName"]], "getuserelationdirection() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getUseRelationDirection"]], "graphfile (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFile"]], "graphfolder (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFolder"]], "hiddenact (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenAct"]], "hiddenactl2 (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenActL2"]], "hiddenlayers (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenLayers"]], "hiddenunitsnumber (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenUnitsNumber"]], "hiddenweightsl2 (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenWeightsL2"]], "inputcols (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.inputCols"]], "ismedical (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isMedical"]], "labelcolumn (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.labelColumn"]], "maxsequencelength (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.maxSequenceLength"]], "modelname (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.modelName"]], "setbatchnorm() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setBatchNorm"]], "setgraphfile() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFile"]], "setgraphfolder() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFolder"]], "sethiddenact() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenAct"]], "sethiddenactl2() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenActL2"]], "sethiddenlayers() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenLayers"]], "sethiddenunitsnumber() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenUnitsNumber"]], "sethiddenweightsl2() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenWeightsL2"]], "setinputcols() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setInputCols"]], "setismedical() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setIsMedical"]], "setlabelcolumn() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setLabelColumn"]], "setmaxsequencelength() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setMaxSequenceLength"]], "setmodelname() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setModelName"]], "setuserelationdirection() (tfgraphbuilder method)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setUseRelationDirection"]], "sparknlp_jsl.annotator.tf_graph_builder": [[98, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "userelationdirection (tfgraphbuilder attribute)": [[98, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.useRelationDirection"]], "featuresassembler (class in sparknlp_jsl.base)": [[99, "sparknlp_jsl.base.FeaturesAssembler"]], "inputcols (featuresassembler attribute)": [[99, "sparknlp_jsl.base.FeaturesAssembler.inputCols"]], "name (featuresassembler attribute)": [[99, "sparknlp_jsl.base.FeaturesAssembler.name"]], "outputcol (featuresassembler attribute)": [[99, "sparknlp_jsl.base.FeaturesAssembler.outputCol"]], "setinputcols() (featuresassembler method)": [[99, "sparknlp_jsl.base.FeaturesAssembler.setInputCols"]], "setoutputcol() (featuresassembler method)": [[99, "sparknlp_jsl.base.FeaturesAssembler.setOutputCol"]], "setparams() (featuresassembler method)": [[99, "sparknlp_jsl.base.FeaturesAssembler.setParams"]], "sparknlp_jsl.base": [[99, "module-sparknlp_jsl.base"]], "compatibility (class in sparknlp_jsl.compatibility)": [[100, "sparknlp_jsl.compatibility.Compatibility"]], "findversion() (compatibility method)": [[100, "sparknlp_jsl.compatibility.Compatibility.findVersion"]], "showversion() (compatibility method)": [[100, "sparknlp_jsl.compatibility.Compatibility.showVersion"]], "sparknlp_jsl.compatibility": [[100, "module-sparknlp_jsl.compatibility"]], "customtransformer (class in sparknlp_jsl.custom_transformer)": [[101, "sparknlp_jsl.custom_transformer.CustomTransformer"]], "f (customtransformer attribute)": [[101, "sparknlp_jsl.custom_transformer.CustomTransformer.f"]], "setinputcol() (customtransformer method)": [[101, "sparknlp_jsl.custom_transformer.CustomTransformer.setInputCol"]], "setoutputcol() (customtransformer method)": [[101, "sparknlp_jsl.custom_transformer.CustomTransformer.setOutputCol"]], "sparknlp_jsl.custom_transformer": [[101, "module-sparknlp_jsl.custom_transformer"]], "nercrfevaluation (class in sparknlp_jsl.eval)": [[102, "sparknlp_jsl.eval.NerCrfEvaluation"]], "nerdlevaluation (class in sparknlp_jsl.eval)": [[102, "sparknlp_jsl.eval.NerDLEvaluation"]], "nerdlmetrics (class in sparknlp_jsl.eval)": [[102, "sparknlp_jsl.eval.NerDLMetrics"]], "norvigspellevaluation (class in sparknlp_jsl.eval)": [[102, "sparknlp_jsl.eval.NorvigSpellEvaluation"]], "posevaluation (class in sparknlp_jsl.eval)": [[102, "sparknlp_jsl.eval.POSEvaluation"]], "symspellevaluation (class in sparknlp_jsl.eval)": [[102, "sparknlp_jsl.eval.SymSpellEvaluation"]], "computeaccuracyannotator() (nercrfevaluation method)": [[102, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (nerdlevaluation method)": [[102, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (norvigspellevaluation method)": [[102, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (posevaluation method)": [[102, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (symspellevaluation method)": [[102, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracymodel() (nercrfevaluation method)": [[102, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (nerdlevaluation method)": [[102, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (norvigspellevaluation method)": [[102, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (posevaluation method)": [[102, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (symspellevaluation method)": [[102, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyModel"]], "computemetricsfromdf() (nerdlmetrics method)": [[102, "sparknlp_jsl.eval.NerDLMetrics.computeMetricsFromDF"]], "sparknlp_jsl.eval": [[102, "module-sparknlp_jsl.eval"]], "assertiondlapproach (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[103, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[103, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertiondl": [[103, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[104, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[105, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[105, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deidentification": [[105, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "financedocumenthashcoder (class in sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder)": [[106, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[106, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[107, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[108, "module-sparknlp_jsl.finance.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[109, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[109, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[109, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[110, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[111, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[111, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[111, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[112, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[113, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl)": [[114, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[114, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction)": [[115, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[115, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[116, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.finance.seq_generation": [[117, "module-sparknlp_jsl.finance.seq_generation"]], "financenerquestiongenerator (class in sparknlp_jsl.finance.seq_generation.qa_ner_generator)": [[118, "sparknlp_jsl.finance.seq_generation.qa_ner_generator.FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.seq_generation.qa_ner_generator": [[118, "module-sparknlp_jsl.finance.seq_generation.qa_ner_generator"]], "financebertforsequenceclassification (class in sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification)": [[119, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification"]], "loadsavedmodel() (financebertforsequenceclassification static method)": [[119, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertforsequenceclassification static method)": [[119, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModelOpenSource"]], "name (financebertforsequenceclassification attribute)": [[119, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.name"]], "pretrained() (financebertforsequenceclassification static method)": [[119, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[119, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "financeclassifierdlapproach (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[120, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach"]], "financeclassifierdlmodel (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[120, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel"]], "name (financeclassifierdlmodel attribute)": [[120, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.name"]], "pretrained() (financeclassifierdlmodel static method)": [[120, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[120, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification": [[121, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.token_classification": [[122, "module-sparknlp_jsl.finance.token_classification"]], "financebertfortokenclassification (class in sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier)": [[123, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification"]], "loadsavedmodel() (financebertfortokenclassification static method)": [[123, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertfortokenclassification static method)": [[123, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModelOpenSource"]], "name (financebertfortokenclassification attribute)": [[123, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.name"]], "pretrained() (financebertfortokenclassification static method)": [[123, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[123, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "financenerapproach (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[124, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach"]], "financenermodel (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[124, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel"]], "loadsavedmodel() (financenermodel static method)": [[124, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.loadSavedModel"]], "name (financenermodel attribute)": [[124, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.name"]], "pretrained() (financenermodel static method)": [[124, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[124, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[125, "module-sparknlp_jsl.finance.token_classification.ner"]], "zeroshotnermodel (class in sparknlp_jsl.finance.token_classification.ner.zero_shot_ner)": [[126, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[126, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "download_and_extract_model() (in module sparknlp_jsl.freeze)": [[127, "sparknlp_jsl.freeze.download_and_extract_model"]], "extract_model() (in module sparknlp_jsl.freeze)": [[127, "sparknlp_jsl.freeze.extract_model"]], "freeze_models() (in module sparknlp_jsl.freeze)": [[127, "sparknlp_jsl.freeze.freeze_models"]], "get_bucket() (in module sparknlp_jsl.freeze)": [[127, "sparknlp_jsl.freeze.get_bucket"]], "get_key() (in module sparknlp_jsl.freeze)": [[127, "sparknlp_jsl.freeze.get_key"]], "get_milliseconds() (in module sparknlp_jsl.freeze)": [[127, "sparknlp_jsl.freeze.get_milliseconds"]], "get_possibles_models() (in module sparknlp_jsl.freeze)": [[127, "sparknlp_jsl.freeze.get_possibles_models"]], "read_metadata() (in module sparknlp_jsl.freeze)": [[127, "sparknlp_jsl.freeze.read_metadata"]], "retrieve_spark_version() (in module sparknlp_jsl.freeze)": [[127, "sparknlp_jsl.freeze.retrieve_spark_version"]], "sparknlp_jsl.freeze": [[127, "module-sparknlp_jsl.freeze"]], "profile() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profile"]], "profilev22() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV22"]], "profilev22y17() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV22Y17"]], "profilev22y18() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV22Y18"]], "profilev22y19() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV22Y19"]], "profilev22y20() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV22Y20"]], "profilev22y21() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV22Y21"]], "profilev22y22() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV22Y22"]], "profilev23() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV23"]], "profilev23y18() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV23Y18"]], "profilev23y19() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV23Y19"]], "profilev24y17() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV24Y17"]], "profilev24y18() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV24Y18"]], "profilev24y19() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV24Y19"]], "profilev24y20() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV24Y20"]], "profilev24y21() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV24Y21"]], "profilev24y22() (in module sparknlp_jsl.functions)": [[128, "sparknlp_jsl.functions.profileV24Y22"]], "sparknlp_jsl.functions": [[128, "module-sparknlp_jsl.functions"]], "annotators (in module sparknlp_jsl)": [[129, "sparknlp_jsl.annotators"]], "finance (in module sparknlp_jsl)": [[129, "sparknlp_jsl.finance"]], "get_credentials() (in module sparknlp_jsl)": [[129, "sparknlp_jsl.get_credentials"]], "legal (in module sparknlp_jsl)": [[129, "sparknlp_jsl.legal"]], "library_settings() (in module sparknlp_jsl)": [[129, "sparknlp_jsl.library_settings"]], "pub_version() (in module sparknlp_jsl)": [[129, "sparknlp_jsl.pub_version"]], "size_regex (in module sparknlp_jsl)": [[129, "sparknlp_jsl.size_regex"]], "sparknlp_jsl": [[129, "module-sparknlp_jsl"]], "start() (in module sparknlp_jsl)": [[129, "sparknlp_jsl.start"]], "transformer_seq_classification (in module sparknlp_jsl)": [[129, "sparknlp_jsl.transformer_seq_classification"]], "version() (in module sparknlp_jsl)": [[129, "sparknlp_jsl.version"]], "version_regex (in module sparknlp_jsl)": [[129, "sparknlp_jsl.version_regex"]], "customlabels() (in module sparknlp_jsl.internal)": [[130, "sparknlp_jsl.internal.CustomLabels"]], "entityweights() (in module sparknlp_jsl.internal)": [[130, "sparknlp_jsl.internal.EntityWeights"]], "relationalcategories() (in module sparknlp_jsl.internal)": [[130, "sparknlp_jsl.internal.RelationalCategories"]], "targetentities() (in module sparknlp_jsl.internal)": [[130, "sparknlp_jsl.internal.TargetEntities"]], "sparknlp_jsl.internal": [[130, "module-sparknlp_jsl.internal"]], "assertiondlapproach (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[131, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[131, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertiondl": [[131, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[132, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[133, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[133, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deidentification": [[133, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "legaldocumenthashcoder (class in sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder)": [[134, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[134, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[135, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[136, "module-sparknlp_jsl.legal.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[137, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[137, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[137, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[138, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[139, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[139, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[139, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[140, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[141, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl)": [[142, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[142, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction)": [[143, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[143, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[144, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.seq_generation": [[145, "module-sparknlp_jsl.legal.seq_generation"]], "legalnerquestiongenerator (class in sparknlp_jsl.legal.seq_generation.qa_ner_generator)": [[146, "sparknlp_jsl.legal.seq_generation.qa_ner_generator.LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.seq_generation.qa_ner_generator": [[146, "module-sparknlp_jsl.legal.seq_generation.qa_ner_generator"]], "sparknlp_jsl.legal.sequence_classification": [[147, "module-sparknlp_jsl.legal.sequence_classification"]], "legalbertforsequenceclassification (class in sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification)": [[148, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification"]], "loadsavedmodel() (legalbertforsequenceclassification static method)": [[148, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertforsequenceclassification static method)": [[148, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModelOpenSource"]], "name (legalbertforsequenceclassification attribute)": [[148, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.name"]], "pretrained() (legalbertforsequenceclassification static method)": [[148, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[148, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "legalclassifierdlapproach (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[149, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach"]], "legalclassifierdlmodel (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[149, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel"]], "name (legalclassifierdlmodel attribute)": [[149, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.name"]], "pretrained() (legalclassifierdlmodel static method)": [[149, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[149, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "sparknlp_jsl.legal.token_classification": [[150, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[151, "module-sparknlp_jsl.legal.token_classification.ner"]], "legalbertfortokenclassification (class in sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier)": [[152, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification"]], "loadsavedmodel() (legalbertfortokenclassification static method)": [[152, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertfortokenclassification static method)": [[152, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModelOpenSource"]], "name (legalbertfortokenclassification attribute)": [[152, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.name"]], "pretrained() (legalbertfortokenclassification static method)": [[152, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[152, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "legalnerapproach (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[153, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach"]], "legalnermodel (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[153, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel"]], "loadsavedmodel() (legalnermodel static method)": [[153, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.loadSavedModel"]], "name (legalnermodel attribute)": [[153, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.name"]], "pretrained() (legalnermodel static method)": [[153, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[153, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "zeroshotnermodel (class in sparknlp_jsl.legal.token_classification.ner.zero_shot_ner)": [[154, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[154, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "modeltracer (class in sparknlp_jsl.modeltracer)": [[155, "sparknlp_jsl.modelTracer.ModelTracer"]], "adduidcols() (modeltracer method)": [[155, "sparknlp_jsl.modelTracer.ModelTracer.addUidCols"]], "sparknlp_jsl.modeltracer": [[155, "module-sparknlp_jsl.modelTracer"]], "internalresourcedownloader (class in sparknlp_jsl.pretrained)": [[156, "sparknlp_jsl.pretrained.InternalResourceDownloader"]], "downloadmodel() (internalresourcedownloader static method)": [[156, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModel"]], "printprogress() (in module sparknlp_jsl.pretrained)": [[156, "sparknlp_jsl.pretrained.printProgress"]], "returnprivatemodels() (internalresourcedownloader static method)": [[156, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivateModels"]], "returnprivatepipelines() (internalresourcedownloader static method)": [[156, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivatePipelines"]], "showavailableannotators() (internalresourcedownloader static method)": [[156, "sparknlp_jsl.pretrained.InternalResourceDownloader.showAvailableAnnotators"]], "showprivatemodels() (internalresourcedownloader static method)": [[156, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivateModels"]], "showprivatepipelines() (internalresourcedownloader static method)": [[156, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivatePipelines"]], "showuncategorizedresources() (internalresourcedownloader static method)": [[156, "sparknlp_jsl.pretrained.InternalResourceDownloader.showUnCategorizedResources"]], "sparknlp_jsl.pretrained": [[156, "module-sparknlp_jsl.pretrained"]], "structureddeidentification (class in sparknlp_jsl.structured_deidentification)": [[157, "sparknlp_jsl.structured_deidentification.StructuredDeidentification"]], "obfuscatecolumns() (structureddeidentification method)": [[157, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateColumns"]], "sparknlp_jsl.structured_deidentification": [[157, "module-sparknlp_jsl.structured_deidentification"]], "texttodocumentscolumns (class in sparknlp_jsl.text_to_documents_columns)": [[158, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns": [[158, "module-sparknlp_jsl.text_to_documents_columns"]], "todocumentscolumns() (texttodocumentscolumns method)": [[158, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumns"]], "annotationtooljsonreader (class in sparknlp_jsl.training)": [[159, "sparknlp_jsl.training.AnnotationToolJsonReader"]], "cantemistreader (class in sparknlp_jsl.training)": [[159, "sparknlp_jsl.training.CantemistReader"]], "codiespreader (class in sparknlp_jsl.training)": [[159, "sparknlp_jsl.training.CodiEspReader"]], "synonymaugmentationumls (class in sparknlp_jsl.training)": [[159, "sparknlp_jsl.training.SynonymAugmentationUMLS"]], "augmentcsv() (synonymaugmentationumls method)": [[159, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentCsv"]], "augmentdataframe() (synonymaugmentationumls method)": [[159, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentDataFrame"]], "generateassertiontrainset() (annotationtooljsonreader method)": [[159, "sparknlp_jsl.training.AnnotationToolJsonReader.generateAssertionTrainSet"]], "generateconll() (annotationtooljsonreader method)": [[159, "sparknlp_jsl.training.AnnotationToolJsonReader.generateConll"]], "generateplainassertiontrainset() (annotationtooljsonreader method)": [[159, "sparknlp_jsl.training.AnnotationToolJsonReader.generatePlainAssertionTrainSet"]], "readdataset() (annotationtooljsonreader method)": [[159, "sparknlp_jsl.training.AnnotationToolJsonReader.readDataset"]], "readdatasettaskner() (cantemistreader method)": [[159, "sparknlp_jsl.training.CantemistReader.readDatasetTaskNer"]], "readdatasettaskx() (codiespreader method)": [[159, "sparknlp_jsl.training.CodiEspReader.readDatasetTaskX"]], "sparknlp_jsl.training": [[159, "module-sparknlp_jsl.training"]], "tf_graph (in module sparknlp_jsl.training)": [[159, "sparknlp_jsl.training.tf_graph"]], "tf_graph_1x (in module sparknlp_jsl.training)": [[159, "sparknlp_jsl.training.tf_graph_1x"]], "updatemodels (class in sparknlp_jsl.updatemodels)": [[160, "sparknlp_jsl.updateModels.UpdateModels"]], "sparknlp_jsl.updatemodels": [[160, "module-sparknlp_jsl.updateModels"]], "updatecachemodels() (updatemodels static method)": [[160, "sparknlp_jsl.updateModels.UpdateModels.updateCacheModels"]], "updatemodels() (updatemodels static method)": [[160, "sparknlp_jsl.updateModels.UpdateModels.updateModels"]], "get_mt_samples() (in module sparknlp_jsl.util)": [[161, "sparknlp_jsl.util.get_mt_samples"]], "sparknlp_jsl.util": [[161, "module-sparknlp_jsl.util"]], "get_ner_df() (in module sparknlp_jsl.utils.alab_utils)": [[162, "sparknlp_jsl.utils.alab_utils.get_ner_df"]], "get_ner_sentence_borders() (in module sparknlp_jsl.utils.alab_utils)": [[162, "sparknlp_jsl.utils.alab_utils.get_ner_sentence_borders"]], "get_nlp_pos_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[162, "sparknlp_jsl.utils.alab_utils.get_nlp_pos_pipeline"]], "get_nlp_regex_pos_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[162, "sparknlp_jsl.utils.alab_utils.get_nlp_regex_pos_pipeline"]], "get_nlp_regex_token_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[162, "sparknlp_jsl.utils.alab_utils.get_nlp_regex_token_pipeline"]], "get_nlp_token_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[162, "sparknlp_jsl.utils.alab_utils.get_nlp_token_pipeline"]], "get_rel_df() (in module sparknlp_jsl.utils.alab_utils)": [[162, "sparknlp_jsl.utils.alab_utils.get_rel_df"]], "get_sentence_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[162, "sparknlp_jsl.utils.alab_utils.get_sentence_pipeline"]], "get_single_task_conll() (in module sparknlp_jsl.utils.alab_utils)": [[162, "sparknlp_jsl.utils.alab_utils.get_single_task_conll"]], "sparknlp_jsl.utils.alab_utils": [[162, "module-sparknlp_jsl.utils.alab_utils"]], "sparknlp_jsl.utils": [[163, "module-sparknlp_jsl.utils"]]}})